
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c8c  0800ae60  0800ae60  0001ae60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baec  0800baec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800baec  0800baec  0001baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf4  0800baf4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf4  0800baf4  0001baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c40  200001e0  0800bcdc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e20  0800bcdc  00020e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff7f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d9  00000000  00000000  0003018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00032768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  000335c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018355  00000000  00000000  00034320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a30  00000000  00000000  0004c675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd4a  00000000  00000000  0005e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eddef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005084  00000000  00000000  000ede40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae48 	.word	0x0800ae48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800ae48 	.word	0x0800ae48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b9aa 	b.w	8000f64 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f83c 	bl	8000c94 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2lz>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	f7ff ff5b 	bl	8000aec <__aeabi_dcmplt>
 8000c36:	b928      	cbnz	r0, 8000c44 <__aeabi_d2lz+0x1c>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c40:	f000 b80a 	b.w	8000c58 <__aeabi_d2ulz>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c4a:	f000 f805 	bl	8000c58 <__aeabi_d2ulz>
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2ulz>:
 8000c58:	b5d0      	push	{r4, r6, r7, lr}
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__aeabi_d2ulz+0x34>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4606      	mov	r6, r0
 8000c60:	460f      	mov	r7, r1
 8000c62:	f7ff fcd1 	bl	8000608 <__aeabi_dmul>
 8000c66:	f7ff ffa7 	bl	8000bb8 <__aeabi_d2uiz>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	f7ff fc52 	bl	8000514 <__aeabi_ui2d>
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <__aeabi_d2ulz+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f7ff fcc8 	bl	8000608 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4639      	mov	r1, r7
 8000c80:	f7ff fb0a 	bl	8000298 <__aeabi_dsub>
 8000c84:	f7ff ff98 	bl	8000bb8 <__aeabi_d2uiz>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c8c:	3df00000 	.word	0x3df00000
 8000c90:	41f00000 	.word	0x41f00000

08000c94 <__udivmoddi4>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	9d08      	ldr	r5, [sp, #32]
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	468e      	mov	lr, r1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d14d      	bne.n	8000d3e <__udivmoddi4+0xaa>
 8000ca2:	428a      	cmp	r2, r1
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	d969      	bls.n	8000d7c <__udivmoddi4+0xe8>
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	b152      	cbz	r2, 8000cc4 <__udivmoddi4+0x30>
 8000cae:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb2:	f1c2 0120 	rsb	r1, r2, #32
 8000cb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc2:	4094      	lsls	r4, r2
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	0c21      	lsrs	r1, r4, #16
 8000cca:	fbbe f6f8 	udiv	r6, lr, r8
 8000cce:	fa1f f78c 	uxth.w	r7, ip
 8000cd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000cd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cda:	fb06 f107 	mul.w	r1, r6, r7
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x64>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 811f 	bcs.w	8000f2c <__udivmoddi4+0x298>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 811c 	bls.w	8000f2c <__udivmoddi4+0x298>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 f707 	mul.w	r7, r0, r7
 8000d0c:	42a7      	cmp	r7, r4
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x92>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d18:	f080 810a 	bcs.w	8000f30 <__udivmoddi4+0x29c>
 8000d1c:	42a7      	cmp	r7, r4
 8000d1e:	f240 8107 	bls.w	8000f30 <__udivmoddi4+0x29c>
 8000d22:	4464      	add	r4, ip
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	1be4      	subs	r4, r4, r7
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa4>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xc2>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80ef 	beq.w	8000f26 <__udivmoddi4+0x292>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x160>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd4>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80f9 	bhi.w	8000f5a <__udivmoddi4+0x2c6>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	469e      	mov	lr, r3
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa4>
 8000d76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa4>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xec>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 8092 	bne.w	8000eae <__udivmoddi4+0x21a>
 8000d8a:	eba1 010c 	sub.w	r1, r1, ip
 8000d8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	2601      	movs	r6, #1
 8000d98:	0c20      	lsrs	r0, r4, #16
 8000d9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000da2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da6:	fb0e f003 	mul.w	r0, lr, r3
 8000daa:	4288      	cmp	r0, r1
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x12c>
 8000dae:	eb1c 0101 	adds.w	r1, ip, r1
 8000db2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x12a>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f200 80cb 	bhi.w	8000f54 <__udivmoddi4+0x2c0>
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc8:	fb07 1110 	mls	r1, r7, r0, r1
 8000dcc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x156>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x154>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2ca>
 8000de8:	4608      	mov	r0, r1
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df2:	e79c      	b.n	8000d2e <__udivmoddi4+0x9a>
 8000df4:	f1c6 0720 	rsb	r7, r6, #32
 8000df8:	40b3      	lsls	r3, r6
 8000dfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e02:	fa20 f407 	lsr.w	r4, r0, r7
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	431c      	orrs	r4, r3
 8000e0c:	40f9      	lsrs	r1, r7
 8000e0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e12:	fa00 f306 	lsl.w	r3, r0, r6
 8000e16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1a:	0c20      	lsrs	r0, r4, #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fb09 1118 	mls	r1, r9, r8, r1
 8000e24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e28:	fb08 f00e 	mul.w	r0, r8, lr
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e32:	d90b      	bls.n	8000e4c <__udivmoddi4+0x1b8>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e3c:	f080 8088 	bcs.w	8000f50 <__udivmoddi4+0x2bc>
 8000e40:	4288      	cmp	r0, r1
 8000e42:	f240 8085 	bls.w	8000f50 <__udivmoddi4+0x2bc>
 8000e46:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	1a09      	subs	r1, r1, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e54:	fb09 1110 	mls	r1, r9, r0, r1
 8000e58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e60:	458e      	cmp	lr, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1e2>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e6c:	d26c      	bcs.n	8000f48 <__udivmoddi4+0x2b4>
 8000e6e:	458e      	cmp	lr, r1
 8000e70:	d96a      	bls.n	8000f48 <__udivmoddi4+0x2b4>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e7e:	eba1 010e 	sub.w	r1, r1, lr
 8000e82:	42a1      	cmp	r1, r4
 8000e84:	46c8      	mov	r8, r9
 8000e86:	46a6      	mov	lr, r4
 8000e88:	d356      	bcc.n	8000f38 <__udivmoddi4+0x2a4>
 8000e8a:	d053      	beq.n	8000f34 <__udivmoddi4+0x2a0>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x212>
 8000e8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e92:	eb61 010e 	sbc.w	r1, r1, lr
 8000e96:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e9e:	40f1      	lsrs	r1, r6
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	f1c2 0320 	rsb	r3, r2, #32
 8000eb2:	40d8      	lsrs	r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	4301      	orrs	r1, r0
 8000ec0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec4:	fa1f fe8c 	uxth.w	lr, ip
 8000ec8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ecc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed0:	0c0b      	lsrs	r3, r1, #16
 8000ed2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ed6:	fb00 f60e 	mul.w	r6, r0, lr
 8000eda:	429e      	cmp	r6, r3
 8000edc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x260>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eea:	d22f      	bcs.n	8000f4c <__udivmoddi4+0x2b8>
 8000eec:	429e      	cmp	r6, r3
 8000eee:	d92d      	bls.n	8000f4c <__udivmoddi4+0x2b8>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1b9b      	subs	r3, r3, r6
 8000ef6:	b289      	uxth	r1, r1
 8000ef8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000efc:	fb07 3316 	mls	r3, r7, r6, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb06 f30e 	mul.w	r3, r6, lr
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x28a>
 8000f0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f14:	d216      	bcs.n	8000f44 <__udivmoddi4+0x2b0>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d914      	bls.n	8000f44 <__udivmoddi4+0x2b0>
 8000f1a:	3e02      	subs	r6, #2
 8000f1c:	4461      	add	r1, ip
 8000f1e:	1ac9      	subs	r1, r1, r3
 8000f20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f24:	e738      	b.n	8000d98 <__udivmoddi4+0x104>
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e705      	b.n	8000d38 <__udivmoddi4+0xa4>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e3      	b.n	8000cf8 <__udivmoddi4+0x64>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6f8      	b.n	8000d26 <__udivmoddi4+0x92>
 8000f34:	454b      	cmp	r3, r9
 8000f36:	d2a9      	bcs.n	8000e8c <__udivmoddi4+0x1f8>
 8000f38:	ebb9 0802 	subs.w	r8, r9, r2
 8000f3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7a3      	b.n	8000e8c <__udivmoddi4+0x1f8>
 8000f44:	4646      	mov	r6, r8
 8000f46:	e7ea      	b.n	8000f1e <__udivmoddi4+0x28a>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	e794      	b.n	8000e76 <__udivmoddi4+0x1e2>
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	e7d1      	b.n	8000ef4 <__udivmoddi4+0x260>
 8000f50:	46d0      	mov	r8, sl
 8000f52:	e77b      	b.n	8000e4c <__udivmoddi4+0x1b8>
 8000f54:	3b02      	subs	r3, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	e732      	b.n	8000dc0 <__udivmoddi4+0x12c>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e709      	b.n	8000d72 <__udivmoddi4+0xde>
 8000f5e:	4464      	add	r4, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x156>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <initEXIT>:
#include "stm32f4xx.h"
#include "stm32f4xx_it.h"

unsigned char intterruptEvent_Flag = 0;

void initEXIT(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// Enable GPIO Clock
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <initEXIT+0x7c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <initEXIT+0x7c>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER &= ~3U << 6;					// GPIO B3 set 00 - INPUT
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <initEXIT+0x80>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <initEXIT+0x80>)
 8000fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fbe:	6013      	str	r3, [r2, #0]
	GPIOB -> PUPDR &= ~3U << 6;					// No pull-up|pull-down
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <initEXIT+0x80>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <initEXIT+0x80>)
 8000fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fca:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI3_IRQn);					// Enable interrupt
 8000fcc:	2009      	movs	r0, #9
 8000fce:	f7ff ffcb 	bl	8000f68 <__NVIC_EnableIRQ>

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <initEXIT+0x7c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <initEXIT+0x7c>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG -> EXTICR[0] &= SYSCFG_EXTICR1_EXTI3;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <initEXIT+0x84>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <initEXIT+0x84>)
 8000fe4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000fe8:	6093      	str	r3, [r2, #8]
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <initEXIT+0x84>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <initEXIT+0x84>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6093      	str	r3, [r2, #8]

	EXTI -> RTSR &= ~EXTI_RTSR_TR3;				// Disable rising trigger
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <initEXIT+0x88>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <initEXIT+0x88>)
 8000ffc:	f023 0308 	bic.w	r3, r3, #8
 8001000:	6093      	str	r3, [r2, #8]
	EXTI -> RTSR |= EXTI_FTSR_TR3;				// Enable falling trigger
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <initEXIT+0x88>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <initEXIT+0x88>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6093      	str	r3, [r2, #8]

//	EXTI -> RTSR |= EXTI_RTSR_TR3;
//	EXTI -> RTSR &= ~EXTI_FTSR_TR3;

	EXTI -> IMR |= EXTI_IMR_IM3;				// Interrupt Mask 1 = not mask
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <initEXIT+0x88>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a06      	ldr	r2, [pc, #24]	; (800102c <initEXIT+0x88>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40020400 	.word	0x40020400
 8001028:	40013800 	.word	0x40013800
 800102c:	40013c00 	.word	0x40013c00

08001030 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void) {
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR3) != 0) {
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <EXTI3_IRQHandler+0x2c>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <EXTI3_IRQHandler+0x22>
		intterruptEvent_Flag = 1;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <EXTI3_IRQHandler+0x30>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= EXTI_PR_PR3;
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <EXTI3_IRQHandler+0x2c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <EXTI3_IRQHandler+0x2c>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6153      	str	r3, [r2, #20]
	}
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40013c00 	.word	0x40013c00
 8001060:	200001fc 	.word	0x200001fc

08001064 <callGNSS>:
 * 	11	- East/West indicator
 * 	12	- Mode
 * 	13	- Checksum
 *
 */
unsigned char callGNSS(char* lat_out, char* lon_out, char* timeS_out, char* dateS_out) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
	UART6_Debug("[GPS] -> CALL\r\n");
 8001072:	4875      	ldr	r0, [pc, #468]	; (8001248 <callGNSS+0x1e4>)
 8001074:	f001 fb20 	bl	80026b8 <UART6_Debug>

	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	2100      	movs	r1, #0
 800107c:	4873      	ldr	r0, [pc, #460]	; (800124c <callGNSS+0x1e8>)
 800107e:	f005 fc61 	bl	8006944 <memset>
	SendCMD_LTE((char *) "AT+QGPSCFG=\"outport\",\"uartdebug\"\r\n");
 8001082:	4873      	ldr	r0, [pc, #460]	; (8001250 <callGNSS+0x1ec>)
 8001084:	f001 fb44 	bl	8002710 <SendCMD_LTE>
	UART6_Debug("[GPS] -> REQ.\r\n");
 8001088:	4872      	ldr	r0, [pc, #456]	; (8001254 <callGNSS+0x1f0>)
 800108a:	f001 fb15 	bl	80026b8 <UART6_Debug>


	// TIME OUT
	sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 800108e:	4b72      	ldr	r3, [pc, #456]	; (8001258 <callGNSS+0x1f4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a71      	ldr	r2, [pc, #452]	; (8001258 <callGNSS+0x1f4>)
 8001094:	60d3      	str	r3, [r2, #12]
	while(findTarget(lteComm_MainBuff, "GPRMC") != 1){
 8001096:	e01a      	b.n	80010ce <callGNSS+0x6a>
		if(sysCounter.main_ms_counter == 0) {
 8001098:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <callGNSS+0x1f4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <callGNSS+0x42>
			sysCounter.prev_msgTimeOut = 0;
 80010a0:	4b6d      	ldr	r3, [pc, #436]	; (8001258 <callGNSS+0x1f4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
		}

		if((sysCounter.main_ms_counter - sysCounter.prev_msgTimeOut) >= 10000) {
 80010a6:	4b6c      	ldr	r3, [pc, #432]	; (8001258 <callGNSS+0x1f4>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b6b      	ldr	r3, [pc, #428]	; (8001258 <callGNSS+0x1f4>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d90a      	bls.n	80010ce <callGNSS+0x6a>
			UART6_Debug("[GPS] -> TIMEOUT\r\n");
 80010b8:	4868      	ldr	r0, [pc, #416]	; (800125c <callGNSS+0x1f8>)
 80010ba:	f001 fafd 	bl	80026b8 <UART6_Debug>
			returnValue = 2;
 80010be:	4b68      	ldr	r3, [pc, #416]	; (8001260 <callGNSS+0x1fc>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	701a      	strb	r2, [r3, #0]
			sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 80010c4:	4b64      	ldr	r3, [pc, #400]	; (8001258 <callGNSS+0x1f4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a63      	ldr	r2, [pc, #396]	; (8001258 <callGNSS+0x1f4>)
 80010ca:	60d3      	str	r3, [r2, #12]
			goto END;
 80010cc:	e0b3      	b.n	8001236 <callGNSS+0x1d2>
	while(findTarget(lteComm_MainBuff, "GPRMC") != 1){
 80010ce:	4965      	ldr	r1, [pc, #404]	; (8001264 <callGNSS+0x200>)
 80010d0:	485e      	ldr	r0, [pc, #376]	; (800124c <callGNSS+0x1e8>)
 80010d2:	f001 fb95 	bl	8002800 <findTarget>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d1dd      	bne.n	8001098 <callGNSS+0x34>
		}
	}

	memcpy(GNSS_temp, lteComm_MainBuff, sizeof(GNSS_temp));
 80010dc:	4a62      	ldr	r2, [pc, #392]	; (8001268 <callGNSS+0x204>)
 80010de:	4b5b      	ldr	r3, [pc, #364]	; (800124c <callGNSS+0x1e8>)
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	461a      	mov	r2, r3
 80010e8:	f005 fc1e 	bl	8006928 <memcpy>
	UART6_Debug("[GPS] -> DUMP\r\n");
 80010ec:	485f      	ldr	r0, [pc, #380]	; (800126c <callGNSS+0x208>)
 80010ee:	f001 fae3 	bl	80026b8 <UART6_Debug>
	UART6_Debug(GNSS_temp);
 80010f2:	485d      	ldr	r0, [pc, #372]	; (8001268 <callGNSS+0x204>)
 80010f4:	f001 fae0 	bl	80026b8 <UART6_Debug>
	UART6_Debug("\r\n");
 80010f8:	485d      	ldr	r0, [pc, #372]	; (8001270 <callGNSS+0x20c>)
 80010fa:	f001 fadd 	bl	80026b8 <UART6_Debug>
	HAL_Delay(2);
 80010fe:	2002      	movs	r0, #2
 8001100:	f002 fa04 	bl	800350c <HAL_Delay>

	processFlag = NMEACRCCal((unsigned char *) GNSS_temp);
 8001104:	4858      	ldr	r0, [pc, #352]	; (8001268 <callGNSS+0x204>)
 8001106:	f001 fe69 	bl	8002ddc <NMEACRCCal>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b59      	ldr	r3, [pc, #356]	; (8001274 <callGNSS+0x210>)
 8001110:	701a      	strb	r2, [r3, #0]

	if(processFlag == 1) {
 8001112:	4b58      	ldr	r3, [pc, #352]	; (8001274 <callGNSS+0x210>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d17e      	bne.n	8001218 <callGNSS+0x1b4>
		UART6_Debug("[GPS] -> PROCESS\r\n");
 800111a:	4857      	ldr	r0, [pc, #348]	; (8001278 <callGNSS+0x214>)
 800111c:	f001 facc 	bl	80026b8 <UART6_Debug>
		// Clear old pos.
		memset(lat_out, 0x00, strlen(lat_out));
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff f85d 	bl	80001e0 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f005 fc09 	bl	8006944 <memset>
		memset(lon_out, 0x00, strlen(lon_out));
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f7ff f854 	bl	80001e0 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	2100      	movs	r1, #0
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f005 fc00 	bl	8006944 <memset>
		memset(timeS_out, 0x00, strlen(timeS_out));
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f84b 	bl	80001e0 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	2100      	movs	r1, #0
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f005 fbf7 	bl	8006944 <memset>
		memset(dateS_out, 0x00, strlen(dateS_out));
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f7ff f842 	bl	80001e0 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f005 fbee 	bl	8006944 <memset>
		memset(latDir, 0x00, strlen(latDir));
 8001168:	4844      	ldr	r0, [pc, #272]	; (800127c <callGNSS+0x218>)
 800116a:	f7ff f839 	bl	80001e0 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	2100      	movs	r1, #0
 8001174:	4841      	ldr	r0, [pc, #260]	; (800127c <callGNSS+0x218>)
 8001176:	f005 fbe5 	bl	8006944 <memset>
		memset(lonDir, 0x00, strlen(lonDir));
 800117a:	4841      	ldr	r0, [pc, #260]	; (8001280 <callGNSS+0x21c>)
 800117c:	f7ff f830 	bl	80001e0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	2100      	movs	r1, #0
 8001186:	483e      	ldr	r0, [pc, #248]	; (8001280 <callGNSS+0x21c>)
 8001188:	f005 fbdc 	bl	8006944 <memset>

		// Delimit
		Delimiter(GNSS_temp, ',', 3, 80, latTemp);
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <callGNSS+0x220>)
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2350      	movs	r3, #80	; 0x50
 8001192:	2203      	movs	r2, #3
 8001194:	212c      	movs	r1, #44	; 0x2c
 8001196:	4834      	ldr	r0, [pc, #208]	; (8001268 <callGNSS+0x204>)
 8001198:	f001 fd71 	bl	8002c7e <Delimiter>
		Delimiter(GNSS_temp, ',', 4, 80, (unsigned char *)latDir);
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <callGNSS+0x218>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2350      	movs	r3, #80	; 0x50
 80011a2:	2204      	movs	r2, #4
 80011a4:	212c      	movs	r1, #44	; 0x2c
 80011a6:	4830      	ldr	r0, [pc, #192]	; (8001268 <callGNSS+0x204>)
 80011a8:	f001 fd69 	bl	8002c7e <Delimiter>
		Delimiter(GNSS_temp, ',', 5, 80, lonTemp);
 80011ac:	4b36      	ldr	r3, [pc, #216]	; (8001288 <callGNSS+0x224>)
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2350      	movs	r3, #80	; 0x50
 80011b2:	2205      	movs	r2, #5
 80011b4:	212c      	movs	r1, #44	; 0x2c
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <callGNSS+0x204>)
 80011b8:	f001 fd61 	bl	8002c7e <Delimiter>
		Delimiter(GNSS_temp, ',', 6, 80, (unsigned char *)lonDir);
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <callGNSS+0x21c>)
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2350      	movs	r3, #80	; 0x50
 80011c2:	2206      	movs	r2, #6
 80011c4:	212c      	movs	r1, #44	; 0x2c
 80011c6:	4828      	ldr	r0, [pc, #160]	; (8001268 <callGNSS+0x204>)
 80011c8:	f001 fd59 	bl	8002c7e <Delimiter>

		Delimiter(GNSS_temp, ',', 1, 80, timeTemp);
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <callGNSS+0x228>)
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2350      	movs	r3, #80	; 0x50
 80011d2:	2201      	movs	r2, #1
 80011d4:	212c      	movs	r1, #44	; 0x2c
 80011d6:	4824      	ldr	r0, [pc, #144]	; (8001268 <callGNSS+0x204>)
 80011d8:	f001 fd51 	bl	8002c7e <Delimiter>
		Delimiter(GNSS_temp, ',', 9, 80, dateTemp);
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <callGNSS+0x22c>)
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2350      	movs	r3, #80	; 0x50
 80011e2:	2209      	movs	r2, #9
 80011e4:	212c      	movs	r1, #44	; 0x2c
 80011e6:	4820      	ldr	r0, [pc, #128]	; (8001268 <callGNSS+0x204>)
 80011e8:	f001 fd49 	bl	8002c7e <Delimiter>

		// Put new pos.
		NMEAdecoder((char *)latTemp, &latDir[0], lat_out);
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4923      	ldr	r1, [pc, #140]	; (800127c <callGNSS+0x218>)
 80011f0:	4824      	ldr	r0, [pc, #144]	; (8001284 <callGNSS+0x220>)
 80011f2:	f000 f855 	bl	80012a0 <NMEAdecoder>
		NMEAdecoder((char *)lonTemp, &lonDir[0], lon_out);
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	4921      	ldr	r1, [pc, #132]	; (8001280 <callGNSS+0x21c>)
 80011fa:	4823      	ldr	r0, [pc, #140]	; (8001288 <callGNSS+0x224>)
 80011fc:	f000 f850 	bl	80012a0 <NMEAdecoder>
		// Decode time and date
		NMEAgetTime((char *)timeTemp, timeS_out);
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4822      	ldr	r0, [pc, #136]	; (800128c <callGNSS+0x228>)
 8001204:	f000 f8ae 	bl	8001364 <NMEAgetTime>
		NMEAgetDate((char *)dateTemp, dateS_out);
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	4821      	ldr	r0, [pc, #132]	; (8001290 <callGNSS+0x22c>)
 800120c:	f000 f926 	bl	800145c <NMEAgetDate>

		returnValue = 1;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <callGNSS+0x1fc>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	e002      	b.n	800121e <callGNSS+0x1ba>
	}else {
		returnValue = 2;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <callGNSS+0x1fc>)
 800121a:	2202      	movs	r2, #2
 800121c:	701a      	strb	r2, [r3, #0]
	}

	// Dumb way to turn off GMSS @_@
	SendCMD_LTE((char *) "AT+QGPSCFG=\"outport\",\"none\"\r\n");
 800121e:	481d      	ldr	r0, [pc, #116]	; (8001294 <callGNSS+0x230>)
 8001220:	f001 fa76 	bl	8002710 <SendCMD_LTE>
	while(findTarget(lteComm_MainBuff, "OK") != 1);
 8001224:	bf00      	nop
 8001226:	491c      	ldr	r1, [pc, #112]	; (8001298 <callGNSS+0x234>)
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <callGNSS+0x1e8>)
 800122a:	f001 fae9 	bl	8002800 <findTarget>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d1f8      	bne.n	8001226 <callGNSS+0x1c2>



END:
 8001234:	bf00      	nop
	UART6_Debug("[GPS] -> DONE\r\n");
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <callGNSS+0x238>)
 8001238:	f001 fa3e 	bl	80026b8 <UART6_Debug>
	return returnValue;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <callGNSS+0x1fc>)
 800123e:	781b      	ldrb	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	0800ae60 	.word	0x0800ae60
 800124c:	20000a74 	.word	0x20000a74
 8001250:	0800ae70 	.word	0x0800ae70
 8001254:	0800ae94 	.word	0x0800ae94
 8001258:	20000d54 	.word	0x20000d54
 800125c:	0800aea4 	.word	0x0800aea4
 8001260:	200002e3 	.word	0x200002e3
 8001264:	0800aeb8 	.word	0x0800aeb8
 8001268:	2000021c 	.word	0x2000021c
 800126c:	0800aec0 	.word	0x0800aec0
 8001270:	0800aed0 	.word	0x0800aed0
 8001274:	200002e2 	.word	0x200002e2
 8001278:	0800aed4 	.word	0x0800aed4
 800127c:	200002dc 	.word	0x200002dc
 8001280:	200002e0 	.word	0x200002e0
 8001284:	2000029c 	.word	0x2000029c
 8001288:	200002ac 	.word	0x200002ac
 800128c:	200002bc 	.word	0x200002bc
 8001290:	200002cc 	.word	0x200002cc
 8001294:	0800aee8 	.word	0x0800aee8
 8001298:	0800af08 	.word	0x0800af08
 800129c:	0800af0c 	.word	0x0800af0c

080012a0 <NMEAdecoder>:


void NMEAdecoder(char* NMEAin_C, char* dir, char* out) {
 80012a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012a4:	b08c      	sub	sp, #48	; 0x30
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
	double conv_f = atof(NMEAin_C);
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f005 fb08 	bl	80068c4 <atof>
 80012b4:	ed87 0b08 	vstr	d0, [r7, #32]

	int pos_D = (conv_f/100);
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <NMEAdecoder+0xb8>)
 80012be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012c2:	f7ff facb 	bl	800085c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc4b 	bl	8000b68 <__aeabi_d2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	61fb      	str	r3, [r7, #28]
	double pos_M = (conv_f - (pos_D*100));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	2264      	movs	r2, #100	; 0x64
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f928 	bl	8000534 <__aeabi_i2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012ec:	f7fe ffd4 	bl	8000298 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double final_pos = pos_D + (pos_M/60);
 80012f8:	69f8      	ldr	r0, [r7, #28]
 80012fa:	f7ff f91b 	bl	8000534 <__aeabi_i2d>
 80012fe:	4680      	mov	r8, r0
 8001300:	4689      	mov	r9, r1
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <NMEAdecoder+0xbc>)
 8001308:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130c:	f7ff faa6 	bl	800085c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4640      	mov	r0, r8
 8001316:	4649      	mov	r1, r9
 8001318:	f7fe ffc0 	bl	800029c <__adddf3>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if(*dir == 'S' || *dir == 'W') {
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b53      	cmp	r3, #83	; 0x53
 800132a:	d003      	beq.n	8001334 <NMEAdecoder+0x94>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b57      	cmp	r3, #87	; 0x57
 8001332:	d105      	bne.n	8001340 <NMEAdecoder+0xa0>
		final_pos = final_pos*-1;
 8001334:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800133c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	}

	sprintf(out, "%.6f", final_pos);
 8001340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <NMEAdecoder+0xc0>)
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f005 ff6e 	bl	8007228 <siprintf>

}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	; 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001356:	bf00      	nop
 8001358:	40590000 	.word	0x40590000
 800135c:	404e0000 	.word	0x404e0000
 8001360:	0800af1c 	.word	0x0800af1c

08001364 <NMEAgetTime>:


void NMEAgetTime(char* time_in, char* out) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	int temp = atoi(time_in);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f005 faab 	bl	80068ca <atoi>
 8001374:	60f8      	str	r0, [r7, #12]

	hr = (temp/10000) + (UTC/100);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4a31      	ldr	r2, [pc, #196]	; (8001440 <NMEAgetTime+0xdc>)
 800137a:	fb82 1203 	smull	r1, r2, r2, r3
 800137e:	1312      	asrs	r2, r2, #12
 8001380:	17db      	asrs	r3, r3, #31
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	3307      	adds	r3, #7
 8001386:	4a2f      	ldr	r2, [pc, #188]	; (8001444 <NMEAgetTime+0xe0>)
 8001388:	6013      	str	r3, [r2, #0]
	min = (temp/100)%100 + (UTC%100);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <NMEAgetTime+0xe4>)
 800138e:	fb82 1203 	smull	r1, r2, r2, r3
 8001392:	1152      	asrs	r2, r2, #5
 8001394:	17db      	asrs	r3, r3, #31
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <NMEAgetTime+0xe4>)
 800139a:	fb83 1302 	smull	r1, r3, r3, r2
 800139e:	1159      	asrs	r1, r3, #5
 80013a0:	17d3      	asrs	r3, r2, #31
 80013a2:	1acb      	subs	r3, r1, r3
 80013a4:	2164      	movs	r1, #100	; 0x64
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	4a27      	ldr	r2, [pc, #156]	; (800144c <NMEAgetTime+0xe8>)
 80013ae:	6013      	str	r3, [r2, #0]
	sec = temp%100;
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4b25      	ldr	r3, [pc, #148]	; (8001448 <NMEAgetTime+0xe4>)
 80013b4:	fb83 1302 	smull	r1, r3, r3, r2
 80013b8:	1159      	asrs	r1, r3, #5
 80013ba:	17d3      	asrs	r3, r2, #31
 80013bc:	1acb      	subs	r3, r1, r3
 80013be:	2164      	movs	r1, #100	; 0x64
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <NMEAgetTime+0xec>)
 80013c8:	6013      	str	r3, [r2, #0]

	if(min > 59) {
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <NMEAgetTime+0xe8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b3b      	cmp	r3, #59	; 0x3b
 80013d0:	dd09      	ble.n	80013e6 <NMEAgetTime+0x82>
		min = min - 60;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <NMEAgetTime+0xe8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3b3c      	subs	r3, #60	; 0x3c
 80013d8:	4a1c      	ldr	r2, [pc, #112]	; (800144c <NMEAgetTime+0xe8>)
 80013da:	6013      	str	r3, [r2, #0]
		hr++;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <NMEAgetTime+0xe0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4a18      	ldr	r2, [pc, #96]	; (8001444 <NMEAgetTime+0xe0>)
 80013e4:	6013      	str	r3, [r2, #0]
	}
	if(hr < 0) {
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <NMEAgetTime+0xe0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da09      	bge.n	8001402 <NMEAgetTime+0x9e>
		hr = 24 + hr;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <NMEAgetTime+0xe0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3318      	adds	r3, #24
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <NMEAgetTime+0xe0>)
 80013f6:	6013      	str	r3, [r2, #0]
		daychange--;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <NMEAgetTime+0xf0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a15      	ldr	r2, [pc, #84]	; (8001454 <NMEAgetTime+0xf0>)
 8001400:	6013      	str	r3, [r2, #0]
	}
	if(hr >= 24) {
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <NMEAgetTime+0xe0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b17      	cmp	r3, #23
 8001408:	dd09      	ble.n	800141e <NMEAgetTime+0xba>
		hr = hr - 24;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <NMEAgetTime+0xe0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3b18      	subs	r3, #24
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <NMEAgetTime+0xe0>)
 8001412:	6013      	str	r3, [r2, #0]
		daychange++;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <NMEAgetTime+0xf0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <NMEAgetTime+0xf0>)
 800141c:	6013      	str	r3, [r2, #0]
	}

	sprintf(out, "%02d:%02d:%02d.000", hr, min, sec);
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <NMEAgetTime+0xe0>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <NMEAgetTime+0xe8>)
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <NMEAgetTime+0xec>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	460b      	mov	r3, r1
 800142e:	490a      	ldr	r1, [pc, #40]	; (8001458 <NMEAgetTime+0xf4>)
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f005 fef9 	bl	8007228 <siprintf>

}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	68db8bad 	.word	0x68db8bad
 8001444:	20000200 	.word	0x20000200
 8001448:	51eb851f 	.word	0x51eb851f
 800144c:	20000204 	.word	0x20000204
 8001450:	20000208 	.word	0x20000208
 8001454:	20000218 	.word	0x20000218
 8001458:	0800af24 	.word	0x0800af24

0800145c <NMEAgetDate>:


void NMEAgetDate(char* date_in, char* out) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af02      	add	r7, sp, #8
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	int temp = atoi(date_in);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f005 fa2f 	bl	80068ca <atoi>
 800146c:	60f8      	str	r0, [r7, #12]

	day = temp/10000;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <NMEAgetDate+0x94>)
 8001472:	fb82 1203 	smull	r1, r2, r2, r3
 8001476:	1312      	asrs	r2, r2, #12
 8001478:	17db      	asrs	r3, r3, #31
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <NMEAgetDate+0x98>)
 8001480:	601a      	str	r2, [r3, #0]
	mon = (temp/100)%100;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <NMEAgetDate+0x9c>)
 8001486:	fb82 1203 	smull	r1, r2, r2, r3
 800148a:	1152      	asrs	r2, r2, #5
 800148c:	17db      	asrs	r3, r3, #31
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <NMEAgetDate+0x9c>)
 8001492:	fb82 1203 	smull	r1, r2, r2, r3
 8001496:	1151      	asrs	r1, r2, #5
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	1a8a      	subs	r2, r1, r2
 800149c:	2164      	movs	r1, #100	; 0x64
 800149e:	fb01 f202 	mul.w	r2, r1, r2
 80014a2:	1a9a      	subs	r2, r3, r2
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <NMEAgetDate+0xa0>)
 80014a6:	601a      	str	r2, [r3, #0]
	year = temp%100;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <NMEAgetDate+0x9c>)
 80014ac:	fb82 1203 	smull	r1, r2, r2, r3
 80014b0:	1151      	asrs	r1, r2, #5
 80014b2:	17da      	asrs	r2, r3, #31
 80014b4:	1a8a      	subs	r2, r1, r2
 80014b6:	2164      	movs	r1, #100	; 0x64
 80014b8:	fb01 f202 	mul.w	r2, r1, r2
 80014bc:	1a9a      	subs	r2, r3, r2
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <NMEAgetDate+0xa4>)
 80014c0:	601a      	str	r2, [r3, #0]

	day = day+daychange;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <NMEAgetDate+0x98>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <NMEAgetDate+0xa8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <NMEAgetDate+0x98>)
 80014ce:	6013      	str	r3, [r2, #0]

	sprintf(out, "20%d-%02d-%02d", year, mon, day);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <NMEAgetDate+0xa4>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <NMEAgetDate+0xa0>)
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <NMEAgetDate+0x98>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	460b      	mov	r3, r1
 80014e0:	4909      	ldr	r1, [pc, #36]	; (8001508 <NMEAgetDate+0xac>)
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f005 fea0 	bl	8007228 <siprintf>

}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	68db8bad 	.word	0x68db8bad
 80014f4:	2000020c 	.word	0x2000020c
 80014f8:	51eb851f 	.word	0x51eb851f
 80014fc:	20000210 	.word	0x20000210
 8001500:	20000214 	.word	0x20000214
 8001504:	20000218 	.word	0x20000218
 8001508:	0800af38 	.word	0x0800af38

0800150c <clearText_Temp>:





void clearText_Temp(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	memset(TextTemp, 0x00, sizeof(TextTemp));
 8001510:	227d      	movs	r2, #125	; 0x7d
 8001512:	2100      	movs	r1, #0
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <clearText_Temp+0x14>)
 8001516:	f005 fa15 	bl	8006944 <memset>
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002e4 	.word	0x200002e4

08001524 <clearLTE_Temp>:

void clearLTE_Temp(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8001528:	22ff      	movs	r2, #255	; 0xff
 800152a:	2100      	movs	r1, #0
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <clearLTE_Temp+0x14>)
 800152e:	f005 fa09 	bl	8006944 <memset>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000a74 	.word	0x20000a74

0800153c <initLTE>:



void initLTE(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	//SerialDebug("[MCU] -> start initialize LTE module\r\n");

	for(unsigned char countSeq = 0; countSeq < 7; countSeq++) {
 8001542:	2300      	movs	r3, #0
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	e0b2      	b.n	80016ae <initLTE+0x172>

		switch(countSeq) {
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b06      	cmp	r3, #6
 800154c:	d833      	bhi.n	80015b6 <initLTE+0x7a>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <initLTE+0x18>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	08001571 	.word	0x08001571
 8001558:	0800157b 	.word	0x0800157b
 800155c:	08001585 	.word	0x08001585
 8001560:	0800158f 	.word	0x0800158f
 8001564:	08001599 	.word	0x08001599
 8001568:	080015a3 	.word	0x080015a3
 800156c:	080015ad 	.word	0x080015ad
			case 0 :	// Turn off echo
				sprintf(TextTemp, "ATE0\r\n");
 8001570:	4953      	ldr	r1, [pc, #332]	; (80016c0 <initLTE+0x184>)
 8001572:	4854      	ldr	r0, [pc, #336]	; (80016c4 <initLTE+0x188>)
 8001574:	f005 fe58 	bl	8007228 <siprintf>
				break;
 8001578:	e01d      	b.n	80015b6 <initLTE+0x7a>

			case 1 :
				sprintf(TextTemp, "AT&D1\r\n");
 800157a:	4953      	ldr	r1, [pc, #332]	; (80016c8 <initLTE+0x18c>)
 800157c:	4851      	ldr	r0, [pc, #324]	; (80016c4 <initLTE+0x188>)
 800157e:	f005 fe53 	bl	8007228 <siprintf>
				break;
 8001582:	e018      	b.n	80015b6 <initLTE+0x7a>

			case 2 :
				sprintf(TextTemp, "AT+QGPSEND\r\n");
 8001584:	4951      	ldr	r1, [pc, #324]	; (80016cc <initLTE+0x190>)
 8001586:	484f      	ldr	r0, [pc, #316]	; (80016c4 <initLTE+0x188>)
 8001588:	f005 fe4e 	bl	8007228 <siprintf>
				break;
 800158c:	e013      	b.n	80015b6 <initLTE+0x7a>

			case 3 :
				sprintf(TextTemp, "AT+QGPSCFG=\"outport\",\"none\"\r\n");
 800158e:	4950      	ldr	r1, [pc, #320]	; (80016d0 <initLTE+0x194>)
 8001590:	484c      	ldr	r0, [pc, #304]	; (80016c4 <initLTE+0x188>)
 8001592:	f005 fe49 	bl	8007228 <siprintf>
				break;
 8001596:	e00e      	b.n	80015b6 <initLTE+0x7a>

			case 4 :
				sprintf(TextTemp, "AT+QGPSCFG=\"nmeasrc\",1\r\n");
 8001598:	494e      	ldr	r1, [pc, #312]	; (80016d4 <initLTE+0x198>)
 800159a:	484a      	ldr	r0, [pc, #296]	; (80016c4 <initLTE+0x188>)
 800159c:	f005 fe44 	bl	8007228 <siprintf>
				break;
 80015a0:	e009      	b.n	80015b6 <initLTE+0x7a>

			case 5 :
				sprintf(TextTemp, "AT+QGPSCFG=\"gpsnmeatype\",2\r\n");
 80015a2:	494d      	ldr	r1, [pc, #308]	; (80016d8 <initLTE+0x19c>)
 80015a4:	4847      	ldr	r0, [pc, #284]	; (80016c4 <initLTE+0x188>)
 80015a6:	f005 fe3f 	bl	8007228 <siprintf>
				break;
 80015aa:	e004      	b.n	80015b6 <initLTE+0x7a>

			case 6 :
				sprintf(TextTemp, "AT+QGPS=1\r\n");
 80015ac:	494b      	ldr	r1, [pc, #300]	; (80016dc <initLTE+0x1a0>)
 80015ae:	4845      	ldr	r0, [pc, #276]	; (80016c4 <initLTE+0x188>)
 80015b0:	f005 fe3a 	bl	8007228 <siprintf>
				break;
 80015b4:	bf00      	nop

		}

		UART6_Debug((char *)TextTemp);
 80015b6:	4843      	ldr	r0, [pc, #268]	; (80016c4 <initLTE+0x188>)
 80015b8:	f001 f87e 	bl	80026b8 <UART6_Debug>
		UART6_Debug("\r\n");
 80015bc:	4848      	ldr	r0, [pc, #288]	; (80016e0 <initLTE+0x1a4>)
 80015be:	f001 f87b 	bl	80026b8 <UART6_Debug>

		SendCMD_LTE((char *)TextTemp);	// Sned CMD
 80015c2:	4840      	ldr	r0, [pc, #256]	; (80016c4 <initLTE+0x188>)
 80015c4:	f001 f8a4 	bl	8002710 <SendCMD_LTE>

		sysFlag.LTE_CMD_Send = 1;
 80015c8:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <initLTE+0x1a8>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80015ce:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <initLTE+0x1ac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a45      	ldr	r2, [pc, #276]	; (80016e8 <initLTE+0x1ac>)
 80015d4:	6053      	str	r3, [r2, #4]

		while(sysFlag.LTE_CMD_Send == 1) {
 80015d6:	e063      	b.n	80016a0 <initLTE+0x164>

			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 80015d8:	4944      	ldr	r1, [pc, #272]	; (80016ec <initLTE+0x1b0>)
 80015da:	4845      	ldr	r0, [pc, #276]	; (80016f0 <initLTE+0x1b4>)
 80015dc:	f001 f910 	bl	8002800 <findTarget>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d10e      	bne.n	8001604 <initLTE+0xc8>
				UART6_Debug("[LTE] -> OK\r\n");
 80015e6:	4843      	ldr	r0, [pc, #268]	; (80016f4 <initLTE+0x1b8>)
 80015e8:	f001 f866 	bl	80026b8 <UART6_Debug>

				sysFlag.LTE_CMD_Send = 0;
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <initLTE+0x1a8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80015f2:	f7ff ff97 	bl	8001524 <clearLTE_Temp>
				clearText_Temp();
 80015f6:	f7ff ff89 	bl	800150c <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <initLTE+0x1ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a3a      	ldr	r2, [pc, #232]	; (80016e8 <initLTE+0x1ac>)
 8001600:	6053      	str	r3, [r2, #4]
 8001602:	e04d      	b.n	80016a0 <initLTE+0x164>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8001604:	493c      	ldr	r1, [pc, #240]	; (80016f8 <initLTE+0x1bc>)
 8001606:	483a      	ldr	r0, [pc, #232]	; (80016f0 <initLTE+0x1b4>)
 8001608:	f001 f8fa 	bl	8002800 <findTarget>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d125      	bne.n	800165e <initLTE+0x122>
				UART6_Debug("[LTE] -> ERROR\n");
 8001612:	483a      	ldr	r0, [pc, #232]	; (80016fc <initLTE+0x1c0>)
 8001614:	f001 f850 	bl	80026b8 <UART6_Debug>
				UART6_Debug((char *)lteComm_MainBuff);
 8001618:	4835      	ldr	r0, [pc, #212]	; (80016f0 <initLTE+0x1b4>)
 800161a:	f001 f84d 	bl	80026b8 <UART6_Debug>
				UART6_Debug("\r\n");
 800161e:	4830      	ldr	r0, [pc, #192]	; (80016e0 <initLTE+0x1a4>)
 8001620:	f001 f84a 	bl	80026b8 <UART6_Debug>

				// Case 3 : Disable GNSS fail -> ignore error 505
				if(countSeq == 2 && findTarget(lteComm_MainBuff, "505") == 1) {
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d10a      	bne.n	8001640 <initLTE+0x104>
 800162a:	4935      	ldr	r1, [pc, #212]	; (8001700 <initLTE+0x1c4>)
 800162c:	4830      	ldr	r0, [pc, #192]	; (80016f0 <initLTE+0x1b4>)
 800162e:	f001 f8e7 	bl	8002800 <findTarget>
 8001632:	4603      	mov	r3, r0
 8001634:	2b01      	cmp	r3, #1
 8001636:	d103      	bne.n	8001640 <initLTE+0x104>
					sysFlag.LTE_INIT_ERROR = 0;
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <initLTE+0x1a8>)
 800163a:	2200      	movs	r2, #0
 800163c:	705a      	strb	r2, [r3, #1]
 800163e:	e002      	b.n	8001646 <initLTE+0x10a>
				}else {
					sysFlag.LTE_INIT_ERROR = 1;
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <initLTE+0x1a8>)
 8001642:	2201      	movs	r2, #1
 8001644:	705a      	strb	r2, [r3, #1]
				}

				sysFlag.LTE_CMD_Send = 0;
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <initLTE+0x1a8>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 800164c:	f7ff ff6a 	bl	8001524 <clearLTE_Temp>
				clearText_Temp();
 8001650:	f7ff ff5c 	bl	800150c <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <initLTE+0x1ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <initLTE+0x1ac>)
 800165a:	6053      	str	r3, [r2, #4]
 800165c:	e020      	b.n	80016a0 <initLTE+0x164>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <initLTE+0x1ac>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <initLTE+0x1ac>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <initLTE+0x1ac>)
 800166a:	8b52      	ldrh	r2, [r2, #26]
 800166c:	4293      	cmp	r3, r2
 800166e:	d317      	bcc.n	80016a0 <initLTE+0x164>
				if(sysCounter.main_ms_counter == 0) {
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <initLTE+0x1ac>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <initLTE+0x142>
					sysCounter.prev_LTEtimeout = 0;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <initLTE+0x1ac>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
				}

				UART6_Debug("[MCU] -> LTE TIME OUT\r\n");
 800167e:	4821      	ldr	r0, [pc, #132]	; (8001704 <initLTE+0x1c8>)
 8001680:	f001 f81a 	bl	80026b8 <UART6_Debug>

				sysFlag.LTE_INIT_ERROR = 1;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <initLTE+0x1a8>)
 8001686:	2201      	movs	r2, #1
 8001688:	705a      	strb	r2, [r3, #1]
				sysFlag.LTE_CMD_Send = 0;
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <initLTE+0x1a8>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8001690:	f7ff ff48 	bl	8001524 <clearLTE_Temp>
				clearText_Temp();
 8001694:	f7ff ff3a 	bl	800150c <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <initLTE+0x1ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <initLTE+0x1ac>)
 800169e:	6053      	str	r3, [r2, #4]
		while(sysFlag.LTE_CMD_Send == 1) {
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <initLTE+0x1a8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d097      	beq.n	80015d8 <initLTE+0x9c>
	for(unsigned char countSeq = 0; countSeq < 7; countSeq++) {
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	3301      	adds	r3, #1
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	f67f af49 	bls.w	8001548 <initLTE+0xc>
			}
		}
	}
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	0800af48 	.word	0x0800af48
 80016c4:	200002e4 	.word	0x200002e4
 80016c8:	0800af50 	.word	0x0800af50
 80016cc:	0800af58 	.word	0x0800af58
 80016d0:	0800af68 	.word	0x0800af68
 80016d4:	0800af88 	.word	0x0800af88
 80016d8:	0800afa4 	.word	0x0800afa4
 80016dc:	0800afc4 	.word	0x0800afc4
 80016e0:	0800afd0 	.word	0x0800afd0
 80016e4:	20000d70 	.word	0x20000d70
 80016e8:	20000d54 	.word	0x20000d54
 80016ec:	0800afd4 	.word	0x0800afd4
 80016f0:	20000a74 	.word	0x20000a74
 80016f4:	0800afd8 	.word	0x0800afd8
 80016f8:	0800afe8 	.word	0x0800afe8
 80016fc:	0800aff0 	.word	0x0800aff0
 8001700:	0800b000 	.word	0x0800b000
 8001704:	0800b004 	.word	0x0800b004

08001708 <SHUTDOWN_LTE>:
/*
 * Return value
 * 			1 - done
 * 			2 - error/time out
 */
unsigned char SHUTDOWN_LTE(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	SendCMD_LTE("AT+QPOWD\r\n");
 800170c:	4819      	ldr	r0, [pc, #100]	; (8001774 <SHUTDOWN_LTE+0x6c>)
 800170e:	f000 ffff 	bl	8002710 <SendCMD_LTE>
	globalSnedFlag = 1;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <SHUTDOWN_LTE+0x70>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <SHUTDOWN_LTE+0x74>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <SHUTDOWN_LTE+0x74>)
 800171e:	6053      	str	r3, [r2, #4]

	// reset counter
	if(sysCounter.main_ms_counter == 0) {
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <SHUTDOWN_LTE+0x74>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d11e      	bne.n	8001766 <SHUTDOWN_LTE+0x5e>
		sysCounter.prev_LTEtimeout = 0;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <SHUTDOWN_LTE+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
	}

	while(globalSnedFlag == 1) {
 800172e:	e01a      	b.n	8001766 <SHUTDOWN_LTE+0x5e>
		while(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
			globalSnedFlag = 0;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <SHUTDOWN_LTE+0x70>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
			return 1;
 8001736:	2301      	movs	r3, #1
 8001738:	e01a      	b.n	8001770 <SHUTDOWN_LTE+0x68>
		while(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
 800173a:	bf00      	nop
 800173c:	4910      	ldr	r1, [pc, #64]	; (8001780 <SHUTDOWN_LTE+0x78>)
 800173e:	4811      	ldr	r0, [pc, #68]	; (8001784 <SHUTDOWN_LTE+0x7c>)
 8001740:	f001 f85e 	bl	8002800 <findTarget>
 8001744:	4603      	mov	r3, r0
 8001746:	2b01      	cmp	r3, #1
 8001748:	d0f2      	beq.n	8001730 <SHUTDOWN_LTE+0x28>
		}
		// Time out
		if((sysCounter.main_ms_counter - sysCounter.prev_ERRORtime) >= 5000) {
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <SHUTDOWN_LTE+0x74>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <SHUTDOWN_LTE+0x74>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3287 	movw	r2, #4999	; 0x1387
 8001758:	4293      	cmp	r3, r2
 800175a:	d904      	bls.n	8001766 <SHUTDOWN_LTE+0x5e>
			globalSnedFlag = 0;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <SHUTDOWN_LTE+0x70>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
			return 2;
 8001762:	2302      	movs	r3, #2
 8001764:	e004      	b.n	8001770 <SHUTDOWN_LTE+0x68>
	while(globalSnedFlag == 1) {
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SHUTDOWN_LTE+0x70>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d0e5      	beq.n	800173a <SHUTDOWN_LTE+0x32>
		}
	}
	return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	0800b01c 	.word	0x0800b01c
 8001778:	20000361 	.word	0x20000361
 800177c:	20000d54 	.word	0x20000d54
 8001780:	0800b028 	.word	0x0800b028
 8001784:	20000a74 	.word	0x20000a74

08001788 <clearText_net_Temp>:
unsigned char Error = 0;	// 0 = No error | > 1 Error

char HTTP_URL_Temp[350];	// URL length max 350 byte


void clearText_net_Temp(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	memset(TextNetTemp, 0x00, sizeof(TextNetTemp));
 800178c:	227d      	movs	r2, #125	; 0x7d
 800178e:	2100      	movs	r1, #0
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <clearText_net_Temp+0x14>)
 8001792:	f005 f8d7 	bl	8006944 <memset>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200003b0 	.word	0x200003b0

080017a0 <addZero>:


// Fix single digit to 2 digit
void addZero(char* in, char* out) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	temp = atoi(in);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f005 f88d 	bl	80068ca <atoi>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <addZero+0x3c>)
 80017b4:	6013      	str	r3, [r2, #0]

    if(temp < 10){
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <addZero+0x3c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	dc07      	bgt.n	80017ce <addZero+0x2e>
        sprintf(out, "0%d", temp);
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <addZero+0x3c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4906      	ldr	r1, [pc, #24]	; (80017e0 <addZero+0x40>)
 80017c6:	6838      	ldr	r0, [r7, #0]
 80017c8:	f005 fd2e 	bl	8007228 <siprintf>
    }else{
        out = in;
    }
}
 80017cc:	e001      	b.n	80017d2 <addZero+0x32>
        out = in;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000364 	.word	0x20000364
 80017e0:	0800b038 	.word	0x0800b038

080017e4 <AckInternet>:


unsigned char AckInternet(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	Error = 0;
 80017ea:	4b62      	ldr	r3, [pc, #392]	; (8001974 <AckInternet+0x190>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]

	for(unsigned char countSeq = 0; countSeq < 4; countSeq++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	e0b3      	b.n	800195e <AckInternet+0x17a>
		switch(countSeq) {
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d81f      	bhi.n	800183c <AckInternet+0x58>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <AckInternet+0x20>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001815 	.word	0x08001815
 8001808:	0800181f 	.word	0x0800181f
 800180c:	08001829 	.word	0x08001829
 8001810:	08001833 	.word	0x08001833
			case 0 :
				sprintf(TextNetTemp, "AT+QICSGP=1,1,\"INTERNET\",\"\",\"\",1\r\n");
 8001814:	4958      	ldr	r1, [pc, #352]	; (8001978 <AckInternet+0x194>)
 8001816:	4859      	ldr	r0, [pc, #356]	; (800197c <AckInternet+0x198>)
 8001818:	f005 fd06 	bl	8007228 <siprintf>
				break;
 800181c:	e00e      	b.n	800183c <AckInternet+0x58>

			case 1 :
				sprintf(TextNetTemp, "AT+QIACT=1\r\n");
 800181e:	4958      	ldr	r1, [pc, #352]	; (8001980 <AckInternet+0x19c>)
 8001820:	4856      	ldr	r0, [pc, #344]	; (800197c <AckInternet+0x198>)
 8001822:	f005 fd01 	bl	8007228 <siprintf>
				break;
 8001826:	e009      	b.n	800183c <AckInternet+0x58>

			case 2 :
				sprintf(TextNetTemp, "AT+QIACT?\r\n");
 8001828:	4956      	ldr	r1, [pc, #344]	; (8001984 <AckInternet+0x1a0>)
 800182a:	4854      	ldr	r0, [pc, #336]	; (800197c <AckInternet+0x198>)
 800182c:	f005 fcfc 	bl	8007228 <siprintf>
				break;
 8001830:	e004      	b.n	800183c <AckInternet+0x58>

			case 3 :
				sprintf(TextNetTemp, "AT+QIDNSCFG=1,\"8.8.8.8\",\"1.1.1.1\"\r\n");
 8001832:	4955      	ldr	r1, [pc, #340]	; (8001988 <AckInternet+0x1a4>)
 8001834:	4851      	ldr	r0, [pc, #324]	; (800197c <AckInternet+0x198>)
 8001836:	f005 fcf7 	bl	8007228 <siprintf>
				break;
 800183a:	bf00      	nop
		}

		UART6_Debug((char *) TextNetTemp);
 800183c:	484f      	ldr	r0, [pc, #316]	; (800197c <AckInternet+0x198>)
 800183e:	f000 ff3b 	bl	80026b8 <UART6_Debug>
		UART6_Debug("\r\n");
 8001842:	4852      	ldr	r0, [pc, #328]	; (800198c <AckInternet+0x1a8>)
 8001844:	f000 ff38 	bl	80026b8 <UART6_Debug>

		SendCMD_LTE((char *) TextNetTemp);
 8001848:	484c      	ldr	r0, [pc, #304]	; (800197c <AckInternet+0x198>)
 800184a:	f000 ff61 	bl	8002710 <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 800184e:	4b50      	ldr	r3, [pc, #320]	; (8001990 <AckInternet+0x1ac>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <AckInternet+0x1b0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <AckInternet+0x1b0>)
 800185a:	6053      	str	r3, [r2, #4]


		while(sysFlag.LTE_CMD_Send == 1) {
 800185c:	e078      	b.n	8001950 <AckInternet+0x16c>

			// Reset counter
			if(sysCounter.main_ms_counter == 0) {
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <AckInternet+0x1b0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <AckInternet+0x88>
				sysCounter.prev_LTEtimeout = 0;
 8001866:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <AckInternet+0x1b0>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
			}

			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 800186c:	494a      	ldr	r1, [pc, #296]	; (8001998 <AckInternet+0x1b4>)
 800186e:	484b      	ldr	r0, [pc, #300]	; (800199c <AckInternet+0x1b8>)
 8001870:	f000 ffc6 	bl	8002800 <findTarget>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	d124      	bne.n	80018c4 <AckInternet+0xe0>
				UART6_Debug("[LTE] -> OK\r\n");
 800187a:	4849      	ldr	r0, [pc, #292]	; (80019a0 <AckInternet+0x1bc>)
 800187c:	f000 ff1c 	bl	80026b8 <UART6_Debug>

				if(countSeq == 2) {
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d112      	bne.n	80018ac <AckInternet+0xc8>
					UART6_Debug("[LTE] -> DUMP : \n");
 8001886:	4847      	ldr	r0, [pc, #284]	; (80019a4 <AckInternet+0x1c0>)
 8001888:	f000 ff16 	bl	80026b8 <UART6_Debug>
					UART6_Debug((char *)lteComm_MainBuff);
 800188c:	4843      	ldr	r0, [pc, #268]	; (800199c <AckInternet+0x1b8>)
 800188e:	f000 ff13 	bl	80026b8 <UART6_Debug>
					UART6_Debug("\r\n");
 8001892:	483e      	ldr	r0, [pc, #248]	; (800198c <AckInternet+0x1a8>)
 8001894:	f000 ff10 	bl	80026b8 <UART6_Debug>

					if(findTarget(lteComm_MainBuff, "+QIACT: 1") == 1) {
 8001898:	4943      	ldr	r1, [pc, #268]	; (80019a8 <AckInternet+0x1c4>)
 800189a:	4840      	ldr	r0, [pc, #256]	; (800199c <AckInternet+0x1b8>)
 800189c:	f000 ffb0 	bl	8002800 <findTarget>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <AckInternet+0xc8>
						Error = 0;
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <AckInternet+0x190>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
					}
				}

				sysFlag.LTE_CMD_Send = 0;
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <AckInternet+0x1ac>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80018b2:	f7ff fe37 	bl	8001524 <clearLTE_Temp>
				clearText_net_Temp();
 80018b6:	f7ff ff67 	bl	8001788 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80018ba:	4b36      	ldr	r3, [pc, #216]	; (8001994 <AckInternet+0x1b0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a35      	ldr	r2, [pc, #212]	; (8001994 <AckInternet+0x1b0>)
 80018c0:	6053      	str	r3, [r2, #4]
 80018c2:	e045      	b.n	8001950 <AckInternet+0x16c>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80018c4:	4939      	ldr	r1, [pc, #228]	; (80019ac <AckInternet+0x1c8>)
 80018c6:	4835      	ldr	r0, [pc, #212]	; (800199c <AckInternet+0x1b8>)
 80018c8:	f000 ff9a 	bl	8002800 <findTarget>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d11a      	bne.n	8001908 <AckInternet+0x124>
				UART6_Debug("[LTE] -> ERROR\n");
 80018d2:	4837      	ldr	r0, [pc, #220]	; (80019b0 <AckInternet+0x1cc>)
 80018d4:	f000 fef0 	bl	80026b8 <UART6_Debug>
				UART6_Debug((char *)lteComm_MainBuff);
 80018d8:	4830      	ldr	r0, [pc, #192]	; (800199c <AckInternet+0x1b8>)
 80018da:	f000 feed 	bl	80026b8 <UART6_Debug>
				UART6_Debug("\r\n");
 80018de:	482b      	ldr	r0, [pc, #172]	; (800198c <AckInternet+0x1a8>)
 80018e0:	f000 feea 	bl	80026b8 <UART6_Debug>



				Error++;
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <AckInternet+0x190>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <AckInternet+0x190>)
 80018ee:	701a      	strb	r2, [r3, #0]

				sysFlag.LTE_CMD_Send = 0;
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <AckInternet+0x1ac>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80018f6:	f7ff fe15 	bl	8001524 <clearLTE_Temp>
				clearText_net_Temp();
 80018fa:	f7ff ff45 	bl	8001788 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <AckInternet+0x1b0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a24      	ldr	r2, [pc, #144]	; (8001994 <AckInternet+0x1b0>)
 8001904:	6053      	str	r3, [r2, #4]
 8001906:	e023      	b.n	8001950 <AckInternet+0x16c>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <AckInternet+0x1b0>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <AckInternet+0x1b0>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4a20      	ldr	r2, [pc, #128]	; (8001994 <AckInternet+0x1b0>)
 8001914:	8b52      	ldrh	r2, [r2, #26]
 8001916:	4293      	cmp	r3, r2
 8001918:	d31a      	bcc.n	8001950 <AckInternet+0x16c>
				if(sysCounter.main_ms_counter == 0) {
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <AckInternet+0x1b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <AckInternet+0x144>
					sysCounter.prev_LTEtimeout = 0;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <AckInternet+0x1b0>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
				}

				UART6_Debug("[MCU] -> LTE TIME OUT\n");
 8001928:	4822      	ldr	r0, [pc, #136]	; (80019b4 <AckInternet+0x1d0>)
 800192a:	f000 fec5 	bl	80026b8 <UART6_Debug>

				Error++;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <AckInternet+0x190>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <AckInternet+0x190>)
 8001938:	701a      	strb	r2, [r3, #0]
				sysFlag.LTE_CMD_Send = 0;
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <AckInternet+0x1ac>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8001940:	f7ff fdf0 	bl	8001524 <clearLTE_Temp>
				clearText_net_Temp();
 8001944:	f7ff ff20 	bl	8001788 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <AckInternet+0x1b0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <AckInternet+0x1b0>)
 800194e:	6053      	str	r3, [r2, #4]
		while(sysFlag.LTE_CMD_Send == 1) {
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <AckInternet+0x1ac>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d082      	beq.n	800185e <AckInternet+0x7a>
	for(unsigned char countSeq = 0; countSeq < 4; countSeq++) {
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	3301      	adds	r3, #1
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b03      	cmp	r3, #3
 8001962:	f67f af48 	bls.w	80017f6 <AckInternet+0x12>
			}
		}
	}

	return Error;
 8001966:	4b03      	ldr	r3, [pc, #12]	; (8001974 <AckInternet+0x190>)
 8001968:	781b      	ldrb	r3, [r3, #0]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000042d 	.word	0x2000042d
 8001978:	0800b03c 	.word	0x0800b03c
 800197c:	200003b0 	.word	0x200003b0
 8001980:	0800b060 	.word	0x0800b060
 8001984:	0800b070 	.word	0x0800b070
 8001988:	0800b07c 	.word	0x0800b07c
 800198c:	0800b0a0 	.word	0x0800b0a0
 8001990:	20000d70 	.word	0x20000d70
 8001994:	20000d54 	.word	0x20000d54
 8001998:	0800b0a4 	.word	0x0800b0a4
 800199c:	20000a74 	.word	0x20000a74
 80019a0:	0800b0a8 	.word	0x0800b0a8
 80019a4:	0800b0b8 	.word	0x0800b0b8
 80019a8:	0800b0cc 	.word	0x0800b0cc
 80019ac:	0800b0d8 	.word	0x0800b0d8
 80019b0:	0800b0e0 	.word	0x0800b0e0
 80019b4:	0800b0f0 	.word	0x0800b0f0

080019b8 <httpSend>:
	return strlen(HTTP_URL_Temp);
}


//send data to server
unsigned int httpSend(char* lat, char* lon, char* device_ID, char* time_s, char* date_s, char* x, char* y, char* z, char* humi, char* temp, char* eth, char* carbon, char* airflow, char* out) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b098      	sub	sp, #96	; 0x60
 80019bc:	af14      	add	r7, sp, #80	; 0x50
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
	memset(HTTP_URL_Temp, 0x00, sizeof(HTTP_URL_Temp));
 80019c6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80019ca:	2100      	movs	r1, #0
 80019cc:	485c      	ldr	r0, [pc, #368]	; (8001b40 <httpSend+0x188>)
 80019ce:	f004 ffb9 	bl	8006944 <memset>
	memset(time_temp, 0x00, sizeof(time_temp));
 80019d2:	220c      	movs	r2, #12
 80019d4:	2100      	movs	r1, #0
 80019d6:	485b      	ldr	r0, [pc, #364]	; (8001b44 <httpSend+0x18c>)
 80019d8:	f004 ffb4 	bl	8006944 <memset>
	memset(date_temp, 0x00, sizeof(date_temp));
 80019dc:	220c      	movs	r2, #12
 80019de:	2100      	movs	r1, #0
 80019e0:	4859      	ldr	r0, [pc, #356]	; (8001b48 <httpSend+0x190>)
 80019e2:	f004 ffaf 	bl	8006944 <memset>
	memset(hh, 0x00, sizeof(hh));
 80019e6:	2208      	movs	r2, #8
 80019e8:	2100      	movs	r1, #0
 80019ea:	4858      	ldr	r0, [pc, #352]	; (8001b4c <httpSend+0x194>)
 80019ec:	f004 ffaa 	bl	8006944 <memset>
	memset(mm, 0x00, sizeof(mm));
 80019f0:	2208      	movs	r2, #8
 80019f2:	2100      	movs	r1, #0
 80019f4:	4856      	ldr	r0, [pc, #344]	; (8001b50 <httpSend+0x198>)
 80019f6:	f004 ffa5 	bl	8006944 <memset>
	memset(ss, 0x00, sizeof(ss));
 80019fa:	2208      	movs	r2, #8
 80019fc:	2100      	movs	r1, #0
 80019fe:	4855      	ldr	r0, [pc, #340]	; (8001b54 <httpSend+0x19c>)
 8001a00:	f004 ffa0 	bl	8006944 <memset>
	memset(YY, 0x00, sizeof(YY));
 8001a04:	2208      	movs	r2, #8
 8001a06:	2100      	movs	r1, #0
 8001a08:	4853      	ldr	r0, [pc, #332]	; (8001b58 <httpSend+0x1a0>)
 8001a0a:	f004 ff9b 	bl	8006944 <memset>
	memset(MM, 0x00, sizeof(MM));
 8001a0e:	2208      	movs	r2, #8
 8001a10:	2100      	movs	r1, #0
 8001a12:	4852      	ldr	r0, [pc, #328]	; (8001b5c <httpSend+0x1a4>)
 8001a14:	f004 ff96 	bl	8006944 <memset>
	memset(DD, 0x00, sizeof(DD));
 8001a18:	2208      	movs	r2, #8
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4850      	ldr	r0, [pc, #320]	; (8001b60 <httpSend+0x1a8>)
 8001a1e:	f004 ff91 	bl	8006944 <memset>

	// Delimiter hot fix WuW
	sprintf(time_temp, "T:%s", time_s);
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	494f      	ldr	r1, [pc, #316]	; (8001b64 <httpSend+0x1ac>)
 8001a26:	4847      	ldr	r0, [pc, #284]	; (8001b44 <httpSend+0x18c>)
 8001a28:	f005 fbfe 	bl	8007228 <siprintf>
	sprintf(date_temp, "D/%s", date_s);
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	494e      	ldr	r1, [pc, #312]	; (8001b68 <httpSend+0x1b0>)
 8001a30:	4845      	ldr	r0, [pc, #276]	; (8001b48 <httpSend+0x190>)
 8001a32:	f005 fbf9 	bl	8007228 <siprintf>


	// Delimit
	Delimiter(time_temp, ':', 1, 80, (unsigned char*) hh);
 8001a36:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <httpSend+0x194>)
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2350      	movs	r3, #80	; 0x50
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	213a      	movs	r1, #58	; 0x3a
 8001a40:	4840      	ldr	r0, [pc, #256]	; (8001b44 <httpSend+0x18c>)
 8001a42:	f001 f91c 	bl	8002c7e <Delimiter>
	Delimiter(time_temp, ':', 2, 80, (unsigned char*) mm);
 8001a46:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <httpSend+0x198>)
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2350      	movs	r3, #80	; 0x50
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	213a      	movs	r1, #58	; 0x3a
 8001a50:	483c      	ldr	r0, [pc, #240]	; (8001b44 <httpSend+0x18c>)
 8001a52:	f001 f914 	bl	8002c7e <Delimiter>
	Delimiter(time_temp, ':', 3, 80, (unsigned char*) ss);
 8001a56:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <httpSend+0x19c>)
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2350      	movs	r3, #80	; 0x50
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	213a      	movs	r1, #58	; 0x3a
 8001a60:	4838      	ldr	r0, [pc, #224]	; (8001b44 <httpSend+0x18c>)
 8001a62:	f001 f90c 	bl	8002c7e <Delimiter>

	Delimiter(date_temp, '/', 1, 80, (unsigned char*) DD);
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <httpSend+0x1a8>)
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2350      	movs	r3, #80	; 0x50
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	212f      	movs	r1, #47	; 0x2f
 8001a70:	4835      	ldr	r0, [pc, #212]	; (8001b48 <httpSend+0x190>)
 8001a72:	f001 f904 	bl	8002c7e <Delimiter>
	Delimiter(date_temp, '/', 2, 80, (unsigned char*) MM);
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <httpSend+0x1a4>)
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2350      	movs	r3, #80	; 0x50
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	212f      	movs	r1, #47	; 0x2f
 8001a80:	4831      	ldr	r0, [pc, #196]	; (8001b48 <httpSend+0x190>)
 8001a82:	f001 f8fc 	bl	8002c7e <Delimiter>
	Delimiter(date_temp, '/', 3, 80, (unsigned char*) YY);
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <httpSend+0x1a0>)
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2350      	movs	r3, #80	; 0x50
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	212f      	movs	r1, #47	; 0x2f
 8001a90:	482d      	ldr	r0, [pc, #180]	; (8001b48 <httpSend+0x190>)
 8001a92:	f001 f8f4 	bl	8002c7e <Delimiter>
	// Check date and time to 2 digit
	addZero(hh, hh);
 8001a96:	492d      	ldr	r1, [pc, #180]	; (8001b4c <httpSend+0x194>)
 8001a98:	482c      	ldr	r0, [pc, #176]	; (8001b4c <httpSend+0x194>)
 8001a9a:	f7ff fe81 	bl	80017a0 <addZero>
	addZero(mm, mm);
 8001a9e:	492c      	ldr	r1, [pc, #176]	; (8001b50 <httpSend+0x198>)
 8001aa0:	482b      	ldr	r0, [pc, #172]	; (8001b50 <httpSend+0x198>)
 8001aa2:	f7ff fe7d 	bl	80017a0 <addZero>
	addZero(ss, ss);
 8001aa6:	492b      	ldr	r1, [pc, #172]	; (8001b54 <httpSend+0x19c>)
 8001aa8:	482a      	ldr	r0, [pc, #168]	; (8001b54 <httpSend+0x19c>)
 8001aaa:	f7ff fe79 	bl	80017a0 <addZero>
	addZero(YY, YY);
 8001aae:	492a      	ldr	r1, [pc, #168]	; (8001b58 <httpSend+0x1a0>)
 8001ab0:	4829      	ldr	r0, [pc, #164]	; (8001b58 <httpSend+0x1a0>)
 8001ab2:	f7ff fe75 	bl	80017a0 <addZero>
	addZero(MM, MM);
 8001ab6:	4929      	ldr	r1, [pc, #164]	; (8001b5c <httpSend+0x1a4>)
 8001ab8:	4828      	ldr	r0, [pc, #160]	; (8001b5c <httpSend+0x1a4>)
 8001aba:	f7ff fe71 	bl	80017a0 <addZero>
	addZero(DD, DD);
 8001abe:	4928      	ldr	r1, [pc, #160]	; (8001b60 <httpSend+0x1a8>)
 8001ac0:	4827      	ldr	r0, [pc, #156]	; (8001b60 <httpSend+0x1a8>)
 8001ac2:	f7ff fe6d 	bl	80017a0 <addZero>

	sprintf(HTTP_URL_Temp, "http://rtls.lailab.online/api/ingest_sensor_data?token=%s&device_id=%s&time=%s&date=%s&device_name=%s&x=%s&y=%s&z=%s&humidity=%s&temp=%s&etha=%s&co2=%s&airflow=%s&symbol=Q&date_now=20%s-%s-%sT%s:%s:%s.000Z&lat=%s&lon=%s", TOKEN, device_ID, time_s, date_s, device_ID, x, y, z, humi, temp, eth, carbon, airflow, YY, MM, DD, hh, mm, ss, lat, lon);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	9312      	str	r3, [sp, #72]	; 0x48
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	9311      	str	r3, [sp, #68]	; 0x44
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <httpSend+0x19c>)
 8001ad0:	9310      	str	r3, [sp, #64]	; 0x40
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <httpSend+0x198>)
 8001ad4:	930f      	str	r3, [sp, #60]	; 0x3c
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <httpSend+0x194>)
 8001ad8:	930e      	str	r3, [sp, #56]	; 0x38
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <httpSend+0x1a8>)
 8001adc:	930d      	str	r3, [sp, #52]	; 0x34
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <httpSend+0x1a4>)
 8001ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <httpSend+0x1a0>)
 8001ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8001aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aec:	9309      	str	r3, [sp, #36]	; 0x24
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	9308      	str	r3, [sp, #32]
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	9307      	str	r3, [sp, #28]
 8001af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af8:	9306      	str	r3, [sp, #24]
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	9305      	str	r3, [sp, #20]
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	9304      	str	r3, [sp, #16]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	9303      	str	r3, [sp, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	9302      	str	r3, [sp, #8]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <httpSend+0x1b4>)
 8001b16:	4916      	ldr	r1, [pc, #88]	; (8001b70 <httpSend+0x1b8>)
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <httpSend+0x188>)
 8001b1a:	f005 fb85 	bl	8007228 <siprintf>

	memcpy(out, HTTP_URL_Temp, sizeof(HTTP_URL_Temp));
 8001b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <httpSend+0x188>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	4611      	mov	r1, r2
 8001b26:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f004 fefc 	bl	8006928 <memcpy>

	return strlen(HTTP_URL_Temp);
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <httpSend+0x188>)
 8001b32:	f7fe fb55 	bl	80001e0 <strlen>
 8001b36:	4603      	mov	r3, r0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000430 	.word	0x20000430
 8001b44:	20000368 	.word	0x20000368
 8001b48:	20000374 	.word	0x20000374
 8001b4c:	20000398 	.word	0x20000398
 8001b50:	200003a0 	.word	0x200003a0
 8001b54:	200003a8 	.word	0x200003a8
 8001b58:	20000390 	.word	0x20000390
 8001b5c:	20000388 	.word	0x20000388
 8001b60:	20000380 	.word	0x20000380
 8001b64:	0800b1a0 	.word	0x0800b1a0
 8001b68:	0800b1a8 	.word	0x0800b1a8
 8001b6c:	0800b108 	.word	0x0800b108
 8001b70:	0800b1b0 	.word	0x0800b1b0

08001b74 <Activate>:

// Deactivate HTTP/TCP-IP context
// Return 0 -> PASS
// Return 1 -> ERROR
// Return 2 -> TIME OUT
unsigned char Activate(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	sysFlag.LTE_CMD_Send = 0;
 8001b78:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <Activate+0xb8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
	Error = 0;
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <Activate+0xbc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]

	UART6_Debug("[INTERNET] -> ACTIVATE INTERNET\n");
 8001b84:	482b      	ldr	r0, [pc, #172]	; (8001c34 <Activate+0xc0>)
 8001b86:	f000 fd97 	bl	80026b8 <UART6_Debug>

	SendCMD_LTE("AT+QIACT=1\r\n");
 8001b8a:	482b      	ldr	r0, [pc, #172]	; (8001c38 <Activate+0xc4>)
 8001b8c:	f000 fdc0 	bl	8002710 <SendCMD_LTE>
	sysFlag.LTE_CMD_Send = 1;
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <Activate+0xb8>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]

	sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <Activate+0xc8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <Activate+0xc8>)
 8001b9c:	6053      	str	r3, [r2, #4]

	while(sysFlag.LTE_CMD_Send == 1) {
 8001b9e:	e03c      	b.n	8001c1a <Activate+0xa6>
		// PASS
		if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8001ba0:	4927      	ldr	r1, [pc, #156]	; (8001c40 <Activate+0xcc>)
 8001ba2:	4828      	ldr	r0, [pc, #160]	; (8001c44 <Activate+0xd0>)
 8001ba4:	f000 fe2c 	bl	8002800 <findTarget>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <Activate+0x4c>
			UART6_Debug("[INTERNET] -> DONE\n");
 8001bae:	4826      	ldr	r0, [pc, #152]	; (8001c48 <Activate+0xd4>)
 8001bb0:	f000 fd82 	bl	80026b8 <UART6_Debug>
			Error = 0;
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <Activate+0xbc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
			sysFlag.LTE_CMD_Send = 0;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <Activate+0xb8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
		}
		// ERROR
		if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8001bc0:	4922      	ldr	r1, [pc, #136]	; (8001c4c <Activate+0xd8>)
 8001bc2:	4820      	ldr	r0, [pc, #128]	; (8001c44 <Activate+0xd0>)
 8001bc4:	f000 fe1c 	bl	8002800 <findTarget>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <Activate+0x6c>
			UART6_Debug("[INTERNET] -> ERROR\n");
 8001bce:	4820      	ldr	r0, [pc, #128]	; (8001c50 <Activate+0xdc>)
 8001bd0:	f000 fd72 	bl	80026b8 <UART6_Debug>
			Error = 1;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <Activate+0xbc>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
			sysFlag.LTE_CMD_Send = 0;
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <Activate+0xb8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
		}

		// Timeout Conditions
		if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= 20000) {
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <Activate+0xc8>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <Activate+0xc8>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d913      	bls.n	8001c1a <Activate+0xa6>
			if(sysCounter.main_ms_counter == 0) {
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <Activate+0xc8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <Activate+0x8c>
				sysCounter.prev_msgTimeOut = 0;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <Activate+0xc8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
			}

			Error = 2;
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <Activate+0xbc>)
 8001c02:	2202      	movs	r2, #2
 8001c04:	701a      	strb	r2, [r3, #0]
			UART6_Debug("[INTERNET] -> TIME OUT\n");
 8001c06:	4813      	ldr	r0, [pc, #76]	; (8001c54 <Activate+0xe0>)
 8001c08:	f000 fd56 	bl	80026b8 <UART6_Debug>
			sysFlag.LTE_CMD_Send = 0;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <Activate+0xb8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
			sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <Activate+0xc8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <Activate+0xc8>)
 8001c18:	6053      	str	r3, [r2, #4]
	while(sysFlag.LTE_CMD_Send == 1) {
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <Activate+0xb8>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d0be      	beq.n	8001ba0 <Activate+0x2c>
		}

	}

	return Error;
 8001c22:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <Activate+0xbc>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000d70 	.word	0x20000d70
 8001c30:	2000042d 	.word	0x2000042d
 8001c34:	0800b28c 	.word	0x0800b28c
 8001c38:	0800b060 	.word	0x0800b060
 8001c3c:	20000d54 	.word	0x20000d54
 8001c40:	0800b0a4 	.word	0x0800b0a4
 8001c44:	20000a74 	.word	0x20000a74
 8001c48:	0800b2b0 	.word	0x0800b2b0
 8001c4c:	0800b0d8 	.word	0x0800b0d8
 8001c50:	0800b2c4 	.word	0x0800b2c4
 8001c54:	0800b2dc 	.word	0x0800b2dc

08001c58 <Deactivate>:

// Deactivate HTTP/TCP-IP context
// Return 0 -> PASS
// Return 1 -> ERROR
// Return 2 -> TIME OUT
unsigned char Deactivate(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	sysFlag.LTE_CMD_Send = 0;
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <Deactivate+0xb8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
	Error = 0;
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <Deactivate+0xbc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]

	UART6_Debug("[INTERNET] -> DEACTIVATE INTERNET\n");
 8001c68:	482b      	ldr	r0, [pc, #172]	; (8001d18 <Deactivate+0xc0>)
 8001c6a:	f000 fd25 	bl	80026b8 <UART6_Debug>

	SendCMD_LTE("AT+QIDEACT=1\r\n");
 8001c6e:	482b      	ldr	r0, [pc, #172]	; (8001d1c <Deactivate+0xc4>)
 8001c70:	f000 fd4e 	bl	8002710 <SendCMD_LTE>
	sysFlag.LTE_CMD_Send = 1;
 8001c74:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <Deactivate+0xb8>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]

	sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <Deactivate+0xc8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a28      	ldr	r2, [pc, #160]	; (8001d20 <Deactivate+0xc8>)
 8001c80:	6053      	str	r3, [r2, #4]

	while(sysFlag.LTE_CMD_Send == 1) {
 8001c82:	e03c      	b.n	8001cfe <Deactivate+0xa6>
		// PASS
		if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8001c84:	4927      	ldr	r1, [pc, #156]	; (8001d24 <Deactivate+0xcc>)
 8001c86:	4828      	ldr	r0, [pc, #160]	; (8001d28 <Deactivate+0xd0>)
 8001c88:	f000 fdba 	bl	8002800 <findTarget>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <Deactivate+0x4c>
			UART6_Debug("[INTERNET] -> DONE\n");
 8001c92:	4826      	ldr	r0, [pc, #152]	; (8001d2c <Deactivate+0xd4>)
 8001c94:	f000 fd10 	bl	80026b8 <UART6_Debug>
			Error = 0;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <Deactivate+0xbc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
			sysFlag.LTE_CMD_Send = 0;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <Deactivate+0xb8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
		}
		// ERROR
		if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8001ca4:	4922      	ldr	r1, [pc, #136]	; (8001d30 <Deactivate+0xd8>)
 8001ca6:	4820      	ldr	r0, [pc, #128]	; (8001d28 <Deactivate+0xd0>)
 8001ca8:	f000 fdaa 	bl	8002800 <findTarget>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <Deactivate+0x6c>
			UART6_Debug("[INTERNET] -> ERROR\n");
 8001cb2:	4820      	ldr	r0, [pc, #128]	; (8001d34 <Deactivate+0xdc>)
 8001cb4:	f000 fd00 	bl	80026b8 <UART6_Debug>
			Error = 1;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <Deactivate+0xbc>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
			sysFlag.LTE_CMD_Send = 0;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <Deactivate+0xb8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
		}

		// Timeout Conditions
		if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= 30000) {
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <Deactivate+0xc8>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <Deactivate+0xc8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f247 522f 	movw	r2, #29999	; 0x752f
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d913      	bls.n	8001cfe <Deactivate+0xa6>
			if(sysCounter.main_ms_counter == 0) {
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <Deactivate+0xc8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <Deactivate+0x8c>
				sysCounter.prev_msgTimeOut = 0;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <Deactivate+0xc8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
			}

			Error = 2;
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <Deactivate+0xbc>)
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	701a      	strb	r2, [r3, #0]
			UART6_Debug("[INTERNET] -> TIME OUT\n");
 8001cea:	4813      	ldr	r0, [pc, #76]	; (8001d38 <Deactivate+0xe0>)
 8001cec:	f000 fce4 	bl	80026b8 <UART6_Debug>
			sysFlag.LTE_CMD_Send = 0;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <Deactivate+0xb8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
			sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <Deactivate+0xc8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <Deactivate+0xc8>)
 8001cfc:	6053      	str	r3, [r2, #4]
	while(sysFlag.LTE_CMD_Send == 1) {
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <Deactivate+0xb8>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d0be      	beq.n	8001c84 <Deactivate+0x2c>
		}

	}

	return Error;
 8001d06:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <Deactivate+0xbc>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000d70 	.word	0x20000d70
 8001d14:	2000042d 	.word	0x2000042d
 8001d18:	0800b2f4 	.word	0x0800b2f4
 8001d1c:	0800b318 	.word	0x0800b318
 8001d20:	20000d54 	.word	0x20000d54
 8001d24:	0800b0a4 	.word	0x0800b0a4
 8001d28:	20000a74 	.word	0x20000a74
 8001d2c:	0800b2b0 	.word	0x0800b2b0
 8001d30:	0800b0d8 	.word	0x0800b0d8
 8001d34:	0800b2c4 	.word	0x0800b2c4
 8001d38:	0800b2dc 	.word	0x0800b2dc

08001d3c <main>:
static void MX_USART6_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af0a      	add	r7, sp, #40	; 0x28

  sysValinit();
 8001d42:	f000 fc3f 	bl	80025c4 <sysValinit>
  sensorValInit();
 8001d46:	f000 fc65 	bl	8002614 <sensorValInit>

  HAL_Init();
 8001d4a:	f001 fb6d 	bl	8003428 <HAL_Init>
  SystemClock_Config();
 8001d4e:	f000 fdbd 	bl	80028cc <SystemClock_Config>
  MX_GPIO_Init();
 8001d52:	f000 ff25 	bl	8002ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d56:	f000 feed 	bl	8002b34 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d5a:	f000 fe6d 	bl	8002a38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d5e:	f000 fe95 	bl	8002a8c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001d62:	f000 febd 	bl	8002ae0 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001d66:	f000 fe19 	bl	800299c <MX_TIM4_Init>


  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 8001d6a:	489d      	ldr	r0, [pc, #628]	; (8001fe0 <main+0x2a4>)
 8001d6c:	f002 ff80 	bl	8004c70 <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8001d70:	22ff      	movs	r2, #255	; 0xff
 8001d72:	499c      	ldr	r1, [pc, #624]	; (8001fe4 <main+0x2a8>)
 8001d74:	489c      	ldr	r0, [pc, #624]	; (8001fe8 <main+0x2ac>)
 8001d76:	f003 fc50 	bl	800561a <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	499b      	ldr	r1, [pc, #620]	; (8001fec <main+0x2b0>)
 8001d7e:	489c      	ldr	r0, [pc, #624]	; (8001ff0 <main+0x2b4>)
 8001d80:	f003 fc4b 	bl	800561a <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);


  // INTERRUPT
  initEXIT();
 8001d84:	f7ff f90e 	bl	8000fa4 <initEXIT>
  resetWDT();
 8001d88:	f000 fd8c 	bl	80028a4 <resetWDT>
 *
 *  ===============================================================================
 */

  // Wait LTE module boot
  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);			// BUSY -> 1
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2120      	movs	r1, #32
 8001d90:	4898      	ldr	r0, [pc, #608]	; (8001ff4 <main+0x2b8>)
 8001d92:	f002 fa91 	bl	80042b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_SET);		// ACTIVE indicator -> 1
 8001d96:	2201      	movs	r2, #1
 8001d98:	2140      	movs	r1, #64	; 0x40
 8001d9a:	4896      	ldr	r0, [pc, #600]	; (8001ff4 <main+0x2b8>)
 8001d9c:	f002 fa8c 	bl	80042b8 <HAL_GPIO_WritePin>
  while(sysCounter.main_ms_counter < 500);				// Wait MCU boot
 8001da0:	bf00      	nop
 8001da2:	4b95      	ldr	r3, [pc, #596]	; (8001ff8 <main+0x2bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001daa:	d3fa      	bcc.n	8001da2 <main+0x66>

  UART6_Debug("[MCU] -> WAIT MODEM BOOT 30 SEC.\r\n");
 8001dac:	4893      	ldr	r0, [pc, #588]	; (8001ffc <main+0x2c0>)
 8001dae:	f000 fc83 	bl	80026b8 <UART6_Debug>

  resetWDT();
 8001db2:	f000 fd77 	bl	80028a4 <resetWDT>
  // Initialize LTE module
  while(sysCounter.main_ms_counter < LTEbootTime) {		// Wait LTE module boot
 8001db6:	e004      	b.n	8001dc2 <main+0x86>
	  intterruptEvent_Flag = 0;
 8001db8:	4b91      	ldr	r3, [pc, #580]	; (8002000 <main+0x2c4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
	  resetWDT();
 8001dbe:	f000 fd71 	bl	80028a4 <resetWDT>
  while(sysCounter.main_ms_counter < LTEbootTime) {		// Wait LTE module boot
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ff8 <main+0x2bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f247 522f 	movw	r2, #29999	; 0x752f
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d9f4      	bls.n	8001db8 <main+0x7c>
  }

  // Start init LTE module
  UART6_Debug("[MCU] -> INIT MCU\r\n");
 8001dce:	488d      	ldr	r0, [pc, #564]	; (8002004 <main+0x2c8>)
 8001dd0:	f000 fc72 	bl	80026b8 <UART6_Debug>
  initLTE();
 8001dd4:	f7ff fbb2 	bl	800153c <initLTE>
  resetWDT();
 8001dd8:	f000 fd64 	bl	80028a4 <resetWDT>
  UART6_Debug("[MCU] -> INIT INTERNET\r\n");
 8001ddc:	488a      	ldr	r0, [pc, #552]	; (8002008 <main+0x2cc>)
 8001dde:	f000 fc6b 	bl	80026b8 <UART6_Debug>
//  AckInternet_ErrCode = AckInternet();
  AckInternet();
 8001de2:	f7ff fcff 	bl	80017e4 <AckInternet>
  AckInternet_flag = 1;
 8001de6:	4b89      	ldr	r3, [pc, #548]	; (800200c <main+0x2d0>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
  resetWDT();
 8001dec:	f000 fd5a 	bl	80028a4 <resetWDT>

  // Respond after boot finish
  UART6_Debug("[MCU] -> SEND RDY\r\n");
 8001df0:	4887      	ldr	r0, [pc, #540]	; (8002010 <main+0x2d4>)
 8001df2:	f000 fc61 	bl	80026b8 <UART6_Debug>
  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8001df6:	2201      	movs	r2, #1
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	487e      	ldr	r0, [pc, #504]	; (8001ff4 <main+0x2b8>)
 8001dfc:	f002 fa5c 	bl	80042b8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f001 fb83 	bl	800350c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	487a      	ldr	r0, [pc, #488]	; (8001ff4 <main+0x2b8>)
 8001e0c:	f002 fa54 	bl	80042b8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);		// BUSY -> 0
 8001e10:	2200      	movs	r2, #0
 8001e12:	2120      	movs	r1, #32
 8001e14:	4877      	ldr	r0, [pc, #476]	; (8001ff4 <main+0x2b8>)
 8001e16:	f002 fa4f 	bl	80042b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_RESET);		// ACTIVE indicator -> 0
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2140      	movs	r1, #64	; 0x40
 8001e1e:	4875      	ldr	r0, [pc, #468]	; (8001ff4 <main+0x2b8>)
 8001e20:	f002 fa4a 	bl	80042b8 <HAL_GPIO_WritePin>
  resetWDT();
 8001e24:	f000 fd3e 	bl	80028a4 <resetWDT>
  UART6_Debug("[MCU] -> BOOT DONE\r\n");
 8001e28:	487a      	ldr	r0, [pc, #488]	; (8002014 <main+0x2d8>)
 8001e2a:	f000 fc45 	bl	80026b8 <UART6_Debug>



  while(1) {
	  // Clear WDT module routine
	  if(sysCounter.main_ms_counter == 0) {
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <main+0x2bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <main+0x10e>
		  sysCounter.prev_ClearWDT = 0;
 8001e36:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <main+0x2bc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
	  }
	  while((sysCounter.main_ms_counter - sysCounter.prev_ClearWDT) >= 1000) {
 8001e3c:	e005      	b.n	8001e4a <main+0x10e>
		  resetWDT();
 8001e3e:	f000 fd31 	bl	80028a4 <resetWDT>
		  sysCounter.prev_ClearWDT = sysCounter.main_ms_counter;
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <main+0x2bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <main+0x2bc>)
 8001e48:	6113      	str	r3, [r2, #16]
	  while((sysCounter.main_ms_counter - sysCounter.prev_ClearWDT) >= 1000) {
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <main+0x2bc>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <main+0x2bc>)
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e58:	d2f1      	bcs.n	8001e3e <main+0x102>
	  }


	  // ErrorHandle
	  //Init error please check system
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8001e5a:	e037      	b.n	8001ecc <main+0x190>
		  HAL_GPIO_TogglePin(GPIOB, ERROR);
 8001e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e60:	4864      	ldr	r0, [pc, #400]	; (8001ff4 <main+0x2b8>)
 8001e62:	f002 fa42 	bl	80042ea <HAL_GPIO_TogglePin>
		  TICK_COUNT++;
 8001e66:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <main+0x2dc>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <main+0x2dc>)
 8001e70:	801a      	strh	r2, [r3, #0]
		  resetWDT();
 8001e72:	f000 fd17 	bl	80028a4 <resetWDT>
		  HAL_Delay(250);
 8001e76:	20fa      	movs	r0, #250	; 0xfa
 8001e78:	f001 fb48 	bl	800350c <HAL_Delay>

		  // Reboot
		  while(TICK_COUNT >= ERROR_TICK) {
 8001e7c:	e021      	b.n	8001ec2 <main+0x186>
			  UART6_Debug("[MCU] -> SEND SHUTDOWN\r\n");
 8001e7e:	4867      	ldr	r0, [pc, #412]	; (800201c <main+0x2e0>)
 8001e80:	f000 fc1a 	bl	80026b8 <UART6_Debug>
			  SendCMD_LTE("AT+QPOWD=0\r\n");
 8001e84:	4866      	ldr	r0, [pc, #408]	; (8002020 <main+0x2e4>)
 8001e86:	f000 fc43 	bl	8002710 <SendCMD_LTE>
			  sysFlag.LTE_CMD_Send = 1;
 8001e8a:	4b66      	ldr	r3, [pc, #408]	; (8002024 <main+0x2e8>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]

			  while(sysFlag.LTE_CMD_Send == 1) {
 8001e90:	e013      	b.n	8001eba <main+0x17e>

				  if(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
 8001e92:	4965      	ldr	r1, [pc, #404]	; (8002028 <main+0x2ec>)
 8001e94:	4865      	ldr	r0, [pc, #404]	; (800202c <main+0x2f0>)
 8001e96:	f000 fcb3 	bl	8002800 <findTarget>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <main+0x174>
					  UART6_Debug("[MCU] -> GET POWERED DOWN GOOD BYE\r\n");
 8001ea0:	4863      	ldr	r0, [pc, #396]	; (8002030 <main+0x2f4>)
 8001ea2:	f000 fc09 	bl	80026b8 <UART6_Debug>
					  REBOOT_FLAG = 1;
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <main+0x2f8>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
				  }

				  while(REBOOT_FLAG == 1) {
 8001eac:	e000      	b.n	8001eb0 <main+0x174>
					  for(;;);
 8001eae:	e7fe      	b.n	8001eae <main+0x172>
				  while(REBOOT_FLAG == 1) {
 8001eb0:	bf00      	nop
 8001eb2:	4b60      	ldr	r3, [pc, #384]	; (8002034 <main+0x2f8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d0f9      	beq.n	8001eae <main+0x172>
			  while(sysFlag.LTE_CMD_Send == 1) {
 8001eba:	4b5a      	ldr	r3, [pc, #360]	; (8002024 <main+0x2e8>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d0e7      	beq.n	8001e92 <main+0x156>
		  while(TICK_COUNT >= ERROR_TICK) {
 8001ec2:	4b55      	ldr	r3, [pc, #340]	; (8002018 <main+0x2dc>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001eca:	d2d8      	bcs.n	8001e7e <main+0x142>
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8001ecc:	4b55      	ldr	r3, [pc, #340]	; (8002024 <main+0x2e8>)
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d0c3      	beq.n	8001e5c <main+0x120>
			  }
		  }
	  }

	  // Reboot after active failed 5 time
	  while(ACK_FAIL_COUNT >= 5) {
 8001ed4:	e027      	b.n	8001f26 <main+0x1ea>
		  HAL_GPIO_WritePin(GPIOB, ERROR, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001edc:	4845      	ldr	r0, [pc, #276]	; (8001ff4 <main+0x2b8>)
 8001ede:	f002 f9eb 	bl	80042b8 <HAL_GPIO_WritePin>
		  UART6_Debug("[MCU] -> SEND SHUTDOWN\r\n");
 8001ee2:	484e      	ldr	r0, [pc, #312]	; (800201c <main+0x2e0>)
 8001ee4:	f000 fbe8 	bl	80026b8 <UART6_Debug>
		  SendCMD_LTE("AT+QPOWD=0\r\n");
 8001ee8:	484d      	ldr	r0, [pc, #308]	; (8002020 <main+0x2e4>)
 8001eea:	f000 fc11 	bl	8002710 <SendCMD_LTE>
		  sysFlag.LTE_CMD_Send = 1;
 8001eee:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <main+0x2e8>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]

		  // Reboot
		  while(sysFlag.LTE_CMD_Send == 1) {
 8001ef4:	e013      	b.n	8001f1e <main+0x1e2>
			  if(findTarget(lteComm_MainBuff, "POWERED DOWN")) {
 8001ef6:	494c      	ldr	r1, [pc, #304]	; (8002028 <main+0x2ec>)
 8001ef8:	484c      	ldr	r0, [pc, #304]	; (800202c <main+0x2f0>)
 8001efa:	f000 fc81 	bl	8002800 <findTarget>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <main+0x1d8>
				  UART6_Debug("[MCU] -> GET POWERED DOWN GOOD BYE\r\n");
 8001f04:	484a      	ldr	r0, [pc, #296]	; (8002030 <main+0x2f4>)
 8001f06:	f000 fbd7 	bl	80026b8 <UART6_Debug>
				  REBOOT_FLAG = 1;
 8001f0a:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <main+0x2f8>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
			  }

			  while(REBOOT_FLAG == 1) {
 8001f10:	e000      	b.n	8001f14 <main+0x1d8>
				  for(;;);
 8001f12:	e7fe      	b.n	8001f12 <main+0x1d6>
			  while(REBOOT_FLAG == 1) {
 8001f14:	bf00      	nop
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <main+0x2f8>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d0f9      	beq.n	8001f12 <main+0x1d6>
		  while(sysFlag.LTE_CMD_Send == 1) {
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <main+0x2e8>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d0e7      	beq.n	8001ef6 <main+0x1ba>
	  while(ACK_FAIL_COUNT >= 5) {
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <main+0x2fc>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d8d3      	bhi.n	8001ed6 <main+0x19a>
		  }
	  }


	  // Reboot after 5 min.
	  while(sysFlag.LTE_ERROR == 1) {
 8001f2e:	e041      	b.n	8001fb4 <main+0x278>
		  resetWDT();
 8001f30:	f000 fcb8 	bl	80028a4 <resetWDT>
		  if(sysCounter.main_ms_counter == 0) {
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <main+0x2bc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <main+0x206>
			  sysCounter.rebootCount = 0;
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <main+0x2bc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	761a      	strb	r2, [r3, #24]
		  }
		  if((sysCounter.main_ms_counter - sysCounter.rebootCount) >= 60000) {
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <main+0x2bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <main+0x2bc>)
 8001f48:	7e12      	ldrb	r2, [r2, #24]
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d921      	bls.n	8001f98 <main+0x25c>
			  reboot_min_count++;
 8001f54:	4b39      	ldr	r3, [pc, #228]	; (800203c <main+0x300>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b37      	ldr	r3, [pc, #220]	; (800203c <main+0x300>)
 8001f5e:	701a      	strb	r2, [r3, #0]
			  sysCounter.rebootCount = sysCounter.main_ms_counter;
 8001f60:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <main+0x2bc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <main+0x2bc>)
 8001f68:	761a      	strb	r2, [r3, #24]
		  }
		  while(reboot_min_count >= 5) {
 8001f6a:	e015      	b.n	8001f98 <main+0x25c>
			  if(SHUTDOWN_LTE() == 1) {
 8001f6c:	f7ff fbcc 	bl	8001708 <SHUTDOWN_LTE>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <main+0x246>
				  HAL_Delay(50);
 8001f76:	2032      	movs	r0, #50	; 0x32
 8001f78:	f001 fac8 	bl	800350c <HAL_Delay>
				  HAL_NVIC_SystemReset();
 8001f7c:	f001 fc05 	bl	800378a <HAL_NVIC_SystemReset>
 8001f80:	e00a      	b.n	8001f98 <main+0x25c>
			  }else {
				  sysFlag.LTE_ERROR = 0;
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <main+0x2e8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	709a      	strb	r2, [r3, #2]
				  sysFlag.LTE_INIT_ERROR = 1;
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <main+0x2e8>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
				  sysCounter.rebootCount = sysCounter.main_ms_counter;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <main+0x2bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <main+0x2bc>)
 8001f96:	761a      	strb	r2, [r3, #24]
		  while(reboot_min_count >= 5) {
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <main+0x300>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d8e5      	bhi.n	8001f6c <main+0x230>
			  }
		  }

		  if(intterruptEvent_Flag == 1) {
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <main+0x2c4>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <main+0x278>
			  SendData_RS485((char*) "X");
 8001fa8:	4825      	ldr	r0, [pc, #148]	; (8002040 <main+0x304>)
 8001faa:	f000 fb9b 	bl	80026e4 <SendData_RS485>
			  intterruptEvent_Flag = 0;
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <main+0x2c4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
	  while(sysFlag.LTE_ERROR == 1) {
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <main+0x2e8>)
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d0b9      	beq.n	8001f30 <main+0x1f4>
	  /*
	   * ------------------------------------------------------------------------------------
	   * 									MAIN TASK
	   * ------------------------------------------------------------------------------------
	   */
	  while(intterruptEvent_Flag == 1 && AckInternet_flag == 0) {
 8001fbc:	e05a      	b.n	8002074 <main+0x338>
		  UART6_Debug("[MCU] -> CHECK INTERNET\r\n");
 8001fbe:	4821      	ldr	r0, [pc, #132]	; (8002044 <main+0x308>)
 8001fc0:	f000 fb7a 	bl	80026b8 <UART6_Debug>

		  if(Activate() == 0) {
 8001fc4:	f7ff fdd6 	bl	8001b74 <Activate>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d13e      	bne.n	800204c <main+0x310>
			  UART6_Debug("[MCU] -> CONNECT PASS\r\n");
 8001fce:	481e      	ldr	r0, [pc, #120]	; (8002048 <main+0x30c>)
 8001fd0:	f000 fb72 	bl	80026b8 <UART6_Debug>
			  AckInternet_flag = 1;
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <main+0x2d0>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
			  resetWDT();
 8001fda:	f000 fc63 	bl	80028a4 <resetWDT>
 8001fde:	e049      	b.n	8002074 <main+0x338>
 8001fe0:	20000b80 	.word	0x20000b80
 8001fe4:	200008f4 	.word	0x200008f4
 8001fe8:	20000c0c 	.word	0x20000c0c
 8001fec:	20000874 	.word	0x20000874
 8001ff0:	20000bc8 	.word	0x20000bc8
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	20000d54 	.word	0x20000d54
 8001ffc:	0800b360 	.word	0x0800b360
 8002000:	200001fc 	.word	0x200001fc
 8002004:	0800b384 	.word	0x0800b384
 8002008:	0800b398 	.word	0x0800b398
 800200c:	20000b7d 	.word	0x20000b7d
 8002010:	0800b3b4 	.word	0x0800b3b4
 8002014:	0800b3c8 	.word	0x0800b3c8
 8002018:	2000058e 	.word	0x2000058e
 800201c:	0800b3e0 	.word	0x0800b3e0
 8002020:	0800b3fc 	.word	0x0800b3fc
 8002024:	20000d70 	.word	0x20000d70
 8002028:	0800b40c 	.word	0x0800b40c
 800202c:	20000a74 	.word	0x20000a74
 8002030:	0800b41c 	.word	0x0800b41c
 8002034:	20000591 	.word	0x20000591
 8002038:	20000590 	.word	0x20000590
 800203c:	20000b7e 	.word	0x20000b7e
 8002040:	0800b444 	.word	0x0800b444
 8002044:	0800b448 	.word	0x0800b448
 8002048:	0800b464 	.word	0x0800b464
		  }else {
			  UART6_Debug("[MCU] -> CONNECT FAIL\r\n");
 800204c:	48ae      	ldr	r0, [pc, #696]	; (8002308 <main+0x5cc>)
 800204e:	f000 fb33 	bl	80026b8 <UART6_Debug>
			  ACK_FAIL_COUNT++;
 8002052:	4bae      	ldr	r3, [pc, #696]	; (800230c <main+0x5d0>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4bac      	ldr	r3, [pc, #688]	; (800230c <main+0x5d0>)
 800205c:	701a      	strb	r2, [r3, #0]
			  SendData_RS485((char*) "X");
 800205e:	48ac      	ldr	r0, [pc, #688]	; (8002310 <main+0x5d4>)
 8002060:	f000 fb40 	bl	80026e4 <SendData_RS485>

			  intterruptEvent_Flag = 0;
 8002064:	4bab      	ldr	r3, [pc, #684]	; (8002314 <main+0x5d8>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
			  AckInternet_flag = 0;
 800206a:	4bab      	ldr	r3, [pc, #684]	; (8002318 <main+0x5dc>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
			  resetWDT();
 8002070:	f000 fc18 	bl	80028a4 <resetWDT>
	  while(intterruptEvent_Flag == 1 && AckInternet_flag == 0) {
 8002074:	4ba7      	ldr	r3, [pc, #668]	; (8002314 <main+0x5d8>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d103      	bne.n	8002084 <main+0x348>
 800207c:	4ba6      	ldr	r3, [pc, #664]	; (8002318 <main+0x5dc>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d09c      	beq.n	8001fbe <main+0x282>
		  }
	  }

	  MAINTASK :
 8002084:	bf00      	nop
	  while(intterruptEvent_Flag == 1 && AckInternet_flag == 1) {
 8002086:	e25b      	b.n	8002540 <main+0x804>
			HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);				    	// BUSY !!!!
 8002088:	2201      	movs	r2, #1
 800208a:	2120      	movs	r1, #32
 800208c:	48a3      	ldr	r0, [pc, #652]	; (800231c <main+0x5e0>)
 800208e:	f002 f913 	bl	80042b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_SET);					// ACTIVE indicator -> 1
 8002092:	2201      	movs	r2, #1
 8002094:	2140      	movs	r1, #64	; 0x40
 8002096:	48a1      	ldr	r0, [pc, #644]	; (800231c <main+0x5e0>)
 8002098:	f002 f90e 	bl	80042b8 <HAL_GPIO_WritePin>


			UART6_Debug("[MCU] -> GET RTS\r\n");
 800209c:	48a0      	ldr	r0, [pc, #640]	; (8002320 <main+0x5e4>)
 800209e:	f000 fb0b 	bl	80026b8 <UART6_Debug>
			resetWDT();
 80020a2:	f000 fbff 	bl	80028a4 <resetWDT>
//		    }
//		    resetWDT();

//		    while(AckInternet_flag == 1) {
				// Clear buffer
				sensorValInit();
 80020a6:	f000 fab5 	bl	8002614 <sensorValInit>
				memset(SENSOR.COMPID, 0x00, sizeof(SENSOR.COMPID));
 80020aa:	2204      	movs	r2, #4
 80020ac:	2100      	movs	r1, #0
 80020ae:	489d      	ldr	r0, [pc, #628]	; (8002324 <main+0x5e8>)
 80020b0:	f004 fc48 	bl	8006944 <memset>
 80020b4:	4b9c      	ldr	r3, [pc, #624]	; (8002328 <main+0x5ec>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
				memset(ENDBYTE, 0x00, sizeof(ENDBYTE));
				resetWDT();
 80020ba:	f000 fbf3 	bl	80028a4 <resetWDT>

				HAL_Delay(10);
 80020be:	200a      	movs	r0, #10
 80020c0:	f001 fa24 	bl	800350c <HAL_Delay>
				// Call GPS
				if(callGNSS(GNSS.lat, GNSS.lon, GNSS.time, GNSS.date) == 1) {
 80020c4:	4b99      	ldr	r3, [pc, #612]	; (800232c <main+0x5f0>)
 80020c6:	4a9a      	ldr	r2, [pc, #616]	; (8002330 <main+0x5f4>)
 80020c8:	499a      	ldr	r1, [pc, #616]	; (8002334 <main+0x5f8>)
 80020ca:	489b      	ldr	r0, [pc, #620]	; (8002338 <main+0x5fc>)
 80020cc:	f7fe ffca 	bl	8001064 <callGNSS>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d103      	bne.n	80020de <main+0x3a2>
					UART6_Debug("[GPS] -> NMEA CRC PASS\r\n");
 80020d6:	4899      	ldr	r0, [pc, #612]	; (800233c <main+0x600>)
 80020d8:	f000 faee 	bl	80026b8 <UART6_Debug>
 80020dc:	e002      	b.n	80020e4 <main+0x3a8>
				}else {
					UART6_Debug("[GPS] -> NMEA CRC INVALID/FAIL\r\n");
 80020de:	4898      	ldr	r0, [pc, #608]	; (8002340 <main+0x604>)
 80020e0:	f000 faea 	bl	80026b8 <UART6_Debug>
				}


				resetWDT();
 80020e4:	f000 fbde 	bl	80028a4 <resetWDT>
				// Send RDY signal
				HAL_Delay(10);
 80020e8:	200a      	movs	r0, #10
 80020ea:	f001 fa0f 	bl	800350c <HAL_Delay>
				UART6_Debug("[MCU] -> SEND RDY\r\n");
 80020ee:	4895      	ldr	r0, [pc, #596]	; (8002344 <main+0x608>)
 80020f0:	f000 fae2 	bl	80026b8 <UART6_Debug>
				HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	4888      	ldr	r0, [pc, #544]	; (800231c <main+0x5e0>)
 80020fa:	f002 f8dd 	bl	80042b8 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80020fe:	2001      	movs	r0, #1
 8002100:	f001 fa04 	bl	800350c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2180      	movs	r1, #128	; 0x80
 8002108:	4884      	ldr	r0, [pc, #528]	; (800231c <main+0x5e0>)
 800210a:	f002 f8d5 	bl	80042b8 <HAL_GPIO_WritePin>
				resetWDT();
 800210e:	f000 fbc9 	bl	80028a4 <resetWDT>



				// Wait DMA put data to buffer
				sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8002112:	4b8d      	ldr	r3, [pc, #564]	; (8002348 <main+0x60c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a8c      	ldr	r2, [pc, #560]	; (8002348 <main+0x60c>)
 8002118:	60d3      	str	r3, [r2, #12]
				while(*dataComm_mainBuff == '\0') {
 800211a:	e026      	b.n	800216a <main+0x42e>
				  // Timeout conditions
				  if(sysCounter.main_ms_counter == 0) {
 800211c:	4b8a      	ldr	r3, [pc, #552]	; (8002348 <main+0x60c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <main+0x3ee>
					  sysCounter.prev_msgTimeOut = 0;
 8002124:	4b88      	ldr	r3, [pc, #544]	; (8002348 <main+0x60c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
				  }

				  if((sysCounter.main_ms_counter - sysCounter.prev_msgTimeOut) >= 1000) {
 800212a:	4b87      	ldr	r3, [pc, #540]	; (8002348 <main+0x60c>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b86      	ldr	r3, [pc, #536]	; (8002348 <main+0x60c>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002138:	d317      	bcc.n	800216a <main+0x42e>
					  UART6_Debug("[MCU] -> UART TIME OUT\r\n");
 800213a:	4884      	ldr	r0, [pc, #528]	; (800234c <main+0x610>)
 800213c:	f000 fabc 	bl	80026b8 <UART6_Debug>
					  SendData_RS485((char*) "F");
 8002140:	4883      	ldr	r0, [pc, #524]	; (8002350 <main+0x614>)
 8002142:	f000 facf 	bl	80026e4 <SendData_RS485>

					  intterruptEvent_Flag = 0;
 8002146:	4b73      	ldr	r3, [pc, #460]	; (8002314 <main+0x5d8>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	2120      	movs	r1, #32
 8002150:	4872      	ldr	r0, [pc, #456]	; (800231c <main+0x5e0>)
 8002152:	f002 f8b1 	bl	80042b8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2140      	movs	r1, #64	; 0x40
 800215a:	4870      	ldr	r0, [pc, #448]	; (800231c <main+0x5e0>)
 800215c:	f002 f8ac 	bl	80042b8 <HAL_GPIO_WritePin>
					  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8002160:	4b79      	ldr	r3, [pc, #484]	; (8002348 <main+0x60c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a78      	ldr	r2, [pc, #480]	; (8002348 <main+0x60c>)
 8002166:	60d3      	str	r3, [r2, #12]
					  goto MAINTASK;
 8002168:	e78d      	b.n	8002086 <main+0x34a>
				while(*dataComm_mainBuff == '\0') {
 800216a:	4b7a      	ldr	r3, [pc, #488]	; (8002354 <main+0x618>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0d4      	beq.n	800211c <main+0x3e0>
				  }
				}
				sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8002172:	4b75      	ldr	r3, [pc, #468]	; (8002348 <main+0x60c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a74      	ldr	r2, [pc, #464]	; (8002348 <main+0x60c>)
 8002178:	60d3      	str	r3, [r2, #12]
				resetWDT();
 800217a:	f000 fb93 	bl	80028a4 <resetWDT>


				// Check data is valid?
				// frame 0 = frame 3 && frame 12 = 'Q'
				UART6_Debug("[MCU] -> CHECK DATA FRAME\r\n");
 800217e:	4876      	ldr	r0, [pc, #472]	; (8002358 <main+0x61c>)
 8002180:	f000 fa9a 	bl	80026b8 <UART6_Debug>

				memset(dump_samping, 0x00, sizeof(dump_samping));
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	2100      	movs	r1, #0
 8002188:	4874      	ldr	r0, [pc, #464]	; (800235c <main+0x620>)
 800218a:	f004 fbdb 	bl	8006944 <memset>
				memcpy(dump_samping, dataComm_mainBuff, sizeof(dump_samping));
 800218e:	4a73      	ldr	r2, [pc, #460]	; (800235c <main+0x620>)
 8002190:	4b70      	ldr	r3, [pc, #448]	; (8002354 <main+0x618>)
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	461a      	mov	r2, r3
 800219a:	f004 fbc5 	bl	8006928 <memcpy>

				Delimiter(dataComm_mainBuff, ',', 3, 80, (unsigned char*) SENSOR.COMPID);
 800219e:	4b61      	ldr	r3, [pc, #388]	; (8002324 <main+0x5e8>)
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2350      	movs	r3, #80	; 0x50
 80021a4:	2203      	movs	r2, #3
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	486a      	ldr	r0, [pc, #424]	; (8002354 <main+0x618>)
 80021aa:	f000 fd68 	bl	8002c7e <Delimiter>
				Delimiter(dataComm_mainBuff, ',', 12, 80, (unsigned char*) ENDBYTE);
 80021ae:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <main+0x5ec>)
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2350      	movs	r3, #80	; 0x50
 80021b4:	220c      	movs	r2, #12
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	4866      	ldr	r0, [pc, #408]	; (8002354 <main+0x618>)
 80021ba:	f000 fd60 	bl	8002c7e <Delimiter>

				if(dataComm_mainBuff[0] == SENSOR.COMPID[0] && ENDBYTE[0] == 'Q') {
 80021be:	4b65      	ldr	r3, [pc, #404]	; (8002354 <main+0x618>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b58      	ldr	r3, [pc, #352]	; (8002324 <main+0x5e8>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	f040 819a 	bne.w	8002500 <main+0x7c4>
 80021cc:	4b56      	ldr	r3, [pc, #344]	; (8002328 <main+0x5ec>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b51      	cmp	r3, #81	; 0x51
 80021d2:	f040 8195 	bne.w	8002500 <main+0x7c4>
				  resetWDT();
 80021d6:	f000 fb65 	bl	80028a4 <resetWDT>
				  UART6_Debug("[MCU] -> DATA IS VALID\r\n");
 80021da:	4861      	ldr	r0, [pc, #388]	; (8002360 <main+0x624>)
 80021dc:	f000 fa6c 	bl	80026b8 <UART6_Debug>

				  // Delimit data
				  Delimiter(dataComm_mainBuff, ',', 1, 80, (unsigned char*) SENSOR.timeStemp);
 80021e0:	4b60      	ldr	r3, [pc, #384]	; (8002364 <main+0x628>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2350      	movs	r3, #80	; 0x50
 80021e6:	2201      	movs	r2, #1
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	485a      	ldr	r0, [pc, #360]	; (8002354 <main+0x618>)
 80021ec:	f000 fd47 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 2, 80, (unsigned char*) SENSOR.dateStamp);
 80021f0:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <main+0x62c>)
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2350      	movs	r3, #80	; 0x50
 80021f6:	2202      	movs	r2, #2
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	4856      	ldr	r0, [pc, #344]	; (8002354 <main+0x618>)
 80021fc:	f000 fd3f 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 4, 80, (unsigned char*) SENSOR.X);
 8002200:	4b5a      	ldr	r3, [pc, #360]	; (800236c <main+0x630>)
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2350      	movs	r3, #80	; 0x50
 8002206:	2204      	movs	r2, #4
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	4852      	ldr	r0, [pc, #328]	; (8002354 <main+0x618>)
 800220c:	f000 fd37 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 5, 80, (unsigned char*) SENSOR.Y);
 8002210:	4b57      	ldr	r3, [pc, #348]	; (8002370 <main+0x634>)
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2350      	movs	r3, #80	; 0x50
 8002216:	2205      	movs	r2, #5
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	484e      	ldr	r0, [pc, #312]	; (8002354 <main+0x618>)
 800221c:	f000 fd2f 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 6, 80, (unsigned char*) SENSOR.Z);
 8002220:	4b54      	ldr	r3, [pc, #336]	; (8002374 <main+0x638>)
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2350      	movs	r3, #80	; 0x50
 8002226:	2206      	movs	r2, #6
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	484a      	ldr	r0, [pc, #296]	; (8002354 <main+0x618>)
 800222c:	f000 fd27 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 7, 80, (unsigned char*) SENSOR.Huim);
 8002230:	4b51      	ldr	r3, [pc, #324]	; (8002378 <main+0x63c>)
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2350      	movs	r3, #80	; 0x50
 8002236:	2207      	movs	r2, #7
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	4846      	ldr	r0, [pc, #280]	; (8002354 <main+0x618>)
 800223c:	f000 fd1f 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 8, 80, (unsigned char*) SENSOR.Temp);
 8002240:	4b4e      	ldr	r3, [pc, #312]	; (800237c <main+0x640>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2350      	movs	r3, #80	; 0x50
 8002246:	2208      	movs	r2, #8
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	4842      	ldr	r0, [pc, #264]	; (8002354 <main+0x618>)
 800224c:	f000 fd17 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 9, 80, (unsigned char*) SENSOR.Alc);
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <main+0x644>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2350      	movs	r3, #80	; 0x50
 8002256:	2209      	movs	r2, #9
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	483e      	ldr	r0, [pc, #248]	; (8002354 <main+0x618>)
 800225c:	f000 fd0f 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 10, 80, (unsigned char*) SENSOR.Carbon);
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <main+0x648>)
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2350      	movs	r3, #80	; 0x50
 8002266:	220a      	movs	r2, #10
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	483a      	ldr	r0, [pc, #232]	; (8002354 <main+0x618>)
 800226c:	f000 fd07 	bl	8002c7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 11, 80, (unsigned char*) SENSOR.AirFlow);
 8002270:	4b45      	ldr	r3, [pc, #276]	; (8002388 <main+0x64c>)
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2350      	movs	r3, #80	; 0x50
 8002276:	220b      	movs	r2, #11
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	4836      	ldr	r0, [pc, #216]	; (8002354 <main+0x618>)
 800227c:	f000 fcff 	bl	8002c7e <Delimiter>

				  resetWDT();
 8002280:	f000 fb10 	bl	80028a4 <resetWDT>

				  // Send data to server
				  HAL_Delay(1);
 8002284:	2001      	movs	r0, #1
 8002286:	f001 f941 	bl	800350c <HAL_Delay>
				  memset(URL_temp, 0x00, sizeof(URL_temp));
 800228a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800228e:	2100      	movs	r1, #0
 8002290:	483e      	ldr	r0, [pc, #248]	; (800238c <main+0x650>)
 8002292:	f004 fb57 	bl	8006944 <memset>
				  URL_len = httpSend(GNSS.lat, GNSS.lon, SENSOR.COMPID, SENSOR.timeStemp, SENSOR.dateStamp, SENSOR.X, SENSOR.Y, SENSOR.Z, SENSOR.Huim, SENSOR.Temp, SENSOR.Alc, SENSOR.Carbon, SENSOR.AirFlow, URL_temp);
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <main+0x650>)
 8002298:	9309      	str	r3, [sp, #36]	; 0x24
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <main+0x64c>)
 800229c:	9308      	str	r3, [sp, #32]
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <main+0x648>)
 80022a0:	9307      	str	r3, [sp, #28]
 80022a2:	4b37      	ldr	r3, [pc, #220]	; (8002380 <main+0x644>)
 80022a4:	9306      	str	r3, [sp, #24]
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <main+0x640>)
 80022a8:	9305      	str	r3, [sp, #20]
 80022aa:	4b33      	ldr	r3, [pc, #204]	; (8002378 <main+0x63c>)
 80022ac:	9304      	str	r3, [sp, #16]
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <main+0x638>)
 80022b0:	9303      	str	r3, [sp, #12]
 80022b2:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <main+0x634>)
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <main+0x630>)
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <main+0x62c>)
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <main+0x628>)
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <main+0x5e8>)
 80022c2:	491c      	ldr	r1, [pc, #112]	; (8002334 <main+0x5f8>)
 80022c4:	481c      	ldr	r0, [pc, #112]	; (8002338 <main+0x5fc>)
 80022c6:	f7ff fb77 	bl	80019b8 <httpSend>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a30      	ldr	r2, [pc, #192]	; (8002390 <main+0x654>)
 80022ce:	6013      	str	r3, [r2, #0]

				  UART6_Debug("URL DUMP :\n");
 80022d0:	4830      	ldr	r0, [pc, #192]	; (8002394 <main+0x658>)
 80022d2:	f000 f9f1 	bl	80026b8 <UART6_Debug>
				  UART6_Debug((char*) URL_temp);
 80022d6:	482d      	ldr	r0, [pc, #180]	; (800238c <main+0x650>)
 80022d8:	f000 f9ee 	bl	80026b8 <UART6_Debug>
				  UART6_Debug("\r\n");
 80022dc:	482e      	ldr	r0, [pc, #184]	; (8002398 <main+0x65c>)
 80022de:	f000 f9eb 	bl	80026b8 <UART6_Debug>

				  resetWDT();
 80022e2:	f000 fadf 	bl	80028a4 <resetWDT>

				  HAL_Delay(10);
 80022e6:	200a      	movs	r0, #10
 80022e8:	f001 f910 	bl	800350c <HAL_Delay>

				  memset(textBuffer, 0x00, sizeof(textBuffer));
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	2100      	movs	r1, #0
 80022f0:	482a      	ldr	r0, [pc, #168]	; (800239c <main+0x660>)
 80022f2:	f004 fb27 	bl	8006944 <memset>
				  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80022f6:	22ff      	movs	r2, #255	; 0xff
 80022f8:	2100      	movs	r1, #0
 80022fa:	4829      	ldr	r0, [pc, #164]	; (80023a0 <main+0x664>)
 80022fc:	f004 fb22 	bl	8006944 <memset>


				  for(unsigned char count = 0; count < 3; count++) {
 8002300:	2300      	movs	r3, #0
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	e0f7      	b.n	80024f6 <main+0x7ba>
 8002306:	bf00      	nop
 8002308:	0800b47c 	.word	0x0800b47c
 800230c:	20000590 	.word	0x20000590
 8002310:	0800b444 	.word	0x0800b444
 8002314:	200001fc 	.word	0x200001fc
 8002318:	20000b7d 	.word	0x20000b7d
 800231c:	40020400 	.word	0x40020400
 8002320:	0800b494 	.word	0x0800b494
 8002324:	20000db4 	.word	0x20000db4
 8002328:	20000b7c 	.word	0x20000b7c
 800232c:	20000da4 	.word	0x20000da4
 8002330:	20000d94 	.word	0x20000d94
 8002334:	20000d84 	.word	0x20000d84
 8002338:	20000d74 	.word	0x20000d74
 800233c:	0800b4a8 	.word	0x0800b4a8
 8002340:	0800b4c4 	.word	0x0800b4c4
 8002344:	0800b3b4 	.word	0x0800b3b4
 8002348:	20000d54 	.word	0x20000d54
 800234c:	0800b4e8 	.word	0x0800b4e8
 8002350:	0800b504 	.word	0x0800b504
 8002354:	200009f4 	.word	0x200009f4
 8002358:	0800b508 	.word	0x0800b508
 800235c:	200007f4 	.word	0x200007f4
 8002360:	0800b524 	.word	0x0800b524
 8002364:	20000dc8 	.word	0x20000dc8
 8002368:	20000db8 	.word	0x20000db8
 800236c:	20000dd8 	.word	0x20000dd8
 8002370:	20000dde 	.word	0x20000dde
 8002374:	20000de4 	.word	0x20000de4
 8002378:	20000dea 	.word	0x20000dea
 800237c:	20000df0 	.word	0x20000df0
 8002380:	20000df6 	.word	0x20000df6
 8002384:	20000dfc 	.word	0x20000dfc
 8002388:	20000e02 	.word	0x20000e02
 800238c:	20000614 	.word	0x20000614
 8002390:	20000b74 	.word	0x20000b74
 8002394:	0800b540 	.word	0x0800b540
 8002398:	0800b54c 	.word	0x0800b54c
 800239c:	20000594 	.word	0x20000594
 80023a0:	20000a74 	.word	0x20000a74
					  switch(count) {
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d013      	beq.n	80023d2 <main+0x696>
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	dc1a      	bgt.n	80023e4 <main+0x6a8>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <main+0x67c>
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d008      	beq.n	80023c8 <main+0x68c>
 80023b6:	e015      	b.n	80023e4 <main+0x6a8>
						  case 0 :
							  sprintf(textBuffer, "AT+QHTTPURL=%d,80\r\n", URL_len);
 80023b8:	4b67      	ldr	r3, [pc, #412]	; (8002558 <main+0x81c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4967      	ldr	r1, [pc, #412]	; (800255c <main+0x820>)
 80023c0:	4867      	ldr	r0, [pc, #412]	; (8002560 <main+0x824>)
 80023c2:	f004 ff31 	bl	8007228 <siprintf>
							  break;
 80023c6:	e00d      	b.n	80023e4 <main+0x6a8>

						  case 1 :
							  sprintf(textBuffer, "AT+QHTTPPOST=1,60,60\r\n");
 80023c8:	4966      	ldr	r1, [pc, #408]	; (8002564 <main+0x828>)
 80023ca:	4865      	ldr	r0, [pc, #404]	; (8002560 <main+0x824>)
 80023cc:	f004 ff2c 	bl	8007228 <siprintf>
							  break;
 80023d0:	e008      	b.n	80023e4 <main+0x6a8>

						  case 2 :
							  HAL_Delay(3000);
 80023d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023d6:	f001 f899 	bl	800350c <HAL_Delay>
							  sprintf(textBuffer, "AT+QHTTPREAD=80\r\n");
 80023da:	4963      	ldr	r1, [pc, #396]	; (8002568 <main+0x82c>)
 80023dc:	4860      	ldr	r0, [pc, #384]	; (8002560 <main+0x824>)
 80023de:	f004 ff23 	bl	8007228 <siprintf>
							  break;
 80023e2:	bf00      	nop
					  }


					  UART6_Debug((char *) textBuffer);
 80023e4:	485e      	ldr	r0, [pc, #376]	; (8002560 <main+0x824>)
 80023e6:	f000 f967 	bl	80026b8 <UART6_Debug>
					  UART6_Debug("\r\n");
 80023ea:	4860      	ldr	r0, [pc, #384]	; (800256c <main+0x830>)
 80023ec:	f000 f964 	bl	80026b8 <UART6_Debug>
					  SendCMD_LTE((char *) textBuffer);
 80023f0:	485b      	ldr	r0, [pc, #364]	; (8002560 <main+0x824>)
 80023f2:	f000 f98d 	bl	8002710 <SendCMD_LTE>
					  sendURL_flag = 1;
 80023f6:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <main+0x834>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]

					  while(sendURL_flag == 1) {
 80023fc:	e074      	b.n	80024e8 <main+0x7ac>
						  if(findTarget(lteComm_MainBuff, "CONNECT") == 1) {
 80023fe:	495d      	ldr	r1, [pc, #372]	; (8002574 <main+0x838>)
 8002400:	485d      	ldr	r0, [pc, #372]	; (8002578 <main+0x83c>)
 8002402:	f000 f9fd 	bl	8002800 <findTarget>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d135      	bne.n	8002478 <main+0x73c>
							  if(count == 0) {
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <main+0x6dc>
								  SendCMD_LTE((char *) URL_temp);
 8002412:	485a      	ldr	r0, [pc, #360]	; (800257c <main+0x840>)
 8002414:	f000 f97c 	bl	8002710 <SendCMD_LTE>
							  }

							  if(count == 1) {
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d102      	bne.n	8002424 <main+0x6e8>
								  SendCMD_LTE((char *) "\r");
 800241e:	4858      	ldr	r0, [pc, #352]	; (8002580 <main+0x844>)
 8002420:	f000 f976 	bl	8002710 <SendCMD_LTE>
							  }

							  if(count == 2) {
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d11b      	bne.n	8002462 <main+0x726>
								  memset(dump_temp, 0x00, sizeof(dump_temp));
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	2100      	movs	r1, #0
 800242e:	4855      	ldr	r0, [pc, #340]	; (8002584 <main+0x848>)
 8002430:	f004 fa88 	bl	8006944 <memset>
								  memcpy(dump_temp, lteComm_MainBuff, sizeof(dump_temp));
 8002434:	4a53      	ldr	r2, [pc, #332]	; (8002584 <main+0x848>)
 8002436:	4b50      	ldr	r3, [pc, #320]	; (8002578 <main+0x83c>)
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	461a      	mov	r2, r3
 8002440:	f004 fa72 	bl	8006928 <memcpy>

								  UART6_Debug("\n");
 8002444:	4850      	ldr	r0, [pc, #320]	; (8002588 <main+0x84c>)
 8002446:	f000 f937 	bl	80026b8 <UART6_Debug>
								  UART6_Debug((char *) dump_temp);
 800244a:	484e      	ldr	r0, [pc, #312]	; (8002584 <main+0x848>)
 800244c:	f000 f934 	bl	80026b8 <UART6_Debug>
								  UART6_Debug("\r\n");
 8002450:	4846      	ldr	r0, [pc, #280]	; (800256c <main+0x830>)
 8002452:	f000 f931 	bl	80026b8 <UART6_Debug>

								  SendData_RS485((char*) "P");
 8002456:	484d      	ldr	r0, [pc, #308]	; (800258c <main+0x850>)
 8002458:	f000 f944 	bl	80026e4 <SendData_RS485>
								  sendURL_flag = 0;
 800245c:	4b44      	ldr	r3, [pc, #272]	; (8002570 <main+0x834>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
							  }

							  memset(textBuffer, 0x00, sizeof(textBuffer));
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	2100      	movs	r1, #0
 8002466:	483e      	ldr	r0, [pc, #248]	; (8002560 <main+0x824>)
 8002468:	f004 fa6c 	bl	8006944 <memset>
							  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	2100      	movs	r1, #0
 8002470:	4841      	ldr	r0, [pc, #260]	; (8002578 <main+0x83c>)
 8002472:	f004 fa67 	bl	8006944 <memset>
 8002476:	e037      	b.n	80024e8 <main+0x7ac>
						  }

						  else if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8002478:	4945      	ldr	r1, [pc, #276]	; (8002590 <main+0x854>)
 800247a:	483f      	ldr	r0, [pc, #252]	; (8002578 <main+0x83c>)
 800247c:	f000 f9c0 	bl	8002800 <findTarget>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d110      	bne.n	80024a8 <main+0x76c>

							  UART6_Debug("[LTE] -> OK\r\n");
 8002486:	4843      	ldr	r0, [pc, #268]	; (8002594 <main+0x858>)
 8002488:	f000 f916 	bl	80026b8 <UART6_Debug>

							  memset(textBuffer, 0x00, sizeof(textBuffer));
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	2100      	movs	r1, #0
 8002490:	4833      	ldr	r0, [pc, #204]	; (8002560 <main+0x824>)
 8002492:	f004 fa57 	bl	8006944 <memset>
							  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8002496:	22ff      	movs	r2, #255	; 0xff
 8002498:	2100      	movs	r1, #0
 800249a:	4837      	ldr	r0, [pc, #220]	; (8002578 <main+0x83c>)
 800249c:	f004 fa52 	bl	8006944 <memset>

							  sendURL_flag = 0;
 80024a0:	4b33      	ldr	r3, [pc, #204]	; (8002570 <main+0x834>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e01f      	b.n	80024e8 <main+0x7ac>
						  }


						  else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80024a8:	493b      	ldr	r1, [pc, #236]	; (8002598 <main+0x85c>)
 80024aa:	4833      	ldr	r0, [pc, #204]	; (8002578 <main+0x83c>)
 80024ac:	f000 f9a8 	bl	8002800 <findTarget>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d118      	bne.n	80024e8 <main+0x7ac>

							  UART6_Debug("[LTE] -> ERROR\r\n");
 80024b6:	4839      	ldr	r0, [pc, #228]	; (800259c <main+0x860>)
 80024b8:	f000 f8fe 	bl	80026b8 <UART6_Debug>

							  SendData_RS485((char*) "X");
 80024bc:	4838      	ldr	r0, [pc, #224]	; (80025a0 <main+0x864>)
 80024be:	f000 f911 	bl	80026e4 <SendData_RS485>


							  memset(textBuffer, 0x00, sizeof(textBuffer));
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2100      	movs	r1, #0
 80024c6:	4826      	ldr	r0, [pc, #152]	; (8002560 <main+0x824>)
 80024c8:	f004 fa3c 	bl	8006944 <memset>
							  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80024cc:	22ff      	movs	r2, #255	; 0xff
 80024ce:	2100      	movs	r1, #0
 80024d0:	4829      	ldr	r0, [pc, #164]	; (8002578 <main+0x83c>)
 80024d2:	f004 fa37 	bl	8006944 <memset>

							  sysFlag.LTE_ERROR = 1;
 80024d6:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <main+0x868>)
 80024d8:	2201      	movs	r2, #1
 80024da:	709a      	strb	r2, [r3, #2]
							  sendURL_flag = 0;
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <main+0x834>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
							  intterruptEvent_Flag = 0;
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <main+0x86c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
					  while(sendURL_flag == 1) {
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <main+0x834>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d086      	beq.n	80023fe <main+0x6c2>
				  for(unsigned char count = 0; count < 3; count++) {
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	3301      	adds	r3, #1
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	f67f af53 	bls.w	80023a4 <main+0x668>
 80024fe:	e005      	b.n	800250c <main+0x7d0>
						  }
					  }
				  }
				}else {
					UART6_Debug("[MCU] -> DATA NOT VALID\r\n");
 8002500:	482a      	ldr	r0, [pc, #168]	; (80025ac <main+0x870>)
 8002502:	f000 f8d9 	bl	80026b8 <UART6_Debug>
					SendData_RS485((char*) "F");
 8002506:	482a      	ldr	r0, [pc, #168]	; (80025b0 <main+0x874>)
 8002508:	f000 f8ec 	bl	80026e4 <SendData_RS485>
				}

				resetWDT();
 800250c:	f000 f9ca 	bl	80028a4 <resetWDT>

				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				UART6_Debug("[MCU] -> DEACTIVATE INTERNET\r\n");
 8002510:	4828      	ldr	r0, [pc, #160]	; (80025b4 <main+0x878>)
 8002512:	f000 f8d1 	bl	80026b8 <UART6_Debug>
				Deactivate();
 8002516:	f7ff fb9f 	bl	8001c58 <Deactivate>
				AckInternet_flag = 0;
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <main+0x87c>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]


				UART6_Debug("[MCU] -> END PROCESS\r\n\r\n");
 8002520:	4826      	ldr	r0, [pc, #152]	; (80025bc <main+0x880>)
 8002522:	f000 f8c9 	bl	80026b8 <UART6_Debug>

				intterruptEvent_Flag = 0;
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <main+0x86c>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);
 800252c:	2200      	movs	r2, #0
 800252e:	2120      	movs	r1, #32
 8002530:	4823      	ldr	r0, [pc, #140]	; (80025c0 <main+0x884>)
 8002532:	f001 fec1 	bl	80042b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	4821      	ldr	r0, [pc, #132]	; (80025c0 <main+0x884>)
 800253c:	f001 febc 	bl	80042b8 <HAL_GPIO_WritePin>
	  while(intterruptEvent_Flag == 1 && AckInternet_flag == 1) {
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <main+0x86c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	f47f ac72 	bne.w	8001e2e <main+0xf2>
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <main+0x87c>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	f43f ad9a 	beq.w	8002088 <main+0x34c>
	  if(sysCounter.main_ms_counter == 0) {
 8002554:	e46b      	b.n	8001e2e <main+0xf2>
 8002556:	bf00      	nop
 8002558:	20000b74 	.word	0x20000b74
 800255c:	0800b550 	.word	0x0800b550
 8002560:	20000594 	.word	0x20000594
 8002564:	0800b564 	.word	0x0800b564
 8002568:	0800b57c 	.word	0x0800b57c
 800256c:	0800b54c 	.word	0x0800b54c
 8002570:	20000b78 	.word	0x20000b78
 8002574:	0800b590 	.word	0x0800b590
 8002578:	20000a74 	.word	0x20000a74
 800257c:	20000614 	.word	0x20000614
 8002580:	0800b598 	.word	0x0800b598
 8002584:	20000774 	.word	0x20000774
 8002588:	0800b59c 	.word	0x0800b59c
 800258c:	0800b5a0 	.word	0x0800b5a0
 8002590:	0800b5a4 	.word	0x0800b5a4
 8002594:	0800b5a8 	.word	0x0800b5a8
 8002598:	0800b5b8 	.word	0x0800b5b8
 800259c:	0800b5c0 	.word	0x0800b5c0
 80025a0:	0800b444 	.word	0x0800b444
 80025a4:	20000d70 	.word	0x20000d70
 80025a8:	200001fc 	.word	0x200001fc
 80025ac:	0800b5d4 	.word	0x0800b5d4
 80025b0:	0800b504 	.word	0x0800b504
 80025b4:	0800b5f0 	.word	0x0800b5f0
 80025b8:	20000b7d 	.word	0x20000b7d
 80025bc:	0800b610 	.word	0x0800b610
 80025c0:	40020400 	.word	0x40020400

080025c4 <sysValinit>:

// user custom functions


// init startup value at boot
void sysValinit(void) {
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <sysValinit+0x48>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <sysValinit+0x48>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
	sysCounter.prev_ERRORtime = 0;
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <sysValinit+0x48>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
	sysCounter.rebootCount = 0;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <sysValinit+0x48>)
 80025dc:	2200      	movs	r2, #0
 80025de:	761a      	strb	r2, [r3, #24]
	sysCounter.prev_ClearWDT = 0;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <sysValinit+0x48>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <sysValinit+0x48>)
 80025e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025ec:	835a      	strh	r2, [r3, #26]

	sysFlag.LTE_CMD_Send = 0;
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <sysValinit+0x4c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_INIT_ERROR = 0;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <sysValinit+0x4c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	705a      	strb	r2, [r3, #1]
	sysFlag.LTE_ERROR = 0;
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <sysValinit+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	709a      	strb	r2, [r3, #2]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000d54 	.word	0x20000d54
 8002610:	20000d70 	.word	0x20000d70

08002614 <sensorValInit>:


// init sensor variable handle
// set/clear buffer array
void sensorValInit(void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	memset(SENSOR.COMPID, 0x00, sizeof(SENSOR.COMPID));
 8002618:	2204      	movs	r2, #4
 800261a:	2100      	movs	r1, #0
 800261c:	481b      	ldr	r0, [pc, #108]	; (800268c <sensorValInit+0x78>)
 800261e:	f004 f991 	bl	8006944 <memset>
	memset(SENSOR.dateStamp, 0x00, sizeof(SENSOR.dateStamp));
 8002622:	2210      	movs	r2, #16
 8002624:	2100      	movs	r1, #0
 8002626:	481a      	ldr	r0, [pc, #104]	; (8002690 <sensorValInit+0x7c>)
 8002628:	f004 f98c 	bl	8006944 <memset>
	memset(SENSOR.timeStemp, 0x00, sizeof(SENSOR.timeStemp));
 800262c:	2210      	movs	r2, #16
 800262e:	2100      	movs	r1, #0
 8002630:	4818      	ldr	r0, [pc, #96]	; (8002694 <sensorValInit+0x80>)
 8002632:	f004 f987 	bl	8006944 <memset>
	memset(SENSOR.X, 0x00, sizeof(SENSOR.X));
 8002636:	2206      	movs	r2, #6
 8002638:	2100      	movs	r1, #0
 800263a:	4817      	ldr	r0, [pc, #92]	; (8002698 <sensorValInit+0x84>)
 800263c:	f004 f982 	bl	8006944 <memset>
	memset(SENSOR.Y, 0x00, sizeof(SENSOR.Y));
 8002640:	2206      	movs	r2, #6
 8002642:	2100      	movs	r1, #0
 8002644:	4815      	ldr	r0, [pc, #84]	; (800269c <sensorValInit+0x88>)
 8002646:	f004 f97d 	bl	8006944 <memset>
	memset(SENSOR.Z, 0x00, sizeof(SENSOR.Z));
 800264a:	2206      	movs	r2, #6
 800264c:	2100      	movs	r1, #0
 800264e:	4814      	ldr	r0, [pc, #80]	; (80026a0 <sensorValInit+0x8c>)
 8002650:	f004 f978 	bl	8006944 <memset>
	memset(SENSOR.Huim, 0x00, sizeof(SENSOR.Huim));
 8002654:	2206      	movs	r2, #6
 8002656:	2100      	movs	r1, #0
 8002658:	4812      	ldr	r0, [pc, #72]	; (80026a4 <sensorValInit+0x90>)
 800265a:	f004 f973 	bl	8006944 <memset>
	memset(SENSOR.Temp, 0x00, sizeof(SENSOR.Temp));
 800265e:	2206      	movs	r2, #6
 8002660:	2100      	movs	r1, #0
 8002662:	4811      	ldr	r0, [pc, #68]	; (80026a8 <sensorValInit+0x94>)
 8002664:	f004 f96e 	bl	8006944 <memset>
	memset(SENSOR.Alc, 0x00, sizeof(SENSOR.Alc));
 8002668:	2206      	movs	r2, #6
 800266a:	2100      	movs	r1, #0
 800266c:	480f      	ldr	r0, [pc, #60]	; (80026ac <sensorValInit+0x98>)
 800266e:	f004 f969 	bl	8006944 <memset>
	memset(SENSOR.Carbon, 0x00, sizeof(SENSOR.Carbon));
 8002672:	2206      	movs	r2, #6
 8002674:	2100      	movs	r1, #0
 8002676:	480e      	ldr	r0, [pc, #56]	; (80026b0 <sensorValInit+0x9c>)
 8002678:	f004 f964 	bl	8006944 <memset>
	memset(SENSOR.AirFlow, 0x00, sizeof(SENSOR.AirFlow));
 800267c:	2206      	movs	r2, #6
 800267e:	2100      	movs	r1, #0
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <sensorValInit+0xa0>)
 8002682:	f004 f95f 	bl	8006944 <memset>
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000db4 	.word	0x20000db4
 8002690:	20000db8 	.word	0x20000db8
 8002694:	20000dc8 	.word	0x20000dc8
 8002698:	20000dd8 	.word	0x20000dd8
 800269c:	20000dde 	.word	0x20000dde
 80026a0:	20000de4 	.word	0x20000de4
 80026a4:	20000dea 	.word	0x20000dea
 80026a8:	20000df0 	.word	0x20000df0
 80026ac:	20000df6 	.word	0x20000df6
 80026b0:	20000dfc 	.word	0x20000dfc
 80026b4:	20000e02 	.word	0x20000e02

080026b8 <UART6_Debug>:


// UART Debug
void UART6_Debug(char* msg) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 1000);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fd fd8d 	bl	80001e0 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4803      	ldr	r0, [pc, #12]	; (80026e0 <UART6_Debug+0x28>)
 80026d2:	f002 ff10 	bl	80054f6 <HAL_UART_Transmit>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000c50 	.word	0x20000c50

080026e4 <SendData_RS485>:

// RS485 Tx [Polling method]
void SendData_RS485(char *msg) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 1000);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7fd fd77 	bl	80001e0 <strlen>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4803      	ldr	r0, [pc, #12]	; (800270c <SendData_RS485+0x28>)
 80026fe:	f002 fefa 	bl	80054f6 <HAL_UART_Transmit>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000bc8 	.word	0x20000bc8

08002710 <SendCMD_LTE>:

void SendCMD_LTE(char *msg) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 1000);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7fd fd61 	bl	80001e0 <strlen>
 800271e:	4603      	mov	r3, r0
 8002720:	b29a      	uxth	r2, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4803      	ldr	r0, [pc, #12]	; (8002738 <SendCMD_LTE+0x28>)
 800272a:	f002 fee4 	bl	80054f6 <HAL_UART_Transmit>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000c0c 	.word	0x20000c0c

0800273c <HAL_UARTEx_RxEventCallback>:


// UART1/UART2 Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_UARTEx_RxEventCallback+0x9c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d11c      	bne.n	800278c <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	4921      	ldr	r1, [pc, #132]	; (80027dc <HAL_UARTEx_RxEventCallback+0xa0>)
 8002756:	4822      	ldr	r0, [pc, #136]	; (80027e0 <HAL_UARTEx_RxEventCallback+0xa4>)
 8002758:	f002 ff5f 	bl	800561a <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 800275c:	22ff      	movs	r2, #255	; 0xff
 800275e:	2100      	movs	r1, #0
 8002760:	4820      	ldr	r0, [pc, #128]	; (80027e4 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002762:	f004 f8ef 	bl	8006944 <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	461a      	mov	r2, r3
 800276a:	491c      	ldr	r1, [pc, #112]	; (80027dc <HAL_UARTEx_RxEventCallback+0xa0>)
 800276c:	481d      	ldr	r0, [pc, #116]	; (80027e4 <HAL_UARTEx_RxEventCallback+0xa8>)
 800276e:	f004 f8db 	bl	8006928 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	2100      	movs	r1, #0
 8002776:	4819      	ldr	r0, [pc, #100]	; (80027dc <HAL_UARTEx_RxEventCallback+0xa0>)
 8002778:	f004 f8e4 	bl	8006944 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_UARTEx_RxEventCallback+0xac>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_UARTEx_RxEventCallback+0xac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0208 	bic.w	r2, r2, #8
 800278a:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_UARTEx_RxEventCallback+0xb0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d11c      	bne.n	80027d0 <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	4915      	ldr	r1, [pc, #84]	; (80027f0 <HAL_UARTEx_RxEventCallback+0xb4>)
 800279a:	4816      	ldr	r0, [pc, #88]	; (80027f4 <HAL_UARTEx_RxEventCallback+0xb8>)
 800279c:	f002 ff3d 	bl	800561a <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	2100      	movs	r1, #0
 80027a4:	4814      	ldr	r0, [pc, #80]	; (80027f8 <HAL_UARTEx_RxEventCallback+0xbc>)
 80027a6:	f004 f8cd 	bl	8006944 <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4910      	ldr	r1, [pc, #64]	; (80027f0 <HAL_UARTEx_RxEventCallback+0xb4>)
 80027b0:	4811      	ldr	r0, [pc, #68]	; (80027f8 <HAL_UARTEx_RxEventCallback+0xbc>)
 80027b2:	f004 f8b9 	bl	8006928 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	2100      	movs	r1, #0
 80027ba:	480d      	ldr	r0, [pc, #52]	; (80027f0 <HAL_UARTEx_RxEventCallback+0xb4>)
 80027bc:	f004 f8c2 	bl	8006944 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_UARTEx_RxEventCallback+0xc0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_UARTEx_RxEventCallback+0xc0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0208 	bic.w	r2, r2, #8
 80027ce:	601a      	str	r2, [r3, #0]
	}
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40004400 	.word	0x40004400
 80027dc:	200008f4 	.word	0x200008f4
 80027e0:	20000c0c 	.word	0x20000c0c
 80027e4:	20000a74 	.word	0x20000a74
 80027e8:	20000cf4 	.word	0x20000cf4
 80027ec:	40011000 	.word	0x40011000
 80027f0:	20000874 	.word	0x20000874
 80027f4:	20000bc8 	.word	0x20000bc8
 80027f8:	200009f4 	.word	0x200009f4
 80027fc:	20000c94 	.word	0x20000c94

08002800 <findTarget>:


// find target in string
int findTarget(const char *inStr, const char *target) {
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
    int i, j;
    for (i = 0; inStr[i] != '\0'; i++) {
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e023      	b.n	8002858 <findTarget+0x58>
        j = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8002814:	e002      	b.n	800281c <findTarget+0x1c>
            j++;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3301      	adds	r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	4413      	add	r3, r2
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00c      	beq.n	8002842 <findTarget+0x42>
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4413      	add	r3, r2
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	440b      	add	r3, r1
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d0e9      	beq.n	8002816 <findTarget+0x16>
        }
        if (target[j] == '\0') {
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <findTarget+0x52>
            return 1; // Return 1 if found
 800284e:	2301      	movs	r3, #1
 8002850:	e009      	b.n	8002866 <findTarget+0x66>
    for (i = 0; inStr[i] != '\0'; i++) {
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1d5      	bne.n	8002810 <findTarget+0x10>
        }
    }
    return 0; // Return 0 if not found
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_TIM_PeriodElapsedCallback>:


// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d104      	bne.n	8002890 <HAL_TIM_PeriodElapsedCallback+0x1c>
		sysCounter.main_ms_counter++;
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800288e:	6013      	str	r3, [r2, #0]
	}
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40000800 	.word	0x40000800
 80028a0:	20000d54 	.word	0x20000d54

080028a4 <resetWDT>:
void Clear_Buff_Commu(void) {
	memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));
}


void resetWDT(void) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RESET_WDT, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	2110      	movs	r1, #16
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <resetWDT+0x24>)
 80028ae:	f001 fd03 	bl	80042b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f000 fe2a 	bl	800350c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, RESET_WDT, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2110      	movs	r1, #16
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <resetWDT+0x24>)
 80028be:	f001 fcfb 	bl	80042b8 <HAL_GPIO_WritePin>
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40020400 	.word	0x40020400

080028cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b094      	sub	sp, #80	; 0x50
 80028d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028d2:	f107 0320 	add.w	r3, r7, #32
 80028d6:	2230      	movs	r2, #48	; 0x30
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 f832 	bl	8006944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <SystemClock_Config+0xc8>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <SystemClock_Config+0xc8>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <SystemClock_Config+0xc8>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800290c:	2300      	movs	r3, #0
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <SystemClock_Config+0xcc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a20      	ldr	r2, [pc, #128]	; (8002998 <SystemClock_Config+0xcc>)
 8002916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <SystemClock_Config+0xcc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002928:	2301      	movs	r3, #1
 800292a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800292c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002932:	2302      	movs	r3, #2
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800293a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800293c:	2319      	movs	r3, #25
 800293e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002940:	2390      	movs	r3, #144	; 0x90
 8002942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002944:	2302      	movs	r3, #2
 8002946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002948:	2303      	movs	r3, #3
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	4618      	mov	r0, r3
 8002952:	f001 fce5 	bl	8004320 <HAL_RCC_OscConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800295c:	f000 f98a 	bl	8002c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002960:	230f      	movs	r3, #15
 8002962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002964:	2302      	movs	r3, #2
 8002966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002970:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2102      	movs	r1, #2
 800297c:	4618      	mov	r0, r3
 800297e:	f001 ff47 	bl	8004810 <HAL_RCC_ClockConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002988:	f000 f974 	bl	8002c74 <Error_Handler>
  }
}
 800298c:	bf00      	nop
 800298e:	3750      	adds	r7, #80	; 0x50
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000

0800299c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a2:	f107 0308 	add.w	r3, r7, #8
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	463b      	mov	r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <MX_TIM4_Init+0x94>)
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <MX_TIM4_Init+0x98>)
 80029bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <MX_TIM4_Init+0x94>)
 80029c0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80029c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <MX_TIM4_Init+0x94>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <MX_TIM4_Init+0x94>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <MX_TIM4_Init+0x94>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <MX_TIM4_Init+0x94>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029de:	4814      	ldr	r0, [pc, #80]	; (8002a30 <MX_TIM4_Init+0x94>)
 80029e0:	f002 f8f6 	bl	8004bd0 <HAL_TIM_Base_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80029ea:	f000 f943 	bl	8002c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80029f4:	f107 0308 	add.w	r3, r7, #8
 80029f8:	4619      	mov	r1, r3
 80029fa:	480d      	ldr	r0, [pc, #52]	; (8002a30 <MX_TIM4_Init+0x94>)
 80029fc:	f002 faa2 	bl	8004f44 <HAL_TIM_ConfigClockSource>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002a06:	f000 f935 	bl	8002c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a12:	463b      	mov	r3, r7
 8002a14:	4619      	mov	r1, r3
 8002a16:	4806      	ldr	r0, [pc, #24]	; (8002a30 <MX_TIM4_Init+0x94>)
 8002a18:	f002 fc9e 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002a22:	f000 f927 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000b80 	.word	0x20000b80
 8002a34:	40000800 	.word	0x40000800

08002a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <MX_USART1_UART_Init+0x50>)
 8002a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a5e:	220c      	movs	r2, #12
 8002a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a70:	f002 fcf4 	bl	800545c <HAL_UART_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a7a:	f000 f8fb 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000bc8 	.word	0x20000bc8
 8002a88:	40011000 	.word	0x40011000

08002a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002a92:	4a12      	ldr	r2, [pc, #72]	; (8002adc <MX_USART2_UART_Init+0x50>)
 8002a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_USART2_UART_Init+0x4c>)
 8002ac4:	f002 fcca 	bl	800545c <HAL_UART_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ace:	f000 f8d1 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000c0c 	.word	0x20000c0c
 8002adc:	40004400 	.word	0x40004400

08002ae0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <MX_USART6_UART_Init+0x50>)
 8002ae8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002af0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002b06:	220c      	movs	r2, #12
 8002b08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <MX_USART6_UART_Init+0x4c>)
 8002b18:	f002 fca0 	bl	800545c <HAL_UART_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b22:	f000 f8a7 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000c50 	.word	0x20000c50
 8002b30:	40011400 	.word	0x40011400

08002b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <MX_DMA_Init+0x68>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <MX_DMA_Init+0x68>)
 8002b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <MX_DMA_Init+0x68>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <MX_DMA_Init+0x68>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <MX_DMA_Init+0x68>)
 8002b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <MX_DMA_Init+0x68>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2010      	movs	r0, #16
 8002b78:	f000 fddd 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b7c:	2010      	movs	r0, #16
 8002b7e:	f000 fdf6 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	203a      	movs	r0, #58	; 0x3a
 8002b88:	f000 fdd5 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002b8c:	203a      	movs	r0, #58	; 0x3a
 8002b8e:	f000 fdee 	bl	800376e <HAL_NVIC_EnableIRQ>

}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800

08002ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <MX_GPIO_Init+0xc8>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f240 21f2 	movw	r1, #754	; 0x2f2
 8002c10:	4816      	ldr	r0, [pc, #88]	; (8002c6c <MX_GPIO_Init+0xcc>)
 8002c12:	f001 fb51 	bl	80042b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002c16:	2200      	movs	r2, #0
 8002c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c1c:	4814      	ldr	r0, [pc, #80]	; (8002c70 <MX_GPIO_Init+0xd0>)
 8002c1e:	f001 fb4b 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB4 PB5 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002c22:	f240 23f2 	movw	r3, #754	; 0x2f2
 8002c26:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480c      	ldr	r0, [pc, #48]	; (8002c6c <MX_GPIO_Init+0xcc>)
 8002c3c:	f001 f9b8 	bl	8003fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	4619      	mov	r1, r3
 8002c58:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_GPIO_Init+0xd0>)
 8002c5a:	f001 f9a9 	bl	8003fb0 <HAL_GPIO_Init>

}
 8002c5e:	bf00      	nop
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40020000 	.word	0x40020000

08002c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c78:	b672      	cpsid	i
}
 8002c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <Error_Handler+0x8>

08002c7e <Delimiter>:
////            *(dataOutput+writerPos) = '\0';
////        }
//    }
//}

void Delimiter(char *inputData, const char delims, int index, unsigned int maxIndexSize, unsigned char *dataOutput){
 8002c7e:	b480      	push	{r7}
 8002c80:	b08b      	sub	sp, #44	; 0x2c
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	72fb      	strb	r3, [r7, #11]
    // Parsed string(char array) to split value by demiliter and output value
    // Argument: ( input data , delimiter/splitter letter , no of extract data , max array size, array to store result)
    unsigned int found = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int strIndex[2] = {0};
 8002c92:	f107 0310 	add.w	r3, r7, #16
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
    unsigned int readerPos = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
    unsigned int loaderPos = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
    unsigned int writerPos = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]

    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	e01c      	b.n	8002ce8 <Delimiter+0x6a>

        if(*(inputData+readerPos) == delims || readerPos == maxIndexSize){
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	7afa      	ldrb	r2, [r7, #11]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d003      	beq.n	8002cc4 <Delimiter+0x46>
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d10e      	bne.n	8002ce2 <Delimiter+0x64>
            found++;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
            strIndex[0] = strIndex[1]+1;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	613b      	str	r3, [r7, #16]
            strIndex[1] = (readerPos == maxIndexSize) ? readerPos + 1 : readerPos;
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d102      	bne.n	8002cde <Delimiter+0x60>
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <Delimiter+0x62>
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	617b      	str	r3, [r7, #20]
    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3a      	ldr	r2, [r7, #32]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d203      	bcs.n	8002cf8 <Delimiter+0x7a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d9da      	bls.n	8002cae <Delimiter+0x30>
        }
    }

    if(found > index){
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d91c      	bls.n	8002d3a <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	e015      	b.n	8002d32 <Delimiter+0xb4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	441a      	add	r2, r3
 8002d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	440b      	add	r3, r1
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	701a      	strb	r2, [r3, #0]
           writerPos++;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61bb      	str	r3, [r7, #24]
           if((loaderPos > maxIndexSize)||(writerPos > maxIndexSize)){
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d80a      	bhi.n	8002d3a <Delimiter+0xbc>
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d806      	bhi.n	8002d3a <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d3e5      	bcc.n	8002d06 <Delimiter+0x88>
// to next people if you need to fix it let's do it and thank you (>w<)
//
// Modify by REDWOLF DiGiTAL
// (yep... I'm ignore code performance because I'm not time ;w;)

    if(index == 0) {
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11c      	bne.n	8002d7a <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	e015      	b.n	8002d72 <Delimiter+0xf4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	441a      	add	r2, r3
 8002d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	440b      	add	r3, r1
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	701a      	strb	r2, [r3, #0]
           writerPos++;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	61bb      	str	r3, [r7, #24]

           if((loaderPos > strIndex[0])||(writerPos > strIndex[0])){
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d80a      	bhi.n	8002d7a <Delimiter+0xfc>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d806      	bhi.n	8002d7a <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d3e5      	bcc.n	8002d46 <Delimiter+0xc8>
               break;
           }
        }
    }

    if(index >= found) {
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d825      	bhi.n	8002dce <Delimiter+0x150>
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	e01b      	b.n	8002dc2 <Delimiter+0x144>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	441a      	add	r2, r3
 8002d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	440b      	add	r3, r1
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	701a      	strb	r2, [r3, #0]

           if(*(inputData+loaderPos) == '\0' || (loaderPos >= maxIndexSize) || writerPos >= maxIndexSize) {
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d013      	beq.n	8002dce <Delimiter+0x150>
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d20f      	bcs.n	8002dce <Delimiter+0x150>
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d20b      	bcs.n	8002dce <Delimiter+0x150>
               break;
           }

           writerPos++;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61bb      	str	r3, [r7, #24]
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1dd      	bne.n	8002d8a <Delimiter+0x10c>
        }
    }
}
 8002dce:	bf00      	nop
 8002dd0:	372c      	adds	r7, #44	; 0x2c
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <NMEACRCCal>:
 *  Copy-Distribute-Modify is prohibited
 *
 *  Code created by MangMuang's Elektronik, 15 JULY 2022
 *
 */ // =====================================================
unsigned char NMEACRCCal(const unsigned char *sentenceIn){
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
    unsigned char CRCinStr[3] = {0};
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <NMEACRCCal+0xa0>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	81bb      	strh	r3, [r7, #12]
 8002dea:	2300      	movs	r3, #0
 8002dec:	73bb      	strb	r3, [r7, #14]
    unsigned char CRCin = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	77bb      	strb	r3, [r7, #30]
    unsigned char CRCResult = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char* dollarSign;
    char* starSign;
    unsigned int totalSize = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    dollarSign = strchr((const char *)sentenceIn, '$');
 8002dfc:	2124      	movs	r1, #36	; 0x24
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f004 fa32 	bl	8007268 <strchr>
 8002e04:	6178      	str	r0, [r7, #20]
    starSign = strchr((const char *)sentenceIn, '*');
 8002e06:	212a      	movs	r1, #42	; 0x2a
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f004 fa2d 	bl	8007268 <strchr>
 8002e0e:	6138      	str	r0, [r7, #16]
    totalSize = starSign-dollarSign;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	61bb      	str	r3, [r7, #24]
    strncpy((char *)CRCinStr, starSign + 1, 2);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	f107 030c 	add.w	r3, r7, #12
 8002e20:	2202      	movs	r2, #2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 fa2d 	bl	8007282 <strncpy>
    CRCin = (unsigned char)strtol((char *)CRCinStr, NULL, 16);
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 f8e9 	bl	8008008 <strtol>
 8002e36:	4603      	mov	r3, r0
 8002e38:	77bb      	strb	r3, [r7, #30]
    for(unsigned int CalCnt = 1; CalCnt < totalSize; CalCnt++){
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	e00b      	b.n	8002e58 <NMEACRCCal+0x7c>
        CRCResult ^= sentenceIn[CalCnt];
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	4413      	add	r3, r2
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e4c:	4053      	eors	r3, r2
 8002e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(unsigned int CalCnt = 1; CalCnt < totalSize; CalCnt++){
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	3301      	adds	r3, #1
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	6a3a      	ldr	r2, [r7, #32]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d3ef      	bcc.n	8002e40 <NMEACRCCal+0x64>
    }
    unsigned char CRCCMPResult = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	77fb      	strb	r3, [r7, #31]
    if(CRCin == CRCResult){
 8002e64:	7fba      	ldrb	r2, [r7, #30]
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d101      	bne.n	8002e72 <NMEACRCCal+0x96>
        CRCCMPResult = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]
    }
    return CRCCMPResult;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]

}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0800b62c 	.word	0x0800b62c

08002e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_MspInit+0x4c>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_MspInit+0x4c>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_MspInit+0x4c>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_TIM_Base_MspInit+0x48>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d115      	bne.n	8002f0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_TIM_Base_MspInit+0x4c>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <HAL_TIM_Base_MspInit+0x4c>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <HAL_TIM_Base_MspInit+0x4c>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	201e      	movs	r0, #30
 8002f04:	f000 fc17 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f08:	201e      	movs	r0, #30
 8002f0a:	f000 fc30 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40023800 	.word	0x40023800

08002f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	; 0x38
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a82      	ldr	r2, [pc, #520]	; (8003148 <HAL_UART_MspInit+0x228>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d164      	bne.n	800300c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
 8002f46:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_UART_MspInit+0x22c>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4a80      	ldr	r2, [pc, #512]	; (800314c <HAL_UART_MspInit+0x22c>)
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	6453      	str	r3, [r2, #68]	; 0x44
 8002f52:	4b7e      	ldr	r3, [pc, #504]	; (800314c <HAL_UART_MspInit+0x22c>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	4b7a      	ldr	r3, [pc, #488]	; (800314c <HAL_UART_MspInit+0x22c>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a79      	ldr	r2, [pc, #484]	; (800314c <HAL_UART_MspInit+0x22c>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b77      	ldr	r3, [pc, #476]	; (800314c <HAL_UART_MspInit+0x22c>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f94:	4619      	mov	r1, r3
 8002f96:	486e      	ldr	r0, [pc, #440]	; (8003150 <HAL_UART_MspInit+0x230>)
 8002f98:	f001 f80a 	bl	8003fb0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002f9c:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002f9e:	4a6e      	ldr	r2, [pc, #440]	; (8003158 <HAL_UART_MspInit+0x238>)
 8002fa0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fa8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002faa:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb0:	4b68      	ldr	r3, [pc, #416]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb6:	4b67      	ldr	r3, [pc, #412]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fbe:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc4:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002fca:	4b62      	ldr	r3, [pc, #392]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002fd0:	4b60      	ldr	r3, [pc, #384]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002fde:	485d      	ldr	r0, [pc, #372]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002fe0:	f000 fbe4 	bl	80037ac <HAL_DMA_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002fea:	f7ff fe43 	bl	8002c74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ff4:	4a57      	ldr	r2, [pc, #348]	; (8003154 <HAL_UART_MspInit+0x234>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2025      	movs	r0, #37	; 0x25
 8003000:	f000 fb99 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003004:	2025      	movs	r0, #37	; 0x25
 8003006:	f000 fbb2 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800300a:	e099      	b.n	8003140 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a52      	ldr	r2, [pc, #328]	; (800315c <HAL_UART_MspInit+0x23c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d162      	bne.n	80030dc <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	4b4c      	ldr	r3, [pc, #304]	; (800314c <HAL_UART_MspInit+0x22c>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a4b      	ldr	r2, [pc, #300]	; (800314c <HAL_UART_MspInit+0x22c>)
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b49      	ldr	r3, [pc, #292]	; (800314c <HAL_UART_MspInit+0x22c>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	4b45      	ldr	r3, [pc, #276]	; (800314c <HAL_UART_MspInit+0x22c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a44      	ldr	r2, [pc, #272]	; (800314c <HAL_UART_MspInit+0x22c>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b42      	ldr	r3, [pc, #264]	; (800314c <HAL_UART_MspInit+0x22c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800304e:	230c      	movs	r3, #12
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305a:	2303      	movs	r3, #3
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800305e:	2307      	movs	r3, #7
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003066:	4619      	mov	r1, r3
 8003068:	4839      	ldr	r0, [pc, #228]	; (8003150 <HAL_UART_MspInit+0x230>)
 800306a:	f000 ffa1 	bl	8003fb0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800306e:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <HAL_UART_MspInit+0x240>)
 8003070:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <HAL_UART_MspInit+0x244>)
 8003072:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <HAL_UART_MspInit+0x240>)
 8003076:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800307a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <HAL_UART_MspInit+0x240>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_UART_MspInit+0x240>)
 8003084:	2200      	movs	r2, #0
 8003086:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <HAL_UART_MspInit+0x240>)
 800308a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003090:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_UART_MspInit+0x240>)
 8003092:	2200      	movs	r2, #0
 8003094:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003096:	4b32      	ldr	r3, [pc, #200]	; (8003160 <HAL_UART_MspInit+0x240>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_UART_MspInit+0x240>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <HAL_UART_MspInit+0x240>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_UART_MspInit+0x240>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030ae:	482c      	ldr	r0, [pc, #176]	; (8003160 <HAL_UART_MspInit+0x240>)
 80030b0:	f000 fb7c 	bl	80037ac <HAL_DMA_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80030ba:	f7ff fddb 	bl	8002c74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_UART_MspInit+0x240>)
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
 80030c4:	4a26      	ldr	r2, [pc, #152]	; (8003160 <HAL_UART_MspInit+0x240>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	2026      	movs	r0, #38	; 0x26
 80030d0:	f000 fb31 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030d4:	2026      	movs	r0, #38	; 0x26
 80030d6:	f000 fb4a 	bl	800376e <HAL_NVIC_EnableIRQ>
}
 80030da:	e031      	b.n	8003140 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART6)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <HAL_UART_MspInit+0x248>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d12c      	bne.n	8003140 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_UART_MspInit+0x22c>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_UART_MspInit+0x22c>)
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_UART_MspInit+0x22c>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_UART_MspInit+0x22c>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_UART_MspInit+0x22c>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_UART_MspInit+0x22c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800311e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003130:	2308      	movs	r3, #8
 8003132:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003138:	4619      	mov	r1, r3
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <HAL_UART_MspInit+0x230>)
 800313c:	f000 ff38 	bl	8003fb0 <HAL_GPIO_Init>
}
 8003140:	bf00      	nop
 8003142:	3738      	adds	r7, #56	; 0x38
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40011000 	.word	0x40011000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020000 	.word	0x40020000
 8003154:	20000c94 	.word	0x20000c94
 8003158:	40026440 	.word	0x40026440
 800315c:	40004400 	.word	0x40004400
 8003160:	20000cf4 	.word	0x20000cf4
 8003164:	40026088 	.word	0x40026088
 8003168:	40011400 	.word	0x40011400

0800316c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <NMI_Handler+0x4>

08003172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <HardFault_Handler+0x4>

08003178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <MemManage_Handler+0x4>

0800317e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003182:	e7fe      	b.n	8003182 <BusFault_Handler+0x4>

08003184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003188:	e7fe      	b.n	8003188 <UsageFault_Handler+0x4>

0800318a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031b8:	f000 f988 	bl	80034cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}

080031c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <DMA1_Stream5_IRQHandler+0x10>)
 80031c6:	f000 fc89 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000cf4 	.word	0x20000cf4

080031d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <TIM4_IRQHandler+0x10>)
 80031da:	f001 fdab 	bl	8004d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000b80 	.word	0x20000b80

080031e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <USART1_IRQHandler+0x10>)
 80031ee:	f002 fa79 	bl	80056e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000bc8 	.word	0x20000bc8

080031fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <USART2_IRQHandler+0x10>)
 8003202:	f002 fa6f 	bl	80056e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000c0c 	.word	0x20000c0c

08003210 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <DMA2_Stream2_IRQHandler+0x10>)
 8003216:	f000 fc61 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000c94 	.word	0x20000c94

08003224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return 1;
 8003228:	2301      	movs	r3, #1
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <_kill>:

int _kill(int pid, int sig)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800323e:	f003 fb49 	bl	80068d4 <__errno>
 8003242:	4603      	mov	r3, r0
 8003244:	2216      	movs	r2, #22
 8003246:	601a      	str	r2, [r3, #0]
  return -1;
 8003248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_exit>:

void _exit (int status)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800325c:	f04f 31ff 	mov.w	r1, #4294967295
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ffe7 	bl	8003234 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003266:	e7fe      	b.n	8003266 <_exit+0x12>

08003268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	e00a      	b.n	8003290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800327a:	f3af 8000 	nop.w
 800327e:	4601      	mov	r1, r0
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	60ba      	str	r2, [r7, #8]
 8003286:	b2ca      	uxtb	r2, r1
 8003288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3301      	adds	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	dbf0      	blt.n	800327a <_read+0x12>
  }

  return len;
 8003298:	687b      	ldr	r3, [r7, #4]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e009      	b.n	80032c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	60ba      	str	r2, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	3301      	adds	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	dbf1      	blt.n	80032b4 <_write+0x12>
  }
  return len;
 80032d0:	687b      	ldr	r3, [r7, #4]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_close>:

int _close(int file)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003302:	605a      	str	r2, [r3, #4]
  return 0;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <_isatty>:

int _isatty(int file)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800331a:	2301      	movs	r3, #1
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <_sbrk+0x5c>)
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <_sbrk+0x60>)
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <_sbrk+0x64>)
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <_sbrk+0x68>)
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <_sbrk+0x64>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	429a      	cmp	r2, r3
 8003372:	d207      	bcs.n	8003384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003374:	f003 faae 	bl	80068d4 <__errno>
 8003378:	4603      	mov	r3, r0
 800337a:	220c      	movs	r2, #12
 800337c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	e009      	b.n	8003398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <_sbrk+0x64>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <_sbrk+0x64>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <_sbrk+0x64>)
 8003394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20020000 	.word	0x20020000
 80033a4:	00000400 	.word	0x00000400
 80033a8:	20000e08 	.word	0x20000e08
 80033ac:	20000e20 	.word	0x20000e20

080033b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <SystemInit+0x20>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <SystemInit+0x20>)
 80033bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800340c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033d8:	480d      	ldr	r0, [pc, #52]	; (8003410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033da:	490e      	ldr	r1, [pc, #56]	; (8003414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033dc:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e0:	e002      	b.n	80033e8 <LoopCopyDataInit>

080033e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e6:	3304      	adds	r3, #4

080033e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ec:	d3f9      	bcc.n	80033e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ee:	4a0b      	ldr	r2, [pc, #44]	; (800341c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033f0:	4c0b      	ldr	r4, [pc, #44]	; (8003420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f4:	e001      	b.n	80033fa <LoopFillZerobss>

080033f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f8:	3204      	adds	r2, #4

080033fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033fc:	d3fb      	bcc.n	80033f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033fe:	f7ff ffd7 	bl	80033b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003402:	f003 fa6d 	bl	80068e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003406:	f7fe fc99 	bl	8001d3c <main>
  bx  lr    
 800340a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800340c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003414:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003418:	0800bafc 	.word	0x0800bafc
  ldr r2, =_sbss
 800341c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003420:	20000e20 	.word	0x20000e20

08003424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003424:	e7fe      	b.n	8003424 <ADC_IRQHandler>
	...

08003428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_Init+0x40>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <HAL_Init+0x40>)
 8003432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_Init+0x40>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <HAL_Init+0x40>)
 800343e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_Init+0x40>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a07      	ldr	r2, [pc, #28]	; (8003468 <HAL_Init+0x40>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003450:	2003      	movs	r0, #3
 8003452:	f000 f965 	bl	8003720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003456:	200f      	movs	r0, #15
 8003458:	f000 f808 	bl	800346c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800345c:	f7ff fd10 	bl	8002e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023c00 	.word	0x40023c00

0800346c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_InitTick+0x54>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_InitTick+0x58>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003482:	fbb3 f3f1 	udiv	r3, r3, r1
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f981 	bl	8003792 <HAL_SYSTICK_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e00e      	b.n	80034b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b0f      	cmp	r3, #15
 800349e:	d80a      	bhi.n	80034b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a0:	2200      	movs	r2, #0
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f000 f945 	bl	8003736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <HAL_InitTick+0x5c>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000008 	.word	0x20000008
 80034c8:	20000004 	.word	0x20000004

080034cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_IncTick+0x20>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_IncTick+0x24>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_IncTick+0x24>)
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000008 	.word	0x20000008
 80034f0:	20000e0c 	.word	0x20000e0c

080034f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return uwTick;
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_GetTick+0x14>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000e0c 	.word	0x20000e0c

0800350c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff ffee 	bl	80034f4 <HAL_GetTick>
 8003518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d005      	beq.n	8003532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_Delay+0x44>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003532:	bf00      	nop
 8003534:	f7ff ffde 	bl	80034f4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	429a      	cmp	r2, r3
 8003542:	d8f7      	bhi.n	8003534 <HAL_Delay+0x28>
  {
  }
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000008 	.word	0x20000008

08003554 <__NVIC_SetPriorityGrouping>:
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003570:	4013      	ands	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800357c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <__NVIC_SetPriorityGrouping+0x44>)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	60d3      	str	r3, [r2, #12]
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_GetPriorityGrouping>:
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <__NVIC_GetPriorityGrouping+0x18>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	f003 0307 	and.w	r3, r3, #7
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_EnableIRQ>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	db0b      	blt.n	80035e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	4907      	ldr	r1, [pc, #28]	; (80035f0 <__NVIC_EnableIRQ+0x38>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2001      	movs	r0, #1
 80035da:	fa00 f202 	lsl.w	r2, r0, r2
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	2b00      	cmp	r3, #0
 8003606:	db0a      	blt.n	800361e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	490c      	ldr	r1, [pc, #48]	; (8003640 <__NVIC_SetPriority+0x4c>)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	440b      	add	r3, r1
 8003618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800361c:	e00a      	b.n	8003634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4908      	ldr	r1, [pc, #32]	; (8003644 <__NVIC_SetPriority+0x50>)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3b04      	subs	r3, #4
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	440b      	add	r3, r1
 8003632:	761a      	strb	r2, [r3, #24]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000e100 	.word	0xe000e100
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f1c3 0307 	rsb	r3, r3, #7
 8003662:	2b04      	cmp	r3, #4
 8003664:	bf28      	it	cs
 8003666:	2304      	movcs	r3, #4
 8003668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3304      	adds	r3, #4
 800366e:	2b06      	cmp	r3, #6
 8003670:	d902      	bls.n	8003678 <NVIC_EncodePriority+0x30>
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3b03      	subs	r3, #3
 8003676:	e000      	b.n	800367a <NVIC_EncodePriority+0x32>
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	f04f 32ff 	mov.w	r2, #4294967295
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003690:	f04f 31ff 	mov.w	r1, #4294967295
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	43d9      	mvns	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	4313      	orrs	r3, r2
         );
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036b4:	f3bf 8f4f 	dsb	sy
}
 80036b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <__NVIC_SystemReset+0x24>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80036c2:	4904      	ldr	r1, [pc, #16]	; (80036d4 <__NVIC_SystemReset+0x24>)
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <__NVIC_SystemReset+0x28>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80036ca:	f3bf 8f4f 	dsb	sy
}
 80036ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <__NVIC_SystemReset+0x20>
 80036d4:	e000ed00 	.word	0xe000ed00
 80036d8:	05fa0004 	.word	0x05fa0004

080036dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ec:	d301      	bcc.n	80036f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00f      	b.n	8003712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <SysTick_Config+0x40>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fa:	210f      	movs	r1, #15
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	f7ff ff78 	bl	80035f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <SysTick_Config+0x40>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <SysTick_Config+0x40>)
 800370c:	2207      	movs	r2, #7
 800370e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e000e010 	.word	0xe000e010

08003720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff13 	bl	8003554 <__NVIC_SetPriorityGrouping>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003748:	f7ff ff28 	bl	800359c <__NVIC_GetPriorityGrouping>
 800374c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f7ff ff78 	bl	8003648 <NVIC_EncodePriority>
 8003758:	4602      	mov	r2, r0
 800375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff47 	bl	80035f4 <__NVIC_SetPriority>
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff1b 	bl	80035b8 <__NVIC_EnableIRQ>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800378e:	f7ff ff8f 	bl	80036b0 <__NVIC_SystemReset>

08003792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff9e 	bl	80036dc <SysTick_Config>
 80037a0:	4603      	mov	r3, r0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037b8:	f7ff fe9c 	bl	80034f4 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e099      	b.n	80038fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e8:	e00f      	b.n	800380a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ea:	f7ff fe83 	bl	80034f4 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d908      	bls.n	800380a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2203      	movs	r2, #3
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e078      	b.n	80038fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e8      	bne.n	80037ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <HAL_DMA_Init+0x158>)
 8003824:	4013      	ands	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	2b04      	cmp	r3, #4
 8003862:	d107      	bne.n	8003874 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	4313      	orrs	r3, r2
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0307 	bic.w	r3, r3, #7
 800388a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2b04      	cmp	r3, #4
 800389c:	d117      	bne.n	80038ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00e      	beq.n	80038ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fb01 	bl	8003eb8 <DMA_CheckFifoParam>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038ca:	2301      	movs	r3, #1
 80038cc:	e016      	b.n	80038fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fab8 	bl	8003e4c <DMA_CalcBaseAndBitshift>
 80038dc:	4603      	mov	r3, r0
 80038de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e4:	223f      	movs	r2, #63	; 0x3f
 80038e6:	409a      	lsls	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	f010803f 	.word	0xf010803f

08003908 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_DMA_Start_IT+0x26>
 800392a:	2302      	movs	r3, #2
 800392c:	e040      	b.n	80039b0 <HAL_DMA_Start_IT+0xa8>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d12f      	bne.n	80039a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa4a 	bl	8003df0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	223f      	movs	r2, #63	; 0x3f
 8003962:	409a      	lsls	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0216 	orr.w	r2, r2, #22
 8003976:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0208 	orr.w	r2, r2, #8
 800398e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e005      	b.n	80039ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
 80039ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039c6:	f7ff fd95 	bl	80034f4 <HAL_GetTick>
 80039ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d008      	beq.n	80039ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e052      	b.n	8003a90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0216 	bic.w	r2, r2, #22
 80039f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <HAL_DMA_Abort+0x62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0208 	bic.w	r2, r2, #8
 8003a28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a3a:	e013      	b.n	8003a64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a3c:	f7ff fd5a 	bl	80034f4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d90c      	bls.n	8003a64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2203      	movs	r2, #3
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e015      	b.n	8003a90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e4      	bne.n	8003a3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	223f      	movs	r2, #63	; 0x3f
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00c      	b.n	8003ad0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2205      	movs	r2, #5
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ae8:	4b8e      	ldr	r3, [pc, #568]	; (8003d24 <HAL_DMA_IRQHandler+0x248>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a8e      	ldr	r2, [pc, #568]	; (8003d28 <HAL_DMA_IRQHandler+0x24c>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0a9b      	lsrs	r3, r3, #10
 8003af4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	2208      	movs	r2, #8
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01a      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	2208      	movs	r2, #8
 8003b36:	409a      	lsls	r2, r3
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0202 	orr.w	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	2204      	movs	r2, #4
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d012      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	2210      	movs	r2, #16
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d043      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d03c      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d024      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
 8003c0a:	e01f      	b.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01b      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
 8003c1c:	e016      	b.n	8003c4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0208 	bic.w	r2, r2, #8
 8003c3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	2220      	movs	r2, #32
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 808f 	beq.w	8003d7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8087 	beq.w	8003d7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	2220      	movs	r2, #32
 8003c74:	409a      	lsls	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d136      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0216 	bic.w	r2, r2, #22
 8003c94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0x1da>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0208 	bic.w	r2, r2, #8
 8003cc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	223f      	movs	r2, #63	; 0x3f
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d07e      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
        }
        return;
 8003cf2:	e079      	b.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01d      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10d      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d031      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
 8003d20:	e02c      	b.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
 8003d22:	bf00      	nop
 8003d24:	20000000 	.word	0x20000000
 8003d28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d023      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
 8003d3c:	e01e      	b.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10f      	bne.n	8003d6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0210 	bic.w	r2, r2, #16
 8003d5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d032      	beq.n	8003dea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d022      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2205      	movs	r2, #5
 8003d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d307      	bcc.n	8003dc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f2      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x2cc>
 8003dc2:	e000      	b.n	8003dc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
 8003de6:	e000      	b.n	8003dea <HAL_DMA_IRQHandler+0x30e>
        return;
 8003de8:	bf00      	nop
    }
  }
}
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b40      	cmp	r3, #64	; 0x40
 8003e1c:	d108      	bne.n	8003e30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e2e:	e007      	b.n	8003e40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	3b10      	subs	r3, #16
 8003e5c:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e66:	4a13      	ldr	r2, [pc, #76]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d909      	bls.n	8003e8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	1d1a      	adds	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e8c:	e007      	b.n	8003e9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	aaaaaaab 	.word	0xaaaaaaab
 8003eb4:	0800b648 	.word	0x0800b648

08003eb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d11f      	bne.n	8003f12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d856      	bhi.n	8003f86 <DMA_CheckFifoParam+0xce>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <DMA_CheckFifoParam+0x28>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003f03 	.word	0x08003f03
 8003ee8:	08003ef1 	.word	0x08003ef1
 8003eec:	08003f87 	.word	0x08003f87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d046      	beq.n	8003f8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f00:	e043      	b.n	8003f8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f0a:	d140      	bne.n	8003f8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f10:	e03d      	b.n	8003f8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1a:	d121      	bne.n	8003f60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d837      	bhi.n	8003f92 <DMA_CheckFifoParam+0xda>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <DMA_CheckFifoParam+0x70>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f3f 	.word	0x08003f3f
 8003f30:	08003f39 	.word	0x08003f39
 8003f34:	08003f51 	.word	0x08003f51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3c:	e030      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d025      	beq.n	8003f96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4e:	e022      	b.n	8003f96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f58:	d11f      	bne.n	8003f9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f5e:	e01c      	b.n	8003f9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d903      	bls.n	8003f6e <DMA_CheckFifoParam+0xb6>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d003      	beq.n	8003f74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f6c:	e018      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
      break;
 8003f72:	e015      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00e      	beq.n	8003f9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      break;
 8003f84:	e00b      	b.n	8003f9e <DMA_CheckFifoParam+0xe6>
      break;
 8003f86:	bf00      	nop
 8003f88:	e00a      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e008      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e006      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f92:	bf00      	nop
 8003f94:	e004      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f96:	bf00      	nop
 8003f98:	e002      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8003f9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop

08003fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e159      	b.n	8004280 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fcc:	2201      	movs	r2, #1
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	f040 8148 	bne.w	800427a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d005      	beq.n	8004002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d130      	bne.n	8004064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	2203      	movs	r2, #3
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004038:	2201      	movs	r2, #1
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 0201 	and.w	r2, r3, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b03      	cmp	r3, #3
 800406e:	d017      	beq.n	80040a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2203      	movs	r2, #3
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d123      	bne.n	80040f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	08da      	lsrs	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3208      	adds	r2, #8
 80040b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	220f      	movs	r2, #15
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	08da      	lsrs	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3208      	adds	r2, #8
 80040ee:	69b9      	ldr	r1, [r7, #24]
 80040f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	2203      	movs	r2, #3
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0203 	and.w	r2, r3, #3
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80a2 	beq.w	800427a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	4b57      	ldr	r3, [pc, #348]	; (8004298 <HAL_GPIO_Init+0x2e8>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	4a56      	ldr	r2, [pc, #344]	; (8004298 <HAL_GPIO_Init+0x2e8>)
 8004140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004144:	6453      	str	r3, [r2, #68]	; 0x44
 8004146:	4b54      	ldr	r3, [pc, #336]	; (8004298 <HAL_GPIO_Init+0x2e8>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004152:	4a52      	ldr	r2, [pc, #328]	; (800429c <HAL_GPIO_Init+0x2ec>)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	3302      	adds	r3, #2
 800415a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	220f      	movs	r2, #15
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a49      	ldr	r2, [pc, #292]	; (80042a0 <HAL_GPIO_Init+0x2f0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d019      	beq.n	80041b2 <HAL_GPIO_Init+0x202>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a48      	ldr	r2, [pc, #288]	; (80042a4 <HAL_GPIO_Init+0x2f4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_GPIO_Init+0x1fe>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a47      	ldr	r2, [pc, #284]	; (80042a8 <HAL_GPIO_Init+0x2f8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00d      	beq.n	80041aa <HAL_GPIO_Init+0x1fa>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a46      	ldr	r2, [pc, #280]	; (80042ac <HAL_GPIO_Init+0x2fc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <HAL_GPIO_Init+0x1f6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a45      	ldr	r2, [pc, #276]	; (80042b0 <HAL_GPIO_Init+0x300>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <HAL_GPIO_Init+0x1f2>
 800419e:	2304      	movs	r3, #4
 80041a0:	e008      	b.n	80041b4 <HAL_GPIO_Init+0x204>
 80041a2:	2307      	movs	r3, #7
 80041a4:	e006      	b.n	80041b4 <HAL_GPIO_Init+0x204>
 80041a6:	2303      	movs	r3, #3
 80041a8:	e004      	b.n	80041b4 <HAL_GPIO_Init+0x204>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e002      	b.n	80041b4 <HAL_GPIO_Init+0x204>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_GPIO_Init+0x204>
 80041b2:	2300      	movs	r3, #0
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	f002 0203 	and.w	r2, r2, #3
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	4093      	lsls	r3, r2
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c4:	4935      	ldr	r1, [pc, #212]	; (800429c <HAL_GPIO_Init+0x2ec>)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	3302      	adds	r3, #2
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041d2:	4b38      	ldr	r3, [pc, #224]	; (80042b4 <HAL_GPIO_Init+0x304>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041f6:	4a2f      	ldr	r2, [pc, #188]	; (80042b4 <HAL_GPIO_Init+0x304>)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <HAL_GPIO_Init+0x304>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	43db      	mvns	r3, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4013      	ands	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004220:	4a24      	ldr	r2, [pc, #144]	; (80042b4 <HAL_GPIO_Init+0x304>)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_GPIO_Init+0x304>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_GPIO_Init+0x304>)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004250:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <HAL_GPIO_Init+0x304>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004274:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <HAL_GPIO_Init+0x304>)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3301      	adds	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	f67f aea2 	bls.w	8003fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	40013800 	.word	0x40013800
 80042a0:	40020000 	.word	0x40020000
 80042a4:	40020400 	.word	0x40020400
 80042a8:	40020800 	.word	0x40020800
 80042ac:	40020c00 	.word	0x40020c00
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40013c00 	.word	0x40013c00

080042b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
 80042c4:	4613      	mov	r3, r2
 80042c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c8:	787b      	ldrb	r3, [r7, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d4:	e003      	b.n	80042de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042d6:	887b      	ldrh	r3, [r7, #2]
 80042d8:	041a      	lsls	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	619a      	str	r2, [r3, #24]
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042fc:	887a      	ldrh	r2, [r7, #2]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4013      	ands	r3, r2
 8004302:	041a      	lsls	r2, r3, #16
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	43d9      	mvns	r1, r3
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	400b      	ands	r3, r1
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	619a      	str	r2, [r3, #24]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e267      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d075      	beq.n	800442a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b04      	cmp	r3, #4
 8004348:	d00c      	beq.n	8004364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434a:	4b85      	ldr	r3, [pc, #532]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004352:	2b08      	cmp	r3, #8
 8004354:	d112      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004356:	4b82      	ldr	r3, [pc, #520]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004362:	d10b      	bne.n	800437c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	4b7e      	ldr	r3, [pc, #504]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05b      	beq.n	8004428 <HAL_RCC_OscConfig+0x108>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d157      	bne.n	8004428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e242      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004384:	d106      	bne.n	8004394 <HAL_RCC_OscConfig+0x74>
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x98>
 800439e:	4b70      	ldr	r3, [pc, #448]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6f      	ldr	r2, [pc, #444]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b6d      	ldr	r3, [pc, #436]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6c      	ldr	r2, [pc, #432]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xb0>
 80043b8:	4b69      	ldr	r3, [pc, #420]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a68      	ldr	r2, [pc, #416]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b66      	ldr	r3, [pc, #408]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a65      	ldr	r2, [pc, #404]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7ff f88c 	bl	80034f4 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e0:	f7ff f888 	bl	80034f4 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e207      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b5b      	ldr	r3, [pc, #364]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xc0>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7ff f878 	bl	80034f4 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004408:	f7ff f874 	bl	80034f4 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1f3      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b51      	ldr	r3, [pc, #324]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0xe8>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004436:	4b4a      	ldr	r3, [pc, #296]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b47      	ldr	r3, [pc, #284]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b44      	ldr	r3, [pc, #272]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b41      	ldr	r3, [pc, #260]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x152>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c7      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4937      	ldr	r1, [pc, #220]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCC_OscConfig+0x244>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7ff f82d 	bl	80034f4 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449e:	f7ff f829 	bl	80034f4 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1a8      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4925      	ldr	r1, [pc, #148]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCC_OscConfig+0x244>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7ff f80c 	bl	80034f4 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e0:	f7ff f808 	bl	80034f4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e187      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d036      	beq.n	8004578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <HAL_RCC_OscConfig+0x248>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fe ffec 	bl	80034f4 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004520:	f7fe ffe8 	bl	80034f4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e167      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_OscConfig+0x240>)
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x200>
 800453e:	e01b      	b.n	8004578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_OscConfig+0x248>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004546:	f7fe ffd5 	bl	80034f4 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	e00e      	b.n	800456c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe ffd1 	bl	80034f4 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d907      	bls.n	800456c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e150      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
 8004560:	40023800 	.word	0x40023800
 8004564:	42470000 	.word	0x42470000
 8004568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	4b88      	ldr	r3, [pc, #544]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ea      	bne.n	800454e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8097 	beq.w	80046b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458a:	4b81      	ldr	r3, [pc, #516]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	4b7d      	ldr	r3, [pc, #500]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a7c      	ldr	r2, [pc, #496]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
 80045a6:	4b7a      	ldr	r3, [pc, #488]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b77      	ldr	r3, [pc, #476]	; (8004794 <HAL_RCC_OscConfig+0x474>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c2:	4b74      	ldr	r3, [pc, #464]	; (8004794 <HAL_RCC_OscConfig+0x474>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a73      	ldr	r2, [pc, #460]	; (8004794 <HAL_RCC_OscConfig+0x474>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fe ff91 	bl	80034f4 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fe ff8d 	bl	80034f4 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e10c      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	4b6a      	ldr	r3, [pc, #424]	; (8004794 <HAL_RCC_OscConfig+0x474>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x2ea>
 80045fc:	4b64      	ldr	r3, [pc, #400]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	4a63      	ldr	r2, [pc, #396]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6713      	str	r3, [r2, #112]	; 0x70
 8004608:	e01c      	b.n	8004644 <HAL_RCC_OscConfig+0x324>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b05      	cmp	r3, #5
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x30c>
 8004612:	4b5f      	ldr	r3, [pc, #380]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a5e      	ldr	r2, [pc, #376]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
 800461e:	4b5c      	ldr	r3, [pc, #368]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a5b      	ldr	r2, [pc, #364]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0x324>
 800462c:	4b58      	ldr	r3, [pc, #352]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a57      	ldr	r2, [pc, #348]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
 8004638:	4b55      	ldr	r3, [pc, #340]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a54      	ldr	r2, [pc, #336]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 800463e:	f023 0304 	bic.w	r3, r3, #4
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fe ff52 	bl	80034f4 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	e00a      	b.n	800466a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fe ff4e 	bl	80034f4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0cb      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	4b49      	ldr	r3, [pc, #292]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0ee      	beq.n	8004654 <HAL_RCC_OscConfig+0x334>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004678:	f7fe ff3c 	bl	80034f4 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7fe ff38 	bl	80034f4 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0b5      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004696:	4b3e      	ldr	r3, [pc, #248]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ee      	bne.n	8004680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a8:	4b39      	ldr	r3, [pc, #228]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	4a38      	ldr	r2, [pc, #224]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 80046ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80a1 	beq.w	8004800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046be:	4b34      	ldr	r3, [pc, #208]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d05c      	beq.n	8004784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d141      	bne.n	8004756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b31      	ldr	r3, [pc, #196]	; (8004798 <HAL_RCC_OscConfig+0x478>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fe ff0c 	bl	80034f4 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fe ff08 	bl	80034f4 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e087      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b27      	ldr	r3, [pc, #156]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	491b      	ldr	r1, [pc, #108]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004728:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x478>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fe fee1 	bl	80034f4 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004736:	f7fe fedd 	bl	80034f4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e05c      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x416>
 8004754:	e054      	b.n	8004800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b10      	ldr	r3, [pc, #64]	; (8004798 <HAL_RCC_OscConfig+0x478>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fe feca 	bl	80034f4 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe fec6 	bl	80034f4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e045      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_RCC_OscConfig+0x470>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x444>
 8004782:	e03d      	b.n	8004800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e038      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000
 8004798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <HAL_RCC_OscConfig+0x4ec>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d028      	beq.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d121      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d11a      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d111      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	3b01      	subs	r3, #1
 80047e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800

08004810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0cc      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	4b68      	ldr	r3, [pc, #416]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d90c      	bls.n	800484c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0b8      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a58      	ldr	r2, [pc, #352]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800486e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800487c:	4b53      	ldr	r3, [pc, #332]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a52      	ldr	r2, [pc, #328]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b50      	ldr	r3, [pc, #320]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	494d      	ldr	r1, [pc, #308]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d044      	beq.n	8004930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b47      	ldr	r3, [pc, #284]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d119      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e07f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048de:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e067      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ee:	4b37      	ldr	r3, [pc, #220]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 0203 	bic.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4934      	ldr	r1, [pc, #208]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004900:	f7fe fdf8 	bl	80034f4 <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	e00a      	b.n	800491e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fe fdf4 	bl	80034f4 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	; 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e04f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 020c 	and.w	r2, r3, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	429a      	cmp	r2, r3
 800492e:	d1eb      	bne.n	8004908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d20c      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e032      	b.n	80049be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4916      	ldr	r1, [pc, #88]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490e      	ldr	r1, [pc, #56]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004996:	f000 f821 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490a      	ldr	r1, [pc, #40]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1c8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe fd58 	bl	800346c <HAL_InitTick>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40023c00 	.word	0x40023c00
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0800b630 	.word	0x0800b630
 80049d4:	20000000 	.word	0x20000000
 80049d8:	20000004 	.word	0x20000004

080049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e0:	b090      	sub	sp, #64	; 0x40
 80049e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	2300      	movs	r3, #0
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ec:	2300      	movs	r3, #0
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f4:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x180>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d00d      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x40>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	f200 80a1 	bhi.w	8004b48 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x34>
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a0e:	e09b      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a14:	e09b      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a16:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a1a:	e098      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a1c:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a26:	4b4d      	ldr	r3, [pc, #308]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d028      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b4a      	ldr	r3, [pc, #296]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	2200      	movs	r2, #0
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a44:	2100      	movs	r1, #0
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a48:	fb03 f201 	mul.w	r2, r3, r1
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	fb00 f303 	mul.w	r3, r0, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	4a43      	ldr	r2, [pc, #268]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a56:	fba0 1202 	umull	r1, r2, r0, r2
 8004a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a62:	4413      	add	r3, r2
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a68:	2200      	movs	r2, #0
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	61fa      	str	r2, [r7, #28]
 8004a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a76:	f7fc f8bf 	bl	8000bf8 <__aeabi_uldivmod>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4613      	mov	r3, r2
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a82:	e053      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	099b      	lsrs	r3, r3, #6
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	617a      	str	r2, [r7, #20]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a96:	f04f 0b00 	mov.w	fp, #0
 8004a9a:	4652      	mov	r2, sl
 8004a9c:	465b      	mov	r3, fp
 8004a9e:	f04f 0000 	mov.w	r0, #0
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	0159      	lsls	r1, r3, #5
 8004aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aac:	0150      	lsls	r0, r2, #5
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ab6:	eb63 090b 	sbc.w	r9, r3, fp
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ac6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004aca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ace:	ebb2 0408 	subs.w	r4, r2, r8
 8004ad2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	00eb      	lsls	r3, r5, #3
 8004ae0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae4:	00e2      	lsls	r2, r4, #3
 8004ae6:	4614      	mov	r4, r2
 8004ae8:	461d      	mov	r5, r3
 8004aea:	eb14 030a 	adds.w	r3, r4, sl
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	eb45 030b 	adc.w	r3, r5, fp
 8004af4:	607b      	str	r3, [r7, #4]
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b02:	4629      	mov	r1, r5
 8004b04:	028b      	lsls	r3, r1, #10
 8004b06:	4621      	mov	r1, r4
 8004b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	028a      	lsls	r2, r1, #10
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	2200      	movs	r2, #0
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	60fa      	str	r2, [r7, #12]
 8004b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b20:	f7fc f86a 	bl	8000bf8 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	3301      	adds	r3, #1
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b46:	e002      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3740      	adds	r7, #64	; 0x40
 8004b54:	46bd      	mov	sp, r7
 8004b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	00f42400 	.word	0x00f42400
 8004b64:	017d7840 	.word	0x017d7840

08004b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000000 	.word	0x20000000

08004b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b84:	f7ff fff0 	bl	8004b68 <HAL_RCC_GetHCLKFreq>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	0a9b      	lsrs	r3, r3, #10
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	4903      	ldr	r1, [pc, #12]	; (8004ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b96:	5ccb      	ldrb	r3, [r1, r3]
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	0800b640 	.word	0x0800b640

08004ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bac:	f7ff ffdc 	bl	8004b68 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	0b5b      	lsrs	r3, r3, #13
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	4903      	ldr	r1, [pc, #12]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bbe:	5ccb      	ldrb	r3, [r1, r3]
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	0800b640 	.word	0x0800b640

08004bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e041      	b.n	8004c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fe f96a 	bl	8002ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f000 fa88 	bl	8005124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d001      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e044      	b.n	8004d12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d018      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d013      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <HAL_TIM_Base_Start_IT+0xb4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <HAL_TIM_Base_Start_IT+0xb8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <HAL_TIM_Base_Start_IT+0xbc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x6c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <HAL_TIM_Base_Start_IT+0xc0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d111      	bne.n	8004d00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d010      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	e007      	b.n	8004d10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000

08004d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0202 	mvn.w	r2, #2
 8004d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9b5 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9a7 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9b8 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0204 	mvn.w	r2, #4
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f98b 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f97d 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f98e 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d122      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d11b      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0208 	mvn.w	r2, #8
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f961 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f953 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f964 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d122      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d11b      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0210 	mvn.w	r2, #16
 8004e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f937 	bl	80050e6 <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f929 	bl	80050d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f93a 	bl	80050fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0201 	mvn.w	r2, #1
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fd fcde 	bl	8002874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fab2 	bl	8005448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8ff 	bl	800510e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0220 	mvn.w	r2, #32
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fa7c 	bl	8005434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e0b4      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x186>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d03e      	beq.n	8005018 <HAL_TIM_ConfigClockSource+0xd4>
 8004f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9e:	f200 8087 	bhi.w	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa6:	f000 8086 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x172>
 8004faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fae:	d87f      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b70      	cmp	r3, #112	; 0x70
 8004fb2:	d01a      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0xa6>
 8004fb4:	2b70      	cmp	r3, #112	; 0x70
 8004fb6:	d87b      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b60      	cmp	r3, #96	; 0x60
 8004fba:	d050      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x11a>
 8004fbc:	2b60      	cmp	r3, #96	; 0x60
 8004fbe:	d877      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b50      	cmp	r3, #80	; 0x50
 8004fc2:	d03c      	beq.n	800503e <HAL_TIM_ConfigClockSource+0xfa>
 8004fc4:	2b50      	cmp	r3, #80	; 0x50
 8004fc6:	d873      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d058      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x13a>
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d86f      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b30      	cmp	r3, #48	; 0x30
 8004fd2:	d064      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x15a>
 8004fd4:	2b30      	cmp	r3, #48	; 0x30
 8004fd6:	d86b      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d060      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x15a>
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d867      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d05c      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x15a>
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d05a      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x15a>
 8004fe8:	e062      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6899      	ldr	r1, [r3, #8]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f000 f98d 	bl	8005318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800500c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	609a      	str	r2, [r3, #8]
      break;
 8005016:	e04f      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	6899      	ldr	r1, [r3, #8]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f000 f976 	bl	8005318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800503a:	609a      	str	r2, [r3, #8]
      break;
 800503c:	e03c      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	461a      	mov	r2, r3
 800504c:	f000 f8ea 	bl	8005224 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2150      	movs	r1, #80	; 0x50
 8005056:	4618      	mov	r0, r3
 8005058:	f000 f943 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 800505c:	e02c      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	461a      	mov	r2, r3
 800506c:	f000 f909 	bl	8005282 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2160      	movs	r1, #96	; 0x60
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f933 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 800507c:	e01c      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	461a      	mov	r2, r3
 800508c:	f000 f8ca 	bl	8005224 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2140      	movs	r1, #64	; 0x40
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f923 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 800509c:	e00c      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f000 f91a 	bl	80052e2 <TIM_ITRx_SetConfig>
      break;
 80050ae:	e003      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a34      	ldr	r2, [pc, #208]	; (8005208 <TIM_Base_SetConfig+0xe4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00f      	beq.n	800515c <TIM_Base_SetConfig+0x38>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005142:	d00b      	beq.n	800515c <TIM_Base_SetConfig+0x38>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a31      	ldr	r2, [pc, #196]	; (800520c <TIM_Base_SetConfig+0xe8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d007      	beq.n	800515c <TIM_Base_SetConfig+0x38>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a30      	ldr	r2, [pc, #192]	; (8005210 <TIM_Base_SetConfig+0xec>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_Base_SetConfig+0x38>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a2f      	ldr	r2, [pc, #188]	; (8005214 <TIM_Base_SetConfig+0xf0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d108      	bne.n	800516e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a25      	ldr	r2, [pc, #148]	; (8005208 <TIM_Base_SetConfig+0xe4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01b      	beq.n	80051ae <TIM_Base_SetConfig+0x8a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517c:	d017      	beq.n	80051ae <TIM_Base_SetConfig+0x8a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <TIM_Base_SetConfig+0xe8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <TIM_Base_SetConfig+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a21      	ldr	r2, [pc, #132]	; (8005210 <TIM_Base_SetConfig+0xec>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00f      	beq.n	80051ae <TIM_Base_SetConfig+0x8a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a20      	ldr	r2, [pc, #128]	; (8005214 <TIM_Base_SetConfig+0xf0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1f      	ldr	r2, [pc, #124]	; (8005218 <TIM_Base_SetConfig+0xf4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_Base_SetConfig+0x8a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1e      	ldr	r2, [pc, #120]	; (800521c <TIM_Base_SetConfig+0xf8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <TIM_Base_SetConfig+0xfc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a08      	ldr	r2, [pc, #32]	; (8005208 <TIM_Base_SetConfig+0xe4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800524e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 030a 	bic.w	r3, r3, #10
 8005260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005282:	b480      	push	{r7}
 8005284:	b087      	sub	sp, #28
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f023 0210 	bic.w	r2, r3, #16
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	f043 0307 	orr.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	021a      	lsls	r2, r3, #8
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	431a      	orrs	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	609a      	str	r2, [r3, #8]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800536c:	2302      	movs	r3, #2
 800536e:	e050      	b.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d013      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a16      	ldr	r2, [pc, #88]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10c      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40014000 	.word	0x40014000

08005434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e03f      	b.n	80054ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fd fd4c 	bl	8002f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2224      	movs	r2, #36	; 0x24
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800549e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 ff9b 	bl	80063dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b08a      	sub	sp, #40	; 0x28
 80054fa:	af02      	add	r7, sp, #8
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	603b      	str	r3, [r7, #0]
 8005502:	4613      	mov	r3, r2
 8005504:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b20      	cmp	r3, #32
 8005514:	d17c      	bne.n	8005610 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_UART_Transmit+0x2c>
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e075      	b.n	8005612 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_UART_Transmit+0x3e>
 8005530:	2302      	movs	r3, #2
 8005532:	e06e      	b.n	8005612 <HAL_UART_Transmit+0x11c>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2221      	movs	r2, #33	; 0x21
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800554a:	f7fd ffd3 	bl	80034f4 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005564:	d108      	bne.n	8005578 <HAL_UART_Transmit+0x82>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e003      	b.n	8005580 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005588:	e02a      	b.n	80055e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fc53 	bl	8005e40 <UART_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e036      	b.n	8005612 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	3302      	adds	r3, #2
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e007      	b.n	80055d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	3301      	adds	r3, #1
 80055d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1cf      	bne.n	800558a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	2140      	movs	r1, #64	; 0x40
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fc23 	bl	8005e40 <UART_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e006      	b.n	8005612 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b08c      	sub	sp, #48	; 0x30
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	4613      	mov	r3, r2
 8005626:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b20      	cmp	r3, #32
 8005632:	d152      	bne.n	80056da <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e04b      	b.n	80056dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800564e:	2302      	movs	r3, #2
 8005650:	e044      	b.n	80056dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	461a      	mov	r2, r3
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fc58 	bl	8005f1c <UART_Start_Receive_DMA>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005676:	2b00      	cmp	r3, #0
 8005678:	d12c      	bne.n	80056d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	2b01      	cmp	r3, #1
 8005680:	d125      	bne.n	80056ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	617b      	str	r3, [r7, #20]
   return(result);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f043 0310 	orr.w	r3, r3, #16
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b8:	627a      	str	r2, [r7, #36]	; 0x24
 80056ba:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6a39      	ldr	r1, [r7, #32]
 80056be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e5      	bne.n	8005698 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80056cc:	e002      	b.n	80056d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80056d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056d8:	e000      	b.n	80056dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3730      	adds	r7, #48	; 0x30
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b0ba      	sub	sp, #232	; 0xe8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800570a:	2300      	movs	r3, #0
 800570c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005710:	2300      	movs	r3, #0
 8005712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10f      	bne.n	800574a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <HAL_UART_IRQHandler+0x66>
 8005736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fd8f 	bl	8006266 <UART_Receive_IT>
      return;
 8005748:	e256      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800574a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80de 	beq.w	8005910 <HAL_UART_IRQHandler+0x22c>
 8005754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 80d1 	beq.w	8005910 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_UART_IRQHandler+0xae>
 800577a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f043 0201 	orr.w	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <HAL_UART_IRQHandler+0xd2>
 800579e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f043 0202 	orr.w	r2, r3, #2
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <HAL_UART_IRQHandler+0xf6>
 80057c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f043 0204 	orr.w	r2, r3, #4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d011      	beq.n	800580a <HAL_UART_IRQHandler+0x126>
 80057e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d105      	bne.n	80057fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f043 0208 	orr.w	r2, r3, #8
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 81ed 	beq.w	8005bee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_UART_IRQHandler+0x14e>
 8005820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fd1a 	bl	8006266 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <HAL_UART_IRQHandler+0x17a>
 8005856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d04f      	beq.n	80058fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fc22 	bl	80060a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d141      	bne.n	80058f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800588c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800589e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1d9      	bne.n	8005872 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d013      	beq.n	80058ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	4a7d      	ldr	r2, [pc, #500]	; (8005ac0 <HAL_UART_IRQHandler+0x3dc>)
 80058cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe f8e0 	bl	8003a98 <HAL_DMA_Abort_IT>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ec:	e00e      	b.n	800590c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9a4 	bl	8005c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	e00a      	b.n	800590c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9a0 	bl	8005c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	e006      	b.n	800590c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f99c 	bl	8005c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800590a:	e170      	b.n	8005bee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	bf00      	nop
    return;
 800590e:	e16e      	b.n	8005bee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 814a 	bne.w	8005bae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8143 	beq.w	8005bae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 813c 	beq.w	8005bae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005936:	2300      	movs	r3, #0
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	f040 80b4 	bne.w	8005ac4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005968:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8140 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800597a:	429a      	cmp	r2, r3
 800597c:	f080 8139 	bcs.w	8005bf2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005986:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005992:	f000 8088 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1d9      	bne.n	8005996 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3314      	adds	r3, #20
 80059e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3314      	adds	r3, #20
 8005a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e1      	bne.n	80059e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e3      	bne.n	8005a1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a76:	f023 0310 	bic.w	r3, r3, #16
 8005a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a88:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e3      	bne.n	8005a64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fd ff89 	bl	80039b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fc fe40 	bl	800273c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005abc:	e099      	b.n	8005bf2 <HAL_UART_IRQHandler+0x50e>
 8005abe:	bf00      	nop
 8005ac0:	0800616f 	.word	0x0800616f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 808b 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8086 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b0e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e3      	bne.n	8005aea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	623b      	str	r3, [r7, #32]
   return(result);
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b46:	633a      	str	r2, [r7, #48]	; 0x30
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e3      	bne.n	8005b22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b8c:	61fa      	str	r2, [r7, #28]
 8005b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	69b9      	ldr	r1, [r7, #24]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e3      	bne.n	8005b68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc fdc8 	bl	800273c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bac:	e023      	b.n	8005bf6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_UART_IRQHandler+0x4ea>
 8005bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fae5 	bl	8006196 <UART_Transmit_IT>
    return;
 8005bcc:	e014      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x514>
 8005bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fb25 	bl	8006236 <UART_EndTransmit_IT>
    return;
 8005bec:	e004      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
    return;
 8005bee:	bf00      	nop
 8005bf0:	e002      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
      return;
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
      return;
 8005bf6:	bf00      	nop
  }
}
 8005bf8:	37e8      	adds	r7, #232	; 0xe8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop

08005c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b09c      	sub	sp, #112	; 0x70
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d172      	bne.n	8005d52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6e:	2200      	movs	r2, #0
 8005c70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c92:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e5      	bne.n	8005c72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8005cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005cc6:	647a      	str	r2, [r7, #68]	; 0x44
 8005cc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e5      	bne.n	8005ca6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3314      	adds	r3, #20
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e5      	bne.n	8005cda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d119      	bne.n	8005d52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f023 0310 	bic.w	r3, r3, #16
 8005d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d3e:	61fa      	str	r2, [r7, #28]
 8005d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	69b9      	ldr	r1, [r7, #24]
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e5      	bne.n	8005d1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d106      	bne.n	8005d68 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d62:	f7fc fceb 	bl	800273c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d66:	e002      	b.n	8005d6e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005d68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d6a:	f7ff ff53 	bl	8005c14 <HAL_UART_RxCpltCallback>
}
 8005d6e:	bf00      	nop
 8005d70:	3770      	adds	r7, #112	; 0x70
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d108      	bne.n	8005d9e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	4619      	mov	r1, r3
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7fc fcd0 	bl	800273c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d9c:	e002      	b.n	8005da4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff ff42 	bl	8005c28 <HAL_UART_RxHalfCpltCallback>
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b21      	cmp	r3, #33	; 0x21
 8005dde:	d108      	bne.n	8005df2 <UART_DMAError+0x46>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2200      	movs	r2, #0
 8005dea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005dec:	68b8      	ldr	r0, [r7, #8]
 8005dee:	f000 f933 	bl	8006058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b22      	cmp	r3, #34	; 0x22
 8005e12:	d108      	bne.n	8005e26 <UART_DMAError+0x7a>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005e20:	68b8      	ldr	r0, [r7, #8]
 8005e22:	f000 f941 	bl	80060a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0210 	orr.w	r2, r3, #16
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e32:	68b8      	ldr	r0, [r7, #8]
 8005e34:	f7ff ff02 	bl	8005c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b090      	sub	sp, #64	; 0x40
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e50:	e050      	b.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d04c      	beq.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e60:	f7fd fb48 	bl	80034f4 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d241      	bcs.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	330c      	adds	r3, #12
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e90:	637a      	str	r2, [r7, #52]	; 0x34
 8005e92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e5      	bne.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3314      	adds	r3, #20
 8005eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3314      	adds	r3, #20
 8005ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ec4:	623a      	str	r2, [r7, #32]
 8005ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	69f9      	ldr	r1, [r7, #28]
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e5      	bne.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e00f      	b.n	8005f14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4013      	ands	r3, r2
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	bf0c      	ite	eq
 8005f04:	2301      	moveq	r3, #1
 8005f06:	2300      	movne	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d09f      	beq.n	8005e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3740      	adds	r7, #64	; 0x40
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b098      	sub	sp, #96	; 0x60
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2222      	movs	r2, #34	; 0x22
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	4a40      	ldr	r2, [pc, #256]	; (800604c <UART_Start_Receive_DMA+0x130>)
 8005f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	4a3f      	ldr	r2, [pc, #252]	; (8006050 <UART_Start_Receive_DMA+0x134>)
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	4a3e      	ldr	r2, [pc, #248]	; (8006054 <UART_Start_Receive_DMA+0x138>)
 8005f5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	2200      	movs	r2, #0
 8005f62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f64:	f107 0308 	add.w	r3, r7, #8
 8005f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	f7fd fcc4 	bl	8003908 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f80:	2300      	movs	r3, #0
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d019      	beq.n	8005fda <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e5      	bne.n	8005fa6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ffa:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e5      	bne.n	8005fda <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3314      	adds	r3, #20
 8006014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	617b      	str	r3, [r7, #20]
   return(result);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006024:	653b      	str	r3, [r7, #80]	; 0x50
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800602e:	627a      	str	r2, [r7, #36]	; 0x24
 8006030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6a39      	ldr	r1, [r7, #32]
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	61fb      	str	r3, [r7, #28]
   return(result);
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e5      	bne.n	800600e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3760      	adds	r7, #96	; 0x60
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	08005c51 	.word	0x08005c51
 8006050:	08005d77 	.word	0x08005d77
 8006054:	08005dad 	.word	0x08005dad

08006058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b089      	sub	sp, #36	; 0x24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	61ba      	str	r2, [r7, #24]
 8006082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6979      	ldr	r1, [r7, #20]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	613b      	str	r3, [r7, #16]
   return(result);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e5      	bne.n	8006060 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800609c:	bf00      	nop
 800609e:	3724      	adds	r7, #36	; 0x24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b095      	sub	sp, #84	; 0x54
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060d0:	643a      	str	r2, [r7, #64]	; 0x40
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800610a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	d119      	bne.n	8006154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	647b      	str	r3, [r7, #68]	; 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006140:	61ba      	str	r2, [r7, #24]
 8006142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	613b      	str	r3, [r7, #16]
   return(result);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e5      	bne.n	8006120 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006162:	bf00      	nop
 8006164:	3754      	adds	r7, #84	; 0x54
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff fd57 	bl	8005c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b21      	cmp	r3, #33	; 0x21
 80061a8:	d13e      	bne.n	8006228 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	d114      	bne.n	80061de <UART_Transmit_IT+0x48>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d110      	bne.n	80061de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	1c9a      	adds	r2, r3, #2
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	621a      	str	r2, [r3, #32]
 80061dc:	e008      	b.n	80061f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	1c59      	adds	r1, r3, #1
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6211      	str	r1, [r2, #32]
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4619      	mov	r1, r3
 80061fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10f      	bne.n	8006224 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006212:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006222:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fcd2 	bl	8005c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b08c      	sub	sp, #48	; 0x30
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b22      	cmp	r3, #34	; 0x22
 8006278:	f040 80ab 	bne.w	80063d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006284:	d117      	bne.n	80062b6 <UART_Receive_IT+0x50>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d113      	bne.n	80062b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28
 80062b4:	e026      	b.n	8006304 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c8:	d007      	beq.n	80062da <UART_Receive_IT+0x74>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <UART_Receive_IT+0x82>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e008      	b.n	80062fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29b      	uxth	r3, r3
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4619      	mov	r1, r3
 8006312:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006314:	2b00      	cmp	r3, #0
 8006316:	d15a      	bne.n	80063ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0220 	bic.w	r2, r2, #32
 8006326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	2b01      	cmp	r3, #1
 8006356:	d135      	bne.n	80063c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	613b      	str	r3, [r7, #16]
   return(result);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f023 0310 	bic.w	r3, r3, #16
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	330c      	adds	r3, #12
 800637c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637e:	623a      	str	r2, [r7, #32]
 8006380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	69f9      	ldr	r1, [r7, #28]
 8006384:	6a3a      	ldr	r2, [r7, #32]
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	61bb      	str	r3, [r7, #24]
   return(result);
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e5      	bne.n	800635e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b10      	cmp	r3, #16
 800639e:	d10a      	bne.n	80063b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fc f9bd 	bl	800273c <HAL_UARTEx_RxEventCallback>
 80063c2:	e002      	b.n	80063ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff fc25 	bl	8005c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e002      	b.n	80063d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e000      	b.n	80063d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
  }
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3730      	adds	r7, #48	; 0x30
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e0:	b0c0      	sub	sp, #256	; 0x100
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	68d9      	ldr	r1, [r3, #12]
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	ea40 0301 	orr.w	r3, r0, r1
 8006404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	431a      	orrs	r2, r3
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	431a      	orrs	r2, r3
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006434:	f021 010c 	bic.w	r1, r1, #12
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006442:	430b      	orrs	r3, r1
 8006444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006456:	6999      	ldr	r1, [r3, #24]
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	ea40 0301 	orr.w	r3, r0, r1
 8006462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b8f      	ldr	r3, [pc, #572]	; (80066a8 <UART_SetConfig+0x2cc>)
 800646c:	429a      	cmp	r2, r3
 800646e:	d005      	beq.n	800647c <UART_SetConfig+0xa0>
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b8d      	ldr	r3, [pc, #564]	; (80066ac <UART_SetConfig+0x2d0>)
 8006478:	429a      	cmp	r2, r3
 800647a:	d104      	bne.n	8006486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800647c:	f7fe fb94 	bl	8004ba8 <HAL_RCC_GetPCLK2Freq>
 8006480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006484:	e003      	b.n	800648e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006486:	f7fe fb7b 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
 800648a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800648e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006498:	f040 810c 	bne.w	80066b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800649c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064ae:	4622      	mov	r2, r4
 80064b0:	462b      	mov	r3, r5
 80064b2:	1891      	adds	r1, r2, r2
 80064b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80064b6:	415b      	adcs	r3, r3
 80064b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064be:	4621      	mov	r1, r4
 80064c0:	eb12 0801 	adds.w	r8, r2, r1
 80064c4:	4629      	mov	r1, r5
 80064c6:	eb43 0901 	adc.w	r9, r3, r1
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064de:	4690      	mov	r8, r2
 80064e0:	4699      	mov	r9, r3
 80064e2:	4623      	mov	r3, r4
 80064e4:	eb18 0303 	adds.w	r3, r8, r3
 80064e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064ec:	462b      	mov	r3, r5
 80064ee:	eb49 0303 	adc.w	r3, r9, r3
 80064f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800650a:	460b      	mov	r3, r1
 800650c:	18db      	adds	r3, r3, r3
 800650e:	653b      	str	r3, [r7, #80]	; 0x50
 8006510:	4613      	mov	r3, r2
 8006512:	eb42 0303 	adc.w	r3, r2, r3
 8006516:	657b      	str	r3, [r7, #84]	; 0x54
 8006518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800651c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006520:	f7fa fb6a 	bl	8000bf8 <__aeabi_uldivmod>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4b61      	ldr	r3, [pc, #388]	; (80066b0 <UART_SetConfig+0x2d4>)
 800652a:	fba3 2302 	umull	r2, r3, r3, r2
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	011c      	lsls	r4, r3, #4
 8006532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006536:	2200      	movs	r2, #0
 8006538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006544:	4642      	mov	r2, r8
 8006546:	464b      	mov	r3, r9
 8006548:	1891      	adds	r1, r2, r2
 800654a:	64b9      	str	r1, [r7, #72]	; 0x48
 800654c:	415b      	adcs	r3, r3
 800654e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006554:	4641      	mov	r1, r8
 8006556:	eb12 0a01 	adds.w	sl, r2, r1
 800655a:	4649      	mov	r1, r9
 800655c:	eb43 0b01 	adc.w	fp, r3, r1
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800656c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006574:	4692      	mov	sl, r2
 8006576:	469b      	mov	fp, r3
 8006578:	4643      	mov	r3, r8
 800657a:	eb1a 0303 	adds.w	r3, sl, r3
 800657e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006582:	464b      	mov	r3, r9
 8006584:	eb4b 0303 	adc.w	r3, fp, r3
 8006588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800659c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065a0:	460b      	mov	r3, r1
 80065a2:	18db      	adds	r3, r3, r3
 80065a4:	643b      	str	r3, [r7, #64]	; 0x40
 80065a6:	4613      	mov	r3, r2
 80065a8:	eb42 0303 	adc.w	r3, r2, r3
 80065ac:	647b      	str	r3, [r7, #68]	; 0x44
 80065ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065b6:	f7fa fb1f 	bl	8000bf8 <__aeabi_uldivmod>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4611      	mov	r1, r2
 80065c0:	4b3b      	ldr	r3, [pc, #236]	; (80066b0 <UART_SetConfig+0x2d4>)
 80065c2:	fba3 2301 	umull	r2, r3, r3, r1
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	2264      	movs	r2, #100	; 0x64
 80065ca:	fb02 f303 	mul.w	r3, r2, r3
 80065ce:	1acb      	subs	r3, r1, r3
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065d6:	4b36      	ldr	r3, [pc, #216]	; (80066b0 <UART_SetConfig+0x2d4>)
 80065d8:	fba3 2302 	umull	r2, r3, r3, r2
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065e4:	441c      	add	r4, r3
 80065e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	1891      	adds	r1, r2, r2
 80065fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006600:	415b      	adcs	r3, r3
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006608:	4641      	mov	r1, r8
 800660a:	1851      	adds	r1, r2, r1
 800660c:	6339      	str	r1, [r7, #48]	; 0x30
 800660e:	4649      	mov	r1, r9
 8006610:	414b      	adcs	r3, r1
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006620:	4659      	mov	r1, fp
 8006622:	00cb      	lsls	r3, r1, #3
 8006624:	4651      	mov	r1, sl
 8006626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800662a:	4651      	mov	r1, sl
 800662c:	00ca      	lsls	r2, r1, #3
 800662e:	4610      	mov	r0, r2
 8006630:	4619      	mov	r1, r3
 8006632:	4603      	mov	r3, r0
 8006634:	4642      	mov	r2, r8
 8006636:	189b      	adds	r3, r3, r2
 8006638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800663c:	464b      	mov	r3, r9
 800663e:	460a      	mov	r2, r1
 8006640:	eb42 0303 	adc.w	r3, r2, r3
 8006644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800665c:	460b      	mov	r3, r1
 800665e:	18db      	adds	r3, r3, r3
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28
 8006662:	4613      	mov	r3, r2
 8006664:	eb42 0303 	adc.w	r3, r2, r3
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800666a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800666e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006672:	f7fa fac1 	bl	8000bf8 <__aeabi_uldivmod>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <UART_SetConfig+0x2d4>)
 800667c:	fba3 1302 	umull	r1, r3, r3, r2
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	2164      	movs	r1, #100	; 0x64
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	3332      	adds	r3, #50	; 0x32
 800668e:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <UART_SetConfig+0x2d4>)
 8006690:	fba2 2303 	umull	r2, r3, r2, r3
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	f003 0207 	and.w	r2, r3, #7
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4422      	add	r2, r4
 80066a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066a4:	e105      	b.n	80068b2 <UART_SetConfig+0x4d6>
 80066a6:	bf00      	nop
 80066a8:	40011000 	.word	0x40011000
 80066ac:	40011400 	.word	0x40011400
 80066b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066c6:	4642      	mov	r2, r8
 80066c8:	464b      	mov	r3, r9
 80066ca:	1891      	adds	r1, r2, r2
 80066cc:	6239      	str	r1, [r7, #32]
 80066ce:	415b      	adcs	r3, r3
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
 80066d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066d6:	4641      	mov	r1, r8
 80066d8:	1854      	adds	r4, r2, r1
 80066da:	4649      	mov	r1, r9
 80066dc:	eb43 0501 	adc.w	r5, r3, r1
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	00eb      	lsls	r3, r5, #3
 80066ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ee:	00e2      	lsls	r2, r4, #3
 80066f0:	4614      	mov	r4, r2
 80066f2:	461d      	mov	r5, r3
 80066f4:	4643      	mov	r3, r8
 80066f6:	18e3      	adds	r3, r4, r3
 80066f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066fc:	464b      	mov	r3, r9
 80066fe:	eb45 0303 	adc.w	r3, r5, r3
 8006702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006722:	4629      	mov	r1, r5
 8006724:	008b      	lsls	r3, r1, #2
 8006726:	4621      	mov	r1, r4
 8006728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800672c:	4621      	mov	r1, r4
 800672e:	008a      	lsls	r2, r1, #2
 8006730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006734:	f7fa fa60 	bl	8000bf8 <__aeabi_uldivmod>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4b60      	ldr	r3, [pc, #384]	; (80068c0 <UART_SetConfig+0x4e4>)
 800673e:	fba3 2302 	umull	r2, r3, r3, r2
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	011c      	lsls	r4, r3, #4
 8006746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800674a:	2200      	movs	r2, #0
 800674c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006758:	4642      	mov	r2, r8
 800675a:	464b      	mov	r3, r9
 800675c:	1891      	adds	r1, r2, r2
 800675e:	61b9      	str	r1, [r7, #24]
 8006760:	415b      	adcs	r3, r3
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006768:	4641      	mov	r1, r8
 800676a:	1851      	adds	r1, r2, r1
 800676c:	6139      	str	r1, [r7, #16]
 800676e:	4649      	mov	r1, r9
 8006770:	414b      	adcs	r3, r1
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006780:	4659      	mov	r1, fp
 8006782:	00cb      	lsls	r3, r1, #3
 8006784:	4651      	mov	r1, sl
 8006786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678a:	4651      	mov	r1, sl
 800678c:	00ca      	lsls	r2, r1, #3
 800678e:	4610      	mov	r0, r2
 8006790:	4619      	mov	r1, r3
 8006792:	4603      	mov	r3, r0
 8006794:	4642      	mov	r2, r8
 8006796:	189b      	adds	r3, r3, r2
 8006798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800679c:	464b      	mov	r3, r9
 800679e:	460a      	mov	r2, r1
 80067a0:	eb42 0303 	adc.w	r3, r2, r3
 80067a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067c0:	4649      	mov	r1, r9
 80067c2:	008b      	lsls	r3, r1, #2
 80067c4:	4641      	mov	r1, r8
 80067c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ca:	4641      	mov	r1, r8
 80067cc:	008a      	lsls	r2, r1, #2
 80067ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067d2:	f7fa fa11 	bl	8000bf8 <__aeabi_uldivmod>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4b39      	ldr	r3, [pc, #228]	; (80068c0 <UART_SetConfig+0x4e4>)
 80067dc:	fba3 1302 	umull	r1, r3, r3, r2
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	2164      	movs	r1, #100	; 0x64
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	3332      	adds	r3, #50	; 0x32
 80067ee:	4a34      	ldr	r2, [pc, #208]	; (80068c0 <UART_SetConfig+0x4e4>)
 80067f0:	fba2 2303 	umull	r2, r3, r2, r3
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067fa:	441c      	add	r4, r3
 80067fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006800:	2200      	movs	r2, #0
 8006802:	673b      	str	r3, [r7, #112]	; 0x70
 8006804:	677a      	str	r2, [r7, #116]	; 0x74
 8006806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800680a:	4642      	mov	r2, r8
 800680c:	464b      	mov	r3, r9
 800680e:	1891      	adds	r1, r2, r2
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	415b      	adcs	r3, r3
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800681a:	4641      	mov	r1, r8
 800681c:	1851      	adds	r1, r2, r1
 800681e:	6039      	str	r1, [r7, #0]
 8006820:	4649      	mov	r1, r9
 8006822:	414b      	adcs	r3, r1
 8006824:	607b      	str	r3, [r7, #4]
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006832:	4659      	mov	r1, fp
 8006834:	00cb      	lsls	r3, r1, #3
 8006836:	4651      	mov	r1, sl
 8006838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800683c:	4651      	mov	r1, sl
 800683e:	00ca      	lsls	r2, r1, #3
 8006840:	4610      	mov	r0, r2
 8006842:	4619      	mov	r1, r3
 8006844:	4603      	mov	r3, r0
 8006846:	4642      	mov	r2, r8
 8006848:	189b      	adds	r3, r3, r2
 800684a:	66bb      	str	r3, [r7, #104]	; 0x68
 800684c:	464b      	mov	r3, r9
 800684e:	460a      	mov	r2, r1
 8006850:	eb42 0303 	adc.w	r3, r2, r3
 8006854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	663b      	str	r3, [r7, #96]	; 0x60
 8006860:	667a      	str	r2, [r7, #100]	; 0x64
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800686e:	4649      	mov	r1, r9
 8006870:	008b      	lsls	r3, r1, #2
 8006872:	4641      	mov	r1, r8
 8006874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006878:	4641      	mov	r1, r8
 800687a:	008a      	lsls	r2, r1, #2
 800687c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006880:	f7fa f9ba 	bl	8000bf8 <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <UART_SetConfig+0x4e4>)
 800688a:	fba3 1302 	umull	r1, r3, r3, r2
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	2164      	movs	r1, #100	; 0x64
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	3332      	adds	r3, #50	; 0x32
 800689c:	4a08      	ldr	r2, [pc, #32]	; (80068c0 <UART_SetConfig+0x4e4>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	f003 020f 	and.w	r2, r3, #15
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4422      	add	r2, r4
 80068b0:	609a      	str	r2, [r3, #8]
}
 80068b2:	bf00      	nop
 80068b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068b8:	46bd      	mov	sp, r7
 80068ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068be:	bf00      	nop
 80068c0:	51eb851f 	.word	0x51eb851f

080068c4 <atof>:
 80068c4:	2100      	movs	r1, #0
 80068c6:	f001 bb11 	b.w	8007eec <strtod>

080068ca <atoi>:
 80068ca:	220a      	movs	r2, #10
 80068cc:	2100      	movs	r1, #0
 80068ce:	f001 bb9b 	b.w	8008008 <strtol>
	...

080068d4 <__errno>:
 80068d4:	4b01      	ldr	r3, [pc, #4]	; (80068dc <__errno+0x8>)
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	2000000c 	.word	0x2000000c

080068e0 <__libc_init_array>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	4d0d      	ldr	r5, [pc, #52]	; (8006918 <__libc_init_array+0x38>)
 80068e4:	4c0d      	ldr	r4, [pc, #52]	; (800691c <__libc_init_array+0x3c>)
 80068e6:	1b64      	subs	r4, r4, r5
 80068e8:	10a4      	asrs	r4, r4, #2
 80068ea:	2600      	movs	r6, #0
 80068ec:	42a6      	cmp	r6, r4
 80068ee:	d109      	bne.n	8006904 <__libc_init_array+0x24>
 80068f0:	4d0b      	ldr	r5, [pc, #44]	; (8006920 <__libc_init_array+0x40>)
 80068f2:	4c0c      	ldr	r4, [pc, #48]	; (8006924 <__libc_init_array+0x44>)
 80068f4:	f004 faa8 	bl	800ae48 <_init>
 80068f8:	1b64      	subs	r4, r4, r5
 80068fa:	10a4      	asrs	r4, r4, #2
 80068fc:	2600      	movs	r6, #0
 80068fe:	42a6      	cmp	r6, r4
 8006900:	d105      	bne.n	800690e <__libc_init_array+0x2e>
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	f855 3b04 	ldr.w	r3, [r5], #4
 8006908:	4798      	blx	r3
 800690a:	3601      	adds	r6, #1
 800690c:	e7ee      	b.n	80068ec <__libc_init_array+0xc>
 800690e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006912:	4798      	blx	r3
 8006914:	3601      	adds	r6, #1
 8006916:	e7f2      	b.n	80068fe <__libc_init_array+0x1e>
 8006918:	0800baf4 	.word	0x0800baf4
 800691c:	0800baf4 	.word	0x0800baf4
 8006920:	0800baf4 	.word	0x0800baf4
 8006924:	0800baf8 	.word	0x0800baf8

08006928 <memcpy>:
 8006928:	440a      	add	r2, r1
 800692a:	4291      	cmp	r1, r2
 800692c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006930:	d100      	bne.n	8006934 <memcpy+0xc>
 8006932:	4770      	bx	lr
 8006934:	b510      	push	{r4, lr}
 8006936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800693a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800693e:	4291      	cmp	r1, r2
 8006940:	d1f9      	bne.n	8006936 <memcpy+0xe>
 8006942:	bd10      	pop	{r4, pc}

08006944 <memset>:
 8006944:	4402      	add	r2, r0
 8006946:	4603      	mov	r3, r0
 8006948:	4293      	cmp	r3, r2
 800694a:	d100      	bne.n	800694e <memset+0xa>
 800694c:	4770      	bx	lr
 800694e:	f803 1b01 	strb.w	r1, [r3], #1
 8006952:	e7f9      	b.n	8006948 <memset+0x4>

08006954 <__cvt>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	ec55 4b10 	vmov	r4, r5, d0
 800695c:	2d00      	cmp	r5, #0
 800695e:	460e      	mov	r6, r1
 8006960:	4619      	mov	r1, r3
 8006962:	462b      	mov	r3, r5
 8006964:	bfbb      	ittet	lt
 8006966:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800696a:	461d      	movlt	r5, r3
 800696c:	2300      	movge	r3, #0
 800696e:	232d      	movlt	r3, #45	; 0x2d
 8006970:	700b      	strb	r3, [r1, #0]
 8006972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006974:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006978:	4691      	mov	r9, r2
 800697a:	f023 0820 	bic.w	r8, r3, #32
 800697e:	bfbc      	itt	lt
 8006980:	4622      	movlt	r2, r4
 8006982:	4614      	movlt	r4, r2
 8006984:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006988:	d005      	beq.n	8006996 <__cvt+0x42>
 800698a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800698e:	d100      	bne.n	8006992 <__cvt+0x3e>
 8006990:	3601      	adds	r6, #1
 8006992:	2102      	movs	r1, #2
 8006994:	e000      	b.n	8006998 <__cvt+0x44>
 8006996:	2103      	movs	r1, #3
 8006998:	ab03      	add	r3, sp, #12
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	ab02      	add	r3, sp, #8
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	ec45 4b10 	vmov	d0, r4, r5
 80069a4:	4653      	mov	r3, sl
 80069a6:	4632      	mov	r2, r6
 80069a8:	f001 fbc6 	bl	8008138 <_dtoa_r>
 80069ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069b0:	4607      	mov	r7, r0
 80069b2:	d102      	bne.n	80069ba <__cvt+0x66>
 80069b4:	f019 0f01 	tst.w	r9, #1
 80069b8:	d022      	beq.n	8006a00 <__cvt+0xac>
 80069ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069be:	eb07 0906 	add.w	r9, r7, r6
 80069c2:	d110      	bne.n	80069e6 <__cvt+0x92>
 80069c4:	783b      	ldrb	r3, [r7, #0]
 80069c6:	2b30      	cmp	r3, #48	; 0x30
 80069c8:	d10a      	bne.n	80069e0 <__cvt+0x8c>
 80069ca:	2200      	movs	r2, #0
 80069cc:	2300      	movs	r3, #0
 80069ce:	4620      	mov	r0, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7fa f881 	bl	8000ad8 <__aeabi_dcmpeq>
 80069d6:	b918      	cbnz	r0, 80069e0 <__cvt+0x8c>
 80069d8:	f1c6 0601 	rsb	r6, r6, #1
 80069dc:	f8ca 6000 	str.w	r6, [sl]
 80069e0:	f8da 3000 	ldr.w	r3, [sl]
 80069e4:	4499      	add	r9, r3
 80069e6:	2200      	movs	r2, #0
 80069e8:	2300      	movs	r3, #0
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7fa f873 	bl	8000ad8 <__aeabi_dcmpeq>
 80069f2:	b108      	cbz	r0, 80069f8 <__cvt+0xa4>
 80069f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80069f8:	2230      	movs	r2, #48	; 0x30
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	454b      	cmp	r3, r9
 80069fe:	d307      	bcc.n	8006a10 <__cvt+0xbc>
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a04:	1bdb      	subs	r3, r3, r7
 8006a06:	4638      	mov	r0, r7
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	b004      	add	sp, #16
 8006a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a10:	1c59      	adds	r1, r3, #1
 8006a12:	9103      	str	r1, [sp, #12]
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e7f0      	b.n	80069fa <__cvt+0xa6>

08006a18 <__exponent>:
 8006a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	bfb8      	it	lt
 8006a20:	4249      	neglt	r1, r1
 8006a22:	f803 2b02 	strb.w	r2, [r3], #2
 8006a26:	bfb4      	ite	lt
 8006a28:	222d      	movlt	r2, #45	; 0x2d
 8006a2a:	222b      	movge	r2, #43	; 0x2b
 8006a2c:	2909      	cmp	r1, #9
 8006a2e:	7042      	strb	r2, [r0, #1]
 8006a30:	dd2a      	ble.n	8006a88 <__exponent+0x70>
 8006a32:	f10d 0407 	add.w	r4, sp, #7
 8006a36:	46a4      	mov	ip, r4
 8006a38:	270a      	movs	r7, #10
 8006a3a:	46a6      	mov	lr, r4
 8006a3c:	460a      	mov	r2, r1
 8006a3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a42:	fb07 1516 	mls	r5, r7, r6, r1
 8006a46:	3530      	adds	r5, #48	; 0x30
 8006a48:	2a63      	cmp	r2, #99	; 0x63
 8006a4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a52:	4631      	mov	r1, r6
 8006a54:	dcf1      	bgt.n	8006a3a <__exponent+0x22>
 8006a56:	3130      	adds	r1, #48	; 0x30
 8006a58:	f1ae 0502 	sub.w	r5, lr, #2
 8006a5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a60:	1c44      	adds	r4, r0, #1
 8006a62:	4629      	mov	r1, r5
 8006a64:	4561      	cmp	r1, ip
 8006a66:	d30a      	bcc.n	8006a7e <__exponent+0x66>
 8006a68:	f10d 0209 	add.w	r2, sp, #9
 8006a6c:	eba2 020e 	sub.w	r2, r2, lr
 8006a70:	4565      	cmp	r5, ip
 8006a72:	bf88      	it	hi
 8006a74:	2200      	movhi	r2, #0
 8006a76:	4413      	add	r3, r2
 8006a78:	1a18      	subs	r0, r3, r0
 8006a7a:	b003      	add	sp, #12
 8006a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a86:	e7ed      	b.n	8006a64 <__exponent+0x4c>
 8006a88:	2330      	movs	r3, #48	; 0x30
 8006a8a:	3130      	adds	r1, #48	; 0x30
 8006a8c:	7083      	strb	r3, [r0, #2]
 8006a8e:	70c1      	strb	r1, [r0, #3]
 8006a90:	1d03      	adds	r3, r0, #4
 8006a92:	e7f1      	b.n	8006a78 <__exponent+0x60>

08006a94 <_printf_float>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	ed2d 8b02 	vpush	{d8}
 8006a9c:	b08d      	sub	sp, #52	; 0x34
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	461f      	mov	r7, r3
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	f002 fca3 	bl	80093f4 <_localeconv_r>
 8006aae:	f8d0 a000 	ldr.w	sl, [r0]
 8006ab2:	4650      	mov	r0, sl
 8006ab4:	f7f9 fb94 	bl	80001e0 <strlen>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	930a      	str	r3, [sp, #40]	; 0x28
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	9305      	str	r3, [sp, #20]
 8006ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ac8:	3307      	adds	r3, #7
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	f103 0208 	add.w	r2, r3, #8
 8006ad2:	f8c8 2000 	str.w	r2, [r8]
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ade:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ae6:	9307      	str	r3, [sp, #28]
 8006ae8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006aec:	ee08 0a10 	vmov	s16, r0
 8006af0:	4b9f      	ldr	r3, [pc, #636]	; (8006d70 <_printf_float+0x2dc>)
 8006af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006af6:	f04f 32ff 	mov.w	r2, #4294967295
 8006afa:	f7fa f81f 	bl	8000b3c <__aeabi_dcmpun>
 8006afe:	bb88      	cbnz	r0, 8006b64 <_printf_float+0xd0>
 8006b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b04:	4b9a      	ldr	r3, [pc, #616]	; (8006d70 <_printf_float+0x2dc>)
 8006b06:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0a:	f7f9 fff9 	bl	8000b00 <__aeabi_dcmple>
 8006b0e:	bb48      	cbnz	r0, 8006b64 <_printf_float+0xd0>
 8006b10:	2200      	movs	r2, #0
 8006b12:	2300      	movs	r3, #0
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	f7f9 ffe8 	bl	8000aec <__aeabi_dcmplt>
 8006b1c:	b110      	cbz	r0, 8006b24 <_printf_float+0x90>
 8006b1e:	232d      	movs	r3, #45	; 0x2d
 8006b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b24:	4b93      	ldr	r3, [pc, #588]	; (8006d74 <_printf_float+0x2e0>)
 8006b26:	4894      	ldr	r0, [pc, #592]	; (8006d78 <_printf_float+0x2e4>)
 8006b28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b2c:	bf94      	ite	ls
 8006b2e:	4698      	movls	r8, r3
 8006b30:	4680      	movhi	r8, r0
 8006b32:	2303      	movs	r3, #3
 8006b34:	6123      	str	r3, [r4, #16]
 8006b36:	9b05      	ldr	r3, [sp, #20]
 8006b38:	f023 0204 	bic.w	r2, r3, #4
 8006b3c:	6022      	str	r2, [r4, #0]
 8006b3e:	f04f 0900 	mov.w	r9, #0
 8006b42:	9700      	str	r7, [sp, #0]
 8006b44:	4633      	mov	r3, r6
 8006b46:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 f9d8 	bl	8006f00 <_printf_common>
 8006b50:	3001      	adds	r0, #1
 8006b52:	f040 8090 	bne.w	8006c76 <_printf_float+0x1e2>
 8006b56:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5a:	b00d      	add	sp, #52	; 0x34
 8006b5c:	ecbd 8b02 	vpop	{d8}
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 ffe6 	bl	8000b3c <__aeabi_dcmpun>
 8006b70:	b140      	cbz	r0, 8006b84 <_printf_float+0xf0>
 8006b72:	464b      	mov	r3, r9
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bfbc      	itt	lt
 8006b78:	232d      	movlt	r3, #45	; 0x2d
 8006b7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b7e:	487f      	ldr	r0, [pc, #508]	; (8006d7c <_printf_float+0x2e8>)
 8006b80:	4b7f      	ldr	r3, [pc, #508]	; (8006d80 <_printf_float+0x2ec>)
 8006b82:	e7d1      	b.n	8006b28 <_printf_float+0x94>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b8a:	9206      	str	r2, [sp, #24]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	d13f      	bne.n	8006c10 <_printf_float+0x17c>
 8006b90:	2306      	movs	r3, #6
 8006b92:	6063      	str	r3, [r4, #4]
 8006b94:	9b05      	ldr	r3, [sp, #20]
 8006b96:	6861      	ldr	r1, [r4, #4]
 8006b98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ba2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ba6:	ab09      	add	r3, sp, #36	; 0x24
 8006ba8:	ec49 8b10 	vmov	d0, r8, r9
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	6022      	str	r2, [r4, #0]
 8006bb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f7ff fecd 	bl	8006954 <__cvt>
 8006bba:	9b06      	ldr	r3, [sp, #24]
 8006bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bbe:	2b47      	cmp	r3, #71	; 0x47
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	d108      	bne.n	8006bd6 <_printf_float+0x142>
 8006bc4:	1cc8      	adds	r0, r1, #3
 8006bc6:	db02      	blt.n	8006bce <_printf_float+0x13a>
 8006bc8:	6863      	ldr	r3, [r4, #4]
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	dd41      	ble.n	8006c52 <_printf_float+0x1be>
 8006bce:	f1ab 0b02 	sub.w	fp, fp, #2
 8006bd2:	fa5f fb8b 	uxtb.w	fp, fp
 8006bd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bda:	d820      	bhi.n	8006c1e <_printf_float+0x18a>
 8006bdc:	3901      	subs	r1, #1
 8006bde:	465a      	mov	r2, fp
 8006be0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006be4:	9109      	str	r1, [sp, #36]	; 0x24
 8006be6:	f7ff ff17 	bl	8006a18 <__exponent>
 8006bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bec:	1813      	adds	r3, r2, r0
 8006bee:	2a01      	cmp	r2, #1
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	dc02      	bgt.n	8006bfc <_printf_float+0x168>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	07d2      	lsls	r2, r2, #31
 8006bfa:	d501      	bpl.n	8006c00 <_printf_float+0x16c>
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d09c      	beq.n	8006b42 <_printf_float+0xae>
 8006c08:	232d      	movs	r3, #45	; 0x2d
 8006c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0e:	e798      	b.n	8006b42 <_printf_float+0xae>
 8006c10:	9a06      	ldr	r2, [sp, #24]
 8006c12:	2a47      	cmp	r2, #71	; 0x47
 8006c14:	d1be      	bne.n	8006b94 <_printf_float+0x100>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1bc      	bne.n	8006b94 <_printf_float+0x100>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e7b9      	b.n	8006b92 <_printf_float+0xfe>
 8006c1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c22:	d118      	bne.n	8006c56 <_printf_float+0x1c2>
 8006c24:	2900      	cmp	r1, #0
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	dd0b      	ble.n	8006c42 <_printf_float+0x1ae>
 8006c2a:	6121      	str	r1, [r4, #16]
 8006c2c:	b913      	cbnz	r3, 8006c34 <_printf_float+0x1a0>
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	07d0      	lsls	r0, r2, #31
 8006c32:	d502      	bpl.n	8006c3a <_printf_float+0x1a6>
 8006c34:	3301      	adds	r3, #1
 8006c36:	440b      	add	r3, r1
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c3c:	f04f 0900 	mov.w	r9, #0
 8006c40:	e7de      	b.n	8006c00 <_printf_float+0x16c>
 8006c42:	b913      	cbnz	r3, 8006c4a <_printf_float+0x1b6>
 8006c44:	6822      	ldr	r2, [r4, #0]
 8006c46:	07d2      	lsls	r2, r2, #31
 8006c48:	d501      	bpl.n	8006c4e <_printf_float+0x1ba>
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	e7f4      	b.n	8006c38 <_printf_float+0x1a4>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e7f2      	b.n	8006c38 <_printf_float+0x1a4>
 8006c52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c58:	4299      	cmp	r1, r3
 8006c5a:	db05      	blt.n	8006c68 <_printf_float+0x1d4>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	6121      	str	r1, [r4, #16]
 8006c60:	07d8      	lsls	r0, r3, #31
 8006c62:	d5ea      	bpl.n	8006c3a <_printf_float+0x1a6>
 8006c64:	1c4b      	adds	r3, r1, #1
 8006c66:	e7e7      	b.n	8006c38 <_printf_float+0x1a4>
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	bfd4      	ite	le
 8006c6c:	f1c1 0202 	rsble	r2, r1, #2
 8006c70:	2201      	movgt	r2, #1
 8006c72:	4413      	add	r3, r2
 8006c74:	e7e0      	b.n	8006c38 <_printf_float+0x1a4>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	055a      	lsls	r2, r3, #21
 8006c7a:	d407      	bmi.n	8006c8c <_printf_float+0x1f8>
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	4642      	mov	r2, r8
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	d12c      	bne.n	8006ce4 <_printf_float+0x250>
 8006c8a:	e764      	b.n	8006b56 <_printf_float+0xc2>
 8006c8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c90:	f240 80e0 	bls.w	8006e54 <_printf_float+0x3c0>
 8006c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f7f9 ff1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d034      	beq.n	8006d0e <_printf_float+0x27a>
 8006ca4:	4a37      	ldr	r2, [pc, #220]	; (8006d84 <_printf_float+0x2f0>)
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b8      	blx	r7
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f43f af51 	beq.w	8006b56 <_printf_float+0xc2>
 8006cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	db02      	blt.n	8006cc2 <_printf_float+0x22e>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	07d8      	lsls	r0, r3, #31
 8006cc0:	d510      	bpl.n	8006ce4 <_printf_float+0x250>
 8006cc2:	ee18 3a10 	vmov	r3, s16
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f af41 	beq.w	8006b56 <_printf_float+0xc2>
 8006cd4:	f04f 0800 	mov.w	r8, #0
 8006cd8:	f104 091a 	add.w	r9, r4, #26
 8006cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	4543      	cmp	r3, r8
 8006ce2:	dc09      	bgt.n	8006cf8 <_printf_float+0x264>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	079b      	lsls	r3, r3, #30
 8006ce8:	f100 8105 	bmi.w	8006ef6 <_printf_float+0x462>
 8006cec:	68e0      	ldr	r0, [r4, #12]
 8006cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf0:	4298      	cmp	r0, r3
 8006cf2:	bfb8      	it	lt
 8006cf4:	4618      	movlt	r0, r3
 8006cf6:	e730      	b.n	8006b5a <_printf_float+0xc6>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	464a      	mov	r2, r9
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b8      	blx	r7
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f af27 	beq.w	8006b56 <_printf_float+0xc2>
 8006d08:	f108 0801 	add.w	r8, r8, #1
 8006d0c:	e7e6      	b.n	8006cdc <_printf_float+0x248>
 8006d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	dc39      	bgt.n	8006d88 <_printf_float+0x2f4>
 8006d14:	4a1b      	ldr	r2, [pc, #108]	; (8006d84 <_printf_float+0x2f0>)
 8006d16:	2301      	movs	r3, #1
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f af19 	beq.w	8006b56 <_printf_float+0xc2>
 8006d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	d102      	bne.n	8006d32 <_printf_float+0x29e>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07d9      	lsls	r1, r3, #31
 8006d30:	d5d8      	bpl.n	8006ce4 <_printf_float+0x250>
 8006d32:	ee18 3a10 	vmov	r3, s16
 8006d36:	4652      	mov	r2, sl
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b8      	blx	r7
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f43f af09 	beq.w	8006b56 <_printf_float+0xc2>
 8006d44:	f04f 0900 	mov.w	r9, #0
 8006d48:	f104 0a1a 	add.w	sl, r4, #26
 8006d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4e:	425b      	negs	r3, r3
 8006d50:	454b      	cmp	r3, r9
 8006d52:	dc01      	bgt.n	8006d58 <_printf_float+0x2c4>
 8006d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d56:	e792      	b.n	8006c7e <_printf_float+0x1ea>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	4652      	mov	r2, sl
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	f43f aef7 	beq.w	8006b56 <_printf_float+0xc2>
 8006d68:	f109 0901 	add.w	r9, r9, #1
 8006d6c:	e7ee      	b.n	8006d4c <_printf_float+0x2b8>
 8006d6e:	bf00      	nop
 8006d70:	7fefffff 	.word	0x7fefffff
 8006d74:	0800b654 	.word	0x0800b654
 8006d78:	0800b658 	.word	0x0800b658
 8006d7c:	0800b660 	.word	0x0800b660
 8006d80:	0800b65c 	.word	0x0800b65c
 8006d84:	0800b664 	.word	0x0800b664
 8006d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	bfa8      	it	ge
 8006d90:	461a      	movge	r2, r3
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	4691      	mov	r9, r2
 8006d96:	dc37      	bgt.n	8006e08 <_printf_float+0x374>
 8006d98:	f04f 0b00 	mov.w	fp, #0
 8006d9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da0:	f104 021a 	add.w	r2, r4, #26
 8006da4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da6:	9305      	str	r3, [sp, #20]
 8006da8:	eba3 0309 	sub.w	r3, r3, r9
 8006dac:	455b      	cmp	r3, fp
 8006dae:	dc33      	bgt.n	8006e18 <_printf_float+0x384>
 8006db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006db4:	429a      	cmp	r2, r3
 8006db6:	db3b      	blt.n	8006e30 <_printf_float+0x39c>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	07da      	lsls	r2, r3, #31
 8006dbc:	d438      	bmi.n	8006e30 <_printf_float+0x39c>
 8006dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc0:	9a05      	ldr	r2, [sp, #20]
 8006dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dc4:	1a9a      	subs	r2, r3, r2
 8006dc6:	eba3 0901 	sub.w	r9, r3, r1
 8006dca:	4591      	cmp	r9, r2
 8006dcc:	bfa8      	it	ge
 8006dce:	4691      	movge	r9, r2
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	dc35      	bgt.n	8006e42 <_printf_float+0x3ae>
 8006dd6:	f04f 0800 	mov.w	r8, #0
 8006dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dde:	f104 0a1a 	add.w	sl, r4, #26
 8006de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	eba3 0309 	sub.w	r3, r3, r9
 8006dec:	4543      	cmp	r3, r8
 8006dee:	f77f af79 	ble.w	8006ce4 <_printf_float+0x250>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4652      	mov	r2, sl
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b8      	blx	r7
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	f43f aeaa 	beq.w	8006b56 <_printf_float+0xc2>
 8006e02:	f108 0801 	add.w	r8, r8, #1
 8006e06:	e7ec      	b.n	8006de2 <_printf_float+0x34e>
 8006e08:	4613      	mov	r3, r2
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	d1c0      	bne.n	8006d98 <_printf_float+0x304>
 8006e16:	e69e      	b.n	8006b56 <_printf_float+0xc2>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	9205      	str	r2, [sp, #20]
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f ae97 	beq.w	8006b56 <_printf_float+0xc2>
 8006e28:	9a05      	ldr	r2, [sp, #20]
 8006e2a:	f10b 0b01 	add.w	fp, fp, #1
 8006e2e:	e7b9      	b.n	8006da4 <_printf_float+0x310>
 8006e30:	ee18 3a10 	vmov	r3, s16
 8006e34:	4652      	mov	r2, sl
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d1be      	bne.n	8006dbe <_printf_float+0x32a>
 8006e40:	e689      	b.n	8006b56 <_printf_float+0xc2>
 8006e42:	9a05      	ldr	r2, [sp, #20]
 8006e44:	464b      	mov	r3, r9
 8006e46:	4442      	add	r2, r8
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d1c1      	bne.n	8006dd6 <_printf_float+0x342>
 8006e52:	e680      	b.n	8006b56 <_printf_float+0xc2>
 8006e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e56:	2a01      	cmp	r2, #1
 8006e58:	dc01      	bgt.n	8006e5e <_printf_float+0x3ca>
 8006e5a:	07db      	lsls	r3, r3, #31
 8006e5c:	d538      	bpl.n	8006ed0 <_printf_float+0x43c>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4642      	mov	r2, r8
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f43f ae74 	beq.w	8006b56 <_printf_float+0xc2>
 8006e6e:	ee18 3a10 	vmov	r3, s16
 8006e72:	4652      	mov	r2, sl
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f ae6b 	beq.w	8006b56 <_printf_float+0xc2>
 8006e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e84:	2200      	movs	r2, #0
 8006e86:	2300      	movs	r3, #0
 8006e88:	f7f9 fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e8c:	b9d8      	cbnz	r0, 8006ec6 <_printf_float+0x432>
 8006e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e90:	f108 0201 	add.w	r2, r8, #1
 8006e94:	3b01      	subs	r3, #1
 8006e96:	4631      	mov	r1, r6
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b8      	blx	r7
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d10e      	bne.n	8006ebe <_printf_float+0x42a>
 8006ea0:	e659      	b.n	8006b56 <_printf_float+0xc2>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f ae52 	beq.w	8006b56 <_printf_float+0xc2>
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	4543      	cmp	r3, r8
 8006ebc:	dcf1      	bgt.n	8006ea2 <_printf_float+0x40e>
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ec4:	e6dc      	b.n	8006c80 <_printf_float+0x1ec>
 8006ec6:	f04f 0800 	mov.w	r8, #0
 8006eca:	f104 0a1a 	add.w	sl, r4, #26
 8006ece:	e7f2      	b.n	8006eb6 <_printf_float+0x422>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	e7df      	b.n	8006e96 <_printf_float+0x402>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	464a      	mov	r2, r9
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f43f ae38 	beq.w	8006b56 <_printf_float+0xc2>
 8006ee6:	f108 0801 	add.w	r8, r8, #1
 8006eea:	68e3      	ldr	r3, [r4, #12]
 8006eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eee:	1a5b      	subs	r3, r3, r1
 8006ef0:	4543      	cmp	r3, r8
 8006ef2:	dcf0      	bgt.n	8006ed6 <_printf_float+0x442>
 8006ef4:	e6fa      	b.n	8006cec <_printf_float+0x258>
 8006ef6:	f04f 0800 	mov.w	r8, #0
 8006efa:	f104 0919 	add.w	r9, r4, #25
 8006efe:	e7f4      	b.n	8006eea <_printf_float+0x456>

08006f00 <_printf_common>:
 8006f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	4616      	mov	r6, r2
 8006f06:	4699      	mov	r9, r3
 8006f08:	688a      	ldr	r2, [r1, #8]
 8006f0a:	690b      	ldr	r3, [r1, #16]
 8006f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	bfb8      	it	lt
 8006f14:	4613      	movlt	r3, r2
 8006f16:	6033      	str	r3, [r6, #0]
 8006f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	b10a      	cbz	r2, 8006f26 <_printf_common+0x26>
 8006f22:	3301      	adds	r3, #1
 8006f24:	6033      	str	r3, [r6, #0]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	0699      	lsls	r1, r3, #26
 8006f2a:	bf42      	ittt	mi
 8006f2c:	6833      	ldrmi	r3, [r6, #0]
 8006f2e:	3302      	addmi	r3, #2
 8006f30:	6033      	strmi	r3, [r6, #0]
 8006f32:	6825      	ldr	r5, [r4, #0]
 8006f34:	f015 0506 	ands.w	r5, r5, #6
 8006f38:	d106      	bne.n	8006f48 <_printf_common+0x48>
 8006f3a:	f104 0a19 	add.w	sl, r4, #25
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	6832      	ldr	r2, [r6, #0]
 8006f42:	1a9b      	subs	r3, r3, r2
 8006f44:	42ab      	cmp	r3, r5
 8006f46:	dc26      	bgt.n	8006f96 <_printf_common+0x96>
 8006f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f4c:	1e13      	subs	r3, r2, #0
 8006f4e:	6822      	ldr	r2, [r4, #0]
 8006f50:	bf18      	it	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	0692      	lsls	r2, r2, #26
 8006f56:	d42b      	bmi.n	8006fb0 <_printf_common+0xb0>
 8006f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	4638      	mov	r0, r7
 8006f60:	47c0      	blx	r8
 8006f62:	3001      	adds	r0, #1
 8006f64:	d01e      	beq.n	8006fa4 <_printf_common+0xa4>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	68e5      	ldr	r5, [r4, #12]
 8006f6a:	6832      	ldr	r2, [r6, #0]
 8006f6c:	f003 0306 	and.w	r3, r3, #6
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	bf08      	it	eq
 8006f74:	1aad      	subeq	r5, r5, r2
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	6922      	ldr	r2, [r4, #16]
 8006f7a:	bf0c      	ite	eq
 8006f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f80:	2500      	movne	r5, #0
 8006f82:	4293      	cmp	r3, r2
 8006f84:	bfc4      	itt	gt
 8006f86:	1a9b      	subgt	r3, r3, r2
 8006f88:	18ed      	addgt	r5, r5, r3
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	341a      	adds	r4, #26
 8006f8e:	42b5      	cmp	r5, r6
 8006f90:	d11a      	bne.n	8006fc8 <_printf_common+0xc8>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e008      	b.n	8006fa8 <_printf_common+0xa8>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4652      	mov	r2, sl
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	47c0      	blx	r8
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d103      	bne.n	8006fac <_printf_common+0xac>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	3501      	adds	r5, #1
 8006fae:	e7c6      	b.n	8006f3e <_printf_common+0x3e>
 8006fb0:	18e1      	adds	r1, r4, r3
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	2030      	movs	r0, #48	; 0x30
 8006fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fba:	4422      	add	r2, r4
 8006fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	e7c7      	b.n	8006f58 <_printf_common+0x58>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	4622      	mov	r2, r4
 8006fcc:	4649      	mov	r1, r9
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d0e6      	beq.n	8006fa4 <_printf_common+0xa4>
 8006fd6:	3601      	adds	r6, #1
 8006fd8:	e7d9      	b.n	8006f8e <_printf_common+0x8e>
	...

08006fdc <_printf_i>:
 8006fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe0:	7e0f      	ldrb	r7, [r1, #24]
 8006fe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fe4:	2f78      	cmp	r7, #120	; 0x78
 8006fe6:	4691      	mov	r9, r2
 8006fe8:	4680      	mov	r8, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	469a      	mov	sl, r3
 8006fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ff2:	d807      	bhi.n	8007004 <_printf_i+0x28>
 8006ff4:	2f62      	cmp	r7, #98	; 0x62
 8006ff6:	d80a      	bhi.n	800700e <_printf_i+0x32>
 8006ff8:	2f00      	cmp	r7, #0
 8006ffa:	f000 80d8 	beq.w	80071ae <_printf_i+0x1d2>
 8006ffe:	2f58      	cmp	r7, #88	; 0x58
 8007000:	f000 80a3 	beq.w	800714a <_printf_i+0x16e>
 8007004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800700c:	e03a      	b.n	8007084 <_printf_i+0xa8>
 800700e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007012:	2b15      	cmp	r3, #21
 8007014:	d8f6      	bhi.n	8007004 <_printf_i+0x28>
 8007016:	a101      	add	r1, pc, #4	; (adr r1, 800701c <_printf_i+0x40>)
 8007018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800701c:	08007075 	.word	0x08007075
 8007020:	08007089 	.word	0x08007089
 8007024:	08007005 	.word	0x08007005
 8007028:	08007005 	.word	0x08007005
 800702c:	08007005 	.word	0x08007005
 8007030:	08007005 	.word	0x08007005
 8007034:	08007089 	.word	0x08007089
 8007038:	08007005 	.word	0x08007005
 800703c:	08007005 	.word	0x08007005
 8007040:	08007005 	.word	0x08007005
 8007044:	08007005 	.word	0x08007005
 8007048:	08007195 	.word	0x08007195
 800704c:	080070b9 	.word	0x080070b9
 8007050:	08007177 	.word	0x08007177
 8007054:	08007005 	.word	0x08007005
 8007058:	08007005 	.word	0x08007005
 800705c:	080071b7 	.word	0x080071b7
 8007060:	08007005 	.word	0x08007005
 8007064:	080070b9 	.word	0x080070b9
 8007068:	08007005 	.word	0x08007005
 800706c:	08007005 	.word	0x08007005
 8007070:	0800717f 	.word	0x0800717f
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	1d1a      	adds	r2, r3, #4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	602a      	str	r2, [r5, #0]
 800707c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007084:	2301      	movs	r3, #1
 8007086:	e0a3      	b.n	80071d0 <_printf_i+0x1f4>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	6829      	ldr	r1, [r5, #0]
 800708c:	0606      	lsls	r6, r0, #24
 800708e:	f101 0304 	add.w	r3, r1, #4
 8007092:	d50a      	bpl.n	80070aa <_printf_i+0xce>
 8007094:	680e      	ldr	r6, [r1, #0]
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	2e00      	cmp	r6, #0
 800709a:	da03      	bge.n	80070a4 <_printf_i+0xc8>
 800709c:	232d      	movs	r3, #45	; 0x2d
 800709e:	4276      	negs	r6, r6
 80070a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a4:	485e      	ldr	r0, [pc, #376]	; (8007220 <_printf_i+0x244>)
 80070a6:	230a      	movs	r3, #10
 80070a8:	e019      	b.n	80070de <_printf_i+0x102>
 80070aa:	680e      	ldr	r6, [r1, #0]
 80070ac:	602b      	str	r3, [r5, #0]
 80070ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070b2:	bf18      	it	ne
 80070b4:	b236      	sxthne	r6, r6
 80070b6:	e7ef      	b.n	8007098 <_printf_i+0xbc>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	6820      	ldr	r0, [r4, #0]
 80070bc:	1d19      	adds	r1, r3, #4
 80070be:	6029      	str	r1, [r5, #0]
 80070c0:	0601      	lsls	r1, r0, #24
 80070c2:	d501      	bpl.n	80070c8 <_printf_i+0xec>
 80070c4:	681e      	ldr	r6, [r3, #0]
 80070c6:	e002      	b.n	80070ce <_printf_i+0xf2>
 80070c8:	0646      	lsls	r6, r0, #25
 80070ca:	d5fb      	bpl.n	80070c4 <_printf_i+0xe8>
 80070cc:	881e      	ldrh	r6, [r3, #0]
 80070ce:	4854      	ldr	r0, [pc, #336]	; (8007220 <_printf_i+0x244>)
 80070d0:	2f6f      	cmp	r7, #111	; 0x6f
 80070d2:	bf0c      	ite	eq
 80070d4:	2308      	moveq	r3, #8
 80070d6:	230a      	movne	r3, #10
 80070d8:	2100      	movs	r1, #0
 80070da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070de:	6865      	ldr	r5, [r4, #4]
 80070e0:	60a5      	str	r5, [r4, #8]
 80070e2:	2d00      	cmp	r5, #0
 80070e4:	bfa2      	ittt	ge
 80070e6:	6821      	ldrge	r1, [r4, #0]
 80070e8:	f021 0104 	bicge.w	r1, r1, #4
 80070ec:	6021      	strge	r1, [r4, #0]
 80070ee:	b90e      	cbnz	r6, 80070f4 <_printf_i+0x118>
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	d04d      	beq.n	8007190 <_printf_i+0x1b4>
 80070f4:	4615      	mov	r5, r2
 80070f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80070fa:	fb03 6711 	mls	r7, r3, r1, r6
 80070fe:	5dc7      	ldrb	r7, [r0, r7]
 8007100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007104:	4637      	mov	r7, r6
 8007106:	42bb      	cmp	r3, r7
 8007108:	460e      	mov	r6, r1
 800710a:	d9f4      	bls.n	80070f6 <_printf_i+0x11a>
 800710c:	2b08      	cmp	r3, #8
 800710e:	d10b      	bne.n	8007128 <_printf_i+0x14c>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	07de      	lsls	r6, r3, #31
 8007114:	d508      	bpl.n	8007128 <_printf_i+0x14c>
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	6861      	ldr	r1, [r4, #4]
 800711a:	4299      	cmp	r1, r3
 800711c:	bfde      	ittt	le
 800711e:	2330      	movle	r3, #48	; 0x30
 8007120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007128:	1b52      	subs	r2, r2, r5
 800712a:	6122      	str	r2, [r4, #16]
 800712c:	f8cd a000 	str.w	sl, [sp]
 8007130:	464b      	mov	r3, r9
 8007132:	aa03      	add	r2, sp, #12
 8007134:	4621      	mov	r1, r4
 8007136:	4640      	mov	r0, r8
 8007138:	f7ff fee2 	bl	8006f00 <_printf_common>
 800713c:	3001      	adds	r0, #1
 800713e:	d14c      	bne.n	80071da <_printf_i+0x1fe>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	b004      	add	sp, #16
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	4835      	ldr	r0, [pc, #212]	; (8007220 <_printf_i+0x244>)
 800714c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007150:	6829      	ldr	r1, [r5, #0]
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	f851 6b04 	ldr.w	r6, [r1], #4
 8007158:	6029      	str	r1, [r5, #0]
 800715a:	061d      	lsls	r5, r3, #24
 800715c:	d514      	bpl.n	8007188 <_printf_i+0x1ac>
 800715e:	07df      	lsls	r7, r3, #31
 8007160:	bf44      	itt	mi
 8007162:	f043 0320 	orrmi.w	r3, r3, #32
 8007166:	6023      	strmi	r3, [r4, #0]
 8007168:	b91e      	cbnz	r6, 8007172 <_printf_i+0x196>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	f023 0320 	bic.w	r3, r3, #32
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	2310      	movs	r3, #16
 8007174:	e7b0      	b.n	80070d8 <_printf_i+0xfc>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	f043 0320 	orr.w	r3, r3, #32
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	2378      	movs	r3, #120	; 0x78
 8007180:	4828      	ldr	r0, [pc, #160]	; (8007224 <_printf_i+0x248>)
 8007182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007186:	e7e3      	b.n	8007150 <_printf_i+0x174>
 8007188:	0659      	lsls	r1, r3, #25
 800718a:	bf48      	it	mi
 800718c:	b2b6      	uxthmi	r6, r6
 800718e:	e7e6      	b.n	800715e <_printf_i+0x182>
 8007190:	4615      	mov	r5, r2
 8007192:	e7bb      	b.n	800710c <_printf_i+0x130>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	6826      	ldr	r6, [r4, #0]
 8007198:	6961      	ldr	r1, [r4, #20]
 800719a:	1d18      	adds	r0, r3, #4
 800719c:	6028      	str	r0, [r5, #0]
 800719e:	0635      	lsls	r5, r6, #24
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0x1cc>
 80071a4:	6019      	str	r1, [r3, #0]
 80071a6:	e002      	b.n	80071ae <_printf_i+0x1d2>
 80071a8:	0670      	lsls	r0, r6, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0x1c8>
 80071ac:	8019      	strh	r1, [r3, #0]
 80071ae:	2300      	movs	r3, #0
 80071b0:	6123      	str	r3, [r4, #16]
 80071b2:	4615      	mov	r5, r2
 80071b4:	e7ba      	b.n	800712c <_printf_i+0x150>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	1d1a      	adds	r2, r3, #4
 80071ba:	602a      	str	r2, [r5, #0]
 80071bc:	681d      	ldr	r5, [r3, #0]
 80071be:	6862      	ldr	r2, [r4, #4]
 80071c0:	2100      	movs	r1, #0
 80071c2:	4628      	mov	r0, r5
 80071c4:	f7f9 f814 	bl	80001f0 <memchr>
 80071c8:	b108      	cbz	r0, 80071ce <_printf_i+0x1f2>
 80071ca:	1b40      	subs	r0, r0, r5
 80071cc:	6060      	str	r0, [r4, #4]
 80071ce:	6863      	ldr	r3, [r4, #4]
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	2300      	movs	r3, #0
 80071d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d8:	e7a8      	b.n	800712c <_printf_i+0x150>
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	462a      	mov	r2, r5
 80071de:	4649      	mov	r1, r9
 80071e0:	4640      	mov	r0, r8
 80071e2:	47d0      	blx	sl
 80071e4:	3001      	adds	r0, #1
 80071e6:	d0ab      	beq.n	8007140 <_printf_i+0x164>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	079b      	lsls	r3, r3, #30
 80071ec:	d413      	bmi.n	8007216 <_printf_i+0x23a>
 80071ee:	68e0      	ldr	r0, [r4, #12]
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	4298      	cmp	r0, r3
 80071f4:	bfb8      	it	lt
 80071f6:	4618      	movlt	r0, r3
 80071f8:	e7a4      	b.n	8007144 <_printf_i+0x168>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4632      	mov	r2, r6
 80071fe:	4649      	mov	r1, r9
 8007200:	4640      	mov	r0, r8
 8007202:	47d0      	blx	sl
 8007204:	3001      	adds	r0, #1
 8007206:	d09b      	beq.n	8007140 <_printf_i+0x164>
 8007208:	3501      	adds	r5, #1
 800720a:	68e3      	ldr	r3, [r4, #12]
 800720c:	9903      	ldr	r1, [sp, #12]
 800720e:	1a5b      	subs	r3, r3, r1
 8007210:	42ab      	cmp	r3, r5
 8007212:	dcf2      	bgt.n	80071fa <_printf_i+0x21e>
 8007214:	e7eb      	b.n	80071ee <_printf_i+0x212>
 8007216:	2500      	movs	r5, #0
 8007218:	f104 0619 	add.w	r6, r4, #25
 800721c:	e7f5      	b.n	800720a <_printf_i+0x22e>
 800721e:	bf00      	nop
 8007220:	0800b666 	.word	0x0800b666
 8007224:	0800b677 	.word	0x0800b677

08007228 <siprintf>:
 8007228:	b40e      	push	{r1, r2, r3}
 800722a:	b500      	push	{lr}
 800722c:	b09c      	sub	sp, #112	; 0x70
 800722e:	ab1d      	add	r3, sp, #116	; 0x74
 8007230:	9002      	str	r0, [sp, #8]
 8007232:	9006      	str	r0, [sp, #24]
 8007234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007238:	4809      	ldr	r0, [pc, #36]	; (8007260 <siprintf+0x38>)
 800723a:	9107      	str	r1, [sp, #28]
 800723c:	9104      	str	r1, [sp, #16]
 800723e:	4909      	ldr	r1, [pc, #36]	; (8007264 <siprintf+0x3c>)
 8007240:	f853 2b04 	ldr.w	r2, [r3], #4
 8007244:	9105      	str	r1, [sp, #20]
 8007246:	6800      	ldr	r0, [r0, #0]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	a902      	add	r1, sp, #8
 800724c:	f002 ff04 	bl	800a058 <_svfiprintf_r>
 8007250:	9b02      	ldr	r3, [sp, #8]
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	b01c      	add	sp, #112	; 0x70
 8007258:	f85d eb04 	ldr.w	lr, [sp], #4
 800725c:	b003      	add	sp, #12
 800725e:	4770      	bx	lr
 8007260:	2000000c 	.word	0x2000000c
 8007264:	ffff0208 	.word	0xffff0208

08007268 <strchr>:
 8007268:	b2c9      	uxtb	r1, r1
 800726a:	4603      	mov	r3, r0
 800726c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007270:	b11a      	cbz	r2, 800727a <strchr+0x12>
 8007272:	428a      	cmp	r2, r1
 8007274:	d1f9      	bne.n	800726a <strchr+0x2>
 8007276:	4618      	mov	r0, r3
 8007278:	4770      	bx	lr
 800727a:	2900      	cmp	r1, #0
 800727c:	bf18      	it	ne
 800727e:	2300      	movne	r3, #0
 8007280:	e7f9      	b.n	8007276 <strchr+0xe>

08007282 <strncpy>:
 8007282:	b510      	push	{r4, lr}
 8007284:	3901      	subs	r1, #1
 8007286:	4603      	mov	r3, r0
 8007288:	b132      	cbz	r2, 8007298 <strncpy+0x16>
 800728a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800728e:	f803 4b01 	strb.w	r4, [r3], #1
 8007292:	3a01      	subs	r2, #1
 8007294:	2c00      	cmp	r4, #0
 8007296:	d1f7      	bne.n	8007288 <strncpy+0x6>
 8007298:	441a      	add	r2, r3
 800729a:	2100      	movs	r1, #0
 800729c:	4293      	cmp	r3, r2
 800729e:	d100      	bne.n	80072a2 <strncpy+0x20>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	f803 1b01 	strb.w	r1, [r3], #1
 80072a6:	e7f9      	b.n	800729c <strncpy+0x1a>

080072a8 <sulp>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	4604      	mov	r4, r0
 80072ac:	460d      	mov	r5, r1
 80072ae:	ec45 4b10 	vmov	d0, r4, r5
 80072b2:	4616      	mov	r6, r2
 80072b4:	f002 fc2e 	bl	8009b14 <__ulp>
 80072b8:	ec51 0b10 	vmov	r0, r1, d0
 80072bc:	b17e      	cbz	r6, 80072de <sulp+0x36>
 80072be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80072c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	dd09      	ble.n	80072de <sulp+0x36>
 80072ca:	051b      	lsls	r3, r3, #20
 80072cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072d0:	2400      	movs	r4, #0
 80072d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80072d6:	4622      	mov	r2, r4
 80072d8:	462b      	mov	r3, r5
 80072da:	f7f9 f995 	bl	8000608 <__aeabi_dmul>
 80072de:	bd70      	pop	{r4, r5, r6, pc}

080072e0 <_strtod_l>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	ed2d 8b02 	vpush	{d8}
 80072e8:	b09d      	sub	sp, #116	; 0x74
 80072ea:	461f      	mov	r7, r3
 80072ec:	2300      	movs	r3, #0
 80072ee:	9318      	str	r3, [sp, #96]	; 0x60
 80072f0:	4ba2      	ldr	r3, [pc, #648]	; (800757c <_strtod_l+0x29c>)
 80072f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	9305      	str	r3, [sp, #20]
 80072f8:	4604      	mov	r4, r0
 80072fa:	4618      	mov	r0, r3
 80072fc:	4688      	mov	r8, r1
 80072fe:	f7f8 ff6f 	bl	80001e0 <strlen>
 8007302:	f04f 0a00 	mov.w	sl, #0
 8007306:	4605      	mov	r5, r0
 8007308:	f04f 0b00 	mov.w	fp, #0
 800730c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007312:	781a      	ldrb	r2, [r3, #0]
 8007314:	2a2b      	cmp	r2, #43	; 0x2b
 8007316:	d04e      	beq.n	80073b6 <_strtod_l+0xd6>
 8007318:	d83b      	bhi.n	8007392 <_strtod_l+0xb2>
 800731a:	2a0d      	cmp	r2, #13
 800731c:	d834      	bhi.n	8007388 <_strtod_l+0xa8>
 800731e:	2a08      	cmp	r2, #8
 8007320:	d834      	bhi.n	800738c <_strtod_l+0xac>
 8007322:	2a00      	cmp	r2, #0
 8007324:	d03e      	beq.n	80073a4 <_strtod_l+0xc4>
 8007326:	2300      	movs	r3, #0
 8007328:	930a      	str	r3, [sp, #40]	; 0x28
 800732a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800732c:	7833      	ldrb	r3, [r6, #0]
 800732e:	2b30      	cmp	r3, #48	; 0x30
 8007330:	f040 80b0 	bne.w	8007494 <_strtod_l+0x1b4>
 8007334:	7873      	ldrb	r3, [r6, #1]
 8007336:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800733a:	2b58      	cmp	r3, #88	; 0x58
 800733c:	d168      	bne.n	8007410 <_strtod_l+0x130>
 800733e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	ab18      	add	r3, sp, #96	; 0x60
 8007344:	9702      	str	r7, [sp, #8]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	4a8d      	ldr	r2, [pc, #564]	; (8007580 <_strtod_l+0x2a0>)
 800734a:	ab19      	add	r3, sp, #100	; 0x64
 800734c:	a917      	add	r1, sp, #92	; 0x5c
 800734e:	4620      	mov	r0, r4
 8007350:	f001 fd48 	bl	8008de4 <__gethex>
 8007354:	f010 0707 	ands.w	r7, r0, #7
 8007358:	4605      	mov	r5, r0
 800735a:	d005      	beq.n	8007368 <_strtod_l+0x88>
 800735c:	2f06      	cmp	r7, #6
 800735e:	d12c      	bne.n	80073ba <_strtod_l+0xda>
 8007360:	3601      	adds	r6, #1
 8007362:	2300      	movs	r3, #0
 8007364:	9617      	str	r6, [sp, #92]	; 0x5c
 8007366:	930a      	str	r3, [sp, #40]	; 0x28
 8007368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 8590 	bne.w	8007e90 <_strtod_l+0xbb0>
 8007370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007372:	b1eb      	cbz	r3, 80073b0 <_strtod_l+0xd0>
 8007374:	4652      	mov	r2, sl
 8007376:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800737a:	ec43 2b10 	vmov	d0, r2, r3
 800737e:	b01d      	add	sp, #116	; 0x74
 8007380:	ecbd 8b02 	vpop	{d8}
 8007384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007388:	2a20      	cmp	r2, #32
 800738a:	d1cc      	bne.n	8007326 <_strtod_l+0x46>
 800738c:	3301      	adds	r3, #1
 800738e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007390:	e7be      	b.n	8007310 <_strtod_l+0x30>
 8007392:	2a2d      	cmp	r2, #45	; 0x2d
 8007394:	d1c7      	bne.n	8007326 <_strtod_l+0x46>
 8007396:	2201      	movs	r2, #1
 8007398:	920a      	str	r2, [sp, #40]	; 0x28
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	9217      	str	r2, [sp, #92]	; 0x5c
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1c2      	bne.n	800732a <_strtod_l+0x4a>
 80073a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 856e 	bne.w	8007e8c <_strtod_l+0xbac>
 80073b0:	4652      	mov	r2, sl
 80073b2:	465b      	mov	r3, fp
 80073b4:	e7e1      	b.n	800737a <_strtod_l+0x9a>
 80073b6:	2200      	movs	r2, #0
 80073b8:	e7ee      	b.n	8007398 <_strtod_l+0xb8>
 80073ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80073bc:	b13a      	cbz	r2, 80073ce <_strtod_l+0xee>
 80073be:	2135      	movs	r1, #53	; 0x35
 80073c0:	a81a      	add	r0, sp, #104	; 0x68
 80073c2:	f002 fcb2 	bl	8009d2a <__copybits>
 80073c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073c8:	4620      	mov	r0, r4
 80073ca:	f002 f871 	bl	80094b0 <_Bfree>
 80073ce:	3f01      	subs	r7, #1
 80073d0:	2f04      	cmp	r7, #4
 80073d2:	d806      	bhi.n	80073e2 <_strtod_l+0x102>
 80073d4:	e8df f007 	tbb	[pc, r7]
 80073d8:	1714030a 	.word	0x1714030a
 80073dc:	0a          	.byte	0x0a
 80073dd:	00          	.byte	0x00
 80073de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80073e2:	0728      	lsls	r0, r5, #28
 80073e4:	d5c0      	bpl.n	8007368 <_strtod_l+0x88>
 80073e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80073ea:	e7bd      	b.n	8007368 <_strtod_l+0x88>
 80073ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80073f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80073fe:	e7f0      	b.n	80073e2 <_strtod_l+0x102>
 8007400:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007584 <_strtod_l+0x2a4>
 8007404:	e7ed      	b.n	80073e2 <_strtod_l+0x102>
 8007406:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800740a:	f04f 3aff 	mov.w	sl, #4294967295
 800740e:	e7e8      	b.n	80073e2 <_strtod_l+0x102>
 8007410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	9217      	str	r2, [sp, #92]	; 0x5c
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	2b30      	cmp	r3, #48	; 0x30
 800741a:	d0f9      	beq.n	8007410 <_strtod_l+0x130>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0a3      	beq.n	8007368 <_strtod_l+0x88>
 8007420:	2301      	movs	r3, #1
 8007422:	f04f 0900 	mov.w	r9, #0
 8007426:	9304      	str	r3, [sp, #16]
 8007428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800742a:	9308      	str	r3, [sp, #32]
 800742c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007430:	464f      	mov	r7, r9
 8007432:	220a      	movs	r2, #10
 8007434:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007436:	7806      	ldrb	r6, [r0, #0]
 8007438:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800743c:	b2d9      	uxtb	r1, r3
 800743e:	2909      	cmp	r1, #9
 8007440:	d92a      	bls.n	8007498 <_strtod_l+0x1b8>
 8007442:	9905      	ldr	r1, [sp, #20]
 8007444:	462a      	mov	r2, r5
 8007446:	f002 ff1f 	bl	800a288 <strncmp>
 800744a:	b398      	cbz	r0, 80074b4 <_strtod_l+0x1d4>
 800744c:	2000      	movs	r0, #0
 800744e:	4632      	mov	r2, r6
 8007450:	463d      	mov	r5, r7
 8007452:	9005      	str	r0, [sp, #20]
 8007454:	4603      	mov	r3, r0
 8007456:	2a65      	cmp	r2, #101	; 0x65
 8007458:	d001      	beq.n	800745e <_strtod_l+0x17e>
 800745a:	2a45      	cmp	r2, #69	; 0x45
 800745c:	d118      	bne.n	8007490 <_strtod_l+0x1b0>
 800745e:	b91d      	cbnz	r5, 8007468 <_strtod_l+0x188>
 8007460:	9a04      	ldr	r2, [sp, #16]
 8007462:	4302      	orrs	r2, r0
 8007464:	d09e      	beq.n	80073a4 <_strtod_l+0xc4>
 8007466:	2500      	movs	r5, #0
 8007468:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800746c:	f108 0201 	add.w	r2, r8, #1
 8007470:	9217      	str	r2, [sp, #92]	; 0x5c
 8007472:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007476:	2a2b      	cmp	r2, #43	; 0x2b
 8007478:	d075      	beq.n	8007566 <_strtod_l+0x286>
 800747a:	2a2d      	cmp	r2, #45	; 0x2d
 800747c:	d07b      	beq.n	8007576 <_strtod_l+0x296>
 800747e:	f04f 0c00 	mov.w	ip, #0
 8007482:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007486:	2909      	cmp	r1, #9
 8007488:	f240 8082 	bls.w	8007590 <_strtod_l+0x2b0>
 800748c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007490:	2600      	movs	r6, #0
 8007492:	e09d      	b.n	80075d0 <_strtod_l+0x2f0>
 8007494:	2300      	movs	r3, #0
 8007496:	e7c4      	b.n	8007422 <_strtod_l+0x142>
 8007498:	2f08      	cmp	r7, #8
 800749a:	bfd8      	it	le
 800749c:	9907      	ldrle	r1, [sp, #28]
 800749e:	f100 0001 	add.w	r0, r0, #1
 80074a2:	bfda      	itte	le
 80074a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80074a8:	9307      	strle	r3, [sp, #28]
 80074aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80074ae:	3701      	adds	r7, #1
 80074b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80074b2:	e7bf      	b.n	8007434 <_strtod_l+0x154>
 80074b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b6:	195a      	adds	r2, r3, r5
 80074b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80074ba:	5d5a      	ldrb	r2, [r3, r5]
 80074bc:	2f00      	cmp	r7, #0
 80074be:	d037      	beq.n	8007530 <_strtod_l+0x250>
 80074c0:	9005      	str	r0, [sp, #20]
 80074c2:	463d      	mov	r5, r7
 80074c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80074c8:	2b09      	cmp	r3, #9
 80074ca:	d912      	bls.n	80074f2 <_strtod_l+0x212>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e7c2      	b.n	8007456 <_strtod_l+0x176>
 80074d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80074d6:	785a      	ldrb	r2, [r3, #1]
 80074d8:	3001      	adds	r0, #1
 80074da:	2a30      	cmp	r2, #48	; 0x30
 80074dc:	d0f8      	beq.n	80074d0 <_strtod_l+0x1f0>
 80074de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074e2:	2b08      	cmp	r3, #8
 80074e4:	f200 84d9 	bhi.w	8007e9a <_strtod_l+0xbba>
 80074e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074ea:	9005      	str	r0, [sp, #20]
 80074ec:	2000      	movs	r0, #0
 80074ee:	9308      	str	r3, [sp, #32]
 80074f0:	4605      	mov	r5, r0
 80074f2:	3a30      	subs	r2, #48	; 0x30
 80074f4:	f100 0301 	add.w	r3, r0, #1
 80074f8:	d014      	beq.n	8007524 <_strtod_l+0x244>
 80074fa:	9905      	ldr	r1, [sp, #20]
 80074fc:	4419      	add	r1, r3
 80074fe:	9105      	str	r1, [sp, #20]
 8007500:	462b      	mov	r3, r5
 8007502:	eb00 0e05 	add.w	lr, r0, r5
 8007506:	210a      	movs	r1, #10
 8007508:	4573      	cmp	r3, lr
 800750a:	d113      	bne.n	8007534 <_strtod_l+0x254>
 800750c:	182b      	adds	r3, r5, r0
 800750e:	2b08      	cmp	r3, #8
 8007510:	f105 0501 	add.w	r5, r5, #1
 8007514:	4405      	add	r5, r0
 8007516:	dc1c      	bgt.n	8007552 <_strtod_l+0x272>
 8007518:	9907      	ldr	r1, [sp, #28]
 800751a:	230a      	movs	r3, #10
 800751c:	fb03 2301 	mla	r3, r3, r1, r2
 8007520:	9307      	str	r3, [sp, #28]
 8007522:	2300      	movs	r3, #0
 8007524:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007526:	1c51      	adds	r1, r2, #1
 8007528:	9117      	str	r1, [sp, #92]	; 0x5c
 800752a:	7852      	ldrb	r2, [r2, #1]
 800752c:	4618      	mov	r0, r3
 800752e:	e7c9      	b.n	80074c4 <_strtod_l+0x1e4>
 8007530:	4638      	mov	r0, r7
 8007532:	e7d2      	b.n	80074da <_strtod_l+0x1fa>
 8007534:	2b08      	cmp	r3, #8
 8007536:	dc04      	bgt.n	8007542 <_strtod_l+0x262>
 8007538:	9e07      	ldr	r6, [sp, #28]
 800753a:	434e      	muls	r6, r1
 800753c:	9607      	str	r6, [sp, #28]
 800753e:	3301      	adds	r3, #1
 8007540:	e7e2      	b.n	8007508 <_strtod_l+0x228>
 8007542:	f103 0c01 	add.w	ip, r3, #1
 8007546:	f1bc 0f10 	cmp.w	ip, #16
 800754a:	bfd8      	it	le
 800754c:	fb01 f909 	mulle.w	r9, r1, r9
 8007550:	e7f5      	b.n	800753e <_strtod_l+0x25e>
 8007552:	2d10      	cmp	r5, #16
 8007554:	bfdc      	itt	le
 8007556:	230a      	movle	r3, #10
 8007558:	fb03 2909 	mlale	r9, r3, r9, r2
 800755c:	e7e1      	b.n	8007522 <_strtod_l+0x242>
 800755e:	2300      	movs	r3, #0
 8007560:	9305      	str	r3, [sp, #20]
 8007562:	2301      	movs	r3, #1
 8007564:	e77c      	b.n	8007460 <_strtod_l+0x180>
 8007566:	f04f 0c00 	mov.w	ip, #0
 800756a:	f108 0202 	add.w	r2, r8, #2
 800756e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007570:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007574:	e785      	b.n	8007482 <_strtod_l+0x1a2>
 8007576:	f04f 0c01 	mov.w	ip, #1
 800757a:	e7f6      	b.n	800756a <_strtod_l+0x28a>
 800757c:	0800b8d0 	.word	0x0800b8d0
 8007580:	0800b688 	.word	0x0800b688
 8007584:	7ff00000 	.word	0x7ff00000
 8007588:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800758a:	1c51      	adds	r1, r2, #1
 800758c:	9117      	str	r1, [sp, #92]	; 0x5c
 800758e:	7852      	ldrb	r2, [r2, #1]
 8007590:	2a30      	cmp	r2, #48	; 0x30
 8007592:	d0f9      	beq.n	8007588 <_strtod_l+0x2a8>
 8007594:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007598:	2908      	cmp	r1, #8
 800759a:	f63f af79 	bhi.w	8007490 <_strtod_l+0x1b0>
 800759e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80075a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075a4:	9206      	str	r2, [sp, #24]
 80075a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075a8:	1c51      	adds	r1, r2, #1
 80075aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80075ac:	7852      	ldrb	r2, [r2, #1]
 80075ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80075b2:	2e09      	cmp	r6, #9
 80075b4:	d937      	bls.n	8007626 <_strtod_l+0x346>
 80075b6:	9e06      	ldr	r6, [sp, #24]
 80075b8:	1b89      	subs	r1, r1, r6
 80075ba:	2908      	cmp	r1, #8
 80075bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80075c0:	dc02      	bgt.n	80075c8 <_strtod_l+0x2e8>
 80075c2:	4576      	cmp	r6, lr
 80075c4:	bfa8      	it	ge
 80075c6:	4676      	movge	r6, lr
 80075c8:	f1bc 0f00 	cmp.w	ip, #0
 80075cc:	d000      	beq.n	80075d0 <_strtod_l+0x2f0>
 80075ce:	4276      	negs	r6, r6
 80075d0:	2d00      	cmp	r5, #0
 80075d2:	d14d      	bne.n	8007670 <_strtod_l+0x390>
 80075d4:	9904      	ldr	r1, [sp, #16]
 80075d6:	4301      	orrs	r1, r0
 80075d8:	f47f aec6 	bne.w	8007368 <_strtod_l+0x88>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f47f aee1 	bne.w	80073a4 <_strtod_l+0xc4>
 80075e2:	2a69      	cmp	r2, #105	; 0x69
 80075e4:	d027      	beq.n	8007636 <_strtod_l+0x356>
 80075e6:	dc24      	bgt.n	8007632 <_strtod_l+0x352>
 80075e8:	2a49      	cmp	r2, #73	; 0x49
 80075ea:	d024      	beq.n	8007636 <_strtod_l+0x356>
 80075ec:	2a4e      	cmp	r2, #78	; 0x4e
 80075ee:	f47f aed9 	bne.w	80073a4 <_strtod_l+0xc4>
 80075f2:	499f      	ldr	r1, [pc, #636]	; (8007870 <_strtod_l+0x590>)
 80075f4:	a817      	add	r0, sp, #92	; 0x5c
 80075f6:	f001 fe4d 	bl	8009294 <__match>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f43f aed2 	beq.w	80073a4 <_strtod_l+0xc4>
 8007600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b28      	cmp	r3, #40	; 0x28
 8007606:	d12d      	bne.n	8007664 <_strtod_l+0x384>
 8007608:	499a      	ldr	r1, [pc, #616]	; (8007874 <_strtod_l+0x594>)
 800760a:	aa1a      	add	r2, sp, #104	; 0x68
 800760c:	a817      	add	r0, sp, #92	; 0x5c
 800760e:	f001 fe55 	bl	80092bc <__hexnan>
 8007612:	2805      	cmp	r0, #5
 8007614:	d126      	bne.n	8007664 <_strtod_l+0x384>
 8007616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007618:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800761c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007620:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007624:	e6a0      	b.n	8007368 <_strtod_l+0x88>
 8007626:	210a      	movs	r1, #10
 8007628:	fb01 2e0e 	mla	lr, r1, lr, r2
 800762c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007630:	e7b9      	b.n	80075a6 <_strtod_l+0x2c6>
 8007632:	2a6e      	cmp	r2, #110	; 0x6e
 8007634:	e7db      	b.n	80075ee <_strtod_l+0x30e>
 8007636:	4990      	ldr	r1, [pc, #576]	; (8007878 <_strtod_l+0x598>)
 8007638:	a817      	add	r0, sp, #92	; 0x5c
 800763a:	f001 fe2b 	bl	8009294 <__match>
 800763e:	2800      	cmp	r0, #0
 8007640:	f43f aeb0 	beq.w	80073a4 <_strtod_l+0xc4>
 8007644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007646:	498d      	ldr	r1, [pc, #564]	; (800787c <_strtod_l+0x59c>)
 8007648:	3b01      	subs	r3, #1
 800764a:	a817      	add	r0, sp, #92	; 0x5c
 800764c:	9317      	str	r3, [sp, #92]	; 0x5c
 800764e:	f001 fe21 	bl	8009294 <__match>
 8007652:	b910      	cbnz	r0, 800765a <_strtod_l+0x37a>
 8007654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007656:	3301      	adds	r3, #1
 8007658:	9317      	str	r3, [sp, #92]	; 0x5c
 800765a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800788c <_strtod_l+0x5ac>
 800765e:	f04f 0a00 	mov.w	sl, #0
 8007662:	e681      	b.n	8007368 <_strtod_l+0x88>
 8007664:	4886      	ldr	r0, [pc, #536]	; (8007880 <_strtod_l+0x5a0>)
 8007666:	f002 fdf7 	bl	800a258 <nan>
 800766a:	ec5b ab10 	vmov	sl, fp, d0
 800766e:	e67b      	b.n	8007368 <_strtod_l+0x88>
 8007670:	9b05      	ldr	r3, [sp, #20]
 8007672:	9807      	ldr	r0, [sp, #28]
 8007674:	1af3      	subs	r3, r6, r3
 8007676:	2f00      	cmp	r7, #0
 8007678:	bf08      	it	eq
 800767a:	462f      	moveq	r7, r5
 800767c:	2d10      	cmp	r5, #16
 800767e:	9306      	str	r3, [sp, #24]
 8007680:	46a8      	mov	r8, r5
 8007682:	bfa8      	it	ge
 8007684:	f04f 0810 	movge.w	r8, #16
 8007688:	f7f8 ff44 	bl	8000514 <__aeabi_ui2d>
 800768c:	2d09      	cmp	r5, #9
 800768e:	4682      	mov	sl, r0
 8007690:	468b      	mov	fp, r1
 8007692:	dd13      	ble.n	80076bc <_strtod_l+0x3dc>
 8007694:	4b7b      	ldr	r3, [pc, #492]	; (8007884 <_strtod_l+0x5a4>)
 8007696:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800769a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	4682      	mov	sl, r0
 80076a4:	4648      	mov	r0, r9
 80076a6:	468b      	mov	fp, r1
 80076a8:	f7f8 ff34 	bl	8000514 <__aeabi_ui2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4650      	mov	r0, sl
 80076b2:	4659      	mov	r1, fp
 80076b4:	f7f8 fdf2 	bl	800029c <__adddf3>
 80076b8:	4682      	mov	sl, r0
 80076ba:	468b      	mov	fp, r1
 80076bc:	2d0f      	cmp	r5, #15
 80076be:	dc38      	bgt.n	8007732 <_strtod_l+0x452>
 80076c0:	9b06      	ldr	r3, [sp, #24]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f43f ae50 	beq.w	8007368 <_strtod_l+0x88>
 80076c8:	dd24      	ble.n	8007714 <_strtod_l+0x434>
 80076ca:	2b16      	cmp	r3, #22
 80076cc:	dc0b      	bgt.n	80076e6 <_strtod_l+0x406>
 80076ce:	496d      	ldr	r1, [pc, #436]	; (8007884 <_strtod_l+0x5a4>)
 80076d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d8:	4652      	mov	r2, sl
 80076da:	465b      	mov	r3, fp
 80076dc:	f7f8 ff94 	bl	8000608 <__aeabi_dmul>
 80076e0:	4682      	mov	sl, r0
 80076e2:	468b      	mov	fp, r1
 80076e4:	e640      	b.n	8007368 <_strtod_l+0x88>
 80076e6:	9a06      	ldr	r2, [sp, #24]
 80076e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80076ec:	4293      	cmp	r3, r2
 80076ee:	db20      	blt.n	8007732 <_strtod_l+0x452>
 80076f0:	4c64      	ldr	r4, [pc, #400]	; (8007884 <_strtod_l+0x5a4>)
 80076f2:	f1c5 050f 	rsb	r5, r5, #15
 80076f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80076fa:	4652      	mov	r2, sl
 80076fc:	465b      	mov	r3, fp
 80076fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007702:	f7f8 ff81 	bl	8000608 <__aeabi_dmul>
 8007706:	9b06      	ldr	r3, [sp, #24]
 8007708:	1b5d      	subs	r5, r3, r5
 800770a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800770e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007712:	e7e3      	b.n	80076dc <_strtod_l+0x3fc>
 8007714:	9b06      	ldr	r3, [sp, #24]
 8007716:	3316      	adds	r3, #22
 8007718:	db0b      	blt.n	8007732 <_strtod_l+0x452>
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	1b9e      	subs	r6, r3, r6
 800771e:	4b59      	ldr	r3, [pc, #356]	; (8007884 <_strtod_l+0x5a4>)
 8007720:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	f7f9 f896 	bl	800085c <__aeabi_ddiv>
 8007730:	e7d6      	b.n	80076e0 <_strtod_l+0x400>
 8007732:	9b06      	ldr	r3, [sp, #24]
 8007734:	eba5 0808 	sub.w	r8, r5, r8
 8007738:	4498      	add	r8, r3
 800773a:	f1b8 0f00 	cmp.w	r8, #0
 800773e:	dd74      	ble.n	800782a <_strtod_l+0x54a>
 8007740:	f018 030f 	ands.w	r3, r8, #15
 8007744:	d00a      	beq.n	800775c <_strtod_l+0x47c>
 8007746:	494f      	ldr	r1, [pc, #316]	; (8007884 <_strtod_l+0x5a4>)
 8007748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800774c:	4652      	mov	r2, sl
 800774e:	465b      	mov	r3, fp
 8007750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007754:	f7f8 ff58 	bl	8000608 <__aeabi_dmul>
 8007758:	4682      	mov	sl, r0
 800775a:	468b      	mov	fp, r1
 800775c:	f038 080f 	bics.w	r8, r8, #15
 8007760:	d04f      	beq.n	8007802 <_strtod_l+0x522>
 8007762:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007766:	dd22      	ble.n	80077ae <_strtod_l+0x4ce>
 8007768:	2500      	movs	r5, #0
 800776a:	462e      	mov	r6, r5
 800776c:	9507      	str	r5, [sp, #28]
 800776e:	9505      	str	r5, [sp, #20]
 8007770:	2322      	movs	r3, #34	; 0x22
 8007772:	f8df b118 	ldr.w	fp, [pc, #280]	; 800788c <_strtod_l+0x5ac>
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	f04f 0a00 	mov.w	sl, #0
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f43f adf2 	beq.w	8007368 <_strtod_l+0x88>
 8007784:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007786:	4620      	mov	r0, r4
 8007788:	f001 fe92 	bl	80094b0 <_Bfree>
 800778c:	9905      	ldr	r1, [sp, #20]
 800778e:	4620      	mov	r0, r4
 8007790:	f001 fe8e 	bl	80094b0 <_Bfree>
 8007794:	4631      	mov	r1, r6
 8007796:	4620      	mov	r0, r4
 8007798:	f001 fe8a 	bl	80094b0 <_Bfree>
 800779c:	9907      	ldr	r1, [sp, #28]
 800779e:	4620      	mov	r0, r4
 80077a0:	f001 fe86 	bl	80094b0 <_Bfree>
 80077a4:	4629      	mov	r1, r5
 80077a6:	4620      	mov	r0, r4
 80077a8:	f001 fe82 	bl	80094b0 <_Bfree>
 80077ac:	e5dc      	b.n	8007368 <_strtod_l+0x88>
 80077ae:	4b36      	ldr	r3, [pc, #216]	; (8007888 <_strtod_l+0x5a8>)
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	2300      	movs	r3, #0
 80077b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	4699      	mov	r9, r3
 80077be:	f1b8 0f01 	cmp.w	r8, #1
 80077c2:	dc21      	bgt.n	8007808 <_strtod_l+0x528>
 80077c4:	b10b      	cbz	r3, 80077ca <_strtod_l+0x4ea>
 80077c6:	4682      	mov	sl, r0
 80077c8:	468b      	mov	fp, r1
 80077ca:	4b2f      	ldr	r3, [pc, #188]	; (8007888 <_strtod_l+0x5a8>)
 80077cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80077d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80077d4:	4652      	mov	r2, sl
 80077d6:	465b      	mov	r3, fp
 80077d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80077dc:	f7f8 ff14 	bl	8000608 <__aeabi_dmul>
 80077e0:	4b2a      	ldr	r3, [pc, #168]	; (800788c <_strtod_l+0x5ac>)
 80077e2:	460a      	mov	r2, r1
 80077e4:	400b      	ands	r3, r1
 80077e6:	492a      	ldr	r1, [pc, #168]	; (8007890 <_strtod_l+0x5b0>)
 80077e8:	428b      	cmp	r3, r1
 80077ea:	4682      	mov	sl, r0
 80077ec:	d8bc      	bhi.n	8007768 <_strtod_l+0x488>
 80077ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077f2:	428b      	cmp	r3, r1
 80077f4:	bf86      	itte	hi
 80077f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007894 <_strtod_l+0x5b4>
 80077fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80077fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007802:	2300      	movs	r3, #0
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	e084      	b.n	8007912 <_strtod_l+0x632>
 8007808:	f018 0f01 	tst.w	r8, #1
 800780c:	d005      	beq.n	800781a <_strtod_l+0x53a>
 800780e:	9b04      	ldr	r3, [sp, #16]
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f8 fef8 	bl	8000608 <__aeabi_dmul>
 8007818:	2301      	movs	r3, #1
 800781a:	9a04      	ldr	r2, [sp, #16]
 800781c:	3208      	adds	r2, #8
 800781e:	f109 0901 	add.w	r9, r9, #1
 8007822:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007826:	9204      	str	r2, [sp, #16]
 8007828:	e7c9      	b.n	80077be <_strtod_l+0x4de>
 800782a:	d0ea      	beq.n	8007802 <_strtod_l+0x522>
 800782c:	f1c8 0800 	rsb	r8, r8, #0
 8007830:	f018 020f 	ands.w	r2, r8, #15
 8007834:	d00a      	beq.n	800784c <_strtod_l+0x56c>
 8007836:	4b13      	ldr	r3, [pc, #76]	; (8007884 <_strtod_l+0x5a4>)
 8007838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800783c:	4650      	mov	r0, sl
 800783e:	4659      	mov	r1, fp
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	f7f9 f80a 	bl	800085c <__aeabi_ddiv>
 8007848:	4682      	mov	sl, r0
 800784a:	468b      	mov	fp, r1
 800784c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007850:	d0d7      	beq.n	8007802 <_strtod_l+0x522>
 8007852:	f1b8 0f1f 	cmp.w	r8, #31
 8007856:	dd1f      	ble.n	8007898 <_strtod_l+0x5b8>
 8007858:	2500      	movs	r5, #0
 800785a:	462e      	mov	r6, r5
 800785c:	9507      	str	r5, [sp, #28]
 800785e:	9505      	str	r5, [sp, #20]
 8007860:	2322      	movs	r3, #34	; 0x22
 8007862:	f04f 0a00 	mov.w	sl, #0
 8007866:	f04f 0b00 	mov.w	fp, #0
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	e786      	b.n	800777c <_strtod_l+0x49c>
 800786e:	bf00      	nop
 8007870:	0800b661 	.word	0x0800b661
 8007874:	0800b69c 	.word	0x0800b69c
 8007878:	0800b659 	.word	0x0800b659
 800787c:	0800b7dc 	.word	0x0800b7dc
 8007880:	0800ba88 	.word	0x0800ba88
 8007884:	0800b968 	.word	0x0800b968
 8007888:	0800b940 	.word	0x0800b940
 800788c:	7ff00000 	.word	0x7ff00000
 8007890:	7ca00000 	.word	0x7ca00000
 8007894:	7fefffff 	.word	0x7fefffff
 8007898:	f018 0310 	ands.w	r3, r8, #16
 800789c:	bf18      	it	ne
 800789e:	236a      	movne	r3, #106	; 0x6a
 80078a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007c50 <_strtod_l+0x970>
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	4650      	mov	r0, sl
 80078a8:	4659      	mov	r1, fp
 80078aa:	2300      	movs	r3, #0
 80078ac:	f018 0f01 	tst.w	r8, #1
 80078b0:	d004      	beq.n	80078bc <_strtod_l+0x5dc>
 80078b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80078b6:	f7f8 fea7 	bl	8000608 <__aeabi_dmul>
 80078ba:	2301      	movs	r3, #1
 80078bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80078c0:	f109 0908 	add.w	r9, r9, #8
 80078c4:	d1f2      	bne.n	80078ac <_strtod_l+0x5cc>
 80078c6:	b10b      	cbz	r3, 80078cc <_strtod_l+0x5ec>
 80078c8:	4682      	mov	sl, r0
 80078ca:	468b      	mov	fp, r1
 80078cc:	9b04      	ldr	r3, [sp, #16]
 80078ce:	b1c3      	cbz	r3, 8007902 <_strtod_l+0x622>
 80078d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80078d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80078d8:	2b00      	cmp	r3, #0
 80078da:	4659      	mov	r1, fp
 80078dc:	dd11      	ble.n	8007902 <_strtod_l+0x622>
 80078de:	2b1f      	cmp	r3, #31
 80078e0:	f340 8124 	ble.w	8007b2c <_strtod_l+0x84c>
 80078e4:	2b34      	cmp	r3, #52	; 0x34
 80078e6:	bfde      	ittt	le
 80078e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80078ec:	f04f 33ff 	movle.w	r3, #4294967295
 80078f0:	fa03 f202 	lslle.w	r2, r3, r2
 80078f4:	f04f 0a00 	mov.w	sl, #0
 80078f8:	bfcc      	ite	gt
 80078fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80078fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007902:	2200      	movs	r2, #0
 8007904:	2300      	movs	r3, #0
 8007906:	4650      	mov	r0, sl
 8007908:	4659      	mov	r1, fp
 800790a:	f7f9 f8e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800790e:	2800      	cmp	r0, #0
 8007910:	d1a2      	bne.n	8007858 <_strtod_l+0x578>
 8007912:	9b07      	ldr	r3, [sp, #28]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	9908      	ldr	r1, [sp, #32]
 8007918:	462b      	mov	r3, r5
 800791a:	463a      	mov	r2, r7
 800791c:	4620      	mov	r0, r4
 800791e:	f001 fe2f 	bl	8009580 <__s2b>
 8007922:	9007      	str	r0, [sp, #28]
 8007924:	2800      	cmp	r0, #0
 8007926:	f43f af1f 	beq.w	8007768 <_strtod_l+0x488>
 800792a:	9b05      	ldr	r3, [sp, #20]
 800792c:	1b9e      	subs	r6, r3, r6
 800792e:	9b06      	ldr	r3, [sp, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfb4      	ite	lt
 8007934:	4633      	movlt	r3, r6
 8007936:	2300      	movge	r3, #0
 8007938:	930c      	str	r3, [sp, #48]	; 0x30
 800793a:	9b06      	ldr	r3, [sp, #24]
 800793c:	2500      	movs	r5, #0
 800793e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007942:	9312      	str	r3, [sp, #72]	; 0x48
 8007944:	462e      	mov	r6, r5
 8007946:	9b07      	ldr	r3, [sp, #28]
 8007948:	4620      	mov	r0, r4
 800794a:	6859      	ldr	r1, [r3, #4]
 800794c:	f001 fd70 	bl	8009430 <_Balloc>
 8007950:	9005      	str	r0, [sp, #20]
 8007952:	2800      	cmp	r0, #0
 8007954:	f43f af0c 	beq.w	8007770 <_strtod_l+0x490>
 8007958:	9b07      	ldr	r3, [sp, #28]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	3202      	adds	r2, #2
 800795e:	f103 010c 	add.w	r1, r3, #12
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	300c      	adds	r0, #12
 8007966:	f7fe ffdf 	bl	8006928 <memcpy>
 800796a:	ec4b ab10 	vmov	d0, sl, fp
 800796e:	aa1a      	add	r2, sp, #104	; 0x68
 8007970:	a919      	add	r1, sp, #100	; 0x64
 8007972:	4620      	mov	r0, r4
 8007974:	f002 f94a 	bl	8009c0c <__d2b>
 8007978:	ec4b ab18 	vmov	d8, sl, fp
 800797c:	9018      	str	r0, [sp, #96]	; 0x60
 800797e:	2800      	cmp	r0, #0
 8007980:	f43f aef6 	beq.w	8007770 <_strtod_l+0x490>
 8007984:	2101      	movs	r1, #1
 8007986:	4620      	mov	r0, r4
 8007988:	f001 fe94 	bl	80096b4 <__i2b>
 800798c:	4606      	mov	r6, r0
 800798e:	2800      	cmp	r0, #0
 8007990:	f43f aeee 	beq.w	8007770 <_strtod_l+0x490>
 8007994:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007996:	9904      	ldr	r1, [sp, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	bfab      	itete	ge
 800799c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800799e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80079a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80079a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80079a6:	bfac      	ite	ge
 80079a8:	eb03 0902 	addge.w	r9, r3, r2
 80079ac:	1ad7      	sublt	r7, r2, r3
 80079ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079b0:	eba3 0801 	sub.w	r8, r3, r1
 80079b4:	4490      	add	r8, r2
 80079b6:	4ba1      	ldr	r3, [pc, #644]	; (8007c3c <_strtod_l+0x95c>)
 80079b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80079bc:	4598      	cmp	r8, r3
 80079be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079c2:	f280 80c7 	bge.w	8007b54 <_strtod_l+0x874>
 80079c6:	eba3 0308 	sub.w	r3, r3, r8
 80079ca:	2b1f      	cmp	r3, #31
 80079cc:	eba2 0203 	sub.w	r2, r2, r3
 80079d0:	f04f 0101 	mov.w	r1, #1
 80079d4:	f300 80b1 	bgt.w	8007b3a <_strtod_l+0x85a>
 80079d8:	fa01 f303 	lsl.w	r3, r1, r3
 80079dc:	930d      	str	r3, [sp, #52]	; 0x34
 80079de:	2300      	movs	r3, #0
 80079e0:	9308      	str	r3, [sp, #32]
 80079e2:	eb09 0802 	add.w	r8, r9, r2
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	45c1      	cmp	r9, r8
 80079ea:	4417      	add	r7, r2
 80079ec:	441f      	add	r7, r3
 80079ee:	464b      	mov	r3, r9
 80079f0:	bfa8      	it	ge
 80079f2:	4643      	movge	r3, r8
 80079f4:	42bb      	cmp	r3, r7
 80079f6:	bfa8      	it	ge
 80079f8:	463b      	movge	r3, r7
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfc2      	ittt	gt
 80079fe:	eba8 0803 	subgt.w	r8, r8, r3
 8007a02:	1aff      	subgt	r7, r7, r3
 8007a04:	eba9 0903 	subgt.w	r9, r9, r3
 8007a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dd17      	ble.n	8007a3e <_strtod_l+0x75e>
 8007a0e:	4631      	mov	r1, r6
 8007a10:	461a      	mov	r2, r3
 8007a12:	4620      	mov	r0, r4
 8007a14:	f001 ff0e 	bl	8009834 <__pow5mult>
 8007a18:	4606      	mov	r6, r0
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	f43f aea8 	beq.w	8007770 <_strtod_l+0x490>
 8007a20:	4601      	mov	r1, r0
 8007a22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a24:	4620      	mov	r0, r4
 8007a26:	f001 fe5b 	bl	80096e0 <__multiply>
 8007a2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f43f ae9f 	beq.w	8007770 <_strtod_l+0x490>
 8007a32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a34:	4620      	mov	r0, r4
 8007a36:	f001 fd3b 	bl	80094b0 <_Bfree>
 8007a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a3c:	9318      	str	r3, [sp, #96]	; 0x60
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	f300 808c 	bgt.w	8007b5e <_strtod_l+0x87e>
 8007a46:	9b06      	ldr	r3, [sp, #24]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	dd08      	ble.n	8007a5e <_strtod_l+0x77e>
 8007a4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a4e:	9905      	ldr	r1, [sp, #20]
 8007a50:	4620      	mov	r0, r4
 8007a52:	f001 feef 	bl	8009834 <__pow5mult>
 8007a56:	9005      	str	r0, [sp, #20]
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	f43f ae89 	beq.w	8007770 <_strtod_l+0x490>
 8007a5e:	2f00      	cmp	r7, #0
 8007a60:	dd08      	ble.n	8007a74 <_strtod_l+0x794>
 8007a62:	9905      	ldr	r1, [sp, #20]
 8007a64:	463a      	mov	r2, r7
 8007a66:	4620      	mov	r0, r4
 8007a68:	f001 ff3e 	bl	80098e8 <__lshift>
 8007a6c:	9005      	str	r0, [sp, #20]
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f43f ae7e 	beq.w	8007770 <_strtod_l+0x490>
 8007a74:	f1b9 0f00 	cmp.w	r9, #0
 8007a78:	dd08      	ble.n	8007a8c <_strtod_l+0x7ac>
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	464a      	mov	r2, r9
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f001 ff32 	bl	80098e8 <__lshift>
 8007a84:	4606      	mov	r6, r0
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f43f ae72 	beq.w	8007770 <_strtod_l+0x490>
 8007a8c:	9a05      	ldr	r2, [sp, #20]
 8007a8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a90:	4620      	mov	r0, r4
 8007a92:	f001 ffb5 	bl	8009a00 <__mdiff>
 8007a96:	4605      	mov	r5, r0
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f43f ae69 	beq.w	8007770 <_strtod_l+0x490>
 8007a9e:	68c3      	ldr	r3, [r0, #12]
 8007aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60c3      	str	r3, [r0, #12]
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	f001 ff8e 	bl	80099c8 <__mcmp>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	da60      	bge.n	8007b72 <_strtod_l+0x892>
 8007ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ab2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ab6:	f040 8082 	bne.w	8007bbe <_strtod_l+0x8de>
 8007aba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d17d      	bne.n	8007bbe <_strtod_l+0x8de>
 8007ac2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ac6:	0d1b      	lsrs	r3, r3, #20
 8007ac8:	051b      	lsls	r3, r3, #20
 8007aca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ace:	d976      	bls.n	8007bbe <_strtod_l+0x8de>
 8007ad0:	696b      	ldr	r3, [r5, #20]
 8007ad2:	b913      	cbnz	r3, 8007ada <_strtod_l+0x7fa>
 8007ad4:	692b      	ldr	r3, [r5, #16]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	dd71      	ble.n	8007bbe <_strtod_l+0x8de>
 8007ada:	4629      	mov	r1, r5
 8007adc:	2201      	movs	r2, #1
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f001 ff02 	bl	80098e8 <__lshift>
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	f001 ff6e 	bl	80099c8 <__mcmp>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	dd66      	ble.n	8007bbe <_strtod_l+0x8de>
 8007af0:	9904      	ldr	r1, [sp, #16]
 8007af2:	4a53      	ldr	r2, [pc, #332]	; (8007c40 <_strtod_l+0x960>)
 8007af4:	465b      	mov	r3, fp
 8007af6:	2900      	cmp	r1, #0
 8007af8:	f000 8081 	beq.w	8007bfe <_strtod_l+0x91e>
 8007afc:	ea02 010b 	and.w	r1, r2, fp
 8007b00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b04:	dc7b      	bgt.n	8007bfe <_strtod_l+0x91e>
 8007b06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b0a:	f77f aea9 	ble.w	8007860 <_strtod_l+0x580>
 8007b0e:	4b4d      	ldr	r3, [pc, #308]	; (8007c44 <_strtod_l+0x964>)
 8007b10:	4650      	mov	r0, sl
 8007b12:	4659      	mov	r1, fp
 8007b14:	2200      	movs	r2, #0
 8007b16:	f7f8 fd77 	bl	8000608 <__aeabi_dmul>
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4303      	orrs	r3, r0
 8007b1e:	bf08      	it	eq
 8007b20:	2322      	moveq	r3, #34	; 0x22
 8007b22:	4682      	mov	sl, r0
 8007b24:	468b      	mov	fp, r1
 8007b26:	bf08      	it	eq
 8007b28:	6023      	streq	r3, [r4, #0]
 8007b2a:	e62b      	b.n	8007784 <_strtod_l+0x4a4>
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	ea03 0a0a 	and.w	sl, r3, sl
 8007b38:	e6e3      	b.n	8007902 <_strtod_l+0x622>
 8007b3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007b42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007b46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007b4a:	fa01 f308 	lsl.w	r3, r1, r8
 8007b4e:	9308      	str	r3, [sp, #32]
 8007b50:	910d      	str	r1, [sp, #52]	; 0x34
 8007b52:	e746      	b.n	80079e2 <_strtod_l+0x702>
 8007b54:	2300      	movs	r3, #0
 8007b56:	9308      	str	r3, [sp, #32]
 8007b58:	2301      	movs	r3, #1
 8007b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007b5c:	e741      	b.n	80079e2 <_strtod_l+0x702>
 8007b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b60:	4642      	mov	r2, r8
 8007b62:	4620      	mov	r0, r4
 8007b64:	f001 fec0 	bl	80098e8 <__lshift>
 8007b68:	9018      	str	r0, [sp, #96]	; 0x60
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f47f af6b 	bne.w	8007a46 <_strtod_l+0x766>
 8007b70:	e5fe      	b.n	8007770 <_strtod_l+0x490>
 8007b72:	465f      	mov	r7, fp
 8007b74:	d16e      	bne.n	8007c54 <_strtod_l+0x974>
 8007b76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b7c:	b342      	cbz	r2, 8007bd0 <_strtod_l+0x8f0>
 8007b7e:	4a32      	ldr	r2, [pc, #200]	; (8007c48 <_strtod_l+0x968>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d128      	bne.n	8007bd6 <_strtod_l+0x8f6>
 8007b84:	9b04      	ldr	r3, [sp, #16]
 8007b86:	4651      	mov	r1, sl
 8007b88:	b1eb      	cbz	r3, 8007bc6 <_strtod_l+0x8e6>
 8007b8a:	4b2d      	ldr	r3, [pc, #180]	; (8007c40 <_strtod_l+0x960>)
 8007b8c:	403b      	ands	r3, r7
 8007b8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b92:	f04f 32ff 	mov.w	r2, #4294967295
 8007b96:	d819      	bhi.n	8007bcc <_strtod_l+0x8ec>
 8007b98:	0d1b      	lsrs	r3, r3, #20
 8007b9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	4299      	cmp	r1, r3
 8007ba4:	d117      	bne.n	8007bd6 <_strtod_l+0x8f6>
 8007ba6:	4b29      	ldr	r3, [pc, #164]	; (8007c4c <_strtod_l+0x96c>)
 8007ba8:	429f      	cmp	r7, r3
 8007baa:	d102      	bne.n	8007bb2 <_strtod_l+0x8d2>
 8007bac:	3101      	adds	r1, #1
 8007bae:	f43f addf 	beq.w	8007770 <_strtod_l+0x490>
 8007bb2:	4b23      	ldr	r3, [pc, #140]	; (8007c40 <_strtod_l+0x960>)
 8007bb4:	403b      	ands	r3, r7
 8007bb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007bba:	f04f 0a00 	mov.w	sl, #0
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1a4      	bne.n	8007b0e <_strtod_l+0x82e>
 8007bc4:	e5de      	b.n	8007784 <_strtod_l+0x4a4>
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bca:	e7ea      	b.n	8007ba2 <_strtod_l+0x8c2>
 8007bcc:	4613      	mov	r3, r2
 8007bce:	e7e8      	b.n	8007ba2 <_strtod_l+0x8c2>
 8007bd0:	ea53 030a 	orrs.w	r3, r3, sl
 8007bd4:	d08c      	beq.n	8007af0 <_strtod_l+0x810>
 8007bd6:	9b08      	ldr	r3, [sp, #32]
 8007bd8:	b1db      	cbz	r3, 8007c12 <_strtod_l+0x932>
 8007bda:	423b      	tst	r3, r7
 8007bdc:	d0ef      	beq.n	8007bbe <_strtod_l+0x8de>
 8007bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be0:	9a04      	ldr	r2, [sp, #16]
 8007be2:	4650      	mov	r0, sl
 8007be4:	4659      	mov	r1, fp
 8007be6:	b1c3      	cbz	r3, 8007c1a <_strtod_l+0x93a>
 8007be8:	f7ff fb5e 	bl	80072a8 <sulp>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	ec51 0b18 	vmov	r0, r1, d8
 8007bf4:	f7f8 fb52 	bl	800029c <__adddf3>
 8007bf8:	4682      	mov	sl, r0
 8007bfa:	468b      	mov	fp, r1
 8007bfc:	e7df      	b.n	8007bbe <_strtod_l+0x8de>
 8007bfe:	4013      	ands	r3, r2
 8007c00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c10:	e7d5      	b.n	8007bbe <_strtod_l+0x8de>
 8007c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c14:	ea13 0f0a 	tst.w	r3, sl
 8007c18:	e7e0      	b.n	8007bdc <_strtod_l+0x8fc>
 8007c1a:	f7ff fb45 	bl	80072a8 <sulp>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	ec51 0b18 	vmov	r0, r1, d8
 8007c26:	f7f8 fb37 	bl	8000298 <__aeabi_dsub>
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4682      	mov	sl, r0
 8007c30:	468b      	mov	fp, r1
 8007c32:	f7f8 ff51 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0c1      	beq.n	8007bbe <_strtod_l+0x8de>
 8007c3a:	e611      	b.n	8007860 <_strtod_l+0x580>
 8007c3c:	fffffc02 	.word	0xfffffc02
 8007c40:	7ff00000 	.word	0x7ff00000
 8007c44:	39500000 	.word	0x39500000
 8007c48:	000fffff 	.word	0x000fffff
 8007c4c:	7fefffff 	.word	0x7fefffff
 8007c50:	0800b6b0 	.word	0x0800b6b0
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	f002 f834 	bl	8009cc4 <__ratio>
 8007c5c:	ec59 8b10 	vmov	r8, r9, d0
 8007c60:	ee10 0a10 	vmov	r0, s0
 8007c64:	2200      	movs	r2, #0
 8007c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 ff48 	bl	8000b00 <__aeabi_dcmple>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d07a      	beq.n	8007d6a <_strtod_l+0xa8a>
 8007c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d04a      	beq.n	8007d10 <_strtod_l+0xa30>
 8007c7a:	4b95      	ldr	r3, [pc, #596]	; (8007ed0 <_strtod_l+0xbf0>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007ed0 <_strtod_l+0xbf0>
 8007c86:	f04f 0800 	mov.w	r8, #0
 8007c8a:	4b92      	ldr	r3, [pc, #584]	; (8007ed4 <_strtod_l+0xbf4>)
 8007c8c:	403b      	ands	r3, r7
 8007c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c92:	4b91      	ldr	r3, [pc, #580]	; (8007ed8 <_strtod_l+0xbf8>)
 8007c94:	429a      	cmp	r2, r3
 8007c96:	f040 80b0 	bne.w	8007dfa <_strtod_l+0xb1a>
 8007c9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007ca2:	ec4b ab10 	vmov	d0, sl, fp
 8007ca6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007caa:	f001 ff33 	bl	8009b14 <__ulp>
 8007cae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cb2:	ec53 2b10 	vmov	r2, r3, d0
 8007cb6:	f7f8 fca7 	bl	8000608 <__aeabi_dmul>
 8007cba:	4652      	mov	r2, sl
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	f7f8 faed 	bl	800029c <__adddf3>
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4983      	ldr	r1, [pc, #524]	; (8007ed4 <_strtod_l+0xbf4>)
 8007cc6:	4a85      	ldr	r2, [pc, #532]	; (8007edc <_strtod_l+0xbfc>)
 8007cc8:	4019      	ands	r1, r3
 8007cca:	4291      	cmp	r1, r2
 8007ccc:	4682      	mov	sl, r0
 8007cce:	d960      	bls.n	8007d92 <_strtod_l+0xab2>
 8007cd0:	ee18 3a90 	vmov	r3, s17
 8007cd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d104      	bne.n	8007ce6 <_strtod_l+0xa06>
 8007cdc:	ee18 3a10 	vmov	r3, s16
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	f43f ad45 	beq.w	8007770 <_strtod_l+0x490>
 8007ce6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007ee8 <_strtod_l+0xc08>
 8007cea:	f04f 3aff 	mov.w	sl, #4294967295
 8007cee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f001 fbdd 	bl	80094b0 <_Bfree>
 8007cf6:	9905      	ldr	r1, [sp, #20]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f001 fbd9 	bl	80094b0 <_Bfree>
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4620      	mov	r0, r4
 8007d02:	f001 fbd5 	bl	80094b0 <_Bfree>
 8007d06:	4629      	mov	r1, r5
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f001 fbd1 	bl	80094b0 <_Bfree>
 8007d0e:	e61a      	b.n	8007946 <_strtod_l+0x666>
 8007d10:	f1ba 0f00 	cmp.w	sl, #0
 8007d14:	d11b      	bne.n	8007d4e <_strtod_l+0xa6e>
 8007d16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d1a:	b9f3      	cbnz	r3, 8007d5a <_strtod_l+0xa7a>
 8007d1c:	4b6c      	ldr	r3, [pc, #432]	; (8007ed0 <_strtod_l+0xbf0>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4640      	mov	r0, r8
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 fee2 	bl	8000aec <__aeabi_dcmplt>
 8007d28:	b9d0      	cbnz	r0, 8007d60 <_strtod_l+0xa80>
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	4b6c      	ldr	r3, [pc, #432]	; (8007ee0 <_strtod_l+0xc00>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	f7f8 fc69 	bl	8000608 <__aeabi_dmul>
 8007d36:	4680      	mov	r8, r0
 8007d38:	4689      	mov	r9, r1
 8007d3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007d42:	9315      	str	r3, [sp, #84]	; 0x54
 8007d44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007d48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d4c:	e79d      	b.n	8007c8a <_strtod_l+0x9aa>
 8007d4e:	f1ba 0f01 	cmp.w	sl, #1
 8007d52:	d102      	bne.n	8007d5a <_strtod_l+0xa7a>
 8007d54:	2f00      	cmp	r7, #0
 8007d56:	f43f ad83 	beq.w	8007860 <_strtod_l+0x580>
 8007d5a:	4b62      	ldr	r3, [pc, #392]	; (8007ee4 <_strtod_l+0xc04>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	e78e      	b.n	8007c7e <_strtod_l+0x99e>
 8007d60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007ee0 <_strtod_l+0xc00>
 8007d64:	f04f 0800 	mov.w	r8, #0
 8007d68:	e7e7      	b.n	8007d3a <_strtod_l+0xa5a>
 8007d6a:	4b5d      	ldr	r3, [pc, #372]	; (8007ee0 <_strtod_l+0xc00>)
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	4649      	mov	r1, r9
 8007d70:	2200      	movs	r2, #0
 8007d72:	f7f8 fc49 	bl	8000608 <__aeabi_dmul>
 8007d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d78:	4680      	mov	r8, r0
 8007d7a:	4689      	mov	r9, r1
 8007d7c:	b933      	cbnz	r3, 8007d8c <_strtod_l+0xaac>
 8007d7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d82:	900e      	str	r0, [sp, #56]	; 0x38
 8007d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007d8a:	e7dd      	b.n	8007d48 <_strtod_l+0xa68>
 8007d8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007d90:	e7f9      	b.n	8007d86 <_strtod_l+0xaa6>
 8007d92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1a8      	bne.n	8007cee <_strtod_l+0xa0e>
 8007d9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007da2:	0d1b      	lsrs	r3, r3, #20
 8007da4:	051b      	lsls	r3, r3, #20
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d1a1      	bne.n	8007cee <_strtod_l+0xa0e>
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	f7f8 ff3b 	bl	8000c28 <__aeabi_d2lz>
 8007db2:	f7f8 fbfb 	bl	80005ac <__aeabi_l2d>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	f7f8 fa6b 	bl	8000298 <__aeabi_dsub>
 8007dc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dc8:	ea43 030a 	orr.w	r3, r3, sl
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	4680      	mov	r8, r0
 8007dd0:	4689      	mov	r9, r1
 8007dd2:	d055      	beq.n	8007e80 <_strtod_l+0xba0>
 8007dd4:	a336      	add	r3, pc, #216	; (adr r3, 8007eb0 <_strtod_l+0xbd0>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 fe87 	bl	8000aec <__aeabi_dcmplt>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	f47f acd0 	bne.w	8007784 <_strtod_l+0x4a4>
 8007de4:	a334      	add	r3, pc, #208	; (adr r3, 8007eb8 <_strtod_l+0xbd8>)
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	4640      	mov	r0, r8
 8007dec:	4649      	mov	r1, r9
 8007dee:	f7f8 fe9b 	bl	8000b28 <__aeabi_dcmpgt>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	f43f af7b 	beq.w	8007cee <_strtod_l+0xa0e>
 8007df8:	e4c4      	b.n	8007784 <_strtod_l+0x4a4>
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	b333      	cbz	r3, 8007e4c <_strtod_l+0xb6c>
 8007dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e04:	d822      	bhi.n	8007e4c <_strtod_l+0xb6c>
 8007e06:	a32e      	add	r3, pc, #184	; (adr r3, 8007ec0 <_strtod_l+0xbe0>)
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	4649      	mov	r1, r9
 8007e10:	f7f8 fe76 	bl	8000b00 <__aeabi_dcmple>
 8007e14:	b1a0      	cbz	r0, 8007e40 <_strtod_l+0xb60>
 8007e16:	4649      	mov	r1, r9
 8007e18:	4640      	mov	r0, r8
 8007e1a:	f7f8 fecd 	bl	8000bb8 <__aeabi_d2uiz>
 8007e1e:	2801      	cmp	r0, #1
 8007e20:	bf38      	it	cc
 8007e22:	2001      	movcc	r0, #1
 8007e24:	f7f8 fb76 	bl	8000514 <__aeabi_ui2d>
 8007e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	4689      	mov	r9, r1
 8007e2e:	bb23      	cbnz	r3, 8007e7a <_strtod_l+0xb9a>
 8007e30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e34:	9010      	str	r0, [sp, #64]	; 0x40
 8007e36:	9311      	str	r3, [sp, #68]	; 0x44
 8007e38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e48:	1a9b      	subs	r3, r3, r2
 8007e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e50:	eeb0 0a48 	vmov.f32	s0, s16
 8007e54:	eef0 0a68 	vmov.f32	s1, s17
 8007e58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e5c:	f001 fe5a 	bl	8009b14 <__ulp>
 8007e60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e64:	ec53 2b10 	vmov	r2, r3, d0
 8007e68:	f7f8 fbce 	bl	8000608 <__aeabi_dmul>
 8007e6c:	ec53 2b18 	vmov	r2, r3, d8
 8007e70:	f7f8 fa14 	bl	800029c <__adddf3>
 8007e74:	4682      	mov	sl, r0
 8007e76:	468b      	mov	fp, r1
 8007e78:	e78d      	b.n	8007d96 <_strtod_l+0xab6>
 8007e7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007e7e:	e7db      	b.n	8007e38 <_strtod_l+0xb58>
 8007e80:	a311      	add	r3, pc, #68	; (adr r3, 8007ec8 <_strtod_l+0xbe8>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 fe31 	bl	8000aec <__aeabi_dcmplt>
 8007e8a:	e7b2      	b.n	8007df2 <_strtod_l+0xb12>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	f7ff ba6b 	b.w	8007370 <_strtod_l+0x90>
 8007e9a:	2a65      	cmp	r2, #101	; 0x65
 8007e9c:	f43f ab5f 	beq.w	800755e <_strtod_l+0x27e>
 8007ea0:	2a45      	cmp	r2, #69	; 0x45
 8007ea2:	f43f ab5c 	beq.w	800755e <_strtod_l+0x27e>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f7ff bb94 	b.w	80075d4 <_strtod_l+0x2f4>
 8007eac:	f3af 8000 	nop.w
 8007eb0:	94a03595 	.word	0x94a03595
 8007eb4:	3fdfffff 	.word	0x3fdfffff
 8007eb8:	35afe535 	.word	0x35afe535
 8007ebc:	3fe00000 	.word	0x3fe00000
 8007ec0:	ffc00000 	.word	0xffc00000
 8007ec4:	41dfffff 	.word	0x41dfffff
 8007ec8:	94a03595 	.word	0x94a03595
 8007ecc:	3fcfffff 	.word	0x3fcfffff
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	7ff00000 	.word	0x7ff00000
 8007ed8:	7fe00000 	.word	0x7fe00000
 8007edc:	7c9fffff 	.word	0x7c9fffff
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	bff00000 	.word	0xbff00000
 8007ee8:	7fefffff 	.word	0x7fefffff

08007eec <strtod>:
 8007eec:	460a      	mov	r2, r1
 8007eee:	4601      	mov	r1, r0
 8007ef0:	4802      	ldr	r0, [pc, #8]	; (8007efc <strtod+0x10>)
 8007ef2:	4b03      	ldr	r3, [pc, #12]	; (8007f00 <strtod+0x14>)
 8007ef4:	6800      	ldr	r0, [r0, #0]
 8007ef6:	f7ff b9f3 	b.w	80072e0 <_strtod_l>
 8007efa:	bf00      	nop
 8007efc:	2000000c 	.word	0x2000000c
 8007f00:	20000074 	.word	0x20000074

08007f04 <_strtol_l.constprop.0>:
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0a:	d001      	beq.n	8007f10 <_strtol_l.constprop.0+0xc>
 8007f0c:	2b24      	cmp	r3, #36	; 0x24
 8007f0e:	d906      	bls.n	8007f1e <_strtol_l.constprop.0+0x1a>
 8007f10:	f7fe fce0 	bl	80068d4 <__errno>
 8007f14:	2316      	movs	r3, #22
 8007f16:	6003      	str	r3, [r0, #0]
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008004 <_strtol_l.constprop.0+0x100>
 8007f22:	460d      	mov	r5, r1
 8007f24:	462e      	mov	r6, r5
 8007f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f2e:	f017 0708 	ands.w	r7, r7, #8
 8007f32:	d1f7      	bne.n	8007f24 <_strtol_l.constprop.0+0x20>
 8007f34:	2c2d      	cmp	r4, #45	; 0x2d
 8007f36:	d132      	bne.n	8007f9e <_strtol_l.constprop.0+0x9a>
 8007f38:	782c      	ldrb	r4, [r5, #0]
 8007f3a:	2701      	movs	r7, #1
 8007f3c:	1cb5      	adds	r5, r6, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d05b      	beq.n	8007ffa <_strtol_l.constprop.0+0xf6>
 8007f42:	2b10      	cmp	r3, #16
 8007f44:	d109      	bne.n	8007f5a <_strtol_l.constprop.0+0x56>
 8007f46:	2c30      	cmp	r4, #48	; 0x30
 8007f48:	d107      	bne.n	8007f5a <_strtol_l.constprop.0+0x56>
 8007f4a:	782c      	ldrb	r4, [r5, #0]
 8007f4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f50:	2c58      	cmp	r4, #88	; 0x58
 8007f52:	d14d      	bne.n	8007ff0 <_strtol_l.constprop.0+0xec>
 8007f54:	786c      	ldrb	r4, [r5, #1]
 8007f56:	2310      	movs	r3, #16
 8007f58:	3502      	adds	r5, #2
 8007f5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f62:	f04f 0c00 	mov.w	ip, #0
 8007f66:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f6a:	4666      	mov	r6, ip
 8007f6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f74:	f1be 0f09 	cmp.w	lr, #9
 8007f78:	d816      	bhi.n	8007fa8 <_strtol_l.constprop.0+0xa4>
 8007f7a:	4674      	mov	r4, lr
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	dd24      	ble.n	8007fca <_strtol_l.constprop.0+0xc6>
 8007f80:	f1bc 0f00 	cmp.w	ip, #0
 8007f84:	db1e      	blt.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f86:	45b1      	cmp	r9, r6
 8007f88:	d31c      	bcc.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f8a:	d101      	bne.n	8007f90 <_strtol_l.constprop.0+0x8c>
 8007f8c:	45a2      	cmp	sl, r4
 8007f8e:	db19      	blt.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f90:	fb06 4603 	mla	r6, r6, r3, r4
 8007f94:	f04f 0c01 	mov.w	ip, #1
 8007f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f9c:	e7e8      	b.n	8007f70 <_strtol_l.constprop.0+0x6c>
 8007f9e:	2c2b      	cmp	r4, #43	; 0x2b
 8007fa0:	bf04      	itt	eq
 8007fa2:	782c      	ldrbeq	r4, [r5, #0]
 8007fa4:	1cb5      	addeq	r5, r6, #2
 8007fa6:	e7ca      	b.n	8007f3e <_strtol_l.constprop.0+0x3a>
 8007fa8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fac:	f1be 0f19 	cmp.w	lr, #25
 8007fb0:	d801      	bhi.n	8007fb6 <_strtol_l.constprop.0+0xb2>
 8007fb2:	3c37      	subs	r4, #55	; 0x37
 8007fb4:	e7e2      	b.n	8007f7c <_strtol_l.constprop.0+0x78>
 8007fb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007fba:	f1be 0f19 	cmp.w	lr, #25
 8007fbe:	d804      	bhi.n	8007fca <_strtol_l.constprop.0+0xc6>
 8007fc0:	3c57      	subs	r4, #87	; 0x57
 8007fc2:	e7db      	b.n	8007f7c <_strtol_l.constprop.0+0x78>
 8007fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8007fc8:	e7e6      	b.n	8007f98 <_strtol_l.constprop.0+0x94>
 8007fca:	f1bc 0f00 	cmp.w	ip, #0
 8007fce:	da05      	bge.n	8007fdc <_strtol_l.constprop.0+0xd8>
 8007fd0:	2322      	movs	r3, #34	; 0x22
 8007fd2:	6003      	str	r3, [r0, #0]
 8007fd4:	4646      	mov	r6, r8
 8007fd6:	b942      	cbnz	r2, 8007fea <_strtol_l.constprop.0+0xe6>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	e79e      	b.n	8007f1a <_strtol_l.constprop.0+0x16>
 8007fdc:	b107      	cbz	r7, 8007fe0 <_strtol_l.constprop.0+0xdc>
 8007fde:	4276      	negs	r6, r6
 8007fe0:	2a00      	cmp	r2, #0
 8007fe2:	d0f9      	beq.n	8007fd8 <_strtol_l.constprop.0+0xd4>
 8007fe4:	f1bc 0f00 	cmp.w	ip, #0
 8007fe8:	d000      	beq.n	8007fec <_strtol_l.constprop.0+0xe8>
 8007fea:	1e69      	subs	r1, r5, #1
 8007fec:	6011      	str	r1, [r2, #0]
 8007fee:	e7f3      	b.n	8007fd8 <_strtol_l.constprop.0+0xd4>
 8007ff0:	2430      	movs	r4, #48	; 0x30
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1b1      	bne.n	8007f5a <_strtol_l.constprop.0+0x56>
 8007ff6:	2308      	movs	r3, #8
 8007ff8:	e7af      	b.n	8007f5a <_strtol_l.constprop.0+0x56>
 8007ffa:	2c30      	cmp	r4, #48	; 0x30
 8007ffc:	d0a5      	beq.n	8007f4a <_strtol_l.constprop.0+0x46>
 8007ffe:	230a      	movs	r3, #10
 8008000:	e7ab      	b.n	8007f5a <_strtol_l.constprop.0+0x56>
 8008002:	bf00      	nop
 8008004:	0800b6d9 	.word	0x0800b6d9

08008008 <strtol>:
 8008008:	4613      	mov	r3, r2
 800800a:	460a      	mov	r2, r1
 800800c:	4601      	mov	r1, r0
 800800e:	4802      	ldr	r0, [pc, #8]	; (8008018 <strtol+0x10>)
 8008010:	6800      	ldr	r0, [r0, #0]
 8008012:	f7ff bf77 	b.w	8007f04 <_strtol_l.constprop.0>
 8008016:	bf00      	nop
 8008018:	2000000c 	.word	0x2000000c

0800801c <quorem>:
 800801c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	6903      	ldr	r3, [r0, #16]
 8008022:	690c      	ldr	r4, [r1, #16]
 8008024:	42a3      	cmp	r3, r4
 8008026:	4607      	mov	r7, r0
 8008028:	f2c0 8081 	blt.w	800812e <quorem+0x112>
 800802c:	3c01      	subs	r4, #1
 800802e:	f101 0814 	add.w	r8, r1, #20
 8008032:	f100 0514 	add.w	r5, r0, #20
 8008036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008044:	3301      	adds	r3, #1
 8008046:	429a      	cmp	r2, r3
 8008048:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800804c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008050:	fbb2 f6f3 	udiv	r6, r2, r3
 8008054:	d331      	bcc.n	80080ba <quorem+0x9e>
 8008056:	f04f 0e00 	mov.w	lr, #0
 800805a:	4640      	mov	r0, r8
 800805c:	46ac      	mov	ip, r5
 800805e:	46f2      	mov	sl, lr
 8008060:	f850 2b04 	ldr.w	r2, [r0], #4
 8008064:	b293      	uxth	r3, r2
 8008066:	fb06 e303 	mla	r3, r6, r3, lr
 800806a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800806e:	b29b      	uxth	r3, r3
 8008070:	ebaa 0303 	sub.w	r3, sl, r3
 8008074:	f8dc a000 	ldr.w	sl, [ip]
 8008078:	0c12      	lsrs	r2, r2, #16
 800807a:	fa13 f38a 	uxtah	r3, r3, sl
 800807e:	fb06 e202 	mla	r2, r6, r2, lr
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	9b00      	ldr	r3, [sp, #0]
 8008086:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800808a:	b292      	uxth	r2, r2
 800808c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008090:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008094:	f8bd 3000 	ldrh.w	r3, [sp]
 8008098:	4581      	cmp	r9, r0
 800809a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800809e:	f84c 3b04 	str.w	r3, [ip], #4
 80080a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080a6:	d2db      	bcs.n	8008060 <quorem+0x44>
 80080a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80080ac:	b92b      	cbnz	r3, 80080ba <quorem+0x9e>
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	3b04      	subs	r3, #4
 80080b2:	429d      	cmp	r5, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	d32e      	bcc.n	8008116 <quorem+0xfa>
 80080b8:	613c      	str	r4, [r7, #16]
 80080ba:	4638      	mov	r0, r7
 80080bc:	f001 fc84 	bl	80099c8 <__mcmp>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	db24      	blt.n	800810e <quorem+0xf2>
 80080c4:	3601      	adds	r6, #1
 80080c6:	4628      	mov	r0, r5
 80080c8:	f04f 0c00 	mov.w	ip, #0
 80080cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80080d0:	f8d0 e000 	ldr.w	lr, [r0]
 80080d4:	b293      	uxth	r3, r2
 80080d6:	ebac 0303 	sub.w	r3, ip, r3
 80080da:	0c12      	lsrs	r2, r2, #16
 80080dc:	fa13 f38e 	uxtah	r3, r3, lr
 80080e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ee:	45c1      	cmp	r9, r8
 80080f0:	f840 3b04 	str.w	r3, [r0], #4
 80080f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080f8:	d2e8      	bcs.n	80080cc <quorem+0xb0>
 80080fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008102:	b922      	cbnz	r2, 800810e <quorem+0xf2>
 8008104:	3b04      	subs	r3, #4
 8008106:	429d      	cmp	r5, r3
 8008108:	461a      	mov	r2, r3
 800810a:	d30a      	bcc.n	8008122 <quorem+0x106>
 800810c:	613c      	str	r4, [r7, #16]
 800810e:	4630      	mov	r0, r6
 8008110:	b003      	add	sp, #12
 8008112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	3b04      	subs	r3, #4
 800811a:	2a00      	cmp	r2, #0
 800811c:	d1cc      	bne.n	80080b8 <quorem+0x9c>
 800811e:	3c01      	subs	r4, #1
 8008120:	e7c7      	b.n	80080b2 <quorem+0x96>
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	3b04      	subs	r3, #4
 8008126:	2a00      	cmp	r2, #0
 8008128:	d1f0      	bne.n	800810c <quorem+0xf0>
 800812a:	3c01      	subs	r4, #1
 800812c:	e7eb      	b.n	8008106 <quorem+0xea>
 800812e:	2000      	movs	r0, #0
 8008130:	e7ee      	b.n	8008110 <quorem+0xf4>
 8008132:	0000      	movs	r0, r0
 8008134:	0000      	movs	r0, r0
	...

08008138 <_dtoa_r>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	ed2d 8b04 	vpush	{d8-d9}
 8008140:	ec57 6b10 	vmov	r6, r7, d0
 8008144:	b093      	sub	sp, #76	; 0x4c
 8008146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800814c:	9106      	str	r1, [sp, #24]
 800814e:	ee10 aa10 	vmov	sl, s0
 8008152:	4604      	mov	r4, r0
 8008154:	9209      	str	r2, [sp, #36]	; 0x24
 8008156:	930c      	str	r3, [sp, #48]	; 0x30
 8008158:	46bb      	mov	fp, r7
 800815a:	b975      	cbnz	r5, 800817a <_dtoa_r+0x42>
 800815c:	2010      	movs	r0, #16
 800815e:	f001 f94d 	bl	80093fc <malloc>
 8008162:	4602      	mov	r2, r0
 8008164:	6260      	str	r0, [r4, #36]	; 0x24
 8008166:	b920      	cbnz	r0, 8008172 <_dtoa_r+0x3a>
 8008168:	4ba7      	ldr	r3, [pc, #668]	; (8008408 <_dtoa_r+0x2d0>)
 800816a:	21ea      	movs	r1, #234	; 0xea
 800816c:	48a7      	ldr	r0, [pc, #668]	; (800840c <_dtoa_r+0x2d4>)
 800816e:	f002 f8ad 	bl	800a2cc <__assert_func>
 8008172:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008176:	6005      	str	r5, [r0, #0]
 8008178:	60c5      	str	r5, [r0, #12]
 800817a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800817c:	6819      	ldr	r1, [r3, #0]
 800817e:	b151      	cbz	r1, 8008196 <_dtoa_r+0x5e>
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	604a      	str	r2, [r1, #4]
 8008184:	2301      	movs	r3, #1
 8008186:	4093      	lsls	r3, r2
 8008188:	608b      	str	r3, [r1, #8]
 800818a:	4620      	mov	r0, r4
 800818c:	f001 f990 	bl	80094b0 <_Bfree>
 8008190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	1e3b      	subs	r3, r7, #0
 8008198:	bfaa      	itet	ge
 800819a:	2300      	movge	r3, #0
 800819c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80081a0:	f8c8 3000 	strge.w	r3, [r8]
 80081a4:	4b9a      	ldr	r3, [pc, #616]	; (8008410 <_dtoa_r+0x2d8>)
 80081a6:	bfbc      	itt	lt
 80081a8:	2201      	movlt	r2, #1
 80081aa:	f8c8 2000 	strlt.w	r2, [r8]
 80081ae:	ea33 030b 	bics.w	r3, r3, fp
 80081b2:	d11b      	bne.n	80081ec <_dtoa_r+0xb4>
 80081b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80081ba:	6013      	str	r3, [r2, #0]
 80081bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081c0:	4333      	orrs	r3, r6
 80081c2:	f000 8592 	beq.w	8008cea <_dtoa_r+0xbb2>
 80081c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081c8:	b963      	cbnz	r3, 80081e4 <_dtoa_r+0xac>
 80081ca:	4b92      	ldr	r3, [pc, #584]	; (8008414 <_dtoa_r+0x2dc>)
 80081cc:	e022      	b.n	8008214 <_dtoa_r+0xdc>
 80081ce:	4b92      	ldr	r3, [pc, #584]	; (8008418 <_dtoa_r+0x2e0>)
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	3308      	adds	r3, #8
 80081d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	9801      	ldr	r0, [sp, #4]
 80081da:	b013      	add	sp, #76	; 0x4c
 80081dc:	ecbd 8b04 	vpop	{d8-d9}
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	4b8b      	ldr	r3, [pc, #556]	; (8008414 <_dtoa_r+0x2dc>)
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	3303      	adds	r3, #3
 80081ea:	e7f3      	b.n	80081d4 <_dtoa_r+0x9c>
 80081ec:	2200      	movs	r2, #0
 80081ee:	2300      	movs	r3, #0
 80081f0:	4650      	mov	r0, sl
 80081f2:	4659      	mov	r1, fp
 80081f4:	f7f8 fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 80081f8:	ec4b ab19 	vmov	d9, sl, fp
 80081fc:	4680      	mov	r8, r0
 80081fe:	b158      	cbz	r0, 8008218 <_dtoa_r+0xe0>
 8008200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008202:	2301      	movs	r3, #1
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 856b 	beq.w	8008ce4 <_dtoa_r+0xbac>
 800820e:	4883      	ldr	r0, [pc, #524]	; (800841c <_dtoa_r+0x2e4>)
 8008210:	6018      	str	r0, [r3, #0]
 8008212:	1e43      	subs	r3, r0, #1
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	e7df      	b.n	80081d8 <_dtoa_r+0xa0>
 8008218:	ec4b ab10 	vmov	d0, sl, fp
 800821c:	aa10      	add	r2, sp, #64	; 0x40
 800821e:	a911      	add	r1, sp, #68	; 0x44
 8008220:	4620      	mov	r0, r4
 8008222:	f001 fcf3 	bl	8009c0c <__d2b>
 8008226:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800822a:	ee08 0a10 	vmov	s16, r0
 800822e:	2d00      	cmp	r5, #0
 8008230:	f000 8084 	beq.w	800833c <_dtoa_r+0x204>
 8008234:	ee19 3a90 	vmov	r3, s19
 8008238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800823c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008240:	4656      	mov	r6, sl
 8008242:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800824a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800824e:	4b74      	ldr	r3, [pc, #464]	; (8008420 <_dtoa_r+0x2e8>)
 8008250:	2200      	movs	r2, #0
 8008252:	4630      	mov	r0, r6
 8008254:	4639      	mov	r1, r7
 8008256:	f7f8 f81f 	bl	8000298 <__aeabi_dsub>
 800825a:	a365      	add	r3, pc, #404	; (adr r3, 80083f0 <_dtoa_r+0x2b8>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f7f8 f9d2 	bl	8000608 <__aeabi_dmul>
 8008264:	a364      	add	r3, pc, #400	; (adr r3, 80083f8 <_dtoa_r+0x2c0>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f8 f817 	bl	800029c <__adddf3>
 800826e:	4606      	mov	r6, r0
 8008270:	4628      	mov	r0, r5
 8008272:	460f      	mov	r7, r1
 8008274:	f7f8 f95e 	bl	8000534 <__aeabi_i2d>
 8008278:	a361      	add	r3, pc, #388	; (adr r3, 8008400 <_dtoa_r+0x2c8>)
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f7f8 f9c3 	bl	8000608 <__aeabi_dmul>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4630      	mov	r0, r6
 8008288:	4639      	mov	r1, r7
 800828a:	f7f8 f807 	bl	800029c <__adddf3>
 800828e:	4606      	mov	r6, r0
 8008290:	460f      	mov	r7, r1
 8008292:	f7f8 fc69 	bl	8000b68 <__aeabi_d2iz>
 8008296:	2200      	movs	r2, #0
 8008298:	9000      	str	r0, [sp, #0]
 800829a:	2300      	movs	r3, #0
 800829c:	4630      	mov	r0, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	f7f8 fc24 	bl	8000aec <__aeabi_dcmplt>
 80082a4:	b150      	cbz	r0, 80082bc <_dtoa_r+0x184>
 80082a6:	9800      	ldr	r0, [sp, #0]
 80082a8:	f7f8 f944 	bl	8000534 <__aeabi_i2d>
 80082ac:	4632      	mov	r2, r6
 80082ae:	463b      	mov	r3, r7
 80082b0:	f7f8 fc12 	bl	8000ad8 <__aeabi_dcmpeq>
 80082b4:	b910      	cbnz	r0, 80082bc <_dtoa_r+0x184>
 80082b6:	9b00      	ldr	r3, [sp, #0]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	2b16      	cmp	r3, #22
 80082c0:	d85a      	bhi.n	8008378 <_dtoa_r+0x240>
 80082c2:	9a00      	ldr	r2, [sp, #0]
 80082c4:	4b57      	ldr	r3, [pc, #348]	; (8008424 <_dtoa_r+0x2ec>)
 80082c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	ec51 0b19 	vmov	r0, r1, d9
 80082d2:	f7f8 fc0b 	bl	8000aec <__aeabi_dcmplt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d050      	beq.n	800837c <_dtoa_r+0x244>
 80082da:	9b00      	ldr	r3, [sp, #0]
 80082dc:	3b01      	subs	r3, #1
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2300      	movs	r3, #0
 80082e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082e6:	1b5d      	subs	r5, r3, r5
 80082e8:	1e6b      	subs	r3, r5, #1
 80082ea:	9305      	str	r3, [sp, #20]
 80082ec:	bf45      	ittet	mi
 80082ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80082f2:	9304      	strmi	r3, [sp, #16]
 80082f4:	2300      	movpl	r3, #0
 80082f6:	2300      	movmi	r3, #0
 80082f8:	bf4c      	ite	mi
 80082fa:	9305      	strmi	r3, [sp, #20]
 80082fc:	9304      	strpl	r3, [sp, #16]
 80082fe:	9b00      	ldr	r3, [sp, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	db3d      	blt.n	8008380 <_dtoa_r+0x248>
 8008304:	9b05      	ldr	r3, [sp, #20]
 8008306:	9a00      	ldr	r2, [sp, #0]
 8008308:	920a      	str	r2, [sp, #40]	; 0x28
 800830a:	4413      	add	r3, r2
 800830c:	9305      	str	r3, [sp, #20]
 800830e:	2300      	movs	r3, #0
 8008310:	9307      	str	r3, [sp, #28]
 8008312:	9b06      	ldr	r3, [sp, #24]
 8008314:	2b09      	cmp	r3, #9
 8008316:	f200 8089 	bhi.w	800842c <_dtoa_r+0x2f4>
 800831a:	2b05      	cmp	r3, #5
 800831c:	bfc4      	itt	gt
 800831e:	3b04      	subgt	r3, #4
 8008320:	9306      	strgt	r3, [sp, #24]
 8008322:	9b06      	ldr	r3, [sp, #24]
 8008324:	f1a3 0302 	sub.w	r3, r3, #2
 8008328:	bfcc      	ite	gt
 800832a:	2500      	movgt	r5, #0
 800832c:	2501      	movle	r5, #1
 800832e:	2b03      	cmp	r3, #3
 8008330:	f200 8087 	bhi.w	8008442 <_dtoa_r+0x30a>
 8008334:	e8df f003 	tbb	[pc, r3]
 8008338:	59383a2d 	.word	0x59383a2d
 800833c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008340:	441d      	add	r5, r3
 8008342:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008346:	2b20      	cmp	r3, #32
 8008348:	bfc1      	itttt	gt
 800834a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800834e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008352:	fa0b f303 	lslgt.w	r3, fp, r3
 8008356:	fa26 f000 	lsrgt.w	r0, r6, r0
 800835a:	bfda      	itte	le
 800835c:	f1c3 0320 	rsble	r3, r3, #32
 8008360:	fa06 f003 	lslle.w	r0, r6, r3
 8008364:	4318      	orrgt	r0, r3
 8008366:	f7f8 f8d5 	bl	8000514 <__aeabi_ui2d>
 800836a:	2301      	movs	r3, #1
 800836c:	4606      	mov	r6, r0
 800836e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008372:	3d01      	subs	r5, #1
 8008374:	930e      	str	r3, [sp, #56]	; 0x38
 8008376:	e76a      	b.n	800824e <_dtoa_r+0x116>
 8008378:	2301      	movs	r3, #1
 800837a:	e7b2      	b.n	80082e2 <_dtoa_r+0x1aa>
 800837c:	900b      	str	r0, [sp, #44]	; 0x2c
 800837e:	e7b1      	b.n	80082e4 <_dtoa_r+0x1ac>
 8008380:	9b04      	ldr	r3, [sp, #16]
 8008382:	9a00      	ldr	r2, [sp, #0]
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	9304      	str	r3, [sp, #16]
 8008388:	4253      	negs	r3, r2
 800838a:	9307      	str	r3, [sp, #28]
 800838c:	2300      	movs	r3, #0
 800838e:	930a      	str	r3, [sp, #40]	; 0x28
 8008390:	e7bf      	b.n	8008312 <_dtoa_r+0x1da>
 8008392:	2300      	movs	r3, #0
 8008394:	9308      	str	r3, [sp, #32]
 8008396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008398:	2b00      	cmp	r3, #0
 800839a:	dc55      	bgt.n	8008448 <_dtoa_r+0x310>
 800839c:	2301      	movs	r3, #1
 800839e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083a2:	461a      	mov	r2, r3
 80083a4:	9209      	str	r2, [sp, #36]	; 0x24
 80083a6:	e00c      	b.n	80083c2 <_dtoa_r+0x28a>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e7f3      	b.n	8008394 <_dtoa_r+0x25c>
 80083ac:	2300      	movs	r3, #0
 80083ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083b0:	9308      	str	r3, [sp, #32]
 80083b2:	9b00      	ldr	r3, [sp, #0]
 80083b4:	4413      	add	r3, r2
 80083b6:	9302      	str	r3, [sp, #8]
 80083b8:	3301      	adds	r3, #1
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	bfb8      	it	lt
 80083c0:	2301      	movlt	r3, #1
 80083c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083c4:	2200      	movs	r2, #0
 80083c6:	6042      	str	r2, [r0, #4]
 80083c8:	2204      	movs	r2, #4
 80083ca:	f102 0614 	add.w	r6, r2, #20
 80083ce:	429e      	cmp	r6, r3
 80083d0:	6841      	ldr	r1, [r0, #4]
 80083d2:	d93d      	bls.n	8008450 <_dtoa_r+0x318>
 80083d4:	4620      	mov	r0, r4
 80083d6:	f001 f82b 	bl	8009430 <_Balloc>
 80083da:	9001      	str	r0, [sp, #4]
 80083dc:	2800      	cmp	r0, #0
 80083de:	d13b      	bne.n	8008458 <_dtoa_r+0x320>
 80083e0:	4b11      	ldr	r3, [pc, #68]	; (8008428 <_dtoa_r+0x2f0>)
 80083e2:	4602      	mov	r2, r0
 80083e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083e8:	e6c0      	b.n	800816c <_dtoa_r+0x34>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e7df      	b.n	80083ae <_dtoa_r+0x276>
 80083ee:	bf00      	nop
 80083f0:	636f4361 	.word	0x636f4361
 80083f4:	3fd287a7 	.word	0x3fd287a7
 80083f8:	8b60c8b3 	.word	0x8b60c8b3
 80083fc:	3fc68a28 	.word	0x3fc68a28
 8008400:	509f79fb 	.word	0x509f79fb
 8008404:	3fd34413 	.word	0x3fd34413
 8008408:	0800b7e6 	.word	0x0800b7e6
 800840c:	0800b7fd 	.word	0x0800b7fd
 8008410:	7ff00000 	.word	0x7ff00000
 8008414:	0800b7e2 	.word	0x0800b7e2
 8008418:	0800b7d9 	.word	0x0800b7d9
 800841c:	0800b665 	.word	0x0800b665
 8008420:	3ff80000 	.word	0x3ff80000
 8008424:	0800b968 	.word	0x0800b968
 8008428:	0800b858 	.word	0x0800b858
 800842c:	2501      	movs	r5, #1
 800842e:	2300      	movs	r3, #0
 8008430:	9306      	str	r3, [sp, #24]
 8008432:	9508      	str	r5, [sp, #32]
 8008434:	f04f 33ff 	mov.w	r3, #4294967295
 8008438:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800843c:	2200      	movs	r2, #0
 800843e:	2312      	movs	r3, #18
 8008440:	e7b0      	b.n	80083a4 <_dtoa_r+0x26c>
 8008442:	2301      	movs	r3, #1
 8008444:	9308      	str	r3, [sp, #32]
 8008446:	e7f5      	b.n	8008434 <_dtoa_r+0x2fc>
 8008448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800844e:	e7b8      	b.n	80083c2 <_dtoa_r+0x28a>
 8008450:	3101      	adds	r1, #1
 8008452:	6041      	str	r1, [r0, #4]
 8008454:	0052      	lsls	r2, r2, #1
 8008456:	e7b8      	b.n	80083ca <_dtoa_r+0x292>
 8008458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800845a:	9a01      	ldr	r2, [sp, #4]
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	2b0e      	cmp	r3, #14
 8008462:	f200 809d 	bhi.w	80085a0 <_dtoa_r+0x468>
 8008466:	2d00      	cmp	r5, #0
 8008468:	f000 809a 	beq.w	80085a0 <_dtoa_r+0x468>
 800846c:	9b00      	ldr	r3, [sp, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	dd32      	ble.n	80084d8 <_dtoa_r+0x3a0>
 8008472:	4ab7      	ldr	r2, [pc, #732]	; (8008750 <_dtoa_r+0x618>)
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800847c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008480:	9b00      	ldr	r3, [sp, #0]
 8008482:	05d8      	lsls	r0, r3, #23
 8008484:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008488:	d516      	bpl.n	80084b8 <_dtoa_r+0x380>
 800848a:	4bb2      	ldr	r3, [pc, #712]	; (8008754 <_dtoa_r+0x61c>)
 800848c:	ec51 0b19 	vmov	r0, r1, d9
 8008490:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008494:	f7f8 f9e2 	bl	800085c <__aeabi_ddiv>
 8008498:	f007 070f 	and.w	r7, r7, #15
 800849c:	4682      	mov	sl, r0
 800849e:	468b      	mov	fp, r1
 80084a0:	2503      	movs	r5, #3
 80084a2:	4eac      	ldr	r6, [pc, #688]	; (8008754 <_dtoa_r+0x61c>)
 80084a4:	b957      	cbnz	r7, 80084bc <_dtoa_r+0x384>
 80084a6:	4642      	mov	r2, r8
 80084a8:	464b      	mov	r3, r9
 80084aa:	4650      	mov	r0, sl
 80084ac:	4659      	mov	r1, fp
 80084ae:	f7f8 f9d5 	bl	800085c <__aeabi_ddiv>
 80084b2:	4682      	mov	sl, r0
 80084b4:	468b      	mov	fp, r1
 80084b6:	e028      	b.n	800850a <_dtoa_r+0x3d2>
 80084b8:	2502      	movs	r5, #2
 80084ba:	e7f2      	b.n	80084a2 <_dtoa_r+0x36a>
 80084bc:	07f9      	lsls	r1, r7, #31
 80084be:	d508      	bpl.n	80084d2 <_dtoa_r+0x39a>
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084c8:	f7f8 f89e 	bl	8000608 <__aeabi_dmul>
 80084cc:	3501      	adds	r5, #1
 80084ce:	4680      	mov	r8, r0
 80084d0:	4689      	mov	r9, r1
 80084d2:	107f      	asrs	r7, r7, #1
 80084d4:	3608      	adds	r6, #8
 80084d6:	e7e5      	b.n	80084a4 <_dtoa_r+0x36c>
 80084d8:	f000 809b 	beq.w	8008612 <_dtoa_r+0x4da>
 80084dc:	9b00      	ldr	r3, [sp, #0]
 80084de:	4f9d      	ldr	r7, [pc, #628]	; (8008754 <_dtoa_r+0x61c>)
 80084e0:	425e      	negs	r6, r3
 80084e2:	4b9b      	ldr	r3, [pc, #620]	; (8008750 <_dtoa_r+0x618>)
 80084e4:	f006 020f 	and.w	r2, r6, #15
 80084e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	ec51 0b19 	vmov	r0, r1, d9
 80084f4:	f7f8 f888 	bl	8000608 <__aeabi_dmul>
 80084f8:	1136      	asrs	r6, r6, #4
 80084fa:	4682      	mov	sl, r0
 80084fc:	468b      	mov	fp, r1
 80084fe:	2300      	movs	r3, #0
 8008500:	2502      	movs	r5, #2
 8008502:	2e00      	cmp	r6, #0
 8008504:	d17a      	bne.n	80085fc <_dtoa_r+0x4c4>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1d3      	bne.n	80084b2 <_dtoa_r+0x37a>
 800850a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8082 	beq.w	8008616 <_dtoa_r+0x4de>
 8008512:	4b91      	ldr	r3, [pc, #580]	; (8008758 <_dtoa_r+0x620>)
 8008514:	2200      	movs	r2, #0
 8008516:	4650      	mov	r0, sl
 8008518:	4659      	mov	r1, fp
 800851a:	f7f8 fae7 	bl	8000aec <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	d079      	beq.n	8008616 <_dtoa_r+0x4de>
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d076      	beq.n	8008616 <_dtoa_r+0x4de>
 8008528:	9b02      	ldr	r3, [sp, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	dd36      	ble.n	800859c <_dtoa_r+0x464>
 800852e:	9b00      	ldr	r3, [sp, #0]
 8008530:	4650      	mov	r0, sl
 8008532:	4659      	mov	r1, fp
 8008534:	1e5f      	subs	r7, r3, #1
 8008536:	2200      	movs	r2, #0
 8008538:	4b88      	ldr	r3, [pc, #544]	; (800875c <_dtoa_r+0x624>)
 800853a:	f7f8 f865 	bl	8000608 <__aeabi_dmul>
 800853e:	9e02      	ldr	r6, [sp, #8]
 8008540:	4682      	mov	sl, r0
 8008542:	468b      	mov	fp, r1
 8008544:	3501      	adds	r5, #1
 8008546:	4628      	mov	r0, r5
 8008548:	f7f7 fff4 	bl	8000534 <__aeabi_i2d>
 800854c:	4652      	mov	r2, sl
 800854e:	465b      	mov	r3, fp
 8008550:	f7f8 f85a 	bl	8000608 <__aeabi_dmul>
 8008554:	4b82      	ldr	r3, [pc, #520]	; (8008760 <_dtoa_r+0x628>)
 8008556:	2200      	movs	r2, #0
 8008558:	f7f7 fea0 	bl	800029c <__adddf3>
 800855c:	46d0      	mov	r8, sl
 800855e:	46d9      	mov	r9, fp
 8008560:	4682      	mov	sl, r0
 8008562:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008566:	2e00      	cmp	r6, #0
 8008568:	d158      	bne.n	800861c <_dtoa_r+0x4e4>
 800856a:	4b7e      	ldr	r3, [pc, #504]	; (8008764 <_dtoa_r+0x62c>)
 800856c:	2200      	movs	r2, #0
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f7 fe91 	bl	8000298 <__aeabi_dsub>
 8008576:	4652      	mov	r2, sl
 8008578:	465b      	mov	r3, fp
 800857a:	4680      	mov	r8, r0
 800857c:	4689      	mov	r9, r1
 800857e:	f7f8 fad3 	bl	8000b28 <__aeabi_dcmpgt>
 8008582:	2800      	cmp	r0, #0
 8008584:	f040 8295 	bne.w	8008ab2 <_dtoa_r+0x97a>
 8008588:	4652      	mov	r2, sl
 800858a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800858e:	4640      	mov	r0, r8
 8008590:	4649      	mov	r1, r9
 8008592:	f7f8 faab 	bl	8000aec <__aeabi_dcmplt>
 8008596:	2800      	cmp	r0, #0
 8008598:	f040 8289 	bne.w	8008aae <_dtoa_r+0x976>
 800859c:	ec5b ab19 	vmov	sl, fp, d9
 80085a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f2c0 8148 	blt.w	8008838 <_dtoa_r+0x700>
 80085a8:	9a00      	ldr	r2, [sp, #0]
 80085aa:	2a0e      	cmp	r2, #14
 80085ac:	f300 8144 	bgt.w	8008838 <_dtoa_r+0x700>
 80085b0:	4b67      	ldr	r3, [pc, #412]	; (8008750 <_dtoa_r+0x618>)
 80085b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f280 80d5 	bge.w	800876c <_dtoa_r+0x634>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f300 80d1 	bgt.w	800876c <_dtoa_r+0x634>
 80085ca:	f040 826f 	bne.w	8008aac <_dtoa_r+0x974>
 80085ce:	4b65      	ldr	r3, [pc, #404]	; (8008764 <_dtoa_r+0x62c>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	f7f8 f817 	bl	8000608 <__aeabi_dmul>
 80085da:	4652      	mov	r2, sl
 80085dc:	465b      	mov	r3, fp
 80085de:	f7f8 fa99 	bl	8000b14 <__aeabi_dcmpge>
 80085e2:	9e03      	ldr	r6, [sp, #12]
 80085e4:	4637      	mov	r7, r6
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f040 8245 	bne.w	8008a76 <_dtoa_r+0x93e>
 80085ec:	9d01      	ldr	r5, [sp, #4]
 80085ee:	2331      	movs	r3, #49	; 0x31
 80085f0:	f805 3b01 	strb.w	r3, [r5], #1
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	3301      	adds	r3, #1
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	e240      	b.n	8008a7e <_dtoa_r+0x946>
 80085fc:	07f2      	lsls	r2, r6, #31
 80085fe:	d505      	bpl.n	800860c <_dtoa_r+0x4d4>
 8008600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008604:	f7f8 f800 	bl	8000608 <__aeabi_dmul>
 8008608:	3501      	adds	r5, #1
 800860a:	2301      	movs	r3, #1
 800860c:	1076      	asrs	r6, r6, #1
 800860e:	3708      	adds	r7, #8
 8008610:	e777      	b.n	8008502 <_dtoa_r+0x3ca>
 8008612:	2502      	movs	r5, #2
 8008614:	e779      	b.n	800850a <_dtoa_r+0x3d2>
 8008616:	9f00      	ldr	r7, [sp, #0]
 8008618:	9e03      	ldr	r6, [sp, #12]
 800861a:	e794      	b.n	8008546 <_dtoa_r+0x40e>
 800861c:	9901      	ldr	r1, [sp, #4]
 800861e:	4b4c      	ldr	r3, [pc, #304]	; (8008750 <_dtoa_r+0x618>)
 8008620:	4431      	add	r1, r6
 8008622:	910d      	str	r1, [sp, #52]	; 0x34
 8008624:	9908      	ldr	r1, [sp, #32]
 8008626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800862a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800862e:	2900      	cmp	r1, #0
 8008630:	d043      	beq.n	80086ba <_dtoa_r+0x582>
 8008632:	494d      	ldr	r1, [pc, #308]	; (8008768 <_dtoa_r+0x630>)
 8008634:	2000      	movs	r0, #0
 8008636:	f7f8 f911 	bl	800085c <__aeabi_ddiv>
 800863a:	4652      	mov	r2, sl
 800863c:	465b      	mov	r3, fp
 800863e:	f7f7 fe2b 	bl	8000298 <__aeabi_dsub>
 8008642:	9d01      	ldr	r5, [sp, #4]
 8008644:	4682      	mov	sl, r0
 8008646:	468b      	mov	fp, r1
 8008648:	4649      	mov	r1, r9
 800864a:	4640      	mov	r0, r8
 800864c:	f7f8 fa8c 	bl	8000b68 <__aeabi_d2iz>
 8008650:	4606      	mov	r6, r0
 8008652:	f7f7 ff6f 	bl	8000534 <__aeabi_i2d>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4640      	mov	r0, r8
 800865c:	4649      	mov	r1, r9
 800865e:	f7f7 fe1b 	bl	8000298 <__aeabi_dsub>
 8008662:	3630      	adds	r6, #48	; 0x30
 8008664:	f805 6b01 	strb.w	r6, [r5], #1
 8008668:	4652      	mov	r2, sl
 800866a:	465b      	mov	r3, fp
 800866c:	4680      	mov	r8, r0
 800866e:	4689      	mov	r9, r1
 8008670:	f7f8 fa3c 	bl	8000aec <__aeabi_dcmplt>
 8008674:	2800      	cmp	r0, #0
 8008676:	d163      	bne.n	8008740 <_dtoa_r+0x608>
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	4936      	ldr	r1, [pc, #216]	; (8008758 <_dtoa_r+0x620>)
 800867e:	2000      	movs	r0, #0
 8008680:	f7f7 fe0a 	bl	8000298 <__aeabi_dsub>
 8008684:	4652      	mov	r2, sl
 8008686:	465b      	mov	r3, fp
 8008688:	f7f8 fa30 	bl	8000aec <__aeabi_dcmplt>
 800868c:	2800      	cmp	r0, #0
 800868e:	f040 80b5 	bne.w	80087fc <_dtoa_r+0x6c4>
 8008692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008694:	429d      	cmp	r5, r3
 8008696:	d081      	beq.n	800859c <_dtoa_r+0x464>
 8008698:	4b30      	ldr	r3, [pc, #192]	; (800875c <_dtoa_r+0x624>)
 800869a:	2200      	movs	r2, #0
 800869c:	4650      	mov	r0, sl
 800869e:	4659      	mov	r1, fp
 80086a0:	f7f7 ffb2 	bl	8000608 <__aeabi_dmul>
 80086a4:	4b2d      	ldr	r3, [pc, #180]	; (800875c <_dtoa_r+0x624>)
 80086a6:	4682      	mov	sl, r0
 80086a8:	468b      	mov	fp, r1
 80086aa:	4640      	mov	r0, r8
 80086ac:	4649      	mov	r1, r9
 80086ae:	2200      	movs	r2, #0
 80086b0:	f7f7 ffaa 	bl	8000608 <__aeabi_dmul>
 80086b4:	4680      	mov	r8, r0
 80086b6:	4689      	mov	r9, r1
 80086b8:	e7c6      	b.n	8008648 <_dtoa_r+0x510>
 80086ba:	4650      	mov	r0, sl
 80086bc:	4659      	mov	r1, fp
 80086be:	f7f7 ffa3 	bl	8000608 <__aeabi_dmul>
 80086c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086c4:	9d01      	ldr	r5, [sp, #4]
 80086c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086c8:	4682      	mov	sl, r0
 80086ca:	468b      	mov	fp, r1
 80086cc:	4649      	mov	r1, r9
 80086ce:	4640      	mov	r0, r8
 80086d0:	f7f8 fa4a 	bl	8000b68 <__aeabi_d2iz>
 80086d4:	4606      	mov	r6, r0
 80086d6:	f7f7 ff2d 	bl	8000534 <__aeabi_i2d>
 80086da:	3630      	adds	r6, #48	; 0x30
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4640      	mov	r0, r8
 80086e2:	4649      	mov	r1, r9
 80086e4:	f7f7 fdd8 	bl	8000298 <__aeabi_dsub>
 80086e8:	f805 6b01 	strb.w	r6, [r5], #1
 80086ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ee:	429d      	cmp	r5, r3
 80086f0:	4680      	mov	r8, r0
 80086f2:	4689      	mov	r9, r1
 80086f4:	f04f 0200 	mov.w	r2, #0
 80086f8:	d124      	bne.n	8008744 <_dtoa_r+0x60c>
 80086fa:	4b1b      	ldr	r3, [pc, #108]	; (8008768 <_dtoa_r+0x630>)
 80086fc:	4650      	mov	r0, sl
 80086fe:	4659      	mov	r1, fp
 8008700:	f7f7 fdcc 	bl	800029c <__adddf3>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f8 fa0c 	bl	8000b28 <__aeabi_dcmpgt>
 8008710:	2800      	cmp	r0, #0
 8008712:	d173      	bne.n	80087fc <_dtoa_r+0x6c4>
 8008714:	4652      	mov	r2, sl
 8008716:	465b      	mov	r3, fp
 8008718:	4913      	ldr	r1, [pc, #76]	; (8008768 <_dtoa_r+0x630>)
 800871a:	2000      	movs	r0, #0
 800871c:	f7f7 fdbc 	bl	8000298 <__aeabi_dsub>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4640      	mov	r0, r8
 8008726:	4649      	mov	r1, r9
 8008728:	f7f8 f9e0 	bl	8000aec <__aeabi_dcmplt>
 800872c:	2800      	cmp	r0, #0
 800872e:	f43f af35 	beq.w	800859c <_dtoa_r+0x464>
 8008732:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008734:	1e6b      	subs	r3, r5, #1
 8008736:	930f      	str	r3, [sp, #60]	; 0x3c
 8008738:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800873c:	2b30      	cmp	r3, #48	; 0x30
 800873e:	d0f8      	beq.n	8008732 <_dtoa_r+0x5fa>
 8008740:	9700      	str	r7, [sp, #0]
 8008742:	e049      	b.n	80087d8 <_dtoa_r+0x6a0>
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <_dtoa_r+0x624>)
 8008746:	f7f7 ff5f 	bl	8000608 <__aeabi_dmul>
 800874a:	4680      	mov	r8, r0
 800874c:	4689      	mov	r9, r1
 800874e:	e7bd      	b.n	80086cc <_dtoa_r+0x594>
 8008750:	0800b968 	.word	0x0800b968
 8008754:	0800b940 	.word	0x0800b940
 8008758:	3ff00000 	.word	0x3ff00000
 800875c:	40240000 	.word	0x40240000
 8008760:	401c0000 	.word	0x401c0000
 8008764:	40140000 	.word	0x40140000
 8008768:	3fe00000 	.word	0x3fe00000
 800876c:	9d01      	ldr	r5, [sp, #4]
 800876e:	4656      	mov	r6, sl
 8008770:	465f      	mov	r7, fp
 8008772:	4642      	mov	r2, r8
 8008774:	464b      	mov	r3, r9
 8008776:	4630      	mov	r0, r6
 8008778:	4639      	mov	r1, r7
 800877a:	f7f8 f86f 	bl	800085c <__aeabi_ddiv>
 800877e:	f7f8 f9f3 	bl	8000b68 <__aeabi_d2iz>
 8008782:	4682      	mov	sl, r0
 8008784:	f7f7 fed6 	bl	8000534 <__aeabi_i2d>
 8008788:	4642      	mov	r2, r8
 800878a:	464b      	mov	r3, r9
 800878c:	f7f7 ff3c 	bl	8000608 <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4630      	mov	r0, r6
 8008796:	4639      	mov	r1, r7
 8008798:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800879c:	f7f7 fd7c 	bl	8000298 <__aeabi_dsub>
 80087a0:	f805 6b01 	strb.w	r6, [r5], #1
 80087a4:	9e01      	ldr	r6, [sp, #4]
 80087a6:	9f03      	ldr	r7, [sp, #12]
 80087a8:	1bae      	subs	r6, r5, r6
 80087aa:	42b7      	cmp	r7, r6
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	d135      	bne.n	800881e <_dtoa_r+0x6e6>
 80087b2:	f7f7 fd73 	bl	800029c <__adddf3>
 80087b6:	4642      	mov	r2, r8
 80087b8:	464b      	mov	r3, r9
 80087ba:	4606      	mov	r6, r0
 80087bc:	460f      	mov	r7, r1
 80087be:	f7f8 f9b3 	bl	8000b28 <__aeabi_dcmpgt>
 80087c2:	b9d0      	cbnz	r0, 80087fa <_dtoa_r+0x6c2>
 80087c4:	4642      	mov	r2, r8
 80087c6:	464b      	mov	r3, r9
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 f984 	bl	8000ad8 <__aeabi_dcmpeq>
 80087d0:	b110      	cbz	r0, 80087d8 <_dtoa_r+0x6a0>
 80087d2:	f01a 0f01 	tst.w	sl, #1
 80087d6:	d110      	bne.n	80087fa <_dtoa_r+0x6c2>
 80087d8:	4620      	mov	r0, r4
 80087da:	ee18 1a10 	vmov	r1, s16
 80087de:	f000 fe67 	bl	80094b0 <_Bfree>
 80087e2:	2300      	movs	r3, #0
 80087e4:	9800      	ldr	r0, [sp, #0]
 80087e6:	702b      	strb	r3, [r5, #0]
 80087e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ea:	3001      	adds	r0, #1
 80087ec:	6018      	str	r0, [r3, #0]
 80087ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f43f acf1 	beq.w	80081d8 <_dtoa_r+0xa0>
 80087f6:	601d      	str	r5, [r3, #0]
 80087f8:	e4ee      	b.n	80081d8 <_dtoa_r+0xa0>
 80087fa:	9f00      	ldr	r7, [sp, #0]
 80087fc:	462b      	mov	r3, r5
 80087fe:	461d      	mov	r5, r3
 8008800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008804:	2a39      	cmp	r2, #57	; 0x39
 8008806:	d106      	bne.n	8008816 <_dtoa_r+0x6de>
 8008808:	9a01      	ldr	r2, [sp, #4]
 800880a:	429a      	cmp	r2, r3
 800880c:	d1f7      	bne.n	80087fe <_dtoa_r+0x6c6>
 800880e:	9901      	ldr	r1, [sp, #4]
 8008810:	2230      	movs	r2, #48	; 0x30
 8008812:	3701      	adds	r7, #1
 8008814:	700a      	strb	r2, [r1, #0]
 8008816:	781a      	ldrb	r2, [r3, #0]
 8008818:	3201      	adds	r2, #1
 800881a:	701a      	strb	r2, [r3, #0]
 800881c:	e790      	b.n	8008740 <_dtoa_r+0x608>
 800881e:	4ba6      	ldr	r3, [pc, #664]	; (8008ab8 <_dtoa_r+0x980>)
 8008820:	2200      	movs	r2, #0
 8008822:	f7f7 fef1 	bl	8000608 <__aeabi_dmul>
 8008826:	2200      	movs	r2, #0
 8008828:	2300      	movs	r3, #0
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	f7f8 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 8008832:	2800      	cmp	r0, #0
 8008834:	d09d      	beq.n	8008772 <_dtoa_r+0x63a>
 8008836:	e7cf      	b.n	80087d8 <_dtoa_r+0x6a0>
 8008838:	9a08      	ldr	r2, [sp, #32]
 800883a:	2a00      	cmp	r2, #0
 800883c:	f000 80d7 	beq.w	80089ee <_dtoa_r+0x8b6>
 8008840:	9a06      	ldr	r2, [sp, #24]
 8008842:	2a01      	cmp	r2, #1
 8008844:	f300 80ba 	bgt.w	80089bc <_dtoa_r+0x884>
 8008848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800884a:	2a00      	cmp	r2, #0
 800884c:	f000 80b2 	beq.w	80089b4 <_dtoa_r+0x87c>
 8008850:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008854:	9e07      	ldr	r6, [sp, #28]
 8008856:	9d04      	ldr	r5, [sp, #16]
 8008858:	9a04      	ldr	r2, [sp, #16]
 800885a:	441a      	add	r2, r3
 800885c:	9204      	str	r2, [sp, #16]
 800885e:	9a05      	ldr	r2, [sp, #20]
 8008860:	2101      	movs	r1, #1
 8008862:	441a      	add	r2, r3
 8008864:	4620      	mov	r0, r4
 8008866:	9205      	str	r2, [sp, #20]
 8008868:	f000 ff24 	bl	80096b4 <__i2b>
 800886c:	4607      	mov	r7, r0
 800886e:	2d00      	cmp	r5, #0
 8008870:	dd0c      	ble.n	800888c <_dtoa_r+0x754>
 8008872:	9b05      	ldr	r3, [sp, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	dd09      	ble.n	800888c <_dtoa_r+0x754>
 8008878:	42ab      	cmp	r3, r5
 800887a:	9a04      	ldr	r2, [sp, #16]
 800887c:	bfa8      	it	ge
 800887e:	462b      	movge	r3, r5
 8008880:	1ad2      	subs	r2, r2, r3
 8008882:	9204      	str	r2, [sp, #16]
 8008884:	9a05      	ldr	r2, [sp, #20]
 8008886:	1aed      	subs	r5, r5, r3
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	9b07      	ldr	r3, [sp, #28]
 800888e:	b31b      	cbz	r3, 80088d8 <_dtoa_r+0x7a0>
 8008890:	9b08      	ldr	r3, [sp, #32]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 80af 	beq.w	80089f6 <_dtoa_r+0x8be>
 8008898:	2e00      	cmp	r6, #0
 800889a:	dd13      	ble.n	80088c4 <_dtoa_r+0x78c>
 800889c:	4639      	mov	r1, r7
 800889e:	4632      	mov	r2, r6
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 ffc7 	bl	8009834 <__pow5mult>
 80088a6:	ee18 2a10 	vmov	r2, s16
 80088aa:	4601      	mov	r1, r0
 80088ac:	4607      	mov	r7, r0
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 ff16 	bl	80096e0 <__multiply>
 80088b4:	ee18 1a10 	vmov	r1, s16
 80088b8:	4680      	mov	r8, r0
 80088ba:	4620      	mov	r0, r4
 80088bc:	f000 fdf8 	bl	80094b0 <_Bfree>
 80088c0:	ee08 8a10 	vmov	s16, r8
 80088c4:	9b07      	ldr	r3, [sp, #28]
 80088c6:	1b9a      	subs	r2, r3, r6
 80088c8:	d006      	beq.n	80088d8 <_dtoa_r+0x7a0>
 80088ca:	ee18 1a10 	vmov	r1, s16
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 ffb0 	bl	8009834 <__pow5mult>
 80088d4:	ee08 0a10 	vmov	s16, r0
 80088d8:	2101      	movs	r1, #1
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 feea 	bl	80096b4 <__i2b>
 80088e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	4606      	mov	r6, r0
 80088e6:	f340 8088 	ble.w	80089fa <_dtoa_r+0x8c2>
 80088ea:	461a      	mov	r2, r3
 80088ec:	4601      	mov	r1, r0
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 ffa0 	bl	8009834 <__pow5mult>
 80088f4:	9b06      	ldr	r3, [sp, #24]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	4606      	mov	r6, r0
 80088fa:	f340 8081 	ble.w	8008a00 <_dtoa_r+0x8c8>
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	6933      	ldr	r3, [r6, #16]
 8008904:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008908:	6918      	ldr	r0, [r3, #16]
 800890a:	f000 fe83 	bl	8009614 <__hi0bits>
 800890e:	f1c0 0020 	rsb	r0, r0, #32
 8008912:	9b05      	ldr	r3, [sp, #20]
 8008914:	4418      	add	r0, r3
 8008916:	f010 001f 	ands.w	r0, r0, #31
 800891a:	f000 8092 	beq.w	8008a42 <_dtoa_r+0x90a>
 800891e:	f1c0 0320 	rsb	r3, r0, #32
 8008922:	2b04      	cmp	r3, #4
 8008924:	f340 808a 	ble.w	8008a3c <_dtoa_r+0x904>
 8008928:	f1c0 001c 	rsb	r0, r0, #28
 800892c:	9b04      	ldr	r3, [sp, #16]
 800892e:	4403      	add	r3, r0
 8008930:	9304      	str	r3, [sp, #16]
 8008932:	9b05      	ldr	r3, [sp, #20]
 8008934:	4403      	add	r3, r0
 8008936:	4405      	add	r5, r0
 8008938:	9305      	str	r3, [sp, #20]
 800893a:	9b04      	ldr	r3, [sp, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	dd07      	ble.n	8008950 <_dtoa_r+0x818>
 8008940:	ee18 1a10 	vmov	r1, s16
 8008944:	461a      	mov	r2, r3
 8008946:	4620      	mov	r0, r4
 8008948:	f000 ffce 	bl	80098e8 <__lshift>
 800894c:	ee08 0a10 	vmov	s16, r0
 8008950:	9b05      	ldr	r3, [sp, #20]
 8008952:	2b00      	cmp	r3, #0
 8008954:	dd05      	ble.n	8008962 <_dtoa_r+0x82a>
 8008956:	4631      	mov	r1, r6
 8008958:	461a      	mov	r2, r3
 800895a:	4620      	mov	r0, r4
 800895c:	f000 ffc4 	bl	80098e8 <__lshift>
 8008960:	4606      	mov	r6, r0
 8008962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d06e      	beq.n	8008a46 <_dtoa_r+0x90e>
 8008968:	ee18 0a10 	vmov	r0, s16
 800896c:	4631      	mov	r1, r6
 800896e:	f001 f82b 	bl	80099c8 <__mcmp>
 8008972:	2800      	cmp	r0, #0
 8008974:	da67      	bge.n	8008a46 <_dtoa_r+0x90e>
 8008976:	9b00      	ldr	r3, [sp, #0]
 8008978:	3b01      	subs	r3, #1
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	220a      	movs	r2, #10
 8008982:	2300      	movs	r3, #0
 8008984:	4620      	mov	r0, r4
 8008986:	f000 fdb5 	bl	80094f4 <__multadd>
 800898a:	9b08      	ldr	r3, [sp, #32]
 800898c:	ee08 0a10 	vmov	s16, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 81b1 	beq.w	8008cf8 <_dtoa_r+0xbc0>
 8008996:	2300      	movs	r3, #0
 8008998:	4639      	mov	r1, r7
 800899a:	220a      	movs	r2, #10
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fda9 	bl	80094f4 <__multadd>
 80089a2:	9b02      	ldr	r3, [sp, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	4607      	mov	r7, r0
 80089a8:	f300 808e 	bgt.w	8008ac8 <_dtoa_r+0x990>
 80089ac:	9b06      	ldr	r3, [sp, #24]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	dc51      	bgt.n	8008a56 <_dtoa_r+0x91e>
 80089b2:	e089      	b.n	8008ac8 <_dtoa_r+0x990>
 80089b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089ba:	e74b      	b.n	8008854 <_dtoa_r+0x71c>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	1e5e      	subs	r6, r3, #1
 80089c0:	9b07      	ldr	r3, [sp, #28]
 80089c2:	42b3      	cmp	r3, r6
 80089c4:	bfbf      	itttt	lt
 80089c6:	9b07      	ldrlt	r3, [sp, #28]
 80089c8:	9607      	strlt	r6, [sp, #28]
 80089ca:	1af2      	sublt	r2, r6, r3
 80089cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089ce:	bfb6      	itet	lt
 80089d0:	189b      	addlt	r3, r3, r2
 80089d2:	1b9e      	subge	r6, r3, r6
 80089d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	bfb8      	it	lt
 80089da:	2600      	movlt	r6, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	bfb7      	itett	lt
 80089e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089e8:	1a9d      	sublt	r5, r3, r2
 80089ea:	2300      	movlt	r3, #0
 80089ec:	e734      	b.n	8008858 <_dtoa_r+0x720>
 80089ee:	9e07      	ldr	r6, [sp, #28]
 80089f0:	9d04      	ldr	r5, [sp, #16]
 80089f2:	9f08      	ldr	r7, [sp, #32]
 80089f4:	e73b      	b.n	800886e <_dtoa_r+0x736>
 80089f6:	9a07      	ldr	r2, [sp, #28]
 80089f8:	e767      	b.n	80088ca <_dtoa_r+0x792>
 80089fa:	9b06      	ldr	r3, [sp, #24]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	dc18      	bgt.n	8008a32 <_dtoa_r+0x8fa>
 8008a00:	f1ba 0f00 	cmp.w	sl, #0
 8008a04:	d115      	bne.n	8008a32 <_dtoa_r+0x8fa>
 8008a06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a0a:	b993      	cbnz	r3, 8008a32 <_dtoa_r+0x8fa>
 8008a0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a10:	0d1b      	lsrs	r3, r3, #20
 8008a12:	051b      	lsls	r3, r3, #20
 8008a14:	b183      	cbz	r3, 8008a38 <_dtoa_r+0x900>
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	9b05      	ldr	r3, [sp, #20]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	9305      	str	r3, [sp, #20]
 8008a22:	f04f 0801 	mov.w	r8, #1
 8008a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f47f af6a 	bne.w	8008902 <_dtoa_r+0x7ca>
 8008a2e:	2001      	movs	r0, #1
 8008a30:	e76f      	b.n	8008912 <_dtoa_r+0x7da>
 8008a32:	f04f 0800 	mov.w	r8, #0
 8008a36:	e7f6      	b.n	8008a26 <_dtoa_r+0x8ee>
 8008a38:	4698      	mov	r8, r3
 8008a3a:	e7f4      	b.n	8008a26 <_dtoa_r+0x8ee>
 8008a3c:	f43f af7d 	beq.w	800893a <_dtoa_r+0x802>
 8008a40:	4618      	mov	r0, r3
 8008a42:	301c      	adds	r0, #28
 8008a44:	e772      	b.n	800892c <_dtoa_r+0x7f4>
 8008a46:	9b03      	ldr	r3, [sp, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	dc37      	bgt.n	8008abc <_dtoa_r+0x984>
 8008a4c:	9b06      	ldr	r3, [sp, #24]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	dd34      	ble.n	8008abc <_dtoa_r+0x984>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	9302      	str	r3, [sp, #8]
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	b96b      	cbnz	r3, 8008a76 <_dtoa_r+0x93e>
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	2205      	movs	r2, #5
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fd48 	bl	80094f4 <__multadd>
 8008a64:	4601      	mov	r1, r0
 8008a66:	4606      	mov	r6, r0
 8008a68:	ee18 0a10 	vmov	r0, s16
 8008a6c:	f000 ffac 	bl	80099c8 <__mcmp>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f73f adbb 	bgt.w	80085ec <_dtoa_r+0x4b4>
 8008a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a78:	9d01      	ldr	r5, [sp, #4]
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	4631      	mov	r1, r6
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 fd13 	bl	80094b0 <_Bfree>
 8008a8a:	2f00      	cmp	r7, #0
 8008a8c:	f43f aea4 	beq.w	80087d8 <_dtoa_r+0x6a0>
 8008a90:	f1b8 0f00 	cmp.w	r8, #0
 8008a94:	d005      	beq.n	8008aa2 <_dtoa_r+0x96a>
 8008a96:	45b8      	cmp	r8, r7
 8008a98:	d003      	beq.n	8008aa2 <_dtoa_r+0x96a>
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 fd07 	bl	80094b0 <_Bfree>
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 fd03 	bl	80094b0 <_Bfree>
 8008aaa:	e695      	b.n	80087d8 <_dtoa_r+0x6a0>
 8008aac:	2600      	movs	r6, #0
 8008aae:	4637      	mov	r7, r6
 8008ab0:	e7e1      	b.n	8008a76 <_dtoa_r+0x93e>
 8008ab2:	9700      	str	r7, [sp, #0]
 8008ab4:	4637      	mov	r7, r6
 8008ab6:	e599      	b.n	80085ec <_dtoa_r+0x4b4>
 8008ab8:	40240000 	.word	0x40240000
 8008abc:	9b08      	ldr	r3, [sp, #32]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 80ca 	beq.w	8008c58 <_dtoa_r+0xb20>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	9302      	str	r3, [sp, #8]
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	dd05      	ble.n	8008ad8 <_dtoa_r+0x9a0>
 8008acc:	4639      	mov	r1, r7
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 ff09 	bl	80098e8 <__lshift>
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	f1b8 0f00 	cmp.w	r8, #0
 8008adc:	d05b      	beq.n	8008b96 <_dtoa_r+0xa5e>
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fca5 	bl	8009430 <_Balloc>
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	b928      	cbnz	r0, 8008af6 <_dtoa_r+0x9be>
 8008aea:	4b87      	ldr	r3, [pc, #540]	; (8008d08 <_dtoa_r+0xbd0>)
 8008aec:	4602      	mov	r2, r0
 8008aee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008af2:	f7ff bb3b 	b.w	800816c <_dtoa_r+0x34>
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	3202      	adds	r2, #2
 8008afa:	0092      	lsls	r2, r2, #2
 8008afc:	f107 010c 	add.w	r1, r7, #12
 8008b00:	300c      	adds	r0, #12
 8008b02:	f7fd ff11 	bl	8006928 <memcpy>
 8008b06:	2201      	movs	r2, #1
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f000 feec 	bl	80098e8 <__lshift>
 8008b10:	9b01      	ldr	r3, [sp, #4]
 8008b12:	f103 0901 	add.w	r9, r3, #1
 8008b16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	9305      	str	r3, [sp, #20]
 8008b1e:	f00a 0301 	and.w	r3, sl, #1
 8008b22:	46b8      	mov	r8, r7
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	4607      	mov	r7, r0
 8008b28:	4631      	mov	r1, r6
 8008b2a:	ee18 0a10 	vmov	r0, s16
 8008b2e:	f7ff fa75 	bl	800801c <quorem>
 8008b32:	4641      	mov	r1, r8
 8008b34:	9002      	str	r0, [sp, #8]
 8008b36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b3a:	ee18 0a10 	vmov	r0, s16
 8008b3e:	f000 ff43 	bl	80099c8 <__mcmp>
 8008b42:	463a      	mov	r2, r7
 8008b44:	9003      	str	r0, [sp, #12]
 8008b46:	4631      	mov	r1, r6
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 ff59 	bl	8009a00 <__mdiff>
 8008b4e:	68c2      	ldr	r2, [r0, #12]
 8008b50:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b54:	4605      	mov	r5, r0
 8008b56:	bb02      	cbnz	r2, 8008b9a <_dtoa_r+0xa62>
 8008b58:	4601      	mov	r1, r0
 8008b5a:	ee18 0a10 	vmov	r0, s16
 8008b5e:	f000 ff33 	bl	80099c8 <__mcmp>
 8008b62:	4602      	mov	r2, r0
 8008b64:	4629      	mov	r1, r5
 8008b66:	4620      	mov	r0, r4
 8008b68:	9207      	str	r2, [sp, #28]
 8008b6a:	f000 fca1 	bl	80094b0 <_Bfree>
 8008b6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b72:	ea43 0102 	orr.w	r1, r3, r2
 8008b76:	9b04      	ldr	r3, [sp, #16]
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	464d      	mov	r5, r9
 8008b7c:	d10f      	bne.n	8008b9e <_dtoa_r+0xa66>
 8008b7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b82:	d02a      	beq.n	8008bda <_dtoa_r+0xaa2>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	dd02      	ble.n	8008b90 <_dtoa_r+0xa58>
 8008b8a:	9b02      	ldr	r3, [sp, #8]
 8008b8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b90:	f88b a000 	strb.w	sl, [fp]
 8008b94:	e775      	b.n	8008a82 <_dtoa_r+0x94a>
 8008b96:	4638      	mov	r0, r7
 8008b98:	e7ba      	b.n	8008b10 <_dtoa_r+0x9d8>
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	e7e2      	b.n	8008b64 <_dtoa_r+0xa2c>
 8008b9e:	9b03      	ldr	r3, [sp, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	db04      	blt.n	8008bae <_dtoa_r+0xa76>
 8008ba4:	9906      	ldr	r1, [sp, #24]
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	9904      	ldr	r1, [sp, #16]
 8008baa:	430b      	orrs	r3, r1
 8008bac:	d122      	bne.n	8008bf4 <_dtoa_r+0xabc>
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	ddee      	ble.n	8008b90 <_dtoa_r+0xa58>
 8008bb2:	ee18 1a10 	vmov	r1, s16
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 fe95 	bl	80098e8 <__lshift>
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	ee08 0a10 	vmov	s16, r0
 8008bc4:	f000 ff00 	bl	80099c8 <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	dc03      	bgt.n	8008bd4 <_dtoa_r+0xa9c>
 8008bcc:	d1e0      	bne.n	8008b90 <_dtoa_r+0xa58>
 8008bce:	f01a 0f01 	tst.w	sl, #1
 8008bd2:	d0dd      	beq.n	8008b90 <_dtoa_r+0xa58>
 8008bd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bd8:	d1d7      	bne.n	8008b8a <_dtoa_r+0xa52>
 8008bda:	2339      	movs	r3, #57	; 0x39
 8008bdc:	f88b 3000 	strb.w	r3, [fp]
 8008be0:	462b      	mov	r3, r5
 8008be2:	461d      	mov	r5, r3
 8008be4:	3b01      	subs	r3, #1
 8008be6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bea:	2a39      	cmp	r2, #57	; 0x39
 8008bec:	d071      	beq.n	8008cd2 <_dtoa_r+0xb9a>
 8008bee:	3201      	adds	r2, #1
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	e746      	b.n	8008a82 <_dtoa_r+0x94a>
 8008bf4:	2a00      	cmp	r2, #0
 8008bf6:	dd07      	ble.n	8008c08 <_dtoa_r+0xad0>
 8008bf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bfc:	d0ed      	beq.n	8008bda <_dtoa_r+0xaa2>
 8008bfe:	f10a 0301 	add.w	r3, sl, #1
 8008c02:	f88b 3000 	strb.w	r3, [fp]
 8008c06:	e73c      	b.n	8008a82 <_dtoa_r+0x94a>
 8008c08:	9b05      	ldr	r3, [sp, #20]
 8008c0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c0e:	4599      	cmp	r9, r3
 8008c10:	d047      	beq.n	8008ca2 <_dtoa_r+0xb6a>
 8008c12:	ee18 1a10 	vmov	r1, s16
 8008c16:	2300      	movs	r3, #0
 8008c18:	220a      	movs	r2, #10
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 fc6a 	bl	80094f4 <__multadd>
 8008c20:	45b8      	cmp	r8, r7
 8008c22:	ee08 0a10 	vmov	s16, r0
 8008c26:	f04f 0300 	mov.w	r3, #0
 8008c2a:	f04f 020a 	mov.w	r2, #10
 8008c2e:	4641      	mov	r1, r8
 8008c30:	4620      	mov	r0, r4
 8008c32:	d106      	bne.n	8008c42 <_dtoa_r+0xb0a>
 8008c34:	f000 fc5e 	bl	80094f4 <__multadd>
 8008c38:	4680      	mov	r8, r0
 8008c3a:	4607      	mov	r7, r0
 8008c3c:	f109 0901 	add.w	r9, r9, #1
 8008c40:	e772      	b.n	8008b28 <_dtoa_r+0x9f0>
 8008c42:	f000 fc57 	bl	80094f4 <__multadd>
 8008c46:	4639      	mov	r1, r7
 8008c48:	4680      	mov	r8, r0
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	220a      	movs	r2, #10
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fc50 	bl	80094f4 <__multadd>
 8008c54:	4607      	mov	r7, r0
 8008c56:	e7f1      	b.n	8008c3c <_dtoa_r+0xb04>
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	9302      	str	r3, [sp, #8]
 8008c5c:	9d01      	ldr	r5, [sp, #4]
 8008c5e:	ee18 0a10 	vmov	r0, s16
 8008c62:	4631      	mov	r1, r6
 8008c64:	f7ff f9da 	bl	800801c <quorem>
 8008c68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c6c:	9b01      	ldr	r3, [sp, #4]
 8008c6e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c72:	1aea      	subs	r2, r5, r3
 8008c74:	9b02      	ldr	r3, [sp, #8]
 8008c76:	4293      	cmp	r3, r2
 8008c78:	dd09      	ble.n	8008c8e <_dtoa_r+0xb56>
 8008c7a:	ee18 1a10 	vmov	r1, s16
 8008c7e:	2300      	movs	r3, #0
 8008c80:	220a      	movs	r2, #10
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 fc36 	bl	80094f4 <__multadd>
 8008c88:	ee08 0a10 	vmov	s16, r0
 8008c8c:	e7e7      	b.n	8008c5e <_dtoa_r+0xb26>
 8008c8e:	9b02      	ldr	r3, [sp, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfc8      	it	gt
 8008c94:	461d      	movgt	r5, r3
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	bfd8      	it	le
 8008c9a:	2501      	movle	r5, #1
 8008c9c:	441d      	add	r5, r3
 8008c9e:	f04f 0800 	mov.w	r8, #0
 8008ca2:	ee18 1a10 	vmov	r1, s16
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fe1d 	bl	80098e8 <__lshift>
 8008cae:	4631      	mov	r1, r6
 8008cb0:	ee08 0a10 	vmov	s16, r0
 8008cb4:	f000 fe88 	bl	80099c8 <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	dc91      	bgt.n	8008be0 <_dtoa_r+0xaa8>
 8008cbc:	d102      	bne.n	8008cc4 <_dtoa_r+0xb8c>
 8008cbe:	f01a 0f01 	tst.w	sl, #1
 8008cc2:	d18d      	bne.n	8008be0 <_dtoa_r+0xaa8>
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	461d      	mov	r5, r3
 8008cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ccc:	2a30      	cmp	r2, #48	; 0x30
 8008cce:	d0fa      	beq.n	8008cc6 <_dtoa_r+0xb8e>
 8008cd0:	e6d7      	b.n	8008a82 <_dtoa_r+0x94a>
 8008cd2:	9a01      	ldr	r2, [sp, #4]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d184      	bne.n	8008be2 <_dtoa_r+0xaaa>
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	2331      	movs	r3, #49	; 0x31
 8008ce0:	7013      	strb	r3, [r2, #0]
 8008ce2:	e6ce      	b.n	8008a82 <_dtoa_r+0x94a>
 8008ce4:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <_dtoa_r+0xbd4>)
 8008ce6:	f7ff ba95 	b.w	8008214 <_dtoa_r+0xdc>
 8008cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f47f aa6e 	bne.w	80081ce <_dtoa_r+0x96>
 8008cf2:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <_dtoa_r+0xbd8>)
 8008cf4:	f7ff ba8e 	b.w	8008214 <_dtoa_r+0xdc>
 8008cf8:	9b02      	ldr	r3, [sp, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dcae      	bgt.n	8008c5c <_dtoa_r+0xb24>
 8008cfe:	9b06      	ldr	r3, [sp, #24]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	f73f aea8 	bgt.w	8008a56 <_dtoa_r+0x91e>
 8008d06:	e7a9      	b.n	8008c5c <_dtoa_r+0xb24>
 8008d08:	0800b858 	.word	0x0800b858
 8008d0c:	0800b664 	.word	0x0800b664
 8008d10:	0800b7d9 	.word	0x0800b7d9

08008d14 <rshift>:
 8008d14:	6903      	ldr	r3, [r0, #16]
 8008d16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d22:	f100 0414 	add.w	r4, r0, #20
 8008d26:	dd45      	ble.n	8008db4 <rshift+0xa0>
 8008d28:	f011 011f 	ands.w	r1, r1, #31
 8008d2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d34:	d10c      	bne.n	8008d50 <rshift+0x3c>
 8008d36:	f100 0710 	add.w	r7, r0, #16
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	42b1      	cmp	r1, r6
 8008d3e:	d334      	bcc.n	8008daa <rshift+0x96>
 8008d40:	1a9b      	subs	r3, r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	1eea      	subs	r2, r5, #3
 8008d46:	4296      	cmp	r6, r2
 8008d48:	bf38      	it	cc
 8008d4a:	2300      	movcc	r3, #0
 8008d4c:	4423      	add	r3, r4
 8008d4e:	e015      	b.n	8008d7c <rshift+0x68>
 8008d50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d54:	f1c1 0820 	rsb	r8, r1, #32
 8008d58:	40cf      	lsrs	r7, r1
 8008d5a:	f105 0e04 	add.w	lr, r5, #4
 8008d5e:	46a1      	mov	r9, r4
 8008d60:	4576      	cmp	r6, lr
 8008d62:	46f4      	mov	ip, lr
 8008d64:	d815      	bhi.n	8008d92 <rshift+0x7e>
 8008d66:	1a9a      	subs	r2, r3, r2
 8008d68:	0092      	lsls	r2, r2, #2
 8008d6a:	3a04      	subs	r2, #4
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	42ae      	cmp	r6, r5
 8008d70:	bf38      	it	cc
 8008d72:	2200      	movcc	r2, #0
 8008d74:	18a3      	adds	r3, r4, r2
 8008d76:	50a7      	str	r7, [r4, r2]
 8008d78:	b107      	cbz	r7, 8008d7c <rshift+0x68>
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	1b1a      	subs	r2, r3, r4
 8008d7e:	42a3      	cmp	r3, r4
 8008d80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d84:	bf08      	it	eq
 8008d86:	2300      	moveq	r3, #0
 8008d88:	6102      	str	r2, [r0, #16]
 8008d8a:	bf08      	it	eq
 8008d8c:	6143      	streq	r3, [r0, #20]
 8008d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d92:	f8dc c000 	ldr.w	ip, [ip]
 8008d96:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d9a:	ea4c 0707 	orr.w	r7, ip, r7
 8008d9e:	f849 7b04 	str.w	r7, [r9], #4
 8008da2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008da6:	40cf      	lsrs	r7, r1
 8008da8:	e7da      	b.n	8008d60 <rshift+0x4c>
 8008daa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008dae:	f847 cf04 	str.w	ip, [r7, #4]!
 8008db2:	e7c3      	b.n	8008d3c <rshift+0x28>
 8008db4:	4623      	mov	r3, r4
 8008db6:	e7e1      	b.n	8008d7c <rshift+0x68>

08008db8 <__hexdig_fun>:
 8008db8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008dbc:	2b09      	cmp	r3, #9
 8008dbe:	d802      	bhi.n	8008dc6 <__hexdig_fun+0xe>
 8008dc0:	3820      	subs	r0, #32
 8008dc2:	b2c0      	uxtb	r0, r0
 8008dc4:	4770      	bx	lr
 8008dc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	d801      	bhi.n	8008dd2 <__hexdig_fun+0x1a>
 8008dce:	3847      	subs	r0, #71	; 0x47
 8008dd0:	e7f7      	b.n	8008dc2 <__hexdig_fun+0xa>
 8008dd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008dd6:	2b05      	cmp	r3, #5
 8008dd8:	d801      	bhi.n	8008dde <__hexdig_fun+0x26>
 8008dda:	3827      	subs	r0, #39	; 0x27
 8008ddc:	e7f1      	b.n	8008dc2 <__hexdig_fun+0xa>
 8008dde:	2000      	movs	r0, #0
 8008de0:	4770      	bx	lr
	...

08008de4 <__gethex>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	ed2d 8b02 	vpush	{d8}
 8008dec:	b089      	sub	sp, #36	; 0x24
 8008dee:	ee08 0a10 	vmov	s16, r0
 8008df2:	9304      	str	r3, [sp, #16]
 8008df4:	4bb4      	ldr	r3, [pc, #720]	; (80090c8 <__gethex+0x2e4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	468b      	mov	fp, r1
 8008dfe:	4690      	mov	r8, r2
 8008e00:	f7f7 f9ee 	bl	80001e0 <strlen>
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	f8db 2000 	ldr.w	r2, [fp]
 8008e0a:	4403      	add	r3, r0
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	1c93      	adds	r3, r2, #2
 8008e16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e1e:	32fe      	adds	r2, #254	; 0xfe
 8008e20:	18d1      	adds	r1, r2, r3
 8008e22:	461f      	mov	r7, r3
 8008e24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e28:	9100      	str	r1, [sp, #0]
 8008e2a:	2830      	cmp	r0, #48	; 0x30
 8008e2c:	d0f8      	beq.n	8008e20 <__gethex+0x3c>
 8008e2e:	f7ff ffc3 	bl	8008db8 <__hexdig_fun>
 8008e32:	4604      	mov	r4, r0
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d13a      	bne.n	8008eae <__gethex+0xca>
 8008e38:	9901      	ldr	r1, [sp, #4]
 8008e3a:	4652      	mov	r2, sl
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f001 fa23 	bl	800a288 <strncmp>
 8008e42:	4605      	mov	r5, r0
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d168      	bne.n	8008f1a <__gethex+0x136>
 8008e48:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e4c:	eb07 060a 	add.w	r6, r7, sl
 8008e50:	f7ff ffb2 	bl	8008db8 <__hexdig_fun>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d062      	beq.n	8008f1e <__gethex+0x13a>
 8008e58:	4633      	mov	r3, r6
 8008e5a:	7818      	ldrb	r0, [r3, #0]
 8008e5c:	2830      	cmp	r0, #48	; 0x30
 8008e5e:	461f      	mov	r7, r3
 8008e60:	f103 0301 	add.w	r3, r3, #1
 8008e64:	d0f9      	beq.n	8008e5a <__gethex+0x76>
 8008e66:	f7ff ffa7 	bl	8008db8 <__hexdig_fun>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	fab0 f480 	clz	r4, r0
 8008e70:	0964      	lsrs	r4, r4, #5
 8008e72:	4635      	mov	r5, r6
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	463a      	mov	r2, r7
 8008e78:	4616      	mov	r6, r2
 8008e7a:	3201      	adds	r2, #1
 8008e7c:	7830      	ldrb	r0, [r6, #0]
 8008e7e:	f7ff ff9b 	bl	8008db8 <__hexdig_fun>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d1f8      	bne.n	8008e78 <__gethex+0x94>
 8008e86:	9901      	ldr	r1, [sp, #4]
 8008e88:	4652      	mov	r2, sl
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f001 f9fc 	bl	800a288 <strncmp>
 8008e90:	b980      	cbnz	r0, 8008eb4 <__gethex+0xd0>
 8008e92:	b94d      	cbnz	r5, 8008ea8 <__gethex+0xc4>
 8008e94:	eb06 050a 	add.w	r5, r6, sl
 8008e98:	462a      	mov	r2, r5
 8008e9a:	4616      	mov	r6, r2
 8008e9c:	3201      	adds	r2, #1
 8008e9e:	7830      	ldrb	r0, [r6, #0]
 8008ea0:	f7ff ff8a 	bl	8008db8 <__hexdig_fun>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d1f8      	bne.n	8008e9a <__gethex+0xb6>
 8008ea8:	1bad      	subs	r5, r5, r6
 8008eaa:	00ad      	lsls	r5, r5, #2
 8008eac:	e004      	b.n	8008eb8 <__gethex+0xd4>
 8008eae:	2400      	movs	r4, #0
 8008eb0:	4625      	mov	r5, r4
 8008eb2:	e7e0      	b.n	8008e76 <__gethex+0x92>
 8008eb4:	2d00      	cmp	r5, #0
 8008eb6:	d1f7      	bne.n	8008ea8 <__gethex+0xc4>
 8008eb8:	7833      	ldrb	r3, [r6, #0]
 8008eba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ebe:	2b50      	cmp	r3, #80	; 0x50
 8008ec0:	d13b      	bne.n	8008f3a <__gethex+0x156>
 8008ec2:	7873      	ldrb	r3, [r6, #1]
 8008ec4:	2b2b      	cmp	r3, #43	; 0x2b
 8008ec6:	d02c      	beq.n	8008f22 <__gethex+0x13e>
 8008ec8:	2b2d      	cmp	r3, #45	; 0x2d
 8008eca:	d02e      	beq.n	8008f2a <__gethex+0x146>
 8008ecc:	1c71      	adds	r1, r6, #1
 8008ece:	f04f 0900 	mov.w	r9, #0
 8008ed2:	7808      	ldrb	r0, [r1, #0]
 8008ed4:	f7ff ff70 	bl	8008db8 <__hexdig_fun>
 8008ed8:	1e43      	subs	r3, r0, #1
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b18      	cmp	r3, #24
 8008ede:	d82c      	bhi.n	8008f3a <__gethex+0x156>
 8008ee0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ee4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ee8:	f7ff ff66 	bl	8008db8 <__hexdig_fun>
 8008eec:	1e43      	subs	r3, r0, #1
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b18      	cmp	r3, #24
 8008ef2:	d91d      	bls.n	8008f30 <__gethex+0x14c>
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	d000      	beq.n	8008efc <__gethex+0x118>
 8008efa:	4252      	negs	r2, r2
 8008efc:	4415      	add	r5, r2
 8008efe:	f8cb 1000 	str.w	r1, [fp]
 8008f02:	b1e4      	cbz	r4, 8008f3e <__gethex+0x15a>
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bf14      	ite	ne
 8008f0a:	2700      	movne	r7, #0
 8008f0c:	2706      	moveq	r7, #6
 8008f0e:	4638      	mov	r0, r7
 8008f10:	b009      	add	sp, #36	; 0x24
 8008f12:	ecbd 8b02 	vpop	{d8}
 8008f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	463e      	mov	r6, r7
 8008f1c:	4625      	mov	r5, r4
 8008f1e:	2401      	movs	r4, #1
 8008f20:	e7ca      	b.n	8008eb8 <__gethex+0xd4>
 8008f22:	f04f 0900 	mov.w	r9, #0
 8008f26:	1cb1      	adds	r1, r6, #2
 8008f28:	e7d3      	b.n	8008ed2 <__gethex+0xee>
 8008f2a:	f04f 0901 	mov.w	r9, #1
 8008f2e:	e7fa      	b.n	8008f26 <__gethex+0x142>
 8008f30:	230a      	movs	r3, #10
 8008f32:	fb03 0202 	mla	r2, r3, r2, r0
 8008f36:	3a10      	subs	r2, #16
 8008f38:	e7d4      	b.n	8008ee4 <__gethex+0x100>
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	e7df      	b.n	8008efe <__gethex+0x11a>
 8008f3e:	1bf3      	subs	r3, r6, r7
 8008f40:	3b01      	subs	r3, #1
 8008f42:	4621      	mov	r1, r4
 8008f44:	2b07      	cmp	r3, #7
 8008f46:	dc0b      	bgt.n	8008f60 <__gethex+0x17c>
 8008f48:	ee18 0a10 	vmov	r0, s16
 8008f4c:	f000 fa70 	bl	8009430 <_Balloc>
 8008f50:	4604      	mov	r4, r0
 8008f52:	b940      	cbnz	r0, 8008f66 <__gethex+0x182>
 8008f54:	4b5d      	ldr	r3, [pc, #372]	; (80090cc <__gethex+0x2e8>)
 8008f56:	4602      	mov	r2, r0
 8008f58:	21de      	movs	r1, #222	; 0xde
 8008f5a:	485d      	ldr	r0, [pc, #372]	; (80090d0 <__gethex+0x2ec>)
 8008f5c:	f001 f9b6 	bl	800a2cc <__assert_func>
 8008f60:	3101      	adds	r1, #1
 8008f62:	105b      	asrs	r3, r3, #1
 8008f64:	e7ee      	b.n	8008f44 <__gethex+0x160>
 8008f66:	f100 0914 	add.w	r9, r0, #20
 8008f6a:	f04f 0b00 	mov.w	fp, #0
 8008f6e:	f1ca 0301 	rsb	r3, sl, #1
 8008f72:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f76:	f8cd b000 	str.w	fp, [sp]
 8008f7a:	9306      	str	r3, [sp, #24]
 8008f7c:	42b7      	cmp	r7, r6
 8008f7e:	d340      	bcc.n	8009002 <__gethex+0x21e>
 8008f80:	9802      	ldr	r0, [sp, #8]
 8008f82:	9b00      	ldr	r3, [sp, #0]
 8008f84:	f840 3b04 	str.w	r3, [r0], #4
 8008f88:	eba0 0009 	sub.w	r0, r0, r9
 8008f8c:	1080      	asrs	r0, r0, #2
 8008f8e:	0146      	lsls	r6, r0, #5
 8008f90:	6120      	str	r0, [r4, #16]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fb3e 	bl	8009614 <__hi0bits>
 8008f98:	1a30      	subs	r0, r6, r0
 8008f9a:	f8d8 6000 	ldr.w	r6, [r8]
 8008f9e:	42b0      	cmp	r0, r6
 8008fa0:	dd63      	ble.n	800906a <__gethex+0x286>
 8008fa2:	1b87      	subs	r7, r0, r6
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 fee2 	bl	8009d70 <__any_on>
 8008fac:	4682      	mov	sl, r0
 8008fae:	b1a8      	cbz	r0, 8008fdc <__gethex+0x1f8>
 8008fb0:	1e7b      	subs	r3, r7, #1
 8008fb2:	1159      	asrs	r1, r3, #5
 8008fb4:	f003 021f 	and.w	r2, r3, #31
 8008fb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008fbc:	f04f 0a01 	mov.w	sl, #1
 8008fc0:	fa0a f202 	lsl.w	r2, sl, r2
 8008fc4:	420a      	tst	r2, r1
 8008fc6:	d009      	beq.n	8008fdc <__gethex+0x1f8>
 8008fc8:	4553      	cmp	r3, sl
 8008fca:	dd05      	ble.n	8008fd8 <__gethex+0x1f4>
 8008fcc:	1eb9      	subs	r1, r7, #2
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 fece 	bl	8009d70 <__any_on>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d145      	bne.n	8009064 <__gethex+0x280>
 8008fd8:	f04f 0a02 	mov.w	sl, #2
 8008fdc:	4639      	mov	r1, r7
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f7ff fe98 	bl	8008d14 <rshift>
 8008fe4:	443d      	add	r5, r7
 8008fe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fea:	42ab      	cmp	r3, r5
 8008fec:	da4c      	bge.n	8009088 <__gethex+0x2a4>
 8008fee:	ee18 0a10 	vmov	r0, s16
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	f000 fa5c 	bl	80094b0 <_Bfree>
 8008ff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	27a3      	movs	r7, #163	; 0xa3
 8009000:	e785      	b.n	8008f0e <__gethex+0x12a>
 8009002:	1e73      	subs	r3, r6, #1
 8009004:	9a05      	ldr	r2, [sp, #20]
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800900c:	4293      	cmp	r3, r2
 800900e:	d019      	beq.n	8009044 <__gethex+0x260>
 8009010:	f1bb 0f20 	cmp.w	fp, #32
 8009014:	d107      	bne.n	8009026 <__gethex+0x242>
 8009016:	9b02      	ldr	r3, [sp, #8]
 8009018:	9a00      	ldr	r2, [sp, #0]
 800901a:	f843 2b04 	str.w	r2, [r3], #4
 800901e:	9302      	str	r3, [sp, #8]
 8009020:	2300      	movs	r3, #0
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	469b      	mov	fp, r3
 8009026:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800902a:	f7ff fec5 	bl	8008db8 <__hexdig_fun>
 800902e:	9b00      	ldr	r3, [sp, #0]
 8009030:	f000 000f 	and.w	r0, r0, #15
 8009034:	fa00 f00b 	lsl.w	r0, r0, fp
 8009038:	4303      	orrs	r3, r0
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	f10b 0b04 	add.w	fp, fp, #4
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	e00d      	b.n	8009060 <__gethex+0x27c>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	9a06      	ldr	r2, [sp, #24]
 8009048:	4413      	add	r3, r2
 800904a:	42bb      	cmp	r3, r7
 800904c:	d3e0      	bcc.n	8009010 <__gethex+0x22c>
 800904e:	4618      	mov	r0, r3
 8009050:	9901      	ldr	r1, [sp, #4]
 8009052:	9307      	str	r3, [sp, #28]
 8009054:	4652      	mov	r2, sl
 8009056:	f001 f917 	bl	800a288 <strncmp>
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	2800      	cmp	r0, #0
 800905e:	d1d7      	bne.n	8009010 <__gethex+0x22c>
 8009060:	461e      	mov	r6, r3
 8009062:	e78b      	b.n	8008f7c <__gethex+0x198>
 8009064:	f04f 0a03 	mov.w	sl, #3
 8009068:	e7b8      	b.n	8008fdc <__gethex+0x1f8>
 800906a:	da0a      	bge.n	8009082 <__gethex+0x29e>
 800906c:	1a37      	subs	r7, r6, r0
 800906e:	4621      	mov	r1, r4
 8009070:	ee18 0a10 	vmov	r0, s16
 8009074:	463a      	mov	r2, r7
 8009076:	f000 fc37 	bl	80098e8 <__lshift>
 800907a:	1bed      	subs	r5, r5, r7
 800907c:	4604      	mov	r4, r0
 800907e:	f100 0914 	add.w	r9, r0, #20
 8009082:	f04f 0a00 	mov.w	sl, #0
 8009086:	e7ae      	b.n	8008fe6 <__gethex+0x202>
 8009088:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800908c:	42a8      	cmp	r0, r5
 800908e:	dd72      	ble.n	8009176 <__gethex+0x392>
 8009090:	1b45      	subs	r5, r0, r5
 8009092:	42ae      	cmp	r6, r5
 8009094:	dc36      	bgt.n	8009104 <__gethex+0x320>
 8009096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d02a      	beq.n	80090f4 <__gethex+0x310>
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d02c      	beq.n	80090fc <__gethex+0x318>
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d11c      	bne.n	80090e0 <__gethex+0x2fc>
 80090a6:	42ae      	cmp	r6, r5
 80090a8:	d11a      	bne.n	80090e0 <__gethex+0x2fc>
 80090aa:	2e01      	cmp	r6, #1
 80090ac:	d112      	bne.n	80090d4 <__gethex+0x2f0>
 80090ae:	9a04      	ldr	r2, [sp, #16]
 80090b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	2301      	movs	r3, #1
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	f8c9 3000 	str.w	r3, [r9]
 80090be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090c0:	2762      	movs	r7, #98	; 0x62
 80090c2:	601c      	str	r4, [r3, #0]
 80090c4:	e723      	b.n	8008f0e <__gethex+0x12a>
 80090c6:	bf00      	nop
 80090c8:	0800b8d0 	.word	0x0800b8d0
 80090cc:	0800b858 	.word	0x0800b858
 80090d0:	0800b869 	.word	0x0800b869
 80090d4:	1e71      	subs	r1, r6, #1
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fe4a 	bl	8009d70 <__any_on>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d1e6      	bne.n	80090ae <__gethex+0x2ca>
 80090e0:	ee18 0a10 	vmov	r0, s16
 80090e4:	4621      	mov	r1, r4
 80090e6:	f000 f9e3 	bl	80094b0 <_Bfree>
 80090ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090ec:	2300      	movs	r3, #0
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	2750      	movs	r7, #80	; 0x50
 80090f2:	e70c      	b.n	8008f0e <__gethex+0x12a>
 80090f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1f2      	bne.n	80090e0 <__gethex+0x2fc>
 80090fa:	e7d8      	b.n	80090ae <__gethex+0x2ca>
 80090fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1d5      	bne.n	80090ae <__gethex+0x2ca>
 8009102:	e7ed      	b.n	80090e0 <__gethex+0x2fc>
 8009104:	1e6f      	subs	r7, r5, #1
 8009106:	f1ba 0f00 	cmp.w	sl, #0
 800910a:	d131      	bne.n	8009170 <__gethex+0x38c>
 800910c:	b127      	cbz	r7, 8009118 <__gethex+0x334>
 800910e:	4639      	mov	r1, r7
 8009110:	4620      	mov	r0, r4
 8009112:	f000 fe2d 	bl	8009d70 <__any_on>
 8009116:	4682      	mov	sl, r0
 8009118:	117b      	asrs	r3, r7, #5
 800911a:	2101      	movs	r1, #1
 800911c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009120:	f007 071f 	and.w	r7, r7, #31
 8009124:	fa01 f707 	lsl.w	r7, r1, r7
 8009128:	421f      	tst	r7, r3
 800912a:	4629      	mov	r1, r5
 800912c:	4620      	mov	r0, r4
 800912e:	bf18      	it	ne
 8009130:	f04a 0a02 	orrne.w	sl, sl, #2
 8009134:	1b76      	subs	r6, r6, r5
 8009136:	f7ff fded 	bl	8008d14 <rshift>
 800913a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800913e:	2702      	movs	r7, #2
 8009140:	f1ba 0f00 	cmp.w	sl, #0
 8009144:	d048      	beq.n	80091d8 <__gethex+0x3f4>
 8009146:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d015      	beq.n	800917a <__gethex+0x396>
 800914e:	2b03      	cmp	r3, #3
 8009150:	d017      	beq.n	8009182 <__gethex+0x39e>
 8009152:	2b01      	cmp	r3, #1
 8009154:	d109      	bne.n	800916a <__gethex+0x386>
 8009156:	f01a 0f02 	tst.w	sl, #2
 800915a:	d006      	beq.n	800916a <__gethex+0x386>
 800915c:	f8d9 0000 	ldr.w	r0, [r9]
 8009160:	ea4a 0a00 	orr.w	sl, sl, r0
 8009164:	f01a 0f01 	tst.w	sl, #1
 8009168:	d10e      	bne.n	8009188 <__gethex+0x3a4>
 800916a:	f047 0710 	orr.w	r7, r7, #16
 800916e:	e033      	b.n	80091d8 <__gethex+0x3f4>
 8009170:	f04f 0a01 	mov.w	sl, #1
 8009174:	e7d0      	b.n	8009118 <__gethex+0x334>
 8009176:	2701      	movs	r7, #1
 8009178:	e7e2      	b.n	8009140 <__gethex+0x35c>
 800917a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800917c:	f1c3 0301 	rsb	r3, r3, #1
 8009180:	9315      	str	r3, [sp, #84]	; 0x54
 8009182:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0f0      	beq.n	800916a <__gethex+0x386>
 8009188:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800918c:	f104 0314 	add.w	r3, r4, #20
 8009190:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009194:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009198:	f04f 0c00 	mov.w	ip, #0
 800919c:	4618      	mov	r0, r3
 800919e:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091a6:	d01c      	beq.n	80091e2 <__gethex+0x3fe>
 80091a8:	3201      	adds	r2, #1
 80091aa:	6002      	str	r2, [r0, #0]
 80091ac:	2f02      	cmp	r7, #2
 80091ae:	f104 0314 	add.w	r3, r4, #20
 80091b2:	d13f      	bne.n	8009234 <__gethex+0x450>
 80091b4:	f8d8 2000 	ldr.w	r2, [r8]
 80091b8:	3a01      	subs	r2, #1
 80091ba:	42b2      	cmp	r2, r6
 80091bc:	d10a      	bne.n	80091d4 <__gethex+0x3f0>
 80091be:	1171      	asrs	r1, r6, #5
 80091c0:	2201      	movs	r2, #1
 80091c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091c6:	f006 061f 	and.w	r6, r6, #31
 80091ca:	fa02 f606 	lsl.w	r6, r2, r6
 80091ce:	421e      	tst	r6, r3
 80091d0:	bf18      	it	ne
 80091d2:	4617      	movne	r7, r2
 80091d4:	f047 0720 	orr.w	r7, r7, #32
 80091d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091da:	601c      	str	r4, [r3, #0]
 80091dc:	9b04      	ldr	r3, [sp, #16]
 80091de:	601d      	str	r5, [r3, #0]
 80091e0:	e695      	b.n	8008f0e <__gethex+0x12a>
 80091e2:	4299      	cmp	r1, r3
 80091e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80091e8:	d8d8      	bhi.n	800919c <__gethex+0x3b8>
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	459b      	cmp	fp, r3
 80091ee:	db19      	blt.n	8009224 <__gethex+0x440>
 80091f0:	6861      	ldr	r1, [r4, #4]
 80091f2:	ee18 0a10 	vmov	r0, s16
 80091f6:	3101      	adds	r1, #1
 80091f8:	f000 f91a 	bl	8009430 <_Balloc>
 80091fc:	4681      	mov	r9, r0
 80091fe:	b918      	cbnz	r0, 8009208 <__gethex+0x424>
 8009200:	4b1a      	ldr	r3, [pc, #104]	; (800926c <__gethex+0x488>)
 8009202:	4602      	mov	r2, r0
 8009204:	2184      	movs	r1, #132	; 0x84
 8009206:	e6a8      	b.n	8008f5a <__gethex+0x176>
 8009208:	6922      	ldr	r2, [r4, #16]
 800920a:	3202      	adds	r2, #2
 800920c:	f104 010c 	add.w	r1, r4, #12
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	300c      	adds	r0, #12
 8009214:	f7fd fb88 	bl	8006928 <memcpy>
 8009218:	4621      	mov	r1, r4
 800921a:	ee18 0a10 	vmov	r0, s16
 800921e:	f000 f947 	bl	80094b0 <_Bfree>
 8009222:	464c      	mov	r4, r9
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800922c:	6122      	str	r2, [r4, #16]
 800922e:	2201      	movs	r2, #1
 8009230:	615a      	str	r2, [r3, #20]
 8009232:	e7bb      	b.n	80091ac <__gethex+0x3c8>
 8009234:	6922      	ldr	r2, [r4, #16]
 8009236:	455a      	cmp	r2, fp
 8009238:	dd0b      	ble.n	8009252 <__gethex+0x46e>
 800923a:	2101      	movs	r1, #1
 800923c:	4620      	mov	r0, r4
 800923e:	f7ff fd69 	bl	8008d14 <rshift>
 8009242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009246:	3501      	adds	r5, #1
 8009248:	42ab      	cmp	r3, r5
 800924a:	f6ff aed0 	blt.w	8008fee <__gethex+0x20a>
 800924e:	2701      	movs	r7, #1
 8009250:	e7c0      	b.n	80091d4 <__gethex+0x3f0>
 8009252:	f016 061f 	ands.w	r6, r6, #31
 8009256:	d0fa      	beq.n	800924e <__gethex+0x46a>
 8009258:	4453      	add	r3, sl
 800925a:	f1c6 0620 	rsb	r6, r6, #32
 800925e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009262:	f000 f9d7 	bl	8009614 <__hi0bits>
 8009266:	42b0      	cmp	r0, r6
 8009268:	dbe7      	blt.n	800923a <__gethex+0x456>
 800926a:	e7f0      	b.n	800924e <__gethex+0x46a>
 800926c:	0800b858 	.word	0x0800b858

08009270 <L_shift>:
 8009270:	f1c2 0208 	rsb	r2, r2, #8
 8009274:	0092      	lsls	r2, r2, #2
 8009276:	b570      	push	{r4, r5, r6, lr}
 8009278:	f1c2 0620 	rsb	r6, r2, #32
 800927c:	6843      	ldr	r3, [r0, #4]
 800927e:	6804      	ldr	r4, [r0, #0]
 8009280:	fa03 f506 	lsl.w	r5, r3, r6
 8009284:	432c      	orrs	r4, r5
 8009286:	40d3      	lsrs	r3, r2
 8009288:	6004      	str	r4, [r0, #0]
 800928a:	f840 3f04 	str.w	r3, [r0, #4]!
 800928e:	4288      	cmp	r0, r1
 8009290:	d3f4      	bcc.n	800927c <L_shift+0xc>
 8009292:	bd70      	pop	{r4, r5, r6, pc}

08009294 <__match>:
 8009294:	b530      	push	{r4, r5, lr}
 8009296:	6803      	ldr	r3, [r0, #0]
 8009298:	3301      	adds	r3, #1
 800929a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800929e:	b914      	cbnz	r4, 80092a6 <__match+0x12>
 80092a0:	6003      	str	r3, [r0, #0]
 80092a2:	2001      	movs	r0, #1
 80092a4:	bd30      	pop	{r4, r5, pc}
 80092a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80092ae:	2d19      	cmp	r5, #25
 80092b0:	bf98      	it	ls
 80092b2:	3220      	addls	r2, #32
 80092b4:	42a2      	cmp	r2, r4
 80092b6:	d0f0      	beq.n	800929a <__match+0x6>
 80092b8:	2000      	movs	r0, #0
 80092ba:	e7f3      	b.n	80092a4 <__match+0x10>

080092bc <__hexnan>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	680b      	ldr	r3, [r1, #0]
 80092c2:	115e      	asrs	r6, r3, #5
 80092c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092c8:	f013 031f 	ands.w	r3, r3, #31
 80092cc:	b087      	sub	sp, #28
 80092ce:	bf18      	it	ne
 80092d0:	3604      	addne	r6, #4
 80092d2:	2500      	movs	r5, #0
 80092d4:	1f37      	subs	r7, r6, #4
 80092d6:	4690      	mov	r8, r2
 80092d8:	6802      	ldr	r2, [r0, #0]
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	4682      	mov	sl, r0
 80092de:	f846 5c04 	str.w	r5, [r6, #-4]
 80092e2:	46b9      	mov	r9, r7
 80092e4:	463c      	mov	r4, r7
 80092e6:	9502      	str	r5, [sp, #8]
 80092e8:	46ab      	mov	fp, r5
 80092ea:	7851      	ldrb	r1, [r2, #1]
 80092ec:	1c53      	adds	r3, r2, #1
 80092ee:	9303      	str	r3, [sp, #12]
 80092f0:	b341      	cbz	r1, 8009344 <__hexnan+0x88>
 80092f2:	4608      	mov	r0, r1
 80092f4:	9205      	str	r2, [sp, #20]
 80092f6:	9104      	str	r1, [sp, #16]
 80092f8:	f7ff fd5e 	bl	8008db8 <__hexdig_fun>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d14f      	bne.n	80093a0 <__hexnan+0xe4>
 8009300:	9904      	ldr	r1, [sp, #16]
 8009302:	9a05      	ldr	r2, [sp, #20]
 8009304:	2920      	cmp	r1, #32
 8009306:	d818      	bhi.n	800933a <__hexnan+0x7e>
 8009308:	9b02      	ldr	r3, [sp, #8]
 800930a:	459b      	cmp	fp, r3
 800930c:	dd13      	ble.n	8009336 <__hexnan+0x7a>
 800930e:	454c      	cmp	r4, r9
 8009310:	d206      	bcs.n	8009320 <__hexnan+0x64>
 8009312:	2d07      	cmp	r5, #7
 8009314:	dc04      	bgt.n	8009320 <__hexnan+0x64>
 8009316:	462a      	mov	r2, r5
 8009318:	4649      	mov	r1, r9
 800931a:	4620      	mov	r0, r4
 800931c:	f7ff ffa8 	bl	8009270 <L_shift>
 8009320:	4544      	cmp	r4, r8
 8009322:	d950      	bls.n	80093c6 <__hexnan+0x10a>
 8009324:	2300      	movs	r3, #0
 8009326:	f1a4 0904 	sub.w	r9, r4, #4
 800932a:	f844 3c04 	str.w	r3, [r4, #-4]
 800932e:	f8cd b008 	str.w	fp, [sp, #8]
 8009332:	464c      	mov	r4, r9
 8009334:	461d      	mov	r5, r3
 8009336:	9a03      	ldr	r2, [sp, #12]
 8009338:	e7d7      	b.n	80092ea <__hexnan+0x2e>
 800933a:	2929      	cmp	r1, #41	; 0x29
 800933c:	d156      	bne.n	80093ec <__hexnan+0x130>
 800933e:	3202      	adds	r2, #2
 8009340:	f8ca 2000 	str.w	r2, [sl]
 8009344:	f1bb 0f00 	cmp.w	fp, #0
 8009348:	d050      	beq.n	80093ec <__hexnan+0x130>
 800934a:	454c      	cmp	r4, r9
 800934c:	d206      	bcs.n	800935c <__hexnan+0xa0>
 800934e:	2d07      	cmp	r5, #7
 8009350:	dc04      	bgt.n	800935c <__hexnan+0xa0>
 8009352:	462a      	mov	r2, r5
 8009354:	4649      	mov	r1, r9
 8009356:	4620      	mov	r0, r4
 8009358:	f7ff ff8a 	bl	8009270 <L_shift>
 800935c:	4544      	cmp	r4, r8
 800935e:	d934      	bls.n	80093ca <__hexnan+0x10e>
 8009360:	f1a8 0204 	sub.w	r2, r8, #4
 8009364:	4623      	mov	r3, r4
 8009366:	f853 1b04 	ldr.w	r1, [r3], #4
 800936a:	f842 1f04 	str.w	r1, [r2, #4]!
 800936e:	429f      	cmp	r7, r3
 8009370:	d2f9      	bcs.n	8009366 <__hexnan+0xaa>
 8009372:	1b3b      	subs	r3, r7, r4
 8009374:	f023 0303 	bic.w	r3, r3, #3
 8009378:	3304      	adds	r3, #4
 800937a:	3401      	adds	r4, #1
 800937c:	3e03      	subs	r6, #3
 800937e:	42b4      	cmp	r4, r6
 8009380:	bf88      	it	hi
 8009382:	2304      	movhi	r3, #4
 8009384:	4443      	add	r3, r8
 8009386:	2200      	movs	r2, #0
 8009388:	f843 2b04 	str.w	r2, [r3], #4
 800938c:	429f      	cmp	r7, r3
 800938e:	d2fb      	bcs.n	8009388 <__hexnan+0xcc>
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	b91b      	cbnz	r3, 800939c <__hexnan+0xe0>
 8009394:	4547      	cmp	r7, r8
 8009396:	d127      	bne.n	80093e8 <__hexnan+0x12c>
 8009398:	2301      	movs	r3, #1
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	2005      	movs	r0, #5
 800939e:	e026      	b.n	80093ee <__hexnan+0x132>
 80093a0:	3501      	adds	r5, #1
 80093a2:	2d08      	cmp	r5, #8
 80093a4:	f10b 0b01 	add.w	fp, fp, #1
 80093a8:	dd06      	ble.n	80093b8 <__hexnan+0xfc>
 80093aa:	4544      	cmp	r4, r8
 80093ac:	d9c3      	bls.n	8009336 <__hexnan+0x7a>
 80093ae:	2300      	movs	r3, #0
 80093b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80093b4:	2501      	movs	r5, #1
 80093b6:	3c04      	subs	r4, #4
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	f000 000f 	and.w	r0, r0, #15
 80093be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80093c2:	6022      	str	r2, [r4, #0]
 80093c4:	e7b7      	b.n	8009336 <__hexnan+0x7a>
 80093c6:	2508      	movs	r5, #8
 80093c8:	e7b5      	b.n	8009336 <__hexnan+0x7a>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0df      	beq.n	8009390 <__hexnan+0xd4>
 80093d0:	f04f 32ff 	mov.w	r2, #4294967295
 80093d4:	f1c3 0320 	rsb	r3, r3, #32
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
 80093dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093e0:	401a      	ands	r2, r3
 80093e2:	f846 2c04 	str.w	r2, [r6, #-4]
 80093e6:	e7d3      	b.n	8009390 <__hexnan+0xd4>
 80093e8:	3f04      	subs	r7, #4
 80093ea:	e7d1      	b.n	8009390 <__hexnan+0xd4>
 80093ec:	2004      	movs	r0, #4
 80093ee:	b007      	add	sp, #28
 80093f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093f4 <_localeconv_r>:
 80093f4:	4800      	ldr	r0, [pc, #0]	; (80093f8 <_localeconv_r+0x4>)
 80093f6:	4770      	bx	lr
 80093f8:	20000164 	.word	0x20000164

080093fc <malloc>:
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <malloc+0xc>)
 80093fe:	4601      	mov	r1, r0
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	f000 bd59 	b.w	8009eb8 <_malloc_r>
 8009406:	bf00      	nop
 8009408:	2000000c 	.word	0x2000000c

0800940c <__ascii_mbtowc>:
 800940c:	b082      	sub	sp, #8
 800940e:	b901      	cbnz	r1, 8009412 <__ascii_mbtowc+0x6>
 8009410:	a901      	add	r1, sp, #4
 8009412:	b142      	cbz	r2, 8009426 <__ascii_mbtowc+0x1a>
 8009414:	b14b      	cbz	r3, 800942a <__ascii_mbtowc+0x1e>
 8009416:	7813      	ldrb	r3, [r2, #0]
 8009418:	600b      	str	r3, [r1, #0]
 800941a:	7812      	ldrb	r2, [r2, #0]
 800941c:	1e10      	subs	r0, r2, #0
 800941e:	bf18      	it	ne
 8009420:	2001      	movne	r0, #1
 8009422:	b002      	add	sp, #8
 8009424:	4770      	bx	lr
 8009426:	4610      	mov	r0, r2
 8009428:	e7fb      	b.n	8009422 <__ascii_mbtowc+0x16>
 800942a:	f06f 0001 	mvn.w	r0, #1
 800942e:	e7f8      	b.n	8009422 <__ascii_mbtowc+0x16>

08009430 <_Balloc>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009434:	4604      	mov	r4, r0
 8009436:	460d      	mov	r5, r1
 8009438:	b976      	cbnz	r6, 8009458 <_Balloc+0x28>
 800943a:	2010      	movs	r0, #16
 800943c:	f7ff ffde 	bl	80093fc <malloc>
 8009440:	4602      	mov	r2, r0
 8009442:	6260      	str	r0, [r4, #36]	; 0x24
 8009444:	b920      	cbnz	r0, 8009450 <_Balloc+0x20>
 8009446:	4b18      	ldr	r3, [pc, #96]	; (80094a8 <_Balloc+0x78>)
 8009448:	4818      	ldr	r0, [pc, #96]	; (80094ac <_Balloc+0x7c>)
 800944a:	2166      	movs	r1, #102	; 0x66
 800944c:	f000 ff3e 	bl	800a2cc <__assert_func>
 8009450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009454:	6006      	str	r6, [r0, #0]
 8009456:	60c6      	str	r6, [r0, #12]
 8009458:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800945a:	68f3      	ldr	r3, [r6, #12]
 800945c:	b183      	cbz	r3, 8009480 <_Balloc+0x50>
 800945e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009466:	b9b8      	cbnz	r0, 8009498 <_Balloc+0x68>
 8009468:	2101      	movs	r1, #1
 800946a:	fa01 f605 	lsl.w	r6, r1, r5
 800946e:	1d72      	adds	r2, r6, #5
 8009470:	0092      	lsls	r2, r2, #2
 8009472:	4620      	mov	r0, r4
 8009474:	f000 fc9d 	bl	8009db2 <_calloc_r>
 8009478:	b160      	cbz	r0, 8009494 <_Balloc+0x64>
 800947a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800947e:	e00e      	b.n	800949e <_Balloc+0x6e>
 8009480:	2221      	movs	r2, #33	; 0x21
 8009482:	2104      	movs	r1, #4
 8009484:	4620      	mov	r0, r4
 8009486:	f000 fc94 	bl	8009db2 <_calloc_r>
 800948a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948c:	60f0      	str	r0, [r6, #12]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e4      	bne.n	800945e <_Balloc+0x2e>
 8009494:	2000      	movs	r0, #0
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	6802      	ldr	r2, [r0, #0]
 800949a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800949e:	2300      	movs	r3, #0
 80094a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094a4:	e7f7      	b.n	8009496 <_Balloc+0x66>
 80094a6:	bf00      	nop
 80094a8:	0800b7e6 	.word	0x0800b7e6
 80094ac:	0800b8e4 	.word	0x0800b8e4

080094b0 <_Bfree>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094b4:	4605      	mov	r5, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	b976      	cbnz	r6, 80094d8 <_Bfree+0x28>
 80094ba:	2010      	movs	r0, #16
 80094bc:	f7ff ff9e 	bl	80093fc <malloc>
 80094c0:	4602      	mov	r2, r0
 80094c2:	6268      	str	r0, [r5, #36]	; 0x24
 80094c4:	b920      	cbnz	r0, 80094d0 <_Bfree+0x20>
 80094c6:	4b09      	ldr	r3, [pc, #36]	; (80094ec <_Bfree+0x3c>)
 80094c8:	4809      	ldr	r0, [pc, #36]	; (80094f0 <_Bfree+0x40>)
 80094ca:	218a      	movs	r1, #138	; 0x8a
 80094cc:	f000 fefe 	bl	800a2cc <__assert_func>
 80094d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094d4:	6006      	str	r6, [r0, #0]
 80094d6:	60c6      	str	r6, [r0, #12]
 80094d8:	b13c      	cbz	r4, 80094ea <_Bfree+0x3a>
 80094da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094dc:	6862      	ldr	r2, [r4, #4]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094e4:	6021      	str	r1, [r4, #0]
 80094e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	0800b7e6 	.word	0x0800b7e6
 80094f0:	0800b8e4 	.word	0x0800b8e4

080094f4 <__multadd>:
 80094f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f8:	690d      	ldr	r5, [r1, #16]
 80094fa:	4607      	mov	r7, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	461e      	mov	r6, r3
 8009500:	f101 0c14 	add.w	ip, r1, #20
 8009504:	2000      	movs	r0, #0
 8009506:	f8dc 3000 	ldr.w	r3, [ip]
 800950a:	b299      	uxth	r1, r3
 800950c:	fb02 6101 	mla	r1, r2, r1, r6
 8009510:	0c1e      	lsrs	r6, r3, #16
 8009512:	0c0b      	lsrs	r3, r1, #16
 8009514:	fb02 3306 	mla	r3, r2, r6, r3
 8009518:	b289      	uxth	r1, r1
 800951a:	3001      	adds	r0, #1
 800951c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009520:	4285      	cmp	r5, r0
 8009522:	f84c 1b04 	str.w	r1, [ip], #4
 8009526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800952a:	dcec      	bgt.n	8009506 <__multadd+0x12>
 800952c:	b30e      	cbz	r6, 8009572 <__multadd+0x7e>
 800952e:	68a3      	ldr	r3, [r4, #8]
 8009530:	42ab      	cmp	r3, r5
 8009532:	dc19      	bgt.n	8009568 <__multadd+0x74>
 8009534:	6861      	ldr	r1, [r4, #4]
 8009536:	4638      	mov	r0, r7
 8009538:	3101      	adds	r1, #1
 800953a:	f7ff ff79 	bl	8009430 <_Balloc>
 800953e:	4680      	mov	r8, r0
 8009540:	b928      	cbnz	r0, 800954e <__multadd+0x5a>
 8009542:	4602      	mov	r2, r0
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <__multadd+0x84>)
 8009546:	480d      	ldr	r0, [pc, #52]	; (800957c <__multadd+0x88>)
 8009548:	21b5      	movs	r1, #181	; 0xb5
 800954a:	f000 febf 	bl	800a2cc <__assert_func>
 800954e:	6922      	ldr	r2, [r4, #16]
 8009550:	3202      	adds	r2, #2
 8009552:	f104 010c 	add.w	r1, r4, #12
 8009556:	0092      	lsls	r2, r2, #2
 8009558:	300c      	adds	r0, #12
 800955a:	f7fd f9e5 	bl	8006928 <memcpy>
 800955e:	4621      	mov	r1, r4
 8009560:	4638      	mov	r0, r7
 8009562:	f7ff ffa5 	bl	80094b0 <_Bfree>
 8009566:	4644      	mov	r4, r8
 8009568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800956c:	3501      	adds	r5, #1
 800956e:	615e      	str	r6, [r3, #20]
 8009570:	6125      	str	r5, [r4, #16]
 8009572:	4620      	mov	r0, r4
 8009574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009578:	0800b858 	.word	0x0800b858
 800957c:	0800b8e4 	.word	0x0800b8e4

08009580 <__s2b>:
 8009580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009584:	460c      	mov	r4, r1
 8009586:	4615      	mov	r5, r2
 8009588:	461f      	mov	r7, r3
 800958a:	2209      	movs	r2, #9
 800958c:	3308      	adds	r3, #8
 800958e:	4606      	mov	r6, r0
 8009590:	fb93 f3f2 	sdiv	r3, r3, r2
 8009594:	2100      	movs	r1, #0
 8009596:	2201      	movs	r2, #1
 8009598:	429a      	cmp	r2, r3
 800959a:	db09      	blt.n	80095b0 <__s2b+0x30>
 800959c:	4630      	mov	r0, r6
 800959e:	f7ff ff47 	bl	8009430 <_Balloc>
 80095a2:	b940      	cbnz	r0, 80095b6 <__s2b+0x36>
 80095a4:	4602      	mov	r2, r0
 80095a6:	4b19      	ldr	r3, [pc, #100]	; (800960c <__s2b+0x8c>)
 80095a8:	4819      	ldr	r0, [pc, #100]	; (8009610 <__s2b+0x90>)
 80095aa:	21ce      	movs	r1, #206	; 0xce
 80095ac:	f000 fe8e 	bl	800a2cc <__assert_func>
 80095b0:	0052      	lsls	r2, r2, #1
 80095b2:	3101      	adds	r1, #1
 80095b4:	e7f0      	b.n	8009598 <__s2b+0x18>
 80095b6:	9b08      	ldr	r3, [sp, #32]
 80095b8:	6143      	str	r3, [r0, #20]
 80095ba:	2d09      	cmp	r5, #9
 80095bc:	f04f 0301 	mov.w	r3, #1
 80095c0:	6103      	str	r3, [r0, #16]
 80095c2:	dd16      	ble.n	80095f2 <__s2b+0x72>
 80095c4:	f104 0909 	add.w	r9, r4, #9
 80095c8:	46c8      	mov	r8, r9
 80095ca:	442c      	add	r4, r5
 80095cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095d0:	4601      	mov	r1, r0
 80095d2:	3b30      	subs	r3, #48	; 0x30
 80095d4:	220a      	movs	r2, #10
 80095d6:	4630      	mov	r0, r6
 80095d8:	f7ff ff8c 	bl	80094f4 <__multadd>
 80095dc:	45a0      	cmp	r8, r4
 80095de:	d1f5      	bne.n	80095cc <__s2b+0x4c>
 80095e0:	f1a5 0408 	sub.w	r4, r5, #8
 80095e4:	444c      	add	r4, r9
 80095e6:	1b2d      	subs	r5, r5, r4
 80095e8:	1963      	adds	r3, r4, r5
 80095ea:	42bb      	cmp	r3, r7
 80095ec:	db04      	blt.n	80095f8 <__s2b+0x78>
 80095ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f2:	340a      	adds	r4, #10
 80095f4:	2509      	movs	r5, #9
 80095f6:	e7f6      	b.n	80095e6 <__s2b+0x66>
 80095f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095fc:	4601      	mov	r1, r0
 80095fe:	3b30      	subs	r3, #48	; 0x30
 8009600:	220a      	movs	r2, #10
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff ff76 	bl	80094f4 <__multadd>
 8009608:	e7ee      	b.n	80095e8 <__s2b+0x68>
 800960a:	bf00      	nop
 800960c:	0800b858 	.word	0x0800b858
 8009610:	0800b8e4 	.word	0x0800b8e4

08009614 <__hi0bits>:
 8009614:	0c03      	lsrs	r3, r0, #16
 8009616:	041b      	lsls	r3, r3, #16
 8009618:	b9d3      	cbnz	r3, 8009650 <__hi0bits+0x3c>
 800961a:	0400      	lsls	r0, r0, #16
 800961c:	2310      	movs	r3, #16
 800961e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009622:	bf04      	itt	eq
 8009624:	0200      	lsleq	r0, r0, #8
 8009626:	3308      	addeq	r3, #8
 8009628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800962c:	bf04      	itt	eq
 800962e:	0100      	lsleq	r0, r0, #4
 8009630:	3304      	addeq	r3, #4
 8009632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009636:	bf04      	itt	eq
 8009638:	0080      	lsleq	r0, r0, #2
 800963a:	3302      	addeq	r3, #2
 800963c:	2800      	cmp	r0, #0
 800963e:	db05      	blt.n	800964c <__hi0bits+0x38>
 8009640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009644:	f103 0301 	add.w	r3, r3, #1
 8009648:	bf08      	it	eq
 800964a:	2320      	moveq	r3, #32
 800964c:	4618      	mov	r0, r3
 800964e:	4770      	bx	lr
 8009650:	2300      	movs	r3, #0
 8009652:	e7e4      	b.n	800961e <__hi0bits+0xa>

08009654 <__lo0bits>:
 8009654:	6803      	ldr	r3, [r0, #0]
 8009656:	f013 0207 	ands.w	r2, r3, #7
 800965a:	4601      	mov	r1, r0
 800965c:	d00b      	beq.n	8009676 <__lo0bits+0x22>
 800965e:	07da      	lsls	r2, r3, #31
 8009660:	d423      	bmi.n	80096aa <__lo0bits+0x56>
 8009662:	0798      	lsls	r0, r3, #30
 8009664:	bf49      	itett	mi
 8009666:	085b      	lsrmi	r3, r3, #1
 8009668:	089b      	lsrpl	r3, r3, #2
 800966a:	2001      	movmi	r0, #1
 800966c:	600b      	strmi	r3, [r1, #0]
 800966e:	bf5c      	itt	pl
 8009670:	600b      	strpl	r3, [r1, #0]
 8009672:	2002      	movpl	r0, #2
 8009674:	4770      	bx	lr
 8009676:	b298      	uxth	r0, r3
 8009678:	b9a8      	cbnz	r0, 80096a6 <__lo0bits+0x52>
 800967a:	0c1b      	lsrs	r3, r3, #16
 800967c:	2010      	movs	r0, #16
 800967e:	b2da      	uxtb	r2, r3
 8009680:	b90a      	cbnz	r2, 8009686 <__lo0bits+0x32>
 8009682:	3008      	adds	r0, #8
 8009684:	0a1b      	lsrs	r3, r3, #8
 8009686:	071a      	lsls	r2, r3, #28
 8009688:	bf04      	itt	eq
 800968a:	091b      	lsreq	r3, r3, #4
 800968c:	3004      	addeq	r0, #4
 800968e:	079a      	lsls	r2, r3, #30
 8009690:	bf04      	itt	eq
 8009692:	089b      	lsreq	r3, r3, #2
 8009694:	3002      	addeq	r0, #2
 8009696:	07da      	lsls	r2, r3, #31
 8009698:	d403      	bmi.n	80096a2 <__lo0bits+0x4e>
 800969a:	085b      	lsrs	r3, r3, #1
 800969c:	f100 0001 	add.w	r0, r0, #1
 80096a0:	d005      	beq.n	80096ae <__lo0bits+0x5a>
 80096a2:	600b      	str	r3, [r1, #0]
 80096a4:	4770      	bx	lr
 80096a6:	4610      	mov	r0, r2
 80096a8:	e7e9      	b.n	800967e <__lo0bits+0x2a>
 80096aa:	2000      	movs	r0, #0
 80096ac:	4770      	bx	lr
 80096ae:	2020      	movs	r0, #32
 80096b0:	4770      	bx	lr
	...

080096b4 <__i2b>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	460c      	mov	r4, r1
 80096b8:	2101      	movs	r1, #1
 80096ba:	f7ff feb9 	bl	8009430 <_Balloc>
 80096be:	4602      	mov	r2, r0
 80096c0:	b928      	cbnz	r0, 80096ce <__i2b+0x1a>
 80096c2:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <__i2b+0x24>)
 80096c4:	4805      	ldr	r0, [pc, #20]	; (80096dc <__i2b+0x28>)
 80096c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096ca:	f000 fdff 	bl	800a2cc <__assert_func>
 80096ce:	2301      	movs	r3, #1
 80096d0:	6144      	str	r4, [r0, #20]
 80096d2:	6103      	str	r3, [r0, #16]
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	bf00      	nop
 80096d8:	0800b858 	.word	0x0800b858
 80096dc:	0800b8e4 	.word	0x0800b8e4

080096e0 <__multiply>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	4691      	mov	r9, r2
 80096e6:	690a      	ldr	r2, [r1, #16]
 80096e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	bfb8      	it	lt
 80096f0:	460b      	movlt	r3, r1
 80096f2:	460c      	mov	r4, r1
 80096f4:	bfbc      	itt	lt
 80096f6:	464c      	movlt	r4, r9
 80096f8:	4699      	movlt	r9, r3
 80096fa:	6927      	ldr	r7, [r4, #16]
 80096fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009700:	68a3      	ldr	r3, [r4, #8]
 8009702:	6861      	ldr	r1, [r4, #4]
 8009704:	eb07 060a 	add.w	r6, r7, sl
 8009708:	42b3      	cmp	r3, r6
 800970a:	b085      	sub	sp, #20
 800970c:	bfb8      	it	lt
 800970e:	3101      	addlt	r1, #1
 8009710:	f7ff fe8e 	bl	8009430 <_Balloc>
 8009714:	b930      	cbnz	r0, 8009724 <__multiply+0x44>
 8009716:	4602      	mov	r2, r0
 8009718:	4b44      	ldr	r3, [pc, #272]	; (800982c <__multiply+0x14c>)
 800971a:	4845      	ldr	r0, [pc, #276]	; (8009830 <__multiply+0x150>)
 800971c:	f240 115d 	movw	r1, #349	; 0x15d
 8009720:	f000 fdd4 	bl	800a2cc <__assert_func>
 8009724:	f100 0514 	add.w	r5, r0, #20
 8009728:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800972c:	462b      	mov	r3, r5
 800972e:	2200      	movs	r2, #0
 8009730:	4543      	cmp	r3, r8
 8009732:	d321      	bcc.n	8009778 <__multiply+0x98>
 8009734:	f104 0314 	add.w	r3, r4, #20
 8009738:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800973c:	f109 0314 	add.w	r3, r9, #20
 8009740:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009744:	9202      	str	r2, [sp, #8]
 8009746:	1b3a      	subs	r2, r7, r4
 8009748:	3a15      	subs	r2, #21
 800974a:	f022 0203 	bic.w	r2, r2, #3
 800974e:	3204      	adds	r2, #4
 8009750:	f104 0115 	add.w	r1, r4, #21
 8009754:	428f      	cmp	r7, r1
 8009756:	bf38      	it	cc
 8009758:	2204      	movcc	r2, #4
 800975a:	9201      	str	r2, [sp, #4]
 800975c:	9a02      	ldr	r2, [sp, #8]
 800975e:	9303      	str	r3, [sp, #12]
 8009760:	429a      	cmp	r2, r3
 8009762:	d80c      	bhi.n	800977e <__multiply+0x9e>
 8009764:	2e00      	cmp	r6, #0
 8009766:	dd03      	ble.n	8009770 <__multiply+0x90>
 8009768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800976c:	2b00      	cmp	r3, #0
 800976e:	d05a      	beq.n	8009826 <__multiply+0x146>
 8009770:	6106      	str	r6, [r0, #16]
 8009772:	b005      	add	sp, #20
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	f843 2b04 	str.w	r2, [r3], #4
 800977c:	e7d8      	b.n	8009730 <__multiply+0x50>
 800977e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009782:	f1ba 0f00 	cmp.w	sl, #0
 8009786:	d024      	beq.n	80097d2 <__multiply+0xf2>
 8009788:	f104 0e14 	add.w	lr, r4, #20
 800978c:	46a9      	mov	r9, r5
 800978e:	f04f 0c00 	mov.w	ip, #0
 8009792:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009796:	f8d9 1000 	ldr.w	r1, [r9]
 800979a:	fa1f fb82 	uxth.w	fp, r2
 800979e:	b289      	uxth	r1, r1
 80097a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80097a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80097a8:	f8d9 2000 	ldr.w	r2, [r9]
 80097ac:	4461      	add	r1, ip
 80097ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80097b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097ba:	b289      	uxth	r1, r1
 80097bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097c0:	4577      	cmp	r7, lr
 80097c2:	f849 1b04 	str.w	r1, [r9], #4
 80097c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097ca:	d8e2      	bhi.n	8009792 <__multiply+0xb2>
 80097cc:	9a01      	ldr	r2, [sp, #4]
 80097ce:	f845 c002 	str.w	ip, [r5, r2]
 80097d2:	9a03      	ldr	r2, [sp, #12]
 80097d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097d8:	3304      	adds	r3, #4
 80097da:	f1b9 0f00 	cmp.w	r9, #0
 80097de:	d020      	beq.n	8009822 <__multiply+0x142>
 80097e0:	6829      	ldr	r1, [r5, #0]
 80097e2:	f104 0c14 	add.w	ip, r4, #20
 80097e6:	46ae      	mov	lr, r5
 80097e8:	f04f 0a00 	mov.w	sl, #0
 80097ec:	f8bc b000 	ldrh.w	fp, [ip]
 80097f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097f4:	fb09 220b 	mla	r2, r9, fp, r2
 80097f8:	4492      	add	sl, r2
 80097fa:	b289      	uxth	r1, r1
 80097fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009800:	f84e 1b04 	str.w	r1, [lr], #4
 8009804:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009808:	f8be 1000 	ldrh.w	r1, [lr]
 800980c:	0c12      	lsrs	r2, r2, #16
 800980e:	fb09 1102 	mla	r1, r9, r2, r1
 8009812:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009816:	4567      	cmp	r7, ip
 8009818:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800981c:	d8e6      	bhi.n	80097ec <__multiply+0x10c>
 800981e:	9a01      	ldr	r2, [sp, #4]
 8009820:	50a9      	str	r1, [r5, r2]
 8009822:	3504      	adds	r5, #4
 8009824:	e79a      	b.n	800975c <__multiply+0x7c>
 8009826:	3e01      	subs	r6, #1
 8009828:	e79c      	b.n	8009764 <__multiply+0x84>
 800982a:	bf00      	nop
 800982c:	0800b858 	.word	0x0800b858
 8009830:	0800b8e4 	.word	0x0800b8e4

08009834 <__pow5mult>:
 8009834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009838:	4615      	mov	r5, r2
 800983a:	f012 0203 	ands.w	r2, r2, #3
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	d007      	beq.n	8009854 <__pow5mult+0x20>
 8009844:	4c25      	ldr	r4, [pc, #148]	; (80098dc <__pow5mult+0xa8>)
 8009846:	3a01      	subs	r2, #1
 8009848:	2300      	movs	r3, #0
 800984a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800984e:	f7ff fe51 	bl	80094f4 <__multadd>
 8009852:	4607      	mov	r7, r0
 8009854:	10ad      	asrs	r5, r5, #2
 8009856:	d03d      	beq.n	80098d4 <__pow5mult+0xa0>
 8009858:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800985a:	b97c      	cbnz	r4, 800987c <__pow5mult+0x48>
 800985c:	2010      	movs	r0, #16
 800985e:	f7ff fdcd 	bl	80093fc <malloc>
 8009862:	4602      	mov	r2, r0
 8009864:	6270      	str	r0, [r6, #36]	; 0x24
 8009866:	b928      	cbnz	r0, 8009874 <__pow5mult+0x40>
 8009868:	4b1d      	ldr	r3, [pc, #116]	; (80098e0 <__pow5mult+0xac>)
 800986a:	481e      	ldr	r0, [pc, #120]	; (80098e4 <__pow5mult+0xb0>)
 800986c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009870:	f000 fd2c 	bl	800a2cc <__assert_func>
 8009874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009878:	6004      	str	r4, [r0, #0]
 800987a:	60c4      	str	r4, [r0, #12]
 800987c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009884:	b94c      	cbnz	r4, 800989a <__pow5mult+0x66>
 8009886:	f240 2171 	movw	r1, #625	; 0x271
 800988a:	4630      	mov	r0, r6
 800988c:	f7ff ff12 	bl	80096b4 <__i2b>
 8009890:	2300      	movs	r3, #0
 8009892:	f8c8 0008 	str.w	r0, [r8, #8]
 8009896:	4604      	mov	r4, r0
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	f04f 0900 	mov.w	r9, #0
 800989e:	07eb      	lsls	r3, r5, #31
 80098a0:	d50a      	bpl.n	80098b8 <__pow5mult+0x84>
 80098a2:	4639      	mov	r1, r7
 80098a4:	4622      	mov	r2, r4
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff ff1a 	bl	80096e0 <__multiply>
 80098ac:	4639      	mov	r1, r7
 80098ae:	4680      	mov	r8, r0
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7ff fdfd 	bl	80094b0 <_Bfree>
 80098b6:	4647      	mov	r7, r8
 80098b8:	106d      	asrs	r5, r5, #1
 80098ba:	d00b      	beq.n	80098d4 <__pow5mult+0xa0>
 80098bc:	6820      	ldr	r0, [r4, #0]
 80098be:	b938      	cbnz	r0, 80098d0 <__pow5mult+0x9c>
 80098c0:	4622      	mov	r2, r4
 80098c2:	4621      	mov	r1, r4
 80098c4:	4630      	mov	r0, r6
 80098c6:	f7ff ff0b 	bl	80096e0 <__multiply>
 80098ca:	6020      	str	r0, [r4, #0]
 80098cc:	f8c0 9000 	str.w	r9, [r0]
 80098d0:	4604      	mov	r4, r0
 80098d2:	e7e4      	b.n	800989e <__pow5mult+0x6a>
 80098d4:	4638      	mov	r0, r7
 80098d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098da:	bf00      	nop
 80098dc:	0800ba30 	.word	0x0800ba30
 80098e0:	0800b7e6 	.word	0x0800b7e6
 80098e4:	0800b8e4 	.word	0x0800b8e4

080098e8 <__lshift>:
 80098e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ec:	460c      	mov	r4, r1
 80098ee:	6849      	ldr	r1, [r1, #4]
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098f6:	68a3      	ldr	r3, [r4, #8]
 80098f8:	4607      	mov	r7, r0
 80098fa:	4691      	mov	r9, r2
 80098fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009900:	f108 0601 	add.w	r6, r8, #1
 8009904:	42b3      	cmp	r3, r6
 8009906:	db0b      	blt.n	8009920 <__lshift+0x38>
 8009908:	4638      	mov	r0, r7
 800990a:	f7ff fd91 	bl	8009430 <_Balloc>
 800990e:	4605      	mov	r5, r0
 8009910:	b948      	cbnz	r0, 8009926 <__lshift+0x3e>
 8009912:	4602      	mov	r2, r0
 8009914:	4b2a      	ldr	r3, [pc, #168]	; (80099c0 <__lshift+0xd8>)
 8009916:	482b      	ldr	r0, [pc, #172]	; (80099c4 <__lshift+0xdc>)
 8009918:	f240 11d9 	movw	r1, #473	; 0x1d9
 800991c:	f000 fcd6 	bl	800a2cc <__assert_func>
 8009920:	3101      	adds	r1, #1
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	e7ee      	b.n	8009904 <__lshift+0x1c>
 8009926:	2300      	movs	r3, #0
 8009928:	f100 0114 	add.w	r1, r0, #20
 800992c:	f100 0210 	add.w	r2, r0, #16
 8009930:	4618      	mov	r0, r3
 8009932:	4553      	cmp	r3, sl
 8009934:	db37      	blt.n	80099a6 <__lshift+0xbe>
 8009936:	6920      	ldr	r0, [r4, #16]
 8009938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800993c:	f104 0314 	add.w	r3, r4, #20
 8009940:	f019 091f 	ands.w	r9, r9, #31
 8009944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009948:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800994c:	d02f      	beq.n	80099ae <__lshift+0xc6>
 800994e:	f1c9 0e20 	rsb	lr, r9, #32
 8009952:	468a      	mov	sl, r1
 8009954:	f04f 0c00 	mov.w	ip, #0
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	fa02 f209 	lsl.w	r2, r2, r9
 800995e:	ea42 020c 	orr.w	r2, r2, ip
 8009962:	f84a 2b04 	str.w	r2, [sl], #4
 8009966:	f853 2b04 	ldr.w	r2, [r3], #4
 800996a:	4298      	cmp	r0, r3
 800996c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009970:	d8f2      	bhi.n	8009958 <__lshift+0x70>
 8009972:	1b03      	subs	r3, r0, r4
 8009974:	3b15      	subs	r3, #21
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	3304      	adds	r3, #4
 800997c:	f104 0215 	add.w	r2, r4, #21
 8009980:	4290      	cmp	r0, r2
 8009982:	bf38      	it	cc
 8009984:	2304      	movcc	r3, #4
 8009986:	f841 c003 	str.w	ip, [r1, r3]
 800998a:	f1bc 0f00 	cmp.w	ip, #0
 800998e:	d001      	beq.n	8009994 <__lshift+0xac>
 8009990:	f108 0602 	add.w	r6, r8, #2
 8009994:	3e01      	subs	r6, #1
 8009996:	4638      	mov	r0, r7
 8009998:	612e      	str	r6, [r5, #16]
 800999a:	4621      	mov	r1, r4
 800999c:	f7ff fd88 	bl	80094b0 <_Bfree>
 80099a0:	4628      	mov	r0, r5
 80099a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80099aa:	3301      	adds	r3, #1
 80099ac:	e7c1      	b.n	8009932 <__lshift+0x4a>
 80099ae:	3904      	subs	r1, #4
 80099b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80099b8:	4298      	cmp	r0, r3
 80099ba:	d8f9      	bhi.n	80099b0 <__lshift+0xc8>
 80099bc:	e7ea      	b.n	8009994 <__lshift+0xac>
 80099be:	bf00      	nop
 80099c0:	0800b858 	.word	0x0800b858
 80099c4:	0800b8e4 	.word	0x0800b8e4

080099c8 <__mcmp>:
 80099c8:	b530      	push	{r4, r5, lr}
 80099ca:	6902      	ldr	r2, [r0, #16]
 80099cc:	690c      	ldr	r4, [r1, #16]
 80099ce:	1b12      	subs	r2, r2, r4
 80099d0:	d10e      	bne.n	80099f0 <__mcmp+0x28>
 80099d2:	f100 0314 	add.w	r3, r0, #20
 80099d6:	3114      	adds	r1, #20
 80099d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099e8:	42a5      	cmp	r5, r4
 80099ea:	d003      	beq.n	80099f4 <__mcmp+0x2c>
 80099ec:	d305      	bcc.n	80099fa <__mcmp+0x32>
 80099ee:	2201      	movs	r2, #1
 80099f0:	4610      	mov	r0, r2
 80099f2:	bd30      	pop	{r4, r5, pc}
 80099f4:	4283      	cmp	r3, r0
 80099f6:	d3f3      	bcc.n	80099e0 <__mcmp+0x18>
 80099f8:	e7fa      	b.n	80099f0 <__mcmp+0x28>
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295
 80099fe:	e7f7      	b.n	80099f0 <__mcmp+0x28>

08009a00 <__mdiff>:
 8009a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	4606      	mov	r6, r0
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	4690      	mov	r8, r2
 8009a0e:	f7ff ffdb 	bl	80099c8 <__mcmp>
 8009a12:	1e05      	subs	r5, r0, #0
 8009a14:	d110      	bne.n	8009a38 <__mdiff+0x38>
 8009a16:	4629      	mov	r1, r5
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff fd09 	bl	8009430 <_Balloc>
 8009a1e:	b930      	cbnz	r0, 8009a2e <__mdiff+0x2e>
 8009a20:	4b3a      	ldr	r3, [pc, #232]	; (8009b0c <__mdiff+0x10c>)
 8009a22:	4602      	mov	r2, r0
 8009a24:	f240 2132 	movw	r1, #562	; 0x232
 8009a28:	4839      	ldr	r0, [pc, #228]	; (8009b10 <__mdiff+0x110>)
 8009a2a:	f000 fc4f 	bl	800a2cc <__assert_func>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	bfa4      	itt	ge
 8009a3a:	4643      	movge	r3, r8
 8009a3c:	46a0      	movge	r8, r4
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a44:	bfa6      	itte	ge
 8009a46:	461c      	movge	r4, r3
 8009a48:	2500      	movge	r5, #0
 8009a4a:	2501      	movlt	r5, #1
 8009a4c:	f7ff fcf0 	bl	8009430 <_Balloc>
 8009a50:	b920      	cbnz	r0, 8009a5c <__mdiff+0x5c>
 8009a52:	4b2e      	ldr	r3, [pc, #184]	; (8009b0c <__mdiff+0x10c>)
 8009a54:	4602      	mov	r2, r0
 8009a56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a5a:	e7e5      	b.n	8009a28 <__mdiff+0x28>
 8009a5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a60:	6926      	ldr	r6, [r4, #16]
 8009a62:	60c5      	str	r5, [r0, #12]
 8009a64:	f104 0914 	add.w	r9, r4, #20
 8009a68:	f108 0514 	add.w	r5, r8, #20
 8009a6c:	f100 0e14 	add.w	lr, r0, #20
 8009a70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a78:	f108 0210 	add.w	r2, r8, #16
 8009a7c:	46f2      	mov	sl, lr
 8009a7e:	2100      	movs	r1, #0
 8009a80:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a88:	fa1f f883 	uxth.w	r8, r3
 8009a8c:	fa11 f18b 	uxtah	r1, r1, fp
 8009a90:	0c1b      	lsrs	r3, r3, #16
 8009a92:	eba1 0808 	sub.w	r8, r1, r8
 8009a96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a9e:	fa1f f888 	uxth.w	r8, r8
 8009aa2:	1419      	asrs	r1, r3, #16
 8009aa4:	454e      	cmp	r6, r9
 8009aa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009aaa:	f84a 3b04 	str.w	r3, [sl], #4
 8009aae:	d8e7      	bhi.n	8009a80 <__mdiff+0x80>
 8009ab0:	1b33      	subs	r3, r6, r4
 8009ab2:	3b15      	subs	r3, #21
 8009ab4:	f023 0303 	bic.w	r3, r3, #3
 8009ab8:	3304      	adds	r3, #4
 8009aba:	3415      	adds	r4, #21
 8009abc:	42a6      	cmp	r6, r4
 8009abe:	bf38      	it	cc
 8009ac0:	2304      	movcc	r3, #4
 8009ac2:	441d      	add	r5, r3
 8009ac4:	4473      	add	r3, lr
 8009ac6:	469e      	mov	lr, r3
 8009ac8:	462e      	mov	r6, r5
 8009aca:	4566      	cmp	r6, ip
 8009acc:	d30e      	bcc.n	8009aec <__mdiff+0xec>
 8009ace:	f10c 0203 	add.w	r2, ip, #3
 8009ad2:	1b52      	subs	r2, r2, r5
 8009ad4:	f022 0203 	bic.w	r2, r2, #3
 8009ad8:	3d03      	subs	r5, #3
 8009ada:	45ac      	cmp	ip, r5
 8009adc:	bf38      	it	cc
 8009ade:	2200      	movcc	r2, #0
 8009ae0:	441a      	add	r2, r3
 8009ae2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ae6:	b17b      	cbz	r3, 8009b08 <__mdiff+0x108>
 8009ae8:	6107      	str	r7, [r0, #16]
 8009aea:	e7a3      	b.n	8009a34 <__mdiff+0x34>
 8009aec:	f856 8b04 	ldr.w	r8, [r6], #4
 8009af0:	fa11 f288 	uxtah	r2, r1, r8
 8009af4:	1414      	asrs	r4, r2, #16
 8009af6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009afa:	b292      	uxth	r2, r2
 8009afc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009b00:	f84e 2b04 	str.w	r2, [lr], #4
 8009b04:	1421      	asrs	r1, r4, #16
 8009b06:	e7e0      	b.n	8009aca <__mdiff+0xca>
 8009b08:	3f01      	subs	r7, #1
 8009b0a:	e7ea      	b.n	8009ae2 <__mdiff+0xe2>
 8009b0c:	0800b858 	.word	0x0800b858
 8009b10:	0800b8e4 	.word	0x0800b8e4

08009b14 <__ulp>:
 8009b14:	b082      	sub	sp, #8
 8009b16:	ed8d 0b00 	vstr	d0, [sp]
 8009b1a:	9b01      	ldr	r3, [sp, #4]
 8009b1c:	4912      	ldr	r1, [pc, #72]	; (8009b68 <__ulp+0x54>)
 8009b1e:	4019      	ands	r1, r3
 8009b20:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b24:	2900      	cmp	r1, #0
 8009b26:	dd05      	ble.n	8009b34 <__ulp+0x20>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	ec43 2b10 	vmov	d0, r2, r3
 8009b30:	b002      	add	sp, #8
 8009b32:	4770      	bx	lr
 8009b34:	4249      	negs	r1, r1
 8009b36:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b3a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b3e:	f04f 0200 	mov.w	r2, #0
 8009b42:	f04f 0300 	mov.w	r3, #0
 8009b46:	da04      	bge.n	8009b52 <__ulp+0x3e>
 8009b48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b4c:	fa41 f300 	asr.w	r3, r1, r0
 8009b50:	e7ec      	b.n	8009b2c <__ulp+0x18>
 8009b52:	f1a0 0114 	sub.w	r1, r0, #20
 8009b56:	291e      	cmp	r1, #30
 8009b58:	bfda      	itte	le
 8009b5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b5e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b62:	2101      	movgt	r1, #1
 8009b64:	460a      	mov	r2, r1
 8009b66:	e7e1      	b.n	8009b2c <__ulp+0x18>
 8009b68:	7ff00000 	.word	0x7ff00000

08009b6c <__b2d>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	6905      	ldr	r5, [r0, #16]
 8009b70:	f100 0714 	add.w	r7, r0, #20
 8009b74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b78:	1f2e      	subs	r6, r5, #4
 8009b7a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff fd48 	bl	8009614 <__hi0bits>
 8009b84:	f1c0 0320 	rsb	r3, r0, #32
 8009b88:	280a      	cmp	r0, #10
 8009b8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009c08 <__b2d+0x9c>
 8009b8e:	600b      	str	r3, [r1, #0]
 8009b90:	dc14      	bgt.n	8009bbc <__b2d+0x50>
 8009b92:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b96:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b9a:	42b7      	cmp	r7, r6
 8009b9c:	ea41 030c 	orr.w	r3, r1, ip
 8009ba0:	bf34      	ite	cc
 8009ba2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ba6:	2100      	movcs	r1, #0
 8009ba8:	3015      	adds	r0, #21
 8009baa:	fa04 f000 	lsl.w	r0, r4, r0
 8009bae:	fa21 f10e 	lsr.w	r1, r1, lr
 8009bb2:	ea40 0201 	orr.w	r2, r0, r1
 8009bb6:	ec43 2b10 	vmov	d0, r2, r3
 8009bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bbc:	42b7      	cmp	r7, r6
 8009bbe:	bf3a      	itte	cc
 8009bc0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bc4:	f1a5 0608 	subcc.w	r6, r5, #8
 8009bc8:	2100      	movcs	r1, #0
 8009bca:	380b      	subs	r0, #11
 8009bcc:	d017      	beq.n	8009bfe <__b2d+0x92>
 8009bce:	f1c0 0c20 	rsb	ip, r0, #32
 8009bd2:	fa04 f500 	lsl.w	r5, r4, r0
 8009bd6:	42be      	cmp	r6, r7
 8009bd8:	fa21 f40c 	lsr.w	r4, r1, ip
 8009bdc:	ea45 0504 	orr.w	r5, r5, r4
 8009be0:	bf8c      	ite	hi
 8009be2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009be6:	2400      	movls	r4, #0
 8009be8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009bec:	fa01 f000 	lsl.w	r0, r1, r0
 8009bf0:	fa24 f40c 	lsr.w	r4, r4, ip
 8009bf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bf8:	ea40 0204 	orr.w	r2, r0, r4
 8009bfc:	e7db      	b.n	8009bb6 <__b2d+0x4a>
 8009bfe:	ea44 030c 	orr.w	r3, r4, ip
 8009c02:	460a      	mov	r2, r1
 8009c04:	e7d7      	b.n	8009bb6 <__b2d+0x4a>
 8009c06:	bf00      	nop
 8009c08:	3ff00000 	.word	0x3ff00000

08009c0c <__d2b>:
 8009c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c10:	4689      	mov	r9, r1
 8009c12:	2101      	movs	r1, #1
 8009c14:	ec57 6b10 	vmov	r6, r7, d0
 8009c18:	4690      	mov	r8, r2
 8009c1a:	f7ff fc09 	bl	8009430 <_Balloc>
 8009c1e:	4604      	mov	r4, r0
 8009c20:	b930      	cbnz	r0, 8009c30 <__d2b+0x24>
 8009c22:	4602      	mov	r2, r0
 8009c24:	4b25      	ldr	r3, [pc, #148]	; (8009cbc <__d2b+0xb0>)
 8009c26:	4826      	ldr	r0, [pc, #152]	; (8009cc0 <__d2b+0xb4>)
 8009c28:	f240 310a 	movw	r1, #778	; 0x30a
 8009c2c:	f000 fb4e 	bl	800a2cc <__assert_func>
 8009c30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c38:	bb35      	cbnz	r5, 8009c88 <__d2b+0x7c>
 8009c3a:	2e00      	cmp	r6, #0
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	d028      	beq.n	8009c92 <__d2b+0x86>
 8009c40:	4668      	mov	r0, sp
 8009c42:	9600      	str	r6, [sp, #0]
 8009c44:	f7ff fd06 	bl	8009654 <__lo0bits>
 8009c48:	9900      	ldr	r1, [sp, #0]
 8009c4a:	b300      	cbz	r0, 8009c8e <__d2b+0x82>
 8009c4c:	9a01      	ldr	r2, [sp, #4]
 8009c4e:	f1c0 0320 	rsb	r3, r0, #32
 8009c52:	fa02 f303 	lsl.w	r3, r2, r3
 8009c56:	430b      	orrs	r3, r1
 8009c58:	40c2      	lsrs	r2, r0
 8009c5a:	6163      	str	r3, [r4, #20]
 8009c5c:	9201      	str	r2, [sp, #4]
 8009c5e:	9b01      	ldr	r3, [sp, #4]
 8009c60:	61a3      	str	r3, [r4, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bf14      	ite	ne
 8009c66:	2202      	movne	r2, #2
 8009c68:	2201      	moveq	r2, #1
 8009c6a:	6122      	str	r2, [r4, #16]
 8009c6c:	b1d5      	cbz	r5, 8009ca4 <__d2b+0x98>
 8009c6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c72:	4405      	add	r5, r0
 8009c74:	f8c9 5000 	str.w	r5, [r9]
 8009c78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c7c:	f8c8 0000 	str.w	r0, [r8]
 8009c80:	4620      	mov	r0, r4
 8009c82:	b003      	add	sp, #12
 8009c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c8c:	e7d5      	b.n	8009c3a <__d2b+0x2e>
 8009c8e:	6161      	str	r1, [r4, #20]
 8009c90:	e7e5      	b.n	8009c5e <__d2b+0x52>
 8009c92:	a801      	add	r0, sp, #4
 8009c94:	f7ff fcde 	bl	8009654 <__lo0bits>
 8009c98:	9b01      	ldr	r3, [sp, #4]
 8009c9a:	6163      	str	r3, [r4, #20]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	6122      	str	r2, [r4, #16]
 8009ca0:	3020      	adds	r0, #32
 8009ca2:	e7e3      	b.n	8009c6c <__d2b+0x60>
 8009ca4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ca8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cac:	f8c9 0000 	str.w	r0, [r9]
 8009cb0:	6918      	ldr	r0, [r3, #16]
 8009cb2:	f7ff fcaf 	bl	8009614 <__hi0bits>
 8009cb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cba:	e7df      	b.n	8009c7c <__d2b+0x70>
 8009cbc:	0800b858 	.word	0x0800b858
 8009cc0:	0800b8e4 	.word	0x0800b8e4

08009cc4 <__ratio>:
 8009cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	4688      	mov	r8, r1
 8009cca:	4669      	mov	r1, sp
 8009ccc:	4681      	mov	r9, r0
 8009cce:	f7ff ff4d 	bl	8009b6c <__b2d>
 8009cd2:	a901      	add	r1, sp, #4
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	ec55 4b10 	vmov	r4, r5, d0
 8009cda:	f7ff ff47 	bl	8009b6c <__b2d>
 8009cde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ce2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ce6:	eba3 0c02 	sub.w	ip, r3, r2
 8009cea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cee:	1a9b      	subs	r3, r3, r2
 8009cf0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009cf4:	ec51 0b10 	vmov	r0, r1, d0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	bfd6      	itet	le
 8009cfc:	460a      	movle	r2, r1
 8009cfe:	462a      	movgt	r2, r5
 8009d00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d04:	468b      	mov	fp, r1
 8009d06:	462f      	mov	r7, r5
 8009d08:	bfd4      	ite	le
 8009d0a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d12:	4620      	mov	r0, r4
 8009d14:	ee10 2a10 	vmov	r2, s0
 8009d18:	465b      	mov	r3, fp
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 fd9e 	bl	800085c <__aeabi_ddiv>
 8009d20:	ec41 0b10 	vmov	d0, r0, r1
 8009d24:	b003      	add	sp, #12
 8009d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d2a <__copybits>:
 8009d2a:	3901      	subs	r1, #1
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	1149      	asrs	r1, r1, #5
 8009d30:	6914      	ldr	r4, [r2, #16]
 8009d32:	3101      	adds	r1, #1
 8009d34:	f102 0314 	add.w	r3, r2, #20
 8009d38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d40:	1f05      	subs	r5, r0, #4
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	d30c      	bcc.n	8009d60 <__copybits+0x36>
 8009d46:	1aa3      	subs	r3, r4, r2
 8009d48:	3b11      	subs	r3, #17
 8009d4a:	f023 0303 	bic.w	r3, r3, #3
 8009d4e:	3211      	adds	r2, #17
 8009d50:	42a2      	cmp	r2, r4
 8009d52:	bf88      	it	hi
 8009d54:	2300      	movhi	r3, #0
 8009d56:	4418      	add	r0, r3
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4288      	cmp	r0, r1
 8009d5c:	d305      	bcc.n	8009d6a <__copybits+0x40>
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d64:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d68:	e7eb      	b.n	8009d42 <__copybits+0x18>
 8009d6a:	f840 3b04 	str.w	r3, [r0], #4
 8009d6e:	e7f4      	b.n	8009d5a <__copybits+0x30>

08009d70 <__any_on>:
 8009d70:	f100 0214 	add.w	r2, r0, #20
 8009d74:	6900      	ldr	r0, [r0, #16]
 8009d76:	114b      	asrs	r3, r1, #5
 8009d78:	4298      	cmp	r0, r3
 8009d7a:	b510      	push	{r4, lr}
 8009d7c:	db11      	blt.n	8009da2 <__any_on+0x32>
 8009d7e:	dd0a      	ble.n	8009d96 <__any_on+0x26>
 8009d80:	f011 011f 	ands.w	r1, r1, #31
 8009d84:	d007      	beq.n	8009d96 <__any_on+0x26>
 8009d86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d8a:	fa24 f001 	lsr.w	r0, r4, r1
 8009d8e:	fa00 f101 	lsl.w	r1, r0, r1
 8009d92:	428c      	cmp	r4, r1
 8009d94:	d10b      	bne.n	8009dae <__any_on+0x3e>
 8009d96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d803      	bhi.n	8009da6 <__any_on+0x36>
 8009d9e:	2000      	movs	r0, #0
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	4603      	mov	r3, r0
 8009da4:	e7f7      	b.n	8009d96 <__any_on+0x26>
 8009da6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009daa:	2900      	cmp	r1, #0
 8009dac:	d0f5      	beq.n	8009d9a <__any_on+0x2a>
 8009dae:	2001      	movs	r0, #1
 8009db0:	e7f6      	b.n	8009da0 <__any_on+0x30>

08009db2 <_calloc_r>:
 8009db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009db4:	fba1 2402 	umull	r2, r4, r1, r2
 8009db8:	b94c      	cbnz	r4, 8009dce <_calloc_r+0x1c>
 8009dba:	4611      	mov	r1, r2
 8009dbc:	9201      	str	r2, [sp, #4]
 8009dbe:	f000 f87b 	bl	8009eb8 <_malloc_r>
 8009dc2:	9a01      	ldr	r2, [sp, #4]
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	b930      	cbnz	r0, 8009dd6 <_calloc_r+0x24>
 8009dc8:	4628      	mov	r0, r5
 8009dca:	b003      	add	sp, #12
 8009dcc:	bd30      	pop	{r4, r5, pc}
 8009dce:	220c      	movs	r2, #12
 8009dd0:	6002      	str	r2, [r0, #0]
 8009dd2:	2500      	movs	r5, #0
 8009dd4:	e7f8      	b.n	8009dc8 <_calloc_r+0x16>
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	f7fc fdb4 	bl	8006944 <memset>
 8009ddc:	e7f4      	b.n	8009dc8 <_calloc_r+0x16>
	...

08009de0 <_free_r>:
 8009de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009de2:	2900      	cmp	r1, #0
 8009de4:	d044      	beq.n	8009e70 <_free_r+0x90>
 8009de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dea:	9001      	str	r0, [sp, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f1a1 0404 	sub.w	r4, r1, #4
 8009df2:	bfb8      	it	lt
 8009df4:	18e4      	addlt	r4, r4, r3
 8009df6:	f000 fab3 	bl	800a360 <__malloc_lock>
 8009dfa:	4a1e      	ldr	r2, [pc, #120]	; (8009e74 <_free_r+0x94>)
 8009dfc:	9801      	ldr	r0, [sp, #4]
 8009dfe:	6813      	ldr	r3, [r2, #0]
 8009e00:	b933      	cbnz	r3, 8009e10 <_free_r+0x30>
 8009e02:	6063      	str	r3, [r4, #4]
 8009e04:	6014      	str	r4, [r2, #0]
 8009e06:	b003      	add	sp, #12
 8009e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e0c:	f000 baae 	b.w	800a36c <__malloc_unlock>
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	d908      	bls.n	8009e26 <_free_r+0x46>
 8009e14:	6825      	ldr	r5, [r4, #0]
 8009e16:	1961      	adds	r1, r4, r5
 8009e18:	428b      	cmp	r3, r1
 8009e1a:	bf01      	itttt	eq
 8009e1c:	6819      	ldreq	r1, [r3, #0]
 8009e1e:	685b      	ldreq	r3, [r3, #4]
 8009e20:	1949      	addeq	r1, r1, r5
 8009e22:	6021      	streq	r1, [r4, #0]
 8009e24:	e7ed      	b.n	8009e02 <_free_r+0x22>
 8009e26:	461a      	mov	r2, r3
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	b10b      	cbz	r3, 8009e30 <_free_r+0x50>
 8009e2c:	42a3      	cmp	r3, r4
 8009e2e:	d9fa      	bls.n	8009e26 <_free_r+0x46>
 8009e30:	6811      	ldr	r1, [r2, #0]
 8009e32:	1855      	adds	r5, r2, r1
 8009e34:	42a5      	cmp	r5, r4
 8009e36:	d10b      	bne.n	8009e50 <_free_r+0x70>
 8009e38:	6824      	ldr	r4, [r4, #0]
 8009e3a:	4421      	add	r1, r4
 8009e3c:	1854      	adds	r4, r2, r1
 8009e3e:	42a3      	cmp	r3, r4
 8009e40:	6011      	str	r1, [r2, #0]
 8009e42:	d1e0      	bne.n	8009e06 <_free_r+0x26>
 8009e44:	681c      	ldr	r4, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	6053      	str	r3, [r2, #4]
 8009e4a:	4421      	add	r1, r4
 8009e4c:	6011      	str	r1, [r2, #0]
 8009e4e:	e7da      	b.n	8009e06 <_free_r+0x26>
 8009e50:	d902      	bls.n	8009e58 <_free_r+0x78>
 8009e52:	230c      	movs	r3, #12
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	e7d6      	b.n	8009e06 <_free_r+0x26>
 8009e58:	6825      	ldr	r5, [r4, #0]
 8009e5a:	1961      	adds	r1, r4, r5
 8009e5c:	428b      	cmp	r3, r1
 8009e5e:	bf04      	itt	eq
 8009e60:	6819      	ldreq	r1, [r3, #0]
 8009e62:	685b      	ldreq	r3, [r3, #4]
 8009e64:	6063      	str	r3, [r4, #4]
 8009e66:	bf04      	itt	eq
 8009e68:	1949      	addeq	r1, r1, r5
 8009e6a:	6021      	streq	r1, [r4, #0]
 8009e6c:	6054      	str	r4, [r2, #4]
 8009e6e:	e7ca      	b.n	8009e06 <_free_r+0x26>
 8009e70:	b003      	add	sp, #12
 8009e72:	bd30      	pop	{r4, r5, pc}
 8009e74:	20000e10 	.word	0x20000e10

08009e78 <sbrk_aligned>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	4e0e      	ldr	r6, [pc, #56]	; (8009eb4 <sbrk_aligned+0x3c>)
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	6831      	ldr	r1, [r6, #0]
 8009e80:	4605      	mov	r5, r0
 8009e82:	b911      	cbnz	r1, 8009e8a <sbrk_aligned+0x12>
 8009e84:	f000 f9f0 	bl	800a268 <_sbrk_r>
 8009e88:	6030      	str	r0, [r6, #0]
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 f9eb 	bl	800a268 <_sbrk_r>
 8009e92:	1c43      	adds	r3, r0, #1
 8009e94:	d00a      	beq.n	8009eac <sbrk_aligned+0x34>
 8009e96:	1cc4      	adds	r4, r0, #3
 8009e98:	f024 0403 	bic.w	r4, r4, #3
 8009e9c:	42a0      	cmp	r0, r4
 8009e9e:	d007      	beq.n	8009eb0 <sbrk_aligned+0x38>
 8009ea0:	1a21      	subs	r1, r4, r0
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f9e0 	bl	800a268 <_sbrk_r>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d101      	bne.n	8009eb0 <sbrk_aligned+0x38>
 8009eac:	f04f 34ff 	mov.w	r4, #4294967295
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	20000e14 	.word	0x20000e14

08009eb8 <_malloc_r>:
 8009eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ebc:	1ccd      	adds	r5, r1, #3
 8009ebe:	f025 0503 	bic.w	r5, r5, #3
 8009ec2:	3508      	adds	r5, #8
 8009ec4:	2d0c      	cmp	r5, #12
 8009ec6:	bf38      	it	cc
 8009ec8:	250c      	movcc	r5, #12
 8009eca:	2d00      	cmp	r5, #0
 8009ecc:	4607      	mov	r7, r0
 8009ece:	db01      	blt.n	8009ed4 <_malloc_r+0x1c>
 8009ed0:	42a9      	cmp	r1, r5
 8009ed2:	d905      	bls.n	8009ee0 <_malloc_r+0x28>
 8009ed4:	230c      	movs	r3, #12
 8009ed6:	603b      	str	r3, [r7, #0]
 8009ed8:	2600      	movs	r6, #0
 8009eda:	4630      	mov	r0, r6
 8009edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee0:	4e2e      	ldr	r6, [pc, #184]	; (8009f9c <_malloc_r+0xe4>)
 8009ee2:	f000 fa3d 	bl	800a360 <__malloc_lock>
 8009ee6:	6833      	ldr	r3, [r6, #0]
 8009ee8:	461c      	mov	r4, r3
 8009eea:	bb34      	cbnz	r4, 8009f3a <_malloc_r+0x82>
 8009eec:	4629      	mov	r1, r5
 8009eee:	4638      	mov	r0, r7
 8009ef0:	f7ff ffc2 	bl	8009e78 <sbrk_aligned>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	d14d      	bne.n	8009f96 <_malloc_r+0xde>
 8009efa:	6834      	ldr	r4, [r6, #0]
 8009efc:	4626      	mov	r6, r4
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	d140      	bne.n	8009f84 <_malloc_r+0xcc>
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	4631      	mov	r1, r6
 8009f06:	4638      	mov	r0, r7
 8009f08:	eb04 0803 	add.w	r8, r4, r3
 8009f0c:	f000 f9ac 	bl	800a268 <_sbrk_r>
 8009f10:	4580      	cmp	r8, r0
 8009f12:	d13a      	bne.n	8009f8a <_malloc_r+0xd2>
 8009f14:	6821      	ldr	r1, [r4, #0]
 8009f16:	3503      	adds	r5, #3
 8009f18:	1a6d      	subs	r5, r5, r1
 8009f1a:	f025 0503 	bic.w	r5, r5, #3
 8009f1e:	3508      	adds	r5, #8
 8009f20:	2d0c      	cmp	r5, #12
 8009f22:	bf38      	it	cc
 8009f24:	250c      	movcc	r5, #12
 8009f26:	4629      	mov	r1, r5
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f7ff ffa5 	bl	8009e78 <sbrk_aligned>
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d02b      	beq.n	8009f8a <_malloc_r+0xd2>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	442b      	add	r3, r5
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	e00e      	b.n	8009f58 <_malloc_r+0xa0>
 8009f3a:	6822      	ldr	r2, [r4, #0]
 8009f3c:	1b52      	subs	r2, r2, r5
 8009f3e:	d41e      	bmi.n	8009f7e <_malloc_r+0xc6>
 8009f40:	2a0b      	cmp	r2, #11
 8009f42:	d916      	bls.n	8009f72 <_malloc_r+0xba>
 8009f44:	1961      	adds	r1, r4, r5
 8009f46:	42a3      	cmp	r3, r4
 8009f48:	6025      	str	r5, [r4, #0]
 8009f4a:	bf18      	it	ne
 8009f4c:	6059      	strne	r1, [r3, #4]
 8009f4e:	6863      	ldr	r3, [r4, #4]
 8009f50:	bf08      	it	eq
 8009f52:	6031      	streq	r1, [r6, #0]
 8009f54:	5162      	str	r2, [r4, r5]
 8009f56:	604b      	str	r3, [r1, #4]
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f104 060b 	add.w	r6, r4, #11
 8009f5e:	f000 fa05 	bl	800a36c <__malloc_unlock>
 8009f62:	f026 0607 	bic.w	r6, r6, #7
 8009f66:	1d23      	adds	r3, r4, #4
 8009f68:	1af2      	subs	r2, r6, r3
 8009f6a:	d0b6      	beq.n	8009eda <_malloc_r+0x22>
 8009f6c:	1b9b      	subs	r3, r3, r6
 8009f6e:	50a3      	str	r3, [r4, r2]
 8009f70:	e7b3      	b.n	8009eda <_malloc_r+0x22>
 8009f72:	6862      	ldr	r2, [r4, #4]
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	bf0c      	ite	eq
 8009f78:	6032      	streq	r2, [r6, #0]
 8009f7a:	605a      	strne	r2, [r3, #4]
 8009f7c:	e7ec      	b.n	8009f58 <_malloc_r+0xa0>
 8009f7e:	4623      	mov	r3, r4
 8009f80:	6864      	ldr	r4, [r4, #4]
 8009f82:	e7b2      	b.n	8009eea <_malloc_r+0x32>
 8009f84:	4634      	mov	r4, r6
 8009f86:	6876      	ldr	r6, [r6, #4]
 8009f88:	e7b9      	b.n	8009efe <_malloc_r+0x46>
 8009f8a:	230c      	movs	r3, #12
 8009f8c:	603b      	str	r3, [r7, #0]
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f000 f9ec 	bl	800a36c <__malloc_unlock>
 8009f94:	e7a1      	b.n	8009eda <_malloc_r+0x22>
 8009f96:	6025      	str	r5, [r4, #0]
 8009f98:	e7de      	b.n	8009f58 <_malloc_r+0xa0>
 8009f9a:	bf00      	nop
 8009f9c:	20000e10 	.word	0x20000e10

08009fa0 <__ssputs_r>:
 8009fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	688e      	ldr	r6, [r1, #8]
 8009fa6:	429e      	cmp	r6, r3
 8009fa8:	4682      	mov	sl, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	4690      	mov	r8, r2
 8009fae:	461f      	mov	r7, r3
 8009fb0:	d838      	bhi.n	800a024 <__ssputs_r+0x84>
 8009fb2:	898a      	ldrh	r2, [r1, #12]
 8009fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fb8:	d032      	beq.n	800a020 <__ssputs_r+0x80>
 8009fba:	6825      	ldr	r5, [r4, #0]
 8009fbc:	6909      	ldr	r1, [r1, #16]
 8009fbe:	eba5 0901 	sub.w	r9, r5, r1
 8009fc2:	6965      	ldr	r5, [r4, #20]
 8009fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fcc:	3301      	adds	r3, #1
 8009fce:	444b      	add	r3, r9
 8009fd0:	106d      	asrs	r5, r5, #1
 8009fd2:	429d      	cmp	r5, r3
 8009fd4:	bf38      	it	cc
 8009fd6:	461d      	movcc	r5, r3
 8009fd8:	0553      	lsls	r3, r2, #21
 8009fda:	d531      	bpl.n	800a040 <__ssputs_r+0xa0>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	f7ff ff6b 	bl	8009eb8 <_malloc_r>
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	b950      	cbnz	r0, 8009ffc <__ssputs_r+0x5c>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	f8ca 3000 	str.w	r3, [sl]
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffc:	6921      	ldr	r1, [r4, #16]
 8009ffe:	464a      	mov	r2, r9
 800a000:	f7fc fc92 	bl	8006928 <memcpy>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00e:	81a3      	strh	r3, [r4, #12]
 800a010:	6126      	str	r6, [r4, #16]
 800a012:	6165      	str	r5, [r4, #20]
 800a014:	444e      	add	r6, r9
 800a016:	eba5 0509 	sub.w	r5, r5, r9
 800a01a:	6026      	str	r6, [r4, #0]
 800a01c:	60a5      	str	r5, [r4, #8]
 800a01e:	463e      	mov	r6, r7
 800a020:	42be      	cmp	r6, r7
 800a022:	d900      	bls.n	800a026 <__ssputs_r+0x86>
 800a024:	463e      	mov	r6, r7
 800a026:	6820      	ldr	r0, [r4, #0]
 800a028:	4632      	mov	r2, r6
 800a02a:	4641      	mov	r1, r8
 800a02c:	f000 f97e 	bl	800a32c <memmove>
 800a030:	68a3      	ldr	r3, [r4, #8]
 800a032:	1b9b      	subs	r3, r3, r6
 800a034:	60a3      	str	r3, [r4, #8]
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	4433      	add	r3, r6
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	2000      	movs	r0, #0
 800a03e:	e7db      	b.n	8009ff8 <__ssputs_r+0x58>
 800a040:	462a      	mov	r2, r5
 800a042:	f000 f999 	bl	800a378 <_realloc_r>
 800a046:	4606      	mov	r6, r0
 800a048:	2800      	cmp	r0, #0
 800a04a:	d1e1      	bne.n	800a010 <__ssputs_r+0x70>
 800a04c:	6921      	ldr	r1, [r4, #16]
 800a04e:	4650      	mov	r0, sl
 800a050:	f7ff fec6 	bl	8009de0 <_free_r>
 800a054:	e7c7      	b.n	8009fe6 <__ssputs_r+0x46>
	...

0800a058 <_svfiprintf_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	4698      	mov	r8, r3
 800a05e:	898b      	ldrh	r3, [r1, #12]
 800a060:	061b      	lsls	r3, r3, #24
 800a062:	b09d      	sub	sp, #116	; 0x74
 800a064:	4607      	mov	r7, r0
 800a066:	460d      	mov	r5, r1
 800a068:	4614      	mov	r4, r2
 800a06a:	d50e      	bpl.n	800a08a <_svfiprintf_r+0x32>
 800a06c:	690b      	ldr	r3, [r1, #16]
 800a06e:	b963      	cbnz	r3, 800a08a <_svfiprintf_r+0x32>
 800a070:	2140      	movs	r1, #64	; 0x40
 800a072:	f7ff ff21 	bl	8009eb8 <_malloc_r>
 800a076:	6028      	str	r0, [r5, #0]
 800a078:	6128      	str	r0, [r5, #16]
 800a07a:	b920      	cbnz	r0, 800a086 <_svfiprintf_r+0x2e>
 800a07c:	230c      	movs	r3, #12
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	e0d1      	b.n	800a22a <_svfiprintf_r+0x1d2>
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	616b      	str	r3, [r5, #20]
 800a08a:	2300      	movs	r3, #0
 800a08c:	9309      	str	r3, [sp, #36]	; 0x24
 800a08e:	2320      	movs	r3, #32
 800a090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a094:	f8cd 800c 	str.w	r8, [sp, #12]
 800a098:	2330      	movs	r3, #48	; 0x30
 800a09a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a244 <_svfiprintf_r+0x1ec>
 800a09e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a2:	f04f 0901 	mov.w	r9, #1
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	469a      	mov	sl, r3
 800a0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ae:	b10a      	cbz	r2, 800a0b4 <_svfiprintf_r+0x5c>
 800a0b0:	2a25      	cmp	r2, #37	; 0x25
 800a0b2:	d1f9      	bne.n	800a0a8 <_svfiprintf_r+0x50>
 800a0b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0b8:	d00b      	beq.n	800a0d2 <_svfiprintf_r+0x7a>
 800a0ba:	465b      	mov	r3, fp
 800a0bc:	4622      	mov	r2, r4
 800a0be:	4629      	mov	r1, r5
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff ff6d 	bl	8009fa0 <__ssputs_r>
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f000 80aa 	beq.w	800a220 <_svfiprintf_r+0x1c8>
 800a0cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ce:	445a      	add	r2, fp
 800a0d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 80a2 	beq.w	800a220 <_svfiprintf_r+0x1c8>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0e6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	9307      	str	r3, [sp, #28]
 800a0ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f4:	4654      	mov	r4, sl
 800a0f6:	2205      	movs	r2, #5
 800a0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fc:	4851      	ldr	r0, [pc, #324]	; (800a244 <_svfiprintf_r+0x1ec>)
 800a0fe:	f7f6 f877 	bl	80001f0 <memchr>
 800a102:	9a04      	ldr	r2, [sp, #16]
 800a104:	b9d8      	cbnz	r0, 800a13e <_svfiprintf_r+0xe6>
 800a106:	06d0      	lsls	r0, r2, #27
 800a108:	bf44      	itt	mi
 800a10a:	2320      	movmi	r3, #32
 800a10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a110:	0711      	lsls	r1, r2, #28
 800a112:	bf44      	itt	mi
 800a114:	232b      	movmi	r3, #43	; 0x2b
 800a116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11a:	f89a 3000 	ldrb.w	r3, [sl]
 800a11e:	2b2a      	cmp	r3, #42	; 0x2a
 800a120:	d015      	beq.n	800a14e <_svfiprintf_r+0xf6>
 800a122:	9a07      	ldr	r2, [sp, #28]
 800a124:	4654      	mov	r4, sl
 800a126:	2000      	movs	r0, #0
 800a128:	f04f 0c0a 	mov.w	ip, #10
 800a12c:	4621      	mov	r1, r4
 800a12e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a132:	3b30      	subs	r3, #48	; 0x30
 800a134:	2b09      	cmp	r3, #9
 800a136:	d94e      	bls.n	800a1d6 <_svfiprintf_r+0x17e>
 800a138:	b1b0      	cbz	r0, 800a168 <_svfiprintf_r+0x110>
 800a13a:	9207      	str	r2, [sp, #28]
 800a13c:	e014      	b.n	800a168 <_svfiprintf_r+0x110>
 800a13e:	eba0 0308 	sub.w	r3, r0, r8
 800a142:	fa09 f303 	lsl.w	r3, r9, r3
 800a146:	4313      	orrs	r3, r2
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	46a2      	mov	sl, r4
 800a14c:	e7d2      	b.n	800a0f4 <_svfiprintf_r+0x9c>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	1d19      	adds	r1, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9103      	str	r1, [sp, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfbb      	ittet	lt
 800a15a:	425b      	neglt	r3, r3
 800a15c:	f042 0202 	orrlt.w	r2, r2, #2
 800a160:	9307      	strge	r3, [sp, #28]
 800a162:	9307      	strlt	r3, [sp, #28]
 800a164:	bfb8      	it	lt
 800a166:	9204      	strlt	r2, [sp, #16]
 800a168:	7823      	ldrb	r3, [r4, #0]
 800a16a:	2b2e      	cmp	r3, #46	; 0x2e
 800a16c:	d10c      	bne.n	800a188 <_svfiprintf_r+0x130>
 800a16e:	7863      	ldrb	r3, [r4, #1]
 800a170:	2b2a      	cmp	r3, #42	; 0x2a
 800a172:	d135      	bne.n	800a1e0 <_svfiprintf_r+0x188>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	1d1a      	adds	r2, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	9203      	str	r2, [sp, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfb8      	it	lt
 800a180:	f04f 33ff 	movlt.w	r3, #4294967295
 800a184:	3402      	adds	r4, #2
 800a186:	9305      	str	r3, [sp, #20]
 800a188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a254 <_svfiprintf_r+0x1fc>
 800a18c:	7821      	ldrb	r1, [r4, #0]
 800a18e:	2203      	movs	r2, #3
 800a190:	4650      	mov	r0, sl
 800a192:	f7f6 f82d 	bl	80001f0 <memchr>
 800a196:	b140      	cbz	r0, 800a1aa <_svfiprintf_r+0x152>
 800a198:	2340      	movs	r3, #64	; 0x40
 800a19a:	eba0 000a 	sub.w	r0, r0, sl
 800a19e:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a2:	9b04      	ldr	r3, [sp, #16]
 800a1a4:	4303      	orrs	r3, r0
 800a1a6:	3401      	adds	r4, #1
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ae:	4826      	ldr	r0, [pc, #152]	; (800a248 <_svfiprintf_r+0x1f0>)
 800a1b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1b4:	2206      	movs	r2, #6
 800a1b6:	f7f6 f81b 	bl	80001f0 <memchr>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d038      	beq.n	800a230 <_svfiprintf_r+0x1d8>
 800a1be:	4b23      	ldr	r3, [pc, #140]	; (800a24c <_svfiprintf_r+0x1f4>)
 800a1c0:	bb1b      	cbnz	r3, 800a20a <_svfiprintf_r+0x1b2>
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	3307      	adds	r3, #7
 800a1c6:	f023 0307 	bic.w	r3, r3, #7
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	9303      	str	r3, [sp, #12]
 800a1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d0:	4433      	add	r3, r6
 800a1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d4:	e767      	b.n	800a0a6 <_svfiprintf_r+0x4e>
 800a1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1da:	460c      	mov	r4, r1
 800a1dc:	2001      	movs	r0, #1
 800a1de:	e7a5      	b.n	800a12c <_svfiprintf_r+0xd4>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	3401      	adds	r4, #1
 800a1e4:	9305      	str	r3, [sp, #20]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	f04f 0c0a 	mov.w	ip, #10
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f2:	3a30      	subs	r2, #48	; 0x30
 800a1f4:	2a09      	cmp	r2, #9
 800a1f6:	d903      	bls.n	800a200 <_svfiprintf_r+0x1a8>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0c5      	beq.n	800a188 <_svfiprintf_r+0x130>
 800a1fc:	9105      	str	r1, [sp, #20]
 800a1fe:	e7c3      	b.n	800a188 <_svfiprintf_r+0x130>
 800a200:	fb0c 2101 	mla	r1, ip, r1, r2
 800a204:	4604      	mov	r4, r0
 800a206:	2301      	movs	r3, #1
 800a208:	e7f0      	b.n	800a1ec <_svfiprintf_r+0x194>
 800a20a:	ab03      	add	r3, sp, #12
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	462a      	mov	r2, r5
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <_svfiprintf_r+0x1f8>)
 800a212:	a904      	add	r1, sp, #16
 800a214:	4638      	mov	r0, r7
 800a216:	f7fc fc3d 	bl	8006a94 <_printf_float>
 800a21a:	1c42      	adds	r2, r0, #1
 800a21c:	4606      	mov	r6, r0
 800a21e:	d1d6      	bne.n	800a1ce <_svfiprintf_r+0x176>
 800a220:	89ab      	ldrh	r3, [r5, #12]
 800a222:	065b      	lsls	r3, r3, #25
 800a224:	f53f af2c 	bmi.w	800a080 <_svfiprintf_r+0x28>
 800a228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a22a:	b01d      	add	sp, #116	; 0x74
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	ab03      	add	r3, sp, #12
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	462a      	mov	r2, r5
 800a236:	4b06      	ldr	r3, [pc, #24]	; (800a250 <_svfiprintf_r+0x1f8>)
 800a238:	a904      	add	r1, sp, #16
 800a23a:	4638      	mov	r0, r7
 800a23c:	f7fc fece 	bl	8006fdc <_printf_i>
 800a240:	e7eb      	b.n	800a21a <_svfiprintf_r+0x1c2>
 800a242:	bf00      	nop
 800a244:	0800ba3c 	.word	0x0800ba3c
 800a248:	0800ba46 	.word	0x0800ba46
 800a24c:	08006a95 	.word	0x08006a95
 800a250:	08009fa1 	.word	0x08009fa1
 800a254:	0800ba42 	.word	0x0800ba42

0800a258 <nan>:
 800a258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a260 <nan+0x8>
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	00000000 	.word	0x00000000
 800a264:	7ff80000 	.word	0x7ff80000

0800a268 <_sbrk_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d06      	ldr	r5, [pc, #24]	; (800a284 <_sbrk_r+0x1c>)
 800a26c:	2300      	movs	r3, #0
 800a26e:	4604      	mov	r4, r0
 800a270:	4608      	mov	r0, r1
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	f7f9 f866 	bl	8003344 <_sbrk>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_sbrk_r+0x1a>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_sbrk_r+0x1a>
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	20000e18 	.word	0x20000e18

0800a288 <strncmp>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	b17a      	cbz	r2, 800a2ac <strncmp+0x24>
 800a28c:	4603      	mov	r3, r0
 800a28e:	3901      	subs	r1, #1
 800a290:	1884      	adds	r4, r0, r2
 800a292:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a296:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a29a:	4290      	cmp	r0, r2
 800a29c:	d101      	bne.n	800a2a2 <strncmp+0x1a>
 800a29e:	42a3      	cmp	r3, r4
 800a2a0:	d101      	bne.n	800a2a6 <strncmp+0x1e>
 800a2a2:	1a80      	subs	r0, r0, r2
 800a2a4:	bd10      	pop	{r4, pc}
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d1f3      	bne.n	800a292 <strncmp+0xa>
 800a2aa:	e7fa      	b.n	800a2a2 <strncmp+0x1a>
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	e7f9      	b.n	800a2a4 <strncmp+0x1c>

0800a2b0 <__ascii_wctomb>:
 800a2b0:	b149      	cbz	r1, 800a2c6 <__ascii_wctomb+0x16>
 800a2b2:	2aff      	cmp	r2, #255	; 0xff
 800a2b4:	bf85      	ittet	hi
 800a2b6:	238a      	movhi	r3, #138	; 0x8a
 800a2b8:	6003      	strhi	r3, [r0, #0]
 800a2ba:	700a      	strbls	r2, [r1, #0]
 800a2bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2c0:	bf98      	it	ls
 800a2c2:	2001      	movls	r0, #1
 800a2c4:	4770      	bx	lr
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4770      	bx	lr
	...

0800a2cc <__assert_func>:
 800a2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ce:	4614      	mov	r4, r2
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <__assert_func+0x2c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	68d8      	ldr	r0, [r3, #12]
 800a2da:	b14c      	cbz	r4, 800a2f0 <__assert_func+0x24>
 800a2dc:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <__assert_func+0x30>)
 800a2de:	9100      	str	r1, [sp, #0]
 800a2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2e4:	4906      	ldr	r1, [pc, #24]	; (800a300 <__assert_func+0x34>)
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	f000 f80e 	bl	800a308 <fiprintf>
 800a2ec:	f000 fa8c 	bl	800a808 <abort>
 800a2f0:	4b04      	ldr	r3, [pc, #16]	; (800a304 <__assert_func+0x38>)
 800a2f2:	461c      	mov	r4, r3
 800a2f4:	e7f3      	b.n	800a2de <__assert_func+0x12>
 800a2f6:	bf00      	nop
 800a2f8:	2000000c 	.word	0x2000000c
 800a2fc:	0800ba4d 	.word	0x0800ba4d
 800a300:	0800ba5a 	.word	0x0800ba5a
 800a304:	0800ba88 	.word	0x0800ba88

0800a308 <fiprintf>:
 800a308:	b40e      	push	{r1, r2, r3}
 800a30a:	b503      	push	{r0, r1, lr}
 800a30c:	4601      	mov	r1, r0
 800a30e:	ab03      	add	r3, sp, #12
 800a310:	4805      	ldr	r0, [pc, #20]	; (800a328 <fiprintf+0x20>)
 800a312:	f853 2b04 	ldr.w	r2, [r3], #4
 800a316:	6800      	ldr	r0, [r0, #0]
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	f000 f885 	bl	800a428 <_vfiprintf_r>
 800a31e:	b002      	add	sp, #8
 800a320:	f85d eb04 	ldr.w	lr, [sp], #4
 800a324:	b003      	add	sp, #12
 800a326:	4770      	bx	lr
 800a328:	2000000c 	.word	0x2000000c

0800a32c <memmove>:
 800a32c:	4288      	cmp	r0, r1
 800a32e:	b510      	push	{r4, lr}
 800a330:	eb01 0402 	add.w	r4, r1, r2
 800a334:	d902      	bls.n	800a33c <memmove+0x10>
 800a336:	4284      	cmp	r4, r0
 800a338:	4623      	mov	r3, r4
 800a33a:	d807      	bhi.n	800a34c <memmove+0x20>
 800a33c:	1e43      	subs	r3, r0, #1
 800a33e:	42a1      	cmp	r1, r4
 800a340:	d008      	beq.n	800a354 <memmove+0x28>
 800a342:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a34a:	e7f8      	b.n	800a33e <memmove+0x12>
 800a34c:	4402      	add	r2, r0
 800a34e:	4601      	mov	r1, r0
 800a350:	428a      	cmp	r2, r1
 800a352:	d100      	bne.n	800a356 <memmove+0x2a>
 800a354:	bd10      	pop	{r4, pc}
 800a356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a35a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35e:	e7f7      	b.n	800a350 <memmove+0x24>

0800a360 <__malloc_lock>:
 800a360:	4801      	ldr	r0, [pc, #4]	; (800a368 <__malloc_lock+0x8>)
 800a362:	f000 bc11 	b.w	800ab88 <__retarget_lock_acquire_recursive>
 800a366:	bf00      	nop
 800a368:	20000e1c 	.word	0x20000e1c

0800a36c <__malloc_unlock>:
 800a36c:	4801      	ldr	r0, [pc, #4]	; (800a374 <__malloc_unlock+0x8>)
 800a36e:	f000 bc0c 	b.w	800ab8a <__retarget_lock_release_recursive>
 800a372:	bf00      	nop
 800a374:	20000e1c 	.word	0x20000e1c

0800a378 <_realloc_r>:
 800a378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37c:	4680      	mov	r8, r0
 800a37e:	4614      	mov	r4, r2
 800a380:	460e      	mov	r6, r1
 800a382:	b921      	cbnz	r1, 800a38e <_realloc_r+0x16>
 800a384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a388:	4611      	mov	r1, r2
 800a38a:	f7ff bd95 	b.w	8009eb8 <_malloc_r>
 800a38e:	b92a      	cbnz	r2, 800a39c <_realloc_r+0x24>
 800a390:	f7ff fd26 	bl	8009de0 <_free_r>
 800a394:	4625      	mov	r5, r4
 800a396:	4628      	mov	r0, r5
 800a398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39c:	f000 fc5c 	bl	800ac58 <_malloc_usable_size_r>
 800a3a0:	4284      	cmp	r4, r0
 800a3a2:	4607      	mov	r7, r0
 800a3a4:	d802      	bhi.n	800a3ac <_realloc_r+0x34>
 800a3a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3aa:	d812      	bhi.n	800a3d2 <_realloc_r+0x5a>
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	f7ff fd82 	bl	8009eb8 <_malloc_r>
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d0ed      	beq.n	800a396 <_realloc_r+0x1e>
 800a3ba:	42bc      	cmp	r4, r7
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4631      	mov	r1, r6
 800a3c0:	bf28      	it	cs
 800a3c2:	463a      	movcs	r2, r7
 800a3c4:	f7fc fab0 	bl	8006928 <memcpy>
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	f7ff fd08 	bl	8009de0 <_free_r>
 800a3d0:	e7e1      	b.n	800a396 <_realloc_r+0x1e>
 800a3d2:	4635      	mov	r5, r6
 800a3d4:	e7df      	b.n	800a396 <_realloc_r+0x1e>

0800a3d6 <__sfputc_r>:
 800a3d6:	6893      	ldr	r3, [r2, #8]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	b410      	push	{r4}
 800a3de:	6093      	str	r3, [r2, #8]
 800a3e0:	da08      	bge.n	800a3f4 <__sfputc_r+0x1e>
 800a3e2:	6994      	ldr	r4, [r2, #24]
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	db01      	blt.n	800a3ec <__sfputc_r+0x16>
 800a3e8:	290a      	cmp	r1, #10
 800a3ea:	d103      	bne.n	800a3f4 <__sfputc_r+0x1e>
 800a3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3f0:	f000 b94a 	b.w	800a688 <__swbuf_r>
 800a3f4:	6813      	ldr	r3, [r2, #0]
 800a3f6:	1c58      	adds	r0, r3, #1
 800a3f8:	6010      	str	r0, [r2, #0]
 800a3fa:	7019      	strb	r1, [r3, #0]
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <__sfputs_r>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	4606      	mov	r6, r0
 800a408:	460f      	mov	r7, r1
 800a40a:	4614      	mov	r4, r2
 800a40c:	18d5      	adds	r5, r2, r3
 800a40e:	42ac      	cmp	r4, r5
 800a410:	d101      	bne.n	800a416 <__sfputs_r+0x12>
 800a412:	2000      	movs	r0, #0
 800a414:	e007      	b.n	800a426 <__sfputs_r+0x22>
 800a416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41a:	463a      	mov	r2, r7
 800a41c:	4630      	mov	r0, r6
 800a41e:	f7ff ffda 	bl	800a3d6 <__sfputc_r>
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	d1f3      	bne.n	800a40e <__sfputs_r+0xa>
 800a426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a428 <_vfiprintf_r>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	460d      	mov	r5, r1
 800a42e:	b09d      	sub	sp, #116	; 0x74
 800a430:	4614      	mov	r4, r2
 800a432:	4698      	mov	r8, r3
 800a434:	4606      	mov	r6, r0
 800a436:	b118      	cbz	r0, 800a440 <_vfiprintf_r+0x18>
 800a438:	6983      	ldr	r3, [r0, #24]
 800a43a:	b90b      	cbnz	r3, 800a440 <_vfiprintf_r+0x18>
 800a43c:	f000 fb06 	bl	800aa4c <__sinit>
 800a440:	4b89      	ldr	r3, [pc, #548]	; (800a668 <_vfiprintf_r+0x240>)
 800a442:	429d      	cmp	r5, r3
 800a444:	d11b      	bne.n	800a47e <_vfiprintf_r+0x56>
 800a446:	6875      	ldr	r5, [r6, #4]
 800a448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a44a:	07d9      	lsls	r1, r3, #31
 800a44c:	d405      	bmi.n	800a45a <_vfiprintf_r+0x32>
 800a44e:	89ab      	ldrh	r3, [r5, #12]
 800a450:	059a      	lsls	r2, r3, #22
 800a452:	d402      	bmi.n	800a45a <_vfiprintf_r+0x32>
 800a454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a456:	f000 fb97 	bl	800ab88 <__retarget_lock_acquire_recursive>
 800a45a:	89ab      	ldrh	r3, [r5, #12]
 800a45c:	071b      	lsls	r3, r3, #28
 800a45e:	d501      	bpl.n	800a464 <_vfiprintf_r+0x3c>
 800a460:	692b      	ldr	r3, [r5, #16]
 800a462:	b9eb      	cbnz	r3, 800a4a0 <_vfiprintf_r+0x78>
 800a464:	4629      	mov	r1, r5
 800a466:	4630      	mov	r0, r6
 800a468:	f000 f960 	bl	800a72c <__swsetup_r>
 800a46c:	b1c0      	cbz	r0, 800a4a0 <_vfiprintf_r+0x78>
 800a46e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a470:	07dc      	lsls	r4, r3, #31
 800a472:	d50e      	bpl.n	800a492 <_vfiprintf_r+0x6a>
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	b01d      	add	sp, #116	; 0x74
 800a47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47e:	4b7b      	ldr	r3, [pc, #492]	; (800a66c <_vfiprintf_r+0x244>)
 800a480:	429d      	cmp	r5, r3
 800a482:	d101      	bne.n	800a488 <_vfiprintf_r+0x60>
 800a484:	68b5      	ldr	r5, [r6, #8]
 800a486:	e7df      	b.n	800a448 <_vfiprintf_r+0x20>
 800a488:	4b79      	ldr	r3, [pc, #484]	; (800a670 <_vfiprintf_r+0x248>)
 800a48a:	429d      	cmp	r5, r3
 800a48c:	bf08      	it	eq
 800a48e:	68f5      	ldreq	r5, [r6, #12]
 800a490:	e7da      	b.n	800a448 <_vfiprintf_r+0x20>
 800a492:	89ab      	ldrh	r3, [r5, #12]
 800a494:	0598      	lsls	r0, r3, #22
 800a496:	d4ed      	bmi.n	800a474 <_vfiprintf_r+0x4c>
 800a498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a49a:	f000 fb76 	bl	800ab8a <__retarget_lock_release_recursive>
 800a49e:	e7e9      	b.n	800a474 <_vfiprintf_r+0x4c>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ae:	2330      	movs	r3, #48	; 0x30
 800a4b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a674 <_vfiprintf_r+0x24c>
 800a4b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4b8:	f04f 0901 	mov.w	r9, #1
 800a4bc:	4623      	mov	r3, r4
 800a4be:	469a      	mov	sl, r3
 800a4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4c4:	b10a      	cbz	r2, 800a4ca <_vfiprintf_r+0xa2>
 800a4c6:	2a25      	cmp	r2, #37	; 0x25
 800a4c8:	d1f9      	bne.n	800a4be <_vfiprintf_r+0x96>
 800a4ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ce:	d00b      	beq.n	800a4e8 <_vfiprintf_r+0xc0>
 800a4d0:	465b      	mov	r3, fp
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f7ff ff94 	bl	800a404 <__sfputs_r>
 800a4dc:	3001      	adds	r0, #1
 800a4de:	f000 80aa 	beq.w	800a636 <_vfiprintf_r+0x20e>
 800a4e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e4:	445a      	add	r2, fp
 800a4e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 80a2 	beq.w	800a636 <_vfiprintf_r+0x20e>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4fc:	f10a 0a01 	add.w	sl, sl, #1
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a508:	931a      	str	r3, [sp, #104]	; 0x68
 800a50a:	4654      	mov	r4, sl
 800a50c:	2205      	movs	r2, #5
 800a50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a512:	4858      	ldr	r0, [pc, #352]	; (800a674 <_vfiprintf_r+0x24c>)
 800a514:	f7f5 fe6c 	bl	80001f0 <memchr>
 800a518:	9a04      	ldr	r2, [sp, #16]
 800a51a:	b9d8      	cbnz	r0, 800a554 <_vfiprintf_r+0x12c>
 800a51c:	06d1      	lsls	r1, r2, #27
 800a51e:	bf44      	itt	mi
 800a520:	2320      	movmi	r3, #32
 800a522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a526:	0713      	lsls	r3, r2, #28
 800a528:	bf44      	itt	mi
 800a52a:	232b      	movmi	r3, #43	; 0x2b
 800a52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a530:	f89a 3000 	ldrb.w	r3, [sl]
 800a534:	2b2a      	cmp	r3, #42	; 0x2a
 800a536:	d015      	beq.n	800a564 <_vfiprintf_r+0x13c>
 800a538:	9a07      	ldr	r2, [sp, #28]
 800a53a:	4654      	mov	r4, sl
 800a53c:	2000      	movs	r0, #0
 800a53e:	f04f 0c0a 	mov.w	ip, #10
 800a542:	4621      	mov	r1, r4
 800a544:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a548:	3b30      	subs	r3, #48	; 0x30
 800a54a:	2b09      	cmp	r3, #9
 800a54c:	d94e      	bls.n	800a5ec <_vfiprintf_r+0x1c4>
 800a54e:	b1b0      	cbz	r0, 800a57e <_vfiprintf_r+0x156>
 800a550:	9207      	str	r2, [sp, #28]
 800a552:	e014      	b.n	800a57e <_vfiprintf_r+0x156>
 800a554:	eba0 0308 	sub.w	r3, r0, r8
 800a558:	fa09 f303 	lsl.w	r3, r9, r3
 800a55c:	4313      	orrs	r3, r2
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	46a2      	mov	sl, r4
 800a562:	e7d2      	b.n	800a50a <_vfiprintf_r+0xe2>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	1d19      	adds	r1, r3, #4
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	9103      	str	r1, [sp, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bfbb      	ittet	lt
 800a570:	425b      	neglt	r3, r3
 800a572:	f042 0202 	orrlt.w	r2, r2, #2
 800a576:	9307      	strge	r3, [sp, #28]
 800a578:	9307      	strlt	r3, [sp, #28]
 800a57a:	bfb8      	it	lt
 800a57c:	9204      	strlt	r2, [sp, #16]
 800a57e:	7823      	ldrb	r3, [r4, #0]
 800a580:	2b2e      	cmp	r3, #46	; 0x2e
 800a582:	d10c      	bne.n	800a59e <_vfiprintf_r+0x176>
 800a584:	7863      	ldrb	r3, [r4, #1]
 800a586:	2b2a      	cmp	r3, #42	; 0x2a
 800a588:	d135      	bne.n	800a5f6 <_vfiprintf_r+0x1ce>
 800a58a:	9b03      	ldr	r3, [sp, #12]
 800a58c:	1d1a      	adds	r2, r3, #4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	9203      	str	r2, [sp, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	bfb8      	it	lt
 800a596:	f04f 33ff 	movlt.w	r3, #4294967295
 800a59a:	3402      	adds	r4, #2
 800a59c:	9305      	str	r3, [sp, #20]
 800a59e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a684 <_vfiprintf_r+0x25c>
 800a5a2:	7821      	ldrb	r1, [r4, #0]
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	f7f5 fe22 	bl	80001f0 <memchr>
 800a5ac:	b140      	cbz	r0, 800a5c0 <_vfiprintf_r+0x198>
 800a5ae:	2340      	movs	r3, #64	; 0x40
 800a5b0:	eba0 000a 	sub.w	r0, r0, sl
 800a5b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a5b8:	9b04      	ldr	r3, [sp, #16]
 800a5ba:	4303      	orrs	r3, r0
 800a5bc:	3401      	adds	r4, #1
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c4:	482c      	ldr	r0, [pc, #176]	; (800a678 <_vfiprintf_r+0x250>)
 800a5c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5ca:	2206      	movs	r2, #6
 800a5cc:	f7f5 fe10 	bl	80001f0 <memchr>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d03f      	beq.n	800a654 <_vfiprintf_r+0x22c>
 800a5d4:	4b29      	ldr	r3, [pc, #164]	; (800a67c <_vfiprintf_r+0x254>)
 800a5d6:	bb1b      	cbnz	r3, 800a620 <_vfiprintf_r+0x1f8>
 800a5d8:	9b03      	ldr	r3, [sp, #12]
 800a5da:	3307      	adds	r3, #7
 800a5dc:	f023 0307 	bic.w	r3, r3, #7
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	9303      	str	r3, [sp, #12]
 800a5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e6:	443b      	add	r3, r7
 800a5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ea:	e767      	b.n	800a4bc <_vfiprintf_r+0x94>
 800a5ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	e7a5      	b.n	800a542 <_vfiprintf_r+0x11a>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	3401      	adds	r4, #1
 800a5fa:	9305      	str	r3, [sp, #20]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	f04f 0c0a 	mov.w	ip, #10
 800a602:	4620      	mov	r0, r4
 800a604:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a608:	3a30      	subs	r2, #48	; 0x30
 800a60a:	2a09      	cmp	r2, #9
 800a60c:	d903      	bls.n	800a616 <_vfiprintf_r+0x1ee>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0c5      	beq.n	800a59e <_vfiprintf_r+0x176>
 800a612:	9105      	str	r1, [sp, #20]
 800a614:	e7c3      	b.n	800a59e <_vfiprintf_r+0x176>
 800a616:	fb0c 2101 	mla	r1, ip, r1, r2
 800a61a:	4604      	mov	r4, r0
 800a61c:	2301      	movs	r3, #1
 800a61e:	e7f0      	b.n	800a602 <_vfiprintf_r+0x1da>
 800a620:	ab03      	add	r3, sp, #12
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	462a      	mov	r2, r5
 800a626:	4b16      	ldr	r3, [pc, #88]	; (800a680 <_vfiprintf_r+0x258>)
 800a628:	a904      	add	r1, sp, #16
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7fc fa32 	bl	8006a94 <_printf_float>
 800a630:	4607      	mov	r7, r0
 800a632:	1c78      	adds	r0, r7, #1
 800a634:	d1d6      	bne.n	800a5e4 <_vfiprintf_r+0x1bc>
 800a636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a638:	07d9      	lsls	r1, r3, #31
 800a63a:	d405      	bmi.n	800a648 <_vfiprintf_r+0x220>
 800a63c:	89ab      	ldrh	r3, [r5, #12]
 800a63e:	059a      	lsls	r2, r3, #22
 800a640:	d402      	bmi.n	800a648 <_vfiprintf_r+0x220>
 800a642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a644:	f000 faa1 	bl	800ab8a <__retarget_lock_release_recursive>
 800a648:	89ab      	ldrh	r3, [r5, #12]
 800a64a:	065b      	lsls	r3, r3, #25
 800a64c:	f53f af12 	bmi.w	800a474 <_vfiprintf_r+0x4c>
 800a650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a652:	e711      	b.n	800a478 <_vfiprintf_r+0x50>
 800a654:	ab03      	add	r3, sp, #12
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	462a      	mov	r2, r5
 800a65a:	4b09      	ldr	r3, [pc, #36]	; (800a680 <_vfiprintf_r+0x258>)
 800a65c:	a904      	add	r1, sp, #16
 800a65e:	4630      	mov	r0, r6
 800a660:	f7fc fcbc 	bl	8006fdc <_printf_i>
 800a664:	e7e4      	b.n	800a630 <_vfiprintf_r+0x208>
 800a666:	bf00      	nop
 800a668:	0800baac 	.word	0x0800baac
 800a66c:	0800bacc 	.word	0x0800bacc
 800a670:	0800ba8c 	.word	0x0800ba8c
 800a674:	0800ba3c 	.word	0x0800ba3c
 800a678:	0800ba46 	.word	0x0800ba46
 800a67c:	08006a95 	.word	0x08006a95
 800a680:	0800a405 	.word	0x0800a405
 800a684:	0800ba42 	.word	0x0800ba42

0800a688 <__swbuf_r>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	460e      	mov	r6, r1
 800a68c:	4614      	mov	r4, r2
 800a68e:	4605      	mov	r5, r0
 800a690:	b118      	cbz	r0, 800a69a <__swbuf_r+0x12>
 800a692:	6983      	ldr	r3, [r0, #24]
 800a694:	b90b      	cbnz	r3, 800a69a <__swbuf_r+0x12>
 800a696:	f000 f9d9 	bl	800aa4c <__sinit>
 800a69a:	4b21      	ldr	r3, [pc, #132]	; (800a720 <__swbuf_r+0x98>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	d12b      	bne.n	800a6f8 <__swbuf_r+0x70>
 800a6a0:	686c      	ldr	r4, [r5, #4]
 800a6a2:	69a3      	ldr	r3, [r4, #24]
 800a6a4:	60a3      	str	r3, [r4, #8]
 800a6a6:	89a3      	ldrh	r3, [r4, #12]
 800a6a8:	071a      	lsls	r2, r3, #28
 800a6aa:	d52f      	bpl.n	800a70c <__swbuf_r+0x84>
 800a6ac:	6923      	ldr	r3, [r4, #16]
 800a6ae:	b36b      	cbz	r3, 800a70c <__swbuf_r+0x84>
 800a6b0:	6923      	ldr	r3, [r4, #16]
 800a6b2:	6820      	ldr	r0, [r4, #0]
 800a6b4:	1ac0      	subs	r0, r0, r3
 800a6b6:	6963      	ldr	r3, [r4, #20]
 800a6b8:	b2f6      	uxtb	r6, r6
 800a6ba:	4283      	cmp	r3, r0
 800a6bc:	4637      	mov	r7, r6
 800a6be:	dc04      	bgt.n	800a6ca <__swbuf_r+0x42>
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f92e 	bl	800a924 <_fflush_r>
 800a6c8:	bb30      	cbnz	r0, 800a718 <__swbuf_r+0x90>
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	60a3      	str	r3, [r4, #8]
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	6022      	str	r2, [r4, #0]
 800a6d6:	701e      	strb	r6, [r3, #0]
 800a6d8:	6963      	ldr	r3, [r4, #20]
 800a6da:	3001      	adds	r0, #1
 800a6dc:	4283      	cmp	r3, r0
 800a6de:	d004      	beq.n	800a6ea <__swbuf_r+0x62>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	07db      	lsls	r3, r3, #31
 800a6e4:	d506      	bpl.n	800a6f4 <__swbuf_r+0x6c>
 800a6e6:	2e0a      	cmp	r6, #10
 800a6e8:	d104      	bne.n	800a6f4 <__swbuf_r+0x6c>
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f000 f919 	bl	800a924 <_fflush_r>
 800a6f2:	b988      	cbnz	r0, 800a718 <__swbuf_r+0x90>
 800a6f4:	4638      	mov	r0, r7
 800a6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f8:	4b0a      	ldr	r3, [pc, #40]	; (800a724 <__swbuf_r+0x9c>)
 800a6fa:	429c      	cmp	r4, r3
 800a6fc:	d101      	bne.n	800a702 <__swbuf_r+0x7a>
 800a6fe:	68ac      	ldr	r4, [r5, #8]
 800a700:	e7cf      	b.n	800a6a2 <__swbuf_r+0x1a>
 800a702:	4b09      	ldr	r3, [pc, #36]	; (800a728 <__swbuf_r+0xa0>)
 800a704:	429c      	cmp	r4, r3
 800a706:	bf08      	it	eq
 800a708:	68ec      	ldreq	r4, [r5, #12]
 800a70a:	e7ca      	b.n	800a6a2 <__swbuf_r+0x1a>
 800a70c:	4621      	mov	r1, r4
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 f80c 	bl	800a72c <__swsetup_r>
 800a714:	2800      	cmp	r0, #0
 800a716:	d0cb      	beq.n	800a6b0 <__swbuf_r+0x28>
 800a718:	f04f 37ff 	mov.w	r7, #4294967295
 800a71c:	e7ea      	b.n	800a6f4 <__swbuf_r+0x6c>
 800a71e:	bf00      	nop
 800a720:	0800baac 	.word	0x0800baac
 800a724:	0800bacc 	.word	0x0800bacc
 800a728:	0800ba8c 	.word	0x0800ba8c

0800a72c <__swsetup_r>:
 800a72c:	4b32      	ldr	r3, [pc, #200]	; (800a7f8 <__swsetup_r+0xcc>)
 800a72e:	b570      	push	{r4, r5, r6, lr}
 800a730:	681d      	ldr	r5, [r3, #0]
 800a732:	4606      	mov	r6, r0
 800a734:	460c      	mov	r4, r1
 800a736:	b125      	cbz	r5, 800a742 <__swsetup_r+0x16>
 800a738:	69ab      	ldr	r3, [r5, #24]
 800a73a:	b913      	cbnz	r3, 800a742 <__swsetup_r+0x16>
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 f985 	bl	800aa4c <__sinit>
 800a742:	4b2e      	ldr	r3, [pc, #184]	; (800a7fc <__swsetup_r+0xd0>)
 800a744:	429c      	cmp	r4, r3
 800a746:	d10f      	bne.n	800a768 <__swsetup_r+0x3c>
 800a748:	686c      	ldr	r4, [r5, #4]
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a750:	0719      	lsls	r1, r3, #28
 800a752:	d42c      	bmi.n	800a7ae <__swsetup_r+0x82>
 800a754:	06dd      	lsls	r5, r3, #27
 800a756:	d411      	bmi.n	800a77c <__swsetup_r+0x50>
 800a758:	2309      	movs	r3, #9
 800a75a:	6033      	str	r3, [r6, #0]
 800a75c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	f04f 30ff 	mov.w	r0, #4294967295
 800a766:	e03e      	b.n	800a7e6 <__swsetup_r+0xba>
 800a768:	4b25      	ldr	r3, [pc, #148]	; (800a800 <__swsetup_r+0xd4>)
 800a76a:	429c      	cmp	r4, r3
 800a76c:	d101      	bne.n	800a772 <__swsetup_r+0x46>
 800a76e:	68ac      	ldr	r4, [r5, #8]
 800a770:	e7eb      	b.n	800a74a <__swsetup_r+0x1e>
 800a772:	4b24      	ldr	r3, [pc, #144]	; (800a804 <__swsetup_r+0xd8>)
 800a774:	429c      	cmp	r4, r3
 800a776:	bf08      	it	eq
 800a778:	68ec      	ldreq	r4, [r5, #12]
 800a77a:	e7e6      	b.n	800a74a <__swsetup_r+0x1e>
 800a77c:	0758      	lsls	r0, r3, #29
 800a77e:	d512      	bpl.n	800a7a6 <__swsetup_r+0x7a>
 800a780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a782:	b141      	cbz	r1, 800a796 <__swsetup_r+0x6a>
 800a784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a788:	4299      	cmp	r1, r3
 800a78a:	d002      	beq.n	800a792 <__swsetup_r+0x66>
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff fb27 	bl	8009de0 <_free_r>
 800a792:	2300      	movs	r3, #0
 800a794:	6363      	str	r3, [r4, #52]	; 0x34
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a79c:	81a3      	strh	r3, [r4, #12]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	6063      	str	r3, [r4, #4]
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	f043 0308 	orr.w	r3, r3, #8
 800a7ac:	81a3      	strh	r3, [r4, #12]
 800a7ae:	6923      	ldr	r3, [r4, #16]
 800a7b0:	b94b      	cbnz	r3, 800a7c6 <__swsetup_r+0x9a>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7bc:	d003      	beq.n	800a7c6 <__swsetup_r+0x9a>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f000 fa09 	bl	800abd8 <__smakebuf_r>
 800a7c6:	89a0      	ldrh	r0, [r4, #12]
 800a7c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7cc:	f010 0301 	ands.w	r3, r0, #1
 800a7d0:	d00a      	beq.n	800a7e8 <__swsetup_r+0xbc>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60a3      	str	r3, [r4, #8]
 800a7d6:	6963      	ldr	r3, [r4, #20]
 800a7d8:	425b      	negs	r3, r3
 800a7da:	61a3      	str	r3, [r4, #24]
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	b943      	cbnz	r3, 800a7f2 <__swsetup_r+0xc6>
 800a7e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7e4:	d1ba      	bne.n	800a75c <__swsetup_r+0x30>
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
 800a7e8:	0781      	lsls	r1, r0, #30
 800a7ea:	bf58      	it	pl
 800a7ec:	6963      	ldrpl	r3, [r4, #20]
 800a7ee:	60a3      	str	r3, [r4, #8]
 800a7f0:	e7f4      	b.n	800a7dc <__swsetup_r+0xb0>
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	e7f7      	b.n	800a7e6 <__swsetup_r+0xba>
 800a7f6:	bf00      	nop
 800a7f8:	2000000c 	.word	0x2000000c
 800a7fc:	0800baac 	.word	0x0800baac
 800a800:	0800bacc 	.word	0x0800bacc
 800a804:	0800ba8c 	.word	0x0800ba8c

0800a808 <abort>:
 800a808:	b508      	push	{r3, lr}
 800a80a:	2006      	movs	r0, #6
 800a80c:	f000 fa54 	bl	800acb8 <raise>
 800a810:	2001      	movs	r0, #1
 800a812:	f7f8 fd1f 	bl	8003254 <_exit>
	...

0800a818 <__sflush_r>:
 800a818:	898a      	ldrh	r2, [r1, #12]
 800a81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81e:	4605      	mov	r5, r0
 800a820:	0710      	lsls	r0, r2, #28
 800a822:	460c      	mov	r4, r1
 800a824:	d458      	bmi.n	800a8d8 <__sflush_r+0xc0>
 800a826:	684b      	ldr	r3, [r1, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dc05      	bgt.n	800a838 <__sflush_r+0x20>
 800a82c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	dc02      	bgt.n	800a838 <__sflush_r+0x20>
 800a832:	2000      	movs	r0, #0
 800a834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a83a:	2e00      	cmp	r6, #0
 800a83c:	d0f9      	beq.n	800a832 <__sflush_r+0x1a>
 800a83e:	2300      	movs	r3, #0
 800a840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a844:	682f      	ldr	r7, [r5, #0]
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	d032      	beq.n	800a8b0 <__sflush_r+0x98>
 800a84a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	075a      	lsls	r2, r3, #29
 800a850:	d505      	bpl.n	800a85e <__sflush_r+0x46>
 800a852:	6863      	ldr	r3, [r4, #4]
 800a854:	1ac0      	subs	r0, r0, r3
 800a856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a858:	b10b      	cbz	r3, 800a85e <__sflush_r+0x46>
 800a85a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a85c:	1ac0      	subs	r0, r0, r3
 800a85e:	2300      	movs	r3, #0
 800a860:	4602      	mov	r2, r0
 800a862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a864:	6a21      	ldr	r1, [r4, #32]
 800a866:	4628      	mov	r0, r5
 800a868:	47b0      	blx	r6
 800a86a:	1c43      	adds	r3, r0, #1
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	d106      	bne.n	800a87e <__sflush_r+0x66>
 800a870:	6829      	ldr	r1, [r5, #0]
 800a872:	291d      	cmp	r1, #29
 800a874:	d82c      	bhi.n	800a8d0 <__sflush_r+0xb8>
 800a876:	4a2a      	ldr	r2, [pc, #168]	; (800a920 <__sflush_r+0x108>)
 800a878:	40ca      	lsrs	r2, r1
 800a87a:	07d6      	lsls	r6, r2, #31
 800a87c:	d528      	bpl.n	800a8d0 <__sflush_r+0xb8>
 800a87e:	2200      	movs	r2, #0
 800a880:	6062      	str	r2, [r4, #4]
 800a882:	04d9      	lsls	r1, r3, #19
 800a884:	6922      	ldr	r2, [r4, #16]
 800a886:	6022      	str	r2, [r4, #0]
 800a888:	d504      	bpl.n	800a894 <__sflush_r+0x7c>
 800a88a:	1c42      	adds	r2, r0, #1
 800a88c:	d101      	bne.n	800a892 <__sflush_r+0x7a>
 800a88e:	682b      	ldr	r3, [r5, #0]
 800a890:	b903      	cbnz	r3, 800a894 <__sflush_r+0x7c>
 800a892:	6560      	str	r0, [r4, #84]	; 0x54
 800a894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a896:	602f      	str	r7, [r5, #0]
 800a898:	2900      	cmp	r1, #0
 800a89a:	d0ca      	beq.n	800a832 <__sflush_r+0x1a>
 800a89c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8a0:	4299      	cmp	r1, r3
 800a8a2:	d002      	beq.n	800a8aa <__sflush_r+0x92>
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f7ff fa9b 	bl	8009de0 <_free_r>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a8ae:	e7c1      	b.n	800a834 <__sflush_r+0x1c>
 800a8b0:	6a21      	ldr	r1, [r4, #32]
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b0      	blx	r6
 800a8b8:	1c41      	adds	r1, r0, #1
 800a8ba:	d1c7      	bne.n	800a84c <__sflush_r+0x34>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0c4      	beq.n	800a84c <__sflush_r+0x34>
 800a8c2:	2b1d      	cmp	r3, #29
 800a8c4:	d001      	beq.n	800a8ca <__sflush_r+0xb2>
 800a8c6:	2b16      	cmp	r3, #22
 800a8c8:	d101      	bne.n	800a8ce <__sflush_r+0xb6>
 800a8ca:	602f      	str	r7, [r5, #0]
 800a8cc:	e7b1      	b.n	800a832 <__sflush_r+0x1a>
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	e7ad      	b.n	800a834 <__sflush_r+0x1c>
 800a8d8:	690f      	ldr	r7, [r1, #16]
 800a8da:	2f00      	cmp	r7, #0
 800a8dc:	d0a9      	beq.n	800a832 <__sflush_r+0x1a>
 800a8de:	0793      	lsls	r3, r2, #30
 800a8e0:	680e      	ldr	r6, [r1, #0]
 800a8e2:	bf08      	it	eq
 800a8e4:	694b      	ldreq	r3, [r1, #20]
 800a8e6:	600f      	str	r7, [r1, #0]
 800a8e8:	bf18      	it	ne
 800a8ea:	2300      	movne	r3, #0
 800a8ec:	eba6 0807 	sub.w	r8, r6, r7
 800a8f0:	608b      	str	r3, [r1, #8]
 800a8f2:	f1b8 0f00 	cmp.w	r8, #0
 800a8f6:	dd9c      	ble.n	800a832 <__sflush_r+0x1a>
 800a8f8:	6a21      	ldr	r1, [r4, #32]
 800a8fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8fc:	4643      	mov	r3, r8
 800a8fe:	463a      	mov	r2, r7
 800a900:	4628      	mov	r0, r5
 800a902:	47b0      	blx	r6
 800a904:	2800      	cmp	r0, #0
 800a906:	dc06      	bgt.n	800a916 <__sflush_r+0xfe>
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	e78e      	b.n	800a834 <__sflush_r+0x1c>
 800a916:	4407      	add	r7, r0
 800a918:	eba8 0800 	sub.w	r8, r8, r0
 800a91c:	e7e9      	b.n	800a8f2 <__sflush_r+0xda>
 800a91e:	bf00      	nop
 800a920:	20400001 	.word	0x20400001

0800a924 <_fflush_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	690b      	ldr	r3, [r1, #16]
 800a928:	4605      	mov	r5, r0
 800a92a:	460c      	mov	r4, r1
 800a92c:	b913      	cbnz	r3, 800a934 <_fflush_r+0x10>
 800a92e:	2500      	movs	r5, #0
 800a930:	4628      	mov	r0, r5
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	b118      	cbz	r0, 800a93e <_fflush_r+0x1a>
 800a936:	6983      	ldr	r3, [r0, #24]
 800a938:	b90b      	cbnz	r3, 800a93e <_fflush_r+0x1a>
 800a93a:	f000 f887 	bl	800aa4c <__sinit>
 800a93e:	4b14      	ldr	r3, [pc, #80]	; (800a990 <_fflush_r+0x6c>)
 800a940:	429c      	cmp	r4, r3
 800a942:	d11b      	bne.n	800a97c <_fflush_r+0x58>
 800a944:	686c      	ldr	r4, [r5, #4]
 800a946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0ef      	beq.n	800a92e <_fflush_r+0xa>
 800a94e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a950:	07d0      	lsls	r0, r2, #31
 800a952:	d404      	bmi.n	800a95e <_fflush_r+0x3a>
 800a954:	0599      	lsls	r1, r3, #22
 800a956:	d402      	bmi.n	800a95e <_fflush_r+0x3a>
 800a958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a95a:	f000 f915 	bl	800ab88 <__retarget_lock_acquire_recursive>
 800a95e:	4628      	mov	r0, r5
 800a960:	4621      	mov	r1, r4
 800a962:	f7ff ff59 	bl	800a818 <__sflush_r>
 800a966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a968:	07da      	lsls	r2, r3, #31
 800a96a:	4605      	mov	r5, r0
 800a96c:	d4e0      	bmi.n	800a930 <_fflush_r+0xc>
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	059b      	lsls	r3, r3, #22
 800a972:	d4dd      	bmi.n	800a930 <_fflush_r+0xc>
 800a974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a976:	f000 f908 	bl	800ab8a <__retarget_lock_release_recursive>
 800a97a:	e7d9      	b.n	800a930 <_fflush_r+0xc>
 800a97c:	4b05      	ldr	r3, [pc, #20]	; (800a994 <_fflush_r+0x70>)
 800a97e:	429c      	cmp	r4, r3
 800a980:	d101      	bne.n	800a986 <_fflush_r+0x62>
 800a982:	68ac      	ldr	r4, [r5, #8]
 800a984:	e7df      	b.n	800a946 <_fflush_r+0x22>
 800a986:	4b04      	ldr	r3, [pc, #16]	; (800a998 <_fflush_r+0x74>)
 800a988:	429c      	cmp	r4, r3
 800a98a:	bf08      	it	eq
 800a98c:	68ec      	ldreq	r4, [r5, #12]
 800a98e:	e7da      	b.n	800a946 <_fflush_r+0x22>
 800a990:	0800baac 	.word	0x0800baac
 800a994:	0800bacc 	.word	0x0800bacc
 800a998:	0800ba8c 	.word	0x0800ba8c

0800a99c <std>:
 800a99c:	2300      	movs	r3, #0
 800a99e:	b510      	push	{r4, lr}
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a9a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9aa:	6083      	str	r3, [r0, #8]
 800a9ac:	8181      	strh	r1, [r0, #12]
 800a9ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a9b0:	81c2      	strh	r2, [r0, #14]
 800a9b2:	6183      	str	r3, [r0, #24]
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	2208      	movs	r2, #8
 800a9b8:	305c      	adds	r0, #92	; 0x5c
 800a9ba:	f7fb ffc3 	bl	8006944 <memset>
 800a9be:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <std+0x38>)
 800a9c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a9c2:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <std+0x3c>)
 800a9c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9c6:	4b05      	ldr	r3, [pc, #20]	; (800a9dc <std+0x40>)
 800a9c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9ca:	4b05      	ldr	r3, [pc, #20]	; (800a9e0 <std+0x44>)
 800a9cc:	6224      	str	r4, [r4, #32]
 800a9ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0800acf1 	.word	0x0800acf1
 800a9d8:	0800ad13 	.word	0x0800ad13
 800a9dc:	0800ad4b 	.word	0x0800ad4b
 800a9e0:	0800ad6f 	.word	0x0800ad6f

0800a9e4 <_cleanup_r>:
 800a9e4:	4901      	ldr	r1, [pc, #4]	; (800a9ec <_cleanup_r+0x8>)
 800a9e6:	f000 b8af 	b.w	800ab48 <_fwalk_reent>
 800a9ea:	bf00      	nop
 800a9ec:	0800a925 	.word	0x0800a925

0800a9f0 <__sfmoreglue>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	2268      	movs	r2, #104	; 0x68
 800a9f4:	1e4d      	subs	r5, r1, #1
 800a9f6:	4355      	muls	r5, r2
 800a9f8:	460e      	mov	r6, r1
 800a9fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9fe:	f7ff fa5b 	bl	8009eb8 <_malloc_r>
 800aa02:	4604      	mov	r4, r0
 800aa04:	b140      	cbz	r0, 800aa18 <__sfmoreglue+0x28>
 800aa06:	2100      	movs	r1, #0
 800aa08:	e9c0 1600 	strd	r1, r6, [r0]
 800aa0c:	300c      	adds	r0, #12
 800aa0e:	60a0      	str	r0, [r4, #8]
 800aa10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa14:	f7fb ff96 	bl	8006944 <memset>
 800aa18:	4620      	mov	r0, r4
 800aa1a:	bd70      	pop	{r4, r5, r6, pc}

0800aa1c <__sfp_lock_acquire>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	; (800aa24 <__sfp_lock_acquire+0x8>)
 800aa1e:	f000 b8b3 	b.w	800ab88 <__retarget_lock_acquire_recursive>
 800aa22:	bf00      	nop
 800aa24:	20000e1d 	.word	0x20000e1d

0800aa28 <__sfp_lock_release>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__sfp_lock_release+0x8>)
 800aa2a:	f000 b8ae 	b.w	800ab8a <__retarget_lock_release_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20000e1d 	.word	0x20000e1d

0800aa34 <__sinit_lock_acquire>:
 800aa34:	4801      	ldr	r0, [pc, #4]	; (800aa3c <__sinit_lock_acquire+0x8>)
 800aa36:	f000 b8a7 	b.w	800ab88 <__retarget_lock_acquire_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	20000e1e 	.word	0x20000e1e

0800aa40 <__sinit_lock_release>:
 800aa40:	4801      	ldr	r0, [pc, #4]	; (800aa48 <__sinit_lock_release+0x8>)
 800aa42:	f000 b8a2 	b.w	800ab8a <__retarget_lock_release_recursive>
 800aa46:	bf00      	nop
 800aa48:	20000e1e 	.word	0x20000e1e

0800aa4c <__sinit>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	4604      	mov	r4, r0
 800aa50:	f7ff fff0 	bl	800aa34 <__sinit_lock_acquire>
 800aa54:	69a3      	ldr	r3, [r4, #24]
 800aa56:	b11b      	cbz	r3, 800aa60 <__sinit+0x14>
 800aa58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa5c:	f7ff bff0 	b.w	800aa40 <__sinit_lock_release>
 800aa60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa64:	6523      	str	r3, [r4, #80]	; 0x50
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <__sinit+0x68>)
 800aa68:	4a13      	ldr	r2, [pc, #76]	; (800aab8 <__sinit+0x6c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa6e:	42a3      	cmp	r3, r4
 800aa70:	bf04      	itt	eq
 800aa72:	2301      	moveq	r3, #1
 800aa74:	61a3      	streq	r3, [r4, #24]
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 f820 	bl	800aabc <__sfp>
 800aa7c:	6060      	str	r0, [r4, #4]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 f81c 	bl	800aabc <__sfp>
 800aa84:	60a0      	str	r0, [r4, #8]
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 f818 	bl	800aabc <__sfp>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	60e0      	str	r0, [r4, #12]
 800aa90:	2104      	movs	r1, #4
 800aa92:	6860      	ldr	r0, [r4, #4]
 800aa94:	f7ff ff82 	bl	800a99c <std>
 800aa98:	68a0      	ldr	r0, [r4, #8]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	2109      	movs	r1, #9
 800aa9e:	f7ff ff7d 	bl	800a99c <std>
 800aaa2:	68e0      	ldr	r0, [r4, #12]
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	2112      	movs	r1, #18
 800aaa8:	f7ff ff78 	bl	800a99c <std>
 800aaac:	2301      	movs	r3, #1
 800aaae:	61a3      	str	r3, [r4, #24]
 800aab0:	e7d2      	b.n	800aa58 <__sinit+0xc>
 800aab2:	bf00      	nop
 800aab4:	0800b650 	.word	0x0800b650
 800aab8:	0800a9e5 	.word	0x0800a9e5

0800aabc <__sfp>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	4607      	mov	r7, r0
 800aac0:	f7ff ffac 	bl	800aa1c <__sfp_lock_acquire>
 800aac4:	4b1e      	ldr	r3, [pc, #120]	; (800ab40 <__sfp+0x84>)
 800aac6:	681e      	ldr	r6, [r3, #0]
 800aac8:	69b3      	ldr	r3, [r6, #24]
 800aaca:	b913      	cbnz	r3, 800aad2 <__sfp+0x16>
 800aacc:	4630      	mov	r0, r6
 800aace:	f7ff ffbd 	bl	800aa4c <__sinit>
 800aad2:	3648      	adds	r6, #72	; 0x48
 800aad4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aad8:	3b01      	subs	r3, #1
 800aada:	d503      	bpl.n	800aae4 <__sfp+0x28>
 800aadc:	6833      	ldr	r3, [r6, #0]
 800aade:	b30b      	cbz	r3, 800ab24 <__sfp+0x68>
 800aae0:	6836      	ldr	r6, [r6, #0]
 800aae2:	e7f7      	b.n	800aad4 <__sfp+0x18>
 800aae4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aae8:	b9d5      	cbnz	r5, 800ab20 <__sfp+0x64>
 800aaea:	4b16      	ldr	r3, [pc, #88]	; (800ab44 <__sfp+0x88>)
 800aaec:	60e3      	str	r3, [r4, #12]
 800aaee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aaf2:	6665      	str	r5, [r4, #100]	; 0x64
 800aaf4:	f000 f847 	bl	800ab86 <__retarget_lock_init_recursive>
 800aaf8:	f7ff ff96 	bl	800aa28 <__sfp_lock_release>
 800aafc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab04:	6025      	str	r5, [r4, #0]
 800ab06:	61a5      	str	r5, [r4, #24]
 800ab08:	2208      	movs	r2, #8
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab10:	f7fb ff18 	bl	8006944 <memset>
 800ab14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab20:	3468      	adds	r4, #104	; 0x68
 800ab22:	e7d9      	b.n	800aad8 <__sfp+0x1c>
 800ab24:	2104      	movs	r1, #4
 800ab26:	4638      	mov	r0, r7
 800ab28:	f7ff ff62 	bl	800a9f0 <__sfmoreglue>
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	6030      	str	r0, [r6, #0]
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d1d5      	bne.n	800aae0 <__sfp+0x24>
 800ab34:	f7ff ff78 	bl	800aa28 <__sfp_lock_release>
 800ab38:	230c      	movs	r3, #12
 800ab3a:	603b      	str	r3, [r7, #0]
 800ab3c:	e7ee      	b.n	800ab1c <__sfp+0x60>
 800ab3e:	bf00      	nop
 800ab40:	0800b650 	.word	0x0800b650
 800ab44:	ffff0001 	.word	0xffff0001

0800ab48 <_fwalk_reent>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	4688      	mov	r8, r1
 800ab50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab54:	2700      	movs	r7, #0
 800ab56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab5a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab5e:	d505      	bpl.n	800ab6c <_fwalk_reent+0x24>
 800ab60:	6824      	ldr	r4, [r4, #0]
 800ab62:	2c00      	cmp	r4, #0
 800ab64:	d1f7      	bne.n	800ab56 <_fwalk_reent+0xe>
 800ab66:	4638      	mov	r0, r7
 800ab68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6c:	89ab      	ldrh	r3, [r5, #12]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d907      	bls.n	800ab82 <_fwalk_reent+0x3a>
 800ab72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab76:	3301      	adds	r3, #1
 800ab78:	d003      	beq.n	800ab82 <_fwalk_reent+0x3a>
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	47c0      	blx	r8
 800ab80:	4307      	orrs	r7, r0
 800ab82:	3568      	adds	r5, #104	; 0x68
 800ab84:	e7e9      	b.n	800ab5a <_fwalk_reent+0x12>

0800ab86 <__retarget_lock_init_recursive>:
 800ab86:	4770      	bx	lr

0800ab88 <__retarget_lock_acquire_recursive>:
 800ab88:	4770      	bx	lr

0800ab8a <__retarget_lock_release_recursive>:
 800ab8a:	4770      	bx	lr

0800ab8c <__swhatbuf_r>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	460e      	mov	r6, r1
 800ab90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab94:	2900      	cmp	r1, #0
 800ab96:	b096      	sub	sp, #88	; 0x58
 800ab98:	4614      	mov	r4, r2
 800ab9a:	461d      	mov	r5, r3
 800ab9c:	da08      	bge.n	800abb0 <__swhatbuf_r+0x24>
 800ab9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	602a      	str	r2, [r5, #0]
 800aba6:	061a      	lsls	r2, r3, #24
 800aba8:	d410      	bmi.n	800abcc <__swhatbuf_r+0x40>
 800abaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abae:	e00e      	b.n	800abce <__swhatbuf_r+0x42>
 800abb0:	466a      	mov	r2, sp
 800abb2:	f000 f903 	bl	800adbc <_fstat_r>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	dbf1      	blt.n	800ab9e <__swhatbuf_r+0x12>
 800abba:	9a01      	ldr	r2, [sp, #4]
 800abbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abc4:	425a      	negs	r2, r3
 800abc6:	415a      	adcs	r2, r3
 800abc8:	602a      	str	r2, [r5, #0]
 800abca:	e7ee      	b.n	800abaa <__swhatbuf_r+0x1e>
 800abcc:	2340      	movs	r3, #64	; 0x40
 800abce:	2000      	movs	r0, #0
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	b016      	add	sp, #88	; 0x58
 800abd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abd8 <__smakebuf_r>:
 800abd8:	898b      	ldrh	r3, [r1, #12]
 800abda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abdc:	079d      	lsls	r5, r3, #30
 800abde:	4606      	mov	r6, r0
 800abe0:	460c      	mov	r4, r1
 800abe2:	d507      	bpl.n	800abf4 <__smakebuf_r+0x1c>
 800abe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	6123      	str	r3, [r4, #16]
 800abec:	2301      	movs	r3, #1
 800abee:	6163      	str	r3, [r4, #20]
 800abf0:	b002      	add	sp, #8
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	ab01      	add	r3, sp, #4
 800abf6:	466a      	mov	r2, sp
 800abf8:	f7ff ffc8 	bl	800ab8c <__swhatbuf_r>
 800abfc:	9900      	ldr	r1, [sp, #0]
 800abfe:	4605      	mov	r5, r0
 800ac00:	4630      	mov	r0, r6
 800ac02:	f7ff f959 	bl	8009eb8 <_malloc_r>
 800ac06:	b948      	cbnz	r0, 800ac1c <__smakebuf_r+0x44>
 800ac08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac0c:	059a      	lsls	r2, r3, #22
 800ac0e:	d4ef      	bmi.n	800abf0 <__smakebuf_r+0x18>
 800ac10:	f023 0303 	bic.w	r3, r3, #3
 800ac14:	f043 0302 	orr.w	r3, r3, #2
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	e7e3      	b.n	800abe4 <__smakebuf_r+0xc>
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <__smakebuf_r+0x7c>)
 800ac1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	6020      	str	r0, [r4, #0]
 800ac24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	9b00      	ldr	r3, [sp, #0]
 800ac2c:	6163      	str	r3, [r4, #20]
 800ac2e:	9b01      	ldr	r3, [sp, #4]
 800ac30:	6120      	str	r0, [r4, #16]
 800ac32:	b15b      	cbz	r3, 800ac4c <__smakebuf_r+0x74>
 800ac34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f000 f8d1 	bl	800ade0 <_isatty_r>
 800ac3e:	b128      	cbz	r0, 800ac4c <__smakebuf_r+0x74>
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	f023 0303 	bic.w	r3, r3, #3
 800ac46:	f043 0301 	orr.w	r3, r3, #1
 800ac4a:	81a3      	strh	r3, [r4, #12]
 800ac4c:	89a0      	ldrh	r0, [r4, #12]
 800ac4e:	4305      	orrs	r5, r0
 800ac50:	81a5      	strh	r5, [r4, #12]
 800ac52:	e7cd      	b.n	800abf0 <__smakebuf_r+0x18>
 800ac54:	0800a9e5 	.word	0x0800a9e5

0800ac58 <_malloc_usable_size_r>:
 800ac58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac5c:	1f18      	subs	r0, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	bfbc      	itt	lt
 800ac62:	580b      	ldrlt	r3, [r1, r0]
 800ac64:	18c0      	addlt	r0, r0, r3
 800ac66:	4770      	bx	lr

0800ac68 <_raise_r>:
 800ac68:	291f      	cmp	r1, #31
 800ac6a:	b538      	push	{r3, r4, r5, lr}
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	460d      	mov	r5, r1
 800ac70:	d904      	bls.n	800ac7c <_raise_r+0x14>
 800ac72:	2316      	movs	r3, #22
 800ac74:	6003      	str	r3, [r0, #0]
 800ac76:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac7e:	b112      	cbz	r2, 800ac86 <_raise_r+0x1e>
 800ac80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac84:	b94b      	cbnz	r3, 800ac9a <_raise_r+0x32>
 800ac86:	4620      	mov	r0, r4
 800ac88:	f000 f830 	bl	800acec <_getpid_r>
 800ac8c:	462a      	mov	r2, r5
 800ac8e:	4601      	mov	r1, r0
 800ac90:	4620      	mov	r0, r4
 800ac92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac96:	f000 b817 	b.w	800acc8 <_kill_r>
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d00a      	beq.n	800acb4 <_raise_r+0x4c>
 800ac9e:	1c59      	adds	r1, r3, #1
 800aca0:	d103      	bne.n	800acaa <_raise_r+0x42>
 800aca2:	2316      	movs	r3, #22
 800aca4:	6003      	str	r3, [r0, #0]
 800aca6:	2001      	movs	r0, #1
 800aca8:	e7e7      	b.n	800ac7a <_raise_r+0x12>
 800acaa:	2400      	movs	r4, #0
 800acac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acb0:	4628      	mov	r0, r5
 800acb2:	4798      	blx	r3
 800acb4:	2000      	movs	r0, #0
 800acb6:	e7e0      	b.n	800ac7a <_raise_r+0x12>

0800acb8 <raise>:
 800acb8:	4b02      	ldr	r3, [pc, #8]	; (800acc4 <raise+0xc>)
 800acba:	4601      	mov	r1, r0
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	f7ff bfd3 	b.w	800ac68 <_raise_r>
 800acc2:	bf00      	nop
 800acc4:	2000000c 	.word	0x2000000c

0800acc8 <_kill_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d07      	ldr	r5, [pc, #28]	; (800ace8 <_kill_r+0x20>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	4611      	mov	r1, r2
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	f7f8 faad 	bl	8003234 <_kill>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d102      	bne.n	800ace4 <_kill_r+0x1c>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	b103      	cbz	r3, 800ace4 <_kill_r+0x1c>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd38      	pop	{r3, r4, r5, pc}
 800ace6:	bf00      	nop
 800ace8:	20000e18 	.word	0x20000e18

0800acec <_getpid_r>:
 800acec:	f7f8 ba9a 	b.w	8003224 <_getpid>

0800acf0 <__sread>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	460c      	mov	r4, r1
 800acf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf8:	f000 f894 	bl	800ae24 <_read_r>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	bfab      	itete	ge
 800ad00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad02:	89a3      	ldrhlt	r3, [r4, #12]
 800ad04:	181b      	addge	r3, r3, r0
 800ad06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad0a:	bfac      	ite	ge
 800ad0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad0e:	81a3      	strhlt	r3, [r4, #12]
 800ad10:	bd10      	pop	{r4, pc}

0800ad12 <__swrite>:
 800ad12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad16:	461f      	mov	r7, r3
 800ad18:	898b      	ldrh	r3, [r1, #12]
 800ad1a:	05db      	lsls	r3, r3, #23
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	460c      	mov	r4, r1
 800ad20:	4616      	mov	r6, r2
 800ad22:	d505      	bpl.n	800ad30 <__swrite+0x1e>
 800ad24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad28:	2302      	movs	r3, #2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f000 f868 	bl	800ae00 <_lseek_r>
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	463b      	mov	r3, r7
 800ad40:	4628      	mov	r0, r5
 800ad42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad46:	f000 b817 	b.w	800ad78 <_write_r>

0800ad4a <__sseek>:
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad52:	f000 f855 	bl	800ae00 <_lseek_r>
 800ad56:	1c43      	adds	r3, r0, #1
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	bf15      	itete	ne
 800ad5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad66:	81a3      	strheq	r3, [r4, #12]
 800ad68:	bf18      	it	ne
 800ad6a:	81a3      	strhne	r3, [r4, #12]
 800ad6c:	bd10      	pop	{r4, pc}

0800ad6e <__sclose>:
 800ad6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad72:	f000 b813 	b.w	800ad9c <_close_r>
	...

0800ad78 <_write_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d07      	ldr	r5, [pc, #28]	; (800ad98 <_write_r+0x20>)
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	4608      	mov	r0, r1
 800ad80:	4611      	mov	r1, r2
 800ad82:	2200      	movs	r2, #0
 800ad84:	602a      	str	r2, [r5, #0]
 800ad86:	461a      	mov	r2, r3
 800ad88:	f7f8 fa8b 	bl	80032a2 <_write>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_write_r+0x1e>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_write_r+0x1e>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	20000e18 	.word	0x20000e18

0800ad9c <_close_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4d06      	ldr	r5, [pc, #24]	; (800adb8 <_close_r+0x1c>)
 800ada0:	2300      	movs	r3, #0
 800ada2:	4604      	mov	r4, r0
 800ada4:	4608      	mov	r0, r1
 800ada6:	602b      	str	r3, [r5, #0]
 800ada8:	f7f8 fa97 	bl	80032da <_close>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d102      	bne.n	800adb6 <_close_r+0x1a>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	b103      	cbz	r3, 800adb6 <_close_r+0x1a>
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	bd38      	pop	{r3, r4, r5, pc}
 800adb8:	20000e18 	.word	0x20000e18

0800adbc <_fstat_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4d07      	ldr	r5, [pc, #28]	; (800addc <_fstat_r+0x20>)
 800adc0:	2300      	movs	r3, #0
 800adc2:	4604      	mov	r4, r0
 800adc4:	4608      	mov	r0, r1
 800adc6:	4611      	mov	r1, r2
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	f7f8 fa92 	bl	80032f2 <_fstat>
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	d102      	bne.n	800add8 <_fstat_r+0x1c>
 800add2:	682b      	ldr	r3, [r5, #0]
 800add4:	b103      	cbz	r3, 800add8 <_fstat_r+0x1c>
 800add6:	6023      	str	r3, [r4, #0]
 800add8:	bd38      	pop	{r3, r4, r5, pc}
 800adda:	bf00      	nop
 800addc:	20000e18 	.word	0x20000e18

0800ade0 <_isatty_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4d06      	ldr	r5, [pc, #24]	; (800adfc <_isatty_r+0x1c>)
 800ade4:	2300      	movs	r3, #0
 800ade6:	4604      	mov	r4, r0
 800ade8:	4608      	mov	r0, r1
 800adea:	602b      	str	r3, [r5, #0]
 800adec:	f7f8 fa91 	bl	8003312 <_isatty>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	d102      	bne.n	800adfa <_isatty_r+0x1a>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	b103      	cbz	r3, 800adfa <_isatty_r+0x1a>
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	bd38      	pop	{r3, r4, r5, pc}
 800adfc:	20000e18 	.word	0x20000e18

0800ae00 <_lseek_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d07      	ldr	r5, [pc, #28]	; (800ae20 <_lseek_r+0x20>)
 800ae04:	4604      	mov	r4, r0
 800ae06:	4608      	mov	r0, r1
 800ae08:	4611      	mov	r1, r2
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	602a      	str	r2, [r5, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	f7f8 fa8a 	bl	8003328 <_lseek>
 800ae14:	1c43      	adds	r3, r0, #1
 800ae16:	d102      	bne.n	800ae1e <_lseek_r+0x1e>
 800ae18:	682b      	ldr	r3, [r5, #0]
 800ae1a:	b103      	cbz	r3, 800ae1e <_lseek_r+0x1e>
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	bd38      	pop	{r3, r4, r5, pc}
 800ae20:	20000e18 	.word	0x20000e18

0800ae24 <_read_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4d07      	ldr	r5, [pc, #28]	; (800ae44 <_read_r+0x20>)
 800ae28:	4604      	mov	r4, r0
 800ae2a:	4608      	mov	r0, r1
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	2200      	movs	r2, #0
 800ae30:	602a      	str	r2, [r5, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f7f8 fa18 	bl	8003268 <_read>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_read_r+0x1e>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_read_r+0x1e>
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	20000e18 	.word	0x20000e18

0800ae48 <_init>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr

0800ae54 <_fini>:
 800ae54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae56:	bf00      	nop
 800ae58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae5a:	bc08      	pop	{r3}
 800ae5c:	469e      	mov	lr, r3
 800ae5e:	4770      	bx	lr
