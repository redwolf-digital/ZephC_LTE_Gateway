
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  0800ac60  0800ac60  0001ac60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b85c  0800b85c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b85c  0800b85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b864  0800b864  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b864  0800b864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b868  0800b868  0001b868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b86c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd8  200001e0  0800ba4c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000db8  0800ba4c  00020db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd1d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d5  00000000  00000000  0002ff2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00032508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00033350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001834f  00000000  00000000  00034090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011977  00000000  00000000  0004c3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcb5  00000000  00000000  0005dd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eda0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  000eda5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac48 	.word	0x0800ac48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800ac48 	.word	0x0800ac48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b9aa 	b.w	8000f64 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f83c 	bl	8000c94 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2lz>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	f7ff ff5b 	bl	8000aec <__aeabi_dcmplt>
 8000c36:	b928      	cbnz	r0, 8000c44 <__aeabi_d2lz+0x1c>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c40:	f000 b80a 	b.w	8000c58 <__aeabi_d2ulz>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c4a:	f000 f805 	bl	8000c58 <__aeabi_d2ulz>
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2ulz>:
 8000c58:	b5d0      	push	{r4, r6, r7, lr}
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__aeabi_d2ulz+0x34>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4606      	mov	r6, r0
 8000c60:	460f      	mov	r7, r1
 8000c62:	f7ff fcd1 	bl	8000608 <__aeabi_dmul>
 8000c66:	f7ff ffa7 	bl	8000bb8 <__aeabi_d2uiz>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	f7ff fc52 	bl	8000514 <__aeabi_ui2d>
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <__aeabi_d2ulz+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f7ff fcc8 	bl	8000608 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4639      	mov	r1, r7
 8000c80:	f7ff fb0a 	bl	8000298 <__aeabi_dsub>
 8000c84:	f7ff ff98 	bl	8000bb8 <__aeabi_d2uiz>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c8c:	3df00000 	.word	0x3df00000
 8000c90:	41f00000 	.word	0x41f00000

08000c94 <__udivmoddi4>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	9d08      	ldr	r5, [sp, #32]
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	468e      	mov	lr, r1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d14d      	bne.n	8000d3e <__udivmoddi4+0xaa>
 8000ca2:	428a      	cmp	r2, r1
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	d969      	bls.n	8000d7c <__udivmoddi4+0xe8>
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	b152      	cbz	r2, 8000cc4 <__udivmoddi4+0x30>
 8000cae:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb2:	f1c2 0120 	rsb	r1, r2, #32
 8000cb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc2:	4094      	lsls	r4, r2
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	0c21      	lsrs	r1, r4, #16
 8000cca:	fbbe f6f8 	udiv	r6, lr, r8
 8000cce:	fa1f f78c 	uxth.w	r7, ip
 8000cd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000cd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cda:	fb06 f107 	mul.w	r1, r6, r7
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x64>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 811f 	bcs.w	8000f2c <__udivmoddi4+0x298>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 811c 	bls.w	8000f2c <__udivmoddi4+0x298>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 f707 	mul.w	r7, r0, r7
 8000d0c:	42a7      	cmp	r7, r4
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x92>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d18:	f080 810a 	bcs.w	8000f30 <__udivmoddi4+0x29c>
 8000d1c:	42a7      	cmp	r7, r4
 8000d1e:	f240 8107 	bls.w	8000f30 <__udivmoddi4+0x29c>
 8000d22:	4464      	add	r4, ip
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	1be4      	subs	r4, r4, r7
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa4>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xc2>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80ef 	beq.w	8000f26 <__udivmoddi4+0x292>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x160>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd4>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80f9 	bhi.w	8000f5a <__udivmoddi4+0x2c6>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	469e      	mov	lr, r3
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa4>
 8000d76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa4>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xec>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 8092 	bne.w	8000eae <__udivmoddi4+0x21a>
 8000d8a:	eba1 010c 	sub.w	r1, r1, ip
 8000d8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	2601      	movs	r6, #1
 8000d98:	0c20      	lsrs	r0, r4, #16
 8000d9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000da2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da6:	fb0e f003 	mul.w	r0, lr, r3
 8000daa:	4288      	cmp	r0, r1
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x12c>
 8000dae:	eb1c 0101 	adds.w	r1, ip, r1
 8000db2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x12a>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	f200 80cb 	bhi.w	8000f54 <__udivmoddi4+0x2c0>
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc8:	fb07 1110 	mls	r1, r7, r0, r1
 8000dcc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x156>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de0:	d202      	bcs.n	8000de8 <__udivmoddi4+0x154>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	f200 80bb 	bhi.w	8000f5e <__udivmoddi4+0x2ca>
 8000de8:	4608      	mov	r0, r1
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df2:	e79c      	b.n	8000d2e <__udivmoddi4+0x9a>
 8000df4:	f1c6 0720 	rsb	r7, r6, #32
 8000df8:	40b3      	lsls	r3, r6
 8000dfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e02:	fa20 f407 	lsr.w	r4, r0, r7
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	431c      	orrs	r4, r3
 8000e0c:	40f9      	lsrs	r1, r7
 8000e0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e12:	fa00 f306 	lsl.w	r3, r0, r6
 8000e16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1a:	0c20      	lsrs	r0, r4, #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fb09 1118 	mls	r1, r9, r8, r1
 8000e24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e28:	fb08 f00e 	mul.w	r0, r8, lr
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e32:	d90b      	bls.n	8000e4c <__udivmoddi4+0x1b8>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e3c:	f080 8088 	bcs.w	8000f50 <__udivmoddi4+0x2bc>
 8000e40:	4288      	cmp	r0, r1
 8000e42:	f240 8085 	bls.w	8000f50 <__udivmoddi4+0x2bc>
 8000e46:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	1a09      	subs	r1, r1, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e54:	fb09 1110 	mls	r1, r9, r0, r1
 8000e58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e60:	458e      	cmp	lr, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1e2>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e6c:	d26c      	bcs.n	8000f48 <__udivmoddi4+0x2b4>
 8000e6e:	458e      	cmp	lr, r1
 8000e70:	d96a      	bls.n	8000f48 <__udivmoddi4+0x2b4>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e7e:	eba1 010e 	sub.w	r1, r1, lr
 8000e82:	42a1      	cmp	r1, r4
 8000e84:	46c8      	mov	r8, r9
 8000e86:	46a6      	mov	lr, r4
 8000e88:	d356      	bcc.n	8000f38 <__udivmoddi4+0x2a4>
 8000e8a:	d053      	beq.n	8000f34 <__udivmoddi4+0x2a0>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x212>
 8000e8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e92:	eb61 010e 	sbc.w	r1, r1, lr
 8000e96:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e9e:	40f1      	lsrs	r1, r6
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	f1c2 0320 	rsb	r3, r2, #32
 8000eb2:	40d8      	lsrs	r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	4301      	orrs	r1, r0
 8000ec0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec4:	fa1f fe8c 	uxth.w	lr, ip
 8000ec8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ecc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed0:	0c0b      	lsrs	r3, r1, #16
 8000ed2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ed6:	fb00 f60e 	mul.w	r6, r0, lr
 8000eda:	429e      	cmp	r6, r3
 8000edc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x260>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eea:	d22f      	bcs.n	8000f4c <__udivmoddi4+0x2b8>
 8000eec:	429e      	cmp	r6, r3
 8000eee:	d92d      	bls.n	8000f4c <__udivmoddi4+0x2b8>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1b9b      	subs	r3, r3, r6
 8000ef6:	b289      	uxth	r1, r1
 8000ef8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000efc:	fb07 3316 	mls	r3, r7, r6, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb06 f30e 	mul.w	r3, r6, lr
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x28a>
 8000f0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f14:	d216      	bcs.n	8000f44 <__udivmoddi4+0x2b0>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d914      	bls.n	8000f44 <__udivmoddi4+0x2b0>
 8000f1a:	3e02      	subs	r6, #2
 8000f1c:	4461      	add	r1, ip
 8000f1e:	1ac9      	subs	r1, r1, r3
 8000f20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f24:	e738      	b.n	8000d98 <__udivmoddi4+0x104>
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e705      	b.n	8000d38 <__udivmoddi4+0xa4>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e3      	b.n	8000cf8 <__udivmoddi4+0x64>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6f8      	b.n	8000d26 <__udivmoddi4+0x92>
 8000f34:	454b      	cmp	r3, r9
 8000f36:	d2a9      	bcs.n	8000e8c <__udivmoddi4+0x1f8>
 8000f38:	ebb9 0802 	subs.w	r8, r9, r2
 8000f3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7a3      	b.n	8000e8c <__udivmoddi4+0x1f8>
 8000f44:	4646      	mov	r6, r8
 8000f46:	e7ea      	b.n	8000f1e <__udivmoddi4+0x28a>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	e794      	b.n	8000e76 <__udivmoddi4+0x1e2>
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	e7d1      	b.n	8000ef4 <__udivmoddi4+0x260>
 8000f50:	46d0      	mov	r8, sl
 8000f52:	e77b      	b.n	8000e4c <__udivmoddi4+0x1b8>
 8000f54:	3b02      	subs	r3, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	e732      	b.n	8000dc0 <__udivmoddi4+0x12c>
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	e709      	b.n	8000d72 <__udivmoddi4+0xde>
 8000f5e:	4464      	add	r4, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e742      	b.n	8000dea <__udivmoddi4+0x156>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <initEXIT>:
#include "stm32f4xx.h"
#include "stm32f4xx_it.h"

unsigned char intterruptEvent_Flag = 0;

void initEXIT(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// Enable GPIO Clock
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <initEXIT+0x7c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <initEXIT+0x7c>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER &= ~3U << 6;					// GPIO B3 set 00 - INPUT
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <initEXIT+0x80>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <initEXIT+0x80>)
 8000fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fbe:	6013      	str	r3, [r2, #0]
	GPIOB -> PUPDR &= ~3U << 6;					// No pull-up|pull-down
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <initEXIT+0x80>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <initEXIT+0x80>)
 8000fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fca:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI3_IRQn);					// Enable interrupt
 8000fcc:	2009      	movs	r0, #9
 8000fce:	f7ff ffcb 	bl	8000f68 <__NVIC_EnableIRQ>

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <initEXIT+0x7c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <initEXIT+0x7c>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG -> EXTICR[0] &= SYSCFG_EXTICR1_EXTI3;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <initEXIT+0x84>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <initEXIT+0x84>)
 8000fe4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000fe8:	6093      	str	r3, [r2, #8]
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <initEXIT+0x84>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <initEXIT+0x84>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6093      	str	r3, [r2, #8]

	EXTI -> RTSR &= ~EXTI_RTSR_TR3;				// Disable rising trigger
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <initEXIT+0x88>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <initEXIT+0x88>)
 8000ffc:	f023 0308 	bic.w	r3, r3, #8
 8001000:	6093      	str	r3, [r2, #8]
	EXTI -> RTSR |= EXTI_FTSR_TR3;				// Enable falling trigger
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <initEXIT+0x88>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <initEXIT+0x88>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6093      	str	r3, [r2, #8]

//	EXTI -> RTSR |= EXTI_RTSR_TR3;
//	EXTI -> RTSR &= ~EXTI_FTSR_TR3;

	EXTI -> IMR |= EXTI_IMR_IM3;				// Interrupt Mask 1 = not mask
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <initEXIT+0x88>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a06      	ldr	r2, [pc, #24]	; (800102c <initEXIT+0x88>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40020400 	.word	0x40020400
 8001028:	40013800 	.word	0x40013800
 800102c:	40013c00 	.word	0x40013c00

08001030 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void) {
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR3) != 0) {
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <EXTI3_IRQHandler+0x2c>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <EXTI3_IRQHandler+0x22>
		intterruptEvent_Flag = 1;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <EXTI3_IRQHandler+0x30>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= EXTI_PR_PR3;
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <EXTI3_IRQHandler+0x2c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <EXTI3_IRQHandler+0x2c>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6153      	str	r3, [r2, #20]
	}
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40013c00 	.word	0x40013c00
 8001060:	200001fc 	.word	0x200001fc

08001064 <callGNSS>:


// Get GPS data
// return 1 if process is done
// return 2 if NMEA CRC is fail
unsigned char callGNSS(char* lat_out, char* lon_out) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	UART6_Debug("[GPS] -> CALL\r\n");
 800106e:	4861      	ldr	r0, [pc, #388]	; (80011f4 <callGNSS+0x190>)
 8001070:	f001 fa20 	bl	80024b4 <UART6_Debug>

	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	2100      	movs	r1, #0
 8001078:	485f      	ldr	r0, [pc, #380]	; (80011f8 <callGNSS+0x194>)
 800107a:	f005 fb63 	bl	8006744 <memset>
	SendCMD_LTE((char *) "AT+QGPSCFG=\"outport\",\"uartdebug\"\r\n");
 800107e:	485f      	ldr	r0, [pc, #380]	; (80011fc <callGNSS+0x198>)
 8001080:	f001 fa44 	bl	800250c <SendCMD_LTE>
	UART6_Debug("[GPS] -> REQ.\r\n");
 8001084:	485e      	ldr	r0, [pc, #376]	; (8001200 <callGNSS+0x19c>)
 8001086:	f001 fa15 	bl	80024b4 <UART6_Debug>


	// TIME OUT
	sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 800108a:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <callGNSS+0x1a0>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <callGNSS+0x1a0>)
 8001090:	80da      	strh	r2, [r3, #6]
	while(findTarget(lteComm_MainBuff, "GPRMC") != 1){
 8001092:	e01b      	b.n	80010cc <callGNSS+0x68>
		if(sysCounter.main_ms_counter == 0) {
 8001094:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <callGNSS+0x1a0>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <callGNSS+0x3e>
			sysCounter.prev_msgTimeOut = 0;
 800109c:	4b59      	ldr	r3, [pc, #356]	; (8001204 <callGNSS+0x1a0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	80da      	strh	r2, [r3, #6]
		}

		if((sysCounter.main_ms_counter - sysCounter.prev_msgTimeOut) >= 10000) {
 80010a2:	4b58      	ldr	r3, [pc, #352]	; (8001204 <callGNSS+0x1a0>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b56      	ldr	r3, [pc, #344]	; (8001204 <callGNSS+0x1a0>)
 80010aa:	88db      	ldrh	r3, [r3, #6]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80010b2:	4293      	cmp	r3, r2
 80010b4:	dd0a      	ble.n	80010cc <callGNSS+0x68>
			UART6_Debug("[GPS] -> TIMEOUT\r\n");
 80010b6:	4854      	ldr	r0, [pc, #336]	; (8001208 <callGNSS+0x1a4>)
 80010b8:	f001 f9fc 	bl	80024b4 <UART6_Debug>
			returnValue = 2;
 80010bc:	4b53      	ldr	r3, [pc, #332]	; (800120c <callGNSS+0x1a8>)
 80010be:	2202      	movs	r2, #2
 80010c0:	701a      	strb	r2, [r3, #0]
			sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 80010c2:	4b50      	ldr	r3, [pc, #320]	; (8001204 <callGNSS+0x1a0>)
 80010c4:	881a      	ldrh	r2, [r3, #0]
 80010c6:	4b4f      	ldr	r3, [pc, #316]	; (8001204 <callGNSS+0x1a0>)
 80010c8:	80da      	strh	r2, [r3, #6]
			goto END;
 80010ca:	e089      	b.n	80011e0 <callGNSS+0x17c>
	while(findTarget(lteComm_MainBuff, "GPRMC") != 1){
 80010cc:	4950      	ldr	r1, [pc, #320]	; (8001210 <callGNSS+0x1ac>)
 80010ce:	484a      	ldr	r0, [pc, #296]	; (80011f8 <callGNSS+0x194>)
 80010d0:	f001 fa94 	bl	80025fc <findTarget>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d1dc      	bne.n	8001094 <callGNSS+0x30>
		}
	}

	memcpy(GNSS_temp, lteComm_MainBuff, sizeof(GNSS_temp));
 80010da:	4a4e      	ldr	r2, [pc, #312]	; (8001214 <callGNSS+0x1b0>)
 80010dc:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <callGNSS+0x194>)
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	461a      	mov	r2, r3
 80010e6:	f005 fb1f 	bl	8006728 <memcpy>
	UART6_Debug("[GPS] -> DUMP\r\n");
 80010ea:	484b      	ldr	r0, [pc, #300]	; (8001218 <callGNSS+0x1b4>)
 80010ec:	f001 f9e2 	bl	80024b4 <UART6_Debug>
	UART6_Debug(GNSS_temp);
 80010f0:	4848      	ldr	r0, [pc, #288]	; (8001214 <callGNSS+0x1b0>)
 80010f2:	f001 f9df 	bl	80024b4 <UART6_Debug>
	UART6_Debug("\r\n");
 80010f6:	4849      	ldr	r0, [pc, #292]	; (800121c <callGNSS+0x1b8>)
 80010f8:	f001 f9dc 	bl	80024b4 <UART6_Debug>
	HAL_Delay(2);
 80010fc:	2002      	movs	r0, #2
 80010fe:	f002 f905 	bl	800330c <HAL_Delay>

	processFlag = NMEACRCCal((unsigned char *) GNSS_temp);
 8001102:	4844      	ldr	r0, [pc, #272]	; (8001214 <callGNSS+0x1b0>)
 8001104:	f001 fd6a 	bl	8002bdc <NMEACRCCal>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b44      	ldr	r3, [pc, #272]	; (8001220 <callGNSS+0x1bc>)
 800110e:	701a      	strb	r2, [r3, #0]

	if(processFlag == 1) {
 8001110:	4b43      	ldr	r3, [pc, #268]	; (8001220 <callGNSS+0x1bc>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d154      	bne.n	80011c2 <callGNSS+0x15e>
		UART6_Debug("[GPS] -> PROCESS\r\n");
 8001118:	4842      	ldr	r0, [pc, #264]	; (8001224 <callGNSS+0x1c0>)
 800111a:	f001 f9cb 	bl	80024b4 <UART6_Debug>
		// Clear old pos.
		memset(lat_out, 0x00, strlen(lat_out));
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff f85e 	bl	80001e0 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	2100      	movs	r1, #0
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f005 fb0a 	bl	8006744 <memset>
		memset(lon_out, 0x00, strlen(lon_out));
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f7ff f855 	bl	80001e0 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	2100      	movs	r1, #0
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f005 fb01 	bl	8006744 <memset>
		memset(latDir, 0x00, strlen(latDir));
 8001142:	4839      	ldr	r0, [pc, #228]	; (8001228 <callGNSS+0x1c4>)
 8001144:	f7ff f84c 	bl	80001e0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	4836      	ldr	r0, [pc, #216]	; (8001228 <callGNSS+0x1c4>)
 8001150:	f005 faf8 	bl	8006744 <memset>
		memset(lonDir, 0x00, strlen(lonDir));
 8001154:	4835      	ldr	r0, [pc, #212]	; (800122c <callGNSS+0x1c8>)
 8001156:	f7ff f843 	bl	80001e0 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	4832      	ldr	r0, [pc, #200]	; (800122c <callGNSS+0x1c8>)
 8001162:	f005 faef 	bl	8006744 <memset>

		// Delimit
		Delimiter(GNSS_temp, ',', 3, 80, latTemp);
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <callGNSS+0x1cc>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2350      	movs	r3, #80	; 0x50
 800116c:	2203      	movs	r2, #3
 800116e:	212c      	movs	r1, #44	; 0x2c
 8001170:	4828      	ldr	r0, [pc, #160]	; (8001214 <callGNSS+0x1b0>)
 8001172:	f001 fc84 	bl	8002a7e <Delimiter>
		Delimiter(GNSS_temp, ',', 4, 80, (unsigned char *)latDir);
 8001176:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <callGNSS+0x1c4>)
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2350      	movs	r3, #80	; 0x50
 800117c:	2204      	movs	r2, #4
 800117e:	212c      	movs	r1, #44	; 0x2c
 8001180:	4824      	ldr	r0, [pc, #144]	; (8001214 <callGNSS+0x1b0>)
 8001182:	f001 fc7c 	bl	8002a7e <Delimiter>
		Delimiter(GNSS_temp, ',', 5, 80, lonTemp);
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <callGNSS+0x1d0>)
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2350      	movs	r3, #80	; 0x50
 800118c:	2205      	movs	r2, #5
 800118e:	212c      	movs	r1, #44	; 0x2c
 8001190:	4820      	ldr	r0, [pc, #128]	; (8001214 <callGNSS+0x1b0>)
 8001192:	f001 fc74 	bl	8002a7e <Delimiter>
		Delimiter(GNSS_temp, ',', 6, 80, (unsigned char *)lonDir);
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <callGNSS+0x1c8>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2350      	movs	r3, #80	; 0x50
 800119c:	2206      	movs	r2, #6
 800119e:	212c      	movs	r1, #44	; 0x2c
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <callGNSS+0x1b0>)
 80011a2:	f001 fc6c 	bl	8002a7e <Delimiter>

		// Put new pos.
		NMEAdecoder((char *)latTemp, &latDir[0], lat_out);
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	491f      	ldr	r1, [pc, #124]	; (8001228 <callGNSS+0x1c4>)
 80011aa:	4821      	ldr	r0, [pc, #132]	; (8001230 <callGNSS+0x1cc>)
 80011ac:	f000 f84a 	bl	8001244 <NMEAdecoder>
		NMEAdecoder((char *)lonTemp, &lonDir[0], lon_out);
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	491e      	ldr	r1, [pc, #120]	; (800122c <callGNSS+0x1c8>)
 80011b4:	481f      	ldr	r0, [pc, #124]	; (8001234 <callGNSS+0x1d0>)
 80011b6:	f000 f845 	bl	8001244 <NMEAdecoder>

		returnValue = 1;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <callGNSS+0x1a8>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e002      	b.n	80011c8 <callGNSS+0x164>
	}else {
		returnValue = 2;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <callGNSS+0x1a8>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	701a      	strb	r2, [r3, #0]
	}

	// Dumb way to turn off GMSS @_@
	SendCMD_LTE((char *) "AT+QGPSCFG=\"outport\",\"none\"\r\n");
 80011c8:	481b      	ldr	r0, [pc, #108]	; (8001238 <callGNSS+0x1d4>)
 80011ca:	f001 f99f 	bl	800250c <SendCMD_LTE>
	while(findTarget(lteComm_MainBuff, "OK") != 1);
 80011ce:	bf00      	nop
 80011d0:	491a      	ldr	r1, [pc, #104]	; (800123c <callGNSS+0x1d8>)
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <callGNSS+0x194>)
 80011d4:	f001 fa12 	bl	80025fc <findTarget>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d1f8      	bne.n	80011d0 <callGNSS+0x16c>



END:
 80011de:	bf00      	nop
	UART6_Debug("[GPS] -> DONE\r\n");
 80011e0:	4817      	ldr	r0, [pc, #92]	; (8001240 <callGNSS+0x1dc>)
 80011e2:	f001 f967 	bl	80024b4 <UART6_Debug>
	return returnValue;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <callGNSS+0x1a8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	0800ac60 	.word	0x0800ac60
 80011f8:	20000a38 	.word	0x20000a38
 80011fc:	0800ac70 	.word	0x0800ac70
 8001200:	0800ac94 	.word	0x0800ac94
 8001204:	20000d18 	.word	0x20000d18
 8001208:	0800aca4 	.word	0x0800aca4
 800120c:	200002a7 	.word	0x200002a7
 8001210:	0800acb8 	.word	0x0800acb8
 8001214:	20000200 	.word	0x20000200
 8001218:	0800acc0 	.word	0x0800acc0
 800121c:	0800acd0 	.word	0x0800acd0
 8001220:	200002a6 	.word	0x200002a6
 8001224:	0800acd4 	.word	0x0800acd4
 8001228:	200002a0 	.word	0x200002a0
 800122c:	200002a4 	.word	0x200002a4
 8001230:	20000280 	.word	0x20000280
 8001234:	20000290 	.word	0x20000290
 8001238:	0800ace8 	.word	0x0800ace8
 800123c:	0800ad08 	.word	0x0800ad08
 8001240:	0800ad0c 	.word	0x0800ad0c

08001244 <NMEAdecoder>:


void NMEAdecoder(char* NMEAin_C, char* dir, char* out) {
 8001244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001248:	b08c      	sub	sp, #48	; 0x30
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
	double conv_f = atof(NMEAin_C);
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f005 fa36 	bl	80066c4 <atof>
 8001258:	ed87 0b08 	vstr	d0, [r7, #32]

	int pos_D = (conv_f/100);
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <NMEAdecoder+0xb8>)
 8001262:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001266:	f7ff faf9 	bl	800085c <__aeabi_ddiv>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fc79 	bl	8000b68 <__aeabi_d2iz>
 8001276:	4603      	mov	r3, r0
 8001278:	61fb      	str	r3, [r7, #28]
	double pos_M = (conv_f - (pos_D*100));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	2264      	movs	r2, #100	; 0x64
 800127e:	fb02 f303 	mul.w	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f956 	bl	8000534 <__aeabi_i2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001290:	f7ff f802 	bl	8000298 <__aeabi_dsub>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double final_pos = pos_D + (pos_M/60);
 800129c:	69f8      	ldr	r0, [r7, #28]
 800129e:	f7ff f949 	bl	8000534 <__aeabi_i2d>
 80012a2:	4680      	mov	r8, r0
 80012a4:	4689      	mov	r9, r1
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <NMEAdecoder+0xbc>)
 80012ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012b0:	f7ff fad4 	bl	800085c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4640      	mov	r0, r8
 80012ba:	4649      	mov	r1, r9
 80012bc:	f7fe ffee 	bl	800029c <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if(*dir == 'S' || *dir == 'W') {
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b53      	cmp	r3, #83	; 0x53
 80012ce:	d003      	beq.n	80012d8 <NMEAdecoder+0x94>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b57      	cmp	r3, #87	; 0x57
 80012d6:	d105      	bne.n	80012e4 <NMEAdecoder+0xa0>
		final_pos = final_pos*-1;
 80012d8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012e0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	}

	sprintf(out, "%.6f", final_pos);
 80012e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012e8:	4906      	ldr	r1, [pc, #24]	; (8001304 <NMEAdecoder+0xc0>)
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f005 fe9c 	bl	8007028 <siprintf>

}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	; 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012fa:	bf00      	nop
 80012fc:	40590000 	.word	0x40590000
 8001300:	404e0000 	.word	0x404e0000
 8001304:	0800ad1c 	.word	0x0800ad1c

08001308 <clearText_Temp>:





void clearText_Temp(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	memset(TextTemp, 0x00, sizeof(TextTemp));
 800130c:	227d      	movs	r2, #125	; 0x7d
 800130e:	2100      	movs	r1, #0
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <clearText_Temp+0x14>)
 8001312:	f005 fa17 	bl	8006744 <memset>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002a8 	.word	0x200002a8

08001320 <clearLTE_Temp>:

void clearLTE_Temp(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8001324:	22ff      	movs	r2, #255	; 0xff
 8001326:	2100      	movs	r1, #0
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <clearLTE_Temp+0x14>)
 800132a:	f005 fa0b 	bl	8006744 <memset>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000a38 	.word	0x20000a38

08001338 <initLTE>:



void initLTE(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	//SerialDebug("[MCU] -> start initialize LTE module\r\n");

	for(unsigned char countSeq = 0; countSeq < 7; countSeq++) {
 800133e:	2300      	movs	r3, #0
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	e0b3      	b.n	80014ac <initLTE+0x174>

		switch(countSeq) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b06      	cmp	r3, #6
 8001348:	d833      	bhi.n	80013b2 <initLTE+0x7a>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <initLTE+0x18>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	0800136d 	.word	0x0800136d
 8001354:	08001377 	.word	0x08001377
 8001358:	08001381 	.word	0x08001381
 800135c:	0800138b 	.word	0x0800138b
 8001360:	08001395 	.word	0x08001395
 8001364:	0800139f 	.word	0x0800139f
 8001368:	080013a9 	.word	0x080013a9
			case 0 :	// Turn off echo
				sprintf(TextTemp, "ATE0\r\n");
 800136c:	4954      	ldr	r1, [pc, #336]	; (80014c0 <initLTE+0x188>)
 800136e:	4855      	ldr	r0, [pc, #340]	; (80014c4 <initLTE+0x18c>)
 8001370:	f005 fe5a 	bl	8007028 <siprintf>
				break;
 8001374:	e01d      	b.n	80013b2 <initLTE+0x7a>

			case 1 :
				sprintf(TextTemp, "AT&D1\r\n");
 8001376:	4954      	ldr	r1, [pc, #336]	; (80014c8 <initLTE+0x190>)
 8001378:	4852      	ldr	r0, [pc, #328]	; (80014c4 <initLTE+0x18c>)
 800137a:	f005 fe55 	bl	8007028 <siprintf>
				break;
 800137e:	e018      	b.n	80013b2 <initLTE+0x7a>

			case 2 :
				sprintf(TextTemp, "AT+QGPSEND\r\n");
 8001380:	4952      	ldr	r1, [pc, #328]	; (80014cc <initLTE+0x194>)
 8001382:	4850      	ldr	r0, [pc, #320]	; (80014c4 <initLTE+0x18c>)
 8001384:	f005 fe50 	bl	8007028 <siprintf>
				break;
 8001388:	e013      	b.n	80013b2 <initLTE+0x7a>

			case 3 :
				sprintf(TextTemp, "AT+QGPSCFG=\"outport\",\"none\"\r\n");
 800138a:	4951      	ldr	r1, [pc, #324]	; (80014d0 <initLTE+0x198>)
 800138c:	484d      	ldr	r0, [pc, #308]	; (80014c4 <initLTE+0x18c>)
 800138e:	f005 fe4b 	bl	8007028 <siprintf>
				break;
 8001392:	e00e      	b.n	80013b2 <initLTE+0x7a>

			case 4 :
				sprintf(TextTemp, "AT+QGPSCFG=\"nmeasrc\",1\r\n");
 8001394:	494f      	ldr	r1, [pc, #316]	; (80014d4 <initLTE+0x19c>)
 8001396:	484b      	ldr	r0, [pc, #300]	; (80014c4 <initLTE+0x18c>)
 8001398:	f005 fe46 	bl	8007028 <siprintf>
				break;
 800139c:	e009      	b.n	80013b2 <initLTE+0x7a>

			case 5 :
				sprintf(TextTemp, "AT+QGPSCFG=\"gpsnmeatype\",2\r\n");
 800139e:	494e      	ldr	r1, [pc, #312]	; (80014d8 <initLTE+0x1a0>)
 80013a0:	4848      	ldr	r0, [pc, #288]	; (80014c4 <initLTE+0x18c>)
 80013a2:	f005 fe41 	bl	8007028 <siprintf>
				break;
 80013a6:	e004      	b.n	80013b2 <initLTE+0x7a>

			case 6 :
				sprintf(TextTemp, "AT+QGPS=1\r\n");
 80013a8:	494c      	ldr	r1, [pc, #304]	; (80014dc <initLTE+0x1a4>)
 80013aa:	4846      	ldr	r0, [pc, #280]	; (80014c4 <initLTE+0x18c>)
 80013ac:	f005 fe3c 	bl	8007028 <siprintf>
				break;
 80013b0:	bf00      	nop

		}

		UART6_Debug((char *)TextTemp);
 80013b2:	4844      	ldr	r0, [pc, #272]	; (80014c4 <initLTE+0x18c>)
 80013b4:	f001 f87e 	bl	80024b4 <UART6_Debug>
		UART6_Debug("\r\n");
 80013b8:	4849      	ldr	r0, [pc, #292]	; (80014e0 <initLTE+0x1a8>)
 80013ba:	f001 f87b 	bl	80024b4 <UART6_Debug>

		SendCMD_LTE((char *)TextTemp);	// Sned CMD
 80013be:	4841      	ldr	r0, [pc, #260]	; (80014c4 <initLTE+0x18c>)
 80013c0:	f001 f8a4 	bl	800250c <SendCMD_LTE>

		sysFlag.LTE_CMD_Send = 1;
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <initLTE+0x1ac>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <initLTE+0x1b0>)
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <initLTE+0x1b0>)
 80013d0:	805a      	strh	r2, [r3, #2]

		while(sysFlag.LTE_CMD_Send == 1) {
 80013d2:	e064      	b.n	800149e <initLTE+0x166>

			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 80013d4:	4945      	ldr	r1, [pc, #276]	; (80014ec <initLTE+0x1b4>)
 80013d6:	4846      	ldr	r0, [pc, #280]	; (80014f0 <initLTE+0x1b8>)
 80013d8:	f001 f910 	bl	80025fc <findTarget>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d10e      	bne.n	8001400 <initLTE+0xc8>
				UART6_Debug("[LTE] -> OK\r\n");
 80013e2:	4844      	ldr	r0, [pc, #272]	; (80014f4 <initLTE+0x1bc>)
 80013e4:	f001 f866 	bl	80024b4 <UART6_Debug>

				sysFlag.LTE_CMD_Send = 0;
 80013e8:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <initLTE+0x1ac>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80013ee:	f7ff ff97 	bl	8001320 <clearLTE_Temp>
				clearText_Temp();
 80013f2:	f7ff ff89 	bl	8001308 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80013f6:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <initLTE+0x1b0>)
 80013f8:	881a      	ldrh	r2, [r3, #0]
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <initLTE+0x1b0>)
 80013fc:	805a      	strh	r2, [r3, #2]
 80013fe:	e04e      	b.n	800149e <initLTE+0x166>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8001400:	493d      	ldr	r1, [pc, #244]	; (80014f8 <initLTE+0x1c0>)
 8001402:	483b      	ldr	r0, [pc, #236]	; (80014f0 <initLTE+0x1b8>)
 8001404:	f001 f8fa 	bl	80025fc <findTarget>
 8001408:	4603      	mov	r3, r0
 800140a:	2b01      	cmp	r3, #1
 800140c:	d125      	bne.n	800145a <initLTE+0x122>
				UART6_Debug("[LTE] -> ERROR\n");
 800140e:	483b      	ldr	r0, [pc, #236]	; (80014fc <initLTE+0x1c4>)
 8001410:	f001 f850 	bl	80024b4 <UART6_Debug>
				UART6_Debug((char *)lteComm_MainBuff);
 8001414:	4836      	ldr	r0, [pc, #216]	; (80014f0 <initLTE+0x1b8>)
 8001416:	f001 f84d 	bl	80024b4 <UART6_Debug>
				UART6_Debug("\r\n");
 800141a:	4831      	ldr	r0, [pc, #196]	; (80014e0 <initLTE+0x1a8>)
 800141c:	f001 f84a 	bl	80024b4 <UART6_Debug>

				// Case 3 : Disable GNSS fail -> ignore error 505
				if(countSeq == 2 && findTarget(lteComm_MainBuff, "505") == 1) {
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d10a      	bne.n	800143c <initLTE+0x104>
 8001426:	4936      	ldr	r1, [pc, #216]	; (8001500 <initLTE+0x1c8>)
 8001428:	4831      	ldr	r0, [pc, #196]	; (80014f0 <initLTE+0x1b8>)
 800142a:	f001 f8e7 	bl	80025fc <findTarget>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d103      	bne.n	800143c <initLTE+0x104>
					sysFlag.LTE_INIT_ERROR = 0;
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <initLTE+0x1ac>)
 8001436:	2200      	movs	r2, #0
 8001438:	705a      	strb	r2, [r3, #1]
 800143a:	e002      	b.n	8001442 <initLTE+0x10a>
				}else {
					sysFlag.LTE_INIT_ERROR = 1;
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <initLTE+0x1ac>)
 800143e:	2201      	movs	r2, #1
 8001440:	705a      	strb	r2, [r3, #1]
				}

				sysFlag.LTE_CMD_Send = 0;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <initLTE+0x1ac>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8001448:	f7ff ff6a 	bl	8001320 <clearLTE_Temp>
				clearText_Temp();
 800144c:	f7ff ff5c 	bl	8001308 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <initLTE+0x1b0>)
 8001452:	881a      	ldrh	r2, [r3, #0]
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <initLTE+0x1b0>)
 8001456:	805a      	strh	r2, [r3, #2]
 8001458:	e021      	b.n	800149e <initLTE+0x166>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <initLTE+0x1b0>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <initLTE+0x1b0>)
 8001462:	885b      	ldrh	r3, [r3, #2]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <initLTE+0x1b0>)
 8001468:	8992      	ldrh	r2, [r2, #12]
 800146a:	4293      	cmp	r3, r2
 800146c:	db17      	blt.n	800149e <initLTE+0x166>
				if(sysCounter.main_ms_counter == 0) {
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <initLTE+0x1b0>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <initLTE+0x144>
					sysCounter.prev_LTEtimeout = 0;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <initLTE+0x1b0>)
 8001478:	2200      	movs	r2, #0
 800147a:	805a      	strh	r2, [r3, #2]
				}

				UART6_Debug("[MCU] -> LTE TIME OUT\r\n");
 800147c:	4821      	ldr	r0, [pc, #132]	; (8001504 <initLTE+0x1cc>)
 800147e:	f001 f819 	bl	80024b4 <UART6_Debug>

				sysFlag.LTE_INIT_ERROR = 1;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <initLTE+0x1ac>)
 8001484:	2201      	movs	r2, #1
 8001486:	705a      	strb	r2, [r3, #1]
				sysFlag.LTE_CMD_Send = 0;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <initLTE+0x1ac>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 800148e:	f7ff ff47 	bl	8001320 <clearLTE_Temp>
				clearText_Temp();
 8001492:	f7ff ff39 	bl	8001308 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <initLTE+0x1b0>)
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <initLTE+0x1b0>)
 800149c:	805a      	strh	r2, [r3, #2]
		while(sysFlag.LTE_CMD_Send == 1) {
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <initLTE+0x1ac>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d096      	beq.n	80013d4 <initLTE+0x9c>
	for(unsigned char countSeq = 0; countSeq < 7; countSeq++) {
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	3301      	adds	r3, #1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	f67f af48 	bls.w	8001344 <initLTE+0xc>
			}
		}
	}
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0800ad24 	.word	0x0800ad24
 80014c4:	200002a8 	.word	0x200002a8
 80014c8:	0800ad2c 	.word	0x0800ad2c
 80014cc:	0800ad34 	.word	0x0800ad34
 80014d0:	0800ad44 	.word	0x0800ad44
 80014d4:	0800ad64 	.word	0x0800ad64
 80014d8:	0800ad80 	.word	0x0800ad80
 80014dc:	0800ada0 	.word	0x0800ada0
 80014e0:	0800adac 	.word	0x0800adac
 80014e4:	20000d28 	.word	0x20000d28
 80014e8:	20000d18 	.word	0x20000d18
 80014ec:	0800adb0 	.word	0x0800adb0
 80014f0:	20000a38 	.word	0x20000a38
 80014f4:	0800adb4 	.word	0x0800adb4
 80014f8:	0800adc4 	.word	0x0800adc4
 80014fc:	0800adcc 	.word	0x0800adcc
 8001500:	0800addc 	.word	0x0800addc
 8001504:	0800ade0 	.word	0x0800ade0

08001508 <SHUTDOWN_LTE>:
/*
 * Return value
 * 			1 - done
 * 			2 - error/time out
 */
unsigned char SHUTDOWN_LTE(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	SendCMD_LTE("AT+QPOWD\r\n");
 800150c:	481a      	ldr	r0, [pc, #104]	; (8001578 <SHUTDOWN_LTE+0x70>)
 800150e:	f000 fffd 	bl	800250c <SendCMD_LTE>
	globalSnedFlag = 1;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <SHUTDOWN_LTE+0x74>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <SHUTDOWN_LTE+0x78>)
 800151a:	881a      	ldrh	r2, [r3, #0]
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <SHUTDOWN_LTE+0x78>)
 800151e:	805a      	strh	r2, [r3, #2]

	// reset counter
	if(sysCounter.main_ms_counter == 0) {
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <SHUTDOWN_LTE+0x78>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d11f      	bne.n	8001568 <SHUTDOWN_LTE+0x60>
		sysCounter.prev_LTEtimeout = 0;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <SHUTDOWN_LTE+0x78>)
 800152a:	2200      	movs	r2, #0
 800152c:	805a      	strh	r2, [r3, #2]
	}

	while(globalSnedFlag == 1) {
 800152e:	e01b      	b.n	8001568 <SHUTDOWN_LTE+0x60>
		while(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
			globalSnedFlag = 0;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <SHUTDOWN_LTE+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
			return 1;
 8001536:	2301      	movs	r3, #1
 8001538:	e01b      	b.n	8001572 <SHUTDOWN_LTE+0x6a>
		while(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
 800153a:	bf00      	nop
 800153c:	4911      	ldr	r1, [pc, #68]	; (8001584 <SHUTDOWN_LTE+0x7c>)
 800153e:	4812      	ldr	r0, [pc, #72]	; (8001588 <SHUTDOWN_LTE+0x80>)
 8001540:	f001 f85c 	bl	80025fc <findTarget>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d0f2      	beq.n	8001530 <SHUTDOWN_LTE+0x28>
		}
		// Time out
		if((sysCounter.main_ms_counter - sysCounter.prev_ERRORtime) >= 5000) {
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <SHUTDOWN_LTE+0x78>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <SHUTDOWN_LTE+0x78>)
 8001552:	889b      	ldrh	r3, [r3, #4]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3287 	movw	r2, #4999	; 0x1387
 800155a:	4293      	cmp	r3, r2
 800155c:	dd04      	ble.n	8001568 <SHUTDOWN_LTE+0x60>
			globalSnedFlag = 0;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <SHUTDOWN_LTE+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
			return 2;
 8001564:	2302      	movs	r3, #2
 8001566:	e004      	b.n	8001572 <SHUTDOWN_LTE+0x6a>
	while(globalSnedFlag == 1) {
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <SHUTDOWN_LTE+0x74>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d0e4      	beq.n	800153a <SHUTDOWN_LTE+0x32>
		}
	}
	return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	0800adf8 	.word	0x0800adf8
 800157c:	20000325 	.word	0x20000325
 8001580:	20000d18 	.word	0x20000d18
 8001584:	0800ae04 	.word	0x0800ae04
 8001588:	20000a38 	.word	0x20000a38

0800158c <clearText_net_Temp>:
unsigned char Error = 0;	// 0 = No error | > 1 Error

char HTTP_URL_Temp[350];	// URL length max 350 byte


void clearText_net_Temp(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	memset(TextNetTemp, 0x00, sizeof(TextNetTemp));
 8001590:	227d      	movs	r2, #125	; 0x7d
 8001592:	2100      	movs	r1, #0
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <clearText_net_Temp+0x14>)
 8001596:	f005 f8d5 	bl	8006744 <memset>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000374 	.word	0x20000374

080015a4 <addZero>:


// Fix single digit to 2 digit
void addZero(char* in, char* out) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	temp = atoi(in);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f005 f88b 	bl	80066ca <atoi>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <addZero+0x3c>)
 80015b8:	6013      	str	r3, [r2, #0]

    if(temp < 10){
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <addZero+0x3c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b09      	cmp	r3, #9
 80015c0:	dc07      	bgt.n	80015d2 <addZero+0x2e>
        sprintf(out, "0%d", temp);
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <addZero+0x3c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <addZero+0x40>)
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	f005 fd2c 	bl	8007028 <siprintf>
    }else{
        out = in;
    }
}
 80015d0:	e001      	b.n	80015d6 <addZero+0x32>
        out = in;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000328 	.word	0x20000328
 80015e4:	0800ae14 	.word	0x0800ae14

080015e8 <AckInternet>:


unsigned char AckInternet(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	Error = 0;
 80015ee:	4b62      	ldr	r3, [pc, #392]	; (8001778 <AckInternet+0x190>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]

	for(unsigned char countSeq = 0; countSeq < 4; countSeq++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	e0b4      	b.n	8001764 <AckInternet+0x17c>
		switch(countSeq) {
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d81f      	bhi.n	8001640 <AckInternet+0x58>
 8001600:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <AckInternet+0x20>)
 8001602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001606:	bf00      	nop
 8001608:	08001619 	.word	0x08001619
 800160c:	08001623 	.word	0x08001623
 8001610:	0800162d 	.word	0x0800162d
 8001614:	08001637 	.word	0x08001637
			case 0 :
				sprintf(TextNetTemp, "AT+QICSGP=1,1,\"INTERNET\",\"\",\"\",1\r\n");
 8001618:	4958      	ldr	r1, [pc, #352]	; (800177c <AckInternet+0x194>)
 800161a:	4859      	ldr	r0, [pc, #356]	; (8001780 <AckInternet+0x198>)
 800161c:	f005 fd04 	bl	8007028 <siprintf>
				break;
 8001620:	e00e      	b.n	8001640 <AckInternet+0x58>

			case 1 :
				sprintf(TextNetTemp, "AT+QIACT=1\r\n");
 8001622:	4958      	ldr	r1, [pc, #352]	; (8001784 <AckInternet+0x19c>)
 8001624:	4856      	ldr	r0, [pc, #344]	; (8001780 <AckInternet+0x198>)
 8001626:	f005 fcff 	bl	8007028 <siprintf>
				break;
 800162a:	e009      	b.n	8001640 <AckInternet+0x58>

			case 2 :
				sprintf(TextNetTemp, "AT+QIACT?\r\n");
 800162c:	4956      	ldr	r1, [pc, #344]	; (8001788 <AckInternet+0x1a0>)
 800162e:	4854      	ldr	r0, [pc, #336]	; (8001780 <AckInternet+0x198>)
 8001630:	f005 fcfa 	bl	8007028 <siprintf>
				break;
 8001634:	e004      	b.n	8001640 <AckInternet+0x58>

			case 3 :
				sprintf(TextNetTemp, "AT+QIDNSCFG=1,\"8.8.8.8\",\"1.1.1.1\"\r\n");
 8001636:	4955      	ldr	r1, [pc, #340]	; (800178c <AckInternet+0x1a4>)
 8001638:	4851      	ldr	r0, [pc, #324]	; (8001780 <AckInternet+0x198>)
 800163a:	f005 fcf5 	bl	8007028 <siprintf>
				break;
 800163e:	bf00      	nop
		}

		UART6_Debug((char *) TextNetTemp);
 8001640:	484f      	ldr	r0, [pc, #316]	; (8001780 <AckInternet+0x198>)
 8001642:	f000 ff37 	bl	80024b4 <UART6_Debug>
		UART6_Debug("\r\n");
 8001646:	4852      	ldr	r0, [pc, #328]	; (8001790 <AckInternet+0x1a8>)
 8001648:	f000 ff34 	bl	80024b4 <UART6_Debug>

		SendCMD_LTE((char *) TextNetTemp);
 800164c:	484c      	ldr	r0, [pc, #304]	; (8001780 <AckInternet+0x198>)
 800164e:	f000 ff5d 	bl	800250c <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 8001652:	4b50      	ldr	r3, [pc, #320]	; (8001794 <AckInternet+0x1ac>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001658:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <AckInternet+0x1b0>)
 800165a:	881a      	ldrh	r2, [r3, #0]
 800165c:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <AckInternet+0x1b0>)
 800165e:	805a      	strh	r2, [r3, #2]


		while(sysFlag.LTE_CMD_Send == 1) {
 8001660:	e079      	b.n	8001756 <AckInternet+0x16e>

			// Reset counter
			if(sysCounter.main_ms_counter == 0) {
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <AckInternet+0x1b0>)
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <AckInternet+0x88>
				sysCounter.prev_LTEtimeout = 0;
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <AckInternet+0x1b0>)
 800166c:	2200      	movs	r2, #0
 800166e:	805a      	strh	r2, [r3, #2]
			}

			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8001670:	494a      	ldr	r1, [pc, #296]	; (800179c <AckInternet+0x1b4>)
 8001672:	484b      	ldr	r0, [pc, #300]	; (80017a0 <AckInternet+0x1b8>)
 8001674:	f000 ffc2 	bl	80025fc <findTarget>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d124      	bne.n	80016c8 <AckInternet+0xe0>
				UART6_Debug("[LTE] -> OK\r\n");
 800167e:	4849      	ldr	r0, [pc, #292]	; (80017a4 <AckInternet+0x1bc>)
 8001680:	f000 ff18 	bl	80024b4 <UART6_Debug>

				if(countSeq == 2) {
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d112      	bne.n	80016b0 <AckInternet+0xc8>
					UART6_Debug("[LTE] -> DUMP : \n");
 800168a:	4847      	ldr	r0, [pc, #284]	; (80017a8 <AckInternet+0x1c0>)
 800168c:	f000 ff12 	bl	80024b4 <UART6_Debug>
					UART6_Debug((char *)lteComm_MainBuff);
 8001690:	4843      	ldr	r0, [pc, #268]	; (80017a0 <AckInternet+0x1b8>)
 8001692:	f000 ff0f 	bl	80024b4 <UART6_Debug>
					UART6_Debug("\r\n");
 8001696:	483e      	ldr	r0, [pc, #248]	; (8001790 <AckInternet+0x1a8>)
 8001698:	f000 ff0c 	bl	80024b4 <UART6_Debug>

					if(findTarget(lteComm_MainBuff, "+QIACT: 1") == 1) {
 800169c:	4943      	ldr	r1, [pc, #268]	; (80017ac <AckInternet+0x1c4>)
 800169e:	4840      	ldr	r0, [pc, #256]	; (80017a0 <AckInternet+0x1b8>)
 80016a0:	f000 ffac 	bl	80025fc <findTarget>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d102      	bne.n	80016b0 <AckInternet+0xc8>
						Error = 0;
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <AckInternet+0x190>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
					}
				}

				sysFlag.LTE_CMD_Send = 0;
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <AckInternet+0x1ac>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80016b6:	f7ff fe33 	bl	8001320 <clearLTE_Temp>
				clearText_net_Temp();
 80016ba:	f7ff ff67 	bl	800158c <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <AckInternet+0x1b0>)
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	4b35      	ldr	r3, [pc, #212]	; (8001798 <AckInternet+0x1b0>)
 80016c4:	805a      	strh	r2, [r3, #2]
 80016c6:	e046      	b.n	8001756 <AckInternet+0x16e>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80016c8:	4939      	ldr	r1, [pc, #228]	; (80017b0 <AckInternet+0x1c8>)
 80016ca:	4835      	ldr	r0, [pc, #212]	; (80017a0 <AckInternet+0x1b8>)
 80016cc:	f000 ff96 	bl	80025fc <findTarget>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d11a      	bne.n	800170c <AckInternet+0x124>
				UART6_Debug("[LTE] -> ERROR\n");
 80016d6:	4837      	ldr	r0, [pc, #220]	; (80017b4 <AckInternet+0x1cc>)
 80016d8:	f000 feec 	bl	80024b4 <UART6_Debug>
				UART6_Debug((char *)lteComm_MainBuff);
 80016dc:	4830      	ldr	r0, [pc, #192]	; (80017a0 <AckInternet+0x1b8>)
 80016de:	f000 fee9 	bl	80024b4 <UART6_Debug>
				UART6_Debug("\r\n");
 80016e2:	482b      	ldr	r0, [pc, #172]	; (8001790 <AckInternet+0x1a8>)
 80016e4:	f000 fee6 	bl	80024b4 <UART6_Debug>



				Error++;
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <AckInternet+0x190>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <AckInternet+0x190>)
 80016f2:	701a      	strb	r2, [r3, #0]

				sysFlag.LTE_CMD_Send = 0;
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <AckInternet+0x1ac>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80016fa:	f7ff fe11 	bl	8001320 <clearLTE_Temp>
				clearText_net_Temp();
 80016fe:	f7ff ff45 	bl	800158c <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <AckInternet+0x1b0>)
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <AckInternet+0x1b0>)
 8001708:	805a      	strh	r2, [r3, #2]
 800170a:	e024      	b.n	8001756 <AckInternet+0x16e>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <AckInternet+0x1b0>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <AckInternet+0x1b0>)
 8001714:	885b      	ldrh	r3, [r3, #2]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <AckInternet+0x1b0>)
 800171a:	8992      	ldrh	r2, [r2, #12]
 800171c:	4293      	cmp	r3, r2
 800171e:	db1a      	blt.n	8001756 <AckInternet+0x16e>
				if(sysCounter.main_ms_counter == 0) {
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <AckInternet+0x1b0>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <AckInternet+0x146>
					sysCounter.prev_LTEtimeout = 0;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <AckInternet+0x1b0>)
 800172a:	2200      	movs	r2, #0
 800172c:	805a      	strh	r2, [r3, #2]
				}

				UART6_Debug("[MCU] -> LTE TIME OUT\n");
 800172e:	4822      	ldr	r0, [pc, #136]	; (80017b8 <AckInternet+0x1d0>)
 8001730:	f000 fec0 	bl	80024b4 <UART6_Debug>

				Error++;
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <AckInternet+0x190>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <AckInternet+0x190>)
 800173e:	701a      	strb	r2, [r3, #0]
				sysFlag.LTE_CMD_Send = 0;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <AckInternet+0x1ac>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8001746:	f7ff fdeb 	bl	8001320 <clearLTE_Temp>
				clearText_net_Temp();
 800174a:	f7ff ff1f 	bl	800158c <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <AckInternet+0x1b0>)
 8001750:	881a      	ldrh	r2, [r3, #0]
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <AckInternet+0x1b0>)
 8001754:	805a      	strh	r2, [r3, #2]
		while(sysFlag.LTE_CMD_Send == 1) {
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <AckInternet+0x1ac>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d081      	beq.n	8001662 <AckInternet+0x7a>
	for(unsigned char countSeq = 0; countSeq < 4; countSeq++) {
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	3301      	adds	r3, #1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b03      	cmp	r3, #3
 8001768:	f67f af47 	bls.w	80015fa <AckInternet+0x12>
			}
		}
	}

	return Error;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <AckInternet+0x190>)
 800176e:	781b      	ldrb	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200003f1 	.word	0x200003f1
 800177c:	0800ae18 	.word	0x0800ae18
 8001780:	20000374 	.word	0x20000374
 8001784:	0800ae3c 	.word	0x0800ae3c
 8001788:	0800ae4c 	.word	0x0800ae4c
 800178c:	0800ae58 	.word	0x0800ae58
 8001790:	0800ae7c 	.word	0x0800ae7c
 8001794:	20000d28 	.word	0x20000d28
 8001798:	20000d18 	.word	0x20000d18
 800179c:	0800ae80 	.word	0x0800ae80
 80017a0:	20000a38 	.word	0x20000a38
 80017a4:	0800ae84 	.word	0x0800ae84
 80017a8:	0800ae94 	.word	0x0800ae94
 80017ac:	0800aea8 	.word	0x0800aea8
 80017b0:	0800aeb4 	.word	0x0800aeb4
 80017b4:	0800aebc 	.word	0x0800aebc
 80017b8:	0800aecc 	.word	0x0800aecc

080017bc <httpSend>:


//send data to server
unsigned int httpSend(char* lat, char* lon, char* device_ID, char* time_s, char* date_s, char* x, char* y, char* z, char* humi, char* temp, char* eth, char* carbon, char* airflow, char* out) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b098      	sub	sp, #96	; 0x60
 80017c0:	af14      	add	r7, sp, #80	; 0x50
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
	memset(HTTP_URL_Temp, 0x00, sizeof(HTTP_URL_Temp));
 80017ca:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80017ce:	2100      	movs	r1, #0
 80017d0:	485c      	ldr	r0, [pc, #368]	; (8001944 <httpSend+0x188>)
 80017d2:	f004 ffb7 	bl	8006744 <memset>
	memset(time_temp, 0x00, sizeof(time_temp));
 80017d6:	220c      	movs	r2, #12
 80017d8:	2100      	movs	r1, #0
 80017da:	485b      	ldr	r0, [pc, #364]	; (8001948 <httpSend+0x18c>)
 80017dc:	f004 ffb2 	bl	8006744 <memset>
	memset(date_temp, 0x00, sizeof(date_temp));
 80017e0:	220c      	movs	r2, #12
 80017e2:	2100      	movs	r1, #0
 80017e4:	4859      	ldr	r0, [pc, #356]	; (800194c <httpSend+0x190>)
 80017e6:	f004 ffad 	bl	8006744 <memset>
	memset(hh, 0x00, sizeof(hh));
 80017ea:	2208      	movs	r2, #8
 80017ec:	2100      	movs	r1, #0
 80017ee:	4858      	ldr	r0, [pc, #352]	; (8001950 <httpSend+0x194>)
 80017f0:	f004 ffa8 	bl	8006744 <memset>
	memset(mm, 0x00, sizeof(mm));
 80017f4:	2208      	movs	r2, #8
 80017f6:	2100      	movs	r1, #0
 80017f8:	4856      	ldr	r0, [pc, #344]	; (8001954 <httpSend+0x198>)
 80017fa:	f004 ffa3 	bl	8006744 <memset>
	memset(ss, 0x00, sizeof(ss));
 80017fe:	2208      	movs	r2, #8
 8001800:	2100      	movs	r1, #0
 8001802:	4855      	ldr	r0, [pc, #340]	; (8001958 <httpSend+0x19c>)
 8001804:	f004 ff9e 	bl	8006744 <memset>
	memset(YY, 0x00, sizeof(YY));
 8001808:	2208      	movs	r2, #8
 800180a:	2100      	movs	r1, #0
 800180c:	4853      	ldr	r0, [pc, #332]	; (800195c <httpSend+0x1a0>)
 800180e:	f004 ff99 	bl	8006744 <memset>
	memset(MM, 0x00, sizeof(MM));
 8001812:	2208      	movs	r2, #8
 8001814:	2100      	movs	r1, #0
 8001816:	4852      	ldr	r0, [pc, #328]	; (8001960 <httpSend+0x1a4>)
 8001818:	f004 ff94 	bl	8006744 <memset>
	memset(DD, 0x00, sizeof(DD));
 800181c:	2208      	movs	r2, #8
 800181e:	2100      	movs	r1, #0
 8001820:	4850      	ldr	r0, [pc, #320]	; (8001964 <httpSend+0x1a8>)
 8001822:	f004 ff8f 	bl	8006744 <memset>

	// Delimiter hot fix WuW
	sprintf(time_temp, "T:%s", time_s);
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	494f      	ldr	r1, [pc, #316]	; (8001968 <httpSend+0x1ac>)
 800182a:	4847      	ldr	r0, [pc, #284]	; (8001948 <httpSend+0x18c>)
 800182c:	f005 fbfc 	bl	8007028 <siprintf>
	sprintf(date_temp, "D/%s", date_s);
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	494e      	ldr	r1, [pc, #312]	; (800196c <httpSend+0x1b0>)
 8001834:	4845      	ldr	r0, [pc, #276]	; (800194c <httpSend+0x190>)
 8001836:	f005 fbf7 	bl	8007028 <siprintf>


	// Delimit
	Delimiter(time_temp, ':', 1, 80, (unsigned char*) hh);
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <httpSend+0x194>)
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2350      	movs	r3, #80	; 0x50
 8001840:	2201      	movs	r2, #1
 8001842:	213a      	movs	r1, #58	; 0x3a
 8001844:	4840      	ldr	r0, [pc, #256]	; (8001948 <httpSend+0x18c>)
 8001846:	f001 f91a 	bl	8002a7e <Delimiter>
	Delimiter(time_temp, ':', 2, 80, (unsigned char*) mm);
 800184a:	4b42      	ldr	r3, [pc, #264]	; (8001954 <httpSend+0x198>)
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2350      	movs	r3, #80	; 0x50
 8001850:	2202      	movs	r2, #2
 8001852:	213a      	movs	r1, #58	; 0x3a
 8001854:	483c      	ldr	r0, [pc, #240]	; (8001948 <httpSend+0x18c>)
 8001856:	f001 f912 	bl	8002a7e <Delimiter>
	Delimiter(time_temp, ':', 3, 80, (unsigned char*) ss);
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <httpSend+0x19c>)
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2350      	movs	r3, #80	; 0x50
 8001860:	2203      	movs	r2, #3
 8001862:	213a      	movs	r1, #58	; 0x3a
 8001864:	4838      	ldr	r0, [pc, #224]	; (8001948 <httpSend+0x18c>)
 8001866:	f001 f90a 	bl	8002a7e <Delimiter>

	Delimiter(date_temp, '/', 1, 80, (unsigned char*) DD);
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <httpSend+0x1a8>)
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2350      	movs	r3, #80	; 0x50
 8001870:	2201      	movs	r2, #1
 8001872:	212f      	movs	r1, #47	; 0x2f
 8001874:	4835      	ldr	r0, [pc, #212]	; (800194c <httpSend+0x190>)
 8001876:	f001 f902 	bl	8002a7e <Delimiter>
	Delimiter(date_temp, '/', 2, 80, (unsigned char*) MM);
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <httpSend+0x1a4>)
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2350      	movs	r3, #80	; 0x50
 8001880:	2202      	movs	r2, #2
 8001882:	212f      	movs	r1, #47	; 0x2f
 8001884:	4831      	ldr	r0, [pc, #196]	; (800194c <httpSend+0x190>)
 8001886:	f001 f8fa 	bl	8002a7e <Delimiter>
	Delimiter(date_temp, '/', 3, 80, (unsigned char*) YY);
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <httpSend+0x1a0>)
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2350      	movs	r3, #80	; 0x50
 8001890:	2203      	movs	r2, #3
 8001892:	212f      	movs	r1, #47	; 0x2f
 8001894:	482d      	ldr	r0, [pc, #180]	; (800194c <httpSend+0x190>)
 8001896:	f001 f8f2 	bl	8002a7e <Delimiter>
	// Check date and time to 2 digit
	addZero(hh, hh);
 800189a:	492d      	ldr	r1, [pc, #180]	; (8001950 <httpSend+0x194>)
 800189c:	482c      	ldr	r0, [pc, #176]	; (8001950 <httpSend+0x194>)
 800189e:	f7ff fe81 	bl	80015a4 <addZero>
	addZero(mm, mm);
 80018a2:	492c      	ldr	r1, [pc, #176]	; (8001954 <httpSend+0x198>)
 80018a4:	482b      	ldr	r0, [pc, #172]	; (8001954 <httpSend+0x198>)
 80018a6:	f7ff fe7d 	bl	80015a4 <addZero>
	addZero(ss, ss);
 80018aa:	492b      	ldr	r1, [pc, #172]	; (8001958 <httpSend+0x19c>)
 80018ac:	482a      	ldr	r0, [pc, #168]	; (8001958 <httpSend+0x19c>)
 80018ae:	f7ff fe79 	bl	80015a4 <addZero>
	addZero(YY, YY);
 80018b2:	492a      	ldr	r1, [pc, #168]	; (800195c <httpSend+0x1a0>)
 80018b4:	4829      	ldr	r0, [pc, #164]	; (800195c <httpSend+0x1a0>)
 80018b6:	f7ff fe75 	bl	80015a4 <addZero>
	addZero(MM, MM);
 80018ba:	4929      	ldr	r1, [pc, #164]	; (8001960 <httpSend+0x1a4>)
 80018bc:	4828      	ldr	r0, [pc, #160]	; (8001960 <httpSend+0x1a4>)
 80018be:	f7ff fe71 	bl	80015a4 <addZero>
	addZero(DD, DD);
 80018c2:	4928      	ldr	r1, [pc, #160]	; (8001964 <httpSend+0x1a8>)
 80018c4:	4827      	ldr	r0, [pc, #156]	; (8001964 <httpSend+0x1a8>)
 80018c6:	f7ff fe6d 	bl	80015a4 <addZero>

	sprintf(HTTP_URL_Temp, "http://rtls.lailab.online/api/ingest_sensor_data?token=%s&device_id=%s&time=%s&date=%s&device_name=%s&x=%s&y=%s&z=%s&humidity=%s&temp=%s&etha=%s&co2=%s&airflow=%s&symbol=Q&date_now=20%s-%s-%sT%s:%s:%s.000Z&lat=%s&lon=%s", TOKEN, device_ID, time_s, date_s, device_ID, x, y, z, humi, temp, eth, carbon, airflow, YY, MM, DD, hh, mm, ss, lat, lon);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	9312      	str	r3, [sp, #72]	; 0x48
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	9311      	str	r3, [sp, #68]	; 0x44
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <httpSend+0x19c>)
 80018d4:	9310      	str	r3, [sp, #64]	; 0x40
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <httpSend+0x198>)
 80018d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <httpSend+0x194>)
 80018dc:	930e      	str	r3, [sp, #56]	; 0x38
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <httpSend+0x1a8>)
 80018e0:	930d      	str	r3, [sp, #52]	; 0x34
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <httpSend+0x1a4>)
 80018e4:	930c      	str	r3, [sp, #48]	; 0x30
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <httpSend+0x1a0>)
 80018e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80018ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ec:	930a      	str	r3, [sp, #40]	; 0x28
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f0:	9309      	str	r3, [sp, #36]	; 0x24
 80018f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f4:	9308      	str	r3, [sp, #32]
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	9307      	str	r3, [sp, #28]
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	9306      	str	r3, [sp, #24]
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	9305      	str	r3, [sp, #20]
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	9304      	str	r3, [sp, #16]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	9303      	str	r3, [sp, #12]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <httpSend+0x1b4>)
 800191a:	4916      	ldr	r1, [pc, #88]	; (8001974 <httpSend+0x1b8>)
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <httpSend+0x188>)
 800191e:	f005 fb83 	bl	8007028 <siprintf>

	memcpy(out, HTTP_URL_Temp, sizeof(HTTP_URL_Temp));
 8001922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <httpSend+0x188>)
 8001926:	4618      	mov	r0, r3
 8001928:	4611      	mov	r1, r2
 800192a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800192e:	461a      	mov	r2, r3
 8001930:	f004 fefa 	bl	8006728 <memcpy>

	return strlen(HTTP_URL_Temp);
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <httpSend+0x188>)
 8001936:	f7fe fc53 	bl	80001e0 <strlen>
 800193a:	4603      	mov	r3, r0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200003f4 	.word	0x200003f4
 8001948:	2000032c 	.word	0x2000032c
 800194c:	20000338 	.word	0x20000338
 8001950:	2000035c 	.word	0x2000035c
 8001954:	20000364 	.word	0x20000364
 8001958:	2000036c 	.word	0x2000036c
 800195c:	20000354 	.word	0x20000354
 8001960:	2000034c 	.word	0x2000034c
 8001964:	20000344 	.word	0x20000344
 8001968:	0800aee4 	.word	0x0800aee4
 800196c:	0800aeec 	.word	0x0800aeec
 8001970:	0800aef4 	.word	0x0800aef4
 8001974:	0800af1c 	.word	0x0800af1c

08001978 <Activate>:

// Deactivate HTTP/TCP-IP context
// Return 0 -> PASS
// Return 1 -> ERROR
// Return 2 -> TIME OUT
unsigned char Activate(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	sysFlag.LTE_CMD_Send = 0;
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <Activate+0xb8>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
	Error = 0;
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <Activate+0xbc>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]

	UART6_Debug("[INTERNET] -> ACTIVATE INTERNET\n");
 8001988:	482b      	ldr	r0, [pc, #172]	; (8001a38 <Activate+0xc0>)
 800198a:	f000 fd93 	bl	80024b4 <UART6_Debug>

	SendCMD_LTE("AT+QIACT=1\r\n");
 800198e:	482b      	ldr	r0, [pc, #172]	; (8001a3c <Activate+0xc4>)
 8001990:	f000 fdbc 	bl	800250c <SendCMD_LTE>
	sysFlag.LTE_CMD_Send = 1;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <Activate+0xb8>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]

	sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <Activate+0xc8>)
 800199c:	881a      	ldrh	r2, [r3, #0]
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <Activate+0xc8>)
 80019a0:	805a      	strh	r2, [r3, #2]

	while(sysFlag.LTE_CMD_Send == 1) {
 80019a2:	e03d      	b.n	8001a20 <Activate+0xa8>
		// PASS
		if(findTarget(lteComm_MainBuff, "OK") == 1) {
 80019a4:	4927      	ldr	r1, [pc, #156]	; (8001a44 <Activate+0xcc>)
 80019a6:	4828      	ldr	r0, [pc, #160]	; (8001a48 <Activate+0xd0>)
 80019a8:	f000 fe28 	bl	80025fc <findTarget>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <Activate+0x4c>
			UART6_Debug("[INTERNET] -> DONE\n");
 80019b2:	4826      	ldr	r0, [pc, #152]	; (8001a4c <Activate+0xd4>)
 80019b4:	f000 fd7e 	bl	80024b4 <UART6_Debug>
			Error = 0;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <Activate+0xbc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
			sysFlag.LTE_CMD_Send = 0;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <Activate+0xb8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
		}
		// ERROR
		if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80019c4:	4922      	ldr	r1, [pc, #136]	; (8001a50 <Activate+0xd8>)
 80019c6:	4820      	ldr	r0, [pc, #128]	; (8001a48 <Activate+0xd0>)
 80019c8:	f000 fe18 	bl	80025fc <findTarget>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <Activate+0x6c>
			UART6_Debug("[INTERNET] -> ERROR\n");
 80019d2:	4820      	ldr	r0, [pc, #128]	; (8001a54 <Activate+0xdc>)
 80019d4:	f000 fd6e 	bl	80024b4 <UART6_Debug>
			Error = 1;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <Activate+0xbc>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
			sysFlag.LTE_CMD_Send = 0;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <Activate+0xb8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
		}

		// Timeout Conditions
		if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= 20000) {
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <Activate+0xc8>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <Activate+0xc8>)
 80019ec:	885b      	ldrh	r3, [r3, #2]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019f4:	4293      	cmp	r3, r2
 80019f6:	dd13      	ble.n	8001a20 <Activate+0xa8>
			if(sysCounter.main_ms_counter == 0) {
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <Activate+0xc8>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <Activate+0x8e>
				sysCounter.prev_msgTimeOut = 0;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <Activate+0xc8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	80da      	strh	r2, [r3, #6]
			}

			Error = 2;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <Activate+0xbc>)
 8001a08:	2202      	movs	r2, #2
 8001a0a:	701a      	strb	r2, [r3, #0]
			UART6_Debug("[INTERNET] -> TIME OUT\n");
 8001a0c:	4812      	ldr	r0, [pc, #72]	; (8001a58 <Activate+0xe0>)
 8001a0e:	f000 fd51 	bl	80024b4 <UART6_Debug>
			sysFlag.LTE_CMD_Send = 0;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <Activate+0xb8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
			sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <Activate+0xc8>)
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <Activate+0xc8>)
 8001a1e:	805a      	strh	r2, [r3, #2]
	while(sysFlag.LTE_CMD_Send == 1) {
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <Activate+0xb8>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d0bd      	beq.n	80019a4 <Activate+0x2c>
		}

	}

	return Error;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <Activate+0xbc>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000d28 	.word	0x20000d28
 8001a34:	200003f1 	.word	0x200003f1
 8001a38:	0800aff8 	.word	0x0800aff8
 8001a3c:	0800ae3c 	.word	0x0800ae3c
 8001a40:	20000d18 	.word	0x20000d18
 8001a44:	0800ae80 	.word	0x0800ae80
 8001a48:	20000a38 	.word	0x20000a38
 8001a4c:	0800b01c 	.word	0x0800b01c
 8001a50:	0800aeb4 	.word	0x0800aeb4
 8001a54:	0800b030 	.word	0x0800b030
 8001a58:	0800b048 	.word	0x0800b048

08001a5c <Deactivate>:

// Deactivate HTTP/TCP-IP context
// Return 0 -> PASS
// Return 1 -> ERROR
// Return 2 -> TIME OUT
unsigned char Deactivate(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	sysFlag.LTE_CMD_Send = 0;
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <Deactivate+0xb8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
	Error = 0;
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <Deactivate+0xbc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]

	UART6_Debug("[INTERNET] -> DEACTIVATE INTERNET\n");
 8001a6c:	482b      	ldr	r0, [pc, #172]	; (8001b1c <Deactivate+0xc0>)
 8001a6e:	f000 fd21 	bl	80024b4 <UART6_Debug>

	SendCMD_LTE("AT+QIDEACT=1\r\n");
 8001a72:	482b      	ldr	r0, [pc, #172]	; (8001b20 <Deactivate+0xc4>)
 8001a74:	f000 fd4a 	bl	800250c <SendCMD_LTE>
	sysFlag.LTE_CMD_Send = 1;
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <Deactivate+0xb8>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]

	sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <Deactivate+0xc8>)
 8001a80:	881a      	ldrh	r2, [r3, #0]
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <Deactivate+0xc8>)
 8001a84:	805a      	strh	r2, [r3, #2]

	while(sysFlag.LTE_CMD_Send == 1) {
 8001a86:	e03d      	b.n	8001b04 <Deactivate+0xa8>
		// PASS
		if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8001a88:	4927      	ldr	r1, [pc, #156]	; (8001b28 <Deactivate+0xcc>)
 8001a8a:	4828      	ldr	r0, [pc, #160]	; (8001b2c <Deactivate+0xd0>)
 8001a8c:	f000 fdb6 	bl	80025fc <findTarget>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d108      	bne.n	8001aa8 <Deactivate+0x4c>
			UART6_Debug("[INTERNET] -> DONE\n");
 8001a96:	4826      	ldr	r0, [pc, #152]	; (8001b30 <Deactivate+0xd4>)
 8001a98:	f000 fd0c 	bl	80024b4 <UART6_Debug>
			Error = 0;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <Deactivate+0xbc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
			sysFlag.LTE_CMD_Send = 0;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <Deactivate+0xb8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
		}
		// ERROR
		if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8001aa8:	4922      	ldr	r1, [pc, #136]	; (8001b34 <Deactivate+0xd8>)
 8001aaa:	4820      	ldr	r0, [pc, #128]	; (8001b2c <Deactivate+0xd0>)
 8001aac:	f000 fda6 	bl	80025fc <findTarget>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <Deactivate+0x6c>
			UART6_Debug("[INTERNET] -> ERROR\n");
 8001ab6:	4820      	ldr	r0, [pc, #128]	; (8001b38 <Deactivate+0xdc>)
 8001ab8:	f000 fcfc 	bl	80024b4 <UART6_Debug>
			Error = 1;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <Deactivate+0xbc>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
			sysFlag.LTE_CMD_Send = 0;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <Deactivate+0xb8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
		}

		// Timeout Conditions
		if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= 30000) {
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <Deactivate+0xc8>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <Deactivate+0xc8>)
 8001ad0:	885b      	ldrh	r3, [r3, #2]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f247 522f 	movw	r2, #29999	; 0x752f
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	dd13      	ble.n	8001b04 <Deactivate+0xa8>
			if(sysCounter.main_ms_counter == 0) {
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <Deactivate+0xc8>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <Deactivate+0x8e>
				sysCounter.prev_msgTimeOut = 0;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <Deactivate+0xc8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	80da      	strh	r2, [r3, #6]
			}

			Error = 2;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <Deactivate+0xbc>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	701a      	strb	r2, [r3, #0]
			UART6_Debug("[INTERNET] -> TIME OUT\n");
 8001af0:	4812      	ldr	r0, [pc, #72]	; (8001b3c <Deactivate+0xe0>)
 8001af2:	f000 fcdf 	bl	80024b4 <UART6_Debug>
			sysFlag.LTE_CMD_Send = 0;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <Deactivate+0xb8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
			sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <Deactivate+0xc8>)
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <Deactivate+0xc8>)
 8001b02:	805a      	strh	r2, [r3, #2]
	while(sysFlag.LTE_CMD_Send == 1) {
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <Deactivate+0xb8>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d0bd      	beq.n	8001a88 <Deactivate+0x2c>
		}

	}

	return Error;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <Deactivate+0xbc>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000d28 	.word	0x20000d28
 8001b18:	200003f1 	.word	0x200003f1
 8001b1c:	0800b060 	.word	0x0800b060
 8001b20:	0800b084 	.word	0x0800b084
 8001b24:	20000d18 	.word	0x20000d18
 8001b28:	0800ae80 	.word	0x0800ae80
 8001b2c:	20000a38 	.word	0x20000a38
 8001b30:	0800b01c 	.word	0x0800b01c
 8001b34:	0800aeb4 	.word	0x0800aeb4
 8001b38:	0800b030 	.word	0x0800b030
 8001b3c:	0800b048 	.word	0x0800b048

08001b40 <main>:
static void MX_USART6_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af0a      	add	r7, sp, #40	; 0x28

  sysValinit();
 8001b46:	f000 fc3b 	bl	80023c0 <sysValinit>
  sensorValInit();
 8001b4a:	f000 fc61 	bl	8002410 <sensorValInit>

  HAL_Init();
 8001b4e:	f001 fb6b 	bl	8003228 <HAL_Init>
  SystemClock_Config();
 8001b52:	f000 fdbb 	bl	80026cc <SystemClock_Config>
  MX_GPIO_Init();
 8001b56:	f000 ff23 	bl	80029a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b5a:	f000 feeb 	bl	8002934 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b5e:	f000 fe6b 	bl	8002838 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b62:	f000 fe93 	bl	800288c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001b66:	f000 febb 	bl	80028e0 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001b6a:	f000 fe17 	bl	800279c <MX_TIM4_Init>


  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 8001b6e:	489e      	ldr	r0, [pc, #632]	; (8001de8 <main+0x2a8>)
 8001b70:	f002 ff7e 	bl	8004a70 <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8001b74:	22ff      	movs	r2, #255	; 0xff
 8001b76:	499d      	ldr	r1, [pc, #628]	; (8001dec <main+0x2ac>)
 8001b78:	489d      	ldr	r0, [pc, #628]	; (8001df0 <main+0x2b0>)
 8001b7a:	f003 fc4e 	bl	800541a <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	499c      	ldr	r1, [pc, #624]	; (8001df4 <main+0x2b4>)
 8001b82:	489d      	ldr	r0, [pc, #628]	; (8001df8 <main+0x2b8>)
 8001b84:	f003 fc49 	bl	800541a <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);


  // INTERRUPT
  initEXIT();
 8001b88:	f7ff fa0c 	bl	8000fa4 <initEXIT>
  resetWDT();
 8001b8c:	f000 fd8a 	bl	80026a4 <resetWDT>
 *
 *  ===============================================================================
 */

  // Wait LTE module boot
  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);			// BUSY -> 1
 8001b90:	2201      	movs	r2, #1
 8001b92:	2120      	movs	r1, #32
 8001b94:	4899      	ldr	r0, [pc, #612]	; (8001dfc <main+0x2bc>)
 8001b96:	f002 fa8f 	bl	80040b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_SET);		// ACTIVE indicator -> 1
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2140      	movs	r1, #64	; 0x40
 8001b9e:	4897      	ldr	r0, [pc, #604]	; (8001dfc <main+0x2bc>)
 8001ba0:	f002 fa8a 	bl	80040b8 <HAL_GPIO_WritePin>
  while(sysCounter.main_ms_counter < 500);				// Wait MCU boot
 8001ba4:	bf00      	nop
 8001ba6:	4b96      	ldr	r3, [pc, #600]	; (8001e00 <main+0x2c0>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bae:	d3fa      	bcc.n	8001ba6 <main+0x66>

  UART6_Debug("[MCU] -> WAIT MODEM BOOT 30 SEC.\r\n");
 8001bb0:	4894      	ldr	r0, [pc, #592]	; (8001e04 <main+0x2c4>)
 8001bb2:	f000 fc7f 	bl	80024b4 <UART6_Debug>

  resetWDT();
 8001bb6:	f000 fd75 	bl	80026a4 <resetWDT>
  // Initialize LTE module
  while(sysCounter.main_ms_counter < LTEbootTime) {		// Wait LTE module boot
 8001bba:	e004      	b.n	8001bc6 <main+0x86>
	  intterruptEvent_Flag = 0;
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <main+0x2c8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
	  resetWDT();
 8001bc2:	f000 fd6f 	bl	80026a4 <resetWDT>
  while(sysCounter.main_ms_counter < LTEbootTime) {		// Wait LTE module boot
 8001bc6:	4b8e      	ldr	r3, [pc, #568]	; (8001e00 <main+0x2c0>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f247 522f 	movw	r2, #29999	; 0x752f
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d9f4      	bls.n	8001bbc <main+0x7c>
  }

  // Start init LTE module
  UART6_Debug("[MCU] -> INIT MCU\r\n");
 8001bd2:	488e      	ldr	r0, [pc, #568]	; (8001e0c <main+0x2cc>)
 8001bd4:	f000 fc6e 	bl	80024b4 <UART6_Debug>
  initLTE();
 8001bd8:	f7ff fbae 	bl	8001338 <initLTE>
  resetWDT();
 8001bdc:	f000 fd62 	bl	80026a4 <resetWDT>
  UART6_Debug("[MCU] -> INIT INTERNET\r\n");
 8001be0:	488b      	ldr	r0, [pc, #556]	; (8001e10 <main+0x2d0>)
 8001be2:	f000 fc67 	bl	80024b4 <UART6_Debug>
//  AckInternet_ErrCode = AckInternet();
  AckInternet();
 8001be6:	f7ff fcff 	bl	80015e8 <AckInternet>
  AckInternet_flag = 1;
 8001bea:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <main+0x2d4>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
  resetWDT();
 8001bf0:	f000 fd58 	bl	80026a4 <resetWDT>

  // Respond after boot finish
  UART6_Debug("[MCU] -> SEND RDY\r\n");
 8001bf4:	4888      	ldr	r0, [pc, #544]	; (8001e18 <main+0x2d8>)
 8001bf6:	f000 fc5d 	bl	80024b4 <UART6_Debug>
  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	487f      	ldr	r0, [pc, #508]	; (8001dfc <main+0x2bc>)
 8001c00:	f002 fa5a 	bl	80040b8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f001 fb81 	bl	800330c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	487b      	ldr	r0, [pc, #492]	; (8001dfc <main+0x2bc>)
 8001c10:	f002 fa52 	bl	80040b8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);		// BUSY -> 0
 8001c14:	2200      	movs	r2, #0
 8001c16:	2120      	movs	r1, #32
 8001c18:	4878      	ldr	r0, [pc, #480]	; (8001dfc <main+0x2bc>)
 8001c1a:	f002 fa4d 	bl	80040b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_RESET);		// ACTIVE indicator -> 0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2140      	movs	r1, #64	; 0x40
 8001c22:	4876      	ldr	r0, [pc, #472]	; (8001dfc <main+0x2bc>)
 8001c24:	f002 fa48 	bl	80040b8 <HAL_GPIO_WritePin>
  resetWDT();
 8001c28:	f000 fd3c 	bl	80026a4 <resetWDT>
  UART6_Debug("[MCU] -> BOOT DONE\r\n");
 8001c2c:	487b      	ldr	r0, [pc, #492]	; (8001e1c <main+0x2dc>)
 8001c2e:	f000 fc41 	bl	80024b4 <UART6_Debug>



  while(1) {
	  // Clear WDT module routine
	  if(sysCounter.main_ms_counter == 0) {
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <main+0x2c0>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <main+0x10e>
		  sysCounter.prev_ClearWDT = 0;
 8001c3a:	4b71      	ldr	r3, [pc, #452]	; (8001e00 <main+0x2c0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	811a      	strh	r2, [r3, #8]
	  }
	  while((sysCounter.main_ms_counter - sysCounter.prev_ClearWDT) >= 1000) {
 8001c40:	e005      	b.n	8001c4e <main+0x10e>
		  resetWDT();
 8001c42:	f000 fd2f 	bl	80026a4 <resetWDT>
		  sysCounter.prev_ClearWDT = sysCounter.main_ms_counter;
 8001c46:	4b6e      	ldr	r3, [pc, #440]	; (8001e00 <main+0x2c0>)
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <main+0x2c0>)
 8001c4c:	811a      	strh	r2, [r3, #8]
	  while((sysCounter.main_ms_counter - sysCounter.prev_ClearWDT) >= 1000) {
 8001c4e:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <main+0x2c0>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <main+0x2c0>)
 8001c56:	891b      	ldrh	r3, [r3, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c5e:	daf0      	bge.n	8001c42 <main+0x102>
	  }


	  // ErrorHandle
	  //Init error please check system
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8001c60:	e037      	b.n	8001cd2 <main+0x192>
		  HAL_GPIO_TogglePin(GPIOB, ERROR);
 8001c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c66:	4865      	ldr	r0, [pc, #404]	; (8001dfc <main+0x2bc>)
 8001c68:	f002 fa3f 	bl	80040ea <HAL_GPIO_TogglePin>
		  TICK_COUNT++;
 8001c6c:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <main+0x2e0>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <main+0x2e0>)
 8001c76:	801a      	strh	r2, [r3, #0]
		  resetWDT();
 8001c78:	f000 fd14 	bl	80026a4 <resetWDT>
		  HAL_Delay(250);
 8001c7c:	20fa      	movs	r0, #250	; 0xfa
 8001c7e:	f001 fb45 	bl	800330c <HAL_Delay>

		  // Reboot
		  while(TICK_COUNT >= ERROR_TICK) {
 8001c82:	e021      	b.n	8001cc8 <main+0x188>
			  UART6_Debug("[MCU] -> SEND SHUTDOWN\r\n");
 8001c84:	4867      	ldr	r0, [pc, #412]	; (8001e24 <main+0x2e4>)
 8001c86:	f000 fc15 	bl	80024b4 <UART6_Debug>
			  SendCMD_LTE("AT+QPOWD=0\r\n");
 8001c8a:	4867      	ldr	r0, [pc, #412]	; (8001e28 <main+0x2e8>)
 8001c8c:	f000 fc3e 	bl	800250c <SendCMD_LTE>
			  sysFlag.LTE_CMD_Send = 1;
 8001c90:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <main+0x2ec>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]

			  while(sysFlag.LTE_CMD_Send == 1) {
 8001c96:	e013      	b.n	8001cc0 <main+0x180>

				  if(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
 8001c98:	4965      	ldr	r1, [pc, #404]	; (8001e30 <main+0x2f0>)
 8001c9a:	4866      	ldr	r0, [pc, #408]	; (8001e34 <main+0x2f4>)
 8001c9c:	f000 fcae 	bl	80025fc <findTarget>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <main+0x176>
					  UART6_Debug("[MCU] -> GET POWERED DOWN GOOD BYE\r\n");
 8001ca6:	4864      	ldr	r0, [pc, #400]	; (8001e38 <main+0x2f8>)
 8001ca8:	f000 fc04 	bl	80024b4 <UART6_Debug>
					  REBOOT_FLAG = 1;
 8001cac:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <main+0x2fc>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
				  }

				  while(REBOOT_FLAG == 1) {
 8001cb2:	e000      	b.n	8001cb6 <main+0x176>
					  for(;;);
 8001cb4:	e7fe      	b.n	8001cb4 <main+0x174>
				  while(REBOOT_FLAG == 1) {
 8001cb6:	bf00      	nop
 8001cb8:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <main+0x2fc>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d0f9      	beq.n	8001cb4 <main+0x174>
			  while(sysFlag.LTE_CMD_Send == 1) {
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <main+0x2ec>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d0e7      	beq.n	8001c98 <main+0x158>
		  while(TICK_COUNT >= ERROR_TICK) {
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <main+0x2e0>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001cd0:	d2d8      	bcs.n	8001c84 <main+0x144>
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8001cd2:	4b56      	ldr	r3, [pc, #344]	; (8001e2c <main+0x2ec>)
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d0c3      	beq.n	8001c62 <main+0x122>
			  }
		  }
	  }

	  // Reboot after active failed 5 time
	  while(ACK_FAIL_COUNT >= 5) {
 8001cda:	e027      	b.n	8001d2c <main+0x1ec>
		  HAL_GPIO_WritePin(GPIOB, ERROR, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ce2:	4846      	ldr	r0, [pc, #280]	; (8001dfc <main+0x2bc>)
 8001ce4:	f002 f9e8 	bl	80040b8 <HAL_GPIO_WritePin>
		  UART6_Debug("[MCU] -> SEND SHUTDOWN\r\n");
 8001ce8:	484e      	ldr	r0, [pc, #312]	; (8001e24 <main+0x2e4>)
 8001cea:	f000 fbe3 	bl	80024b4 <UART6_Debug>
		  SendCMD_LTE("AT+QPOWD=0\r\n");
 8001cee:	484e      	ldr	r0, [pc, #312]	; (8001e28 <main+0x2e8>)
 8001cf0:	f000 fc0c 	bl	800250c <SendCMD_LTE>
		  sysFlag.LTE_CMD_Send = 1;
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <main+0x2ec>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]

		  // Reboot
		  while(sysFlag.LTE_CMD_Send == 1) {
 8001cfa:	e013      	b.n	8001d24 <main+0x1e4>
			  if(findTarget(lteComm_MainBuff, "POWERED DOWN")) {
 8001cfc:	494c      	ldr	r1, [pc, #304]	; (8001e30 <main+0x2f0>)
 8001cfe:	484d      	ldr	r0, [pc, #308]	; (8001e34 <main+0x2f4>)
 8001d00:	f000 fc7c 	bl	80025fc <findTarget>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <main+0x1da>
				  UART6_Debug("[MCU] -> GET POWERED DOWN GOOD BYE\r\n");
 8001d0a:	484b      	ldr	r0, [pc, #300]	; (8001e38 <main+0x2f8>)
 8001d0c:	f000 fbd2 	bl	80024b4 <UART6_Debug>
				  REBOOT_FLAG = 1;
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <main+0x2fc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
			  }

			  while(REBOOT_FLAG == 1) {
 8001d16:	e000      	b.n	8001d1a <main+0x1da>
				  for(;;);
 8001d18:	e7fe      	b.n	8001d18 <main+0x1d8>
			  while(REBOOT_FLAG == 1) {
 8001d1a:	bf00      	nop
 8001d1c:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <main+0x2fc>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d0f9      	beq.n	8001d18 <main+0x1d8>
		  while(sysFlag.LTE_CMD_Send == 1) {
 8001d24:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <main+0x2ec>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d0e7      	beq.n	8001cfc <main+0x1bc>
	  while(ACK_FAIL_COUNT >= 5) {
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <main+0x300>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d8d3      	bhi.n	8001cdc <main+0x19c>
		  }
	  }


	  // Reboot after 5 min.
	  while(sysFlag.LTE_ERROR == 1) {
 8001d34:	e042      	b.n	8001dbc <main+0x27c>
		  resetWDT();
 8001d36:	f000 fcb5 	bl	80026a4 <resetWDT>
		  if(sysCounter.main_ms_counter == 0) {
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <main+0x2c0>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <main+0x208>
			  sysCounter.rebootCount = 0;
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <main+0x2c0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	729a      	strb	r2, [r3, #10]
		  }
		  if((sysCounter.main_ms_counter - sysCounter.rebootCount) >= 60000) {
 8001d48:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <main+0x2c0>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <main+0x2c0>)
 8001d50:	7a9b      	ldrb	r3, [r3, #10]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	dd21      	ble.n	8001da0 <main+0x260>
			  reboot_min_count++;
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <main+0x304>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <main+0x304>)
 8001d66:	701a      	strb	r2, [r3, #0]
			  sysCounter.rebootCount = sysCounter.main_ms_counter;
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <main+0x2c0>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <main+0x2c0>)
 8001d70:	729a      	strb	r2, [r3, #10]
		  }
		  while(reboot_min_count >= 5) {
 8001d72:	e015      	b.n	8001da0 <main+0x260>
			  if(SHUTDOWN_LTE() == 1) {
 8001d74:	f7ff fbc8 	bl	8001508 <SHUTDOWN_LTE>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <main+0x24a>
				  HAL_Delay(50);
 8001d7e:	2032      	movs	r0, #50	; 0x32
 8001d80:	f001 fac4 	bl	800330c <HAL_Delay>
				  HAL_NVIC_SystemReset();
 8001d84:	f001 fc01 	bl	800358a <HAL_NVIC_SystemReset>
 8001d88:	e00a      	b.n	8001da0 <main+0x260>
			  }else {
				  sysFlag.LTE_ERROR = 0;
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <main+0x2ec>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	709a      	strb	r2, [r3, #2]
				  sysFlag.LTE_INIT_ERROR = 1;
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <main+0x2ec>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	705a      	strb	r2, [r3, #1]
				  sysCounter.rebootCount = sysCounter.main_ms_counter;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <main+0x2c0>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <main+0x2c0>)
 8001d9e:	729a      	strb	r2, [r3, #10]
		  while(reboot_min_count >= 5) {
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <main+0x304>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d8e5      	bhi.n	8001d74 <main+0x234>
			  }
		  }

		  if(intterruptEvent_Flag == 1) {
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <main+0x2c8>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <main+0x27c>
			  SendData_RS485((char*) "X");
 8001db0:	4825      	ldr	r0, [pc, #148]	; (8001e48 <main+0x308>)
 8001db2:	f000 fb95 	bl	80024e0 <SendData_RS485>
			  intterruptEvent_Flag = 0;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <main+0x2c8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
	  while(sysFlag.LTE_ERROR == 1) {
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <main+0x2ec>)
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d0b8      	beq.n	8001d36 <main+0x1f6>
	  /*
	   * ------------------------------------------------------------------------------------
	   * 									MAIN TASK
	   * ------------------------------------------------------------------------------------
	   */
	  while(intterruptEvent_Flag == 1 && AckInternet_flag == 0) {
 8001dc4:	e05a      	b.n	8001e7c <main+0x33c>
		  UART6_Debug("[MCU] -> CHECK INTERNET\r\n");
 8001dc6:	4821      	ldr	r0, [pc, #132]	; (8001e4c <main+0x30c>)
 8001dc8:	f000 fb74 	bl	80024b4 <UART6_Debug>

		  if(Activate() == 0) {
 8001dcc:	f7ff fdd4 	bl	8001978 <Activate>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d13e      	bne.n	8001e54 <main+0x314>
			  UART6_Debug("[MCU] -> CONNECT PASS\r\n");
 8001dd6:	481e      	ldr	r0, [pc, #120]	; (8001e50 <main+0x310>)
 8001dd8:	f000 fb6c 	bl	80024b4 <UART6_Debug>
			  AckInternet_flag = 1;
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <main+0x2d4>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
			  resetWDT();
 8001de2:	f000 fc5f 	bl	80026a4 <resetWDT>
 8001de6:	e049      	b.n	8001e7c <main+0x33c>
 8001de8:	20000b44 	.word	0x20000b44
 8001dec:	200008b8 	.word	0x200008b8
 8001df0:	20000bd0 	.word	0x20000bd0
 8001df4:	20000838 	.word	0x20000838
 8001df8:	20000b8c 	.word	0x20000b8c
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	20000d18 	.word	0x20000d18
 8001e04:	0800b0cc 	.word	0x0800b0cc
 8001e08:	200001fc 	.word	0x200001fc
 8001e0c:	0800b0f0 	.word	0x0800b0f0
 8001e10:	0800b104 	.word	0x0800b104
 8001e14:	20000b41 	.word	0x20000b41
 8001e18:	0800b120 	.word	0x0800b120
 8001e1c:	0800b134 	.word	0x0800b134
 8001e20:	20000552 	.word	0x20000552
 8001e24:	0800b14c 	.word	0x0800b14c
 8001e28:	0800b168 	.word	0x0800b168
 8001e2c:	20000d28 	.word	0x20000d28
 8001e30:	0800b178 	.word	0x0800b178
 8001e34:	20000a38 	.word	0x20000a38
 8001e38:	0800b188 	.word	0x0800b188
 8001e3c:	20000555 	.word	0x20000555
 8001e40:	20000554 	.word	0x20000554
 8001e44:	20000b42 	.word	0x20000b42
 8001e48:	0800b1b0 	.word	0x0800b1b0
 8001e4c:	0800b1b4 	.word	0x0800b1b4
 8001e50:	0800b1d0 	.word	0x0800b1d0
		  }else {
			  UART6_Debug("[MCU] -> CONNECT FAIL\r\n");
 8001e54:	48ad      	ldr	r0, [pc, #692]	; (800210c <main+0x5cc>)
 8001e56:	f000 fb2d 	bl	80024b4 <UART6_Debug>
			  ACK_FAIL_COUNT++;
 8001e5a:	4bad      	ldr	r3, [pc, #692]	; (8002110 <main+0x5d0>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4bab      	ldr	r3, [pc, #684]	; (8002110 <main+0x5d0>)
 8001e64:	701a      	strb	r2, [r3, #0]
			  SendData_RS485((char*) "X");
 8001e66:	48ab      	ldr	r0, [pc, #684]	; (8002114 <main+0x5d4>)
 8001e68:	f000 fb3a 	bl	80024e0 <SendData_RS485>

			  intterruptEvent_Flag = 0;
 8001e6c:	4baa      	ldr	r3, [pc, #680]	; (8002118 <main+0x5d8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
			  AckInternet_flag = 0;
 8001e72:	4baa      	ldr	r3, [pc, #680]	; (800211c <main+0x5dc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			  resetWDT();
 8001e78:	f000 fc14 	bl	80026a4 <resetWDT>
	  while(intterruptEvent_Flag == 1 && AckInternet_flag == 0) {
 8001e7c:	4ba6      	ldr	r3, [pc, #664]	; (8002118 <main+0x5d8>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d103      	bne.n	8001e8c <main+0x34c>
 8001e84:	4ba5      	ldr	r3, [pc, #660]	; (800211c <main+0x5dc>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d09c      	beq.n	8001dc6 <main+0x286>
		  }
	  }

	  MAINTASK :
 8001e8c:	bf00      	nop
	  while(intterruptEvent_Flag == 1 && AckInternet_flag == 1) {
 8001e8e:	e255      	b.n	800233c <main+0x7fc>
			HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);				    	// BUSY !!!!
 8001e90:	2201      	movs	r2, #1
 8001e92:	2120      	movs	r1, #32
 8001e94:	48a2      	ldr	r0, [pc, #648]	; (8002120 <main+0x5e0>)
 8001e96:	f002 f90f 	bl	80040b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_SET);					// ACTIVE indicator -> 1
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	48a0      	ldr	r0, [pc, #640]	; (8002120 <main+0x5e0>)
 8001ea0:	f002 f90a 	bl	80040b8 <HAL_GPIO_WritePin>


			UART6_Debug("[MCU] -> GET RTS\r\n");
 8001ea4:	489f      	ldr	r0, [pc, #636]	; (8002124 <main+0x5e4>)
 8001ea6:	f000 fb05 	bl	80024b4 <UART6_Debug>
			resetWDT();
 8001eaa:	f000 fbfb 	bl	80026a4 <resetWDT>
//		    }
//		    resetWDT();

//		    while(AckInternet_flag == 1) {
				// Clear buffer
				sensorValInit();
 8001eae:	f000 faaf 	bl	8002410 <sensorValInit>
				memset(SENSOR.COMPID, 0x00, sizeof(SENSOR.COMPID));
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	489c      	ldr	r0, [pc, #624]	; (8002128 <main+0x5e8>)
 8001eb8:	f004 fc44 	bl	8006744 <memset>
 8001ebc:	4b9b      	ldr	r3, [pc, #620]	; (800212c <main+0x5ec>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
				memset(ENDBYTE, 0x00, sizeof(ENDBYTE));
				resetWDT();
 8001ec2:	f000 fbef 	bl	80026a4 <resetWDT>

				HAL_Delay(10);
 8001ec6:	200a      	movs	r0, #10
 8001ec8:	f001 fa20 	bl	800330c <HAL_Delay>
				// Call GPS
				if(callGNSS(GNSS.lat, GNSS.lon) == 1) {
 8001ecc:	4998      	ldr	r1, [pc, #608]	; (8002130 <main+0x5f0>)
 8001ece:	4899      	ldr	r0, [pc, #612]	; (8002134 <main+0x5f4>)
 8001ed0:	f7ff f8c8 	bl	8001064 <callGNSS>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d103      	bne.n	8001ee2 <main+0x3a2>
					UART6_Debug("[GPS] -> NMEA CRC PASS\r\n");
 8001eda:	4897      	ldr	r0, [pc, #604]	; (8002138 <main+0x5f8>)
 8001edc:	f000 faea 	bl	80024b4 <UART6_Debug>
 8001ee0:	e002      	b.n	8001ee8 <main+0x3a8>
				}else {
					UART6_Debug("[GPS] -> NMEA CRC INVALID/FAIL\r\n");
 8001ee2:	4896      	ldr	r0, [pc, #600]	; (800213c <main+0x5fc>)
 8001ee4:	f000 fae6 	bl	80024b4 <UART6_Debug>
				}


				resetWDT();
 8001ee8:	f000 fbdc 	bl	80026a4 <resetWDT>
				// Send RDY signal
				HAL_Delay(10);
 8001eec:	200a      	movs	r0, #10
 8001eee:	f001 fa0d 	bl	800330c <HAL_Delay>
				UART6_Debug("[MCU] -> SEND RDY\r\n");
 8001ef2:	4893      	ldr	r0, [pc, #588]	; (8002140 <main+0x600>)
 8001ef4:	f000 fade 	bl	80024b4 <UART6_Debug>
				HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	4888      	ldr	r0, [pc, #544]	; (8002120 <main+0x5e0>)
 8001efe:	f002 f8db 	bl	80040b8 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f001 fa02 	bl	800330c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	4884      	ldr	r0, [pc, #528]	; (8002120 <main+0x5e0>)
 8001f0e:	f002 f8d3 	bl	80040b8 <HAL_GPIO_WritePin>
				resetWDT();
 8001f12:	f000 fbc7 	bl	80026a4 <resetWDT>



				// Wait DMA put data to buffer
				sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <main+0x604>)
 8001f18:	881a      	ldrh	r2, [r3, #0]
 8001f1a:	4b8a      	ldr	r3, [pc, #552]	; (8002144 <main+0x604>)
 8001f1c:	80da      	strh	r2, [r3, #6]
				while(*dataComm_mainBuff == '\0') {
 8001f1e:	e027      	b.n	8001f70 <main+0x430>
				  // Timeout conditions
				  if(sysCounter.main_ms_counter == 0) {
 8001f20:	4b88      	ldr	r3, [pc, #544]	; (8002144 <main+0x604>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <main+0x3ee>
					  sysCounter.prev_msgTimeOut = 0;
 8001f28:	4b86      	ldr	r3, [pc, #536]	; (8002144 <main+0x604>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	80da      	strh	r2, [r3, #6]
				  }

				  if((sysCounter.main_ms_counter - sysCounter.prev_msgTimeOut) >= 1000) {
 8001f2e:	4b85      	ldr	r3, [pc, #532]	; (8002144 <main+0x604>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b83      	ldr	r3, [pc, #524]	; (8002144 <main+0x604>)
 8001f36:	88db      	ldrh	r3, [r3, #6]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f3e:	db17      	blt.n	8001f70 <main+0x430>
					  UART6_Debug("[MCU] -> UART TIME OUT\r\n");
 8001f40:	4881      	ldr	r0, [pc, #516]	; (8002148 <main+0x608>)
 8001f42:	f000 fab7 	bl	80024b4 <UART6_Debug>
					  SendData_RS485((char*) "F");
 8001f46:	4881      	ldr	r0, [pc, #516]	; (800214c <main+0x60c>)
 8001f48:	f000 faca 	bl	80024e0 <SendData_RS485>

					  intterruptEvent_Flag = 0;
 8001f4c:	4b72      	ldr	r3, [pc, #456]	; (8002118 <main+0x5d8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2120      	movs	r1, #32
 8001f56:	4872      	ldr	r0, [pc, #456]	; (8002120 <main+0x5e0>)
 8001f58:	f002 f8ae 	bl	80040b8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	486f      	ldr	r0, [pc, #444]	; (8002120 <main+0x5e0>)
 8001f62:	f002 f8a9 	bl	80040b8 <HAL_GPIO_WritePin>
					  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8001f66:	4b77      	ldr	r3, [pc, #476]	; (8002144 <main+0x604>)
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <main+0x604>)
 8001f6c:	80da      	strh	r2, [r3, #6]
					  goto MAINTASK;
 8001f6e:	e78e      	b.n	8001e8e <main+0x34e>
				while(*dataComm_mainBuff == '\0') {
 8001f70:	4b77      	ldr	r3, [pc, #476]	; (8002150 <main+0x610>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0d3      	beq.n	8001f20 <main+0x3e0>
				  }
				}
				sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8001f78:	4b72      	ldr	r3, [pc, #456]	; (8002144 <main+0x604>)
 8001f7a:	881a      	ldrh	r2, [r3, #0]
 8001f7c:	4b71      	ldr	r3, [pc, #452]	; (8002144 <main+0x604>)
 8001f7e:	80da      	strh	r2, [r3, #6]
				resetWDT();
 8001f80:	f000 fb90 	bl	80026a4 <resetWDT>


				// Check data is valid?
				// frame 0 = frame 3 && frame 12 = 'Q'
				UART6_Debug("[MCU] -> CHECK DATA FRAME\r\n");
 8001f84:	4873      	ldr	r0, [pc, #460]	; (8002154 <main+0x614>)
 8001f86:	f000 fa95 	bl	80024b4 <UART6_Debug>

				memset(dump_samping, 0x00, sizeof(dump_samping));
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4872      	ldr	r0, [pc, #456]	; (8002158 <main+0x618>)
 8001f90:	f004 fbd8 	bl	8006744 <memset>
				memcpy(dump_samping, dataComm_mainBuff, sizeof(dump_samping));
 8001f94:	4a70      	ldr	r2, [pc, #448]	; (8002158 <main+0x618>)
 8001f96:	4b6e      	ldr	r3, [pc, #440]	; (8002150 <main+0x610>)
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f004 fbc2 	bl	8006728 <memcpy>

				Delimiter(dataComm_mainBuff, ',', 3, 80, (unsigned char*) SENSOR.COMPID);
 8001fa4:	4b60      	ldr	r3, [pc, #384]	; (8002128 <main+0x5e8>)
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2350      	movs	r3, #80	; 0x50
 8001faa:	2203      	movs	r2, #3
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	4868      	ldr	r0, [pc, #416]	; (8002150 <main+0x610>)
 8001fb0:	f000 fd65 	bl	8002a7e <Delimiter>
				Delimiter(dataComm_mainBuff, ',', 12, 80, (unsigned char*) ENDBYTE);
 8001fb4:	4b5d      	ldr	r3, [pc, #372]	; (800212c <main+0x5ec>)
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2350      	movs	r3, #80	; 0x50
 8001fba:	220c      	movs	r2, #12
 8001fbc:	212c      	movs	r1, #44	; 0x2c
 8001fbe:	4864      	ldr	r0, [pc, #400]	; (8002150 <main+0x610>)
 8001fc0:	f000 fd5d 	bl	8002a7e <Delimiter>

				if(dataComm_mainBuff[0] == SENSOR.COMPID[0] && ENDBYTE[0] == 'Q') {
 8001fc4:	4b62      	ldr	r3, [pc, #392]	; (8002150 <main+0x610>)
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b57      	ldr	r3, [pc, #348]	; (8002128 <main+0x5e8>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 8195 	bne.w	80022fc <main+0x7bc>
 8001fd2:	4b56      	ldr	r3, [pc, #344]	; (800212c <main+0x5ec>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b51      	cmp	r3, #81	; 0x51
 8001fd8:	f040 8190 	bne.w	80022fc <main+0x7bc>
				  resetWDT();
 8001fdc:	f000 fb62 	bl	80026a4 <resetWDT>
				  UART6_Debug("[MCU] -> DATA IS VALID\r\n");
 8001fe0:	485e      	ldr	r0, [pc, #376]	; (800215c <main+0x61c>)
 8001fe2:	f000 fa67 	bl	80024b4 <UART6_Debug>

				  // Delimit data
				  Delimiter(dataComm_mainBuff, ',', 1, 80, (unsigned char*) SENSOR.timeStemp);
 8001fe6:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <main+0x620>)
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2350      	movs	r3, #80	; 0x50
 8001fec:	2201      	movs	r2, #1
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	4857      	ldr	r0, [pc, #348]	; (8002150 <main+0x610>)
 8001ff2:	f000 fd44 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 2, 80, (unsigned char*) SENSOR.dateStamp);
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <main+0x624>)
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2350      	movs	r3, #80	; 0x50
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	4853      	ldr	r0, [pc, #332]	; (8002150 <main+0x610>)
 8002002:	f000 fd3c 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 4, 80, (unsigned char*) SENSOR.X);
 8002006:	4b58      	ldr	r3, [pc, #352]	; (8002168 <main+0x628>)
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2350      	movs	r3, #80	; 0x50
 800200c:	2204      	movs	r2, #4
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	484f      	ldr	r0, [pc, #316]	; (8002150 <main+0x610>)
 8002012:	f000 fd34 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 5, 80, (unsigned char*) SENSOR.Y);
 8002016:	4b55      	ldr	r3, [pc, #340]	; (800216c <main+0x62c>)
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2350      	movs	r3, #80	; 0x50
 800201c:	2205      	movs	r2, #5
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	484b      	ldr	r0, [pc, #300]	; (8002150 <main+0x610>)
 8002022:	f000 fd2c 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 6, 80, (unsigned char*) SENSOR.Z);
 8002026:	4b52      	ldr	r3, [pc, #328]	; (8002170 <main+0x630>)
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2350      	movs	r3, #80	; 0x50
 800202c:	2206      	movs	r2, #6
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	4847      	ldr	r0, [pc, #284]	; (8002150 <main+0x610>)
 8002032:	f000 fd24 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 7, 80, (unsigned char*) SENSOR.Huim);
 8002036:	4b4f      	ldr	r3, [pc, #316]	; (8002174 <main+0x634>)
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2350      	movs	r3, #80	; 0x50
 800203c:	2207      	movs	r2, #7
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	4843      	ldr	r0, [pc, #268]	; (8002150 <main+0x610>)
 8002042:	f000 fd1c 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 8, 80, (unsigned char*) SENSOR.Temp);
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <main+0x638>)
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2350      	movs	r3, #80	; 0x50
 800204c:	2208      	movs	r2, #8
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	483f      	ldr	r0, [pc, #252]	; (8002150 <main+0x610>)
 8002052:	f000 fd14 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 9, 80, (unsigned char*) SENSOR.Alc);
 8002056:	4b49      	ldr	r3, [pc, #292]	; (800217c <main+0x63c>)
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2350      	movs	r3, #80	; 0x50
 800205c:	2209      	movs	r2, #9
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	483b      	ldr	r0, [pc, #236]	; (8002150 <main+0x610>)
 8002062:	f000 fd0c 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 10, 80, (unsigned char*) SENSOR.Carbon);
 8002066:	4b46      	ldr	r3, [pc, #280]	; (8002180 <main+0x640>)
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2350      	movs	r3, #80	; 0x50
 800206c:	220a      	movs	r2, #10
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	4837      	ldr	r0, [pc, #220]	; (8002150 <main+0x610>)
 8002072:	f000 fd04 	bl	8002a7e <Delimiter>
				  Delimiter(dataComm_mainBuff, ',', 11, 80, (unsigned char*) SENSOR.AirFlow);
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <main+0x644>)
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2350      	movs	r3, #80	; 0x50
 800207c:	220b      	movs	r2, #11
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	4833      	ldr	r0, [pc, #204]	; (8002150 <main+0x610>)
 8002082:	f000 fcfc 	bl	8002a7e <Delimiter>

				  resetWDT();
 8002086:	f000 fb0d 	bl	80026a4 <resetWDT>

				  // Send data to server
				  HAL_Delay(1);
 800208a:	2001      	movs	r0, #1
 800208c:	f001 f93e 	bl	800330c <HAL_Delay>
				  memset(URL_temp, 0x00, sizeof(URL_temp));
 8002090:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002094:	2100      	movs	r1, #0
 8002096:	483c      	ldr	r0, [pc, #240]	; (8002188 <main+0x648>)
 8002098:	f004 fb54 	bl	8006744 <memset>
				  URL_len = httpSend(GNSS.lat, GNSS.lon, SENSOR.COMPID, SENSOR.timeStemp, SENSOR.dateStamp, SENSOR.X, SENSOR.Y, SENSOR.Z, SENSOR.Huim, SENSOR.Temp, SENSOR.Alc, SENSOR.Carbon, SENSOR.AirFlow, URL_temp);
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <main+0x648>)
 800209e:	9309      	str	r3, [sp, #36]	; 0x24
 80020a0:	4b38      	ldr	r3, [pc, #224]	; (8002184 <main+0x644>)
 80020a2:	9308      	str	r3, [sp, #32]
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <main+0x640>)
 80020a6:	9307      	str	r3, [sp, #28]
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <main+0x63c>)
 80020aa:	9306      	str	r3, [sp, #24]
 80020ac:	4b32      	ldr	r3, [pc, #200]	; (8002178 <main+0x638>)
 80020ae:	9305      	str	r3, [sp, #20]
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <main+0x634>)
 80020b2:	9304      	str	r3, [sp, #16]
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <main+0x630>)
 80020b6:	9303      	str	r3, [sp, #12]
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <main+0x62c>)
 80020ba:	9302      	str	r3, [sp, #8]
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <main+0x628>)
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <main+0x624>)
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <main+0x620>)
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <main+0x5e8>)
 80020c8:	4919      	ldr	r1, [pc, #100]	; (8002130 <main+0x5f0>)
 80020ca:	481a      	ldr	r0, [pc, #104]	; (8002134 <main+0x5f4>)
 80020cc:	f7ff fb76 	bl	80017bc <httpSend>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a2e      	ldr	r2, [pc, #184]	; (800218c <main+0x64c>)
 80020d4:	6013      	str	r3, [r2, #0]

				  UART6_Debug("URL DUMP :\n");
 80020d6:	482e      	ldr	r0, [pc, #184]	; (8002190 <main+0x650>)
 80020d8:	f000 f9ec 	bl	80024b4 <UART6_Debug>
				  UART6_Debug((char*) URL_temp);
 80020dc:	482a      	ldr	r0, [pc, #168]	; (8002188 <main+0x648>)
 80020de:	f000 f9e9 	bl	80024b4 <UART6_Debug>
				  UART6_Debug("\r\n");
 80020e2:	482c      	ldr	r0, [pc, #176]	; (8002194 <main+0x654>)
 80020e4:	f000 f9e6 	bl	80024b4 <UART6_Debug>

				  resetWDT();
 80020e8:	f000 fadc 	bl	80026a4 <resetWDT>

				  HAL_Delay(10);
 80020ec:	200a      	movs	r0, #10
 80020ee:	f001 f90d 	bl	800330c <HAL_Delay>

				  memset(textBuffer, 0x00, sizeof(textBuffer));
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	2100      	movs	r1, #0
 80020f6:	4828      	ldr	r0, [pc, #160]	; (8002198 <main+0x658>)
 80020f8:	f004 fb24 	bl	8006744 <memset>
				  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80020fc:	22ff      	movs	r2, #255	; 0xff
 80020fe:	2100      	movs	r1, #0
 8002100:	4826      	ldr	r0, [pc, #152]	; (800219c <main+0x65c>)
 8002102:	f004 fb1f 	bl	8006744 <memset>


				  for(unsigned char count = 0; count < 3; count++) {
 8002106:	2300      	movs	r3, #0
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	e0f2      	b.n	80022f2 <main+0x7b2>
 800210c:	0800b1e8 	.word	0x0800b1e8
 8002110:	20000554 	.word	0x20000554
 8002114:	0800b1b0 	.word	0x0800b1b0
 8002118:	200001fc 	.word	0x200001fc
 800211c:	20000b41 	.word	0x20000b41
 8002120:	40020400 	.word	0x40020400
 8002124:	0800b200 	.word	0x0800b200
 8002128:	20000d4c 	.word	0x20000d4c
 800212c:	20000b40 	.word	0x20000b40
 8002130:	20000d3c 	.word	0x20000d3c
 8002134:	20000d2c 	.word	0x20000d2c
 8002138:	0800b214 	.word	0x0800b214
 800213c:	0800b230 	.word	0x0800b230
 8002140:	0800b120 	.word	0x0800b120
 8002144:	20000d18 	.word	0x20000d18
 8002148:	0800b254 	.word	0x0800b254
 800214c:	0800b270 	.word	0x0800b270
 8002150:	200009b8 	.word	0x200009b8
 8002154:	0800b274 	.word	0x0800b274
 8002158:	200007b8 	.word	0x200007b8
 800215c:	0800b290 	.word	0x0800b290
 8002160:	20000d60 	.word	0x20000d60
 8002164:	20000d50 	.word	0x20000d50
 8002168:	20000d70 	.word	0x20000d70
 800216c:	20000d76 	.word	0x20000d76
 8002170:	20000d7c 	.word	0x20000d7c
 8002174:	20000d82 	.word	0x20000d82
 8002178:	20000d88 	.word	0x20000d88
 800217c:	20000d8e 	.word	0x20000d8e
 8002180:	20000d94 	.word	0x20000d94
 8002184:	20000d9a 	.word	0x20000d9a
 8002188:	200005d8 	.word	0x200005d8
 800218c:	20000b38 	.word	0x20000b38
 8002190:	0800b2ac 	.word	0x0800b2ac
 8002194:	0800b2b8 	.word	0x0800b2b8
 8002198:	20000558 	.word	0x20000558
 800219c:	20000a38 	.word	0x20000a38
					  switch(count) {
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d013      	beq.n	80021ce <main+0x68e>
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	dc1a      	bgt.n	80021e0 <main+0x6a0>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <main+0x674>
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d008      	beq.n	80021c4 <main+0x684>
 80021b2:	e015      	b.n	80021e0 <main+0x6a0>
						  case 0 :
							  sprintf(textBuffer, "AT+QHTTPURL=%d,80\r\n", URL_len);
 80021b4:	4b67      	ldr	r3, [pc, #412]	; (8002354 <main+0x814>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4967      	ldr	r1, [pc, #412]	; (8002358 <main+0x818>)
 80021bc:	4867      	ldr	r0, [pc, #412]	; (800235c <main+0x81c>)
 80021be:	f004 ff33 	bl	8007028 <siprintf>
							  break;
 80021c2:	e00d      	b.n	80021e0 <main+0x6a0>

						  case 1 :
							  sprintf(textBuffer, "AT+QHTTPPOST=1,60,60\r\n");
 80021c4:	4966      	ldr	r1, [pc, #408]	; (8002360 <main+0x820>)
 80021c6:	4865      	ldr	r0, [pc, #404]	; (800235c <main+0x81c>)
 80021c8:	f004 ff2e 	bl	8007028 <siprintf>
							  break;
 80021cc:	e008      	b.n	80021e0 <main+0x6a0>

						  case 2 :
							  HAL_Delay(3000);
 80021ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021d2:	f001 f89b 	bl	800330c <HAL_Delay>
							  sprintf(textBuffer, "AT+QHTTPREAD=80\r\n");
 80021d6:	4963      	ldr	r1, [pc, #396]	; (8002364 <main+0x824>)
 80021d8:	4860      	ldr	r0, [pc, #384]	; (800235c <main+0x81c>)
 80021da:	f004 ff25 	bl	8007028 <siprintf>
							  break;
 80021de:	bf00      	nop
					  }


					  UART6_Debug((char *) textBuffer);
 80021e0:	485e      	ldr	r0, [pc, #376]	; (800235c <main+0x81c>)
 80021e2:	f000 f967 	bl	80024b4 <UART6_Debug>
					  UART6_Debug("\r\n");
 80021e6:	4860      	ldr	r0, [pc, #384]	; (8002368 <main+0x828>)
 80021e8:	f000 f964 	bl	80024b4 <UART6_Debug>
					  SendCMD_LTE((char *) textBuffer);
 80021ec:	485b      	ldr	r0, [pc, #364]	; (800235c <main+0x81c>)
 80021ee:	f000 f98d 	bl	800250c <SendCMD_LTE>
					  sendURL_flag = 1;
 80021f2:	4b5e      	ldr	r3, [pc, #376]	; (800236c <main+0x82c>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]

					  while(sendURL_flag == 1) {
 80021f8:	e074      	b.n	80022e4 <main+0x7a4>
						  if(findTarget(lteComm_MainBuff, "CONNECT") == 1) {
 80021fa:	495d      	ldr	r1, [pc, #372]	; (8002370 <main+0x830>)
 80021fc:	485d      	ldr	r0, [pc, #372]	; (8002374 <main+0x834>)
 80021fe:	f000 f9fd 	bl	80025fc <findTarget>
 8002202:	4603      	mov	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	d135      	bne.n	8002274 <main+0x734>
							  if(count == 0) {
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <main+0x6d4>
								  SendCMD_LTE((char *) URL_temp);
 800220e:	485a      	ldr	r0, [pc, #360]	; (8002378 <main+0x838>)
 8002210:	f000 f97c 	bl	800250c <SendCMD_LTE>
							  }

							  if(count == 1) {
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d102      	bne.n	8002220 <main+0x6e0>
								  SendCMD_LTE((char *) "\r");
 800221a:	4858      	ldr	r0, [pc, #352]	; (800237c <main+0x83c>)
 800221c:	f000 f976 	bl	800250c <SendCMD_LTE>
							  }

							  if(count == 2) {
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d11b      	bne.n	800225e <main+0x71e>
								  memset(dump_temp, 0x00, sizeof(dump_temp));
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	2100      	movs	r1, #0
 800222a:	4855      	ldr	r0, [pc, #340]	; (8002380 <main+0x840>)
 800222c:	f004 fa8a 	bl	8006744 <memset>
								  memcpy(dump_temp, lteComm_MainBuff, sizeof(dump_temp));
 8002230:	4a53      	ldr	r2, [pc, #332]	; (8002380 <main+0x840>)
 8002232:	4b50      	ldr	r3, [pc, #320]	; (8002374 <main+0x834>)
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	461a      	mov	r2, r3
 800223c:	f004 fa74 	bl	8006728 <memcpy>

								  UART6_Debug("\n");
 8002240:	4850      	ldr	r0, [pc, #320]	; (8002384 <main+0x844>)
 8002242:	f000 f937 	bl	80024b4 <UART6_Debug>
								  UART6_Debug((char *) dump_temp);
 8002246:	484e      	ldr	r0, [pc, #312]	; (8002380 <main+0x840>)
 8002248:	f000 f934 	bl	80024b4 <UART6_Debug>
								  UART6_Debug("\r\n");
 800224c:	4846      	ldr	r0, [pc, #280]	; (8002368 <main+0x828>)
 800224e:	f000 f931 	bl	80024b4 <UART6_Debug>

								  SendData_RS485((char*) "P");
 8002252:	484d      	ldr	r0, [pc, #308]	; (8002388 <main+0x848>)
 8002254:	f000 f944 	bl	80024e0 <SendData_RS485>
								  sendURL_flag = 0;
 8002258:	4b44      	ldr	r3, [pc, #272]	; (800236c <main+0x82c>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
							  }

							  memset(textBuffer, 0x00, sizeof(textBuffer));
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	2100      	movs	r1, #0
 8002262:	483e      	ldr	r0, [pc, #248]	; (800235c <main+0x81c>)
 8002264:	f004 fa6e 	bl	8006744 <memset>
							  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8002268:	22ff      	movs	r2, #255	; 0xff
 800226a:	2100      	movs	r1, #0
 800226c:	4841      	ldr	r0, [pc, #260]	; (8002374 <main+0x834>)
 800226e:	f004 fa69 	bl	8006744 <memset>
 8002272:	e037      	b.n	80022e4 <main+0x7a4>
						  }

						  else if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8002274:	4945      	ldr	r1, [pc, #276]	; (800238c <main+0x84c>)
 8002276:	483f      	ldr	r0, [pc, #252]	; (8002374 <main+0x834>)
 8002278:	f000 f9c0 	bl	80025fc <findTarget>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d110      	bne.n	80022a4 <main+0x764>

							  UART6_Debug("[LTE] -> OK\r\n");
 8002282:	4843      	ldr	r0, [pc, #268]	; (8002390 <main+0x850>)
 8002284:	f000 f916 	bl	80024b4 <UART6_Debug>

							  memset(textBuffer, 0x00, sizeof(textBuffer));
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	2100      	movs	r1, #0
 800228c:	4833      	ldr	r0, [pc, #204]	; (800235c <main+0x81c>)
 800228e:	f004 fa59 	bl	8006744 <memset>
							  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8002292:	22ff      	movs	r2, #255	; 0xff
 8002294:	2100      	movs	r1, #0
 8002296:	4837      	ldr	r0, [pc, #220]	; (8002374 <main+0x834>)
 8002298:	f004 fa54 	bl	8006744 <memset>

							  sendURL_flag = 0;
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <main+0x82c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e01f      	b.n	80022e4 <main+0x7a4>
						  }


						  else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80022a4:	493b      	ldr	r1, [pc, #236]	; (8002394 <main+0x854>)
 80022a6:	4833      	ldr	r0, [pc, #204]	; (8002374 <main+0x834>)
 80022a8:	f000 f9a8 	bl	80025fc <findTarget>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d118      	bne.n	80022e4 <main+0x7a4>

							  UART6_Debug("[LTE] -> ERROR\r\n");
 80022b2:	4839      	ldr	r0, [pc, #228]	; (8002398 <main+0x858>)
 80022b4:	f000 f8fe 	bl	80024b4 <UART6_Debug>

							  SendData_RS485((char*) "X");
 80022b8:	4838      	ldr	r0, [pc, #224]	; (800239c <main+0x85c>)
 80022ba:	f000 f911 	bl	80024e0 <SendData_RS485>


							  memset(textBuffer, 0x00, sizeof(textBuffer));
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	2100      	movs	r1, #0
 80022c2:	4826      	ldr	r0, [pc, #152]	; (800235c <main+0x81c>)
 80022c4:	f004 fa3e 	bl	8006744 <memset>
							  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	2100      	movs	r1, #0
 80022cc:	4829      	ldr	r0, [pc, #164]	; (8002374 <main+0x834>)
 80022ce:	f004 fa39 	bl	8006744 <memset>

							  sysFlag.LTE_ERROR = 1;
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <main+0x860>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	709a      	strb	r2, [r3, #2]
							  sendURL_flag = 0;
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <main+0x82c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
							  intterruptEvent_Flag = 0;
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <main+0x864>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
					  while(sendURL_flag == 1) {
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <main+0x82c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d086      	beq.n	80021fa <main+0x6ba>
				  for(unsigned char count = 0; count < 3; count++) {
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	3301      	adds	r3, #1
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	f67f af53 	bls.w	80021a0 <main+0x660>
 80022fa:	e005      	b.n	8002308 <main+0x7c8>
						  }
					  }
				  }
				}else {
					UART6_Debug("[MCU] -> DATA NOT VALID\r\n");
 80022fc:	482a      	ldr	r0, [pc, #168]	; (80023a8 <main+0x868>)
 80022fe:	f000 f8d9 	bl	80024b4 <UART6_Debug>
					SendData_RS485((char*) "F");
 8002302:	482a      	ldr	r0, [pc, #168]	; (80023ac <main+0x86c>)
 8002304:	f000 f8ec 	bl	80024e0 <SendData_RS485>
				}

				resetWDT();
 8002308:	f000 f9cc 	bl	80026a4 <resetWDT>

				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				UART6_Debug("[MCU] -> DEACTIVATE INTERNET\r\n");
 800230c:	4828      	ldr	r0, [pc, #160]	; (80023b0 <main+0x870>)
 800230e:	f000 f8d1 	bl	80024b4 <UART6_Debug>
				Deactivate();
 8002312:	f7ff fba3 	bl	8001a5c <Deactivate>
				AckInternet_flag = 0;
 8002316:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <main+0x874>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]


				UART6_Debug("[MCU] -> END PROCESS\r\n\r\n");
 800231c:	4826      	ldr	r0, [pc, #152]	; (80023b8 <main+0x878>)
 800231e:	f000 f8c9 	bl	80024b4 <UART6_Debug>

				intterruptEvent_Flag = 0;
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <main+0x864>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	2120      	movs	r1, #32
 800232c:	4823      	ldr	r0, [pc, #140]	; (80023bc <main+0x87c>)
 800232e:	f001 fec3 	bl	80040b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, ACTIVE, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2140      	movs	r1, #64	; 0x40
 8002336:	4821      	ldr	r0, [pc, #132]	; (80023bc <main+0x87c>)
 8002338:	f001 febe 	bl	80040b8 <HAL_GPIO_WritePin>
	  while(intterruptEvent_Flag == 1 && AckInternet_flag == 1) {
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <main+0x864>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	f47f ac76 	bne.w	8001c32 <main+0xf2>
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <main+0x874>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	f43f ada0 	beq.w	8001e90 <main+0x350>
	  if(sysCounter.main_ms_counter == 0) {
 8002350:	e46f      	b.n	8001c32 <main+0xf2>
 8002352:	bf00      	nop
 8002354:	20000b38 	.word	0x20000b38
 8002358:	0800b2bc 	.word	0x0800b2bc
 800235c:	20000558 	.word	0x20000558
 8002360:	0800b2d0 	.word	0x0800b2d0
 8002364:	0800b2e8 	.word	0x0800b2e8
 8002368:	0800b2b8 	.word	0x0800b2b8
 800236c:	20000b3c 	.word	0x20000b3c
 8002370:	0800b2fc 	.word	0x0800b2fc
 8002374:	20000a38 	.word	0x20000a38
 8002378:	200005d8 	.word	0x200005d8
 800237c:	0800b304 	.word	0x0800b304
 8002380:	20000738 	.word	0x20000738
 8002384:	0800b308 	.word	0x0800b308
 8002388:	0800b30c 	.word	0x0800b30c
 800238c:	0800b310 	.word	0x0800b310
 8002390:	0800b314 	.word	0x0800b314
 8002394:	0800b324 	.word	0x0800b324
 8002398:	0800b32c 	.word	0x0800b32c
 800239c:	0800b1b0 	.word	0x0800b1b0
 80023a0:	20000d28 	.word	0x20000d28
 80023a4:	200001fc 	.word	0x200001fc
 80023a8:	0800b340 	.word	0x0800b340
 80023ac:	0800b270 	.word	0x0800b270
 80023b0:	0800b35c 	.word	0x0800b35c
 80023b4:	20000b41 	.word	0x20000b41
 80023b8:	0800b37c 	.word	0x0800b37c
 80023bc:	40020400 	.word	0x40020400

080023c0 <sysValinit>:

// user custom functions


// init startup value at boot
void sysValinit(void) {
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <sysValinit+0x48>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	801a      	strh	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <sysValinit+0x48>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	805a      	strh	r2, [r3, #2]
	sysCounter.prev_ERRORtime = 0;
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <sysValinit+0x48>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	809a      	strh	r2, [r3, #4]
	sysCounter.rebootCount = 0;
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <sysValinit+0x48>)
 80023d8:	2200      	movs	r2, #0
 80023da:	729a      	strb	r2, [r3, #10]
	sysCounter.prev_ClearWDT = 0;
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <sysValinit+0x48>)
 80023de:	2200      	movs	r2, #0
 80023e0:	811a      	strh	r2, [r3, #8]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <sysValinit+0x48>)
 80023e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023e8:	819a      	strh	r2, [r3, #12]

	sysFlag.LTE_CMD_Send = 0;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <sysValinit+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_INIT_ERROR = 0;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <sysValinit+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	705a      	strb	r2, [r3, #1]
	sysFlag.LTE_ERROR = 0;
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <sysValinit+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	709a      	strb	r2, [r3, #2]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000d18 	.word	0x20000d18
 800240c:	20000d28 	.word	0x20000d28

08002410 <sensorValInit>:


// init sensor variable handle
// set/clear buffer array
void sensorValInit(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	memset(SENSOR.COMPID, 0x00, sizeof(SENSOR.COMPID));
 8002414:	2204      	movs	r2, #4
 8002416:	2100      	movs	r1, #0
 8002418:	481b      	ldr	r0, [pc, #108]	; (8002488 <sensorValInit+0x78>)
 800241a:	f004 f993 	bl	8006744 <memset>
	memset(SENSOR.dateStamp, 0x00, sizeof(SENSOR.dateStamp));
 800241e:	2210      	movs	r2, #16
 8002420:	2100      	movs	r1, #0
 8002422:	481a      	ldr	r0, [pc, #104]	; (800248c <sensorValInit+0x7c>)
 8002424:	f004 f98e 	bl	8006744 <memset>
	memset(SENSOR.timeStemp, 0x00, sizeof(SENSOR.timeStemp));
 8002428:	2210      	movs	r2, #16
 800242a:	2100      	movs	r1, #0
 800242c:	4818      	ldr	r0, [pc, #96]	; (8002490 <sensorValInit+0x80>)
 800242e:	f004 f989 	bl	8006744 <memset>
	memset(SENSOR.X, 0x00, sizeof(SENSOR.X));
 8002432:	2206      	movs	r2, #6
 8002434:	2100      	movs	r1, #0
 8002436:	4817      	ldr	r0, [pc, #92]	; (8002494 <sensorValInit+0x84>)
 8002438:	f004 f984 	bl	8006744 <memset>
	memset(SENSOR.Y, 0x00, sizeof(SENSOR.Y));
 800243c:	2206      	movs	r2, #6
 800243e:	2100      	movs	r1, #0
 8002440:	4815      	ldr	r0, [pc, #84]	; (8002498 <sensorValInit+0x88>)
 8002442:	f004 f97f 	bl	8006744 <memset>
	memset(SENSOR.Z, 0x00, sizeof(SENSOR.Z));
 8002446:	2206      	movs	r2, #6
 8002448:	2100      	movs	r1, #0
 800244a:	4814      	ldr	r0, [pc, #80]	; (800249c <sensorValInit+0x8c>)
 800244c:	f004 f97a 	bl	8006744 <memset>
	memset(SENSOR.Huim, 0x00, sizeof(SENSOR.Huim));
 8002450:	2206      	movs	r2, #6
 8002452:	2100      	movs	r1, #0
 8002454:	4812      	ldr	r0, [pc, #72]	; (80024a0 <sensorValInit+0x90>)
 8002456:	f004 f975 	bl	8006744 <memset>
	memset(SENSOR.Temp, 0x00, sizeof(SENSOR.Temp));
 800245a:	2206      	movs	r2, #6
 800245c:	2100      	movs	r1, #0
 800245e:	4811      	ldr	r0, [pc, #68]	; (80024a4 <sensorValInit+0x94>)
 8002460:	f004 f970 	bl	8006744 <memset>
	memset(SENSOR.Alc, 0x00, sizeof(SENSOR.Alc));
 8002464:	2206      	movs	r2, #6
 8002466:	2100      	movs	r1, #0
 8002468:	480f      	ldr	r0, [pc, #60]	; (80024a8 <sensorValInit+0x98>)
 800246a:	f004 f96b 	bl	8006744 <memset>
	memset(SENSOR.Carbon, 0x00, sizeof(SENSOR.Carbon));
 800246e:	2206      	movs	r2, #6
 8002470:	2100      	movs	r1, #0
 8002472:	480e      	ldr	r0, [pc, #56]	; (80024ac <sensorValInit+0x9c>)
 8002474:	f004 f966 	bl	8006744 <memset>
	memset(SENSOR.AirFlow, 0x00, sizeof(SENSOR.AirFlow));
 8002478:	2206      	movs	r2, #6
 800247a:	2100      	movs	r1, #0
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <sensorValInit+0xa0>)
 800247e:	f004 f961 	bl	8006744 <memset>
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000d4c 	.word	0x20000d4c
 800248c:	20000d50 	.word	0x20000d50
 8002490:	20000d60 	.word	0x20000d60
 8002494:	20000d70 	.word	0x20000d70
 8002498:	20000d76 	.word	0x20000d76
 800249c:	20000d7c 	.word	0x20000d7c
 80024a0:	20000d82 	.word	0x20000d82
 80024a4:	20000d88 	.word	0x20000d88
 80024a8:	20000d8e 	.word	0x20000d8e
 80024ac:	20000d94 	.word	0x20000d94
 80024b0:	20000d9a 	.word	0x20000d9a

080024b4 <UART6_Debug>:


// UART Debug
void UART6_Debug(char* msg) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t *) msg, strlen(msg), 1000);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7fd fe8f 	bl	80001e0 <strlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4803      	ldr	r0, [pc, #12]	; (80024dc <UART6_Debug+0x28>)
 80024ce:	f002 ff12 	bl	80052f6 <HAL_UART_Transmit>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000c14 	.word	0x20000c14

080024e0 <SendData_RS485>:

// RS485 Tx [Polling method]
void SendData_RS485(char *msg) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 1000);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fd fe79 	bl	80001e0 <strlen>
 80024ee:	4603      	mov	r3, r0
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <SendData_RS485+0x28>)
 80024fa:	f002 fefc 	bl	80052f6 <HAL_UART_Transmit>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000b8c 	.word	0x20000b8c

0800250c <SendCMD_LTE>:

void SendCMD_LTE(char *msg) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 1000);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fd fe63 	bl	80001e0 <strlen>
 800251a:	4603      	mov	r3, r0
 800251c:	b29a      	uxth	r2, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <SendCMD_LTE+0x28>)
 8002526:	f002 fee6 	bl	80052f6 <HAL_UART_Transmit>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000bd0 	.word	0x20000bd0

08002538 <HAL_UARTEx_RxEventCallback>:


// UART1/UART2 Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a22      	ldr	r2, [pc, #136]	; (80025d4 <HAL_UARTEx_RxEventCallback+0x9c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11c      	bne.n	8002588 <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 800254e:	22ff      	movs	r2, #255	; 0xff
 8002550:	4921      	ldr	r1, [pc, #132]	; (80025d8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002552:	4822      	ldr	r0, [pc, #136]	; (80025dc <HAL_UARTEx_RxEventCallback+0xa4>)
 8002554:	f002 ff61 	bl	800541a <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	2100      	movs	r1, #0
 800255c:	4820      	ldr	r0, [pc, #128]	; (80025e0 <HAL_UARTEx_RxEventCallback+0xa8>)
 800255e:	f004 f8f1 	bl	8006744 <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	461a      	mov	r2, r3
 8002566:	491c      	ldr	r1, [pc, #112]	; (80025d8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002568:	481d      	ldr	r0, [pc, #116]	; (80025e0 <HAL_UARTEx_RxEventCallback+0xa8>)
 800256a:	f004 f8dd 	bl	8006728 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 800256e:	22ff      	movs	r2, #255	; 0xff
 8002570:	2100      	movs	r1, #0
 8002572:	4819      	ldr	r0, [pc, #100]	; (80025d8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002574:	f004 f8e6 	bl	8006744 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_UARTEx_RxEventCallback+0xac>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_UARTEx_RxEventCallback+0xac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0208 	bic.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <HAL_UARTEx_RxEventCallback+0xb0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d11c      	bne.n	80025cc <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	4915      	ldr	r1, [pc, #84]	; (80025ec <HAL_UARTEx_RxEventCallback+0xb4>)
 8002596:	4816      	ldr	r0, [pc, #88]	; (80025f0 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002598:	f002 ff3f 	bl	800541a <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	2100      	movs	r1, #0
 80025a0:	4814      	ldr	r0, [pc, #80]	; (80025f4 <HAL_UARTEx_RxEventCallback+0xbc>)
 80025a2:	f004 f8cf 	bl	8006744 <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4910      	ldr	r1, [pc, #64]	; (80025ec <HAL_UARTEx_RxEventCallback+0xb4>)
 80025ac:	4811      	ldr	r0, [pc, #68]	; (80025f4 <HAL_UARTEx_RxEventCallback+0xbc>)
 80025ae:	f004 f8bb 	bl	8006728 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	2100      	movs	r1, #0
 80025b6:	480d      	ldr	r0, [pc, #52]	; (80025ec <HAL_UARTEx_RxEventCallback+0xb4>)
 80025b8:	f004 f8c4 	bl	8006744 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_UARTEx_RxEventCallback+0xc0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_UARTEx_RxEventCallback+0xc0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0208 	bic.w	r2, r2, #8
 80025ca:	601a      	str	r2, [r3, #0]
	}
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40004400 	.word	0x40004400
 80025d8:	200008b8 	.word	0x200008b8
 80025dc:	20000bd0 	.word	0x20000bd0
 80025e0:	20000a38 	.word	0x20000a38
 80025e4:	20000cb8 	.word	0x20000cb8
 80025e8:	40011000 	.word	0x40011000
 80025ec:	20000838 	.word	0x20000838
 80025f0:	20000b8c 	.word	0x20000b8c
 80025f4:	200009b8 	.word	0x200009b8
 80025f8:	20000c58 	.word	0x20000c58

080025fc <findTarget>:


// find target in string
int findTarget(const char *inStr, const char *target) {
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    int i, j;
    for (i = 0; inStr[i] != '\0'; i++) {
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e023      	b.n	8002654 <findTarget+0x58>
        j = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8002610:	e002      	b.n	8002618 <findTarget+0x1c>
            j++;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3301      	adds	r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	4413      	add	r3, r2
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <findTarget+0x42>
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4413      	add	r3, r2
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	440b      	add	r3, r1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d0e9      	beq.n	8002612 <findTarget+0x16>
        }
        if (target[j] == '\0') {
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <findTarget+0x52>
            return 1; // Return 1 if found
 800264a:	2301      	movs	r3, #1
 800264c:	e009      	b.n	8002662 <findTarget+0x66>
    for (i = 0; inStr[i] != '\0'; i++) {
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3301      	adds	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1d5      	bne.n	800260c <findTarget+0x10>
        }
    }
    return 0; // Return 0 if not found
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_TIM_PeriodElapsedCallback>:


// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d105      	bne.n	800268e <HAL_TIM_PeriodElapsedCallback+0x1e>
		sysCounter.main_ms_counter++;
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800268c:	801a      	strh	r2, [r3, #0]
	}
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40000800 	.word	0x40000800
 80026a0:	20000d18 	.word	0x20000d18

080026a4 <resetWDT>:
void Clear_Buff_Commu(void) {
	memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));
}


void resetWDT(void) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RESET_WDT, GPIO_PIN_SET);
 80026a8:	2201      	movs	r2, #1
 80026aa:	2110      	movs	r1, #16
 80026ac:	4806      	ldr	r0, [pc, #24]	; (80026c8 <resetWDT+0x24>)
 80026ae:	f001 fd03 	bl	80040b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 fe2a 	bl	800330c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, RESET_WDT, GPIO_PIN_RESET);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2110      	movs	r1, #16
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <resetWDT+0x24>)
 80026be:	f001 fcfb 	bl	80040b8 <HAL_GPIO_WritePin>
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40020400 	.word	0x40020400

080026cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b094      	sub	sp, #80	; 0x50
 80026d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	2230      	movs	r2, #48	; 0x30
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 f832 	bl	8006744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <SystemClock_Config+0xc8>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <SystemClock_Config+0xc8>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <SystemClock_Config+0xc8>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	2300      	movs	r3, #0
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <SystemClock_Config+0xcc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a20      	ldr	r2, [pc, #128]	; (8002798 <SystemClock_Config+0xcc>)
 8002716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <SystemClock_Config+0xcc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002728:	2301      	movs	r3, #1
 800272a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800272c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002732:	2302      	movs	r3, #2
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800273c:	2319      	movs	r3, #25
 800273e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002740:	2390      	movs	r3, #144	; 0x90
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002744:	2302      	movs	r3, #2
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002748:	2303      	movs	r3, #3
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	4618      	mov	r0, r3
 8002752:	f001 fce5 	bl	8004120 <HAL_RCC_OscConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800275c:	f000 f98a 	bl	8002a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002760:	230f      	movs	r3, #15
 8002762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002764:	2302      	movs	r3, #2
 8002766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800276c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	2102      	movs	r1, #2
 800277c:	4618      	mov	r0, r3
 800277e:	f001 ff47 	bl	8004610 <HAL_RCC_ClockConfig>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002788:	f000 f974 	bl	8002a74 <Error_Handler>
  }
}
 800278c:	bf00      	nop
 800278e:	3750      	adds	r7, #80	; 0x50
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	40007000 	.word	0x40007000

0800279c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a2:	f107 0308 	add.w	r3, r7, #8
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b0:	463b      	mov	r3, r7
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <MX_TIM4_Init+0x94>)
 80027ba:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <MX_TIM4_Init+0x98>)
 80027bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <MX_TIM4_Init+0x94>)
 80027c0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80027c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <MX_TIM4_Init+0x94>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <MX_TIM4_Init+0x94>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <MX_TIM4_Init+0x94>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <MX_TIM4_Init+0x94>)
 80027da:	2200      	movs	r2, #0
 80027dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027de:	4814      	ldr	r0, [pc, #80]	; (8002830 <MX_TIM4_Init+0x94>)
 80027e0:	f002 f8f6 	bl	80049d0 <HAL_TIM_Base_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80027ea:	f000 f943 	bl	8002a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027f4:	f107 0308 	add.w	r3, r7, #8
 80027f8:	4619      	mov	r1, r3
 80027fa:	480d      	ldr	r0, [pc, #52]	; (8002830 <MX_TIM4_Init+0x94>)
 80027fc:	f002 faa2 	bl	8004d44 <HAL_TIM_ConfigClockSource>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002806:	f000 f935 	bl	8002a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002812:	463b      	mov	r3, r7
 8002814:	4619      	mov	r1, r3
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_TIM4_Init+0x94>)
 8002818:	f002 fc9e 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002822:	f000 f927 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000b44 	.word	0x20000b44
 8002834:	40000800 	.word	0x40000800

08002838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <MX_USART1_UART_Init+0x50>)
 8002840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 8002844:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 800285e:	220c      	movs	r2, #12
 8002860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <MX_USART1_UART_Init+0x4c>)
 8002870:	f002 fcf4 	bl	800525c <HAL_UART_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800287a:	f000 f8fb 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000b8c 	.word	0x20000b8c
 8002888:	40011000 	.word	0x40011000

0800288c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <MX_USART2_UART_Init+0x50>)
 8002894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 8002898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800289c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 80028b2:	220c      	movs	r2, #12
 80028b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <MX_USART2_UART_Init+0x4c>)
 80028c4:	f002 fcca 	bl	800525c <HAL_UART_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028ce:	f000 f8d1 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000bd0 	.word	0x20000bd0
 80028dc:	40004400 	.word	0x40004400

080028e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <MX_USART6_UART_Init+0x4c>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <MX_USART6_UART_Init+0x50>)
 80028e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <MX_USART6_UART_Init+0x4c>)
 80028ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <MX_USART6_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <MX_USART6_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <MX_USART6_UART_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <MX_USART6_UART_Init+0x4c>)
 8002906:	220c      	movs	r2, #12
 8002908:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <MX_USART6_UART_Init+0x4c>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <MX_USART6_UART_Init+0x4c>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <MX_USART6_UART_Init+0x4c>)
 8002918:	f002 fca0 	bl	800525c <HAL_UART_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002922:	f000 f8a7 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000c14 	.word	0x20000c14
 8002930:	40011400 	.word	0x40011400

08002934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_DMA_Init+0x68>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <MX_DMA_Init+0x68>)
 8002944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_DMA_Init+0x68>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <MX_DMA_Init+0x68>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a0f      	ldr	r2, [pc, #60]	; (800299c <MX_DMA_Init+0x68>)
 8002960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <MX_DMA_Init+0x68>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	2010      	movs	r0, #16
 8002978:	f000 fddd 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800297c:	2010      	movs	r0, #16
 800297e:	f000 fdf6 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	203a      	movs	r0, #58	; 0x3a
 8002988:	f000 fdd5 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800298c:	203a      	movs	r0, #58	; 0x3a
 800298e:	f000 fdee 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <MX_GPIO_Init+0xc8>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a2a      	ldr	r2, [pc, #168]	; (8002a68 <MX_GPIO_Init+0xc8>)
 80029c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <MX_GPIO_Init+0xc8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <MX_GPIO_Init+0xc8>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <MX_GPIO_Init+0xc8>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <MX_GPIO_Init+0xc8>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <MX_GPIO_Init+0xc8>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <MX_GPIO_Init+0xc8>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <MX_GPIO_Init+0xc8>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f240 21f2 	movw	r1, #754	; 0x2f2
 8002a10:	4816      	ldr	r0, [pc, #88]	; (8002a6c <MX_GPIO_Init+0xcc>)
 8002a12:	f001 fb51 	bl	80040b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1c:	4814      	ldr	r0, [pc, #80]	; (8002a70 <MX_GPIO_Init+0xd0>)
 8002a1e:	f001 fb4b 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB4 PB5 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002a22:	f240 23f2 	movw	r3, #754	; 0x2f2
 8002a26:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	4619      	mov	r1, r3
 8002a3a:	480c      	ldr	r0, [pc, #48]	; (8002a6c <MX_GPIO_Init+0xcc>)
 8002a3c:	f001 f9b8 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	4619      	mov	r1, r3
 8002a58:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_GPIO_Init+0xd0>)
 8002a5a:	f001 f9a9 	bl	8003db0 <HAL_GPIO_Init>

}
 8002a5e:	bf00      	nop
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020000 	.word	0x40020000

08002a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a78:	b672      	cpsid	i
}
 8002a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <Error_Handler+0x8>

08002a7e <Delimiter>:
////            *(dataOutput+writerPos) = '\0';
////        }
//    }
//}

void Delimiter(char *inputData, const char delims, int index, unsigned int maxIndexSize, unsigned char *dataOutput){
 8002a7e:	b480      	push	{r7}
 8002a80:	b08b      	sub	sp, #44	; 0x2c
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	72fb      	strb	r3, [r7, #11]
    // Parsed string(char array) to split value by demiliter and output value
    // Argument: ( input data , delimiter/splitter letter , no of extract data , max array size, array to store result)
    unsigned int found = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int strIndex[2] = {0};
 8002a92:	f107 0310 	add.w	r3, r7, #16
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
    unsigned int readerPos = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	623b      	str	r3, [r7, #32]
    unsigned int loaderPos = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
    unsigned int writerPos = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]

    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	e01c      	b.n	8002ae8 <Delimiter+0x6a>

        if(*(inputData+readerPos) == delims || readerPos == maxIndexSize){
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	7afa      	ldrb	r2, [r7, #11]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d003      	beq.n	8002ac4 <Delimiter+0x46>
 8002abc:	6a3a      	ldr	r2, [r7, #32]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d10e      	bne.n	8002ae2 <Delimiter+0x64>
            found++;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
            strIndex[0] = strIndex[1]+1;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	613b      	str	r3, [r7, #16]
            strIndex[1] = (readerPos == maxIndexSize) ? readerPos + 1 : readerPos;
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d102      	bne.n	8002ade <Delimiter+0x60>
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	3301      	adds	r3, #1
 8002adc:	e000      	b.n	8002ae0 <Delimiter+0x62>
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	617b      	str	r3, [r7, #20]
    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	623b      	str	r3, [r7, #32]
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d203      	bcs.n	8002af8 <Delimiter+0x7a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d9da      	bls.n	8002aae <Delimiter+0x30>
        }
    }

    if(found > index){
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d91c      	bls.n	8002b3a <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	e015      	b.n	8002b32 <Delimiter+0xb4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	441a      	add	r2, r3
 8002b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	440b      	add	r3, r1
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	701a      	strb	r2, [r3, #0]
           writerPos++;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	61bb      	str	r3, [r7, #24]
           if((loaderPos > maxIndexSize)||(writerPos > maxIndexSize)){
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d80a      	bhi.n	8002b3a <Delimiter+0xbc>
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d806      	bhi.n	8002b3a <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d3e5      	bcc.n	8002b06 <Delimiter+0x88>
// to next people if you need to fix it let's do it and thank you (>w<)
//
// Modify by REDWOLF DiGiTAL
// (yep... I'm ignore code performance because I'm not time ;w;)

    if(index == 0) {
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d11c      	bne.n	8002b7a <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	e015      	b.n	8002b72 <Delimiter+0xf4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	440b      	add	r3, r1
 8002b52:	7812      	ldrb	r2, [r2, #0]
 8002b54:	701a      	strb	r2, [r3, #0]
           writerPos++;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61bb      	str	r3, [r7, #24]

           if((loaderPos > strIndex[0])||(writerPos > strIndex[0])){
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d80a      	bhi.n	8002b7a <Delimiter+0xfc>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d806      	bhi.n	8002b7a <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3e5      	bcc.n	8002b46 <Delimiter+0xc8>
               break;
           }
        }
    }

    if(index >= found) {
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d825      	bhi.n	8002bce <Delimiter+0x150>
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3301      	adds	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e01b      	b.n	8002bc2 <Delimiter+0x144>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	441a      	add	r2, r3
 8002b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	440b      	add	r3, r1
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	701a      	strb	r2, [r3, #0]

           if(*(inputData+loaderPos) == '\0' || (loaderPos >= maxIndexSize) || writerPos >= maxIndexSize) {
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d013      	beq.n	8002bce <Delimiter+0x150>
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d20f      	bcs.n	8002bce <Delimiter+0x150>
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d20b      	bcs.n	8002bce <Delimiter+0x150>
               break;
           }

           writerPos++;
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	61bb      	str	r3, [r7, #24]
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1dd      	bne.n	8002b8a <Delimiter+0x10c>
        }
    }
}
 8002bce:	bf00      	nop
 8002bd0:	372c      	adds	r7, #44	; 0x2c
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <NMEACRCCal>:
 *  Copy-Distribute-Modify is prohibited
 *
 *  Code created by MangMuang's Elektronik, 15 JULY 2022
 *
 */ // =====================================================
unsigned char NMEACRCCal(const unsigned char *sentenceIn){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    unsigned char CRCinStr[3] = {0};
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <NMEACRCCal+0xa0>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	81bb      	strh	r3, [r7, #12]
 8002bea:	2300      	movs	r3, #0
 8002bec:	73bb      	strb	r3, [r7, #14]
    unsigned char CRCin = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	77bb      	strb	r3, [r7, #30]
    unsigned char CRCResult = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char* dollarSign;
    char* starSign;
    unsigned int totalSize = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61bb      	str	r3, [r7, #24]
    dollarSign = strchr((const char *)sentenceIn, '$');
 8002bfc:	2124      	movs	r1, #36	; 0x24
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f004 fa32 	bl	8007068 <strchr>
 8002c04:	6178      	str	r0, [r7, #20]
    starSign = strchr((const char *)sentenceIn, '*');
 8002c06:	212a      	movs	r1, #42	; 0x2a
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f004 fa2d 	bl	8007068 <strchr>
 8002c0e:	6138      	str	r0, [r7, #16]
    totalSize = starSign-dollarSign;
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	61bb      	str	r3, [r7, #24]
    strncpy((char *)CRCinStr, starSign + 1, 2);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	2202      	movs	r2, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fa2d 	bl	8007082 <strncpy>
    CRCin = (unsigned char)strtol((char *)CRCinStr, NULL, 16);
 8002c28:	f107 030c 	add.w	r3, r7, #12
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f005 f8e9 	bl	8007e08 <strtol>
 8002c36:	4603      	mov	r3, r0
 8002c38:	77bb      	strb	r3, [r7, #30]
    for(unsigned int CalCnt = 1; CalCnt < totalSize; CalCnt++){
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	e00b      	b.n	8002c58 <NMEACRCCal+0x7c>
        CRCResult ^= sentenceIn[CalCnt];
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	4413      	add	r3, r2
 8002c46:	781a      	ldrb	r2, [r3, #0]
 8002c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c4c:	4053      	eors	r3, r2
 8002c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(unsigned int CalCnt = 1; CalCnt < totalSize; CalCnt++){
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	3301      	adds	r3, #1
 8002c56:	623b      	str	r3, [r7, #32]
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d3ef      	bcc.n	8002c40 <NMEACRCCal+0x64>
    }
    unsigned char CRCCMPResult = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
    if(CRCin == CRCResult){
 8002c64:	7fba      	ldrb	r2, [r7, #30]
 8002c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d101      	bne.n	8002c72 <NMEACRCCal+0x96>
        CRCCMPResult = 1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	77fb      	strb	r3, [r7, #31]
    }
    return CRCCMPResult;
 8002c72:	7ffb      	ldrb	r3, [r7, #31]

}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	0800b398 	.word	0x0800b398

08002c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_MspInit+0x4c>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_MspInit+0x4c>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_MspInit+0x4c>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <HAL_TIM_Base_MspInit+0x48>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d115      	bne.n	8002d0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_TIM_Base_MspInit+0x4c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_TIM_Base_MspInit+0x4c>)
 8002cec:	f043 0304 	orr.w	r3, r3, #4
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_TIM_Base_MspInit+0x4c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	201e      	movs	r0, #30
 8002d04:	f000 fc17 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d08:	201e      	movs	r0, #30
 8002d0a:	f000 fc30 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40000800 	.word	0x40000800
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a82      	ldr	r2, [pc, #520]	; (8002f48 <HAL_UART_MspInit+0x228>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d164      	bne.n	8002e0c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
 8002d46:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	4a80      	ldr	r2, [pc, #512]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002d4c:	f043 0310 	orr.w	r3, r3, #16
 8002d50:	6453      	str	r3, [r2, #68]	; 0x44
 8002d52:	4b7e      	ldr	r3, [pc, #504]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a79      	ldr	r2, [pc, #484]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d94:	4619      	mov	r1, r3
 8002d96:	486e      	ldr	r0, [pc, #440]	; (8002f50 <HAL_UART_MspInit+0x230>)
 8002d98:	f001 f80a 	bl	8003db0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d9c:	4b6d      	ldr	r3, [pc, #436]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_UART_MspInit+0x238>)
 8002da0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002da2:	4b6c      	ldr	r3, [pc, #432]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002da4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002daa:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db0:	4b68      	ldr	r3, [pc, #416]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002db6:	4b67      	ldr	r3, [pc, #412]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dbe:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc4:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002dca:	4b62      	ldr	r3, [pc, #392]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002dd0:	4b60      	ldr	r3, [pc, #384]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd8:	4b5e      	ldr	r3, [pc, #376]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002dde:	485d      	ldr	r0, [pc, #372]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002de0:	f000 fbe4 	bl	80035ac <HAL_DMA_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002dea:	f7ff fe43 	bl	8002a74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_UART_MspInit+0x234>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2025      	movs	r0, #37	; 0x25
 8002e00:	f000 fb99 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e04:	2025      	movs	r0, #37	; 0x25
 8002e06:	f000 fbb2 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e0a:	e099      	b.n	8002f40 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_UART_MspInit+0x23c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d162      	bne.n	8002edc <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a44      	ldr	r2, [pc, #272]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e4e:	230c      	movs	r3, #12
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e5e:	2307      	movs	r3, #7
 8002e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e66:	4619      	mov	r1, r3
 8002e68:	4839      	ldr	r0, [pc, #228]	; (8002f50 <HAL_UART_MspInit+0x230>)
 8002e6a:	f000 ffa1 	bl	8003db0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002e70:	4a3c      	ldr	r2, [pc, #240]	; (8002f64 <HAL_UART_MspInit+0x244>)
 8002e72:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e7c:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e82:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e88:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e90:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e96:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e9c:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002eae:	482c      	ldr	r0, [pc, #176]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002eb0:	f000 fb7c 	bl	80035ac <HAL_DMA_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8002eba:	f7ff fddb 	bl	8002a74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <HAL_UART_MspInit+0x240>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2026      	movs	r0, #38	; 0x26
 8002ed0:	f000 fb31 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ed4:	2026      	movs	r0, #38	; 0x26
 8002ed6:	f000 fb4a 	bl	800356e <HAL_NVIC_EnableIRQ>
}
 8002eda:	e031      	b.n	8002f40 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART6)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_UART_MspInit+0x248>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d12c      	bne.n	8002f40 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002ef0:	f043 0320 	orr.w	r3, r3, #32
 8002ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_UART_MspInit+0x22c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f30:	2308      	movs	r3, #8
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4805      	ldr	r0, [pc, #20]	; (8002f50 <HAL_UART_MspInit+0x230>)
 8002f3c:	f000 ff38 	bl	8003db0 <HAL_GPIO_Init>
}
 8002f40:	bf00      	nop
 8002f42:	3738      	adds	r7, #56	; 0x38
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40011000 	.word	0x40011000
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	20000c58 	.word	0x20000c58
 8002f58:	40026440 	.word	0x40026440
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	20000cb8 	.word	0x20000cb8
 8002f64:	40026088 	.word	0x40026088
 8002f68:	40011400 	.word	0x40011400

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <NMI_Handler+0x4>

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 f988 	bl	80032cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <DMA1_Stream5_IRQHandler+0x10>)
 8002fc6:	f000 fc89 	bl	80038dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000cb8 	.word	0x20000cb8

08002fd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <TIM4_IRQHandler+0x10>)
 8002fda:	f001 fdab 	bl	8004b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000b44 	.word	0x20000b44

08002fe8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <USART1_IRQHandler+0x10>)
 8002fee:	f002 fa79 	bl	80054e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000b8c 	.word	0x20000b8c

08002ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <USART2_IRQHandler+0x10>)
 8003002:	f002 fa6f 	bl	80054e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000bd0 	.word	0x20000bd0

08003010 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <DMA2_Stream2_IRQHandler+0x10>)
 8003016:	f000 fc61 	bl	80038dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000c58 	.word	0x20000c58

08003024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return 1;
 8003028:	2301      	movs	r3, #1
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_kill>:

int _kill(int pid, int sig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800303e:	f003 fb49 	bl	80066d4 <__errno>
 8003042:	4603      	mov	r3, r0
 8003044:	2216      	movs	r2, #22
 8003046:	601a      	str	r2, [r3, #0]
  return -1;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_exit>:

void _exit (int status)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ffe7 	bl	8003034 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003066:	e7fe      	b.n	8003066 <_exit+0x12>

08003068 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	e00a      	b.n	8003090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800307a:	f3af 8000 	nop.w
 800307e:	4601      	mov	r1, r0
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	60ba      	str	r2, [r7, #8]
 8003086:	b2ca      	uxtb	r2, r1
 8003088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	dbf0      	blt.n	800307a <_read+0x12>
  }

  return len;
 8003098:	687b      	ldr	r3, [r7, #4]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e009      	b.n	80030c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	60ba      	str	r2, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dbf1      	blt.n	80030b4 <_write+0x12>
  }
  return len;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_close>:

int _close(int file)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003102:	605a      	str	r2, [r3, #4]
  return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <_isatty>:

int _isatty(int file)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800314c:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <_sbrk+0x5c>)
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <_sbrk+0x60>)
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <_sbrk+0x64>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <_sbrk+0x64>)
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <_sbrk+0x68>)
 8003164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <_sbrk+0x64>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	429a      	cmp	r2, r3
 8003172:	d207      	bcs.n	8003184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003174:	f003 faae 	bl	80066d4 <__errno>
 8003178:	4603      	mov	r3, r0
 800317a:	220c      	movs	r2, #12
 800317c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	e009      	b.n	8003198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <_sbrk+0x64>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <_sbrk+0x64>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <_sbrk+0x64>)
 8003194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003196:	68fb      	ldr	r3, [r7, #12]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20020000 	.word	0x20020000
 80031a4:	00000400 	.word	0x00000400
 80031a8:	20000da0 	.word	0x20000da0
 80031ac:	20000db8 	.word	0x20000db8

080031b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <SystemInit+0x20>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	4a05      	ldr	r2, [pc, #20]	; (80031d0 <SystemInit+0x20>)
 80031bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800320c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d8:	480d      	ldr	r0, [pc, #52]	; (8003210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031da:	490e      	ldr	r1, [pc, #56]	; (8003214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031dc:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e0:	e002      	b.n	80031e8 <LoopCopyDataInit>

080031e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e6:	3304      	adds	r3, #4

080031e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ec:	d3f9      	bcc.n	80031e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031f0:	4c0b      	ldr	r4, [pc, #44]	; (8003220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f4:	e001      	b.n	80031fa <LoopFillZerobss>

080031f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f8:	3204      	adds	r2, #4

080031fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031fc:	d3fb      	bcc.n	80031f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031fe:	f7ff ffd7 	bl	80031b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003202:	f003 fa6d 	bl	80066e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003206:	f7fe fc9b 	bl	8001b40 <main>
  bx  lr    
 800320a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800320c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003214:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003218:	0800b86c 	.word	0x0800b86c
  ldr r2, =_sbss
 800321c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003220:	20000db8 	.word	0x20000db8

08003224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003224:	e7fe      	b.n	8003224 <ADC_IRQHandler>
	...

08003228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_Init+0x40>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <HAL_Init+0x40>)
 8003232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_Init+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <HAL_Init+0x40>)
 800323e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a07      	ldr	r2, [pc, #28]	; (8003268 <HAL_Init+0x40>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003250:	2003      	movs	r0, #3
 8003252:	f000 f965 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003256:	200f      	movs	r0, #15
 8003258:	f000 f808 	bl	800326c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800325c:	f7ff fd10 	bl	8002c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023c00 	.word	0x40023c00

0800326c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_InitTick+0x54>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_InitTick+0x58>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	4619      	mov	r1, r3
 800327e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003282:	fbb3 f3f1 	udiv	r3, r3, r1
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f981 	bl	8003592 <HAL_SYSTICK_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e00e      	b.n	80032b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b0f      	cmp	r3, #15
 800329e:	d80a      	bhi.n	80032b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a0:	2200      	movs	r2, #0
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	f000 f945 	bl	8003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ac:	4a06      	ldr	r2, [pc, #24]	; (80032c8 <HAL_InitTick+0x5c>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000000 	.word	0x20000000
 80032c4:	20000008 	.word	0x20000008
 80032c8:	20000004 	.word	0x20000004

080032cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_IncTick+0x20>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_IncTick+0x24>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <HAL_IncTick+0x24>)
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000008 	.word	0x20000008
 80032f0:	20000da4 	.word	0x20000da4

080032f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return uwTick;
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <HAL_GetTick+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000da4 	.word	0x20000da4

0800330c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003314:	f7ff ffee 	bl	80032f4 <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d005      	beq.n	8003332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_Delay+0x44>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003332:	bf00      	nop
 8003334:	f7ff ffde 	bl	80032f4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	429a      	cmp	r2, r3
 8003342:	d8f7      	bhi.n	8003334 <HAL_Delay+0x28>
  {
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000008 	.word	0x20000008

08003354 <__NVIC_SetPriorityGrouping>:
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800337c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60d3      	str	r3, [r2, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_GetPriorityGrouping>:
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	2b00      	cmp	r3, #0
 8003406:	db0a      	blt.n	800341e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	490c      	ldr	r1, [pc, #48]	; (8003440 <__NVIC_SetPriority+0x4c>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	440b      	add	r3, r1
 8003418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800341c:	e00a      	b.n	8003434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4908      	ldr	r1, [pc, #32]	; (8003444 <__NVIC_SetPriority+0x50>)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3b04      	subs	r3, #4
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	440b      	add	r3, r1
 8003432:	761a      	strb	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000e100 	.word	0xe000e100
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f1c3 0307 	rsb	r3, r3, #7
 8003462:	2b04      	cmp	r3, #4
 8003464:	bf28      	it	cs
 8003466:	2304      	movcs	r3, #4
 8003468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3304      	adds	r3, #4
 800346e:	2b06      	cmp	r3, #6
 8003470:	d902      	bls.n	8003478 <NVIC_EncodePriority+0x30>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3b03      	subs	r3, #3
 8003476:	e000      	b.n	800347a <NVIC_EncodePriority+0x32>
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	401a      	ands	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003490:	f04f 31ff 	mov.w	r1, #4294967295
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43d9      	mvns	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	4313      	orrs	r3, r2
         );
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034b4:	f3bf 8f4f 	dsb	sy
}
 80034b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <__NVIC_SystemReset+0x24>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80034c2:	4904      	ldr	r1, [pc, #16]	; (80034d4 <__NVIC_SystemReset+0x24>)
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <__NVIC_SystemReset+0x28>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80034ca:	f3bf 8f4f 	dsb	sy
}
 80034ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <__NVIC_SystemReset+0x20>
 80034d4:	e000ed00 	.word	0xe000ed00
 80034d8:	05fa0004 	.word	0x05fa0004

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7ff ff78 	bl	80033f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff13 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff28 	bl	800339c <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff78 	bl	8003448 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff47 	bl	80033f4 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff1b 	bl	80033b8 <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800358e:	f7ff ff8f 	bl	80034b0 <__NVIC_SystemReset>

08003592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff9e 	bl	80034dc <SysTick_Config>
 80035a0:	4603      	mov	r3, r0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035b8:	f7ff fe9c 	bl	80032f4 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e099      	b.n	80036fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e8:	e00f      	b.n	800360a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ea:	f7ff fe83 	bl	80032f4 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d908      	bls.n	800360a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e078      	b.n	80036fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e8      	bne.n	80035ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_DMA_Init+0x158>)
 8003624:	4013      	ands	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2b04      	cmp	r3, #4
 8003662:	d107      	bne.n	8003674 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	4313      	orrs	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0307 	bic.w	r3, r3, #7
 800368a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b04      	cmp	r3, #4
 800369c:	d117      	bne.n	80036ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fb01 	bl	8003cb8 <DMA_CheckFifoParam>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036ca:	2301      	movs	r3, #1
 80036cc:	e016      	b.n	80036fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fab8 	bl	8003c4c <DMA_CalcBaseAndBitshift>
 80036dc:	4603      	mov	r3, r0
 80036de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	223f      	movs	r2, #63	; 0x3f
 80036e6:	409a      	lsls	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	f010803f 	.word	0xf010803f

08003708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_DMA_Start_IT+0x26>
 800372a:	2302      	movs	r3, #2
 800372c:	e040      	b.n	80037b0 <HAL_DMA_Start_IT+0xa8>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d12f      	bne.n	80037a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fa4a 	bl	8003bf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	223f      	movs	r2, #63	; 0x3f
 8003762:	409a      	lsls	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0216 	orr.w	r2, r2, #22
 8003776:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e005      	b.n	80037ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
 80037ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037c6:	f7ff fd95 	bl	80032f4 <HAL_GetTick>
 80037ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d008      	beq.n	80037ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e052      	b.n	8003890 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0216 	bic.w	r2, r2, #22
 80037f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003808:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <HAL_DMA_Abort+0x62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0208 	bic.w	r2, r2, #8
 8003828:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800383a:	e013      	b.n	8003864 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800383c:	f7ff fd5a 	bl	80032f4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b05      	cmp	r3, #5
 8003848:	d90c      	bls.n	8003864 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2203      	movs	r2, #3
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e015      	b.n	8003890 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e4      	bne.n	800383c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	223f      	movs	r2, #63	; 0x3f
 8003878:	409a      	lsls	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d004      	beq.n	80038b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00c      	b.n	80038d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2205      	movs	r2, #5
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038e8:	4b8e      	ldr	r3, [pc, #568]	; (8003b24 <HAL_DMA_IRQHandler+0x248>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a8e      	ldr	r2, [pc, #568]	; (8003b28 <HAL_DMA_IRQHandler+0x24c>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0a9b      	lsrs	r3, r3, #10
 80038f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	2208      	movs	r2, #8
 8003908:	409a      	lsls	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01a      	beq.n	8003948 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0204 	bic.w	r2, r2, #4
 800392e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	2208      	movs	r2, #8
 8003936:	409a      	lsls	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394c:	2201      	movs	r2, #1
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d012      	beq.n	800397e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	2201      	movs	r2, #1
 800396c:	409a      	lsls	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	f043 0202 	orr.w	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	2204      	movs	r2, #4
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d012      	beq.n	80039b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	2204      	movs	r2, #4
 80039a2:	409a      	lsls	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f043 0204 	orr.w	r2, r3, #4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	2210      	movs	r2, #16
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d043      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d03c      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	2210      	movs	r2, #16
 80039d8:	409a      	lsls	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d108      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d024      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
 8003a0a:	e01f      	b.n	8003a4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01b      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
 8003a1c:	e016      	b.n	8003a4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0208 	bic.w	r2, r2, #8
 8003a3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	2220      	movs	r2, #32
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 808f 	beq.w	8003b7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8087 	beq.w	8003b7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2220      	movs	r2, #32
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d136      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0216 	bic.w	r2, r2, #22
 8003a94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_DMA_IRQHandler+0x1da>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0208 	bic.w	r2, r2, #8
 8003ac4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aca:	223f      	movs	r2, #63	; 0x3f
 8003acc:	409a      	lsls	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d07e      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
        }
        return;
 8003af2:	e079      	b.n	8003be8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01d      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d031      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
 8003b20:	e02c      	b.n	8003b7c <HAL_DMA_IRQHandler+0x2a0>
 8003b22:	bf00      	nop
 8003b24:	20000000 	.word	0x20000000
 8003b28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d023      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	4798      	blx	r3
 8003b3c:	e01e      	b.n	8003b7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0210 	bic.w	r2, r2, #16
 8003b5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d032      	beq.n	8003bea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d022      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2205      	movs	r2, #5
 8003b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d307      	bcc.n	8003bc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f2      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0x2cc>
 8003bc2:	e000      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
 8003be6:	e000      	b.n	8003bea <HAL_DMA_IRQHandler+0x30e>
        return;
 8003be8:	bf00      	nop
    }
  }
}
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d108      	bne.n	8003c30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c2e:	e007      	b.n	8003c40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	3b10      	subs	r3, #16
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c66:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d909      	bls.n	8003c8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	1d1a      	adds	r2, r3, #4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c8c:	e007      	b.n	8003c9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	aaaaaaab 	.word	0xaaaaaaab
 8003cb4:	0800b3b4 	.word	0x0800b3b4

08003cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11f      	bne.n	8003d12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d856      	bhi.n	8003d86 <DMA_CheckFifoParam+0xce>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <DMA_CheckFifoParam+0x28>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003d03 	.word	0x08003d03
 8003ce8:	08003cf1 	.word	0x08003cf1
 8003cec:	08003d87 	.word	0x08003d87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d046      	beq.n	8003d8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d00:	e043      	b.n	8003d8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d0a:	d140      	bne.n	8003d8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e03d      	b.n	8003d8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	d121      	bne.n	8003d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d837      	bhi.n	8003d92 <DMA_CheckFifoParam+0xda>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <DMA_CheckFifoParam+0x70>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d3f 	.word	0x08003d3f
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	08003d51 	.word	0x08003d51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e030      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d025      	beq.n	8003d96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4e:	e022      	b.n	8003d96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d58:	d11f      	bne.n	8003d9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d5e:	e01c      	b.n	8003d9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d903      	bls.n	8003d6e <DMA_CheckFifoParam+0xb6>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d6c:	e018      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      break;
 8003d72:	e015      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e00b      	b.n	8003d9e <DMA_CheckFifoParam+0xe6>
      break;
 8003d86:	bf00      	nop
 8003d88:	e00a      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e008      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e006      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop

08003db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e159      	b.n	8004080 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	f040 8148 	bne.w	800407a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d005      	beq.n	8003e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d130      	bne.n	8003e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 0201 	and.w	r2, r3, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d017      	beq.n	8003ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d123      	bne.n	8003ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	08da      	lsrs	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3208      	adds	r2, #8
 8003eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	220f      	movs	r2, #15
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	08da      	lsrs	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3208      	adds	r2, #8
 8003eee:	69b9      	ldr	r1, [r7, #24]
 8003ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0203 	and.w	r2, r3, #3
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80a2 	beq.w	800407a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b57      	ldr	r3, [pc, #348]	; (8004098 <HAL_GPIO_Init+0x2e8>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	4a56      	ldr	r2, [pc, #344]	; (8004098 <HAL_GPIO_Init+0x2e8>)
 8003f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f44:	6453      	str	r3, [r2, #68]	; 0x44
 8003f46:	4b54      	ldr	r3, [pc, #336]	; (8004098 <HAL_GPIO_Init+0x2e8>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f52:	4a52      	ldr	r2, [pc, #328]	; (800409c <HAL_GPIO_Init+0x2ec>)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	3302      	adds	r3, #2
 8003f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	220f      	movs	r2, #15
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a49      	ldr	r2, [pc, #292]	; (80040a0 <HAL_GPIO_Init+0x2f0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d019      	beq.n	8003fb2 <HAL_GPIO_Init+0x202>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a48      	ldr	r2, [pc, #288]	; (80040a4 <HAL_GPIO_Init+0x2f4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_GPIO_Init+0x1fe>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a47      	ldr	r2, [pc, #284]	; (80040a8 <HAL_GPIO_Init+0x2f8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00d      	beq.n	8003faa <HAL_GPIO_Init+0x1fa>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a46      	ldr	r2, [pc, #280]	; (80040ac <HAL_GPIO_Init+0x2fc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <HAL_GPIO_Init+0x1f6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a45      	ldr	r2, [pc, #276]	; (80040b0 <HAL_GPIO_Init+0x300>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_GPIO_Init+0x1f2>
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	e008      	b.n	8003fb4 <HAL_GPIO_Init+0x204>
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	e006      	b.n	8003fb4 <HAL_GPIO_Init+0x204>
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e004      	b.n	8003fb4 <HAL_GPIO_Init+0x204>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e002      	b.n	8003fb4 <HAL_GPIO_Init+0x204>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_GPIO_Init+0x204>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	f002 0203 	and.w	r2, r2, #3
 8003fba:	0092      	lsls	r2, r2, #2
 8003fbc:	4093      	lsls	r3, r2
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc4:	4935      	ldr	r1, [pc, #212]	; (800409c <HAL_GPIO_Init+0x2ec>)
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fd2:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ff6:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ffc:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004020:	4a24      	ldr	r2, [pc, #144]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004026:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800404a:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <HAL_GPIO_Init+0x304>)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004050:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004074:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3301      	adds	r3, #1
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b0f      	cmp	r3, #15
 8004084:	f67f aea2 	bls.w	8003dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800
 800409c:	40013800 	.word	0x40013800
 80040a0:	40020000 	.word	0x40020000
 80040a4:	40020400 	.word	0x40020400
 80040a8:	40020800 	.word	0x40020800
 80040ac:	40020c00 	.word	0x40020c00
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40013c00 	.word	0x40013c00

080040b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
 80040c4:	4613      	mov	r3, r2
 80040c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040c8:	787b      	ldrb	r3, [r7, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040d4:	e003      	b.n	80040de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	041a      	lsls	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	619a      	str	r2, [r3, #24]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040fc:	887a      	ldrh	r2, [r7, #2]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4013      	ands	r3, r2
 8004102:	041a      	lsls	r2, r3, #16
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	43d9      	mvns	r1, r3
 8004108:	887b      	ldrh	r3, [r7, #2]
 800410a:	400b      	ands	r3, r1
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	619a      	str	r2, [r3, #24]
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e267      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d075      	beq.n	800422a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800413e:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b04      	cmp	r3, #4
 8004148:	d00c      	beq.n	8004164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414a:	4b85      	ldr	r3, [pc, #532]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004152:	2b08      	cmp	r3, #8
 8004154:	d112      	bne.n	800417c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004156:	4b82      	ldr	r3, [pc, #520]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004162:	d10b      	bne.n	800417c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	4b7e      	ldr	r3, [pc, #504]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d05b      	beq.n	8004228 <HAL_RCC_OscConfig+0x108>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d157      	bne.n	8004228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e242      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d106      	bne.n	8004194 <HAL_RCC_OscConfig+0x74>
 8004186:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a75      	ldr	r2, [pc, #468]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e01d      	b.n	80041d0 <HAL_RCC_OscConfig+0xb0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x98>
 800419e:	4b70      	ldr	r3, [pc, #448]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6f      	ldr	r2, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b6d      	ldr	r3, [pc, #436]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6c      	ldr	r2, [pc, #432]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e00b      	b.n	80041d0 <HAL_RCC_OscConfig+0xb0>
 80041b8:	4b69      	ldr	r3, [pc, #420]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a68      	ldr	r2, [pc, #416]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4b66      	ldr	r3, [pc, #408]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a65      	ldr	r2, [pc, #404]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d013      	beq.n	8004200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7ff f88c 	bl	80032f4 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e0:	f7ff f888 	bl	80032f4 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e207      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	4b5b      	ldr	r3, [pc, #364]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0xc0>
 80041fe:	e014      	b.n	800422a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7ff f878 	bl	80032f4 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004208:	f7ff f874 	bl	80032f4 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1f3      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	4b51      	ldr	r3, [pc, #324]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0xe8>
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d063      	beq.n	80042fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004236:	4b4a      	ldr	r3, [pc, #296]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800424a:	2b08      	cmp	r3, #8
 800424c:	d11c      	bne.n	8004288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424e:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d116      	bne.n	8004288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RCC_OscConfig+0x152>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e1c7      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4937      	ldr	r1, [pc, #220]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004286:	e03a      	b.n	80042fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004290:	4b34      	ldr	r3, [pc, #208]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7ff f82d 	bl	80032f4 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429e:	f7ff f829 	bl	80032f4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e1a8      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b0:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042bc:	4b28      	ldr	r3, [pc, #160]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4925      	ldr	r1, [pc, #148]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]
 80042d0:	e015      	b.n	80042fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7ff f80c 	bl	80032f4 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e0:	f7ff f808 	bl	80032f4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e187      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d036      	beq.n	8004378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_RCC_OscConfig+0x248>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fe ffec 	bl	80032f4 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004320:	f7fe ffe8 	bl	80032f4 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e167      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_OscConfig+0x240>)
 8004334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x200>
 800433e:	e01b      	b.n	8004378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_RCC_OscConfig+0x248>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fe ffd5 	bl	80032f4 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	e00e      	b.n	800436c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434e:	f7fe ffd1 	bl	80032f4 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d907      	bls.n	800436c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e150      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
 8004360:	40023800 	.word	0x40023800
 8004364:	42470000 	.word	0x42470000
 8004368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	4b88      	ldr	r3, [pc, #544]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ea      	bne.n	800434e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8097 	beq.w	80044b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438a:	4b81      	ldr	r3, [pc, #516]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	4b7d      	ldr	r3, [pc, #500]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a7c      	ldr	r2, [pc, #496]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b7a      	ldr	r3, [pc, #488]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b77      	ldr	r3, [pc, #476]	; (8004594 <HAL_RCC_OscConfig+0x474>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b74      	ldr	r3, [pc, #464]	; (8004594 <HAL_RCC_OscConfig+0x474>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a73      	ldr	r2, [pc, #460]	; (8004594 <HAL_RCC_OscConfig+0x474>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fe ff91 	bl	80032f4 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fe ff8d 	bl	80032f4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e10c      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	4b6a      	ldr	r3, [pc, #424]	; (8004594 <HAL_RCC_OscConfig+0x474>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x2ea>
 80043fc:	4b64      	ldr	r3, [pc, #400]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a63      	ldr	r2, [pc, #396]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	e01c      	b.n	8004444 <HAL_RCC_OscConfig+0x324>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b05      	cmp	r3, #5
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x30c>
 8004412:	4b5f      	ldr	r3, [pc, #380]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a5e      	ldr	r2, [pc, #376]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	6713      	str	r3, [r2, #112]	; 0x70
 800441e:	4b5c      	ldr	r3, [pc, #368]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	4a5b      	ldr	r2, [pc, #364]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	; 0x70
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0x324>
 800442c:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4a57      	ldr	r2, [pc, #348]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
 8004438:	4b55      	ldr	r3, [pc, #340]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a54      	ldr	r2, [pc, #336]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800443e:	f023 0304 	bic.w	r3, r3, #4
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fe ff52 	bl	80032f4 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fe ff4e 	bl	80032f4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0cb      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4b49      	ldr	r3, [pc, #292]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ee      	beq.n	8004454 <HAL_RCC_OscConfig+0x334>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004478:	f7fe ff3c 	bl	80032f4 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fe ff38 	bl	80032f4 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0b5      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004496:	4b3e      	ldr	r3, [pc, #248]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ee      	bne.n	8004480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80044ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a1 	beq.w	8004600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044be:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d05c      	beq.n	8004584 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d141      	bne.n	8004556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_RCC_OscConfig+0x478>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fe ff0c 	bl	80032f4 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fe ff08 	bl	80032f4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e087      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	4b27      	ldr	r3, [pc, #156]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	019b      	lsls	r3, r3, #6
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	3b01      	subs	r3, #1
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	491b      	ldr	r1, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x478>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fe fee1 	bl	80032f4 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004536:	f7fe fedd 	bl	80032f4 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e05c      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x416>
 8004554:	e054      	b.n	8004600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCC_OscConfig+0x478>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fe feca 	bl	80032f4 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe fec6 	bl	80032f4 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e045      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_RCC_OscConfig+0x470>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x444>
 8004582:	e03d      	b.n	8004600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d107      	bne.n	800459c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e038      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
 8004590:	40023800 	.word	0x40023800
 8004594:	40007000 	.word	0x40007000
 8004598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x4ec>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d028      	beq.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d121      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d11a      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d111      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	3b01      	subs	r3, #1
 80045e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800

08004610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0cc      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4b68      	ldr	r3, [pc, #416]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d90c      	bls.n	800464c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b65      	ldr	r3, [pc, #404]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0b8      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004664:	4b59      	ldr	r3, [pc, #356]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800466e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800467c:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a52      	ldr	r2, [pc, #328]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b50      	ldr	r3, [pc, #320]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	494d      	ldr	r1, [pc, #308]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d044      	beq.n	8004730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	4b47      	ldr	r3, [pc, #284]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d119      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e067      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b37      	ldr	r3, [pc, #220]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4934      	ldr	r1, [pc, #208]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004700:	f7fe fdf8 	bl	80032f4 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fe fdf4 	bl	80032f4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e04f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 020c 	and.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	429a      	cmp	r2, r3
 800472e:	d1eb      	bne.n	8004708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d20c      	bcs.n	8004758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e032      	b.n	80047be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4916      	ldr	r1, [pc, #88]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004782:	4b12      	ldr	r3, [pc, #72]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	490e      	ldr	r1, [pc, #56]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004796:	f000 f821 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490a      	ldr	r1, [pc, #40]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fd58 	bl	800326c <HAL_InitTick>

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00
 80047cc:	40023800 	.word	0x40023800
 80047d0:	0800b39c 	.word	0x0800b39c
 80047d4:	20000000 	.word	0x20000000
 80047d8:	20000004 	.word	0x20000004

080047dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e0:	b090      	sub	sp, #64	; 0x40
 80047e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	637b      	str	r3, [r7, #52]	; 0x34
 80047e8:	2300      	movs	r3, #0
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ec:	2300      	movs	r3, #0
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f4:	4b59      	ldr	r3, [pc, #356]	; (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d00d      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x40>
 8004800:	2b08      	cmp	r3, #8
 8004802:	f200 80a1 	bhi.w	8004948 <HAL_RCC_GetSysClockFreq+0x16c>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x34>
 800480a:	2b04      	cmp	r3, #4
 800480c:	d003      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x3a>
 800480e:	e09b      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_GetSysClockFreq+0x184>)
 8004812:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004814:	e09b      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004816:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_GetSysClockFreq+0x188>)
 8004818:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800481a:	e098      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800481c:	4b4f      	ldr	r3, [pc, #316]	; (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004826:	4b4d      	ldr	r3, [pc, #308]	; (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d028      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	4b4a      	ldr	r3, [pc, #296]	; (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	2200      	movs	r2, #0
 800483a:	623b      	str	r3, [r7, #32]
 800483c:	627a      	str	r2, [r7, #36]	; 0x24
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004844:	2100      	movs	r1, #0
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_RCC_GetSysClockFreq+0x188>)
 8004848:	fb03 f201 	mul.w	r2, r3, r1
 800484c:	2300      	movs	r3, #0
 800484e:	fb00 f303 	mul.w	r3, r0, r3
 8004852:	4413      	add	r3, r2
 8004854:	4a43      	ldr	r2, [pc, #268]	; (8004964 <HAL_RCC_GetSysClockFreq+0x188>)
 8004856:	fba0 1202 	umull	r1, r2, r0, r2
 800485a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800485c:	460a      	mov	r2, r1
 800485e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	4413      	add	r3, r2
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004868:	2200      	movs	r2, #0
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	61fa      	str	r2, [r7, #28]
 800486e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004872:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004876:	f7fc f9bf 	bl	8000bf8 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4613      	mov	r3, r2
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004882:	e053      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004884:	4b35      	ldr	r3, [pc, #212]	; (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	2200      	movs	r2, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	617a      	str	r2, [r7, #20]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004896:	f04f 0b00 	mov.w	fp, #0
 800489a:	4652      	mov	r2, sl
 800489c:	465b      	mov	r3, fp
 800489e:	f04f 0000 	mov.w	r0, #0
 80048a2:	f04f 0100 	mov.w	r1, #0
 80048a6:	0159      	lsls	r1, r3, #5
 80048a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ac:	0150      	lsls	r0, r2, #5
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	ebb2 080a 	subs.w	r8, r2, sl
 80048b6:	eb63 090b 	sbc.w	r9, r3, fp
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048ce:	ebb2 0408 	subs.w	r4, r2, r8
 80048d2:	eb63 0509 	sbc.w	r5, r3, r9
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	00eb      	lsls	r3, r5, #3
 80048e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048e4:	00e2      	lsls	r2, r4, #3
 80048e6:	4614      	mov	r4, r2
 80048e8:	461d      	mov	r5, r3
 80048ea:	eb14 030a 	adds.w	r3, r4, sl
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	eb45 030b 	adc.w	r3, r5, fp
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004902:	4629      	mov	r1, r5
 8004904:	028b      	lsls	r3, r1, #10
 8004906:	4621      	mov	r1, r4
 8004908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800490c:	4621      	mov	r1, r4
 800490e:	028a      	lsls	r2, r1, #10
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004916:	2200      	movs	r2, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	60fa      	str	r2, [r7, #12]
 800491c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004920:	f7fc f96a 	bl	8000bf8 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4613      	mov	r3, r2
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_GetSysClockFreq+0x180>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	3301      	adds	r3, #1
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800493c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004946:	e002      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetSysClockFreq+0x184>)
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800494c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004950:	4618      	mov	r0, r3
 8004952:	3740      	adds	r7, #64	; 0x40
 8004954:	46bd      	mov	sp, r7
 8004956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	00f42400 	.word	0x00f42400
 8004964:	017d7840 	.word	0x017d7840

08004968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <HAL_RCC_GetHCLKFreq+0x14>)
 800496e:	681b      	ldr	r3, [r3, #0]
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000000 	.word	0x20000000

08004980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004984:	f7ff fff0 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	0a9b      	lsrs	r3, r3, #10
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40023800 	.word	0x40023800
 80049a4:	0800b3ac 	.word	0x0800b3ac

080049a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049ac:	f7ff ffdc 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0b5b      	lsrs	r3, r3, #13
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40023800 	.word	0x40023800
 80049cc:	0800b3ac 	.word	0x0800b3ac

080049d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e041      	b.n	8004a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fe f96a 	bl	8002cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f000 fa88 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d001      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e044      	b.n	8004b12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_TIM_Base_Start_IT+0xb0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d018      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x6c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab2:	d013      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x6c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <HAL_TIM_Base_Start_IT+0xb4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x6c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_TIM_Base_Start_IT+0xb8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x6c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0x6c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a16      	ldr	r2, [pc, #88]	; (8004b30 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d111      	bne.n	8004b00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b06      	cmp	r3, #6
 8004aec:	d010      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	e007      	b.n	8004b10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40010000 	.word	0x40010000
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40014000 	.word	0x40014000

08004b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0202 	mvn.w	r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9b5 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9a7 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9b8 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0204 	mvn.w	r2, #4
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f98b 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f97d 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f98e 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0208 	mvn.w	r2, #8
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f961 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f953 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f964 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0210 	mvn.w	r2, #16
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f937 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f929 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f93a 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fd fcdc 	bl	8002670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fab2 	bl	8005248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8ff 	bl	8004f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0220 	mvn.w	r2, #32
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa7c 	bl	8005234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIM_ConfigClockSource+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e0b4      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x186>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d98:	d03e      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0xd4>
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d9e:	f200 8087 	bhi.w	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_TIM_ConfigClockSource+0x172>
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dae:	d87f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b70      	cmp	r3, #112	; 0x70
 8004db2:	d01a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0xa6>
 8004db4:	2b70      	cmp	r3, #112	; 0x70
 8004db6:	d87b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b60      	cmp	r3, #96	; 0x60
 8004dba:	d050      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x11a>
 8004dbc:	2b60      	cmp	r3, #96	; 0x60
 8004dbe:	d877      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b50      	cmp	r3, #80	; 0x50
 8004dc2:	d03c      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xfa>
 8004dc4:	2b50      	cmp	r3, #80	; 0x50
 8004dc6:	d873      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d058      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x13a>
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d86f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b30      	cmp	r3, #48	; 0x30
 8004dd2:	d064      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004dd4:	2b30      	cmp	r3, #48	; 0x30
 8004dd6:	d86b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d060      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d867      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d05c      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d05a      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004de8:	e062      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6899      	ldr	r1, [r3, #8]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f000 f98d 	bl	8005118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	609a      	str	r2, [r3, #8]
      break;
 8004e16:	e04f      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f000 f976 	bl	8005118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e3a:	609a      	str	r2, [r3, #8]
      break;
 8004e3c:	e03c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 f8ea 	bl	8005024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2150      	movs	r1, #80	; 0x50
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f943 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e02c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 f909 	bl	8005082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2160      	movs	r1, #96	; 0x60
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f933 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e01c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 f8ca 	bl	8005024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2140      	movs	r1, #64	; 0x40
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f923 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e00c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f000 f91a 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004eae:	e003      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a34      	ldr	r2, [pc, #208]	; (8005008 <TIM_Base_SetConfig+0xe4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00f      	beq.n	8004f5c <TIM_Base_SetConfig+0x38>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d00b      	beq.n	8004f5c <TIM_Base_SetConfig+0x38>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a31      	ldr	r2, [pc, #196]	; (800500c <TIM_Base_SetConfig+0xe8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <TIM_Base_SetConfig+0x38>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a30      	ldr	r2, [pc, #192]	; (8005010 <TIM_Base_SetConfig+0xec>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_Base_SetConfig+0x38>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a2f      	ldr	r2, [pc, #188]	; (8005014 <TIM_Base_SetConfig+0xf0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d108      	bne.n	8004f6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a25      	ldr	r2, [pc, #148]	; (8005008 <TIM_Base_SetConfig+0xe4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01b      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7c:	d017      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a22      	ldr	r2, [pc, #136]	; (800500c <TIM_Base_SetConfig+0xe8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a21      	ldr	r2, [pc, #132]	; (8005010 <TIM_Base_SetConfig+0xec>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00f      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <TIM_Base_SetConfig+0xf0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <TIM_Base_SetConfig+0xf4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1e      	ldr	r2, [pc, #120]	; (800501c <TIM_Base_SetConfig+0xf8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <TIM_Base_SetConfig+0xfc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a08      	ldr	r2, [pc, #32]	; (8005008 <TIM_Base_SetConfig+0xe4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d103      	bne.n	8004ff4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 030a 	bic.w	r3, r3, #10
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	f043 0307 	orr.w	r3, r3, #7
 8005104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e050      	b.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d018      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d013      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a16      	ldr	r2, [pc, #88]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10c      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40014000 	.word	0x40014000

08005234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e03f      	b.n	80052ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fd fd4c 	bl	8002d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800529e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 ff9b 	bl	80061dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b08a      	sub	sp, #40	; 0x28
 80052fa:	af02      	add	r7, sp, #8
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b20      	cmp	r3, #32
 8005314:	d17c      	bne.n	8005410 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_UART_Transmit+0x2c>
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e075      	b.n	8005412 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_UART_Transmit+0x3e>
 8005330:	2302      	movs	r3, #2
 8005332:	e06e      	b.n	8005412 <HAL_UART_Transmit+0x11c>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2221      	movs	r2, #33	; 0x21
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800534a:	f7fd ffd3 	bl	80032f4 <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005364:	d108      	bne.n	8005378 <HAL_UART_Transmit+0x82>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e003      	b.n	8005380 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005388:	e02a      	b.n	80053e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2200      	movs	r2, #0
 8005392:	2180      	movs	r1, #128	; 0x80
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fc53 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e036      	b.n	8005412 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	3302      	adds	r3, #2
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e007      	b.n	80053d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	3301      	adds	r3, #1
 80053d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1cf      	bne.n	800538a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2140      	movs	r1, #64	; 0x40
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fc23 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e006      	b.n	8005412 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b08c      	sub	sp, #48	; 0x30
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b20      	cmp	r3, #32
 8005432:	d152      	bne.n	80054da <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e04b      	b.n	80054dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800544e:	2302      	movs	r3, #2
 8005450:	e044      	b.n	80054dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	461a      	mov	r2, r3
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fc58 	bl	8005d1c <UART_Start_Receive_DMA>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005476:	2b00      	cmp	r3, #0
 8005478:	d12c      	bne.n	80054d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	2b01      	cmp	r3, #1
 8005480:	d125      	bne.n	80054ce <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	617b      	str	r3, [r7, #20]
   return(result);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f043 0310 	orr.w	r3, r3, #16
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054b8:	627a      	str	r2, [r7, #36]	; 0x24
 80054ba:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6a39      	ldr	r1, [r7, #32]
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80054cc:	e002      	b.n	80054d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80054d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054d8:	e000      	b.n	80054dc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
  }
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3730      	adds	r7, #48	; 0x30
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b0ba      	sub	sp, #232	; 0xe8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800550a:	2300      	movs	r3, #0
 800550c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <HAL_UART_IRQHandler+0x66>
 8005536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fd8f 	bl	8006066 <UART_Receive_IT>
      return;
 8005548:	e256      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800554a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80de 	beq.w	8005710 <HAL_UART_IRQHandler+0x22c>
 8005554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005564:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 80d1 	beq.w	8005710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_UART_IRQHandler+0xae>
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f043 0201 	orr.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_UART_IRQHandler+0xd2>
 800559e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f043 0202 	orr.w	r2, r3, #2
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <HAL_UART_IRQHandler+0xf6>
 80055c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f043 0204 	orr.w	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d011      	beq.n	800560a <HAL_UART_IRQHandler+0x126>
 80055e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d105      	bne.n	80055fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f043 0208 	orr.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 81ed 	beq.w	80059ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_UART_IRQHandler+0x14e>
 8005620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fd1a 	bl	8006066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <HAL_UART_IRQHandler+0x17a>
 8005656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800565a:	2b00      	cmp	r3, #0
 800565c:	d04f      	beq.n	80056fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fc22 	bl	8005ea8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d141      	bne.n	80056f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800568c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800569e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1d9      	bne.n	8005672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d013      	beq.n	80056ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	4a7d      	ldr	r2, [pc, #500]	; (80058c0 <HAL_UART_IRQHandler+0x3dc>)
 80056cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe f8e0 	bl	8003898 <HAL_DMA_Abort_IT>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d016      	beq.n	800570c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e00e      	b.n	800570c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f9a4 	bl	8005a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e00a      	b.n	800570c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9a0 	bl	8005a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	e006      	b.n	800570c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f99c 	bl	8005a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800570a:	e170      	b.n	80059ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	bf00      	nop
    return;
 800570e:	e16e      	b.n	80059ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	2b01      	cmp	r3, #1
 8005716:	f040 814a 	bne.w	80059ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800571a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8143 	beq.w	80059ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 813c 	beq.w	80059ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	f040 80b4 	bne.w	80058c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8140 	beq.w	80059f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800577a:	429a      	cmp	r2, r3
 800577c:	f080 8139 	bcs.w	80059f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005786:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005792:	f000 8088 	beq.w	80058a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1d9      	bne.n	8005796 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800580a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800580e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e1      	bne.n	80057e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800582e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3314      	adds	r3, #20
 800583e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005842:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e3      	bne.n	800581e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005876:	f023 0310 	bic.w	r3, r3, #16
 800587a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005888:	65ba      	str	r2, [r7, #88]	; 0x58
 800588a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800588e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e3      	bne.n	8005864 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fd ff89 	bl	80037b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc fe3e 	bl	8002538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058bc:	e099      	b.n	80059f2 <HAL_UART_IRQHandler+0x50e>
 80058be:	bf00      	nop
 80058c0:	08005f6f 	.word	0x08005f6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 808b 	beq.w	80059f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8086 	beq.w	80059f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800590e:	647a      	str	r2, [r7, #68]	; 0x44
 8005910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e3      	bne.n	80058ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3314      	adds	r3, #20
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	623b      	str	r3, [r7, #32]
   return(result);
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3314      	adds	r3, #20
 8005942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005946:	633a      	str	r2, [r7, #48]	; 0x30
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800594c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e3      	bne.n	8005922 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	60fb      	str	r3, [r7, #12]
   return(result);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0310 	bic.w	r3, r3, #16
 800597e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800598c:	61fa      	str	r2, [r7, #28]
 800598e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	69b9      	ldr	r1, [r7, #24]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	617b      	str	r3, [r7, #20]
   return(result);
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e3      	bne.n	8005968 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fc fdc6 	bl	8002538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ac:	e023      	b.n	80059f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_UART_IRQHandler+0x4ea>
 80059ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fae5 	bl	8005f96 <UART_Transmit_IT>
    return;
 80059cc:	e014      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00e      	beq.n	80059f8 <HAL_UART_IRQHandler+0x514>
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fb25 	bl	8006036 <UART_EndTransmit_IT>
    return;
 80059ec:	e004      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
    return;
 80059ee:	bf00      	nop
 80059f0:	e002      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
      return;
 80059f2:	bf00      	nop
 80059f4:	e000      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
      return;
 80059f6:	bf00      	nop
  }
}
 80059f8:	37e8      	adds	r7, #232	; 0xe8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop

08005a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b09c      	sub	sp, #112	; 0x70
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d172      	bne.n	8005b52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	2200      	movs	r2, #0
 8005a70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a92:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	667b      	str	r3, [r7, #100]	; 0x64
 8005abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3314      	adds	r3, #20
 8005ac4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ac6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af0:	663b      	str	r3, [r7, #96]	; 0x60
 8005af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3314      	adds	r3, #20
 8005af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005afa:	633a      	str	r2, [r7, #48]	; 0x30
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e5      	bne.n	8005ada <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d119      	bne.n	8005b52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f023 0310 	bic.w	r3, r3, #16
 8005b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b3e:	61fa      	str	r2, [r7, #28]
 8005b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	69b9      	ldr	r1, [r7, #24]
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e5      	bne.n	8005b1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d106      	bne.n	8005b68 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b62:	f7fc fce9 	bl	8002538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b66:	e002      	b.n	8005b6e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005b68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b6a:	f7ff ff53 	bl	8005a14 <HAL_UART_RxCpltCallback>
}
 8005b6e:	bf00      	nop
 8005b70:	3770      	adds	r7, #112	; 0x70
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d108      	bne.n	8005b9e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4619      	mov	r1, r3
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7fc fcce 	bl	8002538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b9c:	e002      	b.n	8005ba4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7ff ff42 	bl	8005a28 <HAL_UART_RxHalfCpltCallback>
}
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc8:	2b80      	cmp	r3, #128	; 0x80
 8005bca:	bf0c      	ite	eq
 8005bcc:	2301      	moveq	r3, #1
 8005bce:	2300      	movne	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b21      	cmp	r3, #33	; 0x21
 8005bde:	d108      	bne.n	8005bf2 <UART_DMAError+0x46>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2200      	movs	r2, #0
 8005bea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005bec:	68b8      	ldr	r0, [r7, #8]
 8005bee:	f000 f933 	bl	8005e58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b22      	cmp	r3, #34	; 0x22
 8005c12:	d108      	bne.n	8005c26 <UART_DMAError+0x7a>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c20:	68b8      	ldr	r0, [r7, #8]
 8005c22:	f000 f941 	bl	8005ea8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f043 0210 	orr.w	r2, r3, #16
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c32:	68b8      	ldr	r0, [r7, #8]
 8005c34:	f7ff ff02 	bl	8005a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b090      	sub	sp, #64	; 0x40
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c50:	e050      	b.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d04c      	beq.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c60:	f7fd fb48 	bl	80032f4 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d241      	bcs.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c90:	637a      	str	r2, [r7, #52]	; 0x34
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e5      	bne.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cc4:	623a      	str	r2, [r7, #32]
 8005cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	69f9      	ldr	r1, [r7, #28]
 8005cca:	6a3a      	ldr	r2, [r7, #32]
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e5      	bne.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e00f      	b.n	8005d14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d09f      	beq.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3740      	adds	r7, #64	; 0x40
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b098      	sub	sp, #96	; 0x60
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2222      	movs	r2, #34	; 0x22
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <UART_Start_Receive_DMA+0x130>)
 8005d4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <UART_Start_Receive_DMA+0x134>)
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	4a3e      	ldr	r2, [pc, #248]	; (8005e54 <UART_Start_Receive_DMA+0x138>)
 8005d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	2200      	movs	r2, #0
 8005d62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005d64:	f107 0308 	add.w	r3, r7, #8
 8005d68:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	f7fd fcc4 	bl	8003708 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d019      	beq.n	8005dda <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	330c      	adds	r3, #12
 8005dac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e5      	bne.n	8005da6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3314      	adds	r3, #20
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	657b      	str	r3, [r7, #84]	; 0x54
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dfa:	63ba      	str	r2, [r7, #56]	; 0x38
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e5      	bne.n	8005dda <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3314      	adds	r3, #20
 8005e14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e24:	653b      	str	r3, [r7, #80]	; 0x50
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3314      	adds	r3, #20
 8005e2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6a39      	ldr	r1, [r7, #32]
 8005e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e5      	bne.n	8005e0e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3760      	adds	r7, #96	; 0x60
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	08005a51 	.word	0x08005a51
 8005e50:	08005b77 	.word	0x08005b77
 8005e54:	08005bad 	.word	0x08005bad

08005e58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	61ba      	str	r2, [r7, #24]
 8005e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6979      	ldr	r1, [r7, #20]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005e9c:	bf00      	nop
 8005e9e:	3724      	adds	r7, #36	; 0x24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b095      	sub	sp, #84	; 0x54
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ed0:	643a      	str	r2, [r7, #64]	; 0x40
 8005ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3314      	adds	r3, #20
 8005f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e5      	bne.n	8005ee4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d119      	bne.n	8005f54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f023 0310 	bic.w	r3, r3, #16
 8005f36:	647b      	str	r3, [r7, #68]	; 0x44
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f40:	61ba      	str	r2, [r7, #24]
 8005f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6979      	ldr	r1, [r7, #20]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f62:	bf00      	nop
 8005f64:	3754      	adds	r7, #84	; 0x54
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff fd57 	bl	8005a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b21      	cmp	r3, #33	; 0x21
 8005fa8:	d13e      	bne.n	8006028 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb2:	d114      	bne.n	8005fde <UART_Transmit_IT+0x48>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d110      	bne.n	8005fde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	1c9a      	adds	r2, r3, #2
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	621a      	str	r2, [r3, #32]
 8005fdc:	e008      	b.n	8005ff0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6211      	str	r1, [r2, #32]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10f      	bne.n	8006024 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006012:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006022:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e000      	b.n	800602a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006028:	2302      	movs	r3, #2
  }
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fcd2 	bl	8005a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b08c      	sub	sp, #48	; 0x30
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b22      	cmp	r3, #34	; 0x22
 8006078:	f040 80ab 	bne.w	80061d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006084:	d117      	bne.n	80060b6 <UART_Receive_IT+0x50>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d113      	bne.n	80060b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ae:	1c9a      	adds	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28
 80060b4:	e026      	b.n	8006104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c8:	d007      	beq.n	80060da <UART_Receive_IT+0x74>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <UART_Receive_IT+0x82>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e008      	b.n	80060fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4619      	mov	r1, r3
 8006112:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006114:	2b00      	cmp	r3, #0
 8006116:	d15a      	bne.n	80061ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0220 	bic.w	r2, r2, #32
 8006126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	2b01      	cmp	r3, #1
 8006156:	d135      	bne.n	80061c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	330c      	adds	r3, #12
 8006164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	613b      	str	r3, [r7, #16]
   return(result);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f023 0310 	bic.w	r3, r3, #16
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	330c      	adds	r3, #12
 800617c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617e:	623a      	str	r2, [r7, #32]
 8006180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	69f9      	ldr	r1, [r7, #28]
 8006184:	6a3a      	ldr	r2, [r7, #32]
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	61bb      	str	r3, [r7, #24]
   return(result);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e5      	bne.n	800615e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b10      	cmp	r3, #16
 800619e:	d10a      	bne.n	80061b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7fc f9bb 	bl	8002538 <HAL_UARTEx_RxEventCallback>
 80061c2:	e002      	b.n	80061ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fc25 	bl	8005a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e002      	b.n	80061d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e000      	b.n	80061d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80061d2:	2302      	movs	r3, #2
  }
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3730      	adds	r7, #48	; 0x30
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061e0:	b0c0      	sub	sp, #256	; 0x100
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	68d9      	ldr	r1, [r3, #12]
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	ea40 0301 	orr.w	r3, r0, r1
 8006204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	431a      	orrs	r2, r3
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	431a      	orrs	r2, r3
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006234:	f021 010c 	bic.w	r1, r1, #12
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006242:	430b      	orrs	r3, r1
 8006244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	6999      	ldr	r1, [r3, #24]
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	ea40 0301 	orr.w	r3, r0, r1
 8006262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b8f      	ldr	r3, [pc, #572]	; (80064a8 <UART_SetConfig+0x2cc>)
 800626c:	429a      	cmp	r2, r3
 800626e:	d005      	beq.n	800627c <UART_SetConfig+0xa0>
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	4b8d      	ldr	r3, [pc, #564]	; (80064ac <UART_SetConfig+0x2d0>)
 8006278:	429a      	cmp	r2, r3
 800627a:	d104      	bne.n	8006286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800627c:	f7fe fb94 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 8006280:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006284:	e003      	b.n	800628e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006286:	f7fe fb7b 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 800628a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006298:	f040 810c 	bne.w	80064b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800629c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062ae:	4622      	mov	r2, r4
 80062b0:	462b      	mov	r3, r5
 80062b2:	1891      	adds	r1, r2, r2
 80062b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80062b6:	415b      	adcs	r3, r3
 80062b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062be:	4621      	mov	r1, r4
 80062c0:	eb12 0801 	adds.w	r8, r2, r1
 80062c4:	4629      	mov	r1, r5
 80062c6:	eb43 0901 	adc.w	r9, r3, r1
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	f04f 0300 	mov.w	r3, #0
 80062d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062de:	4690      	mov	r8, r2
 80062e0:	4699      	mov	r9, r3
 80062e2:	4623      	mov	r3, r4
 80062e4:	eb18 0303 	adds.w	r3, r8, r3
 80062e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062ec:	462b      	mov	r3, r5
 80062ee:	eb49 0303 	adc.w	r3, r9, r3
 80062f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006302:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800630a:	460b      	mov	r3, r1
 800630c:	18db      	adds	r3, r3, r3
 800630e:	653b      	str	r3, [r7, #80]	; 0x50
 8006310:	4613      	mov	r3, r2
 8006312:	eb42 0303 	adc.w	r3, r2, r3
 8006316:	657b      	str	r3, [r7, #84]	; 0x54
 8006318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800631c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006320:	f7fa fc6a 	bl	8000bf8 <__aeabi_uldivmod>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4b61      	ldr	r3, [pc, #388]	; (80064b0 <UART_SetConfig+0x2d4>)
 800632a:	fba3 2302 	umull	r2, r3, r3, r2
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	011c      	lsls	r4, r3, #4
 8006332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006336:	2200      	movs	r2, #0
 8006338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800633c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006344:	4642      	mov	r2, r8
 8006346:	464b      	mov	r3, r9
 8006348:	1891      	adds	r1, r2, r2
 800634a:	64b9      	str	r1, [r7, #72]	; 0x48
 800634c:	415b      	adcs	r3, r3
 800634e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006354:	4641      	mov	r1, r8
 8006356:	eb12 0a01 	adds.w	sl, r2, r1
 800635a:	4649      	mov	r1, r9
 800635c:	eb43 0b01 	adc.w	fp, r3, r1
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800636c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006374:	4692      	mov	sl, r2
 8006376:	469b      	mov	fp, r3
 8006378:	4643      	mov	r3, r8
 800637a:	eb1a 0303 	adds.w	r3, sl, r3
 800637e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006382:	464b      	mov	r3, r9
 8006384:	eb4b 0303 	adc.w	r3, fp, r3
 8006388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006398:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800639c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063a0:	460b      	mov	r3, r1
 80063a2:	18db      	adds	r3, r3, r3
 80063a4:	643b      	str	r3, [r7, #64]	; 0x40
 80063a6:	4613      	mov	r3, r2
 80063a8:	eb42 0303 	adc.w	r3, r2, r3
 80063ac:	647b      	str	r3, [r7, #68]	; 0x44
 80063ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063b6:	f7fa fc1f 	bl	8000bf8 <__aeabi_uldivmod>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4611      	mov	r1, r2
 80063c0:	4b3b      	ldr	r3, [pc, #236]	; (80064b0 <UART_SetConfig+0x2d4>)
 80063c2:	fba3 2301 	umull	r2, r3, r3, r1
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	2264      	movs	r2, #100	; 0x64
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
 80063ce:	1acb      	subs	r3, r1, r3
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063d6:	4b36      	ldr	r3, [pc, #216]	; (80064b0 <UART_SetConfig+0x2d4>)
 80063d8:	fba3 2302 	umull	r2, r3, r3, r2
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063e4:	441c      	add	r4, r3
 80063e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	1891      	adds	r1, r2, r2
 80063fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006400:	415b      	adcs	r3, r3
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006408:	4641      	mov	r1, r8
 800640a:	1851      	adds	r1, r2, r1
 800640c:	6339      	str	r1, [r7, #48]	; 0x30
 800640e:	4649      	mov	r1, r9
 8006410:	414b      	adcs	r3, r1
 8006412:	637b      	str	r3, [r7, #52]	; 0x34
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006420:	4659      	mov	r1, fp
 8006422:	00cb      	lsls	r3, r1, #3
 8006424:	4651      	mov	r1, sl
 8006426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642a:	4651      	mov	r1, sl
 800642c:	00ca      	lsls	r2, r1, #3
 800642e:	4610      	mov	r0, r2
 8006430:	4619      	mov	r1, r3
 8006432:	4603      	mov	r3, r0
 8006434:	4642      	mov	r2, r8
 8006436:	189b      	adds	r3, r3, r2
 8006438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800643c:	464b      	mov	r3, r9
 800643e:	460a      	mov	r2, r1
 8006440:	eb42 0303 	adc.w	r3, r2, r3
 8006444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006454:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800645c:	460b      	mov	r3, r1
 800645e:	18db      	adds	r3, r3, r3
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
 8006462:	4613      	mov	r3, r2
 8006464:	eb42 0303 	adc.w	r3, r2, r3
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800646e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006472:	f7fa fbc1 	bl	8000bf8 <__aeabi_uldivmod>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <UART_SetConfig+0x2d4>)
 800647c:	fba3 1302 	umull	r1, r3, r3, r2
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	2164      	movs	r1, #100	; 0x64
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	3332      	adds	r3, #50	; 0x32
 800648e:	4a08      	ldr	r2, [pc, #32]	; (80064b0 <UART_SetConfig+0x2d4>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	f003 0207 	and.w	r2, r3, #7
 800649a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4422      	add	r2, r4
 80064a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064a4:	e105      	b.n	80066b2 <UART_SetConfig+0x4d6>
 80064a6:	bf00      	nop
 80064a8:	40011000 	.word	0x40011000
 80064ac:	40011400 	.word	0x40011400
 80064b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064c6:	4642      	mov	r2, r8
 80064c8:	464b      	mov	r3, r9
 80064ca:	1891      	adds	r1, r2, r2
 80064cc:	6239      	str	r1, [r7, #32]
 80064ce:	415b      	adcs	r3, r3
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
 80064d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064d6:	4641      	mov	r1, r8
 80064d8:	1854      	adds	r4, r2, r1
 80064da:	4649      	mov	r1, r9
 80064dc:	eb43 0501 	adc.w	r5, r3, r1
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	00eb      	lsls	r3, r5, #3
 80064ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ee:	00e2      	lsls	r2, r4, #3
 80064f0:	4614      	mov	r4, r2
 80064f2:	461d      	mov	r5, r3
 80064f4:	4643      	mov	r3, r8
 80064f6:	18e3      	adds	r3, r4, r3
 80064f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064fc:	464b      	mov	r3, r9
 80064fe:	eb45 0303 	adc.w	r3, r5, r3
 8006502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006522:	4629      	mov	r1, r5
 8006524:	008b      	lsls	r3, r1, #2
 8006526:	4621      	mov	r1, r4
 8006528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800652c:	4621      	mov	r1, r4
 800652e:	008a      	lsls	r2, r1, #2
 8006530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006534:	f7fa fb60 	bl	8000bf8 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4b60      	ldr	r3, [pc, #384]	; (80066c0 <UART_SetConfig+0x4e4>)
 800653e:	fba3 2302 	umull	r2, r3, r3, r2
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	011c      	lsls	r4, r3, #4
 8006546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654a:	2200      	movs	r2, #0
 800654c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006558:	4642      	mov	r2, r8
 800655a:	464b      	mov	r3, r9
 800655c:	1891      	adds	r1, r2, r2
 800655e:	61b9      	str	r1, [r7, #24]
 8006560:	415b      	adcs	r3, r3
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006568:	4641      	mov	r1, r8
 800656a:	1851      	adds	r1, r2, r1
 800656c:	6139      	str	r1, [r7, #16]
 800656e:	4649      	mov	r1, r9
 8006570:	414b      	adcs	r3, r1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006580:	4659      	mov	r1, fp
 8006582:	00cb      	lsls	r3, r1, #3
 8006584:	4651      	mov	r1, sl
 8006586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800658a:	4651      	mov	r1, sl
 800658c:	00ca      	lsls	r2, r1, #3
 800658e:	4610      	mov	r0, r2
 8006590:	4619      	mov	r1, r3
 8006592:	4603      	mov	r3, r0
 8006594:	4642      	mov	r2, r8
 8006596:	189b      	adds	r3, r3, r2
 8006598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800659c:	464b      	mov	r3, r9
 800659e:	460a      	mov	r2, r1
 80065a0:	eb42 0303 	adc.w	r3, r2, r3
 80065a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80065b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065c0:	4649      	mov	r1, r9
 80065c2:	008b      	lsls	r3, r1, #2
 80065c4:	4641      	mov	r1, r8
 80065c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ca:	4641      	mov	r1, r8
 80065cc:	008a      	lsls	r2, r1, #2
 80065ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065d2:	f7fa fb11 	bl	8000bf8 <__aeabi_uldivmod>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4b39      	ldr	r3, [pc, #228]	; (80066c0 <UART_SetConfig+0x4e4>)
 80065dc:	fba3 1302 	umull	r1, r3, r3, r2
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	2164      	movs	r1, #100	; 0x64
 80065e4:	fb01 f303 	mul.w	r3, r1, r3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	3332      	adds	r3, #50	; 0x32
 80065ee:	4a34      	ldr	r2, [pc, #208]	; (80066c0 <UART_SetConfig+0x4e4>)
 80065f0:	fba2 2303 	umull	r2, r3, r2, r3
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065fa:	441c      	add	r4, r3
 80065fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006600:	2200      	movs	r2, #0
 8006602:	673b      	str	r3, [r7, #112]	; 0x70
 8006604:	677a      	str	r2, [r7, #116]	; 0x74
 8006606:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800660a:	4642      	mov	r2, r8
 800660c:	464b      	mov	r3, r9
 800660e:	1891      	adds	r1, r2, r2
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	415b      	adcs	r3, r3
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800661a:	4641      	mov	r1, r8
 800661c:	1851      	adds	r1, r2, r1
 800661e:	6039      	str	r1, [r7, #0]
 8006620:	4649      	mov	r1, r9
 8006622:	414b      	adcs	r3, r1
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006632:	4659      	mov	r1, fp
 8006634:	00cb      	lsls	r3, r1, #3
 8006636:	4651      	mov	r1, sl
 8006638:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800663c:	4651      	mov	r1, sl
 800663e:	00ca      	lsls	r2, r1, #3
 8006640:	4610      	mov	r0, r2
 8006642:	4619      	mov	r1, r3
 8006644:	4603      	mov	r3, r0
 8006646:	4642      	mov	r2, r8
 8006648:	189b      	adds	r3, r3, r2
 800664a:	66bb      	str	r3, [r7, #104]	; 0x68
 800664c:	464b      	mov	r3, r9
 800664e:	460a      	mov	r2, r1
 8006650:	eb42 0303 	adc.w	r3, r2, r3
 8006654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	663b      	str	r3, [r7, #96]	; 0x60
 8006660:	667a      	str	r2, [r7, #100]	; 0x64
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800666e:	4649      	mov	r1, r9
 8006670:	008b      	lsls	r3, r1, #2
 8006672:	4641      	mov	r1, r8
 8006674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006678:	4641      	mov	r1, r8
 800667a:	008a      	lsls	r2, r1, #2
 800667c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006680:	f7fa faba 	bl	8000bf8 <__aeabi_uldivmod>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <UART_SetConfig+0x4e4>)
 800668a:	fba3 1302 	umull	r1, r3, r3, r2
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	2164      	movs	r1, #100	; 0x64
 8006692:	fb01 f303 	mul.w	r3, r1, r3
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	3332      	adds	r3, #50	; 0x32
 800669c:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <UART_SetConfig+0x4e4>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	f003 020f 	and.w	r2, r3, #15
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4422      	add	r2, r4
 80066b0:	609a      	str	r2, [r3, #8]
}
 80066b2:	bf00      	nop
 80066b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066b8:	46bd      	mov	sp, r7
 80066ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066be:	bf00      	nop
 80066c0:	51eb851f 	.word	0x51eb851f

080066c4 <atof>:
 80066c4:	2100      	movs	r1, #0
 80066c6:	f001 bb11 	b.w	8007cec <strtod>

080066ca <atoi>:
 80066ca:	220a      	movs	r2, #10
 80066cc:	2100      	movs	r1, #0
 80066ce:	f001 bb9b 	b.w	8007e08 <strtol>
	...

080066d4 <__errno>:
 80066d4:	4b01      	ldr	r3, [pc, #4]	; (80066dc <__errno+0x8>)
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	2000000c 	.word	0x2000000c

080066e0 <__libc_init_array>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	4d0d      	ldr	r5, [pc, #52]	; (8006718 <__libc_init_array+0x38>)
 80066e4:	4c0d      	ldr	r4, [pc, #52]	; (800671c <__libc_init_array+0x3c>)
 80066e6:	1b64      	subs	r4, r4, r5
 80066e8:	10a4      	asrs	r4, r4, #2
 80066ea:	2600      	movs	r6, #0
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	d109      	bne.n	8006704 <__libc_init_array+0x24>
 80066f0:	4d0b      	ldr	r5, [pc, #44]	; (8006720 <__libc_init_array+0x40>)
 80066f2:	4c0c      	ldr	r4, [pc, #48]	; (8006724 <__libc_init_array+0x44>)
 80066f4:	f004 faa8 	bl	800ac48 <_init>
 80066f8:	1b64      	subs	r4, r4, r5
 80066fa:	10a4      	asrs	r4, r4, #2
 80066fc:	2600      	movs	r6, #0
 80066fe:	42a6      	cmp	r6, r4
 8006700:	d105      	bne.n	800670e <__libc_init_array+0x2e>
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	f855 3b04 	ldr.w	r3, [r5], #4
 8006708:	4798      	blx	r3
 800670a:	3601      	adds	r6, #1
 800670c:	e7ee      	b.n	80066ec <__libc_init_array+0xc>
 800670e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006712:	4798      	blx	r3
 8006714:	3601      	adds	r6, #1
 8006716:	e7f2      	b.n	80066fe <__libc_init_array+0x1e>
 8006718:	0800b864 	.word	0x0800b864
 800671c:	0800b864 	.word	0x0800b864
 8006720:	0800b864 	.word	0x0800b864
 8006724:	0800b868 	.word	0x0800b868

08006728 <memcpy>:
 8006728:	440a      	add	r2, r1
 800672a:	4291      	cmp	r1, r2
 800672c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006730:	d100      	bne.n	8006734 <memcpy+0xc>
 8006732:	4770      	bx	lr
 8006734:	b510      	push	{r4, lr}
 8006736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673e:	4291      	cmp	r1, r2
 8006740:	d1f9      	bne.n	8006736 <memcpy+0xe>
 8006742:	bd10      	pop	{r4, pc}

08006744 <memset>:
 8006744:	4402      	add	r2, r0
 8006746:	4603      	mov	r3, r0
 8006748:	4293      	cmp	r3, r2
 800674a:	d100      	bne.n	800674e <memset+0xa>
 800674c:	4770      	bx	lr
 800674e:	f803 1b01 	strb.w	r1, [r3], #1
 8006752:	e7f9      	b.n	8006748 <memset+0x4>

08006754 <__cvt>:
 8006754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	ec55 4b10 	vmov	r4, r5, d0
 800675c:	2d00      	cmp	r5, #0
 800675e:	460e      	mov	r6, r1
 8006760:	4619      	mov	r1, r3
 8006762:	462b      	mov	r3, r5
 8006764:	bfbb      	ittet	lt
 8006766:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800676a:	461d      	movlt	r5, r3
 800676c:	2300      	movge	r3, #0
 800676e:	232d      	movlt	r3, #45	; 0x2d
 8006770:	700b      	strb	r3, [r1, #0]
 8006772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006774:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006778:	4691      	mov	r9, r2
 800677a:	f023 0820 	bic.w	r8, r3, #32
 800677e:	bfbc      	itt	lt
 8006780:	4622      	movlt	r2, r4
 8006782:	4614      	movlt	r4, r2
 8006784:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006788:	d005      	beq.n	8006796 <__cvt+0x42>
 800678a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800678e:	d100      	bne.n	8006792 <__cvt+0x3e>
 8006790:	3601      	adds	r6, #1
 8006792:	2102      	movs	r1, #2
 8006794:	e000      	b.n	8006798 <__cvt+0x44>
 8006796:	2103      	movs	r1, #3
 8006798:	ab03      	add	r3, sp, #12
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	ab02      	add	r3, sp, #8
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	ec45 4b10 	vmov	d0, r4, r5
 80067a4:	4653      	mov	r3, sl
 80067a6:	4632      	mov	r2, r6
 80067a8:	f001 fbc6 	bl	8007f38 <_dtoa_r>
 80067ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067b0:	4607      	mov	r7, r0
 80067b2:	d102      	bne.n	80067ba <__cvt+0x66>
 80067b4:	f019 0f01 	tst.w	r9, #1
 80067b8:	d022      	beq.n	8006800 <__cvt+0xac>
 80067ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067be:	eb07 0906 	add.w	r9, r7, r6
 80067c2:	d110      	bne.n	80067e6 <__cvt+0x92>
 80067c4:	783b      	ldrb	r3, [r7, #0]
 80067c6:	2b30      	cmp	r3, #48	; 0x30
 80067c8:	d10a      	bne.n	80067e0 <__cvt+0x8c>
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7fa f981 	bl	8000ad8 <__aeabi_dcmpeq>
 80067d6:	b918      	cbnz	r0, 80067e0 <__cvt+0x8c>
 80067d8:	f1c6 0601 	rsb	r6, r6, #1
 80067dc:	f8ca 6000 	str.w	r6, [sl]
 80067e0:	f8da 3000 	ldr.w	r3, [sl]
 80067e4:	4499      	add	r9, r3
 80067e6:	2200      	movs	r2, #0
 80067e8:	2300      	movs	r3, #0
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7fa f973 	bl	8000ad8 <__aeabi_dcmpeq>
 80067f2:	b108      	cbz	r0, 80067f8 <__cvt+0xa4>
 80067f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80067f8:	2230      	movs	r2, #48	; 0x30
 80067fa:	9b03      	ldr	r3, [sp, #12]
 80067fc:	454b      	cmp	r3, r9
 80067fe:	d307      	bcc.n	8006810 <__cvt+0xbc>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006804:	1bdb      	subs	r3, r3, r7
 8006806:	4638      	mov	r0, r7
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	b004      	add	sp, #16
 800680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	9103      	str	r1, [sp, #12]
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e7f0      	b.n	80067fa <__cvt+0xa6>

08006818 <__exponent>:
 8006818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800681a:	4603      	mov	r3, r0
 800681c:	2900      	cmp	r1, #0
 800681e:	bfb8      	it	lt
 8006820:	4249      	neglt	r1, r1
 8006822:	f803 2b02 	strb.w	r2, [r3], #2
 8006826:	bfb4      	ite	lt
 8006828:	222d      	movlt	r2, #45	; 0x2d
 800682a:	222b      	movge	r2, #43	; 0x2b
 800682c:	2909      	cmp	r1, #9
 800682e:	7042      	strb	r2, [r0, #1]
 8006830:	dd2a      	ble.n	8006888 <__exponent+0x70>
 8006832:	f10d 0407 	add.w	r4, sp, #7
 8006836:	46a4      	mov	ip, r4
 8006838:	270a      	movs	r7, #10
 800683a:	46a6      	mov	lr, r4
 800683c:	460a      	mov	r2, r1
 800683e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006842:	fb07 1516 	mls	r5, r7, r6, r1
 8006846:	3530      	adds	r5, #48	; 0x30
 8006848:	2a63      	cmp	r2, #99	; 0x63
 800684a:	f104 34ff 	add.w	r4, r4, #4294967295
 800684e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006852:	4631      	mov	r1, r6
 8006854:	dcf1      	bgt.n	800683a <__exponent+0x22>
 8006856:	3130      	adds	r1, #48	; 0x30
 8006858:	f1ae 0502 	sub.w	r5, lr, #2
 800685c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006860:	1c44      	adds	r4, r0, #1
 8006862:	4629      	mov	r1, r5
 8006864:	4561      	cmp	r1, ip
 8006866:	d30a      	bcc.n	800687e <__exponent+0x66>
 8006868:	f10d 0209 	add.w	r2, sp, #9
 800686c:	eba2 020e 	sub.w	r2, r2, lr
 8006870:	4565      	cmp	r5, ip
 8006872:	bf88      	it	hi
 8006874:	2200      	movhi	r2, #0
 8006876:	4413      	add	r3, r2
 8006878:	1a18      	subs	r0, r3, r0
 800687a:	b003      	add	sp, #12
 800687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006882:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006886:	e7ed      	b.n	8006864 <__exponent+0x4c>
 8006888:	2330      	movs	r3, #48	; 0x30
 800688a:	3130      	adds	r1, #48	; 0x30
 800688c:	7083      	strb	r3, [r0, #2]
 800688e:	70c1      	strb	r1, [r0, #3]
 8006890:	1d03      	adds	r3, r0, #4
 8006892:	e7f1      	b.n	8006878 <__exponent+0x60>

08006894 <_printf_float>:
 8006894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006898:	ed2d 8b02 	vpush	{d8}
 800689c:	b08d      	sub	sp, #52	; 0x34
 800689e:	460c      	mov	r4, r1
 80068a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068a4:	4616      	mov	r6, r2
 80068a6:	461f      	mov	r7, r3
 80068a8:	4605      	mov	r5, r0
 80068aa:	f002 fca3 	bl	80091f4 <_localeconv_r>
 80068ae:	f8d0 a000 	ldr.w	sl, [r0]
 80068b2:	4650      	mov	r0, sl
 80068b4:	f7f9 fc94 	bl	80001e0 <strlen>
 80068b8:	2300      	movs	r3, #0
 80068ba:	930a      	str	r3, [sp, #40]	; 0x28
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	9305      	str	r3, [sp, #20]
 80068c0:	f8d8 3000 	ldr.w	r3, [r8]
 80068c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068c8:	3307      	adds	r3, #7
 80068ca:	f023 0307 	bic.w	r3, r3, #7
 80068ce:	f103 0208 	add.w	r2, r3, #8
 80068d2:	f8c8 2000 	str.w	r2, [r8]
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068e6:	9307      	str	r3, [sp, #28]
 80068e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80068ec:	ee08 0a10 	vmov	s16, r0
 80068f0:	4b9f      	ldr	r3, [pc, #636]	; (8006b70 <_printf_float+0x2dc>)
 80068f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	f7fa f91f 	bl	8000b3c <__aeabi_dcmpun>
 80068fe:	bb88      	cbnz	r0, 8006964 <_printf_float+0xd0>
 8006900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006904:	4b9a      	ldr	r3, [pc, #616]	; (8006b70 <_printf_float+0x2dc>)
 8006906:	f04f 32ff 	mov.w	r2, #4294967295
 800690a:	f7fa f8f9 	bl	8000b00 <__aeabi_dcmple>
 800690e:	bb48      	cbnz	r0, 8006964 <_printf_float+0xd0>
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	4640      	mov	r0, r8
 8006916:	4649      	mov	r1, r9
 8006918:	f7fa f8e8 	bl	8000aec <__aeabi_dcmplt>
 800691c:	b110      	cbz	r0, 8006924 <_printf_float+0x90>
 800691e:	232d      	movs	r3, #45	; 0x2d
 8006920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006924:	4b93      	ldr	r3, [pc, #588]	; (8006b74 <_printf_float+0x2e0>)
 8006926:	4894      	ldr	r0, [pc, #592]	; (8006b78 <_printf_float+0x2e4>)
 8006928:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800692c:	bf94      	ite	ls
 800692e:	4698      	movls	r8, r3
 8006930:	4680      	movhi	r8, r0
 8006932:	2303      	movs	r3, #3
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	9b05      	ldr	r3, [sp, #20]
 8006938:	f023 0204 	bic.w	r2, r3, #4
 800693c:	6022      	str	r2, [r4, #0]
 800693e:	f04f 0900 	mov.w	r9, #0
 8006942:	9700      	str	r7, [sp, #0]
 8006944:	4633      	mov	r3, r6
 8006946:	aa0b      	add	r2, sp, #44	; 0x2c
 8006948:	4621      	mov	r1, r4
 800694a:	4628      	mov	r0, r5
 800694c:	f000 f9d8 	bl	8006d00 <_printf_common>
 8006950:	3001      	adds	r0, #1
 8006952:	f040 8090 	bne.w	8006a76 <_printf_float+0x1e2>
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	b00d      	add	sp, #52	; 0x34
 800695c:	ecbd 8b02 	vpop	{d8}
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	4642      	mov	r2, r8
 8006966:	464b      	mov	r3, r9
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7fa f8e6 	bl	8000b3c <__aeabi_dcmpun>
 8006970:	b140      	cbz	r0, 8006984 <_printf_float+0xf0>
 8006972:	464b      	mov	r3, r9
 8006974:	2b00      	cmp	r3, #0
 8006976:	bfbc      	itt	lt
 8006978:	232d      	movlt	r3, #45	; 0x2d
 800697a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800697e:	487f      	ldr	r0, [pc, #508]	; (8006b7c <_printf_float+0x2e8>)
 8006980:	4b7f      	ldr	r3, [pc, #508]	; (8006b80 <_printf_float+0x2ec>)
 8006982:	e7d1      	b.n	8006928 <_printf_float+0x94>
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800698a:	9206      	str	r2, [sp, #24]
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	d13f      	bne.n	8006a10 <_printf_float+0x17c>
 8006990:	2306      	movs	r3, #6
 8006992:	6063      	str	r3, [r4, #4]
 8006994:	9b05      	ldr	r3, [sp, #20]
 8006996:	6861      	ldr	r1, [r4, #4]
 8006998:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800699c:	2300      	movs	r3, #0
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	ab0a      	add	r3, sp, #40	; 0x28
 80069a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069a6:	ab09      	add	r3, sp, #36	; 0x24
 80069a8:	ec49 8b10 	vmov	d0, r8, r9
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	6022      	str	r2, [r4, #0]
 80069b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069b4:	4628      	mov	r0, r5
 80069b6:	f7ff fecd 	bl	8006754 <__cvt>
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069be:	2b47      	cmp	r3, #71	; 0x47
 80069c0:	4680      	mov	r8, r0
 80069c2:	d108      	bne.n	80069d6 <_printf_float+0x142>
 80069c4:	1cc8      	adds	r0, r1, #3
 80069c6:	db02      	blt.n	80069ce <_printf_float+0x13a>
 80069c8:	6863      	ldr	r3, [r4, #4]
 80069ca:	4299      	cmp	r1, r3
 80069cc:	dd41      	ble.n	8006a52 <_printf_float+0x1be>
 80069ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80069d2:	fa5f fb8b 	uxtb.w	fp, fp
 80069d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069da:	d820      	bhi.n	8006a1e <_printf_float+0x18a>
 80069dc:	3901      	subs	r1, #1
 80069de:	465a      	mov	r2, fp
 80069e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069e4:	9109      	str	r1, [sp, #36]	; 0x24
 80069e6:	f7ff ff17 	bl	8006818 <__exponent>
 80069ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ec:	1813      	adds	r3, r2, r0
 80069ee:	2a01      	cmp	r2, #1
 80069f0:	4681      	mov	r9, r0
 80069f2:	6123      	str	r3, [r4, #16]
 80069f4:	dc02      	bgt.n	80069fc <_printf_float+0x168>
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	07d2      	lsls	r2, r2, #31
 80069fa:	d501      	bpl.n	8006a00 <_printf_float+0x16c>
 80069fc:	3301      	adds	r3, #1
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d09c      	beq.n	8006942 <_printf_float+0xae>
 8006a08:	232d      	movs	r3, #45	; 0x2d
 8006a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0e:	e798      	b.n	8006942 <_printf_float+0xae>
 8006a10:	9a06      	ldr	r2, [sp, #24]
 8006a12:	2a47      	cmp	r2, #71	; 0x47
 8006a14:	d1be      	bne.n	8006994 <_printf_float+0x100>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1bc      	bne.n	8006994 <_printf_float+0x100>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e7b9      	b.n	8006992 <_printf_float+0xfe>
 8006a1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a22:	d118      	bne.n	8006a56 <_printf_float+0x1c2>
 8006a24:	2900      	cmp	r1, #0
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	dd0b      	ble.n	8006a42 <_printf_float+0x1ae>
 8006a2a:	6121      	str	r1, [r4, #16]
 8006a2c:	b913      	cbnz	r3, 8006a34 <_printf_float+0x1a0>
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	07d0      	lsls	r0, r2, #31
 8006a32:	d502      	bpl.n	8006a3a <_printf_float+0x1a6>
 8006a34:	3301      	adds	r3, #1
 8006a36:	440b      	add	r3, r1
 8006a38:	6123      	str	r3, [r4, #16]
 8006a3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a3c:	f04f 0900 	mov.w	r9, #0
 8006a40:	e7de      	b.n	8006a00 <_printf_float+0x16c>
 8006a42:	b913      	cbnz	r3, 8006a4a <_printf_float+0x1b6>
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	07d2      	lsls	r2, r2, #31
 8006a48:	d501      	bpl.n	8006a4e <_printf_float+0x1ba>
 8006a4a:	3302      	adds	r3, #2
 8006a4c:	e7f4      	b.n	8006a38 <_printf_float+0x1a4>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e7f2      	b.n	8006a38 <_printf_float+0x1a4>
 8006a52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a58:	4299      	cmp	r1, r3
 8006a5a:	db05      	blt.n	8006a68 <_printf_float+0x1d4>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	6121      	str	r1, [r4, #16]
 8006a60:	07d8      	lsls	r0, r3, #31
 8006a62:	d5ea      	bpl.n	8006a3a <_printf_float+0x1a6>
 8006a64:	1c4b      	adds	r3, r1, #1
 8006a66:	e7e7      	b.n	8006a38 <_printf_float+0x1a4>
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	bfd4      	ite	le
 8006a6c:	f1c1 0202 	rsble	r2, r1, #2
 8006a70:	2201      	movgt	r2, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	e7e0      	b.n	8006a38 <_printf_float+0x1a4>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	055a      	lsls	r2, r3, #21
 8006a7a:	d407      	bmi.n	8006a8c <_printf_float+0x1f8>
 8006a7c:	6923      	ldr	r3, [r4, #16]
 8006a7e:	4642      	mov	r2, r8
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	d12c      	bne.n	8006ae4 <_printf_float+0x250>
 8006a8a:	e764      	b.n	8006956 <_printf_float+0xc2>
 8006a8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a90:	f240 80e0 	bls.w	8006c54 <_printf_float+0x3c0>
 8006a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f7fa f81c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d034      	beq.n	8006b0e <_printf_float+0x27a>
 8006aa4:	4a37      	ldr	r2, [pc, #220]	; (8006b84 <_printf_float+0x2f0>)
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f af51 	beq.w	8006956 <_printf_float+0xc2>
 8006ab4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	db02      	blt.n	8006ac2 <_printf_float+0x22e>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	07d8      	lsls	r0, r3, #31
 8006ac0:	d510      	bpl.n	8006ae4 <_printf_float+0x250>
 8006ac2:	ee18 3a10 	vmov	r3, s16
 8006ac6:	4652      	mov	r2, sl
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f af41 	beq.w	8006956 <_printf_float+0xc2>
 8006ad4:	f04f 0800 	mov.w	r8, #0
 8006ad8:	f104 091a 	add.w	r9, r4, #26
 8006adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	4543      	cmp	r3, r8
 8006ae2:	dc09      	bgt.n	8006af8 <_printf_float+0x264>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	079b      	lsls	r3, r3, #30
 8006ae8:	f100 8105 	bmi.w	8006cf6 <_printf_float+0x462>
 8006aec:	68e0      	ldr	r0, [r4, #12]
 8006aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af0:	4298      	cmp	r0, r3
 8006af2:	bfb8      	it	lt
 8006af4:	4618      	movlt	r0, r3
 8006af6:	e730      	b.n	800695a <_printf_float+0xc6>
 8006af8:	2301      	movs	r3, #1
 8006afa:	464a      	mov	r2, r9
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f af27 	beq.w	8006956 <_printf_float+0xc2>
 8006b08:	f108 0801 	add.w	r8, r8, #1
 8006b0c:	e7e6      	b.n	8006adc <_printf_float+0x248>
 8006b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dc39      	bgt.n	8006b88 <_printf_float+0x2f4>
 8006b14:	4a1b      	ldr	r2, [pc, #108]	; (8006b84 <_printf_float+0x2f0>)
 8006b16:	2301      	movs	r3, #1
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f43f af19 	beq.w	8006956 <_printf_float+0xc2>
 8006b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	d102      	bne.n	8006b32 <_printf_float+0x29e>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	07d9      	lsls	r1, r3, #31
 8006b30:	d5d8      	bpl.n	8006ae4 <_printf_float+0x250>
 8006b32:	ee18 3a10 	vmov	r3, s16
 8006b36:	4652      	mov	r2, sl
 8006b38:	4631      	mov	r1, r6
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	47b8      	blx	r7
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f43f af09 	beq.w	8006956 <_printf_float+0xc2>
 8006b44:	f04f 0900 	mov.w	r9, #0
 8006b48:	f104 0a1a 	add.w	sl, r4, #26
 8006b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4e:	425b      	negs	r3, r3
 8006b50:	454b      	cmp	r3, r9
 8006b52:	dc01      	bgt.n	8006b58 <_printf_float+0x2c4>
 8006b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b56:	e792      	b.n	8006a7e <_printf_float+0x1ea>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4652      	mov	r2, sl
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	47b8      	blx	r7
 8006b62:	3001      	adds	r0, #1
 8006b64:	f43f aef7 	beq.w	8006956 <_printf_float+0xc2>
 8006b68:	f109 0901 	add.w	r9, r9, #1
 8006b6c:	e7ee      	b.n	8006b4c <_printf_float+0x2b8>
 8006b6e:	bf00      	nop
 8006b70:	7fefffff 	.word	0x7fefffff
 8006b74:	0800b3c0 	.word	0x0800b3c0
 8006b78:	0800b3c4 	.word	0x0800b3c4
 8006b7c:	0800b3cc 	.word	0x0800b3cc
 8006b80:	0800b3c8 	.word	0x0800b3c8
 8006b84:	0800b3d0 	.word	0x0800b3d0
 8006b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	bfa8      	it	ge
 8006b90:	461a      	movge	r2, r3
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	4691      	mov	r9, r2
 8006b96:	dc37      	bgt.n	8006c08 <_printf_float+0x374>
 8006b98:	f04f 0b00 	mov.w	fp, #0
 8006b9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba0:	f104 021a 	add.w	r2, r4, #26
 8006ba4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ba6:	9305      	str	r3, [sp, #20]
 8006ba8:	eba3 0309 	sub.w	r3, r3, r9
 8006bac:	455b      	cmp	r3, fp
 8006bae:	dc33      	bgt.n	8006c18 <_printf_float+0x384>
 8006bb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	db3b      	blt.n	8006c30 <_printf_float+0x39c>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	07da      	lsls	r2, r3, #31
 8006bbc:	d438      	bmi.n	8006c30 <_printf_float+0x39c>
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc0:	9a05      	ldr	r2, [sp, #20]
 8006bc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bc4:	1a9a      	subs	r2, r3, r2
 8006bc6:	eba3 0901 	sub.w	r9, r3, r1
 8006bca:	4591      	cmp	r9, r2
 8006bcc:	bfa8      	it	ge
 8006bce:	4691      	movge	r9, r2
 8006bd0:	f1b9 0f00 	cmp.w	r9, #0
 8006bd4:	dc35      	bgt.n	8006c42 <_printf_float+0x3ae>
 8006bd6:	f04f 0800 	mov.w	r8, #0
 8006bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bde:	f104 0a1a 	add.w	sl, r4, #26
 8006be2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006be6:	1a9b      	subs	r3, r3, r2
 8006be8:	eba3 0309 	sub.w	r3, r3, r9
 8006bec:	4543      	cmp	r3, r8
 8006bee:	f77f af79 	ble.w	8006ae4 <_printf_float+0x250>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4652      	mov	r2, sl
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f aeaa 	beq.w	8006956 <_printf_float+0xc2>
 8006c02:	f108 0801 	add.w	r8, r8, #1
 8006c06:	e7ec      	b.n	8006be2 <_printf_float+0x34e>
 8006c08:	4613      	mov	r3, r2
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	4628      	mov	r0, r5
 8006c10:	47b8      	blx	r7
 8006c12:	3001      	adds	r0, #1
 8006c14:	d1c0      	bne.n	8006b98 <_printf_float+0x304>
 8006c16:	e69e      	b.n	8006956 <_printf_float+0xc2>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	9205      	str	r2, [sp, #20]
 8006c20:	47b8      	blx	r7
 8006c22:	3001      	adds	r0, #1
 8006c24:	f43f ae97 	beq.w	8006956 <_printf_float+0xc2>
 8006c28:	9a05      	ldr	r2, [sp, #20]
 8006c2a:	f10b 0b01 	add.w	fp, fp, #1
 8006c2e:	e7b9      	b.n	8006ba4 <_printf_float+0x310>
 8006c30:	ee18 3a10 	vmov	r3, s16
 8006c34:	4652      	mov	r2, sl
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d1be      	bne.n	8006bbe <_printf_float+0x32a>
 8006c40:	e689      	b.n	8006956 <_printf_float+0xc2>
 8006c42:	9a05      	ldr	r2, [sp, #20]
 8006c44:	464b      	mov	r3, r9
 8006c46:	4442      	add	r2, r8
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d1c1      	bne.n	8006bd6 <_printf_float+0x342>
 8006c52:	e680      	b.n	8006956 <_printf_float+0xc2>
 8006c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c56:	2a01      	cmp	r2, #1
 8006c58:	dc01      	bgt.n	8006c5e <_printf_float+0x3ca>
 8006c5a:	07db      	lsls	r3, r3, #31
 8006c5c:	d538      	bpl.n	8006cd0 <_printf_float+0x43c>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4642      	mov	r2, r8
 8006c62:	4631      	mov	r1, r6
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f43f ae74 	beq.w	8006956 <_printf_float+0xc2>
 8006c6e:	ee18 3a10 	vmov	r3, s16
 8006c72:	4652      	mov	r2, sl
 8006c74:	4631      	mov	r1, r6
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	f43f ae6b 	beq.w	8006956 <_printf_float+0xc2>
 8006c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c84:	2200      	movs	r2, #0
 8006c86:	2300      	movs	r3, #0
 8006c88:	f7f9 ff26 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c8c:	b9d8      	cbnz	r0, 8006cc6 <_printf_float+0x432>
 8006c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c90:	f108 0201 	add.w	r2, r8, #1
 8006c94:	3b01      	subs	r3, #1
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d10e      	bne.n	8006cbe <_printf_float+0x42a>
 8006ca0:	e659      	b.n	8006956 <_printf_float+0xc2>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	f43f ae52 	beq.w	8006956 <_printf_float+0xc2>
 8006cb2:	f108 0801 	add.w	r8, r8, #1
 8006cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	4543      	cmp	r3, r8
 8006cbc:	dcf1      	bgt.n	8006ca2 <_printf_float+0x40e>
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cc4:	e6dc      	b.n	8006a80 <_printf_float+0x1ec>
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	f104 0a1a 	add.w	sl, r4, #26
 8006cce:	e7f2      	b.n	8006cb6 <_printf_float+0x422>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	e7df      	b.n	8006c96 <_printf_float+0x402>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	464a      	mov	r2, r9
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f ae38 	beq.w	8006956 <_printf_float+0xc2>
 8006ce6:	f108 0801 	add.w	r8, r8, #1
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cee:	1a5b      	subs	r3, r3, r1
 8006cf0:	4543      	cmp	r3, r8
 8006cf2:	dcf0      	bgt.n	8006cd6 <_printf_float+0x442>
 8006cf4:	e6fa      	b.n	8006aec <_printf_float+0x258>
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	f104 0919 	add.w	r9, r4, #25
 8006cfe:	e7f4      	b.n	8006cea <_printf_float+0x456>

08006d00 <_printf_common>:
 8006d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	4616      	mov	r6, r2
 8006d06:	4699      	mov	r9, r3
 8006d08:	688a      	ldr	r2, [r1, #8]
 8006d0a:	690b      	ldr	r3, [r1, #16]
 8006d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfb8      	it	lt
 8006d14:	4613      	movlt	r3, r2
 8006d16:	6033      	str	r3, [r6, #0]
 8006d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b10a      	cbz	r2, 8006d26 <_printf_common+0x26>
 8006d22:	3301      	adds	r3, #1
 8006d24:	6033      	str	r3, [r6, #0]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	0699      	lsls	r1, r3, #26
 8006d2a:	bf42      	ittt	mi
 8006d2c:	6833      	ldrmi	r3, [r6, #0]
 8006d2e:	3302      	addmi	r3, #2
 8006d30:	6033      	strmi	r3, [r6, #0]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	f015 0506 	ands.w	r5, r5, #6
 8006d38:	d106      	bne.n	8006d48 <_printf_common+0x48>
 8006d3a:	f104 0a19 	add.w	sl, r4, #25
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	6832      	ldr	r2, [r6, #0]
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dc26      	bgt.n	8006d96 <_printf_common+0x96>
 8006d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d4c:	1e13      	subs	r3, r2, #0
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	bf18      	it	ne
 8006d52:	2301      	movne	r3, #1
 8006d54:	0692      	lsls	r2, r2, #26
 8006d56:	d42b      	bmi.n	8006db0 <_printf_common+0xb0>
 8006d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	4638      	mov	r0, r7
 8006d60:	47c0      	blx	r8
 8006d62:	3001      	adds	r0, #1
 8006d64:	d01e      	beq.n	8006da4 <_printf_common+0xa4>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	68e5      	ldr	r5, [r4, #12]
 8006d6a:	6832      	ldr	r2, [r6, #0]
 8006d6c:	f003 0306 	and.w	r3, r3, #6
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	bf08      	it	eq
 8006d74:	1aad      	subeq	r5, r5, r2
 8006d76:	68a3      	ldr	r3, [r4, #8]
 8006d78:	6922      	ldr	r2, [r4, #16]
 8006d7a:	bf0c      	ite	eq
 8006d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d80:	2500      	movne	r5, #0
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bfc4      	itt	gt
 8006d86:	1a9b      	subgt	r3, r3, r2
 8006d88:	18ed      	addgt	r5, r5, r3
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	341a      	adds	r4, #26
 8006d8e:	42b5      	cmp	r5, r6
 8006d90:	d11a      	bne.n	8006dc8 <_printf_common+0xc8>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e008      	b.n	8006da8 <_printf_common+0xa8>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4652      	mov	r2, sl
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	47c0      	blx	r8
 8006da0:	3001      	adds	r0, #1
 8006da2:	d103      	bne.n	8006dac <_printf_common+0xac>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dac:	3501      	adds	r5, #1
 8006dae:	e7c6      	b.n	8006d3e <_printf_common+0x3e>
 8006db0:	18e1      	adds	r1, r4, r3
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	2030      	movs	r0, #48	; 0x30
 8006db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dba:	4422      	add	r2, r4
 8006dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	e7c7      	b.n	8006d58 <_printf_common+0x58>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4622      	mov	r2, r4
 8006dcc:	4649      	mov	r1, r9
 8006dce:	4638      	mov	r0, r7
 8006dd0:	47c0      	blx	r8
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d0e6      	beq.n	8006da4 <_printf_common+0xa4>
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7d9      	b.n	8006d8e <_printf_common+0x8e>
	...

08006ddc <_printf_i>:
 8006ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	7e0f      	ldrb	r7, [r1, #24]
 8006de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006de4:	2f78      	cmp	r7, #120	; 0x78
 8006de6:	4691      	mov	r9, r2
 8006de8:	4680      	mov	r8, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	469a      	mov	sl, r3
 8006dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006df2:	d807      	bhi.n	8006e04 <_printf_i+0x28>
 8006df4:	2f62      	cmp	r7, #98	; 0x62
 8006df6:	d80a      	bhi.n	8006e0e <_printf_i+0x32>
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	f000 80d8 	beq.w	8006fae <_printf_i+0x1d2>
 8006dfe:	2f58      	cmp	r7, #88	; 0x58
 8006e00:	f000 80a3 	beq.w	8006f4a <_printf_i+0x16e>
 8006e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e0c:	e03a      	b.n	8006e84 <_printf_i+0xa8>
 8006e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e12:	2b15      	cmp	r3, #21
 8006e14:	d8f6      	bhi.n	8006e04 <_printf_i+0x28>
 8006e16:	a101      	add	r1, pc, #4	; (adr r1, 8006e1c <_printf_i+0x40>)
 8006e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e1c:	08006e75 	.word	0x08006e75
 8006e20:	08006e89 	.word	0x08006e89
 8006e24:	08006e05 	.word	0x08006e05
 8006e28:	08006e05 	.word	0x08006e05
 8006e2c:	08006e05 	.word	0x08006e05
 8006e30:	08006e05 	.word	0x08006e05
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006e05 	.word	0x08006e05
 8006e3c:	08006e05 	.word	0x08006e05
 8006e40:	08006e05 	.word	0x08006e05
 8006e44:	08006e05 	.word	0x08006e05
 8006e48:	08006f95 	.word	0x08006f95
 8006e4c:	08006eb9 	.word	0x08006eb9
 8006e50:	08006f77 	.word	0x08006f77
 8006e54:	08006e05 	.word	0x08006e05
 8006e58:	08006e05 	.word	0x08006e05
 8006e5c:	08006fb7 	.word	0x08006fb7
 8006e60:	08006e05 	.word	0x08006e05
 8006e64:	08006eb9 	.word	0x08006eb9
 8006e68:	08006e05 	.word	0x08006e05
 8006e6c:	08006e05 	.word	0x08006e05
 8006e70:	08006f7f 	.word	0x08006f7f
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0a3      	b.n	8006fd0 <_printf_i+0x1f4>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	6829      	ldr	r1, [r5, #0]
 8006e8c:	0606      	lsls	r6, r0, #24
 8006e8e:	f101 0304 	add.w	r3, r1, #4
 8006e92:	d50a      	bpl.n	8006eaa <_printf_i+0xce>
 8006e94:	680e      	ldr	r6, [r1, #0]
 8006e96:	602b      	str	r3, [r5, #0]
 8006e98:	2e00      	cmp	r6, #0
 8006e9a:	da03      	bge.n	8006ea4 <_printf_i+0xc8>
 8006e9c:	232d      	movs	r3, #45	; 0x2d
 8006e9e:	4276      	negs	r6, r6
 8006ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea4:	485e      	ldr	r0, [pc, #376]	; (8007020 <_printf_i+0x244>)
 8006ea6:	230a      	movs	r3, #10
 8006ea8:	e019      	b.n	8006ede <_printf_i+0x102>
 8006eaa:	680e      	ldr	r6, [r1, #0]
 8006eac:	602b      	str	r3, [r5, #0]
 8006eae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eb2:	bf18      	it	ne
 8006eb4:	b236      	sxthne	r6, r6
 8006eb6:	e7ef      	b.n	8006e98 <_printf_i+0xbc>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	6820      	ldr	r0, [r4, #0]
 8006ebc:	1d19      	adds	r1, r3, #4
 8006ebe:	6029      	str	r1, [r5, #0]
 8006ec0:	0601      	lsls	r1, r0, #24
 8006ec2:	d501      	bpl.n	8006ec8 <_printf_i+0xec>
 8006ec4:	681e      	ldr	r6, [r3, #0]
 8006ec6:	e002      	b.n	8006ece <_printf_i+0xf2>
 8006ec8:	0646      	lsls	r6, r0, #25
 8006eca:	d5fb      	bpl.n	8006ec4 <_printf_i+0xe8>
 8006ecc:	881e      	ldrh	r6, [r3, #0]
 8006ece:	4854      	ldr	r0, [pc, #336]	; (8007020 <_printf_i+0x244>)
 8006ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ed2:	bf0c      	ite	eq
 8006ed4:	2308      	moveq	r3, #8
 8006ed6:	230a      	movne	r3, #10
 8006ed8:	2100      	movs	r1, #0
 8006eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ede:	6865      	ldr	r5, [r4, #4]
 8006ee0:	60a5      	str	r5, [r4, #8]
 8006ee2:	2d00      	cmp	r5, #0
 8006ee4:	bfa2      	ittt	ge
 8006ee6:	6821      	ldrge	r1, [r4, #0]
 8006ee8:	f021 0104 	bicge.w	r1, r1, #4
 8006eec:	6021      	strge	r1, [r4, #0]
 8006eee:	b90e      	cbnz	r6, 8006ef4 <_printf_i+0x118>
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	d04d      	beq.n	8006f90 <_printf_i+0x1b4>
 8006ef4:	4615      	mov	r5, r2
 8006ef6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006efa:	fb03 6711 	mls	r7, r3, r1, r6
 8006efe:	5dc7      	ldrb	r7, [r0, r7]
 8006f00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f04:	4637      	mov	r7, r6
 8006f06:	42bb      	cmp	r3, r7
 8006f08:	460e      	mov	r6, r1
 8006f0a:	d9f4      	bls.n	8006ef6 <_printf_i+0x11a>
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d10b      	bne.n	8006f28 <_printf_i+0x14c>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	07de      	lsls	r6, r3, #31
 8006f14:	d508      	bpl.n	8006f28 <_printf_i+0x14c>
 8006f16:	6923      	ldr	r3, [r4, #16]
 8006f18:	6861      	ldr	r1, [r4, #4]
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	bfde      	ittt	le
 8006f1e:	2330      	movle	r3, #48	; 0x30
 8006f20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f28:	1b52      	subs	r2, r2, r5
 8006f2a:	6122      	str	r2, [r4, #16]
 8006f2c:	f8cd a000 	str.w	sl, [sp]
 8006f30:	464b      	mov	r3, r9
 8006f32:	aa03      	add	r2, sp, #12
 8006f34:	4621      	mov	r1, r4
 8006f36:	4640      	mov	r0, r8
 8006f38:	f7ff fee2 	bl	8006d00 <_printf_common>
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d14c      	bne.n	8006fda <_printf_i+0x1fe>
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	b004      	add	sp, #16
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	4835      	ldr	r0, [pc, #212]	; (8007020 <_printf_i+0x244>)
 8006f4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f50:	6829      	ldr	r1, [r5, #0]
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f58:	6029      	str	r1, [r5, #0]
 8006f5a:	061d      	lsls	r5, r3, #24
 8006f5c:	d514      	bpl.n	8006f88 <_printf_i+0x1ac>
 8006f5e:	07df      	lsls	r7, r3, #31
 8006f60:	bf44      	itt	mi
 8006f62:	f043 0320 	orrmi.w	r3, r3, #32
 8006f66:	6023      	strmi	r3, [r4, #0]
 8006f68:	b91e      	cbnz	r6, 8006f72 <_printf_i+0x196>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	f023 0320 	bic.w	r3, r3, #32
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	2310      	movs	r3, #16
 8006f74:	e7b0      	b.n	8006ed8 <_printf_i+0xfc>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	f043 0320 	orr.w	r3, r3, #32
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	2378      	movs	r3, #120	; 0x78
 8006f80:	4828      	ldr	r0, [pc, #160]	; (8007024 <_printf_i+0x248>)
 8006f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f86:	e7e3      	b.n	8006f50 <_printf_i+0x174>
 8006f88:	0659      	lsls	r1, r3, #25
 8006f8a:	bf48      	it	mi
 8006f8c:	b2b6      	uxthmi	r6, r6
 8006f8e:	e7e6      	b.n	8006f5e <_printf_i+0x182>
 8006f90:	4615      	mov	r5, r2
 8006f92:	e7bb      	b.n	8006f0c <_printf_i+0x130>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	6826      	ldr	r6, [r4, #0]
 8006f98:	6961      	ldr	r1, [r4, #20]
 8006f9a:	1d18      	adds	r0, r3, #4
 8006f9c:	6028      	str	r0, [r5, #0]
 8006f9e:	0635      	lsls	r5, r6, #24
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	d501      	bpl.n	8006fa8 <_printf_i+0x1cc>
 8006fa4:	6019      	str	r1, [r3, #0]
 8006fa6:	e002      	b.n	8006fae <_printf_i+0x1d2>
 8006fa8:	0670      	lsls	r0, r6, #25
 8006faa:	d5fb      	bpl.n	8006fa4 <_printf_i+0x1c8>
 8006fac:	8019      	strh	r1, [r3, #0]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	4615      	mov	r5, r2
 8006fb4:	e7ba      	b.n	8006f2c <_printf_i+0x150>
 8006fb6:	682b      	ldr	r3, [r5, #0]
 8006fb8:	1d1a      	adds	r2, r3, #4
 8006fba:	602a      	str	r2, [r5, #0]
 8006fbc:	681d      	ldr	r5, [r3, #0]
 8006fbe:	6862      	ldr	r2, [r4, #4]
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f7f9 f914 	bl	80001f0 <memchr>
 8006fc8:	b108      	cbz	r0, 8006fce <_printf_i+0x1f2>
 8006fca:	1b40      	subs	r0, r0, r5
 8006fcc:	6060      	str	r0, [r4, #4]
 8006fce:	6863      	ldr	r3, [r4, #4]
 8006fd0:	6123      	str	r3, [r4, #16]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd8:	e7a8      	b.n	8006f2c <_printf_i+0x150>
 8006fda:	6923      	ldr	r3, [r4, #16]
 8006fdc:	462a      	mov	r2, r5
 8006fde:	4649      	mov	r1, r9
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	47d0      	blx	sl
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d0ab      	beq.n	8006f40 <_printf_i+0x164>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	079b      	lsls	r3, r3, #30
 8006fec:	d413      	bmi.n	8007016 <_printf_i+0x23a>
 8006fee:	68e0      	ldr	r0, [r4, #12]
 8006ff0:	9b03      	ldr	r3, [sp, #12]
 8006ff2:	4298      	cmp	r0, r3
 8006ff4:	bfb8      	it	lt
 8006ff6:	4618      	movlt	r0, r3
 8006ff8:	e7a4      	b.n	8006f44 <_printf_i+0x168>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	4649      	mov	r1, r9
 8007000:	4640      	mov	r0, r8
 8007002:	47d0      	blx	sl
 8007004:	3001      	adds	r0, #1
 8007006:	d09b      	beq.n	8006f40 <_printf_i+0x164>
 8007008:	3501      	adds	r5, #1
 800700a:	68e3      	ldr	r3, [r4, #12]
 800700c:	9903      	ldr	r1, [sp, #12]
 800700e:	1a5b      	subs	r3, r3, r1
 8007010:	42ab      	cmp	r3, r5
 8007012:	dcf2      	bgt.n	8006ffa <_printf_i+0x21e>
 8007014:	e7eb      	b.n	8006fee <_printf_i+0x212>
 8007016:	2500      	movs	r5, #0
 8007018:	f104 0619 	add.w	r6, r4, #25
 800701c:	e7f5      	b.n	800700a <_printf_i+0x22e>
 800701e:	bf00      	nop
 8007020:	0800b3d2 	.word	0x0800b3d2
 8007024:	0800b3e3 	.word	0x0800b3e3

08007028 <siprintf>:
 8007028:	b40e      	push	{r1, r2, r3}
 800702a:	b500      	push	{lr}
 800702c:	b09c      	sub	sp, #112	; 0x70
 800702e:	ab1d      	add	r3, sp, #116	; 0x74
 8007030:	9002      	str	r0, [sp, #8]
 8007032:	9006      	str	r0, [sp, #24]
 8007034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007038:	4809      	ldr	r0, [pc, #36]	; (8007060 <siprintf+0x38>)
 800703a:	9107      	str	r1, [sp, #28]
 800703c:	9104      	str	r1, [sp, #16]
 800703e:	4909      	ldr	r1, [pc, #36]	; (8007064 <siprintf+0x3c>)
 8007040:	f853 2b04 	ldr.w	r2, [r3], #4
 8007044:	9105      	str	r1, [sp, #20]
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	a902      	add	r1, sp, #8
 800704c:	f002 ff04 	bl	8009e58 <_svfiprintf_r>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	b01c      	add	sp, #112	; 0x70
 8007058:	f85d eb04 	ldr.w	lr, [sp], #4
 800705c:	b003      	add	sp, #12
 800705e:	4770      	bx	lr
 8007060:	2000000c 	.word	0x2000000c
 8007064:	ffff0208 	.word	0xffff0208

08007068 <strchr>:
 8007068:	b2c9      	uxtb	r1, r1
 800706a:	4603      	mov	r3, r0
 800706c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007070:	b11a      	cbz	r2, 800707a <strchr+0x12>
 8007072:	428a      	cmp	r2, r1
 8007074:	d1f9      	bne.n	800706a <strchr+0x2>
 8007076:	4618      	mov	r0, r3
 8007078:	4770      	bx	lr
 800707a:	2900      	cmp	r1, #0
 800707c:	bf18      	it	ne
 800707e:	2300      	movne	r3, #0
 8007080:	e7f9      	b.n	8007076 <strchr+0xe>

08007082 <strncpy>:
 8007082:	b510      	push	{r4, lr}
 8007084:	3901      	subs	r1, #1
 8007086:	4603      	mov	r3, r0
 8007088:	b132      	cbz	r2, 8007098 <strncpy+0x16>
 800708a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800708e:	f803 4b01 	strb.w	r4, [r3], #1
 8007092:	3a01      	subs	r2, #1
 8007094:	2c00      	cmp	r4, #0
 8007096:	d1f7      	bne.n	8007088 <strncpy+0x6>
 8007098:	441a      	add	r2, r3
 800709a:	2100      	movs	r1, #0
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <strncpy+0x20>
 80070a0:	bd10      	pop	{r4, pc}
 80070a2:	f803 1b01 	strb.w	r1, [r3], #1
 80070a6:	e7f9      	b.n	800709c <strncpy+0x1a>

080070a8 <sulp>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4604      	mov	r4, r0
 80070ac:	460d      	mov	r5, r1
 80070ae:	ec45 4b10 	vmov	d0, r4, r5
 80070b2:	4616      	mov	r6, r2
 80070b4:	f002 fc2e 	bl	8009914 <__ulp>
 80070b8:	ec51 0b10 	vmov	r0, r1, d0
 80070bc:	b17e      	cbz	r6, 80070de <sulp+0x36>
 80070be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd09      	ble.n	80070de <sulp+0x36>
 80070ca:	051b      	lsls	r3, r3, #20
 80070cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070d0:	2400      	movs	r4, #0
 80070d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070d6:	4622      	mov	r2, r4
 80070d8:	462b      	mov	r3, r5
 80070da:	f7f9 fa95 	bl	8000608 <__aeabi_dmul>
 80070de:	bd70      	pop	{r4, r5, r6, pc}

080070e0 <_strtod_l>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	b09d      	sub	sp, #116	; 0x74
 80070ea:	461f      	mov	r7, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	9318      	str	r3, [sp, #96]	; 0x60
 80070f0:	4ba2      	ldr	r3, [pc, #648]	; (800737c <_strtod_l+0x29c>)
 80070f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	4604      	mov	r4, r0
 80070fa:	4618      	mov	r0, r3
 80070fc:	4688      	mov	r8, r1
 80070fe:	f7f9 f86f 	bl	80001e0 <strlen>
 8007102:	f04f 0a00 	mov.w	sl, #0
 8007106:	4605      	mov	r5, r0
 8007108:	f04f 0b00 	mov.w	fp, #0
 800710c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	2a2b      	cmp	r2, #43	; 0x2b
 8007116:	d04e      	beq.n	80071b6 <_strtod_l+0xd6>
 8007118:	d83b      	bhi.n	8007192 <_strtod_l+0xb2>
 800711a:	2a0d      	cmp	r2, #13
 800711c:	d834      	bhi.n	8007188 <_strtod_l+0xa8>
 800711e:	2a08      	cmp	r2, #8
 8007120:	d834      	bhi.n	800718c <_strtod_l+0xac>
 8007122:	2a00      	cmp	r2, #0
 8007124:	d03e      	beq.n	80071a4 <_strtod_l+0xc4>
 8007126:	2300      	movs	r3, #0
 8007128:	930a      	str	r3, [sp, #40]	; 0x28
 800712a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800712c:	7833      	ldrb	r3, [r6, #0]
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	f040 80b0 	bne.w	8007294 <_strtod_l+0x1b4>
 8007134:	7873      	ldrb	r3, [r6, #1]
 8007136:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800713a:	2b58      	cmp	r3, #88	; 0x58
 800713c:	d168      	bne.n	8007210 <_strtod_l+0x130>
 800713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	ab18      	add	r3, sp, #96	; 0x60
 8007144:	9702      	str	r7, [sp, #8]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4a8d      	ldr	r2, [pc, #564]	; (8007380 <_strtod_l+0x2a0>)
 800714a:	ab19      	add	r3, sp, #100	; 0x64
 800714c:	a917      	add	r1, sp, #92	; 0x5c
 800714e:	4620      	mov	r0, r4
 8007150:	f001 fd48 	bl	8008be4 <__gethex>
 8007154:	f010 0707 	ands.w	r7, r0, #7
 8007158:	4605      	mov	r5, r0
 800715a:	d005      	beq.n	8007168 <_strtod_l+0x88>
 800715c:	2f06      	cmp	r7, #6
 800715e:	d12c      	bne.n	80071ba <_strtod_l+0xda>
 8007160:	3601      	adds	r6, #1
 8007162:	2300      	movs	r3, #0
 8007164:	9617      	str	r6, [sp, #92]	; 0x5c
 8007166:	930a      	str	r3, [sp, #40]	; 0x28
 8007168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 8590 	bne.w	8007c90 <_strtod_l+0xbb0>
 8007170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007172:	b1eb      	cbz	r3, 80071b0 <_strtod_l+0xd0>
 8007174:	4652      	mov	r2, sl
 8007176:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800717a:	ec43 2b10 	vmov	d0, r2, r3
 800717e:	b01d      	add	sp, #116	; 0x74
 8007180:	ecbd 8b02 	vpop	{d8}
 8007184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007188:	2a20      	cmp	r2, #32
 800718a:	d1cc      	bne.n	8007126 <_strtod_l+0x46>
 800718c:	3301      	adds	r3, #1
 800718e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007190:	e7be      	b.n	8007110 <_strtod_l+0x30>
 8007192:	2a2d      	cmp	r2, #45	; 0x2d
 8007194:	d1c7      	bne.n	8007126 <_strtod_l+0x46>
 8007196:	2201      	movs	r2, #1
 8007198:	920a      	str	r2, [sp, #40]	; 0x28
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	9217      	str	r2, [sp, #92]	; 0x5c
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1c2      	bne.n	800712a <_strtod_l+0x4a>
 80071a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 856e 	bne.w	8007c8c <_strtod_l+0xbac>
 80071b0:	4652      	mov	r2, sl
 80071b2:	465b      	mov	r3, fp
 80071b4:	e7e1      	b.n	800717a <_strtod_l+0x9a>
 80071b6:	2200      	movs	r2, #0
 80071b8:	e7ee      	b.n	8007198 <_strtod_l+0xb8>
 80071ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071bc:	b13a      	cbz	r2, 80071ce <_strtod_l+0xee>
 80071be:	2135      	movs	r1, #53	; 0x35
 80071c0:	a81a      	add	r0, sp, #104	; 0x68
 80071c2:	f002 fcb2 	bl	8009b2a <__copybits>
 80071c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071c8:	4620      	mov	r0, r4
 80071ca:	f002 f871 	bl	80092b0 <_Bfree>
 80071ce:	3f01      	subs	r7, #1
 80071d0:	2f04      	cmp	r7, #4
 80071d2:	d806      	bhi.n	80071e2 <_strtod_l+0x102>
 80071d4:	e8df f007 	tbb	[pc, r7]
 80071d8:	1714030a 	.word	0x1714030a
 80071dc:	0a          	.byte	0x0a
 80071dd:	00          	.byte	0x00
 80071de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80071e2:	0728      	lsls	r0, r5, #28
 80071e4:	d5c0      	bpl.n	8007168 <_strtod_l+0x88>
 80071e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80071ea:	e7bd      	b.n	8007168 <_strtod_l+0x88>
 80071ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80071f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80071fe:	e7f0      	b.n	80071e2 <_strtod_l+0x102>
 8007200:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007384 <_strtod_l+0x2a4>
 8007204:	e7ed      	b.n	80071e2 <_strtod_l+0x102>
 8007206:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800720a:	f04f 3aff 	mov.w	sl, #4294967295
 800720e:	e7e8      	b.n	80071e2 <_strtod_l+0x102>
 8007210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	9217      	str	r2, [sp, #92]	; 0x5c
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b30      	cmp	r3, #48	; 0x30
 800721a:	d0f9      	beq.n	8007210 <_strtod_l+0x130>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0a3      	beq.n	8007168 <_strtod_l+0x88>
 8007220:	2301      	movs	r3, #1
 8007222:	f04f 0900 	mov.w	r9, #0
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800722a:	9308      	str	r3, [sp, #32]
 800722c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007230:	464f      	mov	r7, r9
 8007232:	220a      	movs	r2, #10
 8007234:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007236:	7806      	ldrb	r6, [r0, #0]
 8007238:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800723c:	b2d9      	uxtb	r1, r3
 800723e:	2909      	cmp	r1, #9
 8007240:	d92a      	bls.n	8007298 <_strtod_l+0x1b8>
 8007242:	9905      	ldr	r1, [sp, #20]
 8007244:	462a      	mov	r2, r5
 8007246:	f002 ff1f 	bl	800a088 <strncmp>
 800724a:	b398      	cbz	r0, 80072b4 <_strtod_l+0x1d4>
 800724c:	2000      	movs	r0, #0
 800724e:	4632      	mov	r2, r6
 8007250:	463d      	mov	r5, r7
 8007252:	9005      	str	r0, [sp, #20]
 8007254:	4603      	mov	r3, r0
 8007256:	2a65      	cmp	r2, #101	; 0x65
 8007258:	d001      	beq.n	800725e <_strtod_l+0x17e>
 800725a:	2a45      	cmp	r2, #69	; 0x45
 800725c:	d118      	bne.n	8007290 <_strtod_l+0x1b0>
 800725e:	b91d      	cbnz	r5, 8007268 <_strtod_l+0x188>
 8007260:	9a04      	ldr	r2, [sp, #16]
 8007262:	4302      	orrs	r2, r0
 8007264:	d09e      	beq.n	80071a4 <_strtod_l+0xc4>
 8007266:	2500      	movs	r5, #0
 8007268:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800726c:	f108 0201 	add.w	r2, r8, #1
 8007270:	9217      	str	r2, [sp, #92]	; 0x5c
 8007272:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007276:	2a2b      	cmp	r2, #43	; 0x2b
 8007278:	d075      	beq.n	8007366 <_strtod_l+0x286>
 800727a:	2a2d      	cmp	r2, #45	; 0x2d
 800727c:	d07b      	beq.n	8007376 <_strtod_l+0x296>
 800727e:	f04f 0c00 	mov.w	ip, #0
 8007282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007286:	2909      	cmp	r1, #9
 8007288:	f240 8082 	bls.w	8007390 <_strtod_l+0x2b0>
 800728c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007290:	2600      	movs	r6, #0
 8007292:	e09d      	b.n	80073d0 <_strtod_l+0x2f0>
 8007294:	2300      	movs	r3, #0
 8007296:	e7c4      	b.n	8007222 <_strtod_l+0x142>
 8007298:	2f08      	cmp	r7, #8
 800729a:	bfd8      	it	le
 800729c:	9907      	ldrle	r1, [sp, #28]
 800729e:	f100 0001 	add.w	r0, r0, #1
 80072a2:	bfda      	itte	le
 80072a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80072a8:	9307      	strle	r3, [sp, #28]
 80072aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80072ae:	3701      	adds	r7, #1
 80072b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80072b2:	e7bf      	b.n	8007234 <_strtod_l+0x154>
 80072b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072b6:	195a      	adds	r2, r3, r5
 80072b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80072ba:	5d5a      	ldrb	r2, [r3, r5]
 80072bc:	2f00      	cmp	r7, #0
 80072be:	d037      	beq.n	8007330 <_strtod_l+0x250>
 80072c0:	9005      	str	r0, [sp, #20]
 80072c2:	463d      	mov	r5, r7
 80072c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d912      	bls.n	80072f2 <_strtod_l+0x212>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e7c2      	b.n	8007256 <_strtod_l+0x176>
 80072d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80072d6:	785a      	ldrb	r2, [r3, #1]
 80072d8:	3001      	adds	r0, #1
 80072da:	2a30      	cmp	r2, #48	; 0x30
 80072dc:	d0f8      	beq.n	80072d0 <_strtod_l+0x1f0>
 80072de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	f200 84d9 	bhi.w	8007c9a <_strtod_l+0xbba>
 80072e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ea:	9005      	str	r0, [sp, #20]
 80072ec:	2000      	movs	r0, #0
 80072ee:	9308      	str	r3, [sp, #32]
 80072f0:	4605      	mov	r5, r0
 80072f2:	3a30      	subs	r2, #48	; 0x30
 80072f4:	f100 0301 	add.w	r3, r0, #1
 80072f8:	d014      	beq.n	8007324 <_strtod_l+0x244>
 80072fa:	9905      	ldr	r1, [sp, #20]
 80072fc:	4419      	add	r1, r3
 80072fe:	9105      	str	r1, [sp, #20]
 8007300:	462b      	mov	r3, r5
 8007302:	eb00 0e05 	add.w	lr, r0, r5
 8007306:	210a      	movs	r1, #10
 8007308:	4573      	cmp	r3, lr
 800730a:	d113      	bne.n	8007334 <_strtod_l+0x254>
 800730c:	182b      	adds	r3, r5, r0
 800730e:	2b08      	cmp	r3, #8
 8007310:	f105 0501 	add.w	r5, r5, #1
 8007314:	4405      	add	r5, r0
 8007316:	dc1c      	bgt.n	8007352 <_strtod_l+0x272>
 8007318:	9907      	ldr	r1, [sp, #28]
 800731a:	230a      	movs	r3, #10
 800731c:	fb03 2301 	mla	r3, r3, r1, r2
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	2300      	movs	r3, #0
 8007324:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007326:	1c51      	adds	r1, r2, #1
 8007328:	9117      	str	r1, [sp, #92]	; 0x5c
 800732a:	7852      	ldrb	r2, [r2, #1]
 800732c:	4618      	mov	r0, r3
 800732e:	e7c9      	b.n	80072c4 <_strtod_l+0x1e4>
 8007330:	4638      	mov	r0, r7
 8007332:	e7d2      	b.n	80072da <_strtod_l+0x1fa>
 8007334:	2b08      	cmp	r3, #8
 8007336:	dc04      	bgt.n	8007342 <_strtod_l+0x262>
 8007338:	9e07      	ldr	r6, [sp, #28]
 800733a:	434e      	muls	r6, r1
 800733c:	9607      	str	r6, [sp, #28]
 800733e:	3301      	adds	r3, #1
 8007340:	e7e2      	b.n	8007308 <_strtod_l+0x228>
 8007342:	f103 0c01 	add.w	ip, r3, #1
 8007346:	f1bc 0f10 	cmp.w	ip, #16
 800734a:	bfd8      	it	le
 800734c:	fb01 f909 	mulle.w	r9, r1, r9
 8007350:	e7f5      	b.n	800733e <_strtod_l+0x25e>
 8007352:	2d10      	cmp	r5, #16
 8007354:	bfdc      	itt	le
 8007356:	230a      	movle	r3, #10
 8007358:	fb03 2909 	mlale	r9, r3, r9, r2
 800735c:	e7e1      	b.n	8007322 <_strtod_l+0x242>
 800735e:	2300      	movs	r3, #0
 8007360:	9305      	str	r3, [sp, #20]
 8007362:	2301      	movs	r3, #1
 8007364:	e77c      	b.n	8007260 <_strtod_l+0x180>
 8007366:	f04f 0c00 	mov.w	ip, #0
 800736a:	f108 0202 	add.w	r2, r8, #2
 800736e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007370:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007374:	e785      	b.n	8007282 <_strtod_l+0x1a2>
 8007376:	f04f 0c01 	mov.w	ip, #1
 800737a:	e7f6      	b.n	800736a <_strtod_l+0x28a>
 800737c:	0800b640 	.word	0x0800b640
 8007380:	0800b3f4 	.word	0x0800b3f4
 8007384:	7ff00000 	.word	0x7ff00000
 8007388:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800738a:	1c51      	adds	r1, r2, #1
 800738c:	9117      	str	r1, [sp, #92]	; 0x5c
 800738e:	7852      	ldrb	r2, [r2, #1]
 8007390:	2a30      	cmp	r2, #48	; 0x30
 8007392:	d0f9      	beq.n	8007388 <_strtod_l+0x2a8>
 8007394:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007398:	2908      	cmp	r1, #8
 800739a:	f63f af79 	bhi.w	8007290 <_strtod_l+0x1b0>
 800739e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073a4:	9206      	str	r2, [sp, #24]
 80073a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073a8:	1c51      	adds	r1, r2, #1
 80073aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80073ac:	7852      	ldrb	r2, [r2, #1]
 80073ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80073b2:	2e09      	cmp	r6, #9
 80073b4:	d937      	bls.n	8007426 <_strtod_l+0x346>
 80073b6:	9e06      	ldr	r6, [sp, #24]
 80073b8:	1b89      	subs	r1, r1, r6
 80073ba:	2908      	cmp	r1, #8
 80073bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80073c0:	dc02      	bgt.n	80073c8 <_strtod_l+0x2e8>
 80073c2:	4576      	cmp	r6, lr
 80073c4:	bfa8      	it	ge
 80073c6:	4676      	movge	r6, lr
 80073c8:	f1bc 0f00 	cmp.w	ip, #0
 80073cc:	d000      	beq.n	80073d0 <_strtod_l+0x2f0>
 80073ce:	4276      	negs	r6, r6
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	d14d      	bne.n	8007470 <_strtod_l+0x390>
 80073d4:	9904      	ldr	r1, [sp, #16]
 80073d6:	4301      	orrs	r1, r0
 80073d8:	f47f aec6 	bne.w	8007168 <_strtod_l+0x88>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f47f aee1 	bne.w	80071a4 <_strtod_l+0xc4>
 80073e2:	2a69      	cmp	r2, #105	; 0x69
 80073e4:	d027      	beq.n	8007436 <_strtod_l+0x356>
 80073e6:	dc24      	bgt.n	8007432 <_strtod_l+0x352>
 80073e8:	2a49      	cmp	r2, #73	; 0x49
 80073ea:	d024      	beq.n	8007436 <_strtod_l+0x356>
 80073ec:	2a4e      	cmp	r2, #78	; 0x4e
 80073ee:	f47f aed9 	bne.w	80071a4 <_strtod_l+0xc4>
 80073f2:	499f      	ldr	r1, [pc, #636]	; (8007670 <_strtod_l+0x590>)
 80073f4:	a817      	add	r0, sp, #92	; 0x5c
 80073f6:	f001 fe4d 	bl	8009094 <__match>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f43f aed2 	beq.w	80071a4 <_strtod_l+0xc4>
 8007400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b28      	cmp	r3, #40	; 0x28
 8007406:	d12d      	bne.n	8007464 <_strtod_l+0x384>
 8007408:	499a      	ldr	r1, [pc, #616]	; (8007674 <_strtod_l+0x594>)
 800740a:	aa1a      	add	r2, sp, #104	; 0x68
 800740c:	a817      	add	r0, sp, #92	; 0x5c
 800740e:	f001 fe55 	bl	80090bc <__hexnan>
 8007412:	2805      	cmp	r0, #5
 8007414:	d126      	bne.n	8007464 <_strtod_l+0x384>
 8007416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007418:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800741c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007420:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007424:	e6a0      	b.n	8007168 <_strtod_l+0x88>
 8007426:	210a      	movs	r1, #10
 8007428:	fb01 2e0e 	mla	lr, r1, lr, r2
 800742c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007430:	e7b9      	b.n	80073a6 <_strtod_l+0x2c6>
 8007432:	2a6e      	cmp	r2, #110	; 0x6e
 8007434:	e7db      	b.n	80073ee <_strtod_l+0x30e>
 8007436:	4990      	ldr	r1, [pc, #576]	; (8007678 <_strtod_l+0x598>)
 8007438:	a817      	add	r0, sp, #92	; 0x5c
 800743a:	f001 fe2b 	bl	8009094 <__match>
 800743e:	2800      	cmp	r0, #0
 8007440:	f43f aeb0 	beq.w	80071a4 <_strtod_l+0xc4>
 8007444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007446:	498d      	ldr	r1, [pc, #564]	; (800767c <_strtod_l+0x59c>)
 8007448:	3b01      	subs	r3, #1
 800744a:	a817      	add	r0, sp, #92	; 0x5c
 800744c:	9317      	str	r3, [sp, #92]	; 0x5c
 800744e:	f001 fe21 	bl	8009094 <__match>
 8007452:	b910      	cbnz	r0, 800745a <_strtod_l+0x37a>
 8007454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007456:	3301      	adds	r3, #1
 8007458:	9317      	str	r3, [sp, #92]	; 0x5c
 800745a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800768c <_strtod_l+0x5ac>
 800745e:	f04f 0a00 	mov.w	sl, #0
 8007462:	e681      	b.n	8007168 <_strtod_l+0x88>
 8007464:	4886      	ldr	r0, [pc, #536]	; (8007680 <_strtod_l+0x5a0>)
 8007466:	f002 fdf7 	bl	800a058 <nan>
 800746a:	ec5b ab10 	vmov	sl, fp, d0
 800746e:	e67b      	b.n	8007168 <_strtod_l+0x88>
 8007470:	9b05      	ldr	r3, [sp, #20]
 8007472:	9807      	ldr	r0, [sp, #28]
 8007474:	1af3      	subs	r3, r6, r3
 8007476:	2f00      	cmp	r7, #0
 8007478:	bf08      	it	eq
 800747a:	462f      	moveq	r7, r5
 800747c:	2d10      	cmp	r5, #16
 800747e:	9306      	str	r3, [sp, #24]
 8007480:	46a8      	mov	r8, r5
 8007482:	bfa8      	it	ge
 8007484:	f04f 0810 	movge.w	r8, #16
 8007488:	f7f9 f844 	bl	8000514 <__aeabi_ui2d>
 800748c:	2d09      	cmp	r5, #9
 800748e:	4682      	mov	sl, r0
 8007490:	468b      	mov	fp, r1
 8007492:	dd13      	ble.n	80074bc <_strtod_l+0x3dc>
 8007494:	4b7b      	ldr	r3, [pc, #492]	; (8007684 <_strtod_l+0x5a4>)
 8007496:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800749a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800749e:	f7f9 f8b3 	bl	8000608 <__aeabi_dmul>
 80074a2:	4682      	mov	sl, r0
 80074a4:	4648      	mov	r0, r9
 80074a6:	468b      	mov	fp, r1
 80074a8:	f7f9 f834 	bl	8000514 <__aeabi_ui2d>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4650      	mov	r0, sl
 80074b2:	4659      	mov	r1, fp
 80074b4:	f7f8 fef2 	bl	800029c <__adddf3>
 80074b8:	4682      	mov	sl, r0
 80074ba:	468b      	mov	fp, r1
 80074bc:	2d0f      	cmp	r5, #15
 80074be:	dc38      	bgt.n	8007532 <_strtod_l+0x452>
 80074c0:	9b06      	ldr	r3, [sp, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f43f ae50 	beq.w	8007168 <_strtod_l+0x88>
 80074c8:	dd24      	ble.n	8007514 <_strtod_l+0x434>
 80074ca:	2b16      	cmp	r3, #22
 80074cc:	dc0b      	bgt.n	80074e6 <_strtod_l+0x406>
 80074ce:	496d      	ldr	r1, [pc, #436]	; (8007684 <_strtod_l+0x5a4>)
 80074d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d8:	4652      	mov	r2, sl
 80074da:	465b      	mov	r3, fp
 80074dc:	f7f9 f894 	bl	8000608 <__aeabi_dmul>
 80074e0:	4682      	mov	sl, r0
 80074e2:	468b      	mov	fp, r1
 80074e4:	e640      	b.n	8007168 <_strtod_l+0x88>
 80074e6:	9a06      	ldr	r2, [sp, #24]
 80074e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80074ec:	4293      	cmp	r3, r2
 80074ee:	db20      	blt.n	8007532 <_strtod_l+0x452>
 80074f0:	4c64      	ldr	r4, [pc, #400]	; (8007684 <_strtod_l+0x5a4>)
 80074f2:	f1c5 050f 	rsb	r5, r5, #15
 80074f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074fa:	4652      	mov	r2, sl
 80074fc:	465b      	mov	r3, fp
 80074fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007502:	f7f9 f881 	bl	8000608 <__aeabi_dmul>
 8007506:	9b06      	ldr	r3, [sp, #24]
 8007508:	1b5d      	subs	r5, r3, r5
 800750a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800750e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007512:	e7e3      	b.n	80074dc <_strtod_l+0x3fc>
 8007514:	9b06      	ldr	r3, [sp, #24]
 8007516:	3316      	adds	r3, #22
 8007518:	db0b      	blt.n	8007532 <_strtod_l+0x452>
 800751a:	9b05      	ldr	r3, [sp, #20]
 800751c:	1b9e      	subs	r6, r3, r6
 800751e:	4b59      	ldr	r3, [pc, #356]	; (8007684 <_strtod_l+0x5a4>)
 8007520:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007524:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007528:	4650      	mov	r0, sl
 800752a:	4659      	mov	r1, fp
 800752c:	f7f9 f996 	bl	800085c <__aeabi_ddiv>
 8007530:	e7d6      	b.n	80074e0 <_strtod_l+0x400>
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	eba5 0808 	sub.w	r8, r5, r8
 8007538:	4498      	add	r8, r3
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	dd74      	ble.n	800762a <_strtod_l+0x54a>
 8007540:	f018 030f 	ands.w	r3, r8, #15
 8007544:	d00a      	beq.n	800755c <_strtod_l+0x47c>
 8007546:	494f      	ldr	r1, [pc, #316]	; (8007684 <_strtod_l+0x5a4>)
 8007548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800754c:	4652      	mov	r2, sl
 800754e:	465b      	mov	r3, fp
 8007550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007554:	f7f9 f858 	bl	8000608 <__aeabi_dmul>
 8007558:	4682      	mov	sl, r0
 800755a:	468b      	mov	fp, r1
 800755c:	f038 080f 	bics.w	r8, r8, #15
 8007560:	d04f      	beq.n	8007602 <_strtod_l+0x522>
 8007562:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007566:	dd22      	ble.n	80075ae <_strtod_l+0x4ce>
 8007568:	2500      	movs	r5, #0
 800756a:	462e      	mov	r6, r5
 800756c:	9507      	str	r5, [sp, #28]
 800756e:	9505      	str	r5, [sp, #20]
 8007570:	2322      	movs	r3, #34	; 0x22
 8007572:	f8df b118 	ldr.w	fp, [pc, #280]	; 800768c <_strtod_l+0x5ac>
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	f04f 0a00 	mov.w	sl, #0
 800757c:	9b07      	ldr	r3, [sp, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f43f adf2 	beq.w	8007168 <_strtod_l+0x88>
 8007584:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007586:	4620      	mov	r0, r4
 8007588:	f001 fe92 	bl	80092b0 <_Bfree>
 800758c:	9905      	ldr	r1, [sp, #20]
 800758e:	4620      	mov	r0, r4
 8007590:	f001 fe8e 	bl	80092b0 <_Bfree>
 8007594:	4631      	mov	r1, r6
 8007596:	4620      	mov	r0, r4
 8007598:	f001 fe8a 	bl	80092b0 <_Bfree>
 800759c:	9907      	ldr	r1, [sp, #28]
 800759e:	4620      	mov	r0, r4
 80075a0:	f001 fe86 	bl	80092b0 <_Bfree>
 80075a4:	4629      	mov	r1, r5
 80075a6:	4620      	mov	r0, r4
 80075a8:	f001 fe82 	bl	80092b0 <_Bfree>
 80075ac:	e5dc      	b.n	8007168 <_strtod_l+0x88>
 80075ae:	4b36      	ldr	r3, [pc, #216]	; (8007688 <_strtod_l+0x5a8>)
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	2300      	movs	r3, #0
 80075b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075b8:	4650      	mov	r0, sl
 80075ba:	4659      	mov	r1, fp
 80075bc:	4699      	mov	r9, r3
 80075be:	f1b8 0f01 	cmp.w	r8, #1
 80075c2:	dc21      	bgt.n	8007608 <_strtod_l+0x528>
 80075c4:	b10b      	cbz	r3, 80075ca <_strtod_l+0x4ea>
 80075c6:	4682      	mov	sl, r0
 80075c8:	468b      	mov	fp, r1
 80075ca:	4b2f      	ldr	r3, [pc, #188]	; (8007688 <_strtod_l+0x5a8>)
 80075cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80075d4:	4652      	mov	r2, sl
 80075d6:	465b      	mov	r3, fp
 80075d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80075dc:	f7f9 f814 	bl	8000608 <__aeabi_dmul>
 80075e0:	4b2a      	ldr	r3, [pc, #168]	; (800768c <_strtod_l+0x5ac>)
 80075e2:	460a      	mov	r2, r1
 80075e4:	400b      	ands	r3, r1
 80075e6:	492a      	ldr	r1, [pc, #168]	; (8007690 <_strtod_l+0x5b0>)
 80075e8:	428b      	cmp	r3, r1
 80075ea:	4682      	mov	sl, r0
 80075ec:	d8bc      	bhi.n	8007568 <_strtod_l+0x488>
 80075ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075f2:	428b      	cmp	r3, r1
 80075f4:	bf86      	itte	hi
 80075f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007694 <_strtod_l+0x5b4>
 80075fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80075fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007602:	2300      	movs	r3, #0
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	e084      	b.n	8007712 <_strtod_l+0x632>
 8007608:	f018 0f01 	tst.w	r8, #1
 800760c:	d005      	beq.n	800761a <_strtod_l+0x53a>
 800760e:	9b04      	ldr	r3, [sp, #16]
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	f7f8 fff8 	bl	8000608 <__aeabi_dmul>
 8007618:	2301      	movs	r3, #1
 800761a:	9a04      	ldr	r2, [sp, #16]
 800761c:	3208      	adds	r2, #8
 800761e:	f109 0901 	add.w	r9, r9, #1
 8007622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007626:	9204      	str	r2, [sp, #16]
 8007628:	e7c9      	b.n	80075be <_strtod_l+0x4de>
 800762a:	d0ea      	beq.n	8007602 <_strtod_l+0x522>
 800762c:	f1c8 0800 	rsb	r8, r8, #0
 8007630:	f018 020f 	ands.w	r2, r8, #15
 8007634:	d00a      	beq.n	800764c <_strtod_l+0x56c>
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <_strtod_l+0x5a4>)
 8007638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800763c:	4650      	mov	r0, sl
 800763e:	4659      	mov	r1, fp
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f9 f90a 	bl	800085c <__aeabi_ddiv>
 8007648:	4682      	mov	sl, r0
 800764a:	468b      	mov	fp, r1
 800764c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007650:	d0d7      	beq.n	8007602 <_strtod_l+0x522>
 8007652:	f1b8 0f1f 	cmp.w	r8, #31
 8007656:	dd1f      	ble.n	8007698 <_strtod_l+0x5b8>
 8007658:	2500      	movs	r5, #0
 800765a:	462e      	mov	r6, r5
 800765c:	9507      	str	r5, [sp, #28]
 800765e:	9505      	str	r5, [sp, #20]
 8007660:	2322      	movs	r3, #34	; 0x22
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	f04f 0b00 	mov.w	fp, #0
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	e786      	b.n	800757c <_strtod_l+0x49c>
 800766e:	bf00      	nop
 8007670:	0800b3cd 	.word	0x0800b3cd
 8007674:	0800b408 	.word	0x0800b408
 8007678:	0800b3c5 	.word	0x0800b3c5
 800767c:	0800b54c 	.word	0x0800b54c
 8007680:	0800b7f8 	.word	0x0800b7f8
 8007684:	0800b6d8 	.word	0x0800b6d8
 8007688:	0800b6b0 	.word	0x0800b6b0
 800768c:	7ff00000 	.word	0x7ff00000
 8007690:	7ca00000 	.word	0x7ca00000
 8007694:	7fefffff 	.word	0x7fefffff
 8007698:	f018 0310 	ands.w	r3, r8, #16
 800769c:	bf18      	it	ne
 800769e:	236a      	movne	r3, #106	; 0x6a
 80076a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a50 <_strtod_l+0x970>
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	4650      	mov	r0, sl
 80076a8:	4659      	mov	r1, fp
 80076aa:	2300      	movs	r3, #0
 80076ac:	f018 0f01 	tst.w	r8, #1
 80076b0:	d004      	beq.n	80076bc <_strtod_l+0x5dc>
 80076b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076b6:	f7f8 ffa7 	bl	8000608 <__aeabi_dmul>
 80076ba:	2301      	movs	r3, #1
 80076bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80076c0:	f109 0908 	add.w	r9, r9, #8
 80076c4:	d1f2      	bne.n	80076ac <_strtod_l+0x5cc>
 80076c6:	b10b      	cbz	r3, 80076cc <_strtod_l+0x5ec>
 80076c8:	4682      	mov	sl, r0
 80076ca:	468b      	mov	fp, r1
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	b1c3      	cbz	r3, 8007702 <_strtod_l+0x622>
 80076d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076d8:	2b00      	cmp	r3, #0
 80076da:	4659      	mov	r1, fp
 80076dc:	dd11      	ble.n	8007702 <_strtod_l+0x622>
 80076de:	2b1f      	cmp	r3, #31
 80076e0:	f340 8124 	ble.w	800792c <_strtod_l+0x84c>
 80076e4:	2b34      	cmp	r3, #52	; 0x34
 80076e6:	bfde      	ittt	le
 80076e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80076ec:	f04f 33ff 	movle.w	r3, #4294967295
 80076f0:	fa03 f202 	lslle.w	r2, r3, r2
 80076f4:	f04f 0a00 	mov.w	sl, #0
 80076f8:	bfcc      	ite	gt
 80076fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80076fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	4650      	mov	r0, sl
 8007708:	4659      	mov	r1, fp
 800770a:	f7f9 f9e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800770e:	2800      	cmp	r0, #0
 8007710:	d1a2      	bne.n	8007658 <_strtod_l+0x578>
 8007712:	9b07      	ldr	r3, [sp, #28]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	9908      	ldr	r1, [sp, #32]
 8007718:	462b      	mov	r3, r5
 800771a:	463a      	mov	r2, r7
 800771c:	4620      	mov	r0, r4
 800771e:	f001 fe2f 	bl	8009380 <__s2b>
 8007722:	9007      	str	r0, [sp, #28]
 8007724:	2800      	cmp	r0, #0
 8007726:	f43f af1f 	beq.w	8007568 <_strtod_l+0x488>
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	1b9e      	subs	r6, r3, r6
 800772e:	9b06      	ldr	r3, [sp, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bfb4      	ite	lt
 8007734:	4633      	movlt	r3, r6
 8007736:	2300      	movge	r3, #0
 8007738:	930c      	str	r3, [sp, #48]	; 0x30
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	2500      	movs	r5, #0
 800773e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007742:	9312      	str	r3, [sp, #72]	; 0x48
 8007744:	462e      	mov	r6, r5
 8007746:	9b07      	ldr	r3, [sp, #28]
 8007748:	4620      	mov	r0, r4
 800774a:	6859      	ldr	r1, [r3, #4]
 800774c:	f001 fd70 	bl	8009230 <_Balloc>
 8007750:	9005      	str	r0, [sp, #20]
 8007752:	2800      	cmp	r0, #0
 8007754:	f43f af0c 	beq.w	8007570 <_strtod_l+0x490>
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	3202      	adds	r2, #2
 800775e:	f103 010c 	add.w	r1, r3, #12
 8007762:	0092      	lsls	r2, r2, #2
 8007764:	300c      	adds	r0, #12
 8007766:	f7fe ffdf 	bl	8006728 <memcpy>
 800776a:	ec4b ab10 	vmov	d0, sl, fp
 800776e:	aa1a      	add	r2, sp, #104	; 0x68
 8007770:	a919      	add	r1, sp, #100	; 0x64
 8007772:	4620      	mov	r0, r4
 8007774:	f002 f94a 	bl	8009a0c <__d2b>
 8007778:	ec4b ab18 	vmov	d8, sl, fp
 800777c:	9018      	str	r0, [sp, #96]	; 0x60
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f aef6 	beq.w	8007570 <_strtod_l+0x490>
 8007784:	2101      	movs	r1, #1
 8007786:	4620      	mov	r0, r4
 8007788:	f001 fe94 	bl	80094b4 <__i2b>
 800778c:	4606      	mov	r6, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f aeee 	beq.w	8007570 <_strtod_l+0x490>
 8007794:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007796:	9904      	ldr	r1, [sp, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	bfab      	itete	ge
 800779c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800779e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80077a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80077a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80077a6:	bfac      	ite	ge
 80077a8:	eb03 0902 	addge.w	r9, r3, r2
 80077ac:	1ad7      	sublt	r7, r2, r3
 80077ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077b0:	eba3 0801 	sub.w	r8, r3, r1
 80077b4:	4490      	add	r8, r2
 80077b6:	4ba1      	ldr	r3, [pc, #644]	; (8007a3c <_strtod_l+0x95c>)
 80077b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80077bc:	4598      	cmp	r8, r3
 80077be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077c2:	f280 80c7 	bge.w	8007954 <_strtod_l+0x874>
 80077c6:	eba3 0308 	sub.w	r3, r3, r8
 80077ca:	2b1f      	cmp	r3, #31
 80077cc:	eba2 0203 	sub.w	r2, r2, r3
 80077d0:	f04f 0101 	mov.w	r1, #1
 80077d4:	f300 80b1 	bgt.w	800793a <_strtod_l+0x85a>
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	930d      	str	r3, [sp, #52]	; 0x34
 80077de:	2300      	movs	r3, #0
 80077e0:	9308      	str	r3, [sp, #32]
 80077e2:	eb09 0802 	add.w	r8, r9, r2
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	45c1      	cmp	r9, r8
 80077ea:	4417      	add	r7, r2
 80077ec:	441f      	add	r7, r3
 80077ee:	464b      	mov	r3, r9
 80077f0:	bfa8      	it	ge
 80077f2:	4643      	movge	r3, r8
 80077f4:	42bb      	cmp	r3, r7
 80077f6:	bfa8      	it	ge
 80077f8:	463b      	movge	r3, r7
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfc2      	ittt	gt
 80077fe:	eba8 0803 	subgt.w	r8, r8, r3
 8007802:	1aff      	subgt	r7, r7, r3
 8007804:	eba9 0903 	subgt.w	r9, r9, r3
 8007808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800780a:	2b00      	cmp	r3, #0
 800780c:	dd17      	ble.n	800783e <_strtod_l+0x75e>
 800780e:	4631      	mov	r1, r6
 8007810:	461a      	mov	r2, r3
 8007812:	4620      	mov	r0, r4
 8007814:	f001 ff0e 	bl	8009634 <__pow5mult>
 8007818:	4606      	mov	r6, r0
 800781a:	2800      	cmp	r0, #0
 800781c:	f43f aea8 	beq.w	8007570 <_strtod_l+0x490>
 8007820:	4601      	mov	r1, r0
 8007822:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007824:	4620      	mov	r0, r4
 8007826:	f001 fe5b 	bl	80094e0 <__multiply>
 800782a:	900b      	str	r0, [sp, #44]	; 0x2c
 800782c:	2800      	cmp	r0, #0
 800782e:	f43f ae9f 	beq.w	8007570 <_strtod_l+0x490>
 8007832:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007834:	4620      	mov	r0, r4
 8007836:	f001 fd3b 	bl	80092b0 <_Bfree>
 800783a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783c:	9318      	str	r3, [sp, #96]	; 0x60
 800783e:	f1b8 0f00 	cmp.w	r8, #0
 8007842:	f300 808c 	bgt.w	800795e <_strtod_l+0x87e>
 8007846:	9b06      	ldr	r3, [sp, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	dd08      	ble.n	800785e <_strtod_l+0x77e>
 800784c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800784e:	9905      	ldr	r1, [sp, #20]
 8007850:	4620      	mov	r0, r4
 8007852:	f001 feef 	bl	8009634 <__pow5mult>
 8007856:	9005      	str	r0, [sp, #20]
 8007858:	2800      	cmp	r0, #0
 800785a:	f43f ae89 	beq.w	8007570 <_strtod_l+0x490>
 800785e:	2f00      	cmp	r7, #0
 8007860:	dd08      	ble.n	8007874 <_strtod_l+0x794>
 8007862:	9905      	ldr	r1, [sp, #20]
 8007864:	463a      	mov	r2, r7
 8007866:	4620      	mov	r0, r4
 8007868:	f001 ff3e 	bl	80096e8 <__lshift>
 800786c:	9005      	str	r0, [sp, #20]
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f ae7e 	beq.w	8007570 <_strtod_l+0x490>
 8007874:	f1b9 0f00 	cmp.w	r9, #0
 8007878:	dd08      	ble.n	800788c <_strtod_l+0x7ac>
 800787a:	4631      	mov	r1, r6
 800787c:	464a      	mov	r2, r9
 800787e:	4620      	mov	r0, r4
 8007880:	f001 ff32 	bl	80096e8 <__lshift>
 8007884:	4606      	mov	r6, r0
 8007886:	2800      	cmp	r0, #0
 8007888:	f43f ae72 	beq.w	8007570 <_strtod_l+0x490>
 800788c:	9a05      	ldr	r2, [sp, #20]
 800788e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007890:	4620      	mov	r0, r4
 8007892:	f001 ffb5 	bl	8009800 <__mdiff>
 8007896:	4605      	mov	r5, r0
 8007898:	2800      	cmp	r0, #0
 800789a:	f43f ae69 	beq.w	8007570 <_strtod_l+0x490>
 800789e:	68c3      	ldr	r3, [r0, #12]
 80078a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a2:	2300      	movs	r3, #0
 80078a4:	60c3      	str	r3, [r0, #12]
 80078a6:	4631      	mov	r1, r6
 80078a8:	f001 ff8e 	bl	80097c8 <__mcmp>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	da60      	bge.n	8007972 <_strtod_l+0x892>
 80078b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b2:	ea53 030a 	orrs.w	r3, r3, sl
 80078b6:	f040 8082 	bne.w	80079be <_strtod_l+0x8de>
 80078ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d17d      	bne.n	80079be <_strtod_l+0x8de>
 80078c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078c6:	0d1b      	lsrs	r3, r3, #20
 80078c8:	051b      	lsls	r3, r3, #20
 80078ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078ce:	d976      	bls.n	80079be <_strtod_l+0x8de>
 80078d0:	696b      	ldr	r3, [r5, #20]
 80078d2:	b913      	cbnz	r3, 80078da <_strtod_l+0x7fa>
 80078d4:	692b      	ldr	r3, [r5, #16]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	dd71      	ble.n	80079be <_strtod_l+0x8de>
 80078da:	4629      	mov	r1, r5
 80078dc:	2201      	movs	r2, #1
 80078de:	4620      	mov	r0, r4
 80078e0:	f001 ff02 	bl	80096e8 <__lshift>
 80078e4:	4631      	mov	r1, r6
 80078e6:	4605      	mov	r5, r0
 80078e8:	f001 ff6e 	bl	80097c8 <__mcmp>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	dd66      	ble.n	80079be <_strtod_l+0x8de>
 80078f0:	9904      	ldr	r1, [sp, #16]
 80078f2:	4a53      	ldr	r2, [pc, #332]	; (8007a40 <_strtod_l+0x960>)
 80078f4:	465b      	mov	r3, fp
 80078f6:	2900      	cmp	r1, #0
 80078f8:	f000 8081 	beq.w	80079fe <_strtod_l+0x91e>
 80078fc:	ea02 010b 	and.w	r1, r2, fp
 8007900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007904:	dc7b      	bgt.n	80079fe <_strtod_l+0x91e>
 8007906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800790a:	f77f aea9 	ble.w	8007660 <_strtod_l+0x580>
 800790e:	4b4d      	ldr	r3, [pc, #308]	; (8007a44 <_strtod_l+0x964>)
 8007910:	4650      	mov	r0, sl
 8007912:	4659      	mov	r1, fp
 8007914:	2200      	movs	r2, #0
 8007916:	f7f8 fe77 	bl	8000608 <__aeabi_dmul>
 800791a:	460b      	mov	r3, r1
 800791c:	4303      	orrs	r3, r0
 800791e:	bf08      	it	eq
 8007920:	2322      	moveq	r3, #34	; 0x22
 8007922:	4682      	mov	sl, r0
 8007924:	468b      	mov	fp, r1
 8007926:	bf08      	it	eq
 8007928:	6023      	streq	r3, [r4, #0]
 800792a:	e62b      	b.n	8007584 <_strtod_l+0x4a4>
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	ea03 0a0a 	and.w	sl, r3, sl
 8007938:	e6e3      	b.n	8007702 <_strtod_l+0x622>
 800793a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800793e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007942:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007946:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800794a:	fa01 f308 	lsl.w	r3, r1, r8
 800794e:	9308      	str	r3, [sp, #32]
 8007950:	910d      	str	r1, [sp, #52]	; 0x34
 8007952:	e746      	b.n	80077e2 <_strtod_l+0x702>
 8007954:	2300      	movs	r3, #0
 8007956:	9308      	str	r3, [sp, #32]
 8007958:	2301      	movs	r3, #1
 800795a:	930d      	str	r3, [sp, #52]	; 0x34
 800795c:	e741      	b.n	80077e2 <_strtod_l+0x702>
 800795e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007960:	4642      	mov	r2, r8
 8007962:	4620      	mov	r0, r4
 8007964:	f001 fec0 	bl	80096e8 <__lshift>
 8007968:	9018      	str	r0, [sp, #96]	; 0x60
 800796a:	2800      	cmp	r0, #0
 800796c:	f47f af6b 	bne.w	8007846 <_strtod_l+0x766>
 8007970:	e5fe      	b.n	8007570 <_strtod_l+0x490>
 8007972:	465f      	mov	r7, fp
 8007974:	d16e      	bne.n	8007a54 <_strtod_l+0x974>
 8007976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007978:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800797c:	b342      	cbz	r2, 80079d0 <_strtod_l+0x8f0>
 800797e:	4a32      	ldr	r2, [pc, #200]	; (8007a48 <_strtod_l+0x968>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d128      	bne.n	80079d6 <_strtod_l+0x8f6>
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	4651      	mov	r1, sl
 8007988:	b1eb      	cbz	r3, 80079c6 <_strtod_l+0x8e6>
 800798a:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <_strtod_l+0x960>)
 800798c:	403b      	ands	r3, r7
 800798e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007992:	f04f 32ff 	mov.w	r2, #4294967295
 8007996:	d819      	bhi.n	80079cc <_strtod_l+0x8ec>
 8007998:	0d1b      	lsrs	r3, r3, #20
 800799a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	4299      	cmp	r1, r3
 80079a4:	d117      	bne.n	80079d6 <_strtod_l+0x8f6>
 80079a6:	4b29      	ldr	r3, [pc, #164]	; (8007a4c <_strtod_l+0x96c>)
 80079a8:	429f      	cmp	r7, r3
 80079aa:	d102      	bne.n	80079b2 <_strtod_l+0x8d2>
 80079ac:	3101      	adds	r1, #1
 80079ae:	f43f addf 	beq.w	8007570 <_strtod_l+0x490>
 80079b2:	4b23      	ldr	r3, [pc, #140]	; (8007a40 <_strtod_l+0x960>)
 80079b4:	403b      	ands	r3, r7
 80079b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079ba:	f04f 0a00 	mov.w	sl, #0
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1a4      	bne.n	800790e <_strtod_l+0x82e>
 80079c4:	e5de      	b.n	8007584 <_strtod_l+0x4a4>
 80079c6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ca:	e7ea      	b.n	80079a2 <_strtod_l+0x8c2>
 80079cc:	4613      	mov	r3, r2
 80079ce:	e7e8      	b.n	80079a2 <_strtod_l+0x8c2>
 80079d0:	ea53 030a 	orrs.w	r3, r3, sl
 80079d4:	d08c      	beq.n	80078f0 <_strtod_l+0x810>
 80079d6:	9b08      	ldr	r3, [sp, #32]
 80079d8:	b1db      	cbz	r3, 8007a12 <_strtod_l+0x932>
 80079da:	423b      	tst	r3, r7
 80079dc:	d0ef      	beq.n	80079be <_strtod_l+0x8de>
 80079de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e0:	9a04      	ldr	r2, [sp, #16]
 80079e2:	4650      	mov	r0, sl
 80079e4:	4659      	mov	r1, fp
 80079e6:	b1c3      	cbz	r3, 8007a1a <_strtod_l+0x93a>
 80079e8:	f7ff fb5e 	bl	80070a8 <sulp>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	ec51 0b18 	vmov	r0, r1, d8
 80079f4:	f7f8 fc52 	bl	800029c <__adddf3>
 80079f8:	4682      	mov	sl, r0
 80079fa:	468b      	mov	fp, r1
 80079fc:	e7df      	b.n	80079be <_strtod_l+0x8de>
 80079fe:	4013      	ands	r3, r2
 8007a00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a10:	e7d5      	b.n	80079be <_strtod_l+0x8de>
 8007a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a14:	ea13 0f0a 	tst.w	r3, sl
 8007a18:	e7e0      	b.n	80079dc <_strtod_l+0x8fc>
 8007a1a:	f7ff fb45 	bl	80070a8 <sulp>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	ec51 0b18 	vmov	r0, r1, d8
 8007a26:	f7f8 fc37 	bl	8000298 <__aeabi_dsub>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4682      	mov	sl, r0
 8007a30:	468b      	mov	fp, r1
 8007a32:	f7f9 f851 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0c1      	beq.n	80079be <_strtod_l+0x8de>
 8007a3a:	e611      	b.n	8007660 <_strtod_l+0x580>
 8007a3c:	fffffc02 	.word	0xfffffc02
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	39500000 	.word	0x39500000
 8007a48:	000fffff 	.word	0x000fffff
 8007a4c:	7fefffff 	.word	0x7fefffff
 8007a50:	0800b420 	.word	0x0800b420
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	f002 f834 	bl	8009ac4 <__ratio>
 8007a5c:	ec59 8b10 	vmov	r8, r9, d0
 8007a60:	ee10 0a10 	vmov	r0, s0
 8007a64:	2200      	movs	r2, #0
 8007a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	f7f9 f848 	bl	8000b00 <__aeabi_dcmple>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d07a      	beq.n	8007b6a <_strtod_l+0xa8a>
 8007a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04a      	beq.n	8007b10 <_strtod_l+0xa30>
 8007a7a:	4b95      	ldr	r3, [pc, #596]	; (8007cd0 <_strtod_l+0xbf0>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007cd0 <_strtod_l+0xbf0>
 8007a86:	f04f 0800 	mov.w	r8, #0
 8007a8a:	4b92      	ldr	r3, [pc, #584]	; (8007cd4 <_strtod_l+0xbf4>)
 8007a8c:	403b      	ands	r3, r7
 8007a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a92:	4b91      	ldr	r3, [pc, #580]	; (8007cd8 <_strtod_l+0xbf8>)
 8007a94:	429a      	cmp	r2, r3
 8007a96:	f040 80b0 	bne.w	8007bfa <_strtod_l+0xb1a>
 8007a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007aa2:	ec4b ab10 	vmov	d0, sl, fp
 8007aa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007aaa:	f001 ff33 	bl	8009914 <__ulp>
 8007aae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ab2:	ec53 2b10 	vmov	r2, r3, d0
 8007ab6:	f7f8 fda7 	bl	8000608 <__aeabi_dmul>
 8007aba:	4652      	mov	r2, sl
 8007abc:	465b      	mov	r3, fp
 8007abe:	f7f8 fbed 	bl	800029c <__adddf3>
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4983      	ldr	r1, [pc, #524]	; (8007cd4 <_strtod_l+0xbf4>)
 8007ac6:	4a85      	ldr	r2, [pc, #532]	; (8007cdc <_strtod_l+0xbfc>)
 8007ac8:	4019      	ands	r1, r3
 8007aca:	4291      	cmp	r1, r2
 8007acc:	4682      	mov	sl, r0
 8007ace:	d960      	bls.n	8007b92 <_strtod_l+0xab2>
 8007ad0:	ee18 3a90 	vmov	r3, s17
 8007ad4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d104      	bne.n	8007ae6 <_strtod_l+0xa06>
 8007adc:	ee18 3a10 	vmov	r3, s16
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f43f ad45 	beq.w	8007570 <_strtod_l+0x490>
 8007ae6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007ce8 <_strtod_l+0xc08>
 8007aea:	f04f 3aff 	mov.w	sl, #4294967295
 8007aee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007af0:	4620      	mov	r0, r4
 8007af2:	f001 fbdd 	bl	80092b0 <_Bfree>
 8007af6:	9905      	ldr	r1, [sp, #20]
 8007af8:	4620      	mov	r0, r4
 8007afa:	f001 fbd9 	bl	80092b0 <_Bfree>
 8007afe:	4631      	mov	r1, r6
 8007b00:	4620      	mov	r0, r4
 8007b02:	f001 fbd5 	bl	80092b0 <_Bfree>
 8007b06:	4629      	mov	r1, r5
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f001 fbd1 	bl	80092b0 <_Bfree>
 8007b0e:	e61a      	b.n	8007746 <_strtod_l+0x666>
 8007b10:	f1ba 0f00 	cmp.w	sl, #0
 8007b14:	d11b      	bne.n	8007b4e <_strtod_l+0xa6e>
 8007b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b1a:	b9f3      	cbnz	r3, 8007b5a <_strtod_l+0xa7a>
 8007b1c:	4b6c      	ldr	r3, [pc, #432]	; (8007cd0 <_strtod_l+0xbf0>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4640      	mov	r0, r8
 8007b22:	4649      	mov	r1, r9
 8007b24:	f7f8 ffe2 	bl	8000aec <__aeabi_dcmplt>
 8007b28:	b9d0      	cbnz	r0, 8007b60 <_strtod_l+0xa80>
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	4b6c      	ldr	r3, [pc, #432]	; (8007ce0 <_strtod_l+0xc00>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	f7f8 fd69 	bl	8000608 <__aeabi_dmul>
 8007b36:	4680      	mov	r8, r0
 8007b38:	4689      	mov	r9, r1
 8007b3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b42:	9315      	str	r3, [sp, #84]	; 0x54
 8007b44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b4c:	e79d      	b.n	8007a8a <_strtod_l+0x9aa>
 8007b4e:	f1ba 0f01 	cmp.w	sl, #1
 8007b52:	d102      	bne.n	8007b5a <_strtod_l+0xa7a>
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	f43f ad83 	beq.w	8007660 <_strtod_l+0x580>
 8007b5a:	4b62      	ldr	r3, [pc, #392]	; (8007ce4 <_strtod_l+0xc04>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	e78e      	b.n	8007a7e <_strtod_l+0x99e>
 8007b60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007ce0 <_strtod_l+0xc00>
 8007b64:	f04f 0800 	mov.w	r8, #0
 8007b68:	e7e7      	b.n	8007b3a <_strtod_l+0xa5a>
 8007b6a:	4b5d      	ldr	r3, [pc, #372]	; (8007ce0 <_strtod_l+0xc00>)
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	2200      	movs	r2, #0
 8007b72:	f7f8 fd49 	bl	8000608 <__aeabi_dmul>
 8007b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4689      	mov	r9, r1
 8007b7c:	b933      	cbnz	r3, 8007b8c <_strtod_l+0xaac>
 8007b7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b82:	900e      	str	r0, [sp, #56]	; 0x38
 8007b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007b8a:	e7dd      	b.n	8007b48 <_strtod_l+0xa68>
 8007b8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007b90:	e7f9      	b.n	8007b86 <_strtod_l+0xaa6>
 8007b92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1a8      	bne.n	8007aee <_strtod_l+0xa0e>
 8007b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ba2:	0d1b      	lsrs	r3, r3, #20
 8007ba4:	051b      	lsls	r3, r3, #20
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d1a1      	bne.n	8007aee <_strtod_l+0xa0e>
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f9 f83b 	bl	8000c28 <__aeabi_d2lz>
 8007bb2:	f7f8 fcfb 	bl	80005ac <__aeabi_l2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb6b 	bl	8000298 <__aeabi_dsub>
 8007bc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bc8:	ea43 030a 	orr.w	r3, r3, sl
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	4680      	mov	r8, r0
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	d055      	beq.n	8007c80 <_strtod_l+0xba0>
 8007bd4:	a336      	add	r3, pc, #216	; (adr r3, 8007cb0 <_strtod_l+0xbd0>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f7f8 ff87 	bl	8000aec <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f47f acd0 	bne.w	8007584 <_strtod_l+0x4a4>
 8007be4:	a334      	add	r3, pc, #208	; (adr r3, 8007cb8 <_strtod_l+0xbd8>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f7f8 ff9b 	bl	8000b28 <__aeabi_dcmpgt>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f43f af7b 	beq.w	8007aee <_strtod_l+0xa0e>
 8007bf8:	e4c4      	b.n	8007584 <_strtod_l+0x4a4>
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	b333      	cbz	r3, 8007c4c <_strtod_l+0xb6c>
 8007bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c04:	d822      	bhi.n	8007c4c <_strtod_l+0xb6c>
 8007c06:	a32e      	add	r3, pc, #184	; (adr r3, 8007cc0 <_strtod_l+0xbe0>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	4649      	mov	r1, r9
 8007c10:	f7f8 ff76 	bl	8000b00 <__aeabi_dcmple>
 8007c14:	b1a0      	cbz	r0, 8007c40 <_strtod_l+0xb60>
 8007c16:	4649      	mov	r1, r9
 8007c18:	4640      	mov	r0, r8
 8007c1a:	f7f8 ffcd 	bl	8000bb8 <__aeabi_d2uiz>
 8007c1e:	2801      	cmp	r0, #1
 8007c20:	bf38      	it	cc
 8007c22:	2001      	movcc	r0, #1
 8007c24:	f7f8 fc76 	bl	8000514 <__aeabi_ui2d>
 8007c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	bb23      	cbnz	r3, 8007c7a <_strtod_l+0xb9a>
 8007c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c34:	9010      	str	r0, [sp, #64]	; 0x40
 8007c36:	9311      	str	r3, [sp, #68]	; 0x44
 8007c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c50:	eeb0 0a48 	vmov.f32	s0, s16
 8007c54:	eef0 0a68 	vmov.f32	s1, s17
 8007c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c5c:	f001 fe5a 	bl	8009914 <__ulp>
 8007c60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c64:	ec53 2b10 	vmov	r2, r3, d0
 8007c68:	f7f8 fcce 	bl	8000608 <__aeabi_dmul>
 8007c6c:	ec53 2b18 	vmov	r2, r3, d8
 8007c70:	f7f8 fb14 	bl	800029c <__adddf3>
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	e78d      	b.n	8007b96 <_strtod_l+0xab6>
 8007c7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007c7e:	e7db      	b.n	8007c38 <_strtod_l+0xb58>
 8007c80:	a311      	add	r3, pc, #68	; (adr r3, 8007cc8 <_strtod_l+0xbe8>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 ff31 	bl	8000aec <__aeabi_dcmplt>
 8007c8a:	e7b2      	b.n	8007bf2 <_strtod_l+0xb12>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	f7ff ba6b 	b.w	8007170 <_strtod_l+0x90>
 8007c9a:	2a65      	cmp	r2, #101	; 0x65
 8007c9c:	f43f ab5f 	beq.w	800735e <_strtod_l+0x27e>
 8007ca0:	2a45      	cmp	r2, #69	; 0x45
 8007ca2:	f43f ab5c 	beq.w	800735e <_strtod_l+0x27e>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f7ff bb94 	b.w	80073d4 <_strtod_l+0x2f4>
 8007cac:	f3af 8000 	nop.w
 8007cb0:	94a03595 	.word	0x94a03595
 8007cb4:	3fdfffff 	.word	0x3fdfffff
 8007cb8:	35afe535 	.word	0x35afe535
 8007cbc:	3fe00000 	.word	0x3fe00000
 8007cc0:	ffc00000 	.word	0xffc00000
 8007cc4:	41dfffff 	.word	0x41dfffff
 8007cc8:	94a03595 	.word	0x94a03595
 8007ccc:	3fcfffff 	.word	0x3fcfffff
 8007cd0:	3ff00000 	.word	0x3ff00000
 8007cd4:	7ff00000 	.word	0x7ff00000
 8007cd8:	7fe00000 	.word	0x7fe00000
 8007cdc:	7c9fffff 	.word	0x7c9fffff
 8007ce0:	3fe00000 	.word	0x3fe00000
 8007ce4:	bff00000 	.word	0xbff00000
 8007ce8:	7fefffff 	.word	0x7fefffff

08007cec <strtod>:
 8007cec:	460a      	mov	r2, r1
 8007cee:	4601      	mov	r1, r0
 8007cf0:	4802      	ldr	r0, [pc, #8]	; (8007cfc <strtod+0x10>)
 8007cf2:	4b03      	ldr	r3, [pc, #12]	; (8007d00 <strtod+0x14>)
 8007cf4:	6800      	ldr	r0, [r0, #0]
 8007cf6:	f7ff b9f3 	b.w	80070e0 <_strtod_l>
 8007cfa:	bf00      	nop
 8007cfc:	2000000c 	.word	0x2000000c
 8007d00:	20000074 	.word	0x20000074

08007d04 <_strtol_l.constprop.0>:
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0a:	d001      	beq.n	8007d10 <_strtol_l.constprop.0+0xc>
 8007d0c:	2b24      	cmp	r3, #36	; 0x24
 8007d0e:	d906      	bls.n	8007d1e <_strtol_l.constprop.0+0x1a>
 8007d10:	f7fe fce0 	bl	80066d4 <__errno>
 8007d14:	2316      	movs	r3, #22
 8007d16:	6003      	str	r3, [r0, #0]
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e04 <_strtol_l.constprop.0+0x100>
 8007d22:	460d      	mov	r5, r1
 8007d24:	462e      	mov	r6, r5
 8007d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d2e:	f017 0708 	ands.w	r7, r7, #8
 8007d32:	d1f7      	bne.n	8007d24 <_strtol_l.constprop.0+0x20>
 8007d34:	2c2d      	cmp	r4, #45	; 0x2d
 8007d36:	d132      	bne.n	8007d9e <_strtol_l.constprop.0+0x9a>
 8007d38:	782c      	ldrb	r4, [r5, #0]
 8007d3a:	2701      	movs	r7, #1
 8007d3c:	1cb5      	adds	r5, r6, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d05b      	beq.n	8007dfa <_strtol_l.constprop.0+0xf6>
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d109      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007d46:	2c30      	cmp	r4, #48	; 0x30
 8007d48:	d107      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007d4a:	782c      	ldrb	r4, [r5, #0]
 8007d4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d50:	2c58      	cmp	r4, #88	; 0x58
 8007d52:	d14d      	bne.n	8007df0 <_strtol_l.constprop.0+0xec>
 8007d54:	786c      	ldrb	r4, [r5, #1]
 8007d56:	2310      	movs	r3, #16
 8007d58:	3502      	adds	r5, #2
 8007d5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d62:	f04f 0c00 	mov.w	ip, #0
 8007d66:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d6a:	4666      	mov	r6, ip
 8007d6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d74:	f1be 0f09 	cmp.w	lr, #9
 8007d78:	d816      	bhi.n	8007da8 <_strtol_l.constprop.0+0xa4>
 8007d7a:	4674      	mov	r4, lr
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	dd24      	ble.n	8007dca <_strtol_l.constprop.0+0xc6>
 8007d80:	f1bc 0f00 	cmp.w	ip, #0
 8007d84:	db1e      	blt.n	8007dc4 <_strtol_l.constprop.0+0xc0>
 8007d86:	45b1      	cmp	r9, r6
 8007d88:	d31c      	bcc.n	8007dc4 <_strtol_l.constprop.0+0xc0>
 8007d8a:	d101      	bne.n	8007d90 <_strtol_l.constprop.0+0x8c>
 8007d8c:	45a2      	cmp	sl, r4
 8007d8e:	db19      	blt.n	8007dc4 <_strtol_l.constprop.0+0xc0>
 8007d90:	fb06 4603 	mla	r6, r6, r3, r4
 8007d94:	f04f 0c01 	mov.w	ip, #1
 8007d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d9c:	e7e8      	b.n	8007d70 <_strtol_l.constprop.0+0x6c>
 8007d9e:	2c2b      	cmp	r4, #43	; 0x2b
 8007da0:	bf04      	itt	eq
 8007da2:	782c      	ldrbeq	r4, [r5, #0]
 8007da4:	1cb5      	addeq	r5, r6, #2
 8007da6:	e7ca      	b.n	8007d3e <_strtol_l.constprop.0+0x3a>
 8007da8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007dac:	f1be 0f19 	cmp.w	lr, #25
 8007db0:	d801      	bhi.n	8007db6 <_strtol_l.constprop.0+0xb2>
 8007db2:	3c37      	subs	r4, #55	; 0x37
 8007db4:	e7e2      	b.n	8007d7c <_strtol_l.constprop.0+0x78>
 8007db6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007dba:	f1be 0f19 	cmp.w	lr, #25
 8007dbe:	d804      	bhi.n	8007dca <_strtol_l.constprop.0+0xc6>
 8007dc0:	3c57      	subs	r4, #87	; 0x57
 8007dc2:	e7db      	b.n	8007d7c <_strtol_l.constprop.0+0x78>
 8007dc4:	f04f 3cff 	mov.w	ip, #4294967295
 8007dc8:	e7e6      	b.n	8007d98 <_strtol_l.constprop.0+0x94>
 8007dca:	f1bc 0f00 	cmp.w	ip, #0
 8007dce:	da05      	bge.n	8007ddc <_strtol_l.constprop.0+0xd8>
 8007dd0:	2322      	movs	r3, #34	; 0x22
 8007dd2:	6003      	str	r3, [r0, #0]
 8007dd4:	4646      	mov	r6, r8
 8007dd6:	b942      	cbnz	r2, 8007dea <_strtol_l.constprop.0+0xe6>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	e79e      	b.n	8007d1a <_strtol_l.constprop.0+0x16>
 8007ddc:	b107      	cbz	r7, 8007de0 <_strtol_l.constprop.0+0xdc>
 8007dde:	4276      	negs	r6, r6
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d0f9      	beq.n	8007dd8 <_strtol_l.constprop.0+0xd4>
 8007de4:	f1bc 0f00 	cmp.w	ip, #0
 8007de8:	d000      	beq.n	8007dec <_strtol_l.constprop.0+0xe8>
 8007dea:	1e69      	subs	r1, r5, #1
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	e7f3      	b.n	8007dd8 <_strtol_l.constprop.0+0xd4>
 8007df0:	2430      	movs	r4, #48	; 0x30
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1b1      	bne.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007df6:	2308      	movs	r3, #8
 8007df8:	e7af      	b.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007dfa:	2c30      	cmp	r4, #48	; 0x30
 8007dfc:	d0a5      	beq.n	8007d4a <_strtol_l.constprop.0+0x46>
 8007dfe:	230a      	movs	r3, #10
 8007e00:	e7ab      	b.n	8007d5a <_strtol_l.constprop.0+0x56>
 8007e02:	bf00      	nop
 8007e04:	0800b449 	.word	0x0800b449

08007e08 <strtol>:
 8007e08:	4613      	mov	r3, r2
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4802      	ldr	r0, [pc, #8]	; (8007e18 <strtol+0x10>)
 8007e10:	6800      	ldr	r0, [r0, #0]
 8007e12:	f7ff bf77 	b.w	8007d04 <_strtol_l.constprop.0>
 8007e16:	bf00      	nop
 8007e18:	2000000c 	.word	0x2000000c

08007e1c <quorem>:
 8007e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	6903      	ldr	r3, [r0, #16]
 8007e22:	690c      	ldr	r4, [r1, #16]
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	4607      	mov	r7, r0
 8007e28:	f2c0 8081 	blt.w	8007f2e <quorem+0x112>
 8007e2c:	3c01      	subs	r4, #1
 8007e2e:	f101 0814 	add.w	r8, r1, #20
 8007e32:	f100 0514 	add.w	r5, r0, #20
 8007e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e44:	3301      	adds	r3, #1
 8007e46:	429a      	cmp	r2, r3
 8007e48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e50:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e54:	d331      	bcc.n	8007eba <quorem+0x9e>
 8007e56:	f04f 0e00 	mov.w	lr, #0
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	46ac      	mov	ip, r5
 8007e5e:	46f2      	mov	sl, lr
 8007e60:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e64:	b293      	uxth	r3, r2
 8007e66:	fb06 e303 	mla	r3, r6, r3, lr
 8007e6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	ebaa 0303 	sub.w	r3, sl, r3
 8007e74:	f8dc a000 	ldr.w	sl, [ip]
 8007e78:	0c12      	lsrs	r2, r2, #16
 8007e7a:	fa13 f38a 	uxtah	r3, r3, sl
 8007e7e:	fb06 e202 	mla	r2, r6, r2, lr
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	9b00      	ldr	r3, [sp, #0]
 8007e86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e8a:	b292      	uxth	r2, r2
 8007e8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e94:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e98:	4581      	cmp	r9, r0
 8007e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e9e:	f84c 3b04 	str.w	r3, [ip], #4
 8007ea2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ea6:	d2db      	bcs.n	8007e60 <quorem+0x44>
 8007ea8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007eac:	b92b      	cbnz	r3, 8007eba <quorem+0x9e>
 8007eae:	9b01      	ldr	r3, [sp, #4]
 8007eb0:	3b04      	subs	r3, #4
 8007eb2:	429d      	cmp	r5, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	d32e      	bcc.n	8007f16 <quorem+0xfa>
 8007eb8:	613c      	str	r4, [r7, #16]
 8007eba:	4638      	mov	r0, r7
 8007ebc:	f001 fc84 	bl	80097c8 <__mcmp>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	db24      	blt.n	8007f0e <quorem+0xf2>
 8007ec4:	3601      	adds	r6, #1
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f04f 0c00 	mov.w	ip, #0
 8007ecc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ed0:	f8d0 e000 	ldr.w	lr, [r0]
 8007ed4:	b293      	uxth	r3, r2
 8007ed6:	ebac 0303 	sub.w	r3, ip, r3
 8007eda:	0c12      	lsrs	r2, r2, #16
 8007edc:	fa13 f38e 	uxtah	r3, r3, lr
 8007ee0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eee:	45c1      	cmp	r9, r8
 8007ef0:	f840 3b04 	str.w	r3, [r0], #4
 8007ef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ef8:	d2e8      	bcs.n	8007ecc <quorem+0xb0>
 8007efa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f02:	b922      	cbnz	r2, 8007f0e <quorem+0xf2>
 8007f04:	3b04      	subs	r3, #4
 8007f06:	429d      	cmp	r5, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	d30a      	bcc.n	8007f22 <quorem+0x106>
 8007f0c:	613c      	str	r4, [r7, #16]
 8007f0e:	4630      	mov	r0, r6
 8007f10:	b003      	add	sp, #12
 8007f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	3b04      	subs	r3, #4
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d1cc      	bne.n	8007eb8 <quorem+0x9c>
 8007f1e:	3c01      	subs	r4, #1
 8007f20:	e7c7      	b.n	8007eb2 <quorem+0x96>
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	3b04      	subs	r3, #4
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	d1f0      	bne.n	8007f0c <quorem+0xf0>
 8007f2a:	3c01      	subs	r4, #1
 8007f2c:	e7eb      	b.n	8007f06 <quorem+0xea>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e7ee      	b.n	8007f10 <quorem+0xf4>
 8007f32:	0000      	movs	r0, r0
 8007f34:	0000      	movs	r0, r0
	...

08007f38 <_dtoa_r>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	ed2d 8b04 	vpush	{d8-d9}
 8007f40:	ec57 6b10 	vmov	r6, r7, d0
 8007f44:	b093      	sub	sp, #76	; 0x4c
 8007f46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f4c:	9106      	str	r1, [sp, #24]
 8007f4e:	ee10 aa10 	vmov	sl, s0
 8007f52:	4604      	mov	r4, r0
 8007f54:	9209      	str	r2, [sp, #36]	; 0x24
 8007f56:	930c      	str	r3, [sp, #48]	; 0x30
 8007f58:	46bb      	mov	fp, r7
 8007f5a:	b975      	cbnz	r5, 8007f7a <_dtoa_r+0x42>
 8007f5c:	2010      	movs	r0, #16
 8007f5e:	f001 f94d 	bl	80091fc <malloc>
 8007f62:	4602      	mov	r2, r0
 8007f64:	6260      	str	r0, [r4, #36]	; 0x24
 8007f66:	b920      	cbnz	r0, 8007f72 <_dtoa_r+0x3a>
 8007f68:	4ba7      	ldr	r3, [pc, #668]	; (8008208 <_dtoa_r+0x2d0>)
 8007f6a:	21ea      	movs	r1, #234	; 0xea
 8007f6c:	48a7      	ldr	r0, [pc, #668]	; (800820c <_dtoa_r+0x2d4>)
 8007f6e:	f002 f8ad 	bl	800a0cc <__assert_func>
 8007f72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f76:	6005      	str	r5, [r0, #0]
 8007f78:	60c5      	str	r5, [r0, #12]
 8007f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f7c:	6819      	ldr	r1, [r3, #0]
 8007f7e:	b151      	cbz	r1, 8007f96 <_dtoa_r+0x5e>
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	604a      	str	r2, [r1, #4]
 8007f84:	2301      	movs	r3, #1
 8007f86:	4093      	lsls	r3, r2
 8007f88:	608b      	str	r3, [r1, #8]
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f001 f990 	bl	80092b0 <_Bfree>
 8007f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	1e3b      	subs	r3, r7, #0
 8007f98:	bfaa      	itet	ge
 8007f9a:	2300      	movge	r3, #0
 8007f9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007fa0:	f8c8 3000 	strge.w	r3, [r8]
 8007fa4:	4b9a      	ldr	r3, [pc, #616]	; (8008210 <_dtoa_r+0x2d8>)
 8007fa6:	bfbc      	itt	lt
 8007fa8:	2201      	movlt	r2, #1
 8007faa:	f8c8 2000 	strlt.w	r2, [r8]
 8007fae:	ea33 030b 	bics.w	r3, r3, fp
 8007fb2:	d11b      	bne.n	8007fec <_dtoa_r+0xb4>
 8007fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fc0:	4333      	orrs	r3, r6
 8007fc2:	f000 8592 	beq.w	8008aea <_dtoa_r+0xbb2>
 8007fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc8:	b963      	cbnz	r3, 8007fe4 <_dtoa_r+0xac>
 8007fca:	4b92      	ldr	r3, [pc, #584]	; (8008214 <_dtoa_r+0x2dc>)
 8007fcc:	e022      	b.n	8008014 <_dtoa_r+0xdc>
 8007fce:	4b92      	ldr	r3, [pc, #584]	; (8008218 <_dtoa_r+0x2e0>)
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	9801      	ldr	r0, [sp, #4]
 8007fda:	b013      	add	sp, #76	; 0x4c
 8007fdc:	ecbd 8b04 	vpop	{d8-d9}
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	4b8b      	ldr	r3, [pc, #556]	; (8008214 <_dtoa_r+0x2dc>)
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	3303      	adds	r3, #3
 8007fea:	e7f3      	b.n	8007fd4 <_dtoa_r+0x9c>
 8007fec:	2200      	movs	r2, #0
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	4659      	mov	r1, fp
 8007ff4:	f7f8 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ff8:	ec4b ab19 	vmov	d9, sl, fp
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	b158      	cbz	r0, 8008018 <_dtoa_r+0xe0>
 8008000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008002:	2301      	movs	r3, #1
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 856b 	beq.w	8008ae4 <_dtoa_r+0xbac>
 800800e:	4883      	ldr	r0, [pc, #524]	; (800821c <_dtoa_r+0x2e4>)
 8008010:	6018      	str	r0, [r3, #0]
 8008012:	1e43      	subs	r3, r0, #1
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	e7df      	b.n	8007fd8 <_dtoa_r+0xa0>
 8008018:	ec4b ab10 	vmov	d0, sl, fp
 800801c:	aa10      	add	r2, sp, #64	; 0x40
 800801e:	a911      	add	r1, sp, #68	; 0x44
 8008020:	4620      	mov	r0, r4
 8008022:	f001 fcf3 	bl	8009a0c <__d2b>
 8008026:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800802a:	ee08 0a10 	vmov	s16, r0
 800802e:	2d00      	cmp	r5, #0
 8008030:	f000 8084 	beq.w	800813c <_dtoa_r+0x204>
 8008034:	ee19 3a90 	vmov	r3, s19
 8008038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800803c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008040:	4656      	mov	r6, sl
 8008042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800804a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800804e:	4b74      	ldr	r3, [pc, #464]	; (8008220 <_dtoa_r+0x2e8>)
 8008050:	2200      	movs	r2, #0
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 f91f 	bl	8000298 <__aeabi_dsub>
 800805a:	a365      	add	r3, pc, #404	; (adr r3, 80081f0 <_dtoa_r+0x2b8>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 fad2 	bl	8000608 <__aeabi_dmul>
 8008064:	a364      	add	r3, pc, #400	; (adr r3, 80081f8 <_dtoa_r+0x2c0>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f917 	bl	800029c <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	4628      	mov	r0, r5
 8008072:	460f      	mov	r7, r1
 8008074:	f7f8 fa5e 	bl	8000534 <__aeabi_i2d>
 8008078:	a361      	add	r3, pc, #388	; (adr r3, 8008200 <_dtoa_r+0x2c8>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 fac3 	bl	8000608 <__aeabi_dmul>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7f8 f907 	bl	800029c <__adddf3>
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	f7f8 fd69 	bl	8000b68 <__aeabi_d2iz>
 8008096:	2200      	movs	r2, #0
 8008098:	9000      	str	r0, [sp, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fd24 	bl	8000aec <__aeabi_dcmplt>
 80080a4:	b150      	cbz	r0, 80080bc <_dtoa_r+0x184>
 80080a6:	9800      	ldr	r0, [sp, #0]
 80080a8:	f7f8 fa44 	bl	8000534 <__aeabi_i2d>
 80080ac:	4632      	mov	r2, r6
 80080ae:	463b      	mov	r3, r7
 80080b0:	f7f8 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80080b4:	b910      	cbnz	r0, 80080bc <_dtoa_r+0x184>
 80080b6:	9b00      	ldr	r3, [sp, #0]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	9b00      	ldr	r3, [sp, #0]
 80080be:	2b16      	cmp	r3, #22
 80080c0:	d85a      	bhi.n	8008178 <_dtoa_r+0x240>
 80080c2:	9a00      	ldr	r2, [sp, #0]
 80080c4:	4b57      	ldr	r3, [pc, #348]	; (8008224 <_dtoa_r+0x2ec>)
 80080c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	ec51 0b19 	vmov	r0, r1, d9
 80080d2:	f7f8 fd0b 	bl	8000aec <__aeabi_dcmplt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d050      	beq.n	800817c <_dtoa_r+0x244>
 80080da:	9b00      	ldr	r3, [sp, #0]
 80080dc:	3b01      	subs	r3, #1
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2300      	movs	r3, #0
 80080e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080e6:	1b5d      	subs	r5, r3, r5
 80080e8:	1e6b      	subs	r3, r5, #1
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	bf45      	ittet	mi
 80080ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80080f2:	9304      	strmi	r3, [sp, #16]
 80080f4:	2300      	movpl	r3, #0
 80080f6:	2300      	movmi	r3, #0
 80080f8:	bf4c      	ite	mi
 80080fa:	9305      	strmi	r3, [sp, #20]
 80080fc:	9304      	strpl	r3, [sp, #16]
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	db3d      	blt.n	8008180 <_dtoa_r+0x248>
 8008104:	9b05      	ldr	r3, [sp, #20]
 8008106:	9a00      	ldr	r2, [sp, #0]
 8008108:	920a      	str	r2, [sp, #40]	; 0x28
 800810a:	4413      	add	r3, r2
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	2300      	movs	r3, #0
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	2b09      	cmp	r3, #9
 8008116:	f200 8089 	bhi.w	800822c <_dtoa_r+0x2f4>
 800811a:	2b05      	cmp	r3, #5
 800811c:	bfc4      	itt	gt
 800811e:	3b04      	subgt	r3, #4
 8008120:	9306      	strgt	r3, [sp, #24]
 8008122:	9b06      	ldr	r3, [sp, #24]
 8008124:	f1a3 0302 	sub.w	r3, r3, #2
 8008128:	bfcc      	ite	gt
 800812a:	2500      	movgt	r5, #0
 800812c:	2501      	movle	r5, #1
 800812e:	2b03      	cmp	r3, #3
 8008130:	f200 8087 	bhi.w	8008242 <_dtoa_r+0x30a>
 8008134:	e8df f003 	tbb	[pc, r3]
 8008138:	59383a2d 	.word	0x59383a2d
 800813c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008140:	441d      	add	r5, r3
 8008142:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008146:	2b20      	cmp	r3, #32
 8008148:	bfc1      	itttt	gt
 800814a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800814e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008152:	fa0b f303 	lslgt.w	r3, fp, r3
 8008156:	fa26 f000 	lsrgt.w	r0, r6, r0
 800815a:	bfda      	itte	le
 800815c:	f1c3 0320 	rsble	r3, r3, #32
 8008160:	fa06 f003 	lslle.w	r0, r6, r3
 8008164:	4318      	orrgt	r0, r3
 8008166:	f7f8 f9d5 	bl	8000514 <__aeabi_ui2d>
 800816a:	2301      	movs	r3, #1
 800816c:	4606      	mov	r6, r0
 800816e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008172:	3d01      	subs	r5, #1
 8008174:	930e      	str	r3, [sp, #56]	; 0x38
 8008176:	e76a      	b.n	800804e <_dtoa_r+0x116>
 8008178:	2301      	movs	r3, #1
 800817a:	e7b2      	b.n	80080e2 <_dtoa_r+0x1aa>
 800817c:	900b      	str	r0, [sp, #44]	; 0x2c
 800817e:	e7b1      	b.n	80080e4 <_dtoa_r+0x1ac>
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	9a00      	ldr	r2, [sp, #0]
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	9304      	str	r3, [sp, #16]
 8008188:	4253      	negs	r3, r2
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	2300      	movs	r3, #0
 800818e:	930a      	str	r3, [sp, #40]	; 0x28
 8008190:	e7bf      	b.n	8008112 <_dtoa_r+0x1da>
 8008192:	2300      	movs	r3, #0
 8008194:	9308      	str	r3, [sp, #32]
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	2b00      	cmp	r3, #0
 800819a:	dc55      	bgt.n	8008248 <_dtoa_r+0x310>
 800819c:	2301      	movs	r3, #1
 800819e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081a2:	461a      	mov	r2, r3
 80081a4:	9209      	str	r2, [sp, #36]	; 0x24
 80081a6:	e00c      	b.n	80081c2 <_dtoa_r+0x28a>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e7f3      	b.n	8008194 <_dtoa_r+0x25c>
 80081ac:	2300      	movs	r3, #0
 80081ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b0:	9308      	str	r3, [sp, #32]
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	4413      	add	r3, r2
 80081b6:	9302      	str	r3, [sp, #8]
 80081b8:	3301      	adds	r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	9303      	str	r3, [sp, #12]
 80081be:	bfb8      	it	lt
 80081c0:	2301      	movlt	r3, #1
 80081c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081c4:	2200      	movs	r2, #0
 80081c6:	6042      	str	r2, [r0, #4]
 80081c8:	2204      	movs	r2, #4
 80081ca:	f102 0614 	add.w	r6, r2, #20
 80081ce:	429e      	cmp	r6, r3
 80081d0:	6841      	ldr	r1, [r0, #4]
 80081d2:	d93d      	bls.n	8008250 <_dtoa_r+0x318>
 80081d4:	4620      	mov	r0, r4
 80081d6:	f001 f82b 	bl	8009230 <_Balloc>
 80081da:	9001      	str	r0, [sp, #4]
 80081dc:	2800      	cmp	r0, #0
 80081de:	d13b      	bne.n	8008258 <_dtoa_r+0x320>
 80081e0:	4b11      	ldr	r3, [pc, #68]	; (8008228 <_dtoa_r+0x2f0>)
 80081e2:	4602      	mov	r2, r0
 80081e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081e8:	e6c0      	b.n	8007f6c <_dtoa_r+0x34>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e7df      	b.n	80081ae <_dtoa_r+0x276>
 80081ee:	bf00      	nop
 80081f0:	636f4361 	.word	0x636f4361
 80081f4:	3fd287a7 	.word	0x3fd287a7
 80081f8:	8b60c8b3 	.word	0x8b60c8b3
 80081fc:	3fc68a28 	.word	0x3fc68a28
 8008200:	509f79fb 	.word	0x509f79fb
 8008204:	3fd34413 	.word	0x3fd34413
 8008208:	0800b556 	.word	0x0800b556
 800820c:	0800b56d 	.word	0x0800b56d
 8008210:	7ff00000 	.word	0x7ff00000
 8008214:	0800b552 	.word	0x0800b552
 8008218:	0800b549 	.word	0x0800b549
 800821c:	0800b3d1 	.word	0x0800b3d1
 8008220:	3ff80000 	.word	0x3ff80000
 8008224:	0800b6d8 	.word	0x0800b6d8
 8008228:	0800b5c8 	.word	0x0800b5c8
 800822c:	2501      	movs	r5, #1
 800822e:	2300      	movs	r3, #0
 8008230:	9306      	str	r3, [sp, #24]
 8008232:	9508      	str	r5, [sp, #32]
 8008234:	f04f 33ff 	mov.w	r3, #4294967295
 8008238:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800823c:	2200      	movs	r2, #0
 800823e:	2312      	movs	r3, #18
 8008240:	e7b0      	b.n	80081a4 <_dtoa_r+0x26c>
 8008242:	2301      	movs	r3, #1
 8008244:	9308      	str	r3, [sp, #32]
 8008246:	e7f5      	b.n	8008234 <_dtoa_r+0x2fc>
 8008248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800824e:	e7b8      	b.n	80081c2 <_dtoa_r+0x28a>
 8008250:	3101      	adds	r1, #1
 8008252:	6041      	str	r1, [r0, #4]
 8008254:	0052      	lsls	r2, r2, #1
 8008256:	e7b8      	b.n	80081ca <_dtoa_r+0x292>
 8008258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800825a:	9a01      	ldr	r2, [sp, #4]
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	2b0e      	cmp	r3, #14
 8008262:	f200 809d 	bhi.w	80083a0 <_dtoa_r+0x468>
 8008266:	2d00      	cmp	r5, #0
 8008268:	f000 809a 	beq.w	80083a0 <_dtoa_r+0x468>
 800826c:	9b00      	ldr	r3, [sp, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	dd32      	ble.n	80082d8 <_dtoa_r+0x3a0>
 8008272:	4ab7      	ldr	r2, [pc, #732]	; (8008550 <_dtoa_r+0x618>)
 8008274:	f003 030f 	and.w	r3, r3, #15
 8008278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800827c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008280:	9b00      	ldr	r3, [sp, #0]
 8008282:	05d8      	lsls	r0, r3, #23
 8008284:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008288:	d516      	bpl.n	80082b8 <_dtoa_r+0x380>
 800828a:	4bb2      	ldr	r3, [pc, #712]	; (8008554 <_dtoa_r+0x61c>)
 800828c:	ec51 0b19 	vmov	r0, r1, d9
 8008290:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008294:	f7f8 fae2 	bl	800085c <__aeabi_ddiv>
 8008298:	f007 070f 	and.w	r7, r7, #15
 800829c:	4682      	mov	sl, r0
 800829e:	468b      	mov	fp, r1
 80082a0:	2503      	movs	r5, #3
 80082a2:	4eac      	ldr	r6, [pc, #688]	; (8008554 <_dtoa_r+0x61c>)
 80082a4:	b957      	cbnz	r7, 80082bc <_dtoa_r+0x384>
 80082a6:	4642      	mov	r2, r8
 80082a8:	464b      	mov	r3, r9
 80082aa:	4650      	mov	r0, sl
 80082ac:	4659      	mov	r1, fp
 80082ae:	f7f8 fad5 	bl	800085c <__aeabi_ddiv>
 80082b2:	4682      	mov	sl, r0
 80082b4:	468b      	mov	fp, r1
 80082b6:	e028      	b.n	800830a <_dtoa_r+0x3d2>
 80082b8:	2502      	movs	r5, #2
 80082ba:	e7f2      	b.n	80082a2 <_dtoa_r+0x36a>
 80082bc:	07f9      	lsls	r1, r7, #31
 80082be:	d508      	bpl.n	80082d2 <_dtoa_r+0x39a>
 80082c0:	4640      	mov	r0, r8
 80082c2:	4649      	mov	r1, r9
 80082c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082c8:	f7f8 f99e 	bl	8000608 <__aeabi_dmul>
 80082cc:	3501      	adds	r5, #1
 80082ce:	4680      	mov	r8, r0
 80082d0:	4689      	mov	r9, r1
 80082d2:	107f      	asrs	r7, r7, #1
 80082d4:	3608      	adds	r6, #8
 80082d6:	e7e5      	b.n	80082a4 <_dtoa_r+0x36c>
 80082d8:	f000 809b 	beq.w	8008412 <_dtoa_r+0x4da>
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	4f9d      	ldr	r7, [pc, #628]	; (8008554 <_dtoa_r+0x61c>)
 80082e0:	425e      	negs	r6, r3
 80082e2:	4b9b      	ldr	r3, [pc, #620]	; (8008550 <_dtoa_r+0x618>)
 80082e4:	f006 020f 	and.w	r2, r6, #15
 80082e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	ec51 0b19 	vmov	r0, r1, d9
 80082f4:	f7f8 f988 	bl	8000608 <__aeabi_dmul>
 80082f8:	1136      	asrs	r6, r6, #4
 80082fa:	4682      	mov	sl, r0
 80082fc:	468b      	mov	fp, r1
 80082fe:	2300      	movs	r3, #0
 8008300:	2502      	movs	r5, #2
 8008302:	2e00      	cmp	r6, #0
 8008304:	d17a      	bne.n	80083fc <_dtoa_r+0x4c4>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1d3      	bne.n	80082b2 <_dtoa_r+0x37a>
 800830a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8082 	beq.w	8008416 <_dtoa_r+0x4de>
 8008312:	4b91      	ldr	r3, [pc, #580]	; (8008558 <_dtoa_r+0x620>)
 8008314:	2200      	movs	r2, #0
 8008316:	4650      	mov	r0, sl
 8008318:	4659      	mov	r1, fp
 800831a:	f7f8 fbe7 	bl	8000aec <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	d079      	beq.n	8008416 <_dtoa_r+0x4de>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d076      	beq.n	8008416 <_dtoa_r+0x4de>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	dd36      	ble.n	800839c <_dtoa_r+0x464>
 800832e:	9b00      	ldr	r3, [sp, #0]
 8008330:	4650      	mov	r0, sl
 8008332:	4659      	mov	r1, fp
 8008334:	1e5f      	subs	r7, r3, #1
 8008336:	2200      	movs	r2, #0
 8008338:	4b88      	ldr	r3, [pc, #544]	; (800855c <_dtoa_r+0x624>)
 800833a:	f7f8 f965 	bl	8000608 <__aeabi_dmul>
 800833e:	9e02      	ldr	r6, [sp, #8]
 8008340:	4682      	mov	sl, r0
 8008342:	468b      	mov	fp, r1
 8008344:	3501      	adds	r5, #1
 8008346:	4628      	mov	r0, r5
 8008348:	f7f8 f8f4 	bl	8000534 <__aeabi_i2d>
 800834c:	4652      	mov	r2, sl
 800834e:	465b      	mov	r3, fp
 8008350:	f7f8 f95a 	bl	8000608 <__aeabi_dmul>
 8008354:	4b82      	ldr	r3, [pc, #520]	; (8008560 <_dtoa_r+0x628>)
 8008356:	2200      	movs	r2, #0
 8008358:	f7f7 ffa0 	bl	800029c <__adddf3>
 800835c:	46d0      	mov	r8, sl
 800835e:	46d9      	mov	r9, fp
 8008360:	4682      	mov	sl, r0
 8008362:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008366:	2e00      	cmp	r6, #0
 8008368:	d158      	bne.n	800841c <_dtoa_r+0x4e4>
 800836a:	4b7e      	ldr	r3, [pc, #504]	; (8008564 <_dtoa_r+0x62c>)
 800836c:	2200      	movs	r2, #0
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f7 ff91 	bl	8000298 <__aeabi_dsub>
 8008376:	4652      	mov	r2, sl
 8008378:	465b      	mov	r3, fp
 800837a:	4680      	mov	r8, r0
 800837c:	4689      	mov	r9, r1
 800837e:	f7f8 fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8008382:	2800      	cmp	r0, #0
 8008384:	f040 8295 	bne.w	80088b2 <_dtoa_r+0x97a>
 8008388:	4652      	mov	r2, sl
 800838a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800838e:	4640      	mov	r0, r8
 8008390:	4649      	mov	r1, r9
 8008392:	f7f8 fbab 	bl	8000aec <__aeabi_dcmplt>
 8008396:	2800      	cmp	r0, #0
 8008398:	f040 8289 	bne.w	80088ae <_dtoa_r+0x976>
 800839c:	ec5b ab19 	vmov	sl, fp, d9
 80083a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f2c0 8148 	blt.w	8008638 <_dtoa_r+0x700>
 80083a8:	9a00      	ldr	r2, [sp, #0]
 80083aa:	2a0e      	cmp	r2, #14
 80083ac:	f300 8144 	bgt.w	8008638 <_dtoa_r+0x700>
 80083b0:	4b67      	ldr	r3, [pc, #412]	; (8008550 <_dtoa_r+0x618>)
 80083b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f280 80d5 	bge.w	800856c <_dtoa_r+0x634>
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f300 80d1 	bgt.w	800856c <_dtoa_r+0x634>
 80083ca:	f040 826f 	bne.w	80088ac <_dtoa_r+0x974>
 80083ce:	4b65      	ldr	r3, [pc, #404]	; (8008564 <_dtoa_r+0x62c>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	f7f8 f917 	bl	8000608 <__aeabi_dmul>
 80083da:	4652      	mov	r2, sl
 80083dc:	465b      	mov	r3, fp
 80083de:	f7f8 fb99 	bl	8000b14 <__aeabi_dcmpge>
 80083e2:	9e03      	ldr	r6, [sp, #12]
 80083e4:	4637      	mov	r7, r6
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f040 8245 	bne.w	8008876 <_dtoa_r+0x93e>
 80083ec:	9d01      	ldr	r5, [sp, #4]
 80083ee:	2331      	movs	r3, #49	; 0x31
 80083f0:	f805 3b01 	strb.w	r3, [r5], #1
 80083f4:	9b00      	ldr	r3, [sp, #0]
 80083f6:	3301      	adds	r3, #1
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	e240      	b.n	800887e <_dtoa_r+0x946>
 80083fc:	07f2      	lsls	r2, r6, #31
 80083fe:	d505      	bpl.n	800840c <_dtoa_r+0x4d4>
 8008400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008404:	f7f8 f900 	bl	8000608 <__aeabi_dmul>
 8008408:	3501      	adds	r5, #1
 800840a:	2301      	movs	r3, #1
 800840c:	1076      	asrs	r6, r6, #1
 800840e:	3708      	adds	r7, #8
 8008410:	e777      	b.n	8008302 <_dtoa_r+0x3ca>
 8008412:	2502      	movs	r5, #2
 8008414:	e779      	b.n	800830a <_dtoa_r+0x3d2>
 8008416:	9f00      	ldr	r7, [sp, #0]
 8008418:	9e03      	ldr	r6, [sp, #12]
 800841a:	e794      	b.n	8008346 <_dtoa_r+0x40e>
 800841c:	9901      	ldr	r1, [sp, #4]
 800841e:	4b4c      	ldr	r3, [pc, #304]	; (8008550 <_dtoa_r+0x618>)
 8008420:	4431      	add	r1, r6
 8008422:	910d      	str	r1, [sp, #52]	; 0x34
 8008424:	9908      	ldr	r1, [sp, #32]
 8008426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800842a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800842e:	2900      	cmp	r1, #0
 8008430:	d043      	beq.n	80084ba <_dtoa_r+0x582>
 8008432:	494d      	ldr	r1, [pc, #308]	; (8008568 <_dtoa_r+0x630>)
 8008434:	2000      	movs	r0, #0
 8008436:	f7f8 fa11 	bl	800085c <__aeabi_ddiv>
 800843a:	4652      	mov	r2, sl
 800843c:	465b      	mov	r3, fp
 800843e:	f7f7 ff2b 	bl	8000298 <__aeabi_dsub>
 8008442:	9d01      	ldr	r5, [sp, #4]
 8008444:	4682      	mov	sl, r0
 8008446:	468b      	mov	fp, r1
 8008448:	4649      	mov	r1, r9
 800844a:	4640      	mov	r0, r8
 800844c:	f7f8 fb8c 	bl	8000b68 <__aeabi_d2iz>
 8008450:	4606      	mov	r6, r0
 8008452:	f7f8 f86f 	bl	8000534 <__aeabi_i2d>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4640      	mov	r0, r8
 800845c:	4649      	mov	r1, r9
 800845e:	f7f7 ff1b 	bl	8000298 <__aeabi_dsub>
 8008462:	3630      	adds	r6, #48	; 0x30
 8008464:	f805 6b01 	strb.w	r6, [r5], #1
 8008468:	4652      	mov	r2, sl
 800846a:	465b      	mov	r3, fp
 800846c:	4680      	mov	r8, r0
 800846e:	4689      	mov	r9, r1
 8008470:	f7f8 fb3c 	bl	8000aec <__aeabi_dcmplt>
 8008474:	2800      	cmp	r0, #0
 8008476:	d163      	bne.n	8008540 <_dtoa_r+0x608>
 8008478:	4642      	mov	r2, r8
 800847a:	464b      	mov	r3, r9
 800847c:	4936      	ldr	r1, [pc, #216]	; (8008558 <_dtoa_r+0x620>)
 800847e:	2000      	movs	r0, #0
 8008480:	f7f7 ff0a 	bl	8000298 <__aeabi_dsub>
 8008484:	4652      	mov	r2, sl
 8008486:	465b      	mov	r3, fp
 8008488:	f7f8 fb30 	bl	8000aec <__aeabi_dcmplt>
 800848c:	2800      	cmp	r0, #0
 800848e:	f040 80b5 	bne.w	80085fc <_dtoa_r+0x6c4>
 8008492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008494:	429d      	cmp	r5, r3
 8008496:	d081      	beq.n	800839c <_dtoa_r+0x464>
 8008498:	4b30      	ldr	r3, [pc, #192]	; (800855c <_dtoa_r+0x624>)
 800849a:	2200      	movs	r2, #0
 800849c:	4650      	mov	r0, sl
 800849e:	4659      	mov	r1, fp
 80084a0:	f7f8 f8b2 	bl	8000608 <__aeabi_dmul>
 80084a4:	4b2d      	ldr	r3, [pc, #180]	; (800855c <_dtoa_r+0x624>)
 80084a6:	4682      	mov	sl, r0
 80084a8:	468b      	mov	fp, r1
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	2200      	movs	r2, #0
 80084b0:	f7f8 f8aa 	bl	8000608 <__aeabi_dmul>
 80084b4:	4680      	mov	r8, r0
 80084b6:	4689      	mov	r9, r1
 80084b8:	e7c6      	b.n	8008448 <_dtoa_r+0x510>
 80084ba:	4650      	mov	r0, sl
 80084bc:	4659      	mov	r1, fp
 80084be:	f7f8 f8a3 	bl	8000608 <__aeabi_dmul>
 80084c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c4:	9d01      	ldr	r5, [sp, #4]
 80084c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084c8:	4682      	mov	sl, r0
 80084ca:	468b      	mov	fp, r1
 80084cc:	4649      	mov	r1, r9
 80084ce:	4640      	mov	r0, r8
 80084d0:	f7f8 fb4a 	bl	8000b68 <__aeabi_d2iz>
 80084d4:	4606      	mov	r6, r0
 80084d6:	f7f8 f82d 	bl	8000534 <__aeabi_i2d>
 80084da:	3630      	adds	r6, #48	; 0x30
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4640      	mov	r0, r8
 80084e2:	4649      	mov	r1, r9
 80084e4:	f7f7 fed8 	bl	8000298 <__aeabi_dsub>
 80084e8:	f805 6b01 	strb.w	r6, [r5], #1
 80084ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ee:	429d      	cmp	r5, r3
 80084f0:	4680      	mov	r8, r0
 80084f2:	4689      	mov	r9, r1
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	d124      	bne.n	8008544 <_dtoa_r+0x60c>
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <_dtoa_r+0x630>)
 80084fc:	4650      	mov	r0, sl
 80084fe:	4659      	mov	r1, fp
 8008500:	f7f7 fecc 	bl	800029c <__adddf3>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4640      	mov	r0, r8
 800850a:	4649      	mov	r1, r9
 800850c:	f7f8 fb0c 	bl	8000b28 <__aeabi_dcmpgt>
 8008510:	2800      	cmp	r0, #0
 8008512:	d173      	bne.n	80085fc <_dtoa_r+0x6c4>
 8008514:	4652      	mov	r2, sl
 8008516:	465b      	mov	r3, fp
 8008518:	4913      	ldr	r1, [pc, #76]	; (8008568 <_dtoa_r+0x630>)
 800851a:	2000      	movs	r0, #0
 800851c:	f7f7 febc 	bl	8000298 <__aeabi_dsub>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	f7f8 fae0 	bl	8000aec <__aeabi_dcmplt>
 800852c:	2800      	cmp	r0, #0
 800852e:	f43f af35 	beq.w	800839c <_dtoa_r+0x464>
 8008532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008534:	1e6b      	subs	r3, r5, #1
 8008536:	930f      	str	r3, [sp, #60]	; 0x3c
 8008538:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800853c:	2b30      	cmp	r3, #48	; 0x30
 800853e:	d0f8      	beq.n	8008532 <_dtoa_r+0x5fa>
 8008540:	9700      	str	r7, [sp, #0]
 8008542:	e049      	b.n	80085d8 <_dtoa_r+0x6a0>
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <_dtoa_r+0x624>)
 8008546:	f7f8 f85f 	bl	8000608 <__aeabi_dmul>
 800854a:	4680      	mov	r8, r0
 800854c:	4689      	mov	r9, r1
 800854e:	e7bd      	b.n	80084cc <_dtoa_r+0x594>
 8008550:	0800b6d8 	.word	0x0800b6d8
 8008554:	0800b6b0 	.word	0x0800b6b0
 8008558:	3ff00000 	.word	0x3ff00000
 800855c:	40240000 	.word	0x40240000
 8008560:	401c0000 	.word	0x401c0000
 8008564:	40140000 	.word	0x40140000
 8008568:	3fe00000 	.word	0x3fe00000
 800856c:	9d01      	ldr	r5, [sp, #4]
 800856e:	4656      	mov	r6, sl
 8008570:	465f      	mov	r7, fp
 8008572:	4642      	mov	r2, r8
 8008574:	464b      	mov	r3, r9
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f8 f96f 	bl	800085c <__aeabi_ddiv>
 800857e:	f7f8 faf3 	bl	8000b68 <__aeabi_d2iz>
 8008582:	4682      	mov	sl, r0
 8008584:	f7f7 ffd6 	bl	8000534 <__aeabi_i2d>
 8008588:	4642      	mov	r2, r8
 800858a:	464b      	mov	r3, r9
 800858c:	f7f8 f83c 	bl	8000608 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4630      	mov	r0, r6
 8008596:	4639      	mov	r1, r7
 8008598:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800859c:	f7f7 fe7c 	bl	8000298 <__aeabi_dsub>
 80085a0:	f805 6b01 	strb.w	r6, [r5], #1
 80085a4:	9e01      	ldr	r6, [sp, #4]
 80085a6:	9f03      	ldr	r7, [sp, #12]
 80085a8:	1bae      	subs	r6, r5, r6
 80085aa:	42b7      	cmp	r7, r6
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	d135      	bne.n	800861e <_dtoa_r+0x6e6>
 80085b2:	f7f7 fe73 	bl	800029c <__adddf3>
 80085b6:	4642      	mov	r2, r8
 80085b8:	464b      	mov	r3, r9
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	f7f8 fab3 	bl	8000b28 <__aeabi_dcmpgt>
 80085c2:	b9d0      	cbnz	r0, 80085fa <_dtoa_r+0x6c2>
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 80085d0:	b110      	cbz	r0, 80085d8 <_dtoa_r+0x6a0>
 80085d2:	f01a 0f01 	tst.w	sl, #1
 80085d6:	d110      	bne.n	80085fa <_dtoa_r+0x6c2>
 80085d8:	4620      	mov	r0, r4
 80085da:	ee18 1a10 	vmov	r1, s16
 80085de:	f000 fe67 	bl	80092b0 <_Bfree>
 80085e2:	2300      	movs	r3, #0
 80085e4:	9800      	ldr	r0, [sp, #0]
 80085e6:	702b      	strb	r3, [r5, #0]
 80085e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ea:	3001      	adds	r0, #1
 80085ec:	6018      	str	r0, [r3, #0]
 80085ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f43f acf1 	beq.w	8007fd8 <_dtoa_r+0xa0>
 80085f6:	601d      	str	r5, [r3, #0]
 80085f8:	e4ee      	b.n	8007fd8 <_dtoa_r+0xa0>
 80085fa:	9f00      	ldr	r7, [sp, #0]
 80085fc:	462b      	mov	r3, r5
 80085fe:	461d      	mov	r5, r3
 8008600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008604:	2a39      	cmp	r2, #57	; 0x39
 8008606:	d106      	bne.n	8008616 <_dtoa_r+0x6de>
 8008608:	9a01      	ldr	r2, [sp, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d1f7      	bne.n	80085fe <_dtoa_r+0x6c6>
 800860e:	9901      	ldr	r1, [sp, #4]
 8008610:	2230      	movs	r2, #48	; 0x30
 8008612:	3701      	adds	r7, #1
 8008614:	700a      	strb	r2, [r1, #0]
 8008616:	781a      	ldrb	r2, [r3, #0]
 8008618:	3201      	adds	r2, #1
 800861a:	701a      	strb	r2, [r3, #0]
 800861c:	e790      	b.n	8008540 <_dtoa_r+0x608>
 800861e:	4ba6      	ldr	r3, [pc, #664]	; (80088b8 <_dtoa_r+0x980>)
 8008620:	2200      	movs	r2, #0
 8008622:	f7f7 fff1 	bl	8000608 <__aeabi_dmul>
 8008626:	2200      	movs	r2, #0
 8008628:	2300      	movs	r3, #0
 800862a:	4606      	mov	r6, r0
 800862c:	460f      	mov	r7, r1
 800862e:	f7f8 fa53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008632:	2800      	cmp	r0, #0
 8008634:	d09d      	beq.n	8008572 <_dtoa_r+0x63a>
 8008636:	e7cf      	b.n	80085d8 <_dtoa_r+0x6a0>
 8008638:	9a08      	ldr	r2, [sp, #32]
 800863a:	2a00      	cmp	r2, #0
 800863c:	f000 80d7 	beq.w	80087ee <_dtoa_r+0x8b6>
 8008640:	9a06      	ldr	r2, [sp, #24]
 8008642:	2a01      	cmp	r2, #1
 8008644:	f300 80ba 	bgt.w	80087bc <_dtoa_r+0x884>
 8008648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800864a:	2a00      	cmp	r2, #0
 800864c:	f000 80b2 	beq.w	80087b4 <_dtoa_r+0x87c>
 8008650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008654:	9e07      	ldr	r6, [sp, #28]
 8008656:	9d04      	ldr	r5, [sp, #16]
 8008658:	9a04      	ldr	r2, [sp, #16]
 800865a:	441a      	add	r2, r3
 800865c:	9204      	str	r2, [sp, #16]
 800865e:	9a05      	ldr	r2, [sp, #20]
 8008660:	2101      	movs	r1, #1
 8008662:	441a      	add	r2, r3
 8008664:	4620      	mov	r0, r4
 8008666:	9205      	str	r2, [sp, #20]
 8008668:	f000 ff24 	bl	80094b4 <__i2b>
 800866c:	4607      	mov	r7, r0
 800866e:	2d00      	cmp	r5, #0
 8008670:	dd0c      	ble.n	800868c <_dtoa_r+0x754>
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd09      	ble.n	800868c <_dtoa_r+0x754>
 8008678:	42ab      	cmp	r3, r5
 800867a:	9a04      	ldr	r2, [sp, #16]
 800867c:	bfa8      	it	ge
 800867e:	462b      	movge	r3, r5
 8008680:	1ad2      	subs	r2, r2, r3
 8008682:	9204      	str	r2, [sp, #16]
 8008684:	9a05      	ldr	r2, [sp, #20]
 8008686:	1aed      	subs	r5, r5, r3
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	9b07      	ldr	r3, [sp, #28]
 800868e:	b31b      	cbz	r3, 80086d8 <_dtoa_r+0x7a0>
 8008690:	9b08      	ldr	r3, [sp, #32]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80af 	beq.w	80087f6 <_dtoa_r+0x8be>
 8008698:	2e00      	cmp	r6, #0
 800869a:	dd13      	ble.n	80086c4 <_dtoa_r+0x78c>
 800869c:	4639      	mov	r1, r7
 800869e:	4632      	mov	r2, r6
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 ffc7 	bl	8009634 <__pow5mult>
 80086a6:	ee18 2a10 	vmov	r2, s16
 80086aa:	4601      	mov	r1, r0
 80086ac:	4607      	mov	r7, r0
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 ff16 	bl	80094e0 <__multiply>
 80086b4:	ee18 1a10 	vmov	r1, s16
 80086b8:	4680      	mov	r8, r0
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fdf8 	bl	80092b0 <_Bfree>
 80086c0:	ee08 8a10 	vmov	s16, r8
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	1b9a      	subs	r2, r3, r6
 80086c8:	d006      	beq.n	80086d8 <_dtoa_r+0x7a0>
 80086ca:	ee18 1a10 	vmov	r1, s16
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 ffb0 	bl	8009634 <__pow5mult>
 80086d4:	ee08 0a10 	vmov	s16, r0
 80086d8:	2101      	movs	r1, #1
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 feea 	bl	80094b4 <__i2b>
 80086e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	4606      	mov	r6, r0
 80086e6:	f340 8088 	ble.w	80087fa <_dtoa_r+0x8c2>
 80086ea:	461a      	mov	r2, r3
 80086ec:	4601      	mov	r1, r0
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 ffa0 	bl	8009634 <__pow5mult>
 80086f4:	9b06      	ldr	r3, [sp, #24]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	4606      	mov	r6, r0
 80086fa:	f340 8081 	ble.w	8008800 <_dtoa_r+0x8c8>
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	6933      	ldr	r3, [r6, #16]
 8008704:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008708:	6918      	ldr	r0, [r3, #16]
 800870a:	f000 fe83 	bl	8009414 <__hi0bits>
 800870e:	f1c0 0020 	rsb	r0, r0, #32
 8008712:	9b05      	ldr	r3, [sp, #20]
 8008714:	4418      	add	r0, r3
 8008716:	f010 001f 	ands.w	r0, r0, #31
 800871a:	f000 8092 	beq.w	8008842 <_dtoa_r+0x90a>
 800871e:	f1c0 0320 	rsb	r3, r0, #32
 8008722:	2b04      	cmp	r3, #4
 8008724:	f340 808a 	ble.w	800883c <_dtoa_r+0x904>
 8008728:	f1c0 001c 	rsb	r0, r0, #28
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	4403      	add	r3, r0
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	9b05      	ldr	r3, [sp, #20]
 8008734:	4403      	add	r3, r0
 8008736:	4405      	add	r5, r0
 8008738:	9305      	str	r3, [sp, #20]
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	dd07      	ble.n	8008750 <_dtoa_r+0x818>
 8008740:	ee18 1a10 	vmov	r1, s16
 8008744:	461a      	mov	r2, r3
 8008746:	4620      	mov	r0, r4
 8008748:	f000 ffce 	bl	80096e8 <__lshift>
 800874c:	ee08 0a10 	vmov	s16, r0
 8008750:	9b05      	ldr	r3, [sp, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	dd05      	ble.n	8008762 <_dtoa_r+0x82a>
 8008756:	4631      	mov	r1, r6
 8008758:	461a      	mov	r2, r3
 800875a:	4620      	mov	r0, r4
 800875c:	f000 ffc4 	bl	80096e8 <__lshift>
 8008760:	4606      	mov	r6, r0
 8008762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008764:	2b00      	cmp	r3, #0
 8008766:	d06e      	beq.n	8008846 <_dtoa_r+0x90e>
 8008768:	ee18 0a10 	vmov	r0, s16
 800876c:	4631      	mov	r1, r6
 800876e:	f001 f82b 	bl	80097c8 <__mcmp>
 8008772:	2800      	cmp	r0, #0
 8008774:	da67      	bge.n	8008846 <_dtoa_r+0x90e>
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	3b01      	subs	r3, #1
 800877a:	ee18 1a10 	vmov	r1, s16
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	220a      	movs	r2, #10
 8008782:	2300      	movs	r3, #0
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fdb5 	bl	80092f4 <__multadd>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	ee08 0a10 	vmov	s16, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 81b1 	beq.w	8008af8 <_dtoa_r+0xbc0>
 8008796:	2300      	movs	r3, #0
 8008798:	4639      	mov	r1, r7
 800879a:	220a      	movs	r2, #10
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fda9 	bl	80092f4 <__multadd>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	4607      	mov	r7, r0
 80087a8:	f300 808e 	bgt.w	80088c8 <_dtoa_r+0x990>
 80087ac:	9b06      	ldr	r3, [sp, #24]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	dc51      	bgt.n	8008856 <_dtoa_r+0x91e>
 80087b2:	e089      	b.n	80088c8 <_dtoa_r+0x990>
 80087b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087ba:	e74b      	b.n	8008654 <_dtoa_r+0x71c>
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	1e5e      	subs	r6, r3, #1
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	42b3      	cmp	r3, r6
 80087c4:	bfbf      	itttt	lt
 80087c6:	9b07      	ldrlt	r3, [sp, #28]
 80087c8:	9607      	strlt	r6, [sp, #28]
 80087ca:	1af2      	sublt	r2, r6, r3
 80087cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087ce:	bfb6      	itet	lt
 80087d0:	189b      	addlt	r3, r3, r2
 80087d2:	1b9e      	subge	r6, r3, r6
 80087d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80087d6:	9b03      	ldr	r3, [sp, #12]
 80087d8:	bfb8      	it	lt
 80087da:	2600      	movlt	r6, #0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	bfb7      	itett	lt
 80087e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80087e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087e8:	1a9d      	sublt	r5, r3, r2
 80087ea:	2300      	movlt	r3, #0
 80087ec:	e734      	b.n	8008658 <_dtoa_r+0x720>
 80087ee:	9e07      	ldr	r6, [sp, #28]
 80087f0:	9d04      	ldr	r5, [sp, #16]
 80087f2:	9f08      	ldr	r7, [sp, #32]
 80087f4:	e73b      	b.n	800866e <_dtoa_r+0x736>
 80087f6:	9a07      	ldr	r2, [sp, #28]
 80087f8:	e767      	b.n	80086ca <_dtoa_r+0x792>
 80087fa:	9b06      	ldr	r3, [sp, #24]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	dc18      	bgt.n	8008832 <_dtoa_r+0x8fa>
 8008800:	f1ba 0f00 	cmp.w	sl, #0
 8008804:	d115      	bne.n	8008832 <_dtoa_r+0x8fa>
 8008806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800880a:	b993      	cbnz	r3, 8008832 <_dtoa_r+0x8fa>
 800880c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008810:	0d1b      	lsrs	r3, r3, #20
 8008812:	051b      	lsls	r3, r3, #20
 8008814:	b183      	cbz	r3, 8008838 <_dtoa_r+0x900>
 8008816:	9b04      	ldr	r3, [sp, #16]
 8008818:	3301      	adds	r3, #1
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	9b05      	ldr	r3, [sp, #20]
 800881e:	3301      	adds	r3, #1
 8008820:	9305      	str	r3, [sp, #20]
 8008822:	f04f 0801 	mov.w	r8, #1
 8008826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008828:	2b00      	cmp	r3, #0
 800882a:	f47f af6a 	bne.w	8008702 <_dtoa_r+0x7ca>
 800882e:	2001      	movs	r0, #1
 8008830:	e76f      	b.n	8008712 <_dtoa_r+0x7da>
 8008832:	f04f 0800 	mov.w	r8, #0
 8008836:	e7f6      	b.n	8008826 <_dtoa_r+0x8ee>
 8008838:	4698      	mov	r8, r3
 800883a:	e7f4      	b.n	8008826 <_dtoa_r+0x8ee>
 800883c:	f43f af7d 	beq.w	800873a <_dtoa_r+0x802>
 8008840:	4618      	mov	r0, r3
 8008842:	301c      	adds	r0, #28
 8008844:	e772      	b.n	800872c <_dtoa_r+0x7f4>
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	dc37      	bgt.n	80088bc <_dtoa_r+0x984>
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	2b02      	cmp	r3, #2
 8008850:	dd34      	ble.n	80088bc <_dtoa_r+0x984>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	9302      	str	r3, [sp, #8]
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	b96b      	cbnz	r3, 8008876 <_dtoa_r+0x93e>
 800885a:	4631      	mov	r1, r6
 800885c:	2205      	movs	r2, #5
 800885e:	4620      	mov	r0, r4
 8008860:	f000 fd48 	bl	80092f4 <__multadd>
 8008864:	4601      	mov	r1, r0
 8008866:	4606      	mov	r6, r0
 8008868:	ee18 0a10 	vmov	r0, s16
 800886c:	f000 ffac 	bl	80097c8 <__mcmp>
 8008870:	2800      	cmp	r0, #0
 8008872:	f73f adbb 	bgt.w	80083ec <_dtoa_r+0x4b4>
 8008876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008878:	9d01      	ldr	r5, [sp, #4]
 800887a:	43db      	mvns	r3, r3
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	4631      	mov	r1, r6
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fd13 	bl	80092b0 <_Bfree>
 800888a:	2f00      	cmp	r7, #0
 800888c:	f43f aea4 	beq.w	80085d8 <_dtoa_r+0x6a0>
 8008890:	f1b8 0f00 	cmp.w	r8, #0
 8008894:	d005      	beq.n	80088a2 <_dtoa_r+0x96a>
 8008896:	45b8      	cmp	r8, r7
 8008898:	d003      	beq.n	80088a2 <_dtoa_r+0x96a>
 800889a:	4641      	mov	r1, r8
 800889c:	4620      	mov	r0, r4
 800889e:	f000 fd07 	bl	80092b0 <_Bfree>
 80088a2:	4639      	mov	r1, r7
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fd03 	bl	80092b0 <_Bfree>
 80088aa:	e695      	b.n	80085d8 <_dtoa_r+0x6a0>
 80088ac:	2600      	movs	r6, #0
 80088ae:	4637      	mov	r7, r6
 80088b0:	e7e1      	b.n	8008876 <_dtoa_r+0x93e>
 80088b2:	9700      	str	r7, [sp, #0]
 80088b4:	4637      	mov	r7, r6
 80088b6:	e599      	b.n	80083ec <_dtoa_r+0x4b4>
 80088b8:	40240000 	.word	0x40240000
 80088bc:	9b08      	ldr	r3, [sp, #32]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 80ca 	beq.w	8008a58 <_dtoa_r+0xb20>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	9302      	str	r3, [sp, #8]
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	dd05      	ble.n	80088d8 <_dtoa_r+0x9a0>
 80088cc:	4639      	mov	r1, r7
 80088ce:	462a      	mov	r2, r5
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 ff09 	bl	80096e8 <__lshift>
 80088d6:	4607      	mov	r7, r0
 80088d8:	f1b8 0f00 	cmp.w	r8, #0
 80088dc:	d05b      	beq.n	8008996 <_dtoa_r+0xa5e>
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fca5 	bl	8009230 <_Balloc>
 80088e6:	4605      	mov	r5, r0
 80088e8:	b928      	cbnz	r0, 80088f6 <_dtoa_r+0x9be>
 80088ea:	4b87      	ldr	r3, [pc, #540]	; (8008b08 <_dtoa_r+0xbd0>)
 80088ec:	4602      	mov	r2, r0
 80088ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088f2:	f7ff bb3b 	b.w	8007f6c <_dtoa_r+0x34>
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	3202      	adds	r2, #2
 80088fa:	0092      	lsls	r2, r2, #2
 80088fc:	f107 010c 	add.w	r1, r7, #12
 8008900:	300c      	adds	r0, #12
 8008902:	f7fd ff11 	bl	8006728 <memcpy>
 8008906:	2201      	movs	r2, #1
 8008908:	4629      	mov	r1, r5
 800890a:	4620      	mov	r0, r4
 800890c:	f000 feec 	bl	80096e8 <__lshift>
 8008910:	9b01      	ldr	r3, [sp, #4]
 8008912:	f103 0901 	add.w	r9, r3, #1
 8008916:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800891a:	4413      	add	r3, r2
 800891c:	9305      	str	r3, [sp, #20]
 800891e:	f00a 0301 	and.w	r3, sl, #1
 8008922:	46b8      	mov	r8, r7
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	4607      	mov	r7, r0
 8008928:	4631      	mov	r1, r6
 800892a:	ee18 0a10 	vmov	r0, s16
 800892e:	f7ff fa75 	bl	8007e1c <quorem>
 8008932:	4641      	mov	r1, r8
 8008934:	9002      	str	r0, [sp, #8]
 8008936:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800893a:	ee18 0a10 	vmov	r0, s16
 800893e:	f000 ff43 	bl	80097c8 <__mcmp>
 8008942:	463a      	mov	r2, r7
 8008944:	9003      	str	r0, [sp, #12]
 8008946:	4631      	mov	r1, r6
 8008948:	4620      	mov	r0, r4
 800894a:	f000 ff59 	bl	8009800 <__mdiff>
 800894e:	68c2      	ldr	r2, [r0, #12]
 8008950:	f109 3bff 	add.w	fp, r9, #4294967295
 8008954:	4605      	mov	r5, r0
 8008956:	bb02      	cbnz	r2, 800899a <_dtoa_r+0xa62>
 8008958:	4601      	mov	r1, r0
 800895a:	ee18 0a10 	vmov	r0, s16
 800895e:	f000 ff33 	bl	80097c8 <__mcmp>
 8008962:	4602      	mov	r2, r0
 8008964:	4629      	mov	r1, r5
 8008966:	4620      	mov	r0, r4
 8008968:	9207      	str	r2, [sp, #28]
 800896a:	f000 fca1 	bl	80092b0 <_Bfree>
 800896e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008972:	ea43 0102 	orr.w	r1, r3, r2
 8008976:	9b04      	ldr	r3, [sp, #16]
 8008978:	430b      	orrs	r3, r1
 800897a:	464d      	mov	r5, r9
 800897c:	d10f      	bne.n	800899e <_dtoa_r+0xa66>
 800897e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008982:	d02a      	beq.n	80089da <_dtoa_r+0xaa2>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	dd02      	ble.n	8008990 <_dtoa_r+0xa58>
 800898a:	9b02      	ldr	r3, [sp, #8]
 800898c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008990:	f88b a000 	strb.w	sl, [fp]
 8008994:	e775      	b.n	8008882 <_dtoa_r+0x94a>
 8008996:	4638      	mov	r0, r7
 8008998:	e7ba      	b.n	8008910 <_dtoa_r+0x9d8>
 800899a:	2201      	movs	r2, #1
 800899c:	e7e2      	b.n	8008964 <_dtoa_r+0xa2c>
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	db04      	blt.n	80089ae <_dtoa_r+0xa76>
 80089a4:	9906      	ldr	r1, [sp, #24]
 80089a6:	430b      	orrs	r3, r1
 80089a8:	9904      	ldr	r1, [sp, #16]
 80089aa:	430b      	orrs	r3, r1
 80089ac:	d122      	bne.n	80089f4 <_dtoa_r+0xabc>
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	ddee      	ble.n	8008990 <_dtoa_r+0xa58>
 80089b2:	ee18 1a10 	vmov	r1, s16
 80089b6:	2201      	movs	r2, #1
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fe95 	bl	80096e8 <__lshift>
 80089be:	4631      	mov	r1, r6
 80089c0:	ee08 0a10 	vmov	s16, r0
 80089c4:	f000 ff00 	bl	80097c8 <__mcmp>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	dc03      	bgt.n	80089d4 <_dtoa_r+0xa9c>
 80089cc:	d1e0      	bne.n	8008990 <_dtoa_r+0xa58>
 80089ce:	f01a 0f01 	tst.w	sl, #1
 80089d2:	d0dd      	beq.n	8008990 <_dtoa_r+0xa58>
 80089d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089d8:	d1d7      	bne.n	800898a <_dtoa_r+0xa52>
 80089da:	2339      	movs	r3, #57	; 0x39
 80089dc:	f88b 3000 	strb.w	r3, [fp]
 80089e0:	462b      	mov	r3, r5
 80089e2:	461d      	mov	r5, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089ea:	2a39      	cmp	r2, #57	; 0x39
 80089ec:	d071      	beq.n	8008ad2 <_dtoa_r+0xb9a>
 80089ee:	3201      	adds	r2, #1
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	e746      	b.n	8008882 <_dtoa_r+0x94a>
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	dd07      	ble.n	8008a08 <_dtoa_r+0xad0>
 80089f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089fc:	d0ed      	beq.n	80089da <_dtoa_r+0xaa2>
 80089fe:	f10a 0301 	add.w	r3, sl, #1
 8008a02:	f88b 3000 	strb.w	r3, [fp]
 8008a06:	e73c      	b.n	8008882 <_dtoa_r+0x94a>
 8008a08:	9b05      	ldr	r3, [sp, #20]
 8008a0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a0e:	4599      	cmp	r9, r3
 8008a10:	d047      	beq.n	8008aa2 <_dtoa_r+0xb6a>
 8008a12:	ee18 1a10 	vmov	r1, s16
 8008a16:	2300      	movs	r3, #0
 8008a18:	220a      	movs	r2, #10
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fc6a 	bl	80092f4 <__multadd>
 8008a20:	45b8      	cmp	r8, r7
 8008a22:	ee08 0a10 	vmov	s16, r0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	f04f 020a 	mov.w	r2, #10
 8008a2e:	4641      	mov	r1, r8
 8008a30:	4620      	mov	r0, r4
 8008a32:	d106      	bne.n	8008a42 <_dtoa_r+0xb0a>
 8008a34:	f000 fc5e 	bl	80092f4 <__multadd>
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	f109 0901 	add.w	r9, r9, #1
 8008a40:	e772      	b.n	8008928 <_dtoa_r+0x9f0>
 8008a42:	f000 fc57 	bl	80092f4 <__multadd>
 8008a46:	4639      	mov	r1, r7
 8008a48:	4680      	mov	r8, r0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fc50 	bl	80092f4 <__multadd>
 8008a54:	4607      	mov	r7, r0
 8008a56:	e7f1      	b.n	8008a3c <_dtoa_r+0xb04>
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	9302      	str	r3, [sp, #8]
 8008a5c:	9d01      	ldr	r5, [sp, #4]
 8008a5e:	ee18 0a10 	vmov	r0, s16
 8008a62:	4631      	mov	r1, r6
 8008a64:	f7ff f9da 	bl	8007e1c <quorem>
 8008a68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	f805 ab01 	strb.w	sl, [r5], #1
 8008a72:	1aea      	subs	r2, r5, r3
 8008a74:	9b02      	ldr	r3, [sp, #8]
 8008a76:	4293      	cmp	r3, r2
 8008a78:	dd09      	ble.n	8008a8e <_dtoa_r+0xb56>
 8008a7a:	ee18 1a10 	vmov	r1, s16
 8008a7e:	2300      	movs	r3, #0
 8008a80:	220a      	movs	r2, #10
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fc36 	bl	80092f4 <__multadd>
 8008a88:	ee08 0a10 	vmov	s16, r0
 8008a8c:	e7e7      	b.n	8008a5e <_dtoa_r+0xb26>
 8008a8e:	9b02      	ldr	r3, [sp, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bfc8      	it	gt
 8008a94:	461d      	movgt	r5, r3
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	bfd8      	it	le
 8008a9a:	2501      	movle	r5, #1
 8008a9c:	441d      	add	r5, r3
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	ee18 1a10 	vmov	r1, s16
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 fe1d 	bl	80096e8 <__lshift>
 8008aae:	4631      	mov	r1, r6
 8008ab0:	ee08 0a10 	vmov	s16, r0
 8008ab4:	f000 fe88 	bl	80097c8 <__mcmp>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	dc91      	bgt.n	80089e0 <_dtoa_r+0xaa8>
 8008abc:	d102      	bne.n	8008ac4 <_dtoa_r+0xb8c>
 8008abe:	f01a 0f01 	tst.w	sl, #1
 8008ac2:	d18d      	bne.n	80089e0 <_dtoa_r+0xaa8>
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	461d      	mov	r5, r3
 8008ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008acc:	2a30      	cmp	r2, #48	; 0x30
 8008ace:	d0fa      	beq.n	8008ac6 <_dtoa_r+0xb8e>
 8008ad0:	e6d7      	b.n	8008882 <_dtoa_r+0x94a>
 8008ad2:	9a01      	ldr	r2, [sp, #4]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d184      	bne.n	80089e2 <_dtoa_r+0xaaa>
 8008ad8:	9b00      	ldr	r3, [sp, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2331      	movs	r3, #49	; 0x31
 8008ae0:	7013      	strb	r3, [r2, #0]
 8008ae2:	e6ce      	b.n	8008882 <_dtoa_r+0x94a>
 8008ae4:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <_dtoa_r+0xbd4>)
 8008ae6:	f7ff ba95 	b.w	8008014 <_dtoa_r+0xdc>
 8008aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f47f aa6e 	bne.w	8007fce <_dtoa_r+0x96>
 8008af2:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <_dtoa_r+0xbd8>)
 8008af4:	f7ff ba8e 	b.w	8008014 <_dtoa_r+0xdc>
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dcae      	bgt.n	8008a5c <_dtoa_r+0xb24>
 8008afe:	9b06      	ldr	r3, [sp, #24]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	f73f aea8 	bgt.w	8008856 <_dtoa_r+0x91e>
 8008b06:	e7a9      	b.n	8008a5c <_dtoa_r+0xb24>
 8008b08:	0800b5c8 	.word	0x0800b5c8
 8008b0c:	0800b3d0 	.word	0x0800b3d0
 8008b10:	0800b549 	.word	0x0800b549

08008b14 <rshift>:
 8008b14:	6903      	ldr	r3, [r0, #16]
 8008b16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b22:	f100 0414 	add.w	r4, r0, #20
 8008b26:	dd45      	ble.n	8008bb4 <rshift+0xa0>
 8008b28:	f011 011f 	ands.w	r1, r1, #31
 8008b2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b34:	d10c      	bne.n	8008b50 <rshift+0x3c>
 8008b36:	f100 0710 	add.w	r7, r0, #16
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	42b1      	cmp	r1, r6
 8008b3e:	d334      	bcc.n	8008baa <rshift+0x96>
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	1eea      	subs	r2, r5, #3
 8008b46:	4296      	cmp	r6, r2
 8008b48:	bf38      	it	cc
 8008b4a:	2300      	movcc	r3, #0
 8008b4c:	4423      	add	r3, r4
 8008b4e:	e015      	b.n	8008b7c <rshift+0x68>
 8008b50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b54:	f1c1 0820 	rsb	r8, r1, #32
 8008b58:	40cf      	lsrs	r7, r1
 8008b5a:	f105 0e04 	add.w	lr, r5, #4
 8008b5e:	46a1      	mov	r9, r4
 8008b60:	4576      	cmp	r6, lr
 8008b62:	46f4      	mov	ip, lr
 8008b64:	d815      	bhi.n	8008b92 <rshift+0x7e>
 8008b66:	1a9a      	subs	r2, r3, r2
 8008b68:	0092      	lsls	r2, r2, #2
 8008b6a:	3a04      	subs	r2, #4
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	42ae      	cmp	r6, r5
 8008b70:	bf38      	it	cc
 8008b72:	2200      	movcc	r2, #0
 8008b74:	18a3      	adds	r3, r4, r2
 8008b76:	50a7      	str	r7, [r4, r2]
 8008b78:	b107      	cbz	r7, 8008b7c <rshift+0x68>
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	1b1a      	subs	r2, r3, r4
 8008b7e:	42a3      	cmp	r3, r4
 8008b80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b84:	bf08      	it	eq
 8008b86:	2300      	moveq	r3, #0
 8008b88:	6102      	str	r2, [r0, #16]
 8008b8a:	bf08      	it	eq
 8008b8c:	6143      	streq	r3, [r0, #20]
 8008b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b92:	f8dc c000 	ldr.w	ip, [ip]
 8008b96:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b9a:	ea4c 0707 	orr.w	r7, ip, r7
 8008b9e:	f849 7b04 	str.w	r7, [r9], #4
 8008ba2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ba6:	40cf      	lsrs	r7, r1
 8008ba8:	e7da      	b.n	8008b60 <rshift+0x4c>
 8008baa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bae:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bb2:	e7c3      	b.n	8008b3c <rshift+0x28>
 8008bb4:	4623      	mov	r3, r4
 8008bb6:	e7e1      	b.n	8008b7c <rshift+0x68>

08008bb8 <__hexdig_fun>:
 8008bb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008bbc:	2b09      	cmp	r3, #9
 8008bbe:	d802      	bhi.n	8008bc6 <__hexdig_fun+0xe>
 8008bc0:	3820      	subs	r0, #32
 8008bc2:	b2c0      	uxtb	r0, r0
 8008bc4:	4770      	bx	lr
 8008bc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d801      	bhi.n	8008bd2 <__hexdig_fun+0x1a>
 8008bce:	3847      	subs	r0, #71	; 0x47
 8008bd0:	e7f7      	b.n	8008bc2 <__hexdig_fun+0xa>
 8008bd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bd6:	2b05      	cmp	r3, #5
 8008bd8:	d801      	bhi.n	8008bde <__hexdig_fun+0x26>
 8008bda:	3827      	subs	r0, #39	; 0x27
 8008bdc:	e7f1      	b.n	8008bc2 <__hexdig_fun+0xa>
 8008bde:	2000      	movs	r0, #0
 8008be0:	4770      	bx	lr
	...

08008be4 <__gethex>:
 8008be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	ed2d 8b02 	vpush	{d8}
 8008bec:	b089      	sub	sp, #36	; 0x24
 8008bee:	ee08 0a10 	vmov	s16, r0
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	4bb4      	ldr	r3, [pc, #720]	; (8008ec8 <__gethex+0x2e4>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	468b      	mov	fp, r1
 8008bfe:	4690      	mov	r8, r2
 8008c00:	f7f7 faee 	bl	80001e0 <strlen>
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	f8db 2000 	ldr.w	r2, [fp]
 8008c0a:	4403      	add	r3, r0
 8008c0c:	4682      	mov	sl, r0
 8008c0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	1c93      	adds	r3, r2, #2
 8008c16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c1e:	32fe      	adds	r2, #254	; 0xfe
 8008c20:	18d1      	adds	r1, r2, r3
 8008c22:	461f      	mov	r7, r3
 8008c24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c28:	9100      	str	r1, [sp, #0]
 8008c2a:	2830      	cmp	r0, #48	; 0x30
 8008c2c:	d0f8      	beq.n	8008c20 <__gethex+0x3c>
 8008c2e:	f7ff ffc3 	bl	8008bb8 <__hexdig_fun>
 8008c32:	4604      	mov	r4, r0
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d13a      	bne.n	8008cae <__gethex+0xca>
 8008c38:	9901      	ldr	r1, [sp, #4]
 8008c3a:	4652      	mov	r2, sl
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	f001 fa23 	bl	800a088 <strncmp>
 8008c42:	4605      	mov	r5, r0
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d168      	bne.n	8008d1a <__gethex+0x136>
 8008c48:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c4c:	eb07 060a 	add.w	r6, r7, sl
 8008c50:	f7ff ffb2 	bl	8008bb8 <__hexdig_fun>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d062      	beq.n	8008d1e <__gethex+0x13a>
 8008c58:	4633      	mov	r3, r6
 8008c5a:	7818      	ldrb	r0, [r3, #0]
 8008c5c:	2830      	cmp	r0, #48	; 0x30
 8008c5e:	461f      	mov	r7, r3
 8008c60:	f103 0301 	add.w	r3, r3, #1
 8008c64:	d0f9      	beq.n	8008c5a <__gethex+0x76>
 8008c66:	f7ff ffa7 	bl	8008bb8 <__hexdig_fun>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	fab0 f480 	clz	r4, r0
 8008c70:	0964      	lsrs	r4, r4, #5
 8008c72:	4635      	mov	r5, r6
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	463a      	mov	r2, r7
 8008c78:	4616      	mov	r6, r2
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	7830      	ldrb	r0, [r6, #0]
 8008c7e:	f7ff ff9b 	bl	8008bb8 <__hexdig_fun>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d1f8      	bne.n	8008c78 <__gethex+0x94>
 8008c86:	9901      	ldr	r1, [sp, #4]
 8008c88:	4652      	mov	r2, sl
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f001 f9fc 	bl	800a088 <strncmp>
 8008c90:	b980      	cbnz	r0, 8008cb4 <__gethex+0xd0>
 8008c92:	b94d      	cbnz	r5, 8008ca8 <__gethex+0xc4>
 8008c94:	eb06 050a 	add.w	r5, r6, sl
 8008c98:	462a      	mov	r2, r5
 8008c9a:	4616      	mov	r6, r2
 8008c9c:	3201      	adds	r2, #1
 8008c9e:	7830      	ldrb	r0, [r6, #0]
 8008ca0:	f7ff ff8a 	bl	8008bb8 <__hexdig_fun>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d1f8      	bne.n	8008c9a <__gethex+0xb6>
 8008ca8:	1bad      	subs	r5, r5, r6
 8008caa:	00ad      	lsls	r5, r5, #2
 8008cac:	e004      	b.n	8008cb8 <__gethex+0xd4>
 8008cae:	2400      	movs	r4, #0
 8008cb0:	4625      	mov	r5, r4
 8008cb2:	e7e0      	b.n	8008c76 <__gethex+0x92>
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	d1f7      	bne.n	8008ca8 <__gethex+0xc4>
 8008cb8:	7833      	ldrb	r3, [r6, #0]
 8008cba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cbe:	2b50      	cmp	r3, #80	; 0x50
 8008cc0:	d13b      	bne.n	8008d3a <__gethex+0x156>
 8008cc2:	7873      	ldrb	r3, [r6, #1]
 8008cc4:	2b2b      	cmp	r3, #43	; 0x2b
 8008cc6:	d02c      	beq.n	8008d22 <__gethex+0x13e>
 8008cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8008cca:	d02e      	beq.n	8008d2a <__gethex+0x146>
 8008ccc:	1c71      	adds	r1, r6, #1
 8008cce:	f04f 0900 	mov.w	r9, #0
 8008cd2:	7808      	ldrb	r0, [r1, #0]
 8008cd4:	f7ff ff70 	bl	8008bb8 <__hexdig_fun>
 8008cd8:	1e43      	subs	r3, r0, #1
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b18      	cmp	r3, #24
 8008cde:	d82c      	bhi.n	8008d3a <__gethex+0x156>
 8008ce0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ce4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ce8:	f7ff ff66 	bl	8008bb8 <__hexdig_fun>
 8008cec:	1e43      	subs	r3, r0, #1
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b18      	cmp	r3, #24
 8008cf2:	d91d      	bls.n	8008d30 <__gethex+0x14c>
 8008cf4:	f1b9 0f00 	cmp.w	r9, #0
 8008cf8:	d000      	beq.n	8008cfc <__gethex+0x118>
 8008cfa:	4252      	negs	r2, r2
 8008cfc:	4415      	add	r5, r2
 8008cfe:	f8cb 1000 	str.w	r1, [fp]
 8008d02:	b1e4      	cbz	r4, 8008d3e <__gethex+0x15a>
 8008d04:	9b00      	ldr	r3, [sp, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	bf14      	ite	ne
 8008d0a:	2700      	movne	r7, #0
 8008d0c:	2706      	moveq	r7, #6
 8008d0e:	4638      	mov	r0, r7
 8008d10:	b009      	add	sp, #36	; 0x24
 8008d12:	ecbd 8b02 	vpop	{d8}
 8008d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1a:	463e      	mov	r6, r7
 8008d1c:	4625      	mov	r5, r4
 8008d1e:	2401      	movs	r4, #1
 8008d20:	e7ca      	b.n	8008cb8 <__gethex+0xd4>
 8008d22:	f04f 0900 	mov.w	r9, #0
 8008d26:	1cb1      	adds	r1, r6, #2
 8008d28:	e7d3      	b.n	8008cd2 <__gethex+0xee>
 8008d2a:	f04f 0901 	mov.w	r9, #1
 8008d2e:	e7fa      	b.n	8008d26 <__gethex+0x142>
 8008d30:	230a      	movs	r3, #10
 8008d32:	fb03 0202 	mla	r2, r3, r2, r0
 8008d36:	3a10      	subs	r2, #16
 8008d38:	e7d4      	b.n	8008ce4 <__gethex+0x100>
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	e7df      	b.n	8008cfe <__gethex+0x11a>
 8008d3e:	1bf3      	subs	r3, r6, r7
 8008d40:	3b01      	subs	r3, #1
 8008d42:	4621      	mov	r1, r4
 8008d44:	2b07      	cmp	r3, #7
 8008d46:	dc0b      	bgt.n	8008d60 <__gethex+0x17c>
 8008d48:	ee18 0a10 	vmov	r0, s16
 8008d4c:	f000 fa70 	bl	8009230 <_Balloc>
 8008d50:	4604      	mov	r4, r0
 8008d52:	b940      	cbnz	r0, 8008d66 <__gethex+0x182>
 8008d54:	4b5d      	ldr	r3, [pc, #372]	; (8008ecc <__gethex+0x2e8>)
 8008d56:	4602      	mov	r2, r0
 8008d58:	21de      	movs	r1, #222	; 0xde
 8008d5a:	485d      	ldr	r0, [pc, #372]	; (8008ed0 <__gethex+0x2ec>)
 8008d5c:	f001 f9b6 	bl	800a0cc <__assert_func>
 8008d60:	3101      	adds	r1, #1
 8008d62:	105b      	asrs	r3, r3, #1
 8008d64:	e7ee      	b.n	8008d44 <__gethex+0x160>
 8008d66:	f100 0914 	add.w	r9, r0, #20
 8008d6a:	f04f 0b00 	mov.w	fp, #0
 8008d6e:	f1ca 0301 	rsb	r3, sl, #1
 8008d72:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d76:	f8cd b000 	str.w	fp, [sp]
 8008d7a:	9306      	str	r3, [sp, #24]
 8008d7c:	42b7      	cmp	r7, r6
 8008d7e:	d340      	bcc.n	8008e02 <__gethex+0x21e>
 8008d80:	9802      	ldr	r0, [sp, #8]
 8008d82:	9b00      	ldr	r3, [sp, #0]
 8008d84:	f840 3b04 	str.w	r3, [r0], #4
 8008d88:	eba0 0009 	sub.w	r0, r0, r9
 8008d8c:	1080      	asrs	r0, r0, #2
 8008d8e:	0146      	lsls	r6, r0, #5
 8008d90:	6120      	str	r0, [r4, #16]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fb3e 	bl	8009414 <__hi0bits>
 8008d98:	1a30      	subs	r0, r6, r0
 8008d9a:	f8d8 6000 	ldr.w	r6, [r8]
 8008d9e:	42b0      	cmp	r0, r6
 8008da0:	dd63      	ble.n	8008e6a <__gethex+0x286>
 8008da2:	1b87      	subs	r7, r0, r6
 8008da4:	4639      	mov	r1, r7
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 fee2 	bl	8009b70 <__any_on>
 8008dac:	4682      	mov	sl, r0
 8008dae:	b1a8      	cbz	r0, 8008ddc <__gethex+0x1f8>
 8008db0:	1e7b      	subs	r3, r7, #1
 8008db2:	1159      	asrs	r1, r3, #5
 8008db4:	f003 021f 	and.w	r2, r3, #31
 8008db8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008dbc:	f04f 0a01 	mov.w	sl, #1
 8008dc0:	fa0a f202 	lsl.w	r2, sl, r2
 8008dc4:	420a      	tst	r2, r1
 8008dc6:	d009      	beq.n	8008ddc <__gethex+0x1f8>
 8008dc8:	4553      	cmp	r3, sl
 8008dca:	dd05      	ble.n	8008dd8 <__gethex+0x1f4>
 8008dcc:	1eb9      	subs	r1, r7, #2
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fece 	bl	8009b70 <__any_on>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d145      	bne.n	8008e64 <__gethex+0x280>
 8008dd8:	f04f 0a02 	mov.w	sl, #2
 8008ddc:	4639      	mov	r1, r7
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff fe98 	bl	8008b14 <rshift>
 8008de4:	443d      	add	r5, r7
 8008de6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dea:	42ab      	cmp	r3, r5
 8008dec:	da4c      	bge.n	8008e88 <__gethex+0x2a4>
 8008dee:	ee18 0a10 	vmov	r0, s16
 8008df2:	4621      	mov	r1, r4
 8008df4:	f000 fa5c 	bl	80092b0 <_Bfree>
 8008df8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	27a3      	movs	r7, #163	; 0xa3
 8008e00:	e785      	b.n	8008d0e <__gethex+0x12a>
 8008e02:	1e73      	subs	r3, r6, #1
 8008e04:	9a05      	ldr	r2, [sp, #20]
 8008e06:	9303      	str	r3, [sp, #12]
 8008e08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d019      	beq.n	8008e44 <__gethex+0x260>
 8008e10:	f1bb 0f20 	cmp.w	fp, #32
 8008e14:	d107      	bne.n	8008e26 <__gethex+0x242>
 8008e16:	9b02      	ldr	r3, [sp, #8]
 8008e18:	9a00      	ldr	r2, [sp, #0]
 8008e1a:	f843 2b04 	str.w	r2, [r3], #4
 8008e1e:	9302      	str	r3, [sp, #8]
 8008e20:	2300      	movs	r3, #0
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	469b      	mov	fp, r3
 8008e26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e2a:	f7ff fec5 	bl	8008bb8 <__hexdig_fun>
 8008e2e:	9b00      	ldr	r3, [sp, #0]
 8008e30:	f000 000f 	and.w	r0, r0, #15
 8008e34:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e38:	4303      	orrs	r3, r0
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	f10b 0b04 	add.w	fp, fp, #4
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	e00d      	b.n	8008e60 <__gethex+0x27c>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	9a06      	ldr	r2, [sp, #24]
 8008e48:	4413      	add	r3, r2
 8008e4a:	42bb      	cmp	r3, r7
 8008e4c:	d3e0      	bcc.n	8008e10 <__gethex+0x22c>
 8008e4e:	4618      	mov	r0, r3
 8008e50:	9901      	ldr	r1, [sp, #4]
 8008e52:	9307      	str	r3, [sp, #28]
 8008e54:	4652      	mov	r2, sl
 8008e56:	f001 f917 	bl	800a088 <strncmp>
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d1d7      	bne.n	8008e10 <__gethex+0x22c>
 8008e60:	461e      	mov	r6, r3
 8008e62:	e78b      	b.n	8008d7c <__gethex+0x198>
 8008e64:	f04f 0a03 	mov.w	sl, #3
 8008e68:	e7b8      	b.n	8008ddc <__gethex+0x1f8>
 8008e6a:	da0a      	bge.n	8008e82 <__gethex+0x29e>
 8008e6c:	1a37      	subs	r7, r6, r0
 8008e6e:	4621      	mov	r1, r4
 8008e70:	ee18 0a10 	vmov	r0, s16
 8008e74:	463a      	mov	r2, r7
 8008e76:	f000 fc37 	bl	80096e8 <__lshift>
 8008e7a:	1bed      	subs	r5, r5, r7
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	f100 0914 	add.w	r9, r0, #20
 8008e82:	f04f 0a00 	mov.w	sl, #0
 8008e86:	e7ae      	b.n	8008de6 <__gethex+0x202>
 8008e88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e8c:	42a8      	cmp	r0, r5
 8008e8e:	dd72      	ble.n	8008f76 <__gethex+0x392>
 8008e90:	1b45      	subs	r5, r0, r5
 8008e92:	42ae      	cmp	r6, r5
 8008e94:	dc36      	bgt.n	8008f04 <__gethex+0x320>
 8008e96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d02a      	beq.n	8008ef4 <__gethex+0x310>
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d02c      	beq.n	8008efc <__gethex+0x318>
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d11c      	bne.n	8008ee0 <__gethex+0x2fc>
 8008ea6:	42ae      	cmp	r6, r5
 8008ea8:	d11a      	bne.n	8008ee0 <__gethex+0x2fc>
 8008eaa:	2e01      	cmp	r6, #1
 8008eac:	d112      	bne.n	8008ed4 <__gethex+0x2f0>
 8008eae:	9a04      	ldr	r2, [sp, #16]
 8008eb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	6123      	str	r3, [r4, #16]
 8008eba:	f8c9 3000 	str.w	r3, [r9]
 8008ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ec0:	2762      	movs	r7, #98	; 0x62
 8008ec2:	601c      	str	r4, [r3, #0]
 8008ec4:	e723      	b.n	8008d0e <__gethex+0x12a>
 8008ec6:	bf00      	nop
 8008ec8:	0800b640 	.word	0x0800b640
 8008ecc:	0800b5c8 	.word	0x0800b5c8
 8008ed0:	0800b5d9 	.word	0x0800b5d9
 8008ed4:	1e71      	subs	r1, r6, #1
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 fe4a 	bl	8009b70 <__any_on>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1e6      	bne.n	8008eae <__gethex+0x2ca>
 8008ee0:	ee18 0a10 	vmov	r0, s16
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f000 f9e3 	bl	80092b0 <_Bfree>
 8008eea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008eec:	2300      	movs	r3, #0
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	2750      	movs	r7, #80	; 0x50
 8008ef2:	e70c      	b.n	8008d0e <__gethex+0x12a>
 8008ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1f2      	bne.n	8008ee0 <__gethex+0x2fc>
 8008efa:	e7d8      	b.n	8008eae <__gethex+0x2ca>
 8008efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1d5      	bne.n	8008eae <__gethex+0x2ca>
 8008f02:	e7ed      	b.n	8008ee0 <__gethex+0x2fc>
 8008f04:	1e6f      	subs	r7, r5, #1
 8008f06:	f1ba 0f00 	cmp.w	sl, #0
 8008f0a:	d131      	bne.n	8008f70 <__gethex+0x38c>
 8008f0c:	b127      	cbz	r7, 8008f18 <__gethex+0x334>
 8008f0e:	4639      	mov	r1, r7
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fe2d 	bl	8009b70 <__any_on>
 8008f16:	4682      	mov	sl, r0
 8008f18:	117b      	asrs	r3, r7, #5
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f20:	f007 071f 	and.w	r7, r7, #31
 8008f24:	fa01 f707 	lsl.w	r7, r1, r7
 8008f28:	421f      	tst	r7, r3
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	bf18      	it	ne
 8008f30:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f34:	1b76      	subs	r6, r6, r5
 8008f36:	f7ff fded 	bl	8008b14 <rshift>
 8008f3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f3e:	2702      	movs	r7, #2
 8008f40:	f1ba 0f00 	cmp.w	sl, #0
 8008f44:	d048      	beq.n	8008fd8 <__gethex+0x3f4>
 8008f46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d015      	beq.n	8008f7a <__gethex+0x396>
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d017      	beq.n	8008f82 <__gethex+0x39e>
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d109      	bne.n	8008f6a <__gethex+0x386>
 8008f56:	f01a 0f02 	tst.w	sl, #2
 8008f5a:	d006      	beq.n	8008f6a <__gethex+0x386>
 8008f5c:	f8d9 0000 	ldr.w	r0, [r9]
 8008f60:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f64:	f01a 0f01 	tst.w	sl, #1
 8008f68:	d10e      	bne.n	8008f88 <__gethex+0x3a4>
 8008f6a:	f047 0710 	orr.w	r7, r7, #16
 8008f6e:	e033      	b.n	8008fd8 <__gethex+0x3f4>
 8008f70:	f04f 0a01 	mov.w	sl, #1
 8008f74:	e7d0      	b.n	8008f18 <__gethex+0x334>
 8008f76:	2701      	movs	r7, #1
 8008f78:	e7e2      	b.n	8008f40 <__gethex+0x35c>
 8008f7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f7c:	f1c3 0301 	rsb	r3, r3, #1
 8008f80:	9315      	str	r3, [sp, #84]	; 0x54
 8008f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0f0      	beq.n	8008f6a <__gethex+0x386>
 8008f88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f8c:	f104 0314 	add.w	r3, r4, #20
 8008f90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f98:	f04f 0c00 	mov.w	ip, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fa6:	d01c      	beq.n	8008fe2 <__gethex+0x3fe>
 8008fa8:	3201      	adds	r2, #1
 8008faa:	6002      	str	r2, [r0, #0]
 8008fac:	2f02      	cmp	r7, #2
 8008fae:	f104 0314 	add.w	r3, r4, #20
 8008fb2:	d13f      	bne.n	8009034 <__gethex+0x450>
 8008fb4:	f8d8 2000 	ldr.w	r2, [r8]
 8008fb8:	3a01      	subs	r2, #1
 8008fba:	42b2      	cmp	r2, r6
 8008fbc:	d10a      	bne.n	8008fd4 <__gethex+0x3f0>
 8008fbe:	1171      	asrs	r1, r6, #5
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fc6:	f006 061f 	and.w	r6, r6, #31
 8008fca:	fa02 f606 	lsl.w	r6, r2, r6
 8008fce:	421e      	tst	r6, r3
 8008fd0:	bf18      	it	ne
 8008fd2:	4617      	movne	r7, r2
 8008fd4:	f047 0720 	orr.w	r7, r7, #32
 8008fd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fda:	601c      	str	r4, [r3, #0]
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	601d      	str	r5, [r3, #0]
 8008fe0:	e695      	b.n	8008d0e <__gethex+0x12a>
 8008fe2:	4299      	cmp	r1, r3
 8008fe4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008fe8:	d8d8      	bhi.n	8008f9c <__gethex+0x3b8>
 8008fea:	68a3      	ldr	r3, [r4, #8]
 8008fec:	459b      	cmp	fp, r3
 8008fee:	db19      	blt.n	8009024 <__gethex+0x440>
 8008ff0:	6861      	ldr	r1, [r4, #4]
 8008ff2:	ee18 0a10 	vmov	r0, s16
 8008ff6:	3101      	adds	r1, #1
 8008ff8:	f000 f91a 	bl	8009230 <_Balloc>
 8008ffc:	4681      	mov	r9, r0
 8008ffe:	b918      	cbnz	r0, 8009008 <__gethex+0x424>
 8009000:	4b1a      	ldr	r3, [pc, #104]	; (800906c <__gethex+0x488>)
 8009002:	4602      	mov	r2, r0
 8009004:	2184      	movs	r1, #132	; 0x84
 8009006:	e6a8      	b.n	8008d5a <__gethex+0x176>
 8009008:	6922      	ldr	r2, [r4, #16]
 800900a:	3202      	adds	r2, #2
 800900c:	f104 010c 	add.w	r1, r4, #12
 8009010:	0092      	lsls	r2, r2, #2
 8009012:	300c      	adds	r0, #12
 8009014:	f7fd fb88 	bl	8006728 <memcpy>
 8009018:	4621      	mov	r1, r4
 800901a:	ee18 0a10 	vmov	r0, s16
 800901e:	f000 f947 	bl	80092b0 <_Bfree>
 8009022:	464c      	mov	r4, r9
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800902c:	6122      	str	r2, [r4, #16]
 800902e:	2201      	movs	r2, #1
 8009030:	615a      	str	r2, [r3, #20]
 8009032:	e7bb      	b.n	8008fac <__gethex+0x3c8>
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	455a      	cmp	r2, fp
 8009038:	dd0b      	ble.n	8009052 <__gethex+0x46e>
 800903a:	2101      	movs	r1, #1
 800903c:	4620      	mov	r0, r4
 800903e:	f7ff fd69 	bl	8008b14 <rshift>
 8009042:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009046:	3501      	adds	r5, #1
 8009048:	42ab      	cmp	r3, r5
 800904a:	f6ff aed0 	blt.w	8008dee <__gethex+0x20a>
 800904e:	2701      	movs	r7, #1
 8009050:	e7c0      	b.n	8008fd4 <__gethex+0x3f0>
 8009052:	f016 061f 	ands.w	r6, r6, #31
 8009056:	d0fa      	beq.n	800904e <__gethex+0x46a>
 8009058:	4453      	add	r3, sl
 800905a:	f1c6 0620 	rsb	r6, r6, #32
 800905e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009062:	f000 f9d7 	bl	8009414 <__hi0bits>
 8009066:	42b0      	cmp	r0, r6
 8009068:	dbe7      	blt.n	800903a <__gethex+0x456>
 800906a:	e7f0      	b.n	800904e <__gethex+0x46a>
 800906c:	0800b5c8 	.word	0x0800b5c8

08009070 <L_shift>:
 8009070:	f1c2 0208 	rsb	r2, r2, #8
 8009074:	0092      	lsls	r2, r2, #2
 8009076:	b570      	push	{r4, r5, r6, lr}
 8009078:	f1c2 0620 	rsb	r6, r2, #32
 800907c:	6843      	ldr	r3, [r0, #4]
 800907e:	6804      	ldr	r4, [r0, #0]
 8009080:	fa03 f506 	lsl.w	r5, r3, r6
 8009084:	432c      	orrs	r4, r5
 8009086:	40d3      	lsrs	r3, r2
 8009088:	6004      	str	r4, [r0, #0]
 800908a:	f840 3f04 	str.w	r3, [r0, #4]!
 800908e:	4288      	cmp	r0, r1
 8009090:	d3f4      	bcc.n	800907c <L_shift+0xc>
 8009092:	bd70      	pop	{r4, r5, r6, pc}

08009094 <__match>:
 8009094:	b530      	push	{r4, r5, lr}
 8009096:	6803      	ldr	r3, [r0, #0]
 8009098:	3301      	adds	r3, #1
 800909a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800909e:	b914      	cbnz	r4, 80090a6 <__match+0x12>
 80090a0:	6003      	str	r3, [r0, #0]
 80090a2:	2001      	movs	r0, #1
 80090a4:	bd30      	pop	{r4, r5, pc}
 80090a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090ae:	2d19      	cmp	r5, #25
 80090b0:	bf98      	it	ls
 80090b2:	3220      	addls	r2, #32
 80090b4:	42a2      	cmp	r2, r4
 80090b6:	d0f0      	beq.n	800909a <__match+0x6>
 80090b8:	2000      	movs	r0, #0
 80090ba:	e7f3      	b.n	80090a4 <__match+0x10>

080090bc <__hexnan>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	680b      	ldr	r3, [r1, #0]
 80090c2:	115e      	asrs	r6, r3, #5
 80090c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090c8:	f013 031f 	ands.w	r3, r3, #31
 80090cc:	b087      	sub	sp, #28
 80090ce:	bf18      	it	ne
 80090d0:	3604      	addne	r6, #4
 80090d2:	2500      	movs	r5, #0
 80090d4:	1f37      	subs	r7, r6, #4
 80090d6:	4690      	mov	r8, r2
 80090d8:	6802      	ldr	r2, [r0, #0]
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	4682      	mov	sl, r0
 80090de:	f846 5c04 	str.w	r5, [r6, #-4]
 80090e2:	46b9      	mov	r9, r7
 80090e4:	463c      	mov	r4, r7
 80090e6:	9502      	str	r5, [sp, #8]
 80090e8:	46ab      	mov	fp, r5
 80090ea:	7851      	ldrb	r1, [r2, #1]
 80090ec:	1c53      	adds	r3, r2, #1
 80090ee:	9303      	str	r3, [sp, #12]
 80090f0:	b341      	cbz	r1, 8009144 <__hexnan+0x88>
 80090f2:	4608      	mov	r0, r1
 80090f4:	9205      	str	r2, [sp, #20]
 80090f6:	9104      	str	r1, [sp, #16]
 80090f8:	f7ff fd5e 	bl	8008bb8 <__hexdig_fun>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d14f      	bne.n	80091a0 <__hexnan+0xe4>
 8009100:	9904      	ldr	r1, [sp, #16]
 8009102:	9a05      	ldr	r2, [sp, #20]
 8009104:	2920      	cmp	r1, #32
 8009106:	d818      	bhi.n	800913a <__hexnan+0x7e>
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	459b      	cmp	fp, r3
 800910c:	dd13      	ble.n	8009136 <__hexnan+0x7a>
 800910e:	454c      	cmp	r4, r9
 8009110:	d206      	bcs.n	8009120 <__hexnan+0x64>
 8009112:	2d07      	cmp	r5, #7
 8009114:	dc04      	bgt.n	8009120 <__hexnan+0x64>
 8009116:	462a      	mov	r2, r5
 8009118:	4649      	mov	r1, r9
 800911a:	4620      	mov	r0, r4
 800911c:	f7ff ffa8 	bl	8009070 <L_shift>
 8009120:	4544      	cmp	r4, r8
 8009122:	d950      	bls.n	80091c6 <__hexnan+0x10a>
 8009124:	2300      	movs	r3, #0
 8009126:	f1a4 0904 	sub.w	r9, r4, #4
 800912a:	f844 3c04 	str.w	r3, [r4, #-4]
 800912e:	f8cd b008 	str.w	fp, [sp, #8]
 8009132:	464c      	mov	r4, r9
 8009134:	461d      	mov	r5, r3
 8009136:	9a03      	ldr	r2, [sp, #12]
 8009138:	e7d7      	b.n	80090ea <__hexnan+0x2e>
 800913a:	2929      	cmp	r1, #41	; 0x29
 800913c:	d156      	bne.n	80091ec <__hexnan+0x130>
 800913e:	3202      	adds	r2, #2
 8009140:	f8ca 2000 	str.w	r2, [sl]
 8009144:	f1bb 0f00 	cmp.w	fp, #0
 8009148:	d050      	beq.n	80091ec <__hexnan+0x130>
 800914a:	454c      	cmp	r4, r9
 800914c:	d206      	bcs.n	800915c <__hexnan+0xa0>
 800914e:	2d07      	cmp	r5, #7
 8009150:	dc04      	bgt.n	800915c <__hexnan+0xa0>
 8009152:	462a      	mov	r2, r5
 8009154:	4649      	mov	r1, r9
 8009156:	4620      	mov	r0, r4
 8009158:	f7ff ff8a 	bl	8009070 <L_shift>
 800915c:	4544      	cmp	r4, r8
 800915e:	d934      	bls.n	80091ca <__hexnan+0x10e>
 8009160:	f1a8 0204 	sub.w	r2, r8, #4
 8009164:	4623      	mov	r3, r4
 8009166:	f853 1b04 	ldr.w	r1, [r3], #4
 800916a:	f842 1f04 	str.w	r1, [r2, #4]!
 800916e:	429f      	cmp	r7, r3
 8009170:	d2f9      	bcs.n	8009166 <__hexnan+0xaa>
 8009172:	1b3b      	subs	r3, r7, r4
 8009174:	f023 0303 	bic.w	r3, r3, #3
 8009178:	3304      	adds	r3, #4
 800917a:	3401      	adds	r4, #1
 800917c:	3e03      	subs	r6, #3
 800917e:	42b4      	cmp	r4, r6
 8009180:	bf88      	it	hi
 8009182:	2304      	movhi	r3, #4
 8009184:	4443      	add	r3, r8
 8009186:	2200      	movs	r2, #0
 8009188:	f843 2b04 	str.w	r2, [r3], #4
 800918c:	429f      	cmp	r7, r3
 800918e:	d2fb      	bcs.n	8009188 <__hexnan+0xcc>
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	b91b      	cbnz	r3, 800919c <__hexnan+0xe0>
 8009194:	4547      	cmp	r7, r8
 8009196:	d127      	bne.n	80091e8 <__hexnan+0x12c>
 8009198:	2301      	movs	r3, #1
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	2005      	movs	r0, #5
 800919e:	e026      	b.n	80091ee <__hexnan+0x132>
 80091a0:	3501      	adds	r5, #1
 80091a2:	2d08      	cmp	r5, #8
 80091a4:	f10b 0b01 	add.w	fp, fp, #1
 80091a8:	dd06      	ble.n	80091b8 <__hexnan+0xfc>
 80091aa:	4544      	cmp	r4, r8
 80091ac:	d9c3      	bls.n	8009136 <__hexnan+0x7a>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80091b4:	2501      	movs	r5, #1
 80091b6:	3c04      	subs	r4, #4
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	f000 000f 	and.w	r0, r0, #15
 80091be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80091c2:	6022      	str	r2, [r4, #0]
 80091c4:	e7b7      	b.n	8009136 <__hexnan+0x7a>
 80091c6:	2508      	movs	r5, #8
 80091c8:	e7b5      	b.n	8009136 <__hexnan+0x7a>
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0df      	beq.n	8009190 <__hexnan+0xd4>
 80091d0:	f04f 32ff 	mov.w	r2, #4294967295
 80091d4:	f1c3 0320 	rsb	r3, r3, #32
 80091d8:	fa22 f303 	lsr.w	r3, r2, r3
 80091dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091e0:	401a      	ands	r2, r3
 80091e2:	f846 2c04 	str.w	r2, [r6, #-4]
 80091e6:	e7d3      	b.n	8009190 <__hexnan+0xd4>
 80091e8:	3f04      	subs	r7, #4
 80091ea:	e7d1      	b.n	8009190 <__hexnan+0xd4>
 80091ec:	2004      	movs	r0, #4
 80091ee:	b007      	add	sp, #28
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091f4 <_localeconv_r>:
 80091f4:	4800      	ldr	r0, [pc, #0]	; (80091f8 <_localeconv_r+0x4>)
 80091f6:	4770      	bx	lr
 80091f8:	20000164 	.word	0x20000164

080091fc <malloc>:
 80091fc:	4b02      	ldr	r3, [pc, #8]	; (8009208 <malloc+0xc>)
 80091fe:	4601      	mov	r1, r0
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	f000 bd59 	b.w	8009cb8 <_malloc_r>
 8009206:	bf00      	nop
 8009208:	2000000c 	.word	0x2000000c

0800920c <__ascii_mbtowc>:
 800920c:	b082      	sub	sp, #8
 800920e:	b901      	cbnz	r1, 8009212 <__ascii_mbtowc+0x6>
 8009210:	a901      	add	r1, sp, #4
 8009212:	b142      	cbz	r2, 8009226 <__ascii_mbtowc+0x1a>
 8009214:	b14b      	cbz	r3, 800922a <__ascii_mbtowc+0x1e>
 8009216:	7813      	ldrb	r3, [r2, #0]
 8009218:	600b      	str	r3, [r1, #0]
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	1e10      	subs	r0, r2, #0
 800921e:	bf18      	it	ne
 8009220:	2001      	movne	r0, #1
 8009222:	b002      	add	sp, #8
 8009224:	4770      	bx	lr
 8009226:	4610      	mov	r0, r2
 8009228:	e7fb      	b.n	8009222 <__ascii_mbtowc+0x16>
 800922a:	f06f 0001 	mvn.w	r0, #1
 800922e:	e7f8      	b.n	8009222 <__ascii_mbtowc+0x16>

08009230 <_Balloc>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009234:	4604      	mov	r4, r0
 8009236:	460d      	mov	r5, r1
 8009238:	b976      	cbnz	r6, 8009258 <_Balloc+0x28>
 800923a:	2010      	movs	r0, #16
 800923c:	f7ff ffde 	bl	80091fc <malloc>
 8009240:	4602      	mov	r2, r0
 8009242:	6260      	str	r0, [r4, #36]	; 0x24
 8009244:	b920      	cbnz	r0, 8009250 <_Balloc+0x20>
 8009246:	4b18      	ldr	r3, [pc, #96]	; (80092a8 <_Balloc+0x78>)
 8009248:	4818      	ldr	r0, [pc, #96]	; (80092ac <_Balloc+0x7c>)
 800924a:	2166      	movs	r1, #102	; 0x66
 800924c:	f000 ff3e 	bl	800a0cc <__assert_func>
 8009250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009254:	6006      	str	r6, [r0, #0]
 8009256:	60c6      	str	r6, [r0, #12]
 8009258:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800925a:	68f3      	ldr	r3, [r6, #12]
 800925c:	b183      	cbz	r3, 8009280 <_Balloc+0x50>
 800925e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009266:	b9b8      	cbnz	r0, 8009298 <_Balloc+0x68>
 8009268:	2101      	movs	r1, #1
 800926a:	fa01 f605 	lsl.w	r6, r1, r5
 800926e:	1d72      	adds	r2, r6, #5
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	4620      	mov	r0, r4
 8009274:	f000 fc9d 	bl	8009bb2 <_calloc_r>
 8009278:	b160      	cbz	r0, 8009294 <_Balloc+0x64>
 800927a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800927e:	e00e      	b.n	800929e <_Balloc+0x6e>
 8009280:	2221      	movs	r2, #33	; 0x21
 8009282:	2104      	movs	r1, #4
 8009284:	4620      	mov	r0, r4
 8009286:	f000 fc94 	bl	8009bb2 <_calloc_r>
 800928a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800928c:	60f0      	str	r0, [r6, #12]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e4      	bne.n	800925e <_Balloc+0x2e>
 8009294:	2000      	movs	r0, #0
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	6802      	ldr	r2, [r0, #0]
 800929a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800929e:	2300      	movs	r3, #0
 80092a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092a4:	e7f7      	b.n	8009296 <_Balloc+0x66>
 80092a6:	bf00      	nop
 80092a8:	0800b556 	.word	0x0800b556
 80092ac:	0800b654 	.word	0x0800b654

080092b0 <_Bfree>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092b4:	4605      	mov	r5, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	b976      	cbnz	r6, 80092d8 <_Bfree+0x28>
 80092ba:	2010      	movs	r0, #16
 80092bc:	f7ff ff9e 	bl	80091fc <malloc>
 80092c0:	4602      	mov	r2, r0
 80092c2:	6268      	str	r0, [r5, #36]	; 0x24
 80092c4:	b920      	cbnz	r0, 80092d0 <_Bfree+0x20>
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <_Bfree+0x3c>)
 80092c8:	4809      	ldr	r0, [pc, #36]	; (80092f0 <_Bfree+0x40>)
 80092ca:	218a      	movs	r1, #138	; 0x8a
 80092cc:	f000 fefe 	bl	800a0cc <__assert_func>
 80092d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d4:	6006      	str	r6, [r0, #0]
 80092d6:	60c6      	str	r6, [r0, #12]
 80092d8:	b13c      	cbz	r4, 80092ea <_Bfree+0x3a>
 80092da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092dc:	6862      	ldr	r2, [r4, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092e4:	6021      	str	r1, [r4, #0]
 80092e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	0800b556 	.word	0x0800b556
 80092f0:	0800b654 	.word	0x0800b654

080092f4 <__multadd>:
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	690d      	ldr	r5, [r1, #16]
 80092fa:	4607      	mov	r7, r0
 80092fc:	460c      	mov	r4, r1
 80092fe:	461e      	mov	r6, r3
 8009300:	f101 0c14 	add.w	ip, r1, #20
 8009304:	2000      	movs	r0, #0
 8009306:	f8dc 3000 	ldr.w	r3, [ip]
 800930a:	b299      	uxth	r1, r3
 800930c:	fb02 6101 	mla	r1, r2, r1, r6
 8009310:	0c1e      	lsrs	r6, r3, #16
 8009312:	0c0b      	lsrs	r3, r1, #16
 8009314:	fb02 3306 	mla	r3, r2, r6, r3
 8009318:	b289      	uxth	r1, r1
 800931a:	3001      	adds	r0, #1
 800931c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009320:	4285      	cmp	r5, r0
 8009322:	f84c 1b04 	str.w	r1, [ip], #4
 8009326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800932a:	dcec      	bgt.n	8009306 <__multadd+0x12>
 800932c:	b30e      	cbz	r6, 8009372 <__multadd+0x7e>
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	42ab      	cmp	r3, r5
 8009332:	dc19      	bgt.n	8009368 <__multadd+0x74>
 8009334:	6861      	ldr	r1, [r4, #4]
 8009336:	4638      	mov	r0, r7
 8009338:	3101      	adds	r1, #1
 800933a:	f7ff ff79 	bl	8009230 <_Balloc>
 800933e:	4680      	mov	r8, r0
 8009340:	b928      	cbnz	r0, 800934e <__multadd+0x5a>
 8009342:	4602      	mov	r2, r0
 8009344:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <__multadd+0x84>)
 8009346:	480d      	ldr	r0, [pc, #52]	; (800937c <__multadd+0x88>)
 8009348:	21b5      	movs	r1, #181	; 0xb5
 800934a:	f000 febf 	bl	800a0cc <__assert_func>
 800934e:	6922      	ldr	r2, [r4, #16]
 8009350:	3202      	adds	r2, #2
 8009352:	f104 010c 	add.w	r1, r4, #12
 8009356:	0092      	lsls	r2, r2, #2
 8009358:	300c      	adds	r0, #12
 800935a:	f7fd f9e5 	bl	8006728 <memcpy>
 800935e:	4621      	mov	r1, r4
 8009360:	4638      	mov	r0, r7
 8009362:	f7ff ffa5 	bl	80092b0 <_Bfree>
 8009366:	4644      	mov	r4, r8
 8009368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800936c:	3501      	adds	r5, #1
 800936e:	615e      	str	r6, [r3, #20]
 8009370:	6125      	str	r5, [r4, #16]
 8009372:	4620      	mov	r0, r4
 8009374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009378:	0800b5c8 	.word	0x0800b5c8
 800937c:	0800b654 	.word	0x0800b654

08009380 <__s2b>:
 8009380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009384:	460c      	mov	r4, r1
 8009386:	4615      	mov	r5, r2
 8009388:	461f      	mov	r7, r3
 800938a:	2209      	movs	r2, #9
 800938c:	3308      	adds	r3, #8
 800938e:	4606      	mov	r6, r0
 8009390:	fb93 f3f2 	sdiv	r3, r3, r2
 8009394:	2100      	movs	r1, #0
 8009396:	2201      	movs	r2, #1
 8009398:	429a      	cmp	r2, r3
 800939a:	db09      	blt.n	80093b0 <__s2b+0x30>
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff ff47 	bl	8009230 <_Balloc>
 80093a2:	b940      	cbnz	r0, 80093b6 <__s2b+0x36>
 80093a4:	4602      	mov	r2, r0
 80093a6:	4b19      	ldr	r3, [pc, #100]	; (800940c <__s2b+0x8c>)
 80093a8:	4819      	ldr	r0, [pc, #100]	; (8009410 <__s2b+0x90>)
 80093aa:	21ce      	movs	r1, #206	; 0xce
 80093ac:	f000 fe8e 	bl	800a0cc <__assert_func>
 80093b0:	0052      	lsls	r2, r2, #1
 80093b2:	3101      	adds	r1, #1
 80093b4:	e7f0      	b.n	8009398 <__s2b+0x18>
 80093b6:	9b08      	ldr	r3, [sp, #32]
 80093b8:	6143      	str	r3, [r0, #20]
 80093ba:	2d09      	cmp	r5, #9
 80093bc:	f04f 0301 	mov.w	r3, #1
 80093c0:	6103      	str	r3, [r0, #16]
 80093c2:	dd16      	ble.n	80093f2 <__s2b+0x72>
 80093c4:	f104 0909 	add.w	r9, r4, #9
 80093c8:	46c8      	mov	r8, r9
 80093ca:	442c      	add	r4, r5
 80093cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093d0:	4601      	mov	r1, r0
 80093d2:	3b30      	subs	r3, #48	; 0x30
 80093d4:	220a      	movs	r2, #10
 80093d6:	4630      	mov	r0, r6
 80093d8:	f7ff ff8c 	bl	80092f4 <__multadd>
 80093dc:	45a0      	cmp	r8, r4
 80093de:	d1f5      	bne.n	80093cc <__s2b+0x4c>
 80093e0:	f1a5 0408 	sub.w	r4, r5, #8
 80093e4:	444c      	add	r4, r9
 80093e6:	1b2d      	subs	r5, r5, r4
 80093e8:	1963      	adds	r3, r4, r5
 80093ea:	42bb      	cmp	r3, r7
 80093ec:	db04      	blt.n	80093f8 <__s2b+0x78>
 80093ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093f2:	340a      	adds	r4, #10
 80093f4:	2509      	movs	r5, #9
 80093f6:	e7f6      	b.n	80093e6 <__s2b+0x66>
 80093f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093fc:	4601      	mov	r1, r0
 80093fe:	3b30      	subs	r3, #48	; 0x30
 8009400:	220a      	movs	r2, #10
 8009402:	4630      	mov	r0, r6
 8009404:	f7ff ff76 	bl	80092f4 <__multadd>
 8009408:	e7ee      	b.n	80093e8 <__s2b+0x68>
 800940a:	bf00      	nop
 800940c:	0800b5c8 	.word	0x0800b5c8
 8009410:	0800b654 	.word	0x0800b654

08009414 <__hi0bits>:
 8009414:	0c03      	lsrs	r3, r0, #16
 8009416:	041b      	lsls	r3, r3, #16
 8009418:	b9d3      	cbnz	r3, 8009450 <__hi0bits+0x3c>
 800941a:	0400      	lsls	r0, r0, #16
 800941c:	2310      	movs	r3, #16
 800941e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009422:	bf04      	itt	eq
 8009424:	0200      	lsleq	r0, r0, #8
 8009426:	3308      	addeq	r3, #8
 8009428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800942c:	bf04      	itt	eq
 800942e:	0100      	lsleq	r0, r0, #4
 8009430:	3304      	addeq	r3, #4
 8009432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009436:	bf04      	itt	eq
 8009438:	0080      	lsleq	r0, r0, #2
 800943a:	3302      	addeq	r3, #2
 800943c:	2800      	cmp	r0, #0
 800943e:	db05      	blt.n	800944c <__hi0bits+0x38>
 8009440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009444:	f103 0301 	add.w	r3, r3, #1
 8009448:	bf08      	it	eq
 800944a:	2320      	moveq	r3, #32
 800944c:	4618      	mov	r0, r3
 800944e:	4770      	bx	lr
 8009450:	2300      	movs	r3, #0
 8009452:	e7e4      	b.n	800941e <__hi0bits+0xa>

08009454 <__lo0bits>:
 8009454:	6803      	ldr	r3, [r0, #0]
 8009456:	f013 0207 	ands.w	r2, r3, #7
 800945a:	4601      	mov	r1, r0
 800945c:	d00b      	beq.n	8009476 <__lo0bits+0x22>
 800945e:	07da      	lsls	r2, r3, #31
 8009460:	d423      	bmi.n	80094aa <__lo0bits+0x56>
 8009462:	0798      	lsls	r0, r3, #30
 8009464:	bf49      	itett	mi
 8009466:	085b      	lsrmi	r3, r3, #1
 8009468:	089b      	lsrpl	r3, r3, #2
 800946a:	2001      	movmi	r0, #1
 800946c:	600b      	strmi	r3, [r1, #0]
 800946e:	bf5c      	itt	pl
 8009470:	600b      	strpl	r3, [r1, #0]
 8009472:	2002      	movpl	r0, #2
 8009474:	4770      	bx	lr
 8009476:	b298      	uxth	r0, r3
 8009478:	b9a8      	cbnz	r0, 80094a6 <__lo0bits+0x52>
 800947a:	0c1b      	lsrs	r3, r3, #16
 800947c:	2010      	movs	r0, #16
 800947e:	b2da      	uxtb	r2, r3
 8009480:	b90a      	cbnz	r2, 8009486 <__lo0bits+0x32>
 8009482:	3008      	adds	r0, #8
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	071a      	lsls	r2, r3, #28
 8009488:	bf04      	itt	eq
 800948a:	091b      	lsreq	r3, r3, #4
 800948c:	3004      	addeq	r0, #4
 800948e:	079a      	lsls	r2, r3, #30
 8009490:	bf04      	itt	eq
 8009492:	089b      	lsreq	r3, r3, #2
 8009494:	3002      	addeq	r0, #2
 8009496:	07da      	lsls	r2, r3, #31
 8009498:	d403      	bmi.n	80094a2 <__lo0bits+0x4e>
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	f100 0001 	add.w	r0, r0, #1
 80094a0:	d005      	beq.n	80094ae <__lo0bits+0x5a>
 80094a2:	600b      	str	r3, [r1, #0]
 80094a4:	4770      	bx	lr
 80094a6:	4610      	mov	r0, r2
 80094a8:	e7e9      	b.n	800947e <__lo0bits+0x2a>
 80094aa:	2000      	movs	r0, #0
 80094ac:	4770      	bx	lr
 80094ae:	2020      	movs	r0, #32
 80094b0:	4770      	bx	lr
	...

080094b4 <__i2b>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	460c      	mov	r4, r1
 80094b8:	2101      	movs	r1, #1
 80094ba:	f7ff feb9 	bl	8009230 <_Balloc>
 80094be:	4602      	mov	r2, r0
 80094c0:	b928      	cbnz	r0, 80094ce <__i2b+0x1a>
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <__i2b+0x24>)
 80094c4:	4805      	ldr	r0, [pc, #20]	; (80094dc <__i2b+0x28>)
 80094c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80094ca:	f000 fdff 	bl	800a0cc <__assert_func>
 80094ce:	2301      	movs	r3, #1
 80094d0:	6144      	str	r4, [r0, #20]
 80094d2:	6103      	str	r3, [r0, #16]
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	0800b5c8 	.word	0x0800b5c8
 80094dc:	0800b654 	.word	0x0800b654

080094e0 <__multiply>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	4691      	mov	r9, r2
 80094e6:	690a      	ldr	r2, [r1, #16]
 80094e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	bfb8      	it	lt
 80094f0:	460b      	movlt	r3, r1
 80094f2:	460c      	mov	r4, r1
 80094f4:	bfbc      	itt	lt
 80094f6:	464c      	movlt	r4, r9
 80094f8:	4699      	movlt	r9, r3
 80094fa:	6927      	ldr	r7, [r4, #16]
 80094fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	6861      	ldr	r1, [r4, #4]
 8009504:	eb07 060a 	add.w	r6, r7, sl
 8009508:	42b3      	cmp	r3, r6
 800950a:	b085      	sub	sp, #20
 800950c:	bfb8      	it	lt
 800950e:	3101      	addlt	r1, #1
 8009510:	f7ff fe8e 	bl	8009230 <_Balloc>
 8009514:	b930      	cbnz	r0, 8009524 <__multiply+0x44>
 8009516:	4602      	mov	r2, r0
 8009518:	4b44      	ldr	r3, [pc, #272]	; (800962c <__multiply+0x14c>)
 800951a:	4845      	ldr	r0, [pc, #276]	; (8009630 <__multiply+0x150>)
 800951c:	f240 115d 	movw	r1, #349	; 0x15d
 8009520:	f000 fdd4 	bl	800a0cc <__assert_func>
 8009524:	f100 0514 	add.w	r5, r0, #20
 8009528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800952c:	462b      	mov	r3, r5
 800952e:	2200      	movs	r2, #0
 8009530:	4543      	cmp	r3, r8
 8009532:	d321      	bcc.n	8009578 <__multiply+0x98>
 8009534:	f104 0314 	add.w	r3, r4, #20
 8009538:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800953c:	f109 0314 	add.w	r3, r9, #20
 8009540:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009544:	9202      	str	r2, [sp, #8]
 8009546:	1b3a      	subs	r2, r7, r4
 8009548:	3a15      	subs	r2, #21
 800954a:	f022 0203 	bic.w	r2, r2, #3
 800954e:	3204      	adds	r2, #4
 8009550:	f104 0115 	add.w	r1, r4, #21
 8009554:	428f      	cmp	r7, r1
 8009556:	bf38      	it	cc
 8009558:	2204      	movcc	r2, #4
 800955a:	9201      	str	r2, [sp, #4]
 800955c:	9a02      	ldr	r2, [sp, #8]
 800955e:	9303      	str	r3, [sp, #12]
 8009560:	429a      	cmp	r2, r3
 8009562:	d80c      	bhi.n	800957e <__multiply+0x9e>
 8009564:	2e00      	cmp	r6, #0
 8009566:	dd03      	ble.n	8009570 <__multiply+0x90>
 8009568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800956c:	2b00      	cmp	r3, #0
 800956e:	d05a      	beq.n	8009626 <__multiply+0x146>
 8009570:	6106      	str	r6, [r0, #16]
 8009572:	b005      	add	sp, #20
 8009574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009578:	f843 2b04 	str.w	r2, [r3], #4
 800957c:	e7d8      	b.n	8009530 <__multiply+0x50>
 800957e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009582:	f1ba 0f00 	cmp.w	sl, #0
 8009586:	d024      	beq.n	80095d2 <__multiply+0xf2>
 8009588:	f104 0e14 	add.w	lr, r4, #20
 800958c:	46a9      	mov	r9, r5
 800958e:	f04f 0c00 	mov.w	ip, #0
 8009592:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009596:	f8d9 1000 	ldr.w	r1, [r9]
 800959a:	fa1f fb82 	uxth.w	fp, r2
 800959e:	b289      	uxth	r1, r1
 80095a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80095a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095a8:	f8d9 2000 	ldr.w	r2, [r9]
 80095ac:	4461      	add	r1, ip
 80095ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80095b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095ba:	b289      	uxth	r1, r1
 80095bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095c0:	4577      	cmp	r7, lr
 80095c2:	f849 1b04 	str.w	r1, [r9], #4
 80095c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ca:	d8e2      	bhi.n	8009592 <__multiply+0xb2>
 80095cc:	9a01      	ldr	r2, [sp, #4]
 80095ce:	f845 c002 	str.w	ip, [r5, r2]
 80095d2:	9a03      	ldr	r2, [sp, #12]
 80095d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095d8:	3304      	adds	r3, #4
 80095da:	f1b9 0f00 	cmp.w	r9, #0
 80095de:	d020      	beq.n	8009622 <__multiply+0x142>
 80095e0:	6829      	ldr	r1, [r5, #0]
 80095e2:	f104 0c14 	add.w	ip, r4, #20
 80095e6:	46ae      	mov	lr, r5
 80095e8:	f04f 0a00 	mov.w	sl, #0
 80095ec:	f8bc b000 	ldrh.w	fp, [ip]
 80095f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095f4:	fb09 220b 	mla	r2, r9, fp, r2
 80095f8:	4492      	add	sl, r2
 80095fa:	b289      	uxth	r1, r1
 80095fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009600:	f84e 1b04 	str.w	r1, [lr], #4
 8009604:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009608:	f8be 1000 	ldrh.w	r1, [lr]
 800960c:	0c12      	lsrs	r2, r2, #16
 800960e:	fb09 1102 	mla	r1, r9, r2, r1
 8009612:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009616:	4567      	cmp	r7, ip
 8009618:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800961c:	d8e6      	bhi.n	80095ec <__multiply+0x10c>
 800961e:	9a01      	ldr	r2, [sp, #4]
 8009620:	50a9      	str	r1, [r5, r2]
 8009622:	3504      	adds	r5, #4
 8009624:	e79a      	b.n	800955c <__multiply+0x7c>
 8009626:	3e01      	subs	r6, #1
 8009628:	e79c      	b.n	8009564 <__multiply+0x84>
 800962a:	bf00      	nop
 800962c:	0800b5c8 	.word	0x0800b5c8
 8009630:	0800b654 	.word	0x0800b654

08009634 <__pow5mult>:
 8009634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009638:	4615      	mov	r5, r2
 800963a:	f012 0203 	ands.w	r2, r2, #3
 800963e:	4606      	mov	r6, r0
 8009640:	460f      	mov	r7, r1
 8009642:	d007      	beq.n	8009654 <__pow5mult+0x20>
 8009644:	4c25      	ldr	r4, [pc, #148]	; (80096dc <__pow5mult+0xa8>)
 8009646:	3a01      	subs	r2, #1
 8009648:	2300      	movs	r3, #0
 800964a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800964e:	f7ff fe51 	bl	80092f4 <__multadd>
 8009652:	4607      	mov	r7, r0
 8009654:	10ad      	asrs	r5, r5, #2
 8009656:	d03d      	beq.n	80096d4 <__pow5mult+0xa0>
 8009658:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800965a:	b97c      	cbnz	r4, 800967c <__pow5mult+0x48>
 800965c:	2010      	movs	r0, #16
 800965e:	f7ff fdcd 	bl	80091fc <malloc>
 8009662:	4602      	mov	r2, r0
 8009664:	6270      	str	r0, [r6, #36]	; 0x24
 8009666:	b928      	cbnz	r0, 8009674 <__pow5mult+0x40>
 8009668:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <__pow5mult+0xac>)
 800966a:	481e      	ldr	r0, [pc, #120]	; (80096e4 <__pow5mult+0xb0>)
 800966c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009670:	f000 fd2c 	bl	800a0cc <__assert_func>
 8009674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009678:	6004      	str	r4, [r0, #0]
 800967a:	60c4      	str	r4, [r0, #12]
 800967c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009684:	b94c      	cbnz	r4, 800969a <__pow5mult+0x66>
 8009686:	f240 2171 	movw	r1, #625	; 0x271
 800968a:	4630      	mov	r0, r6
 800968c:	f7ff ff12 	bl	80094b4 <__i2b>
 8009690:	2300      	movs	r3, #0
 8009692:	f8c8 0008 	str.w	r0, [r8, #8]
 8009696:	4604      	mov	r4, r0
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	07eb      	lsls	r3, r5, #31
 80096a0:	d50a      	bpl.n	80096b8 <__pow5mult+0x84>
 80096a2:	4639      	mov	r1, r7
 80096a4:	4622      	mov	r2, r4
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ff1a 	bl	80094e0 <__multiply>
 80096ac:	4639      	mov	r1, r7
 80096ae:	4680      	mov	r8, r0
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff fdfd 	bl	80092b0 <_Bfree>
 80096b6:	4647      	mov	r7, r8
 80096b8:	106d      	asrs	r5, r5, #1
 80096ba:	d00b      	beq.n	80096d4 <__pow5mult+0xa0>
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	b938      	cbnz	r0, 80096d0 <__pow5mult+0x9c>
 80096c0:	4622      	mov	r2, r4
 80096c2:	4621      	mov	r1, r4
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7ff ff0b 	bl	80094e0 <__multiply>
 80096ca:	6020      	str	r0, [r4, #0]
 80096cc:	f8c0 9000 	str.w	r9, [r0]
 80096d0:	4604      	mov	r4, r0
 80096d2:	e7e4      	b.n	800969e <__pow5mult+0x6a>
 80096d4:	4638      	mov	r0, r7
 80096d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096da:	bf00      	nop
 80096dc:	0800b7a0 	.word	0x0800b7a0
 80096e0:	0800b556 	.word	0x0800b556
 80096e4:	0800b654 	.word	0x0800b654

080096e8 <__lshift>:
 80096e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ec:	460c      	mov	r4, r1
 80096ee:	6849      	ldr	r1, [r1, #4]
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	4607      	mov	r7, r0
 80096fa:	4691      	mov	r9, r2
 80096fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009700:	f108 0601 	add.w	r6, r8, #1
 8009704:	42b3      	cmp	r3, r6
 8009706:	db0b      	blt.n	8009720 <__lshift+0x38>
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff fd91 	bl	8009230 <_Balloc>
 800970e:	4605      	mov	r5, r0
 8009710:	b948      	cbnz	r0, 8009726 <__lshift+0x3e>
 8009712:	4602      	mov	r2, r0
 8009714:	4b2a      	ldr	r3, [pc, #168]	; (80097c0 <__lshift+0xd8>)
 8009716:	482b      	ldr	r0, [pc, #172]	; (80097c4 <__lshift+0xdc>)
 8009718:	f240 11d9 	movw	r1, #473	; 0x1d9
 800971c:	f000 fcd6 	bl	800a0cc <__assert_func>
 8009720:	3101      	adds	r1, #1
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	e7ee      	b.n	8009704 <__lshift+0x1c>
 8009726:	2300      	movs	r3, #0
 8009728:	f100 0114 	add.w	r1, r0, #20
 800972c:	f100 0210 	add.w	r2, r0, #16
 8009730:	4618      	mov	r0, r3
 8009732:	4553      	cmp	r3, sl
 8009734:	db37      	blt.n	80097a6 <__lshift+0xbe>
 8009736:	6920      	ldr	r0, [r4, #16]
 8009738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800973c:	f104 0314 	add.w	r3, r4, #20
 8009740:	f019 091f 	ands.w	r9, r9, #31
 8009744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009748:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800974c:	d02f      	beq.n	80097ae <__lshift+0xc6>
 800974e:	f1c9 0e20 	rsb	lr, r9, #32
 8009752:	468a      	mov	sl, r1
 8009754:	f04f 0c00 	mov.w	ip, #0
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	fa02 f209 	lsl.w	r2, r2, r9
 800975e:	ea42 020c 	orr.w	r2, r2, ip
 8009762:	f84a 2b04 	str.w	r2, [sl], #4
 8009766:	f853 2b04 	ldr.w	r2, [r3], #4
 800976a:	4298      	cmp	r0, r3
 800976c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009770:	d8f2      	bhi.n	8009758 <__lshift+0x70>
 8009772:	1b03      	subs	r3, r0, r4
 8009774:	3b15      	subs	r3, #21
 8009776:	f023 0303 	bic.w	r3, r3, #3
 800977a:	3304      	adds	r3, #4
 800977c:	f104 0215 	add.w	r2, r4, #21
 8009780:	4290      	cmp	r0, r2
 8009782:	bf38      	it	cc
 8009784:	2304      	movcc	r3, #4
 8009786:	f841 c003 	str.w	ip, [r1, r3]
 800978a:	f1bc 0f00 	cmp.w	ip, #0
 800978e:	d001      	beq.n	8009794 <__lshift+0xac>
 8009790:	f108 0602 	add.w	r6, r8, #2
 8009794:	3e01      	subs	r6, #1
 8009796:	4638      	mov	r0, r7
 8009798:	612e      	str	r6, [r5, #16]
 800979a:	4621      	mov	r1, r4
 800979c:	f7ff fd88 	bl	80092b0 <_Bfree>
 80097a0:	4628      	mov	r0, r5
 80097a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80097aa:	3301      	adds	r3, #1
 80097ac:	e7c1      	b.n	8009732 <__lshift+0x4a>
 80097ae:	3904      	subs	r1, #4
 80097b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80097b8:	4298      	cmp	r0, r3
 80097ba:	d8f9      	bhi.n	80097b0 <__lshift+0xc8>
 80097bc:	e7ea      	b.n	8009794 <__lshift+0xac>
 80097be:	bf00      	nop
 80097c0:	0800b5c8 	.word	0x0800b5c8
 80097c4:	0800b654 	.word	0x0800b654

080097c8 <__mcmp>:
 80097c8:	b530      	push	{r4, r5, lr}
 80097ca:	6902      	ldr	r2, [r0, #16]
 80097cc:	690c      	ldr	r4, [r1, #16]
 80097ce:	1b12      	subs	r2, r2, r4
 80097d0:	d10e      	bne.n	80097f0 <__mcmp+0x28>
 80097d2:	f100 0314 	add.w	r3, r0, #20
 80097d6:	3114      	adds	r1, #20
 80097d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097e8:	42a5      	cmp	r5, r4
 80097ea:	d003      	beq.n	80097f4 <__mcmp+0x2c>
 80097ec:	d305      	bcc.n	80097fa <__mcmp+0x32>
 80097ee:	2201      	movs	r2, #1
 80097f0:	4610      	mov	r0, r2
 80097f2:	bd30      	pop	{r4, r5, pc}
 80097f4:	4283      	cmp	r3, r0
 80097f6:	d3f3      	bcc.n	80097e0 <__mcmp+0x18>
 80097f8:	e7fa      	b.n	80097f0 <__mcmp+0x28>
 80097fa:	f04f 32ff 	mov.w	r2, #4294967295
 80097fe:	e7f7      	b.n	80097f0 <__mcmp+0x28>

08009800 <__mdiff>:
 8009800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	460c      	mov	r4, r1
 8009806:	4606      	mov	r6, r0
 8009808:	4611      	mov	r1, r2
 800980a:	4620      	mov	r0, r4
 800980c:	4690      	mov	r8, r2
 800980e:	f7ff ffdb 	bl	80097c8 <__mcmp>
 8009812:	1e05      	subs	r5, r0, #0
 8009814:	d110      	bne.n	8009838 <__mdiff+0x38>
 8009816:	4629      	mov	r1, r5
 8009818:	4630      	mov	r0, r6
 800981a:	f7ff fd09 	bl	8009230 <_Balloc>
 800981e:	b930      	cbnz	r0, 800982e <__mdiff+0x2e>
 8009820:	4b3a      	ldr	r3, [pc, #232]	; (800990c <__mdiff+0x10c>)
 8009822:	4602      	mov	r2, r0
 8009824:	f240 2132 	movw	r1, #562	; 0x232
 8009828:	4839      	ldr	r0, [pc, #228]	; (8009910 <__mdiff+0x110>)
 800982a:	f000 fc4f 	bl	800a0cc <__assert_func>
 800982e:	2301      	movs	r3, #1
 8009830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009838:	bfa4      	itt	ge
 800983a:	4643      	movge	r3, r8
 800983c:	46a0      	movge	r8, r4
 800983e:	4630      	mov	r0, r6
 8009840:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009844:	bfa6      	itte	ge
 8009846:	461c      	movge	r4, r3
 8009848:	2500      	movge	r5, #0
 800984a:	2501      	movlt	r5, #1
 800984c:	f7ff fcf0 	bl	8009230 <_Balloc>
 8009850:	b920      	cbnz	r0, 800985c <__mdiff+0x5c>
 8009852:	4b2e      	ldr	r3, [pc, #184]	; (800990c <__mdiff+0x10c>)
 8009854:	4602      	mov	r2, r0
 8009856:	f44f 7110 	mov.w	r1, #576	; 0x240
 800985a:	e7e5      	b.n	8009828 <__mdiff+0x28>
 800985c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009860:	6926      	ldr	r6, [r4, #16]
 8009862:	60c5      	str	r5, [r0, #12]
 8009864:	f104 0914 	add.w	r9, r4, #20
 8009868:	f108 0514 	add.w	r5, r8, #20
 800986c:	f100 0e14 	add.w	lr, r0, #20
 8009870:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009874:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009878:	f108 0210 	add.w	r2, r8, #16
 800987c:	46f2      	mov	sl, lr
 800987e:	2100      	movs	r1, #0
 8009880:	f859 3b04 	ldr.w	r3, [r9], #4
 8009884:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009888:	fa1f f883 	uxth.w	r8, r3
 800988c:	fa11 f18b 	uxtah	r1, r1, fp
 8009890:	0c1b      	lsrs	r3, r3, #16
 8009892:	eba1 0808 	sub.w	r8, r1, r8
 8009896:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800989a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800989e:	fa1f f888 	uxth.w	r8, r8
 80098a2:	1419      	asrs	r1, r3, #16
 80098a4:	454e      	cmp	r6, r9
 80098a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098aa:	f84a 3b04 	str.w	r3, [sl], #4
 80098ae:	d8e7      	bhi.n	8009880 <__mdiff+0x80>
 80098b0:	1b33      	subs	r3, r6, r4
 80098b2:	3b15      	subs	r3, #21
 80098b4:	f023 0303 	bic.w	r3, r3, #3
 80098b8:	3304      	adds	r3, #4
 80098ba:	3415      	adds	r4, #21
 80098bc:	42a6      	cmp	r6, r4
 80098be:	bf38      	it	cc
 80098c0:	2304      	movcc	r3, #4
 80098c2:	441d      	add	r5, r3
 80098c4:	4473      	add	r3, lr
 80098c6:	469e      	mov	lr, r3
 80098c8:	462e      	mov	r6, r5
 80098ca:	4566      	cmp	r6, ip
 80098cc:	d30e      	bcc.n	80098ec <__mdiff+0xec>
 80098ce:	f10c 0203 	add.w	r2, ip, #3
 80098d2:	1b52      	subs	r2, r2, r5
 80098d4:	f022 0203 	bic.w	r2, r2, #3
 80098d8:	3d03      	subs	r5, #3
 80098da:	45ac      	cmp	ip, r5
 80098dc:	bf38      	it	cc
 80098de:	2200      	movcc	r2, #0
 80098e0:	441a      	add	r2, r3
 80098e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80098e6:	b17b      	cbz	r3, 8009908 <__mdiff+0x108>
 80098e8:	6107      	str	r7, [r0, #16]
 80098ea:	e7a3      	b.n	8009834 <__mdiff+0x34>
 80098ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80098f0:	fa11 f288 	uxtah	r2, r1, r8
 80098f4:	1414      	asrs	r4, r2, #16
 80098f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098fa:	b292      	uxth	r2, r2
 80098fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009900:	f84e 2b04 	str.w	r2, [lr], #4
 8009904:	1421      	asrs	r1, r4, #16
 8009906:	e7e0      	b.n	80098ca <__mdiff+0xca>
 8009908:	3f01      	subs	r7, #1
 800990a:	e7ea      	b.n	80098e2 <__mdiff+0xe2>
 800990c:	0800b5c8 	.word	0x0800b5c8
 8009910:	0800b654 	.word	0x0800b654

08009914 <__ulp>:
 8009914:	b082      	sub	sp, #8
 8009916:	ed8d 0b00 	vstr	d0, [sp]
 800991a:	9b01      	ldr	r3, [sp, #4]
 800991c:	4912      	ldr	r1, [pc, #72]	; (8009968 <__ulp+0x54>)
 800991e:	4019      	ands	r1, r3
 8009920:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009924:	2900      	cmp	r1, #0
 8009926:	dd05      	ble.n	8009934 <__ulp+0x20>
 8009928:	2200      	movs	r2, #0
 800992a:	460b      	mov	r3, r1
 800992c:	ec43 2b10 	vmov	d0, r2, r3
 8009930:	b002      	add	sp, #8
 8009932:	4770      	bx	lr
 8009934:	4249      	negs	r1, r1
 8009936:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800993a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	da04      	bge.n	8009952 <__ulp+0x3e>
 8009948:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800994c:	fa41 f300 	asr.w	r3, r1, r0
 8009950:	e7ec      	b.n	800992c <__ulp+0x18>
 8009952:	f1a0 0114 	sub.w	r1, r0, #20
 8009956:	291e      	cmp	r1, #30
 8009958:	bfda      	itte	le
 800995a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800995e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009962:	2101      	movgt	r1, #1
 8009964:	460a      	mov	r2, r1
 8009966:	e7e1      	b.n	800992c <__ulp+0x18>
 8009968:	7ff00000 	.word	0x7ff00000

0800996c <__b2d>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	6905      	ldr	r5, [r0, #16]
 8009970:	f100 0714 	add.w	r7, r0, #20
 8009974:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009978:	1f2e      	subs	r6, r5, #4
 800997a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800997e:	4620      	mov	r0, r4
 8009980:	f7ff fd48 	bl	8009414 <__hi0bits>
 8009984:	f1c0 0320 	rsb	r3, r0, #32
 8009988:	280a      	cmp	r0, #10
 800998a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a08 <__b2d+0x9c>
 800998e:	600b      	str	r3, [r1, #0]
 8009990:	dc14      	bgt.n	80099bc <__b2d+0x50>
 8009992:	f1c0 0e0b 	rsb	lr, r0, #11
 8009996:	fa24 f10e 	lsr.w	r1, r4, lr
 800999a:	42b7      	cmp	r7, r6
 800999c:	ea41 030c 	orr.w	r3, r1, ip
 80099a0:	bf34      	ite	cc
 80099a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099a6:	2100      	movcs	r1, #0
 80099a8:	3015      	adds	r0, #21
 80099aa:	fa04 f000 	lsl.w	r0, r4, r0
 80099ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80099b2:	ea40 0201 	orr.w	r2, r0, r1
 80099b6:	ec43 2b10 	vmov	d0, r2, r3
 80099ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099bc:	42b7      	cmp	r7, r6
 80099be:	bf3a      	itte	cc
 80099c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099c4:	f1a5 0608 	subcc.w	r6, r5, #8
 80099c8:	2100      	movcs	r1, #0
 80099ca:	380b      	subs	r0, #11
 80099cc:	d017      	beq.n	80099fe <__b2d+0x92>
 80099ce:	f1c0 0c20 	rsb	ip, r0, #32
 80099d2:	fa04 f500 	lsl.w	r5, r4, r0
 80099d6:	42be      	cmp	r6, r7
 80099d8:	fa21 f40c 	lsr.w	r4, r1, ip
 80099dc:	ea45 0504 	orr.w	r5, r5, r4
 80099e0:	bf8c      	ite	hi
 80099e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80099e6:	2400      	movls	r4, #0
 80099e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80099ec:	fa01 f000 	lsl.w	r0, r1, r0
 80099f0:	fa24 f40c 	lsr.w	r4, r4, ip
 80099f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099f8:	ea40 0204 	orr.w	r2, r0, r4
 80099fc:	e7db      	b.n	80099b6 <__b2d+0x4a>
 80099fe:	ea44 030c 	orr.w	r3, r4, ip
 8009a02:	460a      	mov	r2, r1
 8009a04:	e7d7      	b.n	80099b6 <__b2d+0x4a>
 8009a06:	bf00      	nop
 8009a08:	3ff00000 	.word	0x3ff00000

08009a0c <__d2b>:
 8009a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a10:	4689      	mov	r9, r1
 8009a12:	2101      	movs	r1, #1
 8009a14:	ec57 6b10 	vmov	r6, r7, d0
 8009a18:	4690      	mov	r8, r2
 8009a1a:	f7ff fc09 	bl	8009230 <_Balloc>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	b930      	cbnz	r0, 8009a30 <__d2b+0x24>
 8009a22:	4602      	mov	r2, r0
 8009a24:	4b25      	ldr	r3, [pc, #148]	; (8009abc <__d2b+0xb0>)
 8009a26:	4826      	ldr	r0, [pc, #152]	; (8009ac0 <__d2b+0xb4>)
 8009a28:	f240 310a 	movw	r1, #778	; 0x30a
 8009a2c:	f000 fb4e 	bl	800a0cc <__assert_func>
 8009a30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a38:	bb35      	cbnz	r5, 8009a88 <__d2b+0x7c>
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	d028      	beq.n	8009a92 <__d2b+0x86>
 8009a40:	4668      	mov	r0, sp
 8009a42:	9600      	str	r6, [sp, #0]
 8009a44:	f7ff fd06 	bl	8009454 <__lo0bits>
 8009a48:	9900      	ldr	r1, [sp, #0]
 8009a4a:	b300      	cbz	r0, 8009a8e <__d2b+0x82>
 8009a4c:	9a01      	ldr	r2, [sp, #4]
 8009a4e:	f1c0 0320 	rsb	r3, r0, #32
 8009a52:	fa02 f303 	lsl.w	r3, r2, r3
 8009a56:	430b      	orrs	r3, r1
 8009a58:	40c2      	lsrs	r2, r0
 8009a5a:	6163      	str	r3, [r4, #20]
 8009a5c:	9201      	str	r2, [sp, #4]
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	61a3      	str	r3, [r4, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bf14      	ite	ne
 8009a66:	2202      	movne	r2, #2
 8009a68:	2201      	moveq	r2, #1
 8009a6a:	6122      	str	r2, [r4, #16]
 8009a6c:	b1d5      	cbz	r5, 8009aa4 <__d2b+0x98>
 8009a6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a72:	4405      	add	r5, r0
 8009a74:	f8c9 5000 	str.w	r5, [r9]
 8009a78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a7c:	f8c8 0000 	str.w	r0, [r8]
 8009a80:	4620      	mov	r0, r4
 8009a82:	b003      	add	sp, #12
 8009a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a8c:	e7d5      	b.n	8009a3a <__d2b+0x2e>
 8009a8e:	6161      	str	r1, [r4, #20]
 8009a90:	e7e5      	b.n	8009a5e <__d2b+0x52>
 8009a92:	a801      	add	r0, sp, #4
 8009a94:	f7ff fcde 	bl	8009454 <__lo0bits>
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	6163      	str	r3, [r4, #20]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	6122      	str	r2, [r4, #16]
 8009aa0:	3020      	adds	r0, #32
 8009aa2:	e7e3      	b.n	8009a6c <__d2b+0x60>
 8009aa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009aa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009aac:	f8c9 0000 	str.w	r0, [r9]
 8009ab0:	6918      	ldr	r0, [r3, #16]
 8009ab2:	f7ff fcaf 	bl	8009414 <__hi0bits>
 8009ab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009aba:	e7df      	b.n	8009a7c <__d2b+0x70>
 8009abc:	0800b5c8 	.word	0x0800b5c8
 8009ac0:	0800b654 	.word	0x0800b654

08009ac4 <__ratio>:
 8009ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	4688      	mov	r8, r1
 8009aca:	4669      	mov	r1, sp
 8009acc:	4681      	mov	r9, r0
 8009ace:	f7ff ff4d 	bl	800996c <__b2d>
 8009ad2:	a901      	add	r1, sp, #4
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	ec55 4b10 	vmov	r4, r5, d0
 8009ada:	f7ff ff47 	bl	800996c <__b2d>
 8009ade:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ae2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ae6:	eba3 0c02 	sub.w	ip, r3, r2
 8009aea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009af4:	ec51 0b10 	vmov	r0, r1, d0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bfd6      	itet	le
 8009afc:	460a      	movle	r2, r1
 8009afe:	462a      	movgt	r2, r5
 8009b00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b04:	468b      	mov	fp, r1
 8009b06:	462f      	mov	r7, r5
 8009b08:	bfd4      	ite	le
 8009b0a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b12:	4620      	mov	r0, r4
 8009b14:	ee10 2a10 	vmov	r2, s0
 8009b18:	465b      	mov	r3, fp
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	f7f6 fe9e 	bl	800085c <__aeabi_ddiv>
 8009b20:	ec41 0b10 	vmov	d0, r0, r1
 8009b24:	b003      	add	sp, #12
 8009b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b2a <__copybits>:
 8009b2a:	3901      	subs	r1, #1
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	1149      	asrs	r1, r1, #5
 8009b30:	6914      	ldr	r4, [r2, #16]
 8009b32:	3101      	adds	r1, #1
 8009b34:	f102 0314 	add.w	r3, r2, #20
 8009b38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b40:	1f05      	subs	r5, r0, #4
 8009b42:	42a3      	cmp	r3, r4
 8009b44:	d30c      	bcc.n	8009b60 <__copybits+0x36>
 8009b46:	1aa3      	subs	r3, r4, r2
 8009b48:	3b11      	subs	r3, #17
 8009b4a:	f023 0303 	bic.w	r3, r3, #3
 8009b4e:	3211      	adds	r2, #17
 8009b50:	42a2      	cmp	r2, r4
 8009b52:	bf88      	it	hi
 8009b54:	2300      	movhi	r3, #0
 8009b56:	4418      	add	r0, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4288      	cmp	r0, r1
 8009b5c:	d305      	bcc.n	8009b6a <__copybits+0x40>
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b64:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b68:	e7eb      	b.n	8009b42 <__copybits+0x18>
 8009b6a:	f840 3b04 	str.w	r3, [r0], #4
 8009b6e:	e7f4      	b.n	8009b5a <__copybits+0x30>

08009b70 <__any_on>:
 8009b70:	f100 0214 	add.w	r2, r0, #20
 8009b74:	6900      	ldr	r0, [r0, #16]
 8009b76:	114b      	asrs	r3, r1, #5
 8009b78:	4298      	cmp	r0, r3
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	db11      	blt.n	8009ba2 <__any_on+0x32>
 8009b7e:	dd0a      	ble.n	8009b96 <__any_on+0x26>
 8009b80:	f011 011f 	ands.w	r1, r1, #31
 8009b84:	d007      	beq.n	8009b96 <__any_on+0x26>
 8009b86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b8a:	fa24 f001 	lsr.w	r0, r4, r1
 8009b8e:	fa00 f101 	lsl.w	r1, r0, r1
 8009b92:	428c      	cmp	r4, r1
 8009b94:	d10b      	bne.n	8009bae <__any_on+0x3e>
 8009b96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d803      	bhi.n	8009ba6 <__any_on+0x36>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	e7f7      	b.n	8009b96 <__any_on+0x26>
 8009ba6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009baa:	2900      	cmp	r1, #0
 8009bac:	d0f5      	beq.n	8009b9a <__any_on+0x2a>
 8009bae:	2001      	movs	r0, #1
 8009bb0:	e7f6      	b.n	8009ba0 <__any_on+0x30>

08009bb2 <_calloc_r>:
 8009bb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bb4:	fba1 2402 	umull	r2, r4, r1, r2
 8009bb8:	b94c      	cbnz	r4, 8009bce <_calloc_r+0x1c>
 8009bba:	4611      	mov	r1, r2
 8009bbc:	9201      	str	r2, [sp, #4]
 8009bbe:	f000 f87b 	bl	8009cb8 <_malloc_r>
 8009bc2:	9a01      	ldr	r2, [sp, #4]
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	b930      	cbnz	r0, 8009bd6 <_calloc_r+0x24>
 8009bc8:	4628      	mov	r0, r5
 8009bca:	b003      	add	sp, #12
 8009bcc:	bd30      	pop	{r4, r5, pc}
 8009bce:	220c      	movs	r2, #12
 8009bd0:	6002      	str	r2, [r0, #0]
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	e7f8      	b.n	8009bc8 <_calloc_r+0x16>
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	f7fc fdb4 	bl	8006744 <memset>
 8009bdc:	e7f4      	b.n	8009bc8 <_calloc_r+0x16>
	...

08009be0 <_free_r>:
 8009be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009be2:	2900      	cmp	r1, #0
 8009be4:	d044      	beq.n	8009c70 <_free_r+0x90>
 8009be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bea:	9001      	str	r0, [sp, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f1a1 0404 	sub.w	r4, r1, #4
 8009bf2:	bfb8      	it	lt
 8009bf4:	18e4      	addlt	r4, r4, r3
 8009bf6:	f000 fab3 	bl	800a160 <__malloc_lock>
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	; (8009c74 <_free_r+0x94>)
 8009bfc:	9801      	ldr	r0, [sp, #4]
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	b933      	cbnz	r3, 8009c10 <_free_r+0x30>
 8009c02:	6063      	str	r3, [r4, #4]
 8009c04:	6014      	str	r4, [r2, #0]
 8009c06:	b003      	add	sp, #12
 8009c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c0c:	f000 baae 	b.w	800a16c <__malloc_unlock>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d908      	bls.n	8009c26 <_free_r+0x46>
 8009c14:	6825      	ldr	r5, [r4, #0]
 8009c16:	1961      	adds	r1, r4, r5
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	bf01      	itttt	eq
 8009c1c:	6819      	ldreq	r1, [r3, #0]
 8009c1e:	685b      	ldreq	r3, [r3, #4]
 8009c20:	1949      	addeq	r1, r1, r5
 8009c22:	6021      	streq	r1, [r4, #0]
 8009c24:	e7ed      	b.n	8009c02 <_free_r+0x22>
 8009c26:	461a      	mov	r2, r3
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	b10b      	cbz	r3, 8009c30 <_free_r+0x50>
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	d9fa      	bls.n	8009c26 <_free_r+0x46>
 8009c30:	6811      	ldr	r1, [r2, #0]
 8009c32:	1855      	adds	r5, r2, r1
 8009c34:	42a5      	cmp	r5, r4
 8009c36:	d10b      	bne.n	8009c50 <_free_r+0x70>
 8009c38:	6824      	ldr	r4, [r4, #0]
 8009c3a:	4421      	add	r1, r4
 8009c3c:	1854      	adds	r4, r2, r1
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	6011      	str	r1, [r2, #0]
 8009c42:	d1e0      	bne.n	8009c06 <_free_r+0x26>
 8009c44:	681c      	ldr	r4, [r3, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	6053      	str	r3, [r2, #4]
 8009c4a:	4421      	add	r1, r4
 8009c4c:	6011      	str	r1, [r2, #0]
 8009c4e:	e7da      	b.n	8009c06 <_free_r+0x26>
 8009c50:	d902      	bls.n	8009c58 <_free_r+0x78>
 8009c52:	230c      	movs	r3, #12
 8009c54:	6003      	str	r3, [r0, #0]
 8009c56:	e7d6      	b.n	8009c06 <_free_r+0x26>
 8009c58:	6825      	ldr	r5, [r4, #0]
 8009c5a:	1961      	adds	r1, r4, r5
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf04      	itt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	bf04      	itt	eq
 8009c68:	1949      	addeq	r1, r1, r5
 8009c6a:	6021      	streq	r1, [r4, #0]
 8009c6c:	6054      	str	r4, [r2, #4]
 8009c6e:	e7ca      	b.n	8009c06 <_free_r+0x26>
 8009c70:	b003      	add	sp, #12
 8009c72:	bd30      	pop	{r4, r5, pc}
 8009c74:	20000da8 	.word	0x20000da8

08009c78 <sbrk_aligned>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4e0e      	ldr	r6, [pc, #56]	; (8009cb4 <sbrk_aligned+0x3c>)
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	6831      	ldr	r1, [r6, #0]
 8009c80:	4605      	mov	r5, r0
 8009c82:	b911      	cbnz	r1, 8009c8a <sbrk_aligned+0x12>
 8009c84:	f000 f9f0 	bl	800a068 <_sbrk_r>
 8009c88:	6030      	str	r0, [r6, #0]
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 f9eb 	bl	800a068 <_sbrk_r>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d00a      	beq.n	8009cac <sbrk_aligned+0x34>
 8009c96:	1cc4      	adds	r4, r0, #3
 8009c98:	f024 0403 	bic.w	r4, r4, #3
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d007      	beq.n	8009cb0 <sbrk_aligned+0x38>
 8009ca0:	1a21      	subs	r1, r4, r0
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 f9e0 	bl	800a068 <_sbrk_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d101      	bne.n	8009cb0 <sbrk_aligned+0x38>
 8009cac:	f04f 34ff 	mov.w	r4, #4294967295
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}
 8009cb4:	20000dac 	.word	0x20000dac

08009cb8 <_malloc_r>:
 8009cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbc:	1ccd      	adds	r5, r1, #3
 8009cbe:	f025 0503 	bic.w	r5, r5, #3
 8009cc2:	3508      	adds	r5, #8
 8009cc4:	2d0c      	cmp	r5, #12
 8009cc6:	bf38      	it	cc
 8009cc8:	250c      	movcc	r5, #12
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	4607      	mov	r7, r0
 8009cce:	db01      	blt.n	8009cd4 <_malloc_r+0x1c>
 8009cd0:	42a9      	cmp	r1, r5
 8009cd2:	d905      	bls.n	8009ce0 <_malloc_r+0x28>
 8009cd4:	230c      	movs	r3, #12
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	2600      	movs	r6, #0
 8009cda:	4630      	mov	r0, r6
 8009cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce0:	4e2e      	ldr	r6, [pc, #184]	; (8009d9c <_malloc_r+0xe4>)
 8009ce2:	f000 fa3d 	bl	800a160 <__malloc_lock>
 8009ce6:	6833      	ldr	r3, [r6, #0]
 8009ce8:	461c      	mov	r4, r3
 8009cea:	bb34      	cbnz	r4, 8009d3a <_malloc_r+0x82>
 8009cec:	4629      	mov	r1, r5
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f7ff ffc2 	bl	8009c78 <sbrk_aligned>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	d14d      	bne.n	8009d96 <_malloc_r+0xde>
 8009cfa:	6834      	ldr	r4, [r6, #0]
 8009cfc:	4626      	mov	r6, r4
 8009cfe:	2e00      	cmp	r6, #0
 8009d00:	d140      	bne.n	8009d84 <_malloc_r+0xcc>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	4631      	mov	r1, r6
 8009d06:	4638      	mov	r0, r7
 8009d08:	eb04 0803 	add.w	r8, r4, r3
 8009d0c:	f000 f9ac 	bl	800a068 <_sbrk_r>
 8009d10:	4580      	cmp	r8, r0
 8009d12:	d13a      	bne.n	8009d8a <_malloc_r+0xd2>
 8009d14:	6821      	ldr	r1, [r4, #0]
 8009d16:	3503      	adds	r5, #3
 8009d18:	1a6d      	subs	r5, r5, r1
 8009d1a:	f025 0503 	bic.w	r5, r5, #3
 8009d1e:	3508      	adds	r5, #8
 8009d20:	2d0c      	cmp	r5, #12
 8009d22:	bf38      	it	cc
 8009d24:	250c      	movcc	r5, #12
 8009d26:	4629      	mov	r1, r5
 8009d28:	4638      	mov	r0, r7
 8009d2a:	f7ff ffa5 	bl	8009c78 <sbrk_aligned>
 8009d2e:	3001      	adds	r0, #1
 8009d30:	d02b      	beq.n	8009d8a <_malloc_r+0xd2>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	442b      	add	r3, r5
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	e00e      	b.n	8009d58 <_malloc_r+0xa0>
 8009d3a:	6822      	ldr	r2, [r4, #0]
 8009d3c:	1b52      	subs	r2, r2, r5
 8009d3e:	d41e      	bmi.n	8009d7e <_malloc_r+0xc6>
 8009d40:	2a0b      	cmp	r2, #11
 8009d42:	d916      	bls.n	8009d72 <_malloc_r+0xba>
 8009d44:	1961      	adds	r1, r4, r5
 8009d46:	42a3      	cmp	r3, r4
 8009d48:	6025      	str	r5, [r4, #0]
 8009d4a:	bf18      	it	ne
 8009d4c:	6059      	strne	r1, [r3, #4]
 8009d4e:	6863      	ldr	r3, [r4, #4]
 8009d50:	bf08      	it	eq
 8009d52:	6031      	streq	r1, [r6, #0]
 8009d54:	5162      	str	r2, [r4, r5]
 8009d56:	604b      	str	r3, [r1, #4]
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f104 060b 	add.w	r6, r4, #11
 8009d5e:	f000 fa05 	bl	800a16c <__malloc_unlock>
 8009d62:	f026 0607 	bic.w	r6, r6, #7
 8009d66:	1d23      	adds	r3, r4, #4
 8009d68:	1af2      	subs	r2, r6, r3
 8009d6a:	d0b6      	beq.n	8009cda <_malloc_r+0x22>
 8009d6c:	1b9b      	subs	r3, r3, r6
 8009d6e:	50a3      	str	r3, [r4, r2]
 8009d70:	e7b3      	b.n	8009cda <_malloc_r+0x22>
 8009d72:	6862      	ldr	r2, [r4, #4]
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	bf0c      	ite	eq
 8009d78:	6032      	streq	r2, [r6, #0]
 8009d7a:	605a      	strne	r2, [r3, #4]
 8009d7c:	e7ec      	b.n	8009d58 <_malloc_r+0xa0>
 8009d7e:	4623      	mov	r3, r4
 8009d80:	6864      	ldr	r4, [r4, #4]
 8009d82:	e7b2      	b.n	8009cea <_malloc_r+0x32>
 8009d84:	4634      	mov	r4, r6
 8009d86:	6876      	ldr	r6, [r6, #4]
 8009d88:	e7b9      	b.n	8009cfe <_malloc_r+0x46>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	603b      	str	r3, [r7, #0]
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f000 f9ec 	bl	800a16c <__malloc_unlock>
 8009d94:	e7a1      	b.n	8009cda <_malloc_r+0x22>
 8009d96:	6025      	str	r5, [r4, #0]
 8009d98:	e7de      	b.n	8009d58 <_malloc_r+0xa0>
 8009d9a:	bf00      	nop
 8009d9c:	20000da8 	.word	0x20000da8

08009da0 <__ssputs_r>:
 8009da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da4:	688e      	ldr	r6, [r1, #8]
 8009da6:	429e      	cmp	r6, r3
 8009da8:	4682      	mov	sl, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	4690      	mov	r8, r2
 8009dae:	461f      	mov	r7, r3
 8009db0:	d838      	bhi.n	8009e24 <__ssputs_r+0x84>
 8009db2:	898a      	ldrh	r2, [r1, #12]
 8009db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009db8:	d032      	beq.n	8009e20 <__ssputs_r+0x80>
 8009dba:	6825      	ldr	r5, [r4, #0]
 8009dbc:	6909      	ldr	r1, [r1, #16]
 8009dbe:	eba5 0901 	sub.w	r9, r5, r1
 8009dc2:	6965      	ldr	r5, [r4, #20]
 8009dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dcc:	3301      	adds	r3, #1
 8009dce:	444b      	add	r3, r9
 8009dd0:	106d      	asrs	r5, r5, #1
 8009dd2:	429d      	cmp	r5, r3
 8009dd4:	bf38      	it	cc
 8009dd6:	461d      	movcc	r5, r3
 8009dd8:	0553      	lsls	r3, r2, #21
 8009dda:	d531      	bpl.n	8009e40 <__ssputs_r+0xa0>
 8009ddc:	4629      	mov	r1, r5
 8009dde:	f7ff ff6b 	bl	8009cb8 <_malloc_r>
 8009de2:	4606      	mov	r6, r0
 8009de4:	b950      	cbnz	r0, 8009dfc <__ssputs_r+0x5c>
 8009de6:	230c      	movs	r3, #12
 8009de8:	f8ca 3000 	str.w	r3, [sl]
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df2:	81a3      	strh	r3, [r4, #12]
 8009df4:	f04f 30ff 	mov.w	r0, #4294967295
 8009df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dfc:	6921      	ldr	r1, [r4, #16]
 8009dfe:	464a      	mov	r2, r9
 8009e00:	f7fc fc92 	bl	8006728 <memcpy>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0e:	81a3      	strh	r3, [r4, #12]
 8009e10:	6126      	str	r6, [r4, #16]
 8009e12:	6165      	str	r5, [r4, #20]
 8009e14:	444e      	add	r6, r9
 8009e16:	eba5 0509 	sub.w	r5, r5, r9
 8009e1a:	6026      	str	r6, [r4, #0]
 8009e1c:	60a5      	str	r5, [r4, #8]
 8009e1e:	463e      	mov	r6, r7
 8009e20:	42be      	cmp	r6, r7
 8009e22:	d900      	bls.n	8009e26 <__ssputs_r+0x86>
 8009e24:	463e      	mov	r6, r7
 8009e26:	6820      	ldr	r0, [r4, #0]
 8009e28:	4632      	mov	r2, r6
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	f000 f97e 	bl	800a12c <memmove>
 8009e30:	68a3      	ldr	r3, [r4, #8]
 8009e32:	1b9b      	subs	r3, r3, r6
 8009e34:	60a3      	str	r3, [r4, #8]
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	4433      	add	r3, r6
 8009e3a:	6023      	str	r3, [r4, #0]
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e7db      	b.n	8009df8 <__ssputs_r+0x58>
 8009e40:	462a      	mov	r2, r5
 8009e42:	f000 f999 	bl	800a178 <_realloc_r>
 8009e46:	4606      	mov	r6, r0
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d1e1      	bne.n	8009e10 <__ssputs_r+0x70>
 8009e4c:	6921      	ldr	r1, [r4, #16]
 8009e4e:	4650      	mov	r0, sl
 8009e50:	f7ff fec6 	bl	8009be0 <_free_r>
 8009e54:	e7c7      	b.n	8009de6 <__ssputs_r+0x46>
	...

08009e58 <_svfiprintf_r>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	4698      	mov	r8, r3
 8009e5e:	898b      	ldrh	r3, [r1, #12]
 8009e60:	061b      	lsls	r3, r3, #24
 8009e62:	b09d      	sub	sp, #116	; 0x74
 8009e64:	4607      	mov	r7, r0
 8009e66:	460d      	mov	r5, r1
 8009e68:	4614      	mov	r4, r2
 8009e6a:	d50e      	bpl.n	8009e8a <_svfiprintf_r+0x32>
 8009e6c:	690b      	ldr	r3, [r1, #16]
 8009e6e:	b963      	cbnz	r3, 8009e8a <_svfiprintf_r+0x32>
 8009e70:	2140      	movs	r1, #64	; 0x40
 8009e72:	f7ff ff21 	bl	8009cb8 <_malloc_r>
 8009e76:	6028      	str	r0, [r5, #0]
 8009e78:	6128      	str	r0, [r5, #16]
 8009e7a:	b920      	cbnz	r0, 8009e86 <_svfiprintf_r+0x2e>
 8009e7c:	230c      	movs	r3, #12
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295
 8009e84:	e0d1      	b.n	800a02a <_svfiprintf_r+0x1d2>
 8009e86:	2340      	movs	r3, #64	; 0x40
 8009e88:	616b      	str	r3, [r5, #20]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8e:	2320      	movs	r3, #32
 8009e90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e98:	2330      	movs	r3, #48	; 0x30
 8009e9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a044 <_svfiprintf_r+0x1ec>
 8009e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ea2:	f04f 0901 	mov.w	r9, #1
 8009ea6:	4623      	mov	r3, r4
 8009ea8:	469a      	mov	sl, r3
 8009eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eae:	b10a      	cbz	r2, 8009eb4 <_svfiprintf_r+0x5c>
 8009eb0:	2a25      	cmp	r2, #37	; 0x25
 8009eb2:	d1f9      	bne.n	8009ea8 <_svfiprintf_r+0x50>
 8009eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8009eb8:	d00b      	beq.n	8009ed2 <_svfiprintf_r+0x7a>
 8009eba:	465b      	mov	r3, fp
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f7ff ff6d 	bl	8009da0 <__ssputs_r>
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	f000 80aa 	beq.w	800a020 <_svfiprintf_r+0x1c8>
 8009ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ece:	445a      	add	r2, fp
 8009ed0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 80a2 	beq.w	800a020 <_svfiprintf_r+0x1c8>
 8009edc:	2300      	movs	r3, #0
 8009ede:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee6:	f10a 0a01 	add.w	sl, sl, #1
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	9307      	str	r3, [sp, #28]
 8009eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ef4:	4654      	mov	r4, sl
 8009ef6:	2205      	movs	r2, #5
 8009ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009efc:	4851      	ldr	r0, [pc, #324]	; (800a044 <_svfiprintf_r+0x1ec>)
 8009efe:	f7f6 f977 	bl	80001f0 <memchr>
 8009f02:	9a04      	ldr	r2, [sp, #16]
 8009f04:	b9d8      	cbnz	r0, 8009f3e <_svfiprintf_r+0xe6>
 8009f06:	06d0      	lsls	r0, r2, #27
 8009f08:	bf44      	itt	mi
 8009f0a:	2320      	movmi	r3, #32
 8009f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f10:	0711      	lsls	r1, r2, #28
 8009f12:	bf44      	itt	mi
 8009f14:	232b      	movmi	r3, #43	; 0x2b
 8009f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f20:	d015      	beq.n	8009f4e <_svfiprintf_r+0xf6>
 8009f22:	9a07      	ldr	r2, [sp, #28]
 8009f24:	4654      	mov	r4, sl
 8009f26:	2000      	movs	r0, #0
 8009f28:	f04f 0c0a 	mov.w	ip, #10
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f32:	3b30      	subs	r3, #48	; 0x30
 8009f34:	2b09      	cmp	r3, #9
 8009f36:	d94e      	bls.n	8009fd6 <_svfiprintf_r+0x17e>
 8009f38:	b1b0      	cbz	r0, 8009f68 <_svfiprintf_r+0x110>
 8009f3a:	9207      	str	r2, [sp, #28]
 8009f3c:	e014      	b.n	8009f68 <_svfiprintf_r+0x110>
 8009f3e:	eba0 0308 	sub.w	r3, r0, r8
 8009f42:	fa09 f303 	lsl.w	r3, r9, r3
 8009f46:	4313      	orrs	r3, r2
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	46a2      	mov	sl, r4
 8009f4c:	e7d2      	b.n	8009ef4 <_svfiprintf_r+0x9c>
 8009f4e:	9b03      	ldr	r3, [sp, #12]
 8009f50:	1d19      	adds	r1, r3, #4
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	9103      	str	r1, [sp, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	bfbb      	ittet	lt
 8009f5a:	425b      	neglt	r3, r3
 8009f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f60:	9307      	strge	r3, [sp, #28]
 8009f62:	9307      	strlt	r3, [sp, #28]
 8009f64:	bfb8      	it	lt
 8009f66:	9204      	strlt	r2, [sp, #16]
 8009f68:	7823      	ldrb	r3, [r4, #0]
 8009f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f6c:	d10c      	bne.n	8009f88 <_svfiprintf_r+0x130>
 8009f6e:	7863      	ldrb	r3, [r4, #1]
 8009f70:	2b2a      	cmp	r3, #42	; 0x2a
 8009f72:	d135      	bne.n	8009fe0 <_svfiprintf_r+0x188>
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	1d1a      	adds	r2, r3, #4
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	9203      	str	r2, [sp, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfb8      	it	lt
 8009f80:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f84:	3402      	adds	r4, #2
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a054 <_svfiprintf_r+0x1fc>
 8009f8c:	7821      	ldrb	r1, [r4, #0]
 8009f8e:	2203      	movs	r2, #3
 8009f90:	4650      	mov	r0, sl
 8009f92:	f7f6 f92d 	bl	80001f0 <memchr>
 8009f96:	b140      	cbz	r0, 8009faa <_svfiprintf_r+0x152>
 8009f98:	2340      	movs	r3, #64	; 0x40
 8009f9a:	eba0 000a 	sub.w	r0, r0, sl
 8009f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8009fa2:	9b04      	ldr	r3, [sp, #16]
 8009fa4:	4303      	orrs	r3, r0
 8009fa6:	3401      	adds	r4, #1
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fae:	4826      	ldr	r0, [pc, #152]	; (800a048 <_svfiprintf_r+0x1f0>)
 8009fb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fb4:	2206      	movs	r2, #6
 8009fb6:	f7f6 f91b 	bl	80001f0 <memchr>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d038      	beq.n	800a030 <_svfiprintf_r+0x1d8>
 8009fbe:	4b23      	ldr	r3, [pc, #140]	; (800a04c <_svfiprintf_r+0x1f4>)
 8009fc0:	bb1b      	cbnz	r3, 800a00a <_svfiprintf_r+0x1b2>
 8009fc2:	9b03      	ldr	r3, [sp, #12]
 8009fc4:	3307      	adds	r3, #7
 8009fc6:	f023 0307 	bic.w	r3, r3, #7
 8009fca:	3308      	adds	r3, #8
 8009fcc:	9303      	str	r3, [sp, #12]
 8009fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd0:	4433      	add	r3, r6
 8009fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd4:	e767      	b.n	8009ea6 <_svfiprintf_r+0x4e>
 8009fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fda:	460c      	mov	r4, r1
 8009fdc:	2001      	movs	r0, #1
 8009fde:	e7a5      	b.n	8009f2c <_svfiprintf_r+0xd4>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	3401      	adds	r4, #1
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	f04f 0c0a 	mov.w	ip, #10
 8009fec:	4620      	mov	r0, r4
 8009fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ff2:	3a30      	subs	r2, #48	; 0x30
 8009ff4:	2a09      	cmp	r2, #9
 8009ff6:	d903      	bls.n	800a000 <_svfiprintf_r+0x1a8>
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0c5      	beq.n	8009f88 <_svfiprintf_r+0x130>
 8009ffc:	9105      	str	r1, [sp, #20]
 8009ffe:	e7c3      	b.n	8009f88 <_svfiprintf_r+0x130>
 800a000:	fb0c 2101 	mla	r1, ip, r1, r2
 800a004:	4604      	mov	r4, r0
 800a006:	2301      	movs	r3, #1
 800a008:	e7f0      	b.n	8009fec <_svfiprintf_r+0x194>
 800a00a:	ab03      	add	r3, sp, #12
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	462a      	mov	r2, r5
 800a010:	4b0f      	ldr	r3, [pc, #60]	; (800a050 <_svfiprintf_r+0x1f8>)
 800a012:	a904      	add	r1, sp, #16
 800a014:	4638      	mov	r0, r7
 800a016:	f7fc fc3d 	bl	8006894 <_printf_float>
 800a01a:	1c42      	adds	r2, r0, #1
 800a01c:	4606      	mov	r6, r0
 800a01e:	d1d6      	bne.n	8009fce <_svfiprintf_r+0x176>
 800a020:	89ab      	ldrh	r3, [r5, #12]
 800a022:	065b      	lsls	r3, r3, #25
 800a024:	f53f af2c 	bmi.w	8009e80 <_svfiprintf_r+0x28>
 800a028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a02a:	b01d      	add	sp, #116	; 0x74
 800a02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a030:	ab03      	add	r3, sp, #12
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	462a      	mov	r2, r5
 800a036:	4b06      	ldr	r3, [pc, #24]	; (800a050 <_svfiprintf_r+0x1f8>)
 800a038:	a904      	add	r1, sp, #16
 800a03a:	4638      	mov	r0, r7
 800a03c:	f7fc fece 	bl	8006ddc <_printf_i>
 800a040:	e7eb      	b.n	800a01a <_svfiprintf_r+0x1c2>
 800a042:	bf00      	nop
 800a044:	0800b7ac 	.word	0x0800b7ac
 800a048:	0800b7b6 	.word	0x0800b7b6
 800a04c:	08006895 	.word	0x08006895
 800a050:	08009da1 	.word	0x08009da1
 800a054:	0800b7b2 	.word	0x0800b7b2

0800a058 <nan>:
 800a058:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a060 <nan+0x8>
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	00000000 	.word	0x00000000
 800a064:	7ff80000 	.word	0x7ff80000

0800a068 <_sbrk_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d06      	ldr	r5, [pc, #24]	; (800a084 <_sbrk_r+0x1c>)
 800a06c:	2300      	movs	r3, #0
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	f7f9 f866 	bl	8003144 <_sbrk>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d102      	bne.n	800a082 <_sbrk_r+0x1a>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	b103      	cbz	r3, 800a082 <_sbrk_r+0x1a>
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	20000db0 	.word	0x20000db0

0800a088 <strncmp>:
 800a088:	b510      	push	{r4, lr}
 800a08a:	b17a      	cbz	r2, 800a0ac <strncmp+0x24>
 800a08c:	4603      	mov	r3, r0
 800a08e:	3901      	subs	r1, #1
 800a090:	1884      	adds	r4, r0, r2
 800a092:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a096:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a09a:	4290      	cmp	r0, r2
 800a09c:	d101      	bne.n	800a0a2 <strncmp+0x1a>
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	d101      	bne.n	800a0a6 <strncmp+0x1e>
 800a0a2:	1a80      	subs	r0, r0, r2
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d1f3      	bne.n	800a092 <strncmp+0xa>
 800a0aa:	e7fa      	b.n	800a0a2 <strncmp+0x1a>
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	e7f9      	b.n	800a0a4 <strncmp+0x1c>

0800a0b0 <__ascii_wctomb>:
 800a0b0:	b149      	cbz	r1, 800a0c6 <__ascii_wctomb+0x16>
 800a0b2:	2aff      	cmp	r2, #255	; 0xff
 800a0b4:	bf85      	ittet	hi
 800a0b6:	238a      	movhi	r3, #138	; 0x8a
 800a0b8:	6003      	strhi	r3, [r0, #0]
 800a0ba:	700a      	strbls	r2, [r1, #0]
 800a0bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0c0:	bf98      	it	ls
 800a0c2:	2001      	movls	r0, #1
 800a0c4:	4770      	bx	lr
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4770      	bx	lr
	...

0800a0cc <__assert_func>:
 800a0cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ce:	4614      	mov	r4, r2
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <__assert_func+0x2c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	68d8      	ldr	r0, [r3, #12]
 800a0da:	b14c      	cbz	r4, 800a0f0 <__assert_func+0x24>
 800a0dc:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <__assert_func+0x30>)
 800a0de:	9100      	str	r1, [sp, #0]
 800a0e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0e4:	4906      	ldr	r1, [pc, #24]	; (800a100 <__assert_func+0x34>)
 800a0e6:	462b      	mov	r3, r5
 800a0e8:	f000 f80e 	bl	800a108 <fiprintf>
 800a0ec:	f000 fa8c 	bl	800a608 <abort>
 800a0f0:	4b04      	ldr	r3, [pc, #16]	; (800a104 <__assert_func+0x38>)
 800a0f2:	461c      	mov	r4, r3
 800a0f4:	e7f3      	b.n	800a0de <__assert_func+0x12>
 800a0f6:	bf00      	nop
 800a0f8:	2000000c 	.word	0x2000000c
 800a0fc:	0800b7bd 	.word	0x0800b7bd
 800a100:	0800b7ca 	.word	0x0800b7ca
 800a104:	0800b7f8 	.word	0x0800b7f8

0800a108 <fiprintf>:
 800a108:	b40e      	push	{r1, r2, r3}
 800a10a:	b503      	push	{r0, r1, lr}
 800a10c:	4601      	mov	r1, r0
 800a10e:	ab03      	add	r3, sp, #12
 800a110:	4805      	ldr	r0, [pc, #20]	; (800a128 <fiprintf+0x20>)
 800a112:	f853 2b04 	ldr.w	r2, [r3], #4
 800a116:	6800      	ldr	r0, [r0, #0]
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	f000 f885 	bl	800a228 <_vfiprintf_r>
 800a11e:	b002      	add	sp, #8
 800a120:	f85d eb04 	ldr.w	lr, [sp], #4
 800a124:	b003      	add	sp, #12
 800a126:	4770      	bx	lr
 800a128:	2000000c 	.word	0x2000000c

0800a12c <memmove>:
 800a12c:	4288      	cmp	r0, r1
 800a12e:	b510      	push	{r4, lr}
 800a130:	eb01 0402 	add.w	r4, r1, r2
 800a134:	d902      	bls.n	800a13c <memmove+0x10>
 800a136:	4284      	cmp	r4, r0
 800a138:	4623      	mov	r3, r4
 800a13a:	d807      	bhi.n	800a14c <memmove+0x20>
 800a13c:	1e43      	subs	r3, r0, #1
 800a13e:	42a1      	cmp	r1, r4
 800a140:	d008      	beq.n	800a154 <memmove+0x28>
 800a142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a14a:	e7f8      	b.n	800a13e <memmove+0x12>
 800a14c:	4402      	add	r2, r0
 800a14e:	4601      	mov	r1, r0
 800a150:	428a      	cmp	r2, r1
 800a152:	d100      	bne.n	800a156 <memmove+0x2a>
 800a154:	bd10      	pop	{r4, pc}
 800a156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a15a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a15e:	e7f7      	b.n	800a150 <memmove+0x24>

0800a160 <__malloc_lock>:
 800a160:	4801      	ldr	r0, [pc, #4]	; (800a168 <__malloc_lock+0x8>)
 800a162:	f000 bc11 	b.w	800a988 <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20000db4 	.word	0x20000db4

0800a16c <__malloc_unlock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__malloc_unlock+0x8>)
 800a16e:	f000 bc0c 	b.w	800a98a <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20000db4 	.word	0x20000db4

0800a178 <_realloc_r>:
 800a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	4680      	mov	r8, r0
 800a17e:	4614      	mov	r4, r2
 800a180:	460e      	mov	r6, r1
 800a182:	b921      	cbnz	r1, 800a18e <_realloc_r+0x16>
 800a184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a188:	4611      	mov	r1, r2
 800a18a:	f7ff bd95 	b.w	8009cb8 <_malloc_r>
 800a18e:	b92a      	cbnz	r2, 800a19c <_realloc_r+0x24>
 800a190:	f7ff fd26 	bl	8009be0 <_free_r>
 800a194:	4625      	mov	r5, r4
 800a196:	4628      	mov	r0, r5
 800a198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a19c:	f000 fc5c 	bl	800aa58 <_malloc_usable_size_r>
 800a1a0:	4284      	cmp	r4, r0
 800a1a2:	4607      	mov	r7, r0
 800a1a4:	d802      	bhi.n	800a1ac <_realloc_r+0x34>
 800a1a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1aa:	d812      	bhi.n	800a1d2 <_realloc_r+0x5a>
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	f7ff fd82 	bl	8009cb8 <_malloc_r>
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d0ed      	beq.n	800a196 <_realloc_r+0x1e>
 800a1ba:	42bc      	cmp	r4, r7
 800a1bc:	4622      	mov	r2, r4
 800a1be:	4631      	mov	r1, r6
 800a1c0:	bf28      	it	cs
 800a1c2:	463a      	movcs	r2, r7
 800a1c4:	f7fc fab0 	bl	8006728 <memcpy>
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	f7ff fd08 	bl	8009be0 <_free_r>
 800a1d0:	e7e1      	b.n	800a196 <_realloc_r+0x1e>
 800a1d2:	4635      	mov	r5, r6
 800a1d4:	e7df      	b.n	800a196 <_realloc_r+0x1e>

0800a1d6 <__sfputc_r>:
 800a1d6:	6893      	ldr	r3, [r2, #8]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	b410      	push	{r4}
 800a1de:	6093      	str	r3, [r2, #8]
 800a1e0:	da08      	bge.n	800a1f4 <__sfputc_r+0x1e>
 800a1e2:	6994      	ldr	r4, [r2, #24]
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	db01      	blt.n	800a1ec <__sfputc_r+0x16>
 800a1e8:	290a      	cmp	r1, #10
 800a1ea:	d103      	bne.n	800a1f4 <__sfputc_r+0x1e>
 800a1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1f0:	f000 b94a 	b.w	800a488 <__swbuf_r>
 800a1f4:	6813      	ldr	r3, [r2, #0]
 800a1f6:	1c58      	adds	r0, r3, #1
 800a1f8:	6010      	str	r0, [r2, #0]
 800a1fa:	7019      	strb	r1, [r3, #0]
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <__sfputs_r>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	4606      	mov	r6, r0
 800a208:	460f      	mov	r7, r1
 800a20a:	4614      	mov	r4, r2
 800a20c:	18d5      	adds	r5, r2, r3
 800a20e:	42ac      	cmp	r4, r5
 800a210:	d101      	bne.n	800a216 <__sfputs_r+0x12>
 800a212:	2000      	movs	r0, #0
 800a214:	e007      	b.n	800a226 <__sfputs_r+0x22>
 800a216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21a:	463a      	mov	r2, r7
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7ff ffda 	bl	800a1d6 <__sfputc_r>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	d1f3      	bne.n	800a20e <__sfputs_r+0xa>
 800a226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a228 <_vfiprintf_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	460d      	mov	r5, r1
 800a22e:	b09d      	sub	sp, #116	; 0x74
 800a230:	4614      	mov	r4, r2
 800a232:	4698      	mov	r8, r3
 800a234:	4606      	mov	r6, r0
 800a236:	b118      	cbz	r0, 800a240 <_vfiprintf_r+0x18>
 800a238:	6983      	ldr	r3, [r0, #24]
 800a23a:	b90b      	cbnz	r3, 800a240 <_vfiprintf_r+0x18>
 800a23c:	f000 fb06 	bl	800a84c <__sinit>
 800a240:	4b89      	ldr	r3, [pc, #548]	; (800a468 <_vfiprintf_r+0x240>)
 800a242:	429d      	cmp	r5, r3
 800a244:	d11b      	bne.n	800a27e <_vfiprintf_r+0x56>
 800a246:	6875      	ldr	r5, [r6, #4]
 800a248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24a:	07d9      	lsls	r1, r3, #31
 800a24c:	d405      	bmi.n	800a25a <_vfiprintf_r+0x32>
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	059a      	lsls	r2, r3, #22
 800a252:	d402      	bmi.n	800a25a <_vfiprintf_r+0x32>
 800a254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a256:	f000 fb97 	bl	800a988 <__retarget_lock_acquire_recursive>
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	071b      	lsls	r3, r3, #28
 800a25e:	d501      	bpl.n	800a264 <_vfiprintf_r+0x3c>
 800a260:	692b      	ldr	r3, [r5, #16]
 800a262:	b9eb      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x78>
 800a264:	4629      	mov	r1, r5
 800a266:	4630      	mov	r0, r6
 800a268:	f000 f960 	bl	800a52c <__swsetup_r>
 800a26c:	b1c0      	cbz	r0, 800a2a0 <_vfiprintf_r+0x78>
 800a26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a270:	07dc      	lsls	r4, r3, #31
 800a272:	d50e      	bpl.n	800a292 <_vfiprintf_r+0x6a>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	b01d      	add	sp, #116	; 0x74
 800a27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27e:	4b7b      	ldr	r3, [pc, #492]	; (800a46c <_vfiprintf_r+0x244>)
 800a280:	429d      	cmp	r5, r3
 800a282:	d101      	bne.n	800a288 <_vfiprintf_r+0x60>
 800a284:	68b5      	ldr	r5, [r6, #8]
 800a286:	e7df      	b.n	800a248 <_vfiprintf_r+0x20>
 800a288:	4b79      	ldr	r3, [pc, #484]	; (800a470 <_vfiprintf_r+0x248>)
 800a28a:	429d      	cmp	r5, r3
 800a28c:	bf08      	it	eq
 800a28e:	68f5      	ldreq	r5, [r6, #12]
 800a290:	e7da      	b.n	800a248 <_vfiprintf_r+0x20>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	0598      	lsls	r0, r3, #22
 800a296:	d4ed      	bmi.n	800a274 <_vfiprintf_r+0x4c>
 800a298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29a:	f000 fb76 	bl	800a98a <__retarget_lock_release_recursive>
 800a29e:	e7e9      	b.n	800a274 <_vfiprintf_r+0x4c>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ae:	2330      	movs	r3, #48	; 0x30
 800a2b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a474 <_vfiprintf_r+0x24c>
 800a2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2b8:	f04f 0901 	mov.w	r9, #1
 800a2bc:	4623      	mov	r3, r4
 800a2be:	469a      	mov	sl, r3
 800a2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c4:	b10a      	cbz	r2, 800a2ca <_vfiprintf_r+0xa2>
 800a2c6:	2a25      	cmp	r2, #37	; 0x25
 800a2c8:	d1f9      	bne.n	800a2be <_vfiprintf_r+0x96>
 800a2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ce:	d00b      	beq.n	800a2e8 <_vfiprintf_r+0xc0>
 800a2d0:	465b      	mov	r3, fp
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ff94 	bl	800a204 <__sfputs_r>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f000 80aa 	beq.w	800a436 <_vfiprintf_r+0x20e>
 800a2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e4:	445a      	add	r2, fp
 800a2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80a2 	beq.w	800a436 <_vfiprintf_r+0x20e>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fc:	f10a 0a01 	add.w	sl, sl, #1
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a308:	931a      	str	r3, [sp, #104]	; 0x68
 800a30a:	4654      	mov	r4, sl
 800a30c:	2205      	movs	r2, #5
 800a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a312:	4858      	ldr	r0, [pc, #352]	; (800a474 <_vfiprintf_r+0x24c>)
 800a314:	f7f5 ff6c 	bl	80001f0 <memchr>
 800a318:	9a04      	ldr	r2, [sp, #16]
 800a31a:	b9d8      	cbnz	r0, 800a354 <_vfiprintf_r+0x12c>
 800a31c:	06d1      	lsls	r1, r2, #27
 800a31e:	bf44      	itt	mi
 800a320:	2320      	movmi	r3, #32
 800a322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a326:	0713      	lsls	r3, r2, #28
 800a328:	bf44      	itt	mi
 800a32a:	232b      	movmi	r3, #43	; 0x2b
 800a32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a330:	f89a 3000 	ldrb.w	r3, [sl]
 800a334:	2b2a      	cmp	r3, #42	; 0x2a
 800a336:	d015      	beq.n	800a364 <_vfiprintf_r+0x13c>
 800a338:	9a07      	ldr	r2, [sp, #28]
 800a33a:	4654      	mov	r4, sl
 800a33c:	2000      	movs	r0, #0
 800a33e:	f04f 0c0a 	mov.w	ip, #10
 800a342:	4621      	mov	r1, r4
 800a344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a348:	3b30      	subs	r3, #48	; 0x30
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d94e      	bls.n	800a3ec <_vfiprintf_r+0x1c4>
 800a34e:	b1b0      	cbz	r0, 800a37e <_vfiprintf_r+0x156>
 800a350:	9207      	str	r2, [sp, #28]
 800a352:	e014      	b.n	800a37e <_vfiprintf_r+0x156>
 800a354:	eba0 0308 	sub.w	r3, r0, r8
 800a358:	fa09 f303 	lsl.w	r3, r9, r3
 800a35c:	4313      	orrs	r3, r2
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	46a2      	mov	sl, r4
 800a362:	e7d2      	b.n	800a30a <_vfiprintf_r+0xe2>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	1d19      	adds	r1, r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	9103      	str	r1, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfbb      	ittet	lt
 800a370:	425b      	neglt	r3, r3
 800a372:	f042 0202 	orrlt.w	r2, r2, #2
 800a376:	9307      	strge	r3, [sp, #28]
 800a378:	9307      	strlt	r3, [sp, #28]
 800a37a:	bfb8      	it	lt
 800a37c:	9204      	strlt	r2, [sp, #16]
 800a37e:	7823      	ldrb	r3, [r4, #0]
 800a380:	2b2e      	cmp	r3, #46	; 0x2e
 800a382:	d10c      	bne.n	800a39e <_vfiprintf_r+0x176>
 800a384:	7863      	ldrb	r3, [r4, #1]
 800a386:	2b2a      	cmp	r3, #42	; 0x2a
 800a388:	d135      	bne.n	800a3f6 <_vfiprintf_r+0x1ce>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	1d1a      	adds	r2, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9203      	str	r2, [sp, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfb8      	it	lt
 800a396:	f04f 33ff 	movlt.w	r3, #4294967295
 800a39a:	3402      	adds	r4, #2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a484 <_vfiprintf_r+0x25c>
 800a3a2:	7821      	ldrb	r1, [r4, #0]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f7f5 ff22 	bl	80001f0 <memchr>
 800a3ac:	b140      	cbz	r0, 800a3c0 <_vfiprintf_r+0x198>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	eba0 000a 	sub.w	r0, r0, sl
 800a3b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a3b8:	9b04      	ldr	r3, [sp, #16]
 800a3ba:	4303      	orrs	r3, r0
 800a3bc:	3401      	adds	r4, #1
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c4:	482c      	ldr	r0, [pc, #176]	; (800a478 <_vfiprintf_r+0x250>)
 800a3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	f7f5 ff10 	bl	80001f0 <memchr>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d03f      	beq.n	800a454 <_vfiprintf_r+0x22c>
 800a3d4:	4b29      	ldr	r3, [pc, #164]	; (800a47c <_vfiprintf_r+0x254>)
 800a3d6:	bb1b      	cbnz	r3, 800a420 <_vfiprintf_r+0x1f8>
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	3307      	adds	r3, #7
 800a3dc:	f023 0307 	bic.w	r3, r3, #7
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	9303      	str	r3, [sp, #12]
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	443b      	add	r3, r7
 800a3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ea:	e767      	b.n	800a2bc <_vfiprintf_r+0x94>
 800a3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	e7a5      	b.n	800a342 <_vfiprintf_r+0x11a>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	3401      	adds	r4, #1
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f04f 0c0a 	mov.w	ip, #10
 800a402:	4620      	mov	r0, r4
 800a404:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a408:	3a30      	subs	r2, #48	; 0x30
 800a40a:	2a09      	cmp	r2, #9
 800a40c:	d903      	bls.n	800a416 <_vfiprintf_r+0x1ee>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0c5      	beq.n	800a39e <_vfiprintf_r+0x176>
 800a412:	9105      	str	r1, [sp, #20]
 800a414:	e7c3      	b.n	800a39e <_vfiprintf_r+0x176>
 800a416:	fb0c 2101 	mla	r1, ip, r1, r2
 800a41a:	4604      	mov	r4, r0
 800a41c:	2301      	movs	r3, #1
 800a41e:	e7f0      	b.n	800a402 <_vfiprintf_r+0x1da>
 800a420:	ab03      	add	r3, sp, #12
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	462a      	mov	r2, r5
 800a426:	4b16      	ldr	r3, [pc, #88]	; (800a480 <_vfiprintf_r+0x258>)
 800a428:	a904      	add	r1, sp, #16
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7fc fa32 	bl	8006894 <_printf_float>
 800a430:	4607      	mov	r7, r0
 800a432:	1c78      	adds	r0, r7, #1
 800a434:	d1d6      	bne.n	800a3e4 <_vfiprintf_r+0x1bc>
 800a436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a438:	07d9      	lsls	r1, r3, #31
 800a43a:	d405      	bmi.n	800a448 <_vfiprintf_r+0x220>
 800a43c:	89ab      	ldrh	r3, [r5, #12]
 800a43e:	059a      	lsls	r2, r3, #22
 800a440:	d402      	bmi.n	800a448 <_vfiprintf_r+0x220>
 800a442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a444:	f000 faa1 	bl	800a98a <__retarget_lock_release_recursive>
 800a448:	89ab      	ldrh	r3, [r5, #12]
 800a44a:	065b      	lsls	r3, r3, #25
 800a44c:	f53f af12 	bmi.w	800a274 <_vfiprintf_r+0x4c>
 800a450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a452:	e711      	b.n	800a278 <_vfiprintf_r+0x50>
 800a454:	ab03      	add	r3, sp, #12
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	462a      	mov	r2, r5
 800a45a:	4b09      	ldr	r3, [pc, #36]	; (800a480 <_vfiprintf_r+0x258>)
 800a45c:	a904      	add	r1, sp, #16
 800a45e:	4630      	mov	r0, r6
 800a460:	f7fc fcbc 	bl	8006ddc <_printf_i>
 800a464:	e7e4      	b.n	800a430 <_vfiprintf_r+0x208>
 800a466:	bf00      	nop
 800a468:	0800b81c 	.word	0x0800b81c
 800a46c:	0800b83c 	.word	0x0800b83c
 800a470:	0800b7fc 	.word	0x0800b7fc
 800a474:	0800b7ac 	.word	0x0800b7ac
 800a478:	0800b7b6 	.word	0x0800b7b6
 800a47c:	08006895 	.word	0x08006895
 800a480:	0800a205 	.word	0x0800a205
 800a484:	0800b7b2 	.word	0x0800b7b2

0800a488 <__swbuf_r>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	460e      	mov	r6, r1
 800a48c:	4614      	mov	r4, r2
 800a48e:	4605      	mov	r5, r0
 800a490:	b118      	cbz	r0, 800a49a <__swbuf_r+0x12>
 800a492:	6983      	ldr	r3, [r0, #24]
 800a494:	b90b      	cbnz	r3, 800a49a <__swbuf_r+0x12>
 800a496:	f000 f9d9 	bl	800a84c <__sinit>
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <__swbuf_r+0x98>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d12b      	bne.n	800a4f8 <__swbuf_r+0x70>
 800a4a0:	686c      	ldr	r4, [r5, #4]
 800a4a2:	69a3      	ldr	r3, [r4, #24]
 800a4a4:	60a3      	str	r3, [r4, #8]
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	071a      	lsls	r2, r3, #28
 800a4aa:	d52f      	bpl.n	800a50c <__swbuf_r+0x84>
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	b36b      	cbz	r3, 800a50c <__swbuf_r+0x84>
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	6820      	ldr	r0, [r4, #0]
 800a4b4:	1ac0      	subs	r0, r0, r3
 800a4b6:	6963      	ldr	r3, [r4, #20]
 800a4b8:	b2f6      	uxtb	r6, r6
 800a4ba:	4283      	cmp	r3, r0
 800a4bc:	4637      	mov	r7, r6
 800a4be:	dc04      	bgt.n	800a4ca <__swbuf_r+0x42>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 f92e 	bl	800a724 <_fflush_r>
 800a4c8:	bb30      	cbnz	r0, 800a518 <__swbuf_r+0x90>
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	60a3      	str	r3, [r4, #8]
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	6022      	str	r2, [r4, #0]
 800a4d6:	701e      	strb	r6, [r3, #0]
 800a4d8:	6963      	ldr	r3, [r4, #20]
 800a4da:	3001      	adds	r0, #1
 800a4dc:	4283      	cmp	r3, r0
 800a4de:	d004      	beq.n	800a4ea <__swbuf_r+0x62>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	07db      	lsls	r3, r3, #31
 800a4e4:	d506      	bpl.n	800a4f4 <__swbuf_r+0x6c>
 800a4e6:	2e0a      	cmp	r6, #10
 800a4e8:	d104      	bne.n	800a4f4 <__swbuf_r+0x6c>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 f919 	bl	800a724 <_fflush_r>
 800a4f2:	b988      	cbnz	r0, 800a518 <__swbuf_r+0x90>
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <__swbuf_r+0x9c>)
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d101      	bne.n	800a502 <__swbuf_r+0x7a>
 800a4fe:	68ac      	ldr	r4, [r5, #8]
 800a500:	e7cf      	b.n	800a4a2 <__swbuf_r+0x1a>
 800a502:	4b09      	ldr	r3, [pc, #36]	; (800a528 <__swbuf_r+0xa0>)
 800a504:	429c      	cmp	r4, r3
 800a506:	bf08      	it	eq
 800a508:	68ec      	ldreq	r4, [r5, #12]
 800a50a:	e7ca      	b.n	800a4a2 <__swbuf_r+0x1a>
 800a50c:	4621      	mov	r1, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 f80c 	bl	800a52c <__swsetup_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	d0cb      	beq.n	800a4b0 <__swbuf_r+0x28>
 800a518:	f04f 37ff 	mov.w	r7, #4294967295
 800a51c:	e7ea      	b.n	800a4f4 <__swbuf_r+0x6c>
 800a51e:	bf00      	nop
 800a520:	0800b81c 	.word	0x0800b81c
 800a524:	0800b83c 	.word	0x0800b83c
 800a528:	0800b7fc 	.word	0x0800b7fc

0800a52c <__swsetup_r>:
 800a52c:	4b32      	ldr	r3, [pc, #200]	; (800a5f8 <__swsetup_r+0xcc>)
 800a52e:	b570      	push	{r4, r5, r6, lr}
 800a530:	681d      	ldr	r5, [r3, #0]
 800a532:	4606      	mov	r6, r0
 800a534:	460c      	mov	r4, r1
 800a536:	b125      	cbz	r5, 800a542 <__swsetup_r+0x16>
 800a538:	69ab      	ldr	r3, [r5, #24]
 800a53a:	b913      	cbnz	r3, 800a542 <__swsetup_r+0x16>
 800a53c:	4628      	mov	r0, r5
 800a53e:	f000 f985 	bl	800a84c <__sinit>
 800a542:	4b2e      	ldr	r3, [pc, #184]	; (800a5fc <__swsetup_r+0xd0>)
 800a544:	429c      	cmp	r4, r3
 800a546:	d10f      	bne.n	800a568 <__swsetup_r+0x3c>
 800a548:	686c      	ldr	r4, [r5, #4]
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a550:	0719      	lsls	r1, r3, #28
 800a552:	d42c      	bmi.n	800a5ae <__swsetup_r+0x82>
 800a554:	06dd      	lsls	r5, r3, #27
 800a556:	d411      	bmi.n	800a57c <__swsetup_r+0x50>
 800a558:	2309      	movs	r3, #9
 800a55a:	6033      	str	r3, [r6, #0]
 800a55c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	f04f 30ff 	mov.w	r0, #4294967295
 800a566:	e03e      	b.n	800a5e6 <__swsetup_r+0xba>
 800a568:	4b25      	ldr	r3, [pc, #148]	; (800a600 <__swsetup_r+0xd4>)
 800a56a:	429c      	cmp	r4, r3
 800a56c:	d101      	bne.n	800a572 <__swsetup_r+0x46>
 800a56e:	68ac      	ldr	r4, [r5, #8]
 800a570:	e7eb      	b.n	800a54a <__swsetup_r+0x1e>
 800a572:	4b24      	ldr	r3, [pc, #144]	; (800a604 <__swsetup_r+0xd8>)
 800a574:	429c      	cmp	r4, r3
 800a576:	bf08      	it	eq
 800a578:	68ec      	ldreq	r4, [r5, #12]
 800a57a:	e7e6      	b.n	800a54a <__swsetup_r+0x1e>
 800a57c:	0758      	lsls	r0, r3, #29
 800a57e:	d512      	bpl.n	800a5a6 <__swsetup_r+0x7a>
 800a580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a582:	b141      	cbz	r1, 800a596 <__swsetup_r+0x6a>
 800a584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a588:	4299      	cmp	r1, r3
 800a58a:	d002      	beq.n	800a592 <__swsetup_r+0x66>
 800a58c:	4630      	mov	r0, r6
 800a58e:	f7ff fb27 	bl	8009be0 <_free_r>
 800a592:	2300      	movs	r3, #0
 800a594:	6363      	str	r3, [r4, #52]	; 0x34
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	6063      	str	r3, [r4, #4]
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	f043 0308 	orr.w	r3, r3, #8
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	b94b      	cbnz	r3, 800a5c6 <__swsetup_r+0x9a>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5bc:	d003      	beq.n	800a5c6 <__swsetup_r+0x9a>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 fa09 	bl	800a9d8 <__smakebuf_r>
 800a5c6:	89a0      	ldrh	r0, [r4, #12]
 800a5c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5cc:	f010 0301 	ands.w	r3, r0, #1
 800a5d0:	d00a      	beq.n	800a5e8 <__swsetup_r+0xbc>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60a3      	str	r3, [r4, #8]
 800a5d6:	6963      	ldr	r3, [r4, #20]
 800a5d8:	425b      	negs	r3, r3
 800a5da:	61a3      	str	r3, [r4, #24]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	b943      	cbnz	r3, 800a5f2 <__swsetup_r+0xc6>
 800a5e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5e4:	d1ba      	bne.n	800a55c <__swsetup_r+0x30>
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}
 800a5e8:	0781      	lsls	r1, r0, #30
 800a5ea:	bf58      	it	pl
 800a5ec:	6963      	ldrpl	r3, [r4, #20]
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	e7f4      	b.n	800a5dc <__swsetup_r+0xb0>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	e7f7      	b.n	800a5e6 <__swsetup_r+0xba>
 800a5f6:	bf00      	nop
 800a5f8:	2000000c 	.word	0x2000000c
 800a5fc:	0800b81c 	.word	0x0800b81c
 800a600:	0800b83c 	.word	0x0800b83c
 800a604:	0800b7fc 	.word	0x0800b7fc

0800a608 <abort>:
 800a608:	b508      	push	{r3, lr}
 800a60a:	2006      	movs	r0, #6
 800a60c:	f000 fa54 	bl	800aab8 <raise>
 800a610:	2001      	movs	r0, #1
 800a612:	f7f8 fd1f 	bl	8003054 <_exit>
	...

0800a618 <__sflush_r>:
 800a618:	898a      	ldrh	r2, [r1, #12]
 800a61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	4605      	mov	r5, r0
 800a620:	0710      	lsls	r0, r2, #28
 800a622:	460c      	mov	r4, r1
 800a624:	d458      	bmi.n	800a6d8 <__sflush_r+0xc0>
 800a626:	684b      	ldr	r3, [r1, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dc05      	bgt.n	800a638 <__sflush_r+0x20>
 800a62c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	dc02      	bgt.n	800a638 <__sflush_r+0x20>
 800a632:	2000      	movs	r0, #0
 800a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a63a:	2e00      	cmp	r6, #0
 800a63c:	d0f9      	beq.n	800a632 <__sflush_r+0x1a>
 800a63e:	2300      	movs	r3, #0
 800a640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a644:	682f      	ldr	r7, [r5, #0]
 800a646:	602b      	str	r3, [r5, #0]
 800a648:	d032      	beq.n	800a6b0 <__sflush_r+0x98>
 800a64a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	075a      	lsls	r2, r3, #29
 800a650:	d505      	bpl.n	800a65e <__sflush_r+0x46>
 800a652:	6863      	ldr	r3, [r4, #4]
 800a654:	1ac0      	subs	r0, r0, r3
 800a656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a658:	b10b      	cbz	r3, 800a65e <__sflush_r+0x46>
 800a65a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a65c:	1ac0      	subs	r0, r0, r3
 800a65e:	2300      	movs	r3, #0
 800a660:	4602      	mov	r2, r0
 800a662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a664:	6a21      	ldr	r1, [r4, #32]
 800a666:	4628      	mov	r0, r5
 800a668:	47b0      	blx	r6
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	d106      	bne.n	800a67e <__sflush_r+0x66>
 800a670:	6829      	ldr	r1, [r5, #0]
 800a672:	291d      	cmp	r1, #29
 800a674:	d82c      	bhi.n	800a6d0 <__sflush_r+0xb8>
 800a676:	4a2a      	ldr	r2, [pc, #168]	; (800a720 <__sflush_r+0x108>)
 800a678:	40ca      	lsrs	r2, r1
 800a67a:	07d6      	lsls	r6, r2, #31
 800a67c:	d528      	bpl.n	800a6d0 <__sflush_r+0xb8>
 800a67e:	2200      	movs	r2, #0
 800a680:	6062      	str	r2, [r4, #4]
 800a682:	04d9      	lsls	r1, r3, #19
 800a684:	6922      	ldr	r2, [r4, #16]
 800a686:	6022      	str	r2, [r4, #0]
 800a688:	d504      	bpl.n	800a694 <__sflush_r+0x7c>
 800a68a:	1c42      	adds	r2, r0, #1
 800a68c:	d101      	bne.n	800a692 <__sflush_r+0x7a>
 800a68e:	682b      	ldr	r3, [r5, #0]
 800a690:	b903      	cbnz	r3, 800a694 <__sflush_r+0x7c>
 800a692:	6560      	str	r0, [r4, #84]	; 0x54
 800a694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a696:	602f      	str	r7, [r5, #0]
 800a698:	2900      	cmp	r1, #0
 800a69a:	d0ca      	beq.n	800a632 <__sflush_r+0x1a>
 800a69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a0:	4299      	cmp	r1, r3
 800a6a2:	d002      	beq.n	800a6aa <__sflush_r+0x92>
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f7ff fa9b 	bl	8009be0 <_free_r>
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a6ae:	e7c1      	b.n	800a634 <__sflush_r+0x1c>
 800a6b0:	6a21      	ldr	r1, [r4, #32]
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	47b0      	blx	r6
 800a6b8:	1c41      	adds	r1, r0, #1
 800a6ba:	d1c7      	bne.n	800a64c <__sflush_r+0x34>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0c4      	beq.n	800a64c <__sflush_r+0x34>
 800a6c2:	2b1d      	cmp	r3, #29
 800a6c4:	d001      	beq.n	800a6ca <__sflush_r+0xb2>
 800a6c6:	2b16      	cmp	r3, #22
 800a6c8:	d101      	bne.n	800a6ce <__sflush_r+0xb6>
 800a6ca:	602f      	str	r7, [r5, #0]
 800a6cc:	e7b1      	b.n	800a632 <__sflush_r+0x1a>
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	e7ad      	b.n	800a634 <__sflush_r+0x1c>
 800a6d8:	690f      	ldr	r7, [r1, #16]
 800a6da:	2f00      	cmp	r7, #0
 800a6dc:	d0a9      	beq.n	800a632 <__sflush_r+0x1a>
 800a6de:	0793      	lsls	r3, r2, #30
 800a6e0:	680e      	ldr	r6, [r1, #0]
 800a6e2:	bf08      	it	eq
 800a6e4:	694b      	ldreq	r3, [r1, #20]
 800a6e6:	600f      	str	r7, [r1, #0]
 800a6e8:	bf18      	it	ne
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	eba6 0807 	sub.w	r8, r6, r7
 800a6f0:	608b      	str	r3, [r1, #8]
 800a6f2:	f1b8 0f00 	cmp.w	r8, #0
 800a6f6:	dd9c      	ble.n	800a632 <__sflush_r+0x1a>
 800a6f8:	6a21      	ldr	r1, [r4, #32]
 800a6fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6fc:	4643      	mov	r3, r8
 800a6fe:	463a      	mov	r2, r7
 800a700:	4628      	mov	r0, r5
 800a702:	47b0      	blx	r6
 800a704:	2800      	cmp	r0, #0
 800a706:	dc06      	bgt.n	800a716 <__sflush_r+0xfe>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	f04f 30ff 	mov.w	r0, #4294967295
 800a714:	e78e      	b.n	800a634 <__sflush_r+0x1c>
 800a716:	4407      	add	r7, r0
 800a718:	eba8 0800 	sub.w	r8, r8, r0
 800a71c:	e7e9      	b.n	800a6f2 <__sflush_r+0xda>
 800a71e:	bf00      	nop
 800a720:	20400001 	.word	0x20400001

0800a724 <_fflush_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	690b      	ldr	r3, [r1, #16]
 800a728:	4605      	mov	r5, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	b913      	cbnz	r3, 800a734 <_fflush_r+0x10>
 800a72e:	2500      	movs	r5, #0
 800a730:	4628      	mov	r0, r5
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	b118      	cbz	r0, 800a73e <_fflush_r+0x1a>
 800a736:	6983      	ldr	r3, [r0, #24]
 800a738:	b90b      	cbnz	r3, 800a73e <_fflush_r+0x1a>
 800a73a:	f000 f887 	bl	800a84c <__sinit>
 800a73e:	4b14      	ldr	r3, [pc, #80]	; (800a790 <_fflush_r+0x6c>)
 800a740:	429c      	cmp	r4, r3
 800a742:	d11b      	bne.n	800a77c <_fflush_r+0x58>
 800a744:	686c      	ldr	r4, [r5, #4]
 800a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d0ef      	beq.n	800a72e <_fflush_r+0xa>
 800a74e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a750:	07d0      	lsls	r0, r2, #31
 800a752:	d404      	bmi.n	800a75e <_fflush_r+0x3a>
 800a754:	0599      	lsls	r1, r3, #22
 800a756:	d402      	bmi.n	800a75e <_fflush_r+0x3a>
 800a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75a:	f000 f915 	bl	800a988 <__retarget_lock_acquire_recursive>
 800a75e:	4628      	mov	r0, r5
 800a760:	4621      	mov	r1, r4
 800a762:	f7ff ff59 	bl	800a618 <__sflush_r>
 800a766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a768:	07da      	lsls	r2, r3, #31
 800a76a:	4605      	mov	r5, r0
 800a76c:	d4e0      	bmi.n	800a730 <_fflush_r+0xc>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	059b      	lsls	r3, r3, #22
 800a772:	d4dd      	bmi.n	800a730 <_fflush_r+0xc>
 800a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a776:	f000 f908 	bl	800a98a <__retarget_lock_release_recursive>
 800a77a:	e7d9      	b.n	800a730 <_fflush_r+0xc>
 800a77c:	4b05      	ldr	r3, [pc, #20]	; (800a794 <_fflush_r+0x70>)
 800a77e:	429c      	cmp	r4, r3
 800a780:	d101      	bne.n	800a786 <_fflush_r+0x62>
 800a782:	68ac      	ldr	r4, [r5, #8]
 800a784:	e7df      	b.n	800a746 <_fflush_r+0x22>
 800a786:	4b04      	ldr	r3, [pc, #16]	; (800a798 <_fflush_r+0x74>)
 800a788:	429c      	cmp	r4, r3
 800a78a:	bf08      	it	eq
 800a78c:	68ec      	ldreq	r4, [r5, #12]
 800a78e:	e7da      	b.n	800a746 <_fflush_r+0x22>
 800a790:	0800b81c 	.word	0x0800b81c
 800a794:	0800b83c 	.word	0x0800b83c
 800a798:	0800b7fc 	.word	0x0800b7fc

0800a79c <std>:
 800a79c:	2300      	movs	r3, #0
 800a79e:	b510      	push	{r4, lr}
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7aa:	6083      	str	r3, [r0, #8]
 800a7ac:	8181      	strh	r1, [r0, #12]
 800a7ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a7b0:	81c2      	strh	r2, [r0, #14]
 800a7b2:	6183      	str	r3, [r0, #24]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	2208      	movs	r2, #8
 800a7b8:	305c      	adds	r0, #92	; 0x5c
 800a7ba:	f7fb ffc3 	bl	8006744 <memset>
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <std+0x38>)
 800a7c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a7c2:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <std+0x3c>)
 800a7c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <std+0x40>)
 800a7c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7ca:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <std+0x44>)
 800a7cc:	6224      	str	r4, [r4, #32]
 800a7ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800aaf1 	.word	0x0800aaf1
 800a7d8:	0800ab13 	.word	0x0800ab13
 800a7dc:	0800ab4b 	.word	0x0800ab4b
 800a7e0:	0800ab6f 	.word	0x0800ab6f

0800a7e4 <_cleanup_r>:
 800a7e4:	4901      	ldr	r1, [pc, #4]	; (800a7ec <_cleanup_r+0x8>)
 800a7e6:	f000 b8af 	b.w	800a948 <_fwalk_reent>
 800a7ea:	bf00      	nop
 800a7ec:	0800a725 	.word	0x0800a725

0800a7f0 <__sfmoreglue>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	2268      	movs	r2, #104	; 0x68
 800a7f4:	1e4d      	subs	r5, r1, #1
 800a7f6:	4355      	muls	r5, r2
 800a7f8:	460e      	mov	r6, r1
 800a7fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7fe:	f7ff fa5b 	bl	8009cb8 <_malloc_r>
 800a802:	4604      	mov	r4, r0
 800a804:	b140      	cbz	r0, 800a818 <__sfmoreglue+0x28>
 800a806:	2100      	movs	r1, #0
 800a808:	e9c0 1600 	strd	r1, r6, [r0]
 800a80c:	300c      	adds	r0, #12
 800a80e:	60a0      	str	r0, [r4, #8]
 800a810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a814:	f7fb ff96 	bl	8006744 <memset>
 800a818:	4620      	mov	r0, r4
 800a81a:	bd70      	pop	{r4, r5, r6, pc}

0800a81c <__sfp_lock_acquire>:
 800a81c:	4801      	ldr	r0, [pc, #4]	; (800a824 <__sfp_lock_acquire+0x8>)
 800a81e:	f000 b8b3 	b.w	800a988 <__retarget_lock_acquire_recursive>
 800a822:	bf00      	nop
 800a824:	20000db5 	.word	0x20000db5

0800a828 <__sfp_lock_release>:
 800a828:	4801      	ldr	r0, [pc, #4]	; (800a830 <__sfp_lock_release+0x8>)
 800a82a:	f000 b8ae 	b.w	800a98a <__retarget_lock_release_recursive>
 800a82e:	bf00      	nop
 800a830:	20000db5 	.word	0x20000db5

0800a834 <__sinit_lock_acquire>:
 800a834:	4801      	ldr	r0, [pc, #4]	; (800a83c <__sinit_lock_acquire+0x8>)
 800a836:	f000 b8a7 	b.w	800a988 <__retarget_lock_acquire_recursive>
 800a83a:	bf00      	nop
 800a83c:	20000db6 	.word	0x20000db6

0800a840 <__sinit_lock_release>:
 800a840:	4801      	ldr	r0, [pc, #4]	; (800a848 <__sinit_lock_release+0x8>)
 800a842:	f000 b8a2 	b.w	800a98a <__retarget_lock_release_recursive>
 800a846:	bf00      	nop
 800a848:	20000db6 	.word	0x20000db6

0800a84c <__sinit>:
 800a84c:	b510      	push	{r4, lr}
 800a84e:	4604      	mov	r4, r0
 800a850:	f7ff fff0 	bl	800a834 <__sinit_lock_acquire>
 800a854:	69a3      	ldr	r3, [r4, #24]
 800a856:	b11b      	cbz	r3, 800a860 <__sinit+0x14>
 800a858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a85c:	f7ff bff0 	b.w	800a840 <__sinit_lock_release>
 800a860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a864:	6523      	str	r3, [r4, #80]	; 0x50
 800a866:	4b13      	ldr	r3, [pc, #76]	; (800a8b4 <__sinit+0x68>)
 800a868:	4a13      	ldr	r2, [pc, #76]	; (800a8b8 <__sinit+0x6c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a86e:	42a3      	cmp	r3, r4
 800a870:	bf04      	itt	eq
 800a872:	2301      	moveq	r3, #1
 800a874:	61a3      	streq	r3, [r4, #24]
 800a876:	4620      	mov	r0, r4
 800a878:	f000 f820 	bl	800a8bc <__sfp>
 800a87c:	6060      	str	r0, [r4, #4]
 800a87e:	4620      	mov	r0, r4
 800a880:	f000 f81c 	bl	800a8bc <__sfp>
 800a884:	60a0      	str	r0, [r4, #8]
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f818 	bl	800a8bc <__sfp>
 800a88c:	2200      	movs	r2, #0
 800a88e:	60e0      	str	r0, [r4, #12]
 800a890:	2104      	movs	r1, #4
 800a892:	6860      	ldr	r0, [r4, #4]
 800a894:	f7ff ff82 	bl	800a79c <std>
 800a898:	68a0      	ldr	r0, [r4, #8]
 800a89a:	2201      	movs	r2, #1
 800a89c:	2109      	movs	r1, #9
 800a89e:	f7ff ff7d 	bl	800a79c <std>
 800a8a2:	68e0      	ldr	r0, [r4, #12]
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	2112      	movs	r1, #18
 800a8a8:	f7ff ff78 	bl	800a79c <std>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	61a3      	str	r3, [r4, #24]
 800a8b0:	e7d2      	b.n	800a858 <__sinit+0xc>
 800a8b2:	bf00      	nop
 800a8b4:	0800b3bc 	.word	0x0800b3bc
 800a8b8:	0800a7e5 	.word	0x0800a7e5

0800a8bc <__sfp>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	4607      	mov	r7, r0
 800a8c0:	f7ff ffac 	bl	800a81c <__sfp_lock_acquire>
 800a8c4:	4b1e      	ldr	r3, [pc, #120]	; (800a940 <__sfp+0x84>)
 800a8c6:	681e      	ldr	r6, [r3, #0]
 800a8c8:	69b3      	ldr	r3, [r6, #24]
 800a8ca:	b913      	cbnz	r3, 800a8d2 <__sfp+0x16>
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f7ff ffbd 	bl	800a84c <__sinit>
 800a8d2:	3648      	adds	r6, #72	; 0x48
 800a8d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	d503      	bpl.n	800a8e4 <__sfp+0x28>
 800a8dc:	6833      	ldr	r3, [r6, #0]
 800a8de:	b30b      	cbz	r3, 800a924 <__sfp+0x68>
 800a8e0:	6836      	ldr	r6, [r6, #0]
 800a8e2:	e7f7      	b.n	800a8d4 <__sfp+0x18>
 800a8e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8e8:	b9d5      	cbnz	r5, 800a920 <__sfp+0x64>
 800a8ea:	4b16      	ldr	r3, [pc, #88]	; (800a944 <__sfp+0x88>)
 800a8ec:	60e3      	str	r3, [r4, #12]
 800a8ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a8f4:	f000 f847 	bl	800a986 <__retarget_lock_init_recursive>
 800a8f8:	f7ff ff96 	bl	800a828 <__sfp_lock_release>
 800a8fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a904:	6025      	str	r5, [r4, #0]
 800a906:	61a5      	str	r5, [r4, #24]
 800a908:	2208      	movs	r2, #8
 800a90a:	4629      	mov	r1, r5
 800a90c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a910:	f7fb ff18 	bl	8006744 <memset>
 800a914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a91c:	4620      	mov	r0, r4
 800a91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a920:	3468      	adds	r4, #104	; 0x68
 800a922:	e7d9      	b.n	800a8d8 <__sfp+0x1c>
 800a924:	2104      	movs	r1, #4
 800a926:	4638      	mov	r0, r7
 800a928:	f7ff ff62 	bl	800a7f0 <__sfmoreglue>
 800a92c:	4604      	mov	r4, r0
 800a92e:	6030      	str	r0, [r6, #0]
 800a930:	2800      	cmp	r0, #0
 800a932:	d1d5      	bne.n	800a8e0 <__sfp+0x24>
 800a934:	f7ff ff78 	bl	800a828 <__sfp_lock_release>
 800a938:	230c      	movs	r3, #12
 800a93a:	603b      	str	r3, [r7, #0]
 800a93c:	e7ee      	b.n	800a91c <__sfp+0x60>
 800a93e:	bf00      	nop
 800a940:	0800b3bc 	.word	0x0800b3bc
 800a944:	ffff0001 	.word	0xffff0001

0800a948 <_fwalk_reent>:
 800a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	4606      	mov	r6, r0
 800a94e:	4688      	mov	r8, r1
 800a950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a954:	2700      	movs	r7, #0
 800a956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a95a:	f1b9 0901 	subs.w	r9, r9, #1
 800a95e:	d505      	bpl.n	800a96c <_fwalk_reent+0x24>
 800a960:	6824      	ldr	r4, [r4, #0]
 800a962:	2c00      	cmp	r4, #0
 800a964:	d1f7      	bne.n	800a956 <_fwalk_reent+0xe>
 800a966:	4638      	mov	r0, r7
 800a968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a96c:	89ab      	ldrh	r3, [r5, #12]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d907      	bls.n	800a982 <_fwalk_reent+0x3a>
 800a972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a976:	3301      	adds	r3, #1
 800a978:	d003      	beq.n	800a982 <_fwalk_reent+0x3a>
 800a97a:	4629      	mov	r1, r5
 800a97c:	4630      	mov	r0, r6
 800a97e:	47c0      	blx	r8
 800a980:	4307      	orrs	r7, r0
 800a982:	3568      	adds	r5, #104	; 0x68
 800a984:	e7e9      	b.n	800a95a <_fwalk_reent+0x12>

0800a986 <__retarget_lock_init_recursive>:
 800a986:	4770      	bx	lr

0800a988 <__retarget_lock_acquire_recursive>:
 800a988:	4770      	bx	lr

0800a98a <__retarget_lock_release_recursive>:
 800a98a:	4770      	bx	lr

0800a98c <__swhatbuf_r>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	460e      	mov	r6, r1
 800a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a994:	2900      	cmp	r1, #0
 800a996:	b096      	sub	sp, #88	; 0x58
 800a998:	4614      	mov	r4, r2
 800a99a:	461d      	mov	r5, r3
 800a99c:	da08      	bge.n	800a9b0 <__swhatbuf_r+0x24>
 800a99e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	061a      	lsls	r2, r3, #24
 800a9a8:	d410      	bmi.n	800a9cc <__swhatbuf_r+0x40>
 800a9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ae:	e00e      	b.n	800a9ce <__swhatbuf_r+0x42>
 800a9b0:	466a      	mov	r2, sp
 800a9b2:	f000 f903 	bl	800abbc <_fstat_r>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	dbf1      	blt.n	800a99e <__swhatbuf_r+0x12>
 800a9ba:	9a01      	ldr	r2, [sp, #4]
 800a9bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9c4:	425a      	negs	r2, r3
 800a9c6:	415a      	adcs	r2, r3
 800a9c8:	602a      	str	r2, [r5, #0]
 800a9ca:	e7ee      	b.n	800a9aa <__swhatbuf_r+0x1e>
 800a9cc:	2340      	movs	r3, #64	; 0x40
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	b016      	add	sp, #88	; 0x58
 800a9d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9d8 <__smakebuf_r>:
 800a9d8:	898b      	ldrh	r3, [r1, #12]
 800a9da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9dc:	079d      	lsls	r5, r3, #30
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	d507      	bpl.n	800a9f4 <__smakebuf_r+0x1c>
 800a9e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	6123      	str	r3, [r4, #16]
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	6163      	str	r3, [r4, #20]
 800a9f0:	b002      	add	sp, #8
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	ab01      	add	r3, sp, #4
 800a9f6:	466a      	mov	r2, sp
 800a9f8:	f7ff ffc8 	bl	800a98c <__swhatbuf_r>
 800a9fc:	9900      	ldr	r1, [sp, #0]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff f959 	bl	8009cb8 <_malloc_r>
 800aa06:	b948      	cbnz	r0, 800aa1c <__smakebuf_r+0x44>
 800aa08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0c:	059a      	lsls	r2, r3, #22
 800aa0e:	d4ef      	bmi.n	800a9f0 <__smakebuf_r+0x18>
 800aa10:	f023 0303 	bic.w	r3, r3, #3
 800aa14:	f043 0302 	orr.w	r3, r3, #2
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	e7e3      	b.n	800a9e4 <__smakebuf_r+0xc>
 800aa1c:	4b0d      	ldr	r3, [pc, #52]	; (800aa54 <__smakebuf_r+0x7c>)
 800aa1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	6020      	str	r0, [r4, #0]
 800aa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	6163      	str	r3, [r4, #20]
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	6120      	str	r0, [r4, #16]
 800aa32:	b15b      	cbz	r3, 800aa4c <__smakebuf_r+0x74>
 800aa34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f000 f8d1 	bl	800abe0 <_isatty_r>
 800aa3e:	b128      	cbz	r0, 800aa4c <__smakebuf_r+0x74>
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	f023 0303 	bic.w	r3, r3, #3
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	89a0      	ldrh	r0, [r4, #12]
 800aa4e:	4305      	orrs	r5, r0
 800aa50:	81a5      	strh	r5, [r4, #12]
 800aa52:	e7cd      	b.n	800a9f0 <__smakebuf_r+0x18>
 800aa54:	0800a7e5 	.word	0x0800a7e5

0800aa58 <_malloc_usable_size_r>:
 800aa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa5c:	1f18      	subs	r0, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfbc      	itt	lt
 800aa62:	580b      	ldrlt	r3, [r1, r0]
 800aa64:	18c0      	addlt	r0, r0, r3
 800aa66:	4770      	bx	lr

0800aa68 <_raise_r>:
 800aa68:	291f      	cmp	r1, #31
 800aa6a:	b538      	push	{r3, r4, r5, lr}
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	d904      	bls.n	800aa7c <_raise_r+0x14>
 800aa72:	2316      	movs	r3, #22
 800aa74:	6003      	str	r3, [r0, #0]
 800aa76:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa7e:	b112      	cbz	r2, 800aa86 <_raise_r+0x1e>
 800aa80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa84:	b94b      	cbnz	r3, 800aa9a <_raise_r+0x32>
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 f830 	bl	800aaec <_getpid_r>
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	4601      	mov	r1, r0
 800aa90:	4620      	mov	r0, r4
 800aa92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa96:	f000 b817 	b.w	800aac8 <_kill_r>
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d00a      	beq.n	800aab4 <_raise_r+0x4c>
 800aa9e:	1c59      	adds	r1, r3, #1
 800aaa0:	d103      	bne.n	800aaaa <_raise_r+0x42>
 800aaa2:	2316      	movs	r3, #22
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	e7e7      	b.n	800aa7a <_raise_r+0x12>
 800aaaa:	2400      	movs	r4, #0
 800aaac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aab0:	4628      	mov	r0, r5
 800aab2:	4798      	blx	r3
 800aab4:	2000      	movs	r0, #0
 800aab6:	e7e0      	b.n	800aa7a <_raise_r+0x12>

0800aab8 <raise>:
 800aab8:	4b02      	ldr	r3, [pc, #8]	; (800aac4 <raise+0xc>)
 800aaba:	4601      	mov	r1, r0
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	f7ff bfd3 	b.w	800aa68 <_raise_r>
 800aac2:	bf00      	nop
 800aac4:	2000000c 	.word	0x2000000c

0800aac8 <_kill_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d07      	ldr	r5, [pc, #28]	; (800aae8 <_kill_r+0x20>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	4611      	mov	r1, r2
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f7f8 faad 	bl	8003034 <_kill>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d102      	bne.n	800aae4 <_kill_r+0x1c>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	b103      	cbz	r3, 800aae4 <_kill_r+0x1c>
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	bd38      	pop	{r3, r4, r5, pc}
 800aae6:	bf00      	nop
 800aae8:	20000db0 	.word	0x20000db0

0800aaec <_getpid_r>:
 800aaec:	f7f8 ba9a 	b.w	8003024 <_getpid>

0800aaf0 <__sread>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf8:	f000 f894 	bl	800ac24 <_read_r>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	bfab      	itete	ge
 800ab00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab02:	89a3      	ldrhlt	r3, [r4, #12]
 800ab04:	181b      	addge	r3, r3, r0
 800ab06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab0a:	bfac      	ite	ge
 800ab0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab0e:	81a3      	strhlt	r3, [r4, #12]
 800ab10:	bd10      	pop	{r4, pc}

0800ab12 <__swrite>:
 800ab12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab16:	461f      	mov	r7, r3
 800ab18:	898b      	ldrh	r3, [r1, #12]
 800ab1a:	05db      	lsls	r3, r3, #23
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	4616      	mov	r6, r2
 800ab22:	d505      	bpl.n	800ab30 <__swrite+0x1e>
 800ab24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab28:	2302      	movs	r3, #2
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f000 f868 	bl	800ac00 <_lseek_r>
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab3a:	81a3      	strh	r3, [r4, #12]
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	463b      	mov	r3, r7
 800ab40:	4628      	mov	r0, r5
 800ab42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab46:	f000 b817 	b.w	800ab78 <_write_r>

0800ab4a <__sseek>:
 800ab4a:	b510      	push	{r4, lr}
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab52:	f000 f855 	bl	800ac00 <_lseek_r>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	bf15      	itete	ne
 800ab5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab66:	81a3      	strheq	r3, [r4, #12]
 800ab68:	bf18      	it	ne
 800ab6a:	81a3      	strhne	r3, [r4, #12]
 800ab6c:	bd10      	pop	{r4, pc}

0800ab6e <__sclose>:
 800ab6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab72:	f000 b813 	b.w	800ab9c <_close_r>
	...

0800ab78 <_write_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d07      	ldr	r5, [pc, #28]	; (800ab98 <_write_r+0x20>)
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	4608      	mov	r0, r1
 800ab80:	4611      	mov	r1, r2
 800ab82:	2200      	movs	r2, #0
 800ab84:	602a      	str	r2, [r5, #0]
 800ab86:	461a      	mov	r2, r3
 800ab88:	f7f8 fa8b 	bl	80030a2 <_write>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	d102      	bne.n	800ab96 <_write_r+0x1e>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	b103      	cbz	r3, 800ab96 <_write_r+0x1e>
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	20000db0 	.word	0x20000db0

0800ab9c <_close_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4d06      	ldr	r5, [pc, #24]	; (800abb8 <_close_r+0x1c>)
 800aba0:	2300      	movs	r3, #0
 800aba2:	4604      	mov	r4, r0
 800aba4:	4608      	mov	r0, r1
 800aba6:	602b      	str	r3, [r5, #0]
 800aba8:	f7f8 fa97 	bl	80030da <_close>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_close_r+0x1a>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_close_r+0x1a>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	20000db0 	.word	0x20000db0

0800abbc <_fstat_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d07      	ldr	r5, [pc, #28]	; (800abdc <_fstat_r+0x20>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	4611      	mov	r1, r2
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	f7f8 fa92 	bl	80030f2 <_fstat>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	d102      	bne.n	800abd8 <_fstat_r+0x1c>
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	b103      	cbz	r3, 800abd8 <_fstat_r+0x1c>
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	bd38      	pop	{r3, r4, r5, pc}
 800abda:	bf00      	nop
 800abdc:	20000db0 	.word	0x20000db0

0800abe0 <_isatty_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d06      	ldr	r5, [pc, #24]	; (800abfc <_isatty_r+0x1c>)
 800abe4:	2300      	movs	r3, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	602b      	str	r3, [r5, #0]
 800abec:	f7f8 fa91 	bl	8003112 <_isatty>
 800abf0:	1c43      	adds	r3, r0, #1
 800abf2:	d102      	bne.n	800abfa <_isatty_r+0x1a>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	b103      	cbz	r3, 800abfa <_isatty_r+0x1a>
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	20000db0 	.word	0x20000db0

0800ac00 <_lseek_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d07      	ldr	r5, [pc, #28]	; (800ac20 <_lseek_r+0x20>)
 800ac04:	4604      	mov	r4, r0
 800ac06:	4608      	mov	r0, r1
 800ac08:	4611      	mov	r1, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	602a      	str	r2, [r5, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f7f8 fa8a 	bl	8003128 <_lseek>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_lseek_r+0x1e>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_lseek_r+0x1e>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	20000db0 	.word	0x20000db0

0800ac24 <_read_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d07      	ldr	r5, [pc, #28]	; (800ac44 <_read_r+0x20>)
 800ac28:	4604      	mov	r4, r0
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	2200      	movs	r2, #0
 800ac30:	602a      	str	r2, [r5, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	f7f8 fa18 	bl	8003068 <_read>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_read_r+0x1e>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_read_r+0x1e>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	20000db0 	.word	0x20000db0

0800ac48 <_init>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	bf00      	nop
 800ac4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4e:	bc08      	pop	{r3}
 800ac50:	469e      	mov	lr, r3
 800ac52:	4770      	bx	lr

0800ac54 <_fini>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	bf00      	nop
 800ac58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5a:	bc08      	pop	{r3}
 800ac5c:	469e      	mov	lr, r3
 800ac5e:	4770      	bx	lr
