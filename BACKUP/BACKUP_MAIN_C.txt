/*
 * Project		: ZephC LTE Gateway
 * Version		: 1.0
 * Revision		: 1.0
 *
 * Author		: REDWOLF DiGiTAL [C. Worakan]
 */

#include "main.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
#include <string.h>

#include "msgProcess.h"
#include "GNSSprocess.h"
#include "EXITinti.h"
#include "LTEdriver.h"





char textBuffer[125];


char Rx1Buff[Rx1Buff_Size];
char Rx2Buff[Rx2Buff_Size];
char dataComm_mainBuff[dataComm_MainBuff_S];
char lteComm_MainBuff[lteComm_MainBuff_S];



TIM_HandleTypeDef htim4;
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

// custom HandleTypeDef
SysTimer_HandleTypeDef sysCounter;
SysFlag_HandleTypeDef sysFlag;
GNSS_HandleTypeDef GNSS;
Sensor_HandleTypeDef SENSOR;


void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {

  sysValinit();
  sensorValInit();

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USB_DEVICE_Init();
  MX_TIM4_Init();


  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);



  // INTERRUPT
  initEXIT();


//
//
//  // Wait network register
//  SerialDebug("[MCU] -> Wait network register");
//
//  while(networkRegStatus() != 1) {
//	  if(sysCounter.rebootCount == 120) {
//		  sysCounter.rebootCount = 0;
//		  RebootLTE();
//		  goto INIT_LTE;
//	  }
//
//	  SerialDebug(".");
//	  sysCounter.rebootCount++;
//	  HAL_Delay(500);
//  }
//  sysCounter.rebootCount = 0;
//  SerialDebug("\r\n");
//
//
//  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);		// BUSY 0
//  SerialDebug("[MCU] -> System init done\r\n");
//
//  SendCMD_LTE("AT+QGPS=1\r\n");							// Enable GNSS
//  SerialDebug("[MCU] -> Enable GNSS done\r\n");
//


/*
 *  ===============================================================================
 *
 *  _____ _____ _____ _____    _____ _____ _____ _____ _____ _____ _____ _____
 * |     |  _  |     |   | |  |  _  | __  |     |   __| __  |  _  |     |   __|
 * | | | |     |-   -| | | |  |   __|    -|  |  |  |  |    -|     | | | |__   |
 * |_|_|_|__|__|_____|_|___|  |__|  |__|__|_____|_____|__|__|__|__|_|_|_|_____|
 *
 *  ===============================================================================
 */

  // Wait LTE module boot
//	HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);			// BUSY 1
//	HAL_GPIO_WritePin(GPIOB, ONLINE, GPIO_PIN_RESET);		// ONLINE 0
//	while(sysCounter.main_ms_counter < 500);				// Wait MCU boot
//	SerialDebug("[MCU] -> Wait system boot 30sec.\r\n");
//
//	while(sysCounter.main_ms_counter < LTEbootTime);		// Wait LTE module boot
//	initLTE();											// Start init LTE module


	while(1) {


//	RS485Handle :
//	while(intterruptEvent_Flag == 1) {									// Get RTS Signal
//	  SerialDebug("[MCU] -> GET RTS\r\n");
//	  sensorValInit();													// Clear buffer
//	  memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));		// Clear buffer
//	  // Generate pulse 5ms.
//	  SerialDebug("[MCU] -> SEND RDY\r\n");
//	  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
//	  HAL_Delay(5);
//	  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
//
//	  // Process data
//	  SerialDebug("[MCU] -> WAIT DATA\r\n");
//	  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
//
//
//	  while(dataComm_mainBuff != 0x00){									// Wait DMA put data from UART to buffer
//		  // Timeout 5 sec.
//		  if(sysCounter.main_ms_counter == 0) {
//			  sysCounter.prev_msgTimeOut = 0;
//		  }
//		  if((sysCounter.main_ms_counter - sysCounter.prev_msgTimeOut) >= msgTimeOut) {
//			  SerialDebug("[RS485] -> TIME OUT\r\n");
//			  SendData_RS485((char *)0x02);								// Send response code 0x02 -> ERROR
//			  intterruptEvent_Flag = 0;
//			  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
//			  goto RS485Handle;
//		  }
//	  }
//	  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
//
//
//	  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);						// BUSY !!!!
//	  // Process data
//	  char REQNODE[1];
//	  char ENDBYTE[1];
//	  char COMPID[1];
//	  Delimiter(dataComm_mainBuff, ',', 0, 80, (unsigned char *)REQNODE);
//	  Delimiter(dataComm_mainBuff, ',', 3, 80, (unsigned char *)COMPID);
//	  Delimiter(dataComm_mainBuff, ',', 12, 80, (unsigned char *)ENDBYTE);
//
//	  if(REQNODE[1] == COMPID[1] && ENDBYTE[1] == 'Q') {
//		  SerialDebug("[MCU] -> RS485 data is valid\r\n");
//
//		  Delimiter(dataComm_mainBuff, ',', 1, 80, (unsigned char *)SENSOR.timeStemp);
//		  Delimiter(dataComm_mainBuff, ',', 2, 80, (unsigned char *)SENSOR.dateStamp);
//		  Delimiter(dataComm_mainBuff, ',', 3, 80, (unsigned char *)SENSOR.ID);
//		  Delimiter(dataComm_mainBuff, ',', 4, 80, (unsigned char *)SENSOR.X);
//		  Delimiter(dataComm_mainBuff, ',', 5, 80, (unsigned char *)SENSOR.Y);
//		  Delimiter(dataComm_mainBuff, ',', 6, 80, (unsigned char *)SENSOR.Z);
//		  Delimiter(dataComm_mainBuff, ',', 7, 80, (unsigned char *)SENSOR.Huim);
//		  Delimiter(dataComm_mainBuff, ',', 8, 80, (unsigned char *)SENSOR.Temp);
//		  Delimiter(dataComm_mainBuff, ',', 9, 80, (unsigned char *)SENSOR.Alc);
//		  Delimiter(dataComm_mainBuff, ',', 10, 80, (unsigned char *)SENSOR.Carbon);
//		  Delimiter(dataComm_mainBuff, ',', 11, 80, (unsigned char *)SENSOR.AirFlow);
//
//		  SendData_RS485((char *)0x01);									// Send response code 0x01 -> DONE
//	  }else {
//		  SerialDebug("[MCU] -> RS485 data is not valid\r\n");
//		  SendData_RS485((char *)0x02);									// Send response code 0x02 -> ERROR
//	  }
//
//	  SerialDebug("[MCU] -> End data process\r\n");
//	  intterruptEvent_Flag = 0;
//	  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);					// End process
//	}
//	// =====================================================================================



  }
}











// user custom functions

// init startup value at boot
void sysValinit(void) {
	sysCounter.main_ms_counter = 0;
	sysCounter.prev_LTEtimeout = 0;
	sysCounter.prev_ERRORtime = 0;
	sysCounter.rebootCount = 0;

	sysCounter.CMDrespTime = 1000;	// 1sec.

	sysFlag.LTE_CMD_Send = 0;
	sysFlag.LTE_ERROR = 0;
}


// init sensor variable handle
// set/clear buffer array
void sensorValInit(void) {
	SENSOR.dateStamp[0] = '\0';
	SENSOR.dateStamp[0] = '\0';
	SENSOR.ID[0] = '\0';
	SENSOR.X[0] = '\0';
	SENSOR.Y[0] = '\0';
	SENSOR.Z[0] = '\0';
	SENSOR.Huim[0] = '\0';
	SENSOR.Temp[0] = '\0';
	SENSOR.Alc[0] = '\0';
	SENSOR.Carbon[0] = '\0';
	SENSOR.AirFlow[0] = '\0';
}


// Send text via USB VCOM port
void SerialDebug(char *msgDebug) {
	while(CDC_Transmit_FS((uint8_t *) msgDebug, strlen(msgDebug)) != USBD_OK);
}


// RS485 Tx [Polling method]
void SendData_RS485(char *msg) {
	HAL_GPIO_WritePin(GPIOA, RS485_TxMode, GPIO_PIN_SET);
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 10);
	HAL_GPIO_WritePin(GPIOA, RS485_TxMode, GPIO_PIN_RESET);
}

void SendCMD_LTE(char *msg) {
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 10);
}


// UART1/UART2 Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
	// For LTE module
	if(huart -> Instance == USART2) {
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
	}
}




// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if(htim -> Instance == TIM4) {
		sysCounter.main_ms_counter++;
	}
}













