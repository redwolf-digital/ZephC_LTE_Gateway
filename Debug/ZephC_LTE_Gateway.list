
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800b74c  0800b74c  0001b74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdf8  0800bdf8  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdf8  0800bdf8  0001bdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be00  0800be00  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be04  0800be04  0001be04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800be08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002694  20000160  0800bf68  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027f4  0800bf68  000227f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198a0  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2f  00000000  00000000  00039a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acde  00000000  00000000  0003ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b556  00000000  00000000  0005ac26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ade  00000000  00000000  0007617c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108c5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  00108cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b734 	.word	0x0800b734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800b734 	.word	0x0800b734

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db0b      	blt.n	80005be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 021f 	and.w	r2, r3, #31
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <__NVIC_EnableIRQ+0x38>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	095b      	lsrs	r3, r3, #5
 80005b4:	2001      	movs	r0, #1
 80005b6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <initEXIT>:
#include "stm32f4xx.h"
#include "stm32f4xx_it.h"

unsigned char intterruptEvent_Flag = 0;

void initEXIT(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// Enable GPIO Clock
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <initEXIT+0x7c>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <initEXIT+0x7c>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER &= ~3U << 6;					// GPIO B3 set 00 - INPUT
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <initEXIT+0x80>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1a      	ldr	r2, [pc, #104]	; (8000650 <initEXIT+0x80>)
 80005e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005ea:	6013      	str	r3, [r2, #0]
	GPIOB -> PUPDR &= ~3U << 6;					// No pull-up|pull-down
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <initEXIT+0x80>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <initEXIT+0x80>)
 80005f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005f6:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI3_IRQn);					// Enable interrupt
 80005f8:	2009      	movs	r0, #9
 80005fa:	f7ff ffcb 	bl	8000594 <__NVIC_EnableIRQ>

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <initEXIT+0x7c>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <initEXIT+0x7c>)
 8000604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000608:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG -> EXTICR[0] &= SYSCFG_EXTICR1_EXTI3;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <initEXIT+0x84>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <initEXIT+0x84>)
 8000610:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000614:	6093      	str	r3, [r2, #8]
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <initEXIT+0x84>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <initEXIT+0x84>)
 800061c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000620:	6093      	str	r3, [r2, #8]

	EXTI -> RTSR &= ~EXTI_RTSR_TR3;				// Disable rising trigger
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <initEXIT+0x88>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <initEXIT+0x88>)
 8000628:	f023 0308 	bic.w	r3, r3, #8
 800062c:	6093      	str	r3, [r2, #8]
	EXTI -> RTSR |= EXTI_FTSR_TR3;				// Enable falling trigger
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <initEXIT+0x88>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <initEXIT+0x88>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6093      	str	r3, [r2, #8]

//	EXTI -> RTSR |= EXTI_RTSR_TR3;
//	EXTI -> RTSR &= ~EXTI_FTSR_TR3;

	EXTI -> IMR |= EXTI_IMR_IM3;				// Interrupt Mask 1 = not mask
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <initEXIT+0x88>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <initEXIT+0x88>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400
 8000654:	40013800 	.word	0x40013800
 8000658:	40013c00 	.word	0x40013c00

0800065c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void) {
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR3) != 0) {
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <EXTI3_IRQHandler+0x22>
		intterruptEvent_Flag = 1;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <EXTI3_IRQHandler+0x30>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= EXTI_PR_PR3;
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6153      	str	r3, [r2, #20]
	}
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	40013c00 	.word	0x40013c00
 800068c:	2000017c 	.word	0x2000017c

08000690 <callGNSS>:


// Get GPS data
// return 1 if process is done
// return 2 if NMEA CRC is fail
unsigned char callGNSS(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af02      	add	r7, sp, #8
	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	2100      	movs	r1, #0
 800069a:	482a      	ldr	r0, [pc, #168]	; (8000744 <callGNSS+0xb4>)
 800069c:	f00a fb36 	bl	800ad0c <memset>
	SendCMD_LTE((char *) "AT+QGPSCFG=\"outport\",\"uartdebug\"\r\n");
 80006a0:	4829      	ldr	r0, [pc, #164]	; (8000748 <callGNSS+0xb8>)
 80006a2:	f000 ff73 	bl	800158c <SendCMD_LTE>

	while(findTarget(lteComm_MainBuff, "GPRMC") != 1);
 80006a6:	bf00      	nop
 80006a8:	4928      	ldr	r1, [pc, #160]	; (800074c <callGNSS+0xbc>)
 80006aa:	4826      	ldr	r0, [pc, #152]	; (8000744 <callGNSS+0xb4>)
 80006ac:	f000 ffe4 	bl	8001678 <findTarget>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d1f8      	bne.n	80006a8 <callGNSS+0x18>
	memcpy(GNSS_temp, lteComm_MainBuff, sizeof(GNSS_temp));
 80006b6:	4a26      	ldr	r2, [pc, #152]	; (8000750 <callGNSS+0xc0>)
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <callGNSS+0xb4>)
 80006ba:	4610      	mov	r0, r2
 80006bc:	4619      	mov	r1, r3
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	461a      	mov	r2, r3
 80006c2:	f00a fb15 	bl	800acf0 <memcpy>
	HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f001 fd66 	bl	8002198 <HAL_Delay>

	processFlag = NMEACRCCal((unsigned char *) GNSS_temp);
 80006cc:	4820      	ldr	r0, [pc, #128]	; (8000750 <callGNSS+0xc0>)
 80006ce:	f001 fa85 	bl	8001bdc <NMEACRCCal>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <callGNSS+0xc4>)
 80006d8:	701a      	strb	r2, [r3, #0]

	if(processFlag == 1) {
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <callGNSS+0xc4>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d11d      	bne.n	800071e <callGNSS+0x8e>
		Delimiter(GNSS_temp, ',', 3, 80, latTemp);
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <callGNSS+0xc8>)
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2350      	movs	r3, #80	; 0x50
 80006e8:	2203      	movs	r2, #3
 80006ea:	212c      	movs	r1, #44	; 0x2c
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <callGNSS+0xc0>)
 80006ee:	f001 f9c6 	bl	8001a7e <Delimiter>
		Delimiter(GNSS_temp, ',', 5, 80, lonTemp);
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <callGNSS+0xcc>)
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2350      	movs	r3, #80	; 0x50
 80006f8:	2205      	movs	r2, #5
 80006fa:	212c      	movs	r1, #44	; 0x2c
 80006fc:	4814      	ldr	r0, [pc, #80]	; (8000750 <callGNSS+0xc0>)
 80006fe:	f001 f9be 	bl	8001a7e <Delimiter>

//		sprintf((char *)latTemp, "%d.%d",atoi((char *)latTemp)/100, atoi((char *)latTemp)%100);
//		sprintf((char *)lonTemp, "%d.%d",atoi((char *)lonTemp)/100, atoi((char *)lonTemp)%100);

		NMEAdecode((char *)latTemp, (char *)latTemp, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	4914      	ldr	r1, [pc, #80]	; (8000758 <callGNSS+0xc8>)
 8000706:	4814      	ldr	r0, [pc, #80]	; (8000758 <callGNSS+0xc8>)
 8000708:	f000 f830 	bl	800076c <NMEAdecode>
		NMEAdecode((char *)lonTemp, (char *)lonTemp, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	4913      	ldr	r1, [pc, #76]	; (800075c <callGNSS+0xcc>)
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <callGNSS+0xcc>)
 8000712:	f000 f82b 	bl	800076c <NMEAdecode>

		returnValue = 1;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <callGNSS+0xd0>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	e002      	b.n	8000724 <callGNSS+0x94>
	}else {
		returnValue = 2;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <callGNSS+0xd0>)
 8000720:	2202      	movs	r2, #2
 8000722:	701a      	strb	r2, [r3, #0]
	}

	SendCMD_LTE((char *) "AT+QGPSCFG=\"outport\",\"none\"\r\n");
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <callGNSS+0xd4>)
 8000726:	f000 ff31 	bl	800158c <SendCMD_LTE>
	while(findTarget(lteComm_MainBuff, "OK") != 1);
 800072a:	bf00      	nop
 800072c:	490e      	ldr	r1, [pc, #56]	; (8000768 <callGNSS+0xd8>)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <callGNSS+0xb4>)
 8000730:	f000 ffa2 	bl	8001678 <findTarget>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d1f8      	bne.n	800072c <callGNSS+0x9c>

	return returnValue;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <callGNSS+0xd0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200008b0 	.word	0x200008b0
 8000748:	0800b74c 	.word	0x0800b74c
 800074c:	0800b770 	.word	0x0800b770
 8000750:	20000180 	.word	0x20000180
 8000754:	20000220 	.word	0x20000220
 8000758:	20000200 	.word	0x20000200
 800075c:	20000210 	.word	0x20000210
 8000760:	20000221 	.word	0x20000221
 8000764:	0800b778 	.word	0x0800b778
 8000768:	0800b798 	.word	0x0800b798

0800076c <NMEAdecode>:


void NMEAdecode(const char* nmeaIn, char* out, unsigned char isLat) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	4613      	mov	r3, r2
 8000778:	71fb      	strb	r3, [r7, #7]
	int nmeaInt = atoi(nmeaIn);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f00a fa8a 	bl	800ac94 <atoi>
 8000780:	6278      	str	r0, [r7, #36]	; 0x24

	int degrees = nmeaInt/100;
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	4a26      	ldr	r2, [pc, #152]	; (8000820 <NMEAdecode+0xb4>)
 8000786:	fb82 1203 	smull	r1, r2, r2, r3
 800078a:	1152      	asrs	r2, r2, #5
 800078c:	17db      	asrs	r3, r3, #31
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	623b      	str	r3, [r7, #32]
	int minutes = nmeaInt - degrees * 100;
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800079e:	4413      	add	r3, r2
 80007a0:	61fb      	str	r3, [r7, #28]
	int decMin = (minutes * 10000) / 6000;
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007a8:	fb02 f303 	mul.w	r3, r2, r3
 80007ac:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <NMEAdecode+0xb8>)
 80007ae:	fb82 1203 	smull	r1, r2, r2, r3
 80007b2:	11d2      	asrs	r2, r2, #7
 80007b4:	17db      	asrs	r3, r3, #31
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	61bb      	str	r3, [r7, #24]

	int ddmmInt = degrees * 100 + decMin;
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	2264      	movs	r2, #100	; 0x64
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	69ba      	ldr	r2, [r7, #24]
 80007c4:	4413      	add	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]

	if(isLat == 1) {
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d105      	bne.n	80007da <NMEAdecode+0x6e>
		memset(latTemp, 0x00, sizeof(latTemp));
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <NMEAdecode+0xbc>)
 80007d4:	f00a fa9a 	bl	800ad0c <memset>
 80007d8:	e004      	b.n	80007e4 <NMEAdecode+0x78>
	}else {
		memset(lonTemp, 0x00, sizeof(lonTemp));
 80007da:	2210      	movs	r2, #16
 80007dc:	2100      	movs	r1, #0
 80007de:	4813      	ldr	r0, [pc, #76]	; (800082c <NMEAdecode+0xc0>)
 80007e0:	f00a fa94 	bl	800ad0c <memset>
	}

	sprintf(out, "%d.%04d", ddmmInt/100, ddmmInt%10000);
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <NMEAdecode+0xb4>)
 80007e8:	fb82 1203 	smull	r1, r2, r2, r3
 80007ec:	1152      	asrs	r2, r2, #5
 80007ee:	17db      	asrs	r3, r3, #31
 80007f0:	1ad0      	subs	r0, r2, r3
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <NMEAdecode+0xc4>)
 80007f6:	fb82 1203 	smull	r1, r2, r2, r3
 80007fa:	1311      	asrs	r1, r2, #12
 80007fc:	17da      	asrs	r2, r3, #31
 80007fe:	1a8a      	subs	r2, r1, r2
 8000800:	f242 7110 	movw	r1, #10000	; 0x2710
 8000804:	fb01 f202 	mul.w	r2, r1, r2
 8000808:	1a9a      	subs	r2, r3, r2
 800080a:	4613      	mov	r3, r2
 800080c:	4602      	mov	r2, r0
 800080e:	4909      	ldr	r1, [pc, #36]	; (8000834 <NMEAdecode+0xc8>)
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f00a fa83 	bl	800ad1c <siprintf>
}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	51eb851f 	.word	0x51eb851f
 8000824:	057619f1 	.word	0x057619f1
 8000828:	20000200 	.word	0x20000200
 800082c:	20000210 	.word	0x20000210
 8000830:	68db8bad 	.word	0x68db8bad
 8000834:	0800b79c 	.word	0x0800b79c

08000838 <clearText_Temp>:





void clearText_Temp(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	memset(TextTemp, 0x00, sizeof(TextTemp));
 800083c:	227d      	movs	r2, #125	; 0x7d
 800083e:	2100      	movs	r1, #0
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <clearText_Temp+0x14>)
 8000842:	f00a fa63 	bl	800ad0c <memset>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000224 	.word	0x20000224

08000850 <clearLTE_Temp>:

void clearLTE_Temp(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	2100      	movs	r1, #0
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <clearLTE_Temp+0x14>)
 800085a:	f00a fa57 	bl	800ad0c <memset>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200008b0 	.word	0x200008b0

08000868 <initLTE>:



void initLTE(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	SerialDebug("[MCU] -> start initialize LTE module\r\n");
 800086e:	485b      	ldr	r0, [pc, #364]	; (80009dc <initLTE+0x174>)
 8000870:	f000 fe62 	bl	8001538 <SerialDebug>

	for(unsigned char countSeq = 0; countSeq < 7; countSeq++) {
 8000874:	2300      	movs	r3, #0
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	e0a7      	b.n	80009ca <initLTE+0x162>

		switch(countSeq) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b06      	cmp	r3, #6
 800087e:	d834      	bhi.n	80008ea <initLTE+0x82>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <initLTE+0x20>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	080008a5 	.word	0x080008a5
 800088c:	080008af 	.word	0x080008af
 8000890:	080008b9 	.word	0x080008b9
 8000894:	080008c3 	.word	0x080008c3
 8000898:	080008cd 	.word	0x080008cd
 800089c:	080008d7 	.word	0x080008d7
 80008a0:	080008e1 	.word	0x080008e1
			case 0 :	// Turn off echo
				sprintf(TextTemp, "ATE0\r\n");
 80008a4:	494e      	ldr	r1, [pc, #312]	; (80009e0 <initLTE+0x178>)
 80008a6:	484f      	ldr	r0, [pc, #316]	; (80009e4 <initLTE+0x17c>)
 80008a8:	f00a fa38 	bl	800ad1c <siprintf>
				break;
 80008ac:	e01d      	b.n	80008ea <initLTE+0x82>

			case 1 :
				sprintf(TextTemp, "AT&D1\r\n");
 80008ae:	494e      	ldr	r1, [pc, #312]	; (80009e8 <initLTE+0x180>)
 80008b0:	484c      	ldr	r0, [pc, #304]	; (80009e4 <initLTE+0x17c>)
 80008b2:	f00a fa33 	bl	800ad1c <siprintf>
				break;
 80008b6:	e018      	b.n	80008ea <initLTE+0x82>

			case 2 :
				sprintf(TextTemp, "AT+QGPSEND\r\n");
 80008b8:	494c      	ldr	r1, [pc, #304]	; (80009ec <initLTE+0x184>)
 80008ba:	484a      	ldr	r0, [pc, #296]	; (80009e4 <initLTE+0x17c>)
 80008bc:	f00a fa2e 	bl	800ad1c <siprintf>
				break;
 80008c0:	e013      	b.n	80008ea <initLTE+0x82>

			case 3 :
				sprintf(TextTemp, "AT+QGPSCFG=\"outport\",\"none\"\r\n");
 80008c2:	494b      	ldr	r1, [pc, #300]	; (80009f0 <initLTE+0x188>)
 80008c4:	4847      	ldr	r0, [pc, #284]	; (80009e4 <initLTE+0x17c>)
 80008c6:	f00a fa29 	bl	800ad1c <siprintf>
				break;
 80008ca:	e00e      	b.n	80008ea <initLTE+0x82>

			case 4 :
				sprintf(TextTemp, "AT+QGPSCFG=\"nmeasrc\",1\r\n");
 80008cc:	4949      	ldr	r1, [pc, #292]	; (80009f4 <initLTE+0x18c>)
 80008ce:	4845      	ldr	r0, [pc, #276]	; (80009e4 <initLTE+0x17c>)
 80008d0:	f00a fa24 	bl	800ad1c <siprintf>
				break;
 80008d4:	e009      	b.n	80008ea <initLTE+0x82>

			case 5 :
				sprintf(TextTemp, "AT+QGPSCFG=\"gpsnmeatype\",2\r\n");
 80008d6:	4948      	ldr	r1, [pc, #288]	; (80009f8 <initLTE+0x190>)
 80008d8:	4842      	ldr	r0, [pc, #264]	; (80009e4 <initLTE+0x17c>)
 80008da:	f00a fa1f 	bl	800ad1c <siprintf>
				break;
 80008de:	e004      	b.n	80008ea <initLTE+0x82>

			case 6 :
				sprintf(TextTemp, "AT+QGPS=1\r\n");
 80008e0:	4946      	ldr	r1, [pc, #280]	; (80009fc <initLTE+0x194>)
 80008e2:	4840      	ldr	r0, [pc, #256]	; (80009e4 <initLTE+0x17c>)
 80008e4:	f00a fa1a 	bl	800ad1c <siprintf>
				break;
 80008e8:	bf00      	nop

		}

		SerialDebug((char *)TextTemp);
 80008ea:	483e      	ldr	r0, [pc, #248]	; (80009e4 <initLTE+0x17c>)
 80008ec:	f000 fe24 	bl	8001538 <SerialDebug>
		SendCMD_LTE((char *)TextTemp);	// Sned CMD
 80008f0:	483c      	ldr	r0, [pc, #240]	; (80009e4 <initLTE+0x17c>)
 80008f2:	f000 fe4b 	bl	800158c <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 80008f6:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <initLTE+0x198>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80008fc:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <initLTE+0x19c>)
 80008fe:	881a      	ldrh	r2, [r3, #0]
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <initLTE+0x19c>)
 8000902:	805a      	strh	r2, [r3, #2]

		while(sysFlag.LTE_CMD_Send == 1) {
 8000904:	e05a      	b.n	80009bc <initLTE+0x154>

			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8000906:	4940      	ldr	r1, [pc, #256]	; (8000a08 <initLTE+0x1a0>)
 8000908:	4840      	ldr	r0, [pc, #256]	; (8000a0c <initLTE+0x1a4>)
 800090a:	f000 feb5 	bl	8001678 <findTarget>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d10e      	bne.n	8000932 <initLTE+0xca>
				SerialDebug("[LTE] -> OK\r\n");
 8000914:	483e      	ldr	r0, [pc, #248]	; (8000a10 <initLTE+0x1a8>)
 8000916:	f000 fe0f 	bl	8001538 <SerialDebug>

				sysFlag.LTE_CMD_Send = 0;
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <initLTE+0x198>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000920:	f7ff ff96 	bl	8000850 <clearLTE_Temp>
				clearText_Temp();
 8000924:	f7ff ff88 	bl	8000838 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <initLTE+0x19c>)
 800092a:	881a      	ldrh	r2, [r3, #0]
 800092c:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <initLTE+0x19c>)
 800092e:	805a      	strh	r2, [r3, #2]
 8000930:	e044      	b.n	80009bc <initLTE+0x154>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8000932:	4938      	ldr	r1, [pc, #224]	; (8000a14 <initLTE+0x1ac>)
 8000934:	4835      	ldr	r0, [pc, #212]	; (8000a0c <initLTE+0x1a4>)
 8000936:	f000 fe9f 	bl	8001678 <findTarget>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d122      	bne.n	8000986 <initLTE+0x11e>
				SerialDebug("[LTE] -> ");
 8000940:	4835      	ldr	r0, [pc, #212]	; (8000a18 <initLTE+0x1b0>)
 8000942:	f000 fdf9 	bl	8001538 <SerialDebug>
				SerialDebug((char *)lteComm_MainBuff);
 8000946:	4831      	ldr	r0, [pc, #196]	; (8000a0c <initLTE+0x1a4>)
 8000948:	f000 fdf6 	bl	8001538 <SerialDebug>

				// Case 3 : Disable GNSS fail -> ignore error 505
				if(countSeq == 2 && findTarget(lteComm_MainBuff, "505") == 1) {
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d10a      	bne.n	8000968 <initLTE+0x100>
 8000952:	4932      	ldr	r1, [pc, #200]	; (8000a1c <initLTE+0x1b4>)
 8000954:	482d      	ldr	r0, [pc, #180]	; (8000a0c <initLTE+0x1a4>)
 8000956:	f000 fe8f 	bl	8001678 <findTarget>
 800095a:	4603      	mov	r3, r0
 800095c:	2b01      	cmp	r3, #1
 800095e:	d103      	bne.n	8000968 <initLTE+0x100>
					sysFlag.LTE_INIT_ERROR = 0;
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <initLTE+0x198>)
 8000962:	2200      	movs	r2, #0
 8000964:	705a      	strb	r2, [r3, #1]
 8000966:	e002      	b.n	800096e <initLTE+0x106>
				}else {
					sysFlag.LTE_INIT_ERROR = 1;
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <initLTE+0x198>)
 800096a:	2201      	movs	r2, #1
 800096c:	705a      	strb	r2, [r3, #1]
				}

				sysFlag.LTE_CMD_Send = 0;
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <initLTE+0x198>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000974:	f7ff ff6c 	bl	8000850 <clearLTE_Temp>
				clearText_Temp();
 8000978:	f7ff ff5e 	bl	8000838 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <initLTE+0x19c>)
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <initLTE+0x19c>)
 8000982:	805a      	strh	r2, [r3, #2]
 8000984:	e01a      	b.n	80009bc <initLTE+0x154>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <initLTE+0x19c>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <initLTE+0x19c>)
 800098e:	885b      	ldrh	r3, [r3, #2]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <initLTE+0x19c>)
 8000994:	8952      	ldrh	r2, [r2, #10]
 8000996:	4293      	cmp	r3, r2
 8000998:	db10      	blt.n	80009bc <initLTE+0x154>
				SerialDebug("[MCU] -> LTE TIME OUT\r\n");
 800099a:	4821      	ldr	r0, [pc, #132]	; (8000a20 <initLTE+0x1b8>)
 800099c:	f000 fdcc 	bl	8001538 <SerialDebug>
				sysFlag.LTE_INIT_ERROR = 1;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <initLTE+0x198>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	705a      	strb	r2, [r3, #1]
				sysFlag.LTE_CMD_Send = 0;
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <initLTE+0x198>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80009ac:	f7ff ff50 	bl	8000850 <clearLTE_Temp>
				clearText_Temp();
 80009b0:	f7ff ff42 	bl	8000838 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <initLTE+0x19c>)
 80009b6:	881a      	ldrh	r2, [r3, #0]
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <initLTE+0x19c>)
 80009ba:	805a      	strh	r2, [r3, #2]
		while(sysFlag.LTE_CMD_Send == 1) {
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <initLTE+0x198>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d0a0      	beq.n	8000906 <initLTE+0x9e>
	for(unsigned char countSeq = 0; countSeq < 7; countSeq++) {
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	3301      	adds	r3, #1
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b06      	cmp	r3, #6
 80009ce:	f67f af54 	bls.w	800087a <initLTE+0x12>
			}
		}
	}
}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	0800b7a4 	.word	0x0800b7a4
 80009e0:	0800b7cc 	.word	0x0800b7cc
 80009e4:	20000224 	.word	0x20000224
 80009e8:	0800b7d4 	.word	0x0800b7d4
 80009ec:	0800b7dc 	.word	0x0800b7dc
 80009f0:	0800b7ec 	.word	0x0800b7ec
 80009f4:	0800b80c 	.word	0x0800b80c
 80009f8:	0800b828 	.word	0x0800b828
 80009fc:	0800b848 	.word	0x0800b848
 8000a00:	20000b58 	.word	0x20000b58
 8000a04:	20000b4c 	.word	0x20000b4c
 8000a08:	0800b854 	.word	0x0800b854
 8000a0c:	200008b0 	.word	0x200008b0
 8000a10:	0800b858 	.word	0x0800b858
 8000a14:	0800b868 	.word	0x0800b868
 8000a18:	0800b870 	.word	0x0800b870
 8000a1c:	0800b87c 	.word	0x0800b87c
 8000a20:	0800b880 	.word	0x0800b880

08000a24 <SHUTDOWN_LTE>:
/*
 * Return value
 * 			1 - done
 * 			2 - error/time out
 */
unsigned char SHUTDOWN_LTE(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	SendCMD_LTE("AT+QPOWD\r\n");
 8000a28:	4819      	ldr	r0, [pc, #100]	; (8000a90 <SHUTDOWN_LTE+0x6c>)
 8000a2a:	f000 fdaf 	bl	800158c <SendCMD_LTE>
	globalSnedFlag = 1;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <SHUTDOWN_LTE+0x70>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <SHUTDOWN_LTE+0x74>)
 8000a36:	881a      	ldrh	r2, [r3, #0]
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <SHUTDOWN_LTE+0x74>)
 8000a3a:	805a      	strh	r2, [r3, #2]

	// reset counter
	if(sysCounter.main_ms_counter == 0) {
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <SHUTDOWN_LTE+0x74>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d11f      	bne.n	8000a84 <SHUTDOWN_LTE+0x60>
		sysCounter.prev_LTEtimeout = 0;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <SHUTDOWN_LTE+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	805a      	strh	r2, [r3, #2]
	}

	while(globalSnedFlag == 1) {
 8000a4a:	e01b      	b.n	8000a84 <SHUTDOWN_LTE+0x60>
		while(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
			globalSnedFlag = 0;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <SHUTDOWN_LTE+0x70>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
			return 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e01a      	b.n	8000a8c <SHUTDOWN_LTE+0x68>
		while(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
 8000a56:	bf00      	nop
 8000a58:	4910      	ldr	r1, [pc, #64]	; (8000a9c <SHUTDOWN_LTE+0x78>)
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <SHUTDOWN_LTE+0x7c>)
 8000a5c:	f000 fe0c 	bl	8001678 <findTarget>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d0f2      	beq.n	8000a4c <SHUTDOWN_LTE+0x28>
		}
		// Time out
		if((sysCounter.main_ms_counter - sysCounter.prev_ERRORtime) >= 5000) {
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <SHUTDOWN_LTE+0x74>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <SHUTDOWN_LTE+0x74>)
 8000a6e:	889b      	ldrh	r3, [r3, #4]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a76:	4293      	cmp	r3, r2
 8000a78:	dd04      	ble.n	8000a84 <SHUTDOWN_LTE+0x60>
			globalSnedFlag = 0;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SHUTDOWN_LTE+0x70>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
			return 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	e003      	b.n	8000a8c <SHUTDOWN_LTE+0x68>
	while(globalSnedFlag == 1) {
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <SHUTDOWN_LTE+0x70>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d0e4      	beq.n	8000a56 <SHUTDOWN_LTE+0x32>
		}
	}
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	0800b898 	.word	0x0800b898
 8000a94:	200002a1 	.word	0x200002a1
 8000a98:	20000b4c 	.word	0x20000b4c
 8000a9c:	0800b8a4 	.word	0x0800b8a4
 8000aa0:	200008b0 	.word	0x200008b0

08000aa4 <clearText_net_Temp>:
unsigned char Error = 0;	// 0 = No error | > 1 Error

char HTTP_URL_Temp[350];	// URL length max 350 byte


void clearText_net_Temp(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	memset(TextNetTemp, 0x00, sizeof(TextNetTemp));
 8000aa8:	227d      	movs	r2, #125	; 0x7d
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <clearText_net_Temp+0x14>)
 8000aae:	f00a f92d 	bl	800ad0c <memset>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002f0 	.word	0x200002f0

08000abc <addZero>:


// Fix single digit to 2 digit
void addZero(char* in, char* out) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	temp = atoi(in);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f00a f8e4 	bl	800ac94 <atoi>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <addZero+0x3c>)
 8000ad0:	6013      	str	r3, [r2, #0]

    if(temp < 10){
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <addZero+0x3c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b09      	cmp	r3, #9
 8000ad8:	dc07      	bgt.n	8000aea <addZero+0x2e>
        sprintf(out, "0%d", temp);
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <addZero+0x3c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4906      	ldr	r1, [pc, #24]	; (8000afc <addZero+0x40>)
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f00a f91a 	bl	800ad1c <siprintf>
    }else{
        out = in;
    }
}
 8000ae8:	e001      	b.n	8000aee <addZero+0x32>
        out = in;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	603b      	str	r3, [r7, #0]
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200002a4 	.word	0x200002a4
 8000afc:	0800b8b4 	.word	0x0800b8b4

08000b00 <AckInternet>:


unsigned char AckInternet(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

	SerialDebug("[MCU] -> start active internet conn.\r\n");
 8000b06:	4851      	ldr	r0, [pc, #324]	; (8000c4c <AckInternet+0x14c>)
 8000b08:	f000 fd16 	bl	8001538 <SerialDebug>

	for(unsigned char countSeq = 0; countSeq < 4; countSeq++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	e091      	b.n	8000c36 <AckInternet+0x136>
		switch(countSeq) {
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d81f      	bhi.n	8000b58 <AckInternet+0x58>
 8000b18:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <AckInternet+0x20>)
 8000b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1e:	bf00      	nop
 8000b20:	08000b31 	.word	0x08000b31
 8000b24:	08000b3b 	.word	0x08000b3b
 8000b28:	08000b45 	.word	0x08000b45
 8000b2c:	08000b4f 	.word	0x08000b4f
			case 0 :
				sprintf(TextNetTemp, "AT+QICSGP=1,1,\"INTERNET\",\"\",\"\",1\r\n");
 8000b30:	4947      	ldr	r1, [pc, #284]	; (8000c50 <AckInternet+0x150>)
 8000b32:	4848      	ldr	r0, [pc, #288]	; (8000c54 <AckInternet+0x154>)
 8000b34:	f00a f8f2 	bl	800ad1c <siprintf>
				break;
 8000b38:	e00e      	b.n	8000b58 <AckInternet+0x58>

			case 1 :
				sprintf(TextNetTemp, "AT+QIACT=1\r\n");
 8000b3a:	4947      	ldr	r1, [pc, #284]	; (8000c58 <AckInternet+0x158>)
 8000b3c:	4845      	ldr	r0, [pc, #276]	; (8000c54 <AckInternet+0x154>)
 8000b3e:	f00a f8ed 	bl	800ad1c <siprintf>
				break;
 8000b42:	e009      	b.n	8000b58 <AckInternet+0x58>

			case 2 :
				sprintf(TextNetTemp, "AT+QIACT?\r\n");
 8000b44:	4945      	ldr	r1, [pc, #276]	; (8000c5c <AckInternet+0x15c>)
 8000b46:	4843      	ldr	r0, [pc, #268]	; (8000c54 <AckInternet+0x154>)
 8000b48:	f00a f8e8 	bl	800ad1c <siprintf>
				break;
 8000b4c:	e004      	b.n	8000b58 <AckInternet+0x58>

			case 3 :
				sprintf(TextNetTemp, "AT+QIDNSCFG=1,\"8.8.8.8\",\"1.1.1.1\"\r\n");
 8000b4e:	4944      	ldr	r1, [pc, #272]	; (8000c60 <AckInternet+0x160>)
 8000b50:	4840      	ldr	r0, [pc, #256]	; (8000c54 <AckInternet+0x154>)
 8000b52:	f00a f8e3 	bl	800ad1c <siprintf>
				break;
 8000b56:	bf00      	nop
		}

		SerialDebug((char *) TextNetTemp);
 8000b58:	483e      	ldr	r0, [pc, #248]	; (8000c54 <AckInternet+0x154>)
 8000b5a:	f000 fced 	bl	8001538 <SerialDebug>
		SendCMD_LTE((char *) TextNetTemp);	// Sned CMD
 8000b5e:	483d      	ldr	r0, [pc, #244]	; (8000c54 <AckInternet+0x154>)
 8000b60:	f000 fd14 	bl	800158c <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 8000b64:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <AckInternet+0x164>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <AckInternet+0x168>)
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <AckInternet+0x168>)
 8000b70:	805a      	strh	r2, [r3, #2]


		while(sysFlag.LTE_CMD_Send == 1) {
 8000b72:	e059      	b.n	8000c28 <AckInternet+0x128>

			// Reset counter
			if(sysCounter.main_ms_counter == 0) {
 8000b74:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <AckInternet+0x168>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <AckInternet+0x82>
				sysCounter.prev_LTEtimeout = 0;
 8000b7c:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <AckInternet+0x168>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	805a      	strh	r2, [r3, #2]
			}

			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8000b82:	493a      	ldr	r1, [pc, #232]	; (8000c6c <AckInternet+0x16c>)
 8000b84:	483a      	ldr	r0, [pc, #232]	; (8000c70 <AckInternet+0x170>)
 8000b86:	f000 fd77 	bl	8001678 <findTarget>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d10e      	bne.n	8000bae <AckInternet+0xae>
				SerialDebug("[LTE] -> OK\r\n");
 8000b90:	4838      	ldr	r0, [pc, #224]	; (8000c74 <AckInternet+0x174>)
 8000b92:	f000 fcd1 	bl	8001538 <SerialDebug>

				sysFlag.LTE_CMD_Send = 0;
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <AckInternet+0x164>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000b9c:	f7ff fe58 	bl	8000850 <clearLTE_Temp>
				clearText_net_Temp();
 8000ba0:	f7ff ff80 	bl	8000aa4 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <AckInternet+0x168>)
 8000ba6:	881a      	ldrh	r2, [r3, #0]
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <AckInternet+0x168>)
 8000baa:	805a      	strh	r2, [r3, #2]
 8000bac:	e03c      	b.n	8000c28 <AckInternet+0x128>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8000bae:	4932      	ldr	r1, [pc, #200]	; (8000c78 <AckInternet+0x178>)
 8000bb0:	482f      	ldr	r0, [pc, #188]	; (8000c70 <AckInternet+0x170>)
 8000bb2:	f000 fd61 	bl	8001678 <findTarget>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d117      	bne.n	8000bec <AckInternet+0xec>
				SerialDebug("[LTE] -> ");
 8000bbc:	482f      	ldr	r0, [pc, #188]	; (8000c7c <AckInternet+0x17c>)
 8000bbe:	f000 fcbb 	bl	8001538 <SerialDebug>
				SerialDebug((char *)lteComm_MainBuff);
 8000bc2:	482b      	ldr	r0, [pc, #172]	; (8000c70 <AckInternet+0x170>)
 8000bc4:	f000 fcb8 	bl	8001538 <SerialDebug>

				Error++;
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <AckInternet+0x180>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <AckInternet+0x180>)
 8000bd2:	701a      	strb	r2, [r3, #0]

				sysFlag.LTE_CMD_Send = 0;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <AckInternet+0x164>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000bda:	f7ff fe39 	bl	8000850 <clearLTE_Temp>
				clearText_net_Temp();
 8000bde:	f7ff ff61 	bl	8000aa4 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <AckInternet+0x168>)
 8000be4:	881a      	ldrh	r2, [r3, #0]
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <AckInternet+0x168>)
 8000be8:	805a      	strh	r2, [r3, #2]
 8000bea:	e01d      	b.n	8000c28 <AckInternet+0x128>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <AckInternet+0x168>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <AckInternet+0x168>)
 8000bf4:	885b      	ldrh	r3, [r3, #2]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <AckInternet+0x168>)
 8000bfa:	8952      	ldrh	r2, [r2, #10]
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	db13      	blt.n	8000c28 <AckInternet+0x128>
				SerialDebug("[MCU] -> LTE TIME OUT\r\n");
 8000c00:	4820      	ldr	r0, [pc, #128]	; (8000c84 <AckInternet+0x184>)
 8000c02:	f000 fc99 	bl	8001538 <SerialDebug>
				Error++;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <AckInternet+0x180>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <AckInternet+0x180>)
 8000c10:	701a      	strb	r2, [r3, #0]
				sysFlag.LTE_CMD_Send = 0;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <AckInternet+0x164>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000c18:	f7ff fe1a 	bl	8000850 <clearLTE_Temp>
				clearText_net_Temp();
 8000c1c:	f7ff ff42 	bl	8000aa4 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <AckInternet+0x168>)
 8000c22:	881a      	ldrh	r2, [r3, #0]
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <AckInternet+0x168>)
 8000c26:	805a      	strh	r2, [r3, #2]
		while(sysFlag.LTE_CMD_Send == 1) {
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <AckInternet+0x164>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d0a1      	beq.n	8000b74 <AckInternet+0x74>
	for(unsigned char countSeq = 0; countSeq < 4; countSeq++) {
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3301      	adds	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	f67f af6a 	bls.w	8000b12 <AckInternet+0x12>
			}
		}
	}

	return Error;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <AckInternet+0x180>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	0800b8b8 	.word	0x0800b8b8
 8000c50:	0800b8e0 	.word	0x0800b8e0
 8000c54:	200002f0 	.word	0x200002f0
 8000c58:	0800b904 	.word	0x0800b904
 8000c5c:	0800b914 	.word	0x0800b914
 8000c60:	0800b920 	.word	0x0800b920
 8000c64:	20000b58 	.word	0x20000b58
 8000c68:	20000b4c 	.word	0x20000b4c
 8000c6c:	0800b944 	.word	0x0800b944
 8000c70:	200008b0 	.word	0x200008b0
 8000c74:	0800b948 	.word	0x0800b948
 8000c78:	0800b958 	.word	0x0800b958
 8000c7c:	0800b960 	.word	0x0800b960
 8000c80:	2000036d 	.word	0x2000036d
 8000c84:	0800b96c 	.word	0x0800b96c

08000c88 <httpSend>:


//send data to server
unsigned int httpSend(char* lat, char* lon, char* device_ID, char* time_s, char* date_s, char* x, char* y, char* z, char* humi, char* temp, char* eth, char* carbon, char* airflow, char* out) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b098      	sub	sp, #96	; 0x60
 8000c8c:	af14      	add	r7, sp, #80	; 0x50
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
	memset(HTTP_URL_Temp, 0x00, sizeof(HTTP_URL_Temp));
 8000c96:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	485c      	ldr	r0, [pc, #368]	; (8000e10 <httpSend+0x188>)
 8000c9e:	f00a f835 	bl	800ad0c <memset>
	memset(time_temp, 0x00, sizeof(time_temp));
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	485b      	ldr	r0, [pc, #364]	; (8000e14 <httpSend+0x18c>)
 8000ca8:	f00a f830 	bl	800ad0c <memset>
	memset(date_temp, 0x00, sizeof(date_temp));
 8000cac:	220c      	movs	r2, #12
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4859      	ldr	r0, [pc, #356]	; (8000e18 <httpSend+0x190>)
 8000cb2:	f00a f82b 	bl	800ad0c <memset>
	memset(hh, 0x00, sizeof(hh));
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4858      	ldr	r0, [pc, #352]	; (8000e1c <httpSend+0x194>)
 8000cbc:	f00a f826 	bl	800ad0c <memset>
	memset(mm, 0x00, sizeof(mm));
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4856      	ldr	r0, [pc, #344]	; (8000e20 <httpSend+0x198>)
 8000cc6:	f00a f821 	bl	800ad0c <memset>
	memset(ss, 0x00, sizeof(ss));
 8000cca:	2208      	movs	r2, #8
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4855      	ldr	r0, [pc, #340]	; (8000e24 <httpSend+0x19c>)
 8000cd0:	f00a f81c 	bl	800ad0c <memset>
	memset(YY, 0x00, sizeof(YY));
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4853      	ldr	r0, [pc, #332]	; (8000e28 <httpSend+0x1a0>)
 8000cda:	f00a f817 	bl	800ad0c <memset>
	memset(MM, 0x00, sizeof(MM));
 8000cde:	2208      	movs	r2, #8
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4852      	ldr	r0, [pc, #328]	; (8000e2c <httpSend+0x1a4>)
 8000ce4:	f00a f812 	bl	800ad0c <memset>
	memset(DD, 0x00, sizeof(DD));
 8000ce8:	2208      	movs	r2, #8
 8000cea:	2100      	movs	r1, #0
 8000cec:	4850      	ldr	r0, [pc, #320]	; (8000e30 <httpSend+0x1a8>)
 8000cee:	f00a f80d 	bl	800ad0c <memset>

	// Delimiter hot fix WuW
	sprintf(time_temp, "T:%s", time_s);
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	494f      	ldr	r1, [pc, #316]	; (8000e34 <httpSend+0x1ac>)
 8000cf6:	4847      	ldr	r0, [pc, #284]	; (8000e14 <httpSend+0x18c>)
 8000cf8:	f00a f810 	bl	800ad1c <siprintf>
	sprintf(date_temp, "D/%s", date_s);
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	494e      	ldr	r1, [pc, #312]	; (8000e38 <httpSend+0x1b0>)
 8000d00:	4845      	ldr	r0, [pc, #276]	; (8000e18 <httpSend+0x190>)
 8000d02:	f00a f80b 	bl	800ad1c <siprintf>


	// Delimit
	Delimiter(time_temp, ':', 1, 80, (unsigned char*) hh);
 8000d06:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <httpSend+0x194>)
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2350      	movs	r3, #80	; 0x50
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	213a      	movs	r1, #58	; 0x3a
 8000d10:	4840      	ldr	r0, [pc, #256]	; (8000e14 <httpSend+0x18c>)
 8000d12:	f000 feb4 	bl	8001a7e <Delimiter>
	Delimiter(time_temp, ':', 2, 80, (unsigned char*) mm);
 8000d16:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <httpSend+0x198>)
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2350      	movs	r3, #80	; 0x50
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	213a      	movs	r1, #58	; 0x3a
 8000d20:	483c      	ldr	r0, [pc, #240]	; (8000e14 <httpSend+0x18c>)
 8000d22:	f000 feac 	bl	8001a7e <Delimiter>
	Delimiter(time_temp, ':', 3, 80, (unsigned char*) ss);
 8000d26:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <httpSend+0x19c>)
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2350      	movs	r3, #80	; 0x50
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	213a      	movs	r1, #58	; 0x3a
 8000d30:	4838      	ldr	r0, [pc, #224]	; (8000e14 <httpSend+0x18c>)
 8000d32:	f000 fea4 	bl	8001a7e <Delimiter>

	Delimiter(date_temp, '/', 1, 80, (unsigned char*) DD);
 8000d36:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <httpSend+0x1a8>)
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2350      	movs	r3, #80	; 0x50
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	212f      	movs	r1, #47	; 0x2f
 8000d40:	4835      	ldr	r0, [pc, #212]	; (8000e18 <httpSend+0x190>)
 8000d42:	f000 fe9c 	bl	8001a7e <Delimiter>
	Delimiter(date_temp, '/', 2, 80, (unsigned char*) MM);
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <httpSend+0x1a4>)
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2350      	movs	r3, #80	; 0x50
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	212f      	movs	r1, #47	; 0x2f
 8000d50:	4831      	ldr	r0, [pc, #196]	; (8000e18 <httpSend+0x190>)
 8000d52:	f000 fe94 	bl	8001a7e <Delimiter>
	Delimiter(date_temp, '/', 3, 80, (unsigned char*) YY);
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <httpSend+0x1a0>)
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2350      	movs	r3, #80	; 0x50
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	212f      	movs	r1, #47	; 0x2f
 8000d60:	482d      	ldr	r0, [pc, #180]	; (8000e18 <httpSend+0x190>)
 8000d62:	f000 fe8c 	bl	8001a7e <Delimiter>
	// Check date and time to 2 digit
	addZero(hh, hh);
 8000d66:	492d      	ldr	r1, [pc, #180]	; (8000e1c <httpSend+0x194>)
 8000d68:	482c      	ldr	r0, [pc, #176]	; (8000e1c <httpSend+0x194>)
 8000d6a:	f7ff fea7 	bl	8000abc <addZero>
	addZero(mm, mm);
 8000d6e:	492c      	ldr	r1, [pc, #176]	; (8000e20 <httpSend+0x198>)
 8000d70:	482b      	ldr	r0, [pc, #172]	; (8000e20 <httpSend+0x198>)
 8000d72:	f7ff fea3 	bl	8000abc <addZero>
	addZero(ss, ss);
 8000d76:	492b      	ldr	r1, [pc, #172]	; (8000e24 <httpSend+0x19c>)
 8000d78:	482a      	ldr	r0, [pc, #168]	; (8000e24 <httpSend+0x19c>)
 8000d7a:	f7ff fe9f 	bl	8000abc <addZero>
	addZero(YY, YY);
 8000d7e:	492a      	ldr	r1, [pc, #168]	; (8000e28 <httpSend+0x1a0>)
 8000d80:	4829      	ldr	r0, [pc, #164]	; (8000e28 <httpSend+0x1a0>)
 8000d82:	f7ff fe9b 	bl	8000abc <addZero>
	addZero(MM, MM);
 8000d86:	4929      	ldr	r1, [pc, #164]	; (8000e2c <httpSend+0x1a4>)
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <httpSend+0x1a4>)
 8000d8a:	f7ff fe97 	bl	8000abc <addZero>
	addZero(DD, DD);
 8000d8e:	4928      	ldr	r1, [pc, #160]	; (8000e30 <httpSend+0x1a8>)
 8000d90:	4827      	ldr	r0, [pc, #156]	; (8000e30 <httpSend+0x1a8>)
 8000d92:	f7ff fe93 	bl	8000abc <addZero>

	sprintf(HTTP_URL_Temp, "http://rtls.lailab.online/api/ingest_sensor_data?token=%s&device_id=%s&time=%s&date=%s&device_name=%s&x=%s&y=%s&z=%s&humidity=%s&temp=%s&etha=%s&co2=%s&airflow=%s&symbol=Q&date_now=20%s-%s-%sT%s:%s:%s.000Z&lat=%s&lon=%s", TOKEN, device_ID, time_s, date_s, device_ID, x, y, z, humi, temp, eth, carbon, airflow, YY, MM, DD, hh, mm, ss, lat, lon);
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	9312      	str	r3, [sp, #72]	; 0x48
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	9311      	str	r3, [sp, #68]	; 0x44
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <httpSend+0x19c>)
 8000da0:	9310      	str	r3, [sp, #64]	; 0x40
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <httpSend+0x198>)
 8000da4:	930f      	str	r3, [sp, #60]	; 0x3c
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <httpSend+0x194>)
 8000da8:	930e      	str	r3, [sp, #56]	; 0x38
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <httpSend+0x1a8>)
 8000dac:	930d      	str	r3, [sp, #52]	; 0x34
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <httpSend+0x1a4>)
 8000db0:	930c      	str	r3, [sp, #48]	; 0x30
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <httpSend+0x1a0>)
 8000db4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db8:	930a      	str	r3, [sp, #40]	; 0x28
 8000dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8000dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc0:	9308      	str	r3, [sp, #32]
 8000dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc4:	9307      	str	r3, [sp, #28]
 8000dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc8:	9306      	str	r3, [sp, #24]
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	9305      	str	r3, [sp, #20]
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	9303      	str	r3, [sp, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <httpSend+0x1b4>)
 8000de6:	4916      	ldr	r1, [pc, #88]	; (8000e40 <httpSend+0x1b8>)
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <httpSend+0x188>)
 8000dea:	f009 ff97 	bl	800ad1c <siprintf>

	memcpy(out, HTTP_URL_Temp, sizeof(HTTP_URL_Temp));
 8000dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <httpSend+0x188>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	4611      	mov	r1, r2
 8000df6:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f009 ff78 	bl	800acf0 <memcpy>

	return strlen(HTTP_URL_Temp);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <httpSend+0x188>)
 8000e02:	f7ff f9ed 	bl	80001e0 <strlen>
 8000e06:	4603      	mov	r3, r0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000370 	.word	0x20000370
 8000e14:	200002a8 	.word	0x200002a8
 8000e18:	200002b4 	.word	0x200002b4
 8000e1c:	200002d8 	.word	0x200002d8
 8000e20:	200002e0 	.word	0x200002e0
 8000e24:	200002e8 	.word	0x200002e8
 8000e28:	200002d0 	.word	0x200002d0
 8000e2c:	200002c8 	.word	0x200002c8
 8000e30:	200002c0 	.word	0x200002c0
 8000e34:	0800b984 	.word	0x0800b984
 8000e38:	0800b98c 	.word	0x0800b98c
 8000e3c:	0800b994 	.word	0x0800b994
 8000e40:	0800b9bc 	.word	0x0800b9bc

08000e44 <main>:
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b08d      	sub	sp, #52	; 0x34
 8000e48:	af0a      	add	r7, sp, #40	; 0x28

  sysValinit();
 8000e4a:	f000 fb1f 	bl	800148c <sysValinit>
  sensorValInit();
 8000e4e:	f000 fb41 	bl	80014d4 <sensorValInit>

  HAL_Init();
 8000e52:	f001 f92f 	bl	80020b4 <HAL_Init>
  SystemClock_Config();
 8000e56:	f000 fc63 	bl	8001720 <SystemClock_Config>
  MX_GPIO_Init();
 8000e5a:	f000 fda1 	bl	80019a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e5e:	f000 fd69 	bl	8001934 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e62:	f000 fd13 	bl	800188c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e66:	f000 fd3b 	bl	80018e0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000e6a:	f009 fa03 	bl	800a274 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000e6e:	f000 fcbf 	bl	80017f0 <MX_TIM4_Init>


  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 8000e72:	488b      	ldr	r0, [pc, #556]	; (80010a0 <main+0x25c>)
 8000e74:	f003 ffbe 	bl	8004df4 <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8000e78:	22ff      	movs	r2, #255	; 0xff
 8000e7a:	498a      	ldr	r1, [pc, #552]	; (80010a4 <main+0x260>)
 8000e7c:	488a      	ldr	r0, [pc, #552]	; (80010a8 <main+0x264>)
 8000e7e:	f004 fc8e 	bl	800579e <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	4989      	ldr	r1, [pc, #548]	; (80010ac <main+0x268>)
 8000e86:	488a      	ldr	r0, [pc, #552]	; (80010b0 <main+0x26c>)
 8000e88:	f004 fc89 	bl	800579e <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);



  // INTERRUPT
  initEXIT();
 8000e8c:	f7ff fba0 	bl	80005d0 <initEXIT>
 *
 *  ===============================================================================
 */

  // Wait LTE module boot
  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);			// BUSY -> 1
 8000e90:	2201      	movs	r2, #1
 8000e92:	2120      	movs	r1, #32
 8000e94:	4887      	ldr	r0, [pc, #540]	; (80010b4 <main+0x270>)
 8000e96:	f002 f855 	bl	8002f44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ONLINE, GPIO_PIN_RESET);		// ONLINE 0
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2140      	movs	r1, #64	; 0x40
 8000e9e:	4885      	ldr	r0, [pc, #532]	; (80010b4 <main+0x270>)
 8000ea0:	f002 f850 	bl	8002f44 <HAL_GPIO_WritePin>
  while(sysCounter.main_ms_counter < 500);				// Wait MCU boot
 8000ea4:	bf00      	nop
 8000ea6:	4b84      	ldr	r3, [pc, #528]	; (80010b8 <main+0x274>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eae:	d3fa      	bcc.n	8000ea6 <main+0x62>
  // Initialize LTE module
  SerialDebug("[MCU] -> Wait LTE boot 30sec.\r\n");
 8000eb0:	4882      	ldr	r0, [pc, #520]	; (80010bc <main+0x278>)
 8000eb2:	f000 fb41 	bl	8001538 <SerialDebug>
  while(sysCounter.main_ms_counter < LTEbootTime);		// Wait LTE module boot
 8000eb6:	bf00      	nop
 8000eb8:	4b7f      	ldr	r3, [pc, #508]	; (80010b8 <main+0x274>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	f247 522f 	movw	r2, #29999	; 0x752f
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d9f9      	bls.n	8000eb8 <main+0x74>



  // Start init LTE module
  initLTE();
 8000ec4:	f7ff fcd0 	bl	8000868 <initLTE>
  AckInternet_ErrCode = AckInternet();
 8000ec8:	f7ff fe1a 	bl	8000b00 <AckInternet>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <main+0x27c>)
 8000ed2:	701a      	strb	r2, [r3, #0]



  AckInternet_flag = 1;
 8000ed4:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <main+0x280>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);		// BUSY -> 0
 8000eda:	2200      	movs	r2, #0
 8000edc:	2120      	movs	r1, #32
 8000ede:	4875      	ldr	r0, [pc, #468]	; (80010b4 <main+0x270>)
 8000ee0:	f002 f830 	bl	8002f44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	4872      	ldr	r0, [pc, #456]	; (80010b4 <main+0x270>)
 8000eea:	f002 f82b 	bl	8002f44 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f001 f952 	bl	8002198 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	486e      	ldr	r0, [pc, #440]	; (80010b4 <main+0x270>)
 8000efa:	f002 f823 	bl	8002f44 <HAL_GPIO_WritePin>


  while(1) {
	  // ErrorHandle
	  //Init error please check system
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8000efe:	e007      	b.n	8000f10 <main+0xcc>
		  HAL_GPIO_TogglePin(GPIOB, ERROR);
 8000f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f04:	486b      	ldr	r0, [pc, #428]	; (80010b4 <main+0x270>)
 8000f06:	f002 f836 	bl	8002f76 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8000f0a:	20fa      	movs	r0, #250	; 0xfa
 8000f0c:	f001 f944 	bl	8002198 <HAL_Delay>
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8000f10:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <main+0x284>)
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d0f3      	beq.n	8000f00 <main+0xbc>
	  }


	  // Reboot after 5 min.
	  while(sysFlag.LTE_ERROR == 1) {
 8000f18:	e040      	b.n	8000f9c <main+0x158>
		  if(sysCounter.main_ms_counter == 0) {
 8000f1a:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <main+0x274>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <main+0xe4>
			  sysCounter.rebootCount = 0;
 8000f22:	4b65      	ldr	r3, [pc, #404]	; (80010b8 <main+0x274>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	721a      	strb	r2, [r3, #8]
		  }
		  if((sysCounter.main_ms_counter - sysCounter.rebootCount) >= 60000) {
 8000f28:	4b63      	ldr	r3, [pc, #396]	; (80010b8 <main+0x274>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <main+0x274>)
 8000f30:	7a1b      	ldrb	r3, [r3, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	dd21      	ble.n	8000f80 <main+0x13c>
			  reboot_min_count++;
 8000f3c:	4b63      	ldr	r3, [pc, #396]	; (80010cc <main+0x288>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b61      	ldr	r3, [pc, #388]	; (80010cc <main+0x288>)
 8000f46:	701a      	strb	r2, [r3, #0]
			  sysCounter.rebootCount = sysCounter.main_ms_counter;
 8000f48:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <main+0x274>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <main+0x274>)
 8000f50:	721a      	strb	r2, [r3, #8]
		  }
		  while(reboot_min_count >= 5) {
 8000f52:	e015      	b.n	8000f80 <main+0x13c>
			  if(SHUTDOWN_LTE() == 1) {
 8000f54:	f7ff fd66 	bl	8000a24 <SHUTDOWN_LTE>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <main+0x126>
				  HAL_Delay(50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f001 f91a 	bl	8002198 <HAL_Delay>
				  HAL_NVIC_SystemReset();
 8000f64:	f001 fa57 	bl	8002416 <HAL_NVIC_SystemReset>
 8000f68:	e00a      	b.n	8000f80 <main+0x13c>
			  }else {
				  sysFlag.LTE_ERROR = 0;
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <main+0x284>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	709a      	strb	r2, [r3, #2]
				  sysFlag.LTE_INIT_ERROR = 1;
 8000f70:	4b55      	ldr	r3, [pc, #340]	; (80010c8 <main+0x284>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	705a      	strb	r2, [r3, #1]
				  sysCounter.rebootCount = sysCounter.main_ms_counter;
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <main+0x274>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <main+0x274>)
 8000f7e:	721a      	strb	r2, [r3, #8]
		  while(reboot_min_count >= 5) {
 8000f80:	4b52      	ldr	r3, [pc, #328]	; (80010cc <main+0x288>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d8e5      	bhi.n	8000f54 <main+0x110>
			  }
		  }

		  if(intterruptEvent_Flag == 1) {
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <main+0x28c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <main+0x158>
			  SendData_RS485((char*) "X");
 8000f90:	4850      	ldr	r0, [pc, #320]	; (80010d4 <main+0x290>)
 8000f92:	f000 fae7 	bl	8001564 <SendData_RS485>
			  intterruptEvent_Flag = 0;
 8000f96:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <main+0x28c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	  while(sysFlag.LTE_ERROR == 1) {
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <main+0x284>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d0ba      	beq.n	8000f1a <main+0xd6>
		  }
	  }


	  // Main task
	  if(AckInternet_flag == 1) {
 8000fa4:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <main+0x280>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d1b1      	bne.n	8000f10 <main+0xcc>

	  RS485Handle :
 8000fac:	bf00      	nop
		while(intterruptEvent_Flag == 1) {									// Get RTS Signal
 8000fae:	e25c      	b.n	800146a <main+0x626>
		  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);				    	// BUSY !!!!
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	483f      	ldr	r0, [pc, #252]	; (80010b4 <main+0x270>)
 8000fb6:	f001 ffc5 	bl	8002f44 <HAL_GPIO_WritePin>
		  SerialDebug("[MCU] -> Get RTS\r\n");
 8000fba:	4847      	ldr	r0, [pc, #284]	; (80010d8 <main+0x294>)
 8000fbc:	f000 fabc 	bl	8001538 <SerialDebug>
		  sensorValInit();													// Clear buffer
 8000fc0:	f000 fa88 	bl	80014d4 <sensorValInit>
		  memset(SENSOR.COMPID, 0x00, sizeof(SENSOR.COMPID));
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4844      	ldr	r0, [pc, #272]	; (80010dc <main+0x298>)
 8000fca:	f009 fe9f 	bl	800ad0c <memset>
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <main+0x29c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
		  memset(ENDBYTE, 0x00, sizeof(ENDBYTE));


		  // Call GPS
		  if(callGNSS() == 1) {
 8000fd4:	f7ff fb5c 	bl	8000690 <callGNSS>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d11b      	bne.n	8001016 <main+0x1d2>
			  SerialDebug((char *) "[MCU] -> CRC pass\r\n");
 8000fde:	4841      	ldr	r0, [pc, #260]	; (80010e4 <main+0x2a0>)
 8000fe0:	f000 faaa 	bl	8001538 <SerialDebug>
			  GNSS.lat[0] = '\0';
 8000fe4:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <main+0x2a4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
			  GNSS.lon[0] = '\0';
 8000fea:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <main+0x2a4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	741a      	strb	r2, [r3, #16]
			  memcpy(GNSS.lat, latTemp, sizeof(GNSS.lat));
 8000ff0:	4a3d      	ldr	r2, [pc, #244]	; (80010e8 <main+0x2a4>)
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <main+0x2a8>)
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	6859      	ldr	r1, [r3, #4]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			  memcpy(GNSS.lon, lonTemp, sizeof(GNSS.lon));
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <main+0x2a4>)
 8001002:	4a3b      	ldr	r2, [pc, #236]	; (80010f0 <main+0x2ac>)
 8001004:	f103 0410 	add.w	r4, r3, #16
 8001008:	4613      	mov	r3, r2
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	6859      	ldr	r1, [r3, #4]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001014:	e002      	b.n	800101c <main+0x1d8>
		  }else {
			  SerialDebug((char *) "[MCU] -> CRC fail\r\n");
 8001016:	4837      	ldr	r0, [pc, #220]	; (80010f4 <main+0x2b0>)
 8001018:	f000 fa8e 	bl	8001538 <SerialDebug>
		  }


		  // Generate pulse 5ms.

		  HAL_Delay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f001 f8bb 	bl	8002198 <HAL_Delay>
		  SerialDebug("[MCU] -> Send RDY\r\n");
 8001022:	4835      	ldr	r0, [pc, #212]	; (80010f8 <main+0x2b4>)
 8001024:	f000 fa88 	bl	8001538 <SerialDebug>
		  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	4821      	ldr	r0, [pc, #132]	; (80010b4 <main+0x270>)
 800102e:	f001 ff89 	bl	8002f44 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f001 f8b0 	bl	8002198 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	481d      	ldr	r0, [pc, #116]	; (80010b4 <main+0x270>)
 800103e:	f001 ff81 	bl	8002f44 <HAL_GPIO_WritePin>

		  SerialDebug("[MCU] -> Wait data\r\n");
 8001042:	482e      	ldr	r0, [pc, #184]	; (80010fc <main+0x2b8>)
 8001044:	f000 fa78 	bl	8001538 <SerialDebug>

		  // Wait DMA put data to buffer
		  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <main+0x274>)
 800104a:	881a      	ldrh	r2, [r3, #0]
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <main+0x274>)
 800104e:	80da      	strh	r2, [r3, #6]
		  HAL_Delay(5);
 8001050:	2005      	movs	r0, #5
 8001052:	f001 f8a1 	bl	8002198 <HAL_Delay>
		  while(*dataComm_mainBuff == '\0') {
 8001056:	e057      	b.n	8001108 <main+0x2c4>
			  // Timeout conditions
			  if(sysCounter.main_ms_counter == 0) {
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <main+0x274>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <main+0x222>
				  sysCounter.prev_msgTimeOut = 0;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <main+0x274>)
 8001062:	2200      	movs	r2, #0
 8001064:	80da      	strh	r2, [r3, #6]
			  }

			  if((sysCounter.main_ms_counter - sysCounter.prev_msgTimeOut) >= 1000) {
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <main+0x274>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <main+0x274>)
 800106e:	88db      	ldrh	r3, [r3, #6]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001076:	db47      	blt.n	8001108 <main+0x2c4>
				  SerialDebug("[RS485] -> Timeout\r\n");
 8001078:	4821      	ldr	r0, [pc, #132]	; (8001100 <main+0x2bc>)
 800107a:	f000 fa5d 	bl	8001538 <SerialDebug>
				  SendData_RS485((char*) "F");
 800107e:	4821      	ldr	r0, [pc, #132]	; (8001104 <main+0x2c0>)
 8001080:	f000 fa70 	bl	8001564 <SendData_RS485>
				  intterruptEvent_Flag = 0;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <main+0x28c>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2120      	movs	r1, #32
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <main+0x270>)
 8001090:	f001 ff58 	bl	8002f44 <HAL_GPIO_WritePin>
				  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <main+0x274>)
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <main+0x274>)
 800109a:	80da      	strh	r2, [r3, #6]
				  goto RS485Handle;
 800109c:	e787      	b.n	8000fae <main+0x16a>
 800109e:	bf00      	nop
 80010a0:	200009bc 	.word	0x200009bc
 80010a4:	20000730 	.word	0x20000730
 80010a8:	20000a48 	.word	0x20000a48
 80010ac:	200006b0 	.word	0x200006b0
 80010b0:	20000a04 	.word	0x20000a04
 80010b4:	40020400 	.word	0x40020400
 80010b8:	20000b4c 	.word	0x20000b4c
 80010bc:	0800bad0 	.word	0x0800bad0
 80010c0:	200009b9 	.word	0x200009b9
 80010c4:	200009ba 	.word	0x200009ba
 80010c8:	20000b58 	.word	0x20000b58
 80010cc:	200009bb 	.word	0x200009bb
 80010d0:	2000017c 	.word	0x2000017c
 80010d4:	0800baf0 	.word	0x0800baf0
 80010d8:	0800baf4 	.word	0x0800baf4
 80010dc:	20000b7c 	.word	0x20000b7c
 80010e0:	200009b8 	.word	0x200009b8
 80010e4:	0800bb08 	.word	0x0800bb08
 80010e8:	20000b5c 	.word	0x20000b5c
 80010ec:	20000200 	.word	0x20000200
 80010f0:	20000210 	.word	0x20000210
 80010f4:	0800bb1c 	.word	0x0800bb1c
 80010f8:	0800bb30 	.word	0x0800bb30
 80010fc:	0800bb44 	.word	0x0800bb44
 8001100:	0800bb5c 	.word	0x0800bb5c
 8001104:	0800bb74 	.word	0x0800bb74
		  while(*dataComm_mainBuff == '\0') {
 8001108:	4ba9      	ldr	r3, [pc, #676]	; (80013b0 <main+0x56c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0a3      	beq.n	8001058 <main+0x214>
			  }
		  }
		  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8001110:	4ba8      	ldr	r3, [pc, #672]	; (80013b4 <main+0x570>)
 8001112:	881a      	ldrh	r2, [r3, #0]
 8001114:	4ba7      	ldr	r3, [pc, #668]	; (80013b4 <main+0x570>)
 8001116:	80da      	strh	r2, [r3, #6]

		  // Check data is valid?
		  // frame 0 = frame 3 && frame 12 = 'Q'
		  Delimiter(dataComm_mainBuff, ',', 3, 80, (unsigned char*) SENSOR.COMPID);
 8001118:	4ba7      	ldr	r3, [pc, #668]	; (80013b8 <main+0x574>)
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2350      	movs	r3, #80	; 0x50
 800111e:	2203      	movs	r2, #3
 8001120:	212c      	movs	r1, #44	; 0x2c
 8001122:	48a3      	ldr	r0, [pc, #652]	; (80013b0 <main+0x56c>)
 8001124:	f000 fcab 	bl	8001a7e <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 12, 80, (unsigned char*) ENDBYTE);
 8001128:	4ba4      	ldr	r3, [pc, #656]	; (80013bc <main+0x578>)
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2350      	movs	r3, #80	; 0x50
 800112e:	220c      	movs	r2, #12
 8001130:	212c      	movs	r1, #44	; 0x2c
 8001132:	489f      	ldr	r0, [pc, #636]	; (80013b0 <main+0x56c>)
 8001134:	f000 fca3 	bl	8001a7e <Delimiter>

		  if(dataComm_mainBuff[0] == SENSOR.COMPID[0] && ENDBYTE[0] == 'Q') {
 8001138:	4b9d      	ldr	r3, [pc, #628]	; (80013b0 <main+0x56c>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	4b9e      	ldr	r3, [pc, #632]	; (80013b8 <main+0x574>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8181 	bne.w	8001448 <main+0x604>
 8001146:	4b9d      	ldr	r3, [pc, #628]	; (80013bc <main+0x578>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b51      	cmp	r3, #81	; 0x51
 800114c:	f040 817c 	bne.w	8001448 <main+0x604>
			  SerialDebug("[MCU] -> Data is valid\r\n");
 8001150:	489b      	ldr	r0, [pc, #620]	; (80013c0 <main+0x57c>)
 8001152:	f000 f9f1 	bl	8001538 <SerialDebug>

			  // Delimit data
			  Delimiter(dataComm_mainBuff, ',', 1, 80, (unsigned char*) SENSOR.timeStemp);
 8001156:	4b9b      	ldr	r3, [pc, #620]	; (80013c4 <main+0x580>)
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2350      	movs	r3, #80	; 0x50
 800115c:	2201      	movs	r2, #1
 800115e:	212c      	movs	r1, #44	; 0x2c
 8001160:	4893      	ldr	r0, [pc, #588]	; (80013b0 <main+0x56c>)
 8001162:	f000 fc8c 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 2, 80, (unsigned char*) SENSOR.dateStamp);
 8001166:	4b98      	ldr	r3, [pc, #608]	; (80013c8 <main+0x584>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2350      	movs	r3, #80	; 0x50
 800116c:	2202      	movs	r2, #2
 800116e:	212c      	movs	r1, #44	; 0x2c
 8001170:	488f      	ldr	r0, [pc, #572]	; (80013b0 <main+0x56c>)
 8001172:	f000 fc84 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 4, 80, (unsigned char*) SENSOR.X);
 8001176:	4b95      	ldr	r3, [pc, #596]	; (80013cc <main+0x588>)
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2350      	movs	r3, #80	; 0x50
 800117c:	2204      	movs	r2, #4
 800117e:	212c      	movs	r1, #44	; 0x2c
 8001180:	488b      	ldr	r0, [pc, #556]	; (80013b0 <main+0x56c>)
 8001182:	f000 fc7c 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 5, 80, (unsigned char*) SENSOR.Y);
 8001186:	4b92      	ldr	r3, [pc, #584]	; (80013d0 <main+0x58c>)
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2350      	movs	r3, #80	; 0x50
 800118c:	2205      	movs	r2, #5
 800118e:	212c      	movs	r1, #44	; 0x2c
 8001190:	4887      	ldr	r0, [pc, #540]	; (80013b0 <main+0x56c>)
 8001192:	f000 fc74 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 6, 80, (unsigned char*) SENSOR.Z);
 8001196:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <main+0x590>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2350      	movs	r3, #80	; 0x50
 800119c:	2206      	movs	r2, #6
 800119e:	212c      	movs	r1, #44	; 0x2c
 80011a0:	4883      	ldr	r0, [pc, #524]	; (80013b0 <main+0x56c>)
 80011a2:	f000 fc6c 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 7, 80, (unsigned char*) SENSOR.Huim);
 80011a6:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <main+0x594>)
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2350      	movs	r3, #80	; 0x50
 80011ac:	2207      	movs	r2, #7
 80011ae:	212c      	movs	r1, #44	; 0x2c
 80011b0:	487f      	ldr	r0, [pc, #508]	; (80013b0 <main+0x56c>)
 80011b2:	f000 fc64 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 8, 80, (unsigned char*) SENSOR.Temp);
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <main+0x598>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2350      	movs	r3, #80	; 0x50
 80011bc:	2208      	movs	r2, #8
 80011be:	212c      	movs	r1, #44	; 0x2c
 80011c0:	487b      	ldr	r0, [pc, #492]	; (80013b0 <main+0x56c>)
 80011c2:	f000 fc5c 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 9, 80, (unsigned char*) SENSOR.Alc);
 80011c6:	4b86      	ldr	r3, [pc, #536]	; (80013e0 <main+0x59c>)
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2350      	movs	r3, #80	; 0x50
 80011cc:	2209      	movs	r2, #9
 80011ce:	212c      	movs	r1, #44	; 0x2c
 80011d0:	4877      	ldr	r0, [pc, #476]	; (80013b0 <main+0x56c>)
 80011d2:	f000 fc54 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 10, 80, (unsigned char*) SENSOR.Carbon);
 80011d6:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <main+0x5a0>)
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2350      	movs	r3, #80	; 0x50
 80011dc:	220a      	movs	r2, #10
 80011de:	212c      	movs	r1, #44	; 0x2c
 80011e0:	4873      	ldr	r0, [pc, #460]	; (80013b0 <main+0x56c>)
 80011e2:	f000 fc4c 	bl	8001a7e <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 11, 80, (unsigned char*) SENSOR.AirFlow);
 80011e6:	4b80      	ldr	r3, [pc, #512]	; (80013e8 <main+0x5a4>)
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2350      	movs	r3, #80	; 0x50
 80011ec:	220b      	movs	r2, #11
 80011ee:	212c      	movs	r1, #44	; 0x2c
 80011f0:	486f      	ldr	r0, [pc, #444]	; (80013b0 <main+0x56c>)
 80011f2:	f000 fc44 	bl	8001a7e <Delimiter>


			  // Send data to server
			  HAL_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f000 ffce 	bl	8002198 <HAL_Delay>
			  memset(URL_temp, 0x00, sizeof(URL_temp));
 80011fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001200:	2100      	movs	r1, #0
 8001202:	487a      	ldr	r0, [pc, #488]	; (80013ec <main+0x5a8>)
 8001204:	f009 fd82 	bl	800ad0c <memset>
			  URL_len = httpSend(GNSS.lat, GNSS.lon, SENSOR.COMPID, SENSOR.timeStemp, SENSOR.dateStamp, SENSOR.X, SENSOR.Y, SENSOR.Z, SENSOR.Huim, SENSOR.Temp, SENSOR.Alc, SENSOR.Carbon, SENSOR.AirFlow, URL_temp);
 8001208:	4b78      	ldr	r3, [pc, #480]	; (80013ec <main+0x5a8>)
 800120a:	9309      	str	r3, [sp, #36]	; 0x24
 800120c:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <main+0x5a4>)
 800120e:	9308      	str	r3, [sp, #32]
 8001210:	4b74      	ldr	r3, [pc, #464]	; (80013e4 <main+0x5a0>)
 8001212:	9307      	str	r3, [sp, #28]
 8001214:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <main+0x59c>)
 8001216:	9306      	str	r3, [sp, #24]
 8001218:	4b70      	ldr	r3, [pc, #448]	; (80013dc <main+0x598>)
 800121a:	9305      	str	r3, [sp, #20]
 800121c:	4b6e      	ldr	r3, [pc, #440]	; (80013d8 <main+0x594>)
 800121e:	9304      	str	r3, [sp, #16]
 8001220:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <main+0x590>)
 8001222:	9303      	str	r3, [sp, #12]
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <main+0x58c>)
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <main+0x588>)
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <main+0x584>)
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4b64      	ldr	r3, [pc, #400]	; (80013c4 <main+0x580>)
 8001232:	4a61      	ldr	r2, [pc, #388]	; (80013b8 <main+0x574>)
 8001234:	496e      	ldr	r1, [pc, #440]	; (80013f0 <main+0x5ac>)
 8001236:	486f      	ldr	r0, [pc, #444]	; (80013f4 <main+0x5b0>)
 8001238:	f7ff fd26 	bl	8000c88 <httpSend>
 800123c:	4603      	mov	r3, r0
 800123e:	4a6e      	ldr	r2, [pc, #440]	; (80013f8 <main+0x5b4>)
 8001240:	6013      	str	r3, [r2, #0]

			  SerialDebug("[URL] -> ");
 8001242:	486e      	ldr	r0, [pc, #440]	; (80013fc <main+0x5b8>)
 8001244:	f000 f978 	bl	8001538 <SerialDebug>
			  SerialDebug(URL_temp);
 8001248:	4868      	ldr	r0, [pc, #416]	; (80013ec <main+0x5a8>)
 800124a:	f000 f975 	bl	8001538 <SerialDebug>
			  SerialDebug("\r\n");
 800124e:	486c      	ldr	r0, [pc, #432]	; (8001400 <main+0x5bc>)
 8001250:	f000 f972 	bl	8001538 <SerialDebug>

			  HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f000 ff9f 	bl	8002198 <HAL_Delay>

			  memset(textBuffer, 0x00, sizeof(textBuffer));
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	2100      	movs	r1, #0
 800125e:	4869      	ldr	r0, [pc, #420]	; (8001404 <main+0x5c0>)
 8001260:	f009 fd54 	bl	800ad0c <memset>
			  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8001264:	22ff      	movs	r2, #255	; 0xff
 8001266:	2100      	movs	r1, #0
 8001268:	4867      	ldr	r0, [pc, #412]	; (8001408 <main+0x5c4>)
 800126a:	f009 fd4f 	bl	800ad0c <memset>


			  for(unsigned char count = 0; count < 3; count++) {
 800126e:	2300      	movs	r3, #0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e098      	b.n	80013a6 <main+0x562>
				  switch(count) {
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d013      	beq.n	80012a2 <main+0x45e>
 800127a:	2b02      	cmp	r3, #2
 800127c:	dc1a      	bgt.n	80012b4 <main+0x470>
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <main+0x444>
 8001282:	2b01      	cmp	r3, #1
 8001284:	d008      	beq.n	8001298 <main+0x454>
 8001286:	e015      	b.n	80012b4 <main+0x470>
				  	  case 0 :
				  		  sprintf(textBuffer, "AT+QHTTPURL=%d,80\r\n", URL_len);
 8001288:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <main+0x5b4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	495f      	ldr	r1, [pc, #380]	; (800140c <main+0x5c8>)
 8001290:	485c      	ldr	r0, [pc, #368]	; (8001404 <main+0x5c0>)
 8001292:	f009 fd43 	bl	800ad1c <siprintf>
					  	  break;
 8001296:	e00d      	b.n	80012b4 <main+0x470>

				  	  case 1 :
				  		  sprintf(textBuffer, "AT+QHTTPPOST=1,60,60\r\n");
 8001298:	495d      	ldr	r1, [pc, #372]	; (8001410 <main+0x5cc>)
 800129a:	485a      	ldr	r0, [pc, #360]	; (8001404 <main+0x5c0>)
 800129c:	f009 fd3e 	bl	800ad1c <siprintf>
						  break;
 80012a0:	e008      	b.n	80012b4 <main+0x470>

				  	  case 2 :
				  		  HAL_Delay(3000);
 80012a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012a6:	f000 ff77 	bl	8002198 <HAL_Delay>
				  		  sprintf(textBuffer, "AT+QHTTPREAD=80\r\n");
 80012aa:	495a      	ldr	r1, [pc, #360]	; (8001414 <main+0x5d0>)
 80012ac:	4855      	ldr	r0, [pc, #340]	; (8001404 <main+0x5c0>)
 80012ae:	f009 fd35 	bl	800ad1c <siprintf>
				  		  break;
 80012b2:	bf00      	nop
				  }


				  SerialDebug((char *) textBuffer);
 80012b4:	4853      	ldr	r0, [pc, #332]	; (8001404 <main+0x5c0>)
 80012b6:	f000 f93f 	bl	8001538 <SerialDebug>
				  SerialDebug("\r\n");
 80012ba:	4851      	ldr	r0, [pc, #324]	; (8001400 <main+0x5bc>)
 80012bc:	f000 f93c 	bl	8001538 <SerialDebug>
				  SendCMD_LTE((char *) textBuffer);
 80012c0:	4850      	ldr	r0, [pc, #320]	; (8001404 <main+0x5c0>)
 80012c2:	f000 f963 	bl	800158c <SendCMD_LTE>
				  sendURL_flag = 1;
 80012c6:	4b54      	ldr	r3, [pc, #336]	; (8001418 <main+0x5d4>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]

				  while(sendURL_flag == 1) {
 80012cc:	e064      	b.n	8001398 <main+0x554>
					  if(findTarget(lteComm_MainBuff, "CONNECT") == 1) {
 80012ce:	4953      	ldr	r1, [pc, #332]	; (800141c <main+0x5d8>)
 80012d0:	484d      	ldr	r0, [pc, #308]	; (8001408 <main+0x5c4>)
 80012d2:	f000 f9d1 	bl	8001678 <findTarget>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d125      	bne.n	8001328 <main+0x4e4>
						  if(count == 0) {
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <main+0x4a4>
							  SendCMD_LTE((char *) URL_temp);
 80012e2:	4842      	ldr	r0, [pc, #264]	; (80013ec <main+0x5a8>)
 80012e4:	f000 f952 	bl	800158c <SendCMD_LTE>
						  }

						  if(count == 1) {
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <main+0x4b0>
							  SendCMD_LTE((char *) "\r");
 80012ee:	484c      	ldr	r0, [pc, #304]	; (8001420 <main+0x5dc>)
 80012f0:	f000 f94c 	bl	800158c <SendCMD_LTE>
						  }

						  if(count == 2) {
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d10b      	bne.n	8001312 <main+0x4ce>
							  SerialDebug((char *) "\n");
 80012fa:	484a      	ldr	r0, [pc, #296]	; (8001424 <main+0x5e0>)
 80012fc:	f000 f91c 	bl	8001538 <SerialDebug>
							  SerialDebug((char *) lteComm_MainBuff);
 8001300:	4841      	ldr	r0, [pc, #260]	; (8001408 <main+0x5c4>)
 8001302:	f000 f919 	bl	8001538 <SerialDebug>
							  SerialDebug((char *) "\n");
 8001306:	4847      	ldr	r0, [pc, #284]	; (8001424 <main+0x5e0>)
 8001308:	f000 f916 	bl	8001538 <SerialDebug>
							  SendData_RS485((char*) "P");
 800130c:	4846      	ldr	r0, [pc, #280]	; (8001428 <main+0x5e4>)
 800130e:	f000 f929 	bl	8001564 <SendData_RS485>
						  }

						  memset(textBuffer, 0x00, sizeof(textBuffer));
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	2100      	movs	r1, #0
 8001316:	483b      	ldr	r0, [pc, #236]	; (8001404 <main+0x5c0>)
 8001318:	f009 fcf8 	bl	800ad0c <memset>
						  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 800131c:	22ff      	movs	r2, #255	; 0xff
 800131e:	2100      	movs	r1, #0
 8001320:	4839      	ldr	r0, [pc, #228]	; (8001408 <main+0x5c4>)
 8001322:	f009 fcf3 	bl	800ad0c <memset>
 8001326:	e037      	b.n	8001398 <main+0x554>
					  }

					  else if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8001328:	4940      	ldr	r1, [pc, #256]	; (800142c <main+0x5e8>)
 800132a:	4837      	ldr	r0, [pc, #220]	; (8001408 <main+0x5c4>)
 800132c:	f000 f9a4 	bl	8001678 <findTarget>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d110      	bne.n	8001358 <main+0x514>
						  SerialDebug("[LTE] -> OK\r\n");
 8001336:	483e      	ldr	r0, [pc, #248]	; (8001430 <main+0x5ec>)
 8001338:	f000 f8fe 	bl	8001538 <SerialDebug>

						  memset(textBuffer, 0x00, sizeof(textBuffer));
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	2100      	movs	r1, #0
 8001340:	4830      	ldr	r0, [pc, #192]	; (8001404 <main+0x5c0>)
 8001342:	f009 fce3 	bl	800ad0c <memset>
						  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	2100      	movs	r1, #0
 800134a:	482f      	ldr	r0, [pc, #188]	; (8001408 <main+0x5c4>)
 800134c:	f009 fcde 	bl	800ad0c <memset>

						  sendURL_flag = 0;
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <main+0x5d4>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e01f      	b.n	8001398 <main+0x554>
					  }


					  else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8001358:	4936      	ldr	r1, [pc, #216]	; (8001434 <main+0x5f0>)
 800135a:	482b      	ldr	r0, [pc, #172]	; (8001408 <main+0x5c4>)
 800135c:	f000 f98c 	bl	8001678 <findTarget>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d118      	bne.n	8001398 <main+0x554>
						  SerialDebug("[LTE] -> ERROR\r\n");
 8001366:	4834      	ldr	r0, [pc, #208]	; (8001438 <main+0x5f4>)
 8001368:	f000 f8e6 	bl	8001538 <SerialDebug>
						  SendData_RS485((char*) "X");
 800136c:	4833      	ldr	r0, [pc, #204]	; (800143c <main+0x5f8>)
 800136e:	f000 f8f9 	bl	8001564 <SendData_RS485>


						  memset(textBuffer, 0x00, sizeof(textBuffer));
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	2100      	movs	r1, #0
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <main+0x5c0>)
 8001378:	f009 fcc8 	bl	800ad0c <memset>
						  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	2100      	movs	r1, #0
 8001380:	4821      	ldr	r0, [pc, #132]	; (8001408 <main+0x5c4>)
 8001382:	f009 fcc3 	bl	800ad0c <memset>

						  sysFlag.LTE_ERROR = 1;
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <main+0x5fc>)
 8001388:	2201      	movs	r2, #1
 800138a:	709a      	strb	r2, [r3, #2]
						  sendURL_flag = 0;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <main+0x5d4>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
						  intterruptEvent_Flag = 0;
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <main+0x600>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
				  while(sendURL_flag == 1) {
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <main+0x5d4>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d096      	beq.n	80012ce <main+0x48a>
			  for(unsigned char count = 0; count < 3; count++) {
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	3301      	adds	r3, #1
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	f67f af63 	bls.w	8001274 <main+0x430>
 80013ae:	e051      	b.n	8001454 <main+0x610>
 80013b0:	20000830 	.word	0x20000830
 80013b4:	20000b4c 	.word	0x20000b4c
 80013b8:	20000b7c 	.word	0x20000b7c
 80013bc:	200009b8 	.word	0x200009b8
 80013c0:	0800bb78 	.word	0x0800bb78
 80013c4:	20000b90 	.word	0x20000b90
 80013c8:	20000b80 	.word	0x20000b80
 80013cc:	20000ba0 	.word	0x20000ba0
 80013d0:	20000ba6 	.word	0x20000ba6
 80013d4:	20000bac 	.word	0x20000bac
 80013d8:	20000bb2 	.word	0x20000bb2
 80013dc:	20000bb8 	.word	0x20000bb8
 80013e0:	20000bbe 	.word	0x20000bbe
 80013e4:	20000bc4 	.word	0x20000bc4
 80013e8:	20000bca 	.word	0x20000bca
 80013ec:	20000550 	.word	0x20000550
 80013f0:	20000b6c 	.word	0x20000b6c
 80013f4:	20000b5c 	.word	0x20000b5c
 80013f8:	200009b0 	.word	0x200009b0
 80013fc:	0800bb94 	.word	0x0800bb94
 8001400:	0800bba0 	.word	0x0800bba0
 8001404:	200004d0 	.word	0x200004d0
 8001408:	200008b0 	.word	0x200008b0
 800140c:	0800bba4 	.word	0x0800bba4
 8001410:	0800bbb8 	.word	0x0800bbb8
 8001414:	0800bbd0 	.word	0x0800bbd0
 8001418:	200009b4 	.word	0x200009b4
 800141c:	0800bbe4 	.word	0x0800bbe4
 8001420:	0800bbec 	.word	0x0800bbec
 8001424:	0800bbf0 	.word	0x0800bbf0
 8001428:	0800bbf4 	.word	0x0800bbf4
 800142c:	0800bbf8 	.word	0x0800bbf8
 8001430:	0800bbfc 	.word	0x0800bbfc
 8001434:	0800bc0c 	.word	0x0800bc0c
 8001438:	0800bc14 	.word	0x0800bc14
 800143c:	0800baf0 	.word	0x0800baf0
 8001440:	20000b58 	.word	0x20000b58
 8001444:	2000017c 	.word	0x2000017c
					  }
				  }
			  }
		  }else {
			  SerialDebug("[MCU] -> Data is not valid\r\n");
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <main+0x634>)
 800144a:	f000 f875 	bl	8001538 <SerialDebug>
			  SendData_RS485((char*) "F");
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <main+0x638>)
 8001450:	f000 f888 	bl	8001564 <SendData_RS485>
		  }

		  // End data process
		  SerialDebug("[MCU] -> End data process\r\n");
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <main+0x63c>)
 8001456:	f000 f86f 	bl	8001538 <SerialDebug>
		  intterruptEvent_Flag = 0;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <main+0x640>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2120      	movs	r1, #32
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <main+0x644>)
 8001466:	f001 fd6d 	bl	8002f44 <HAL_GPIO_WritePin>
		while(intterruptEvent_Flag == 1) {									// Get RTS Signal
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <main+0x640>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	f43f ad9e 	beq.w	8000fb0 <main+0x16c>
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8001474:	e54c      	b.n	8000f10 <main+0xcc>
 8001476:	bf00      	nop
 8001478:	0800bc28 	.word	0x0800bc28
 800147c:	0800bb74 	.word	0x0800bb74
 8001480:	0800bc48 	.word	0x0800bc48
 8001484:	2000017c 	.word	0x2000017c
 8001488:	40020400 	.word	0x40020400

0800148c <sysValinit>:

// user custom functions


// init startup value at boot
void sysValinit(void) {
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <sysValinit+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <sysValinit+0x40>)
 8001498:	2200      	movs	r2, #0
 800149a:	805a      	strh	r2, [r3, #2]
	sysCounter.prev_ERRORtime = 0;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <sysValinit+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	809a      	strh	r2, [r3, #4]
	sysCounter.rebootCount = 0;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <sysValinit+0x40>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	721a      	strb	r2, [r3, #8]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <sysValinit+0x40>)
 80014aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ae:	815a      	strh	r2, [r3, #10]

	sysFlag.LTE_CMD_Send = 0;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <sysValinit+0x44>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_INIT_ERROR = 0;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <sysValinit+0x44>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	705a      	strb	r2, [r3, #1]
	sysFlag.LTE_ERROR = 0;
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <sysValinit+0x44>)
 80014be:	2200      	movs	r2, #0
 80014c0:	709a      	strb	r2, [r3, #2]
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	20000b4c 	.word	0x20000b4c
 80014d0:	20000b58 	.word	0x20000b58

080014d4 <sensorValInit>:


// init sensor variable handle
// set/clear buffer array
void sensorValInit(void) {
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	SENSOR.COMPID[0] = '\0';
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <sensorValInit+0x60>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
	SENSOR.dateStamp[0] = '\0';
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <sensorValInit+0x60>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	711a      	strb	r2, [r3, #4]
	SENSOR.dateStamp[0] = '\0';
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <sensorValInit+0x60>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	711a      	strb	r2, [r3, #4]
	SENSOR.X[0] = '\0';
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <sensorValInit+0x60>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	SENSOR.Y[0] = '\0';
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <sensorValInit+0x60>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SENSOR.Z[0] = '\0';
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <sensorValInit+0x60>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SENSOR.Huim[0] = '\0';
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <sensorValInit+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	SENSOR.Temp[0] = '\0';
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <sensorValInit+0x60>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SENSOR.Alc[0] = '\0';
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <sensorValInit+0x60>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	SENSOR.Carbon[0] = '\0';
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <sensorValInit+0x60>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	SENSOR.AirFlow[0] = '\0';
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <sensorValInit+0x60>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	20000b7c 	.word	0x20000b7c

08001538 <SerialDebug>:


// Send text via USB VCOM port
void SerialDebug(char *msgDebug) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	while(CDC_Transmit_FS((uint8_t *) msgDebug, strlen(msgDebug)) != USBD_OK);
 8001540:	bf00      	nop
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7fe fe4c 	bl	80001e0 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29b      	uxth	r3, r3
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f008 ff4e 	bl	800a3f0 <CDC_Transmit_FS>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f3      	bne.n	8001542 <SerialDebug+0xa>
}
 800155a:	bf00      	nop
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <SendData_RS485>:


// RS485 Tx [Polling method]
void SendData_RS485(char *msg) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 10);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7fe fe37 	bl	80001e0 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	230a      	movs	r3, #10
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <SendData_RS485+0x24>)
 800157c:	f004 f87d 	bl	800567a <HAL_UART_Transmit>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000a04 	.word	0x20000a04

0800158c <SendCMD_LTE>:

void SendCMD_LTE(char *msg) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 64);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7fe fe23 	bl	80001e0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	2340      	movs	r3, #64	; 0x40
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4803      	ldr	r0, [pc, #12]	; (80015b0 <SendCMD_LTE+0x24>)
 80015a4:	f004 f869 	bl	800567a <HAL_UART_Transmit>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000a48 	.word	0x20000a48

080015b4 <HAL_UARTEx_RxEventCallback>:


// UART1/UART2 Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <HAL_UARTEx_RxEventCallback+0x9c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d11c      	bne.n	8001604 <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 80015ca:	22ff      	movs	r2, #255	; 0xff
 80015cc:	4921      	ldr	r1, [pc, #132]	; (8001654 <HAL_UARTEx_RxEventCallback+0xa0>)
 80015ce:	4822      	ldr	r0, [pc, #136]	; (8001658 <HAL_UARTEx_RxEventCallback+0xa4>)
 80015d0:	f004 f8e5 	bl	800579e <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 80015d4:	22ff      	movs	r2, #255	; 0xff
 80015d6:	2100      	movs	r1, #0
 80015d8:	4820      	ldr	r0, [pc, #128]	; (800165c <HAL_UARTEx_RxEventCallback+0xa8>)
 80015da:	f009 fb97 	bl	800ad0c <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	461a      	mov	r2, r3
 80015e2:	491c      	ldr	r1, [pc, #112]	; (8001654 <HAL_UARTEx_RxEventCallback+0xa0>)
 80015e4:	481d      	ldr	r0, [pc, #116]	; (800165c <HAL_UARTEx_RxEventCallback+0xa8>)
 80015e6:	f009 fb83 	bl	800acf0 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 80015ea:	22ff      	movs	r2, #255	; 0xff
 80015ec:	2100      	movs	r1, #0
 80015ee:	4819      	ldr	r0, [pc, #100]	; (8001654 <HAL_UARTEx_RxEventCallback+0xa0>)
 80015f0:	f009 fb8c 	bl	800ad0c <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_UARTEx_RxEventCallback+0xac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_UARTEx_RxEventCallback+0xac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0208 	bic.w	r2, r2, #8
 8001602:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_UARTEx_RxEventCallback+0xb0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d11c      	bne.n	8001648 <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	4915      	ldr	r1, [pc, #84]	; (8001668 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001612:	4816      	ldr	r0, [pc, #88]	; (800166c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001614:	f004 f8c3 	bl	800579e <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	2100      	movs	r1, #0
 800161c:	4814      	ldr	r0, [pc, #80]	; (8001670 <HAL_UARTEx_RxEventCallback+0xbc>)
 800161e:	f009 fb75 	bl	800ad0c <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	461a      	mov	r2, r3
 8001626:	4910      	ldr	r1, [pc, #64]	; (8001668 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001628:	4811      	ldr	r0, [pc, #68]	; (8001670 <HAL_UARTEx_RxEventCallback+0xbc>)
 800162a:	f009 fb61 	bl	800acf0 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	2100      	movs	r1, #0
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001634:	f009 fb6a 	bl	800ad0c <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_UARTEx_RxEventCallback+0xc0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0208 	bic.w	r2, r2, #8
 8001646:	601a      	str	r2, [r3, #0]
	}
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40004400 	.word	0x40004400
 8001654:	20000730 	.word	0x20000730
 8001658:	20000a48 	.word	0x20000a48
 800165c:	200008b0 	.word	0x200008b0
 8001660:	20000aec 	.word	0x20000aec
 8001664:	40011000 	.word	0x40011000
 8001668:	200006b0 	.word	0x200006b0
 800166c:	20000a04 	.word	0x20000a04
 8001670:	20000830 	.word	0x20000830
 8001674:	20000a8c 	.word	0x20000a8c

08001678 <findTarget>:


// find target in string
int findTarget(const char *inStr, const char *target) {
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
    int i, j;
    for (i = 0; inStr[i] != '\0'; i++) {
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e023      	b.n	80016d0 <findTarget+0x58>
        j = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 800168c:	e002      	b.n	8001694 <findTarget+0x1c>
            j++;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3301      	adds	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	4413      	add	r3, r2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00c      	beq.n	80016ba <findTarget+0x42>
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4413      	add	r3, r2
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	440b      	add	r3, r1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d0e9      	beq.n	800168e <findTarget+0x16>
        }
        if (target[j] == '\0') {
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <findTarget+0x52>
            return 1; // Return 1 if found
 80016c6:	2301      	movs	r3, #1
 80016c8:	e009      	b.n	80016de <findTarget+0x66>
    for (i = 0; inStr[i] != '\0'; i++) {
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1d5      	bne.n	8001688 <findTarget+0x10>
        }
    }
    return 0; // Return 0 if not found
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_TIM_PeriodElapsedCallback>:


// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d105      	bne.n	800170a <HAL_TIM_PeriodElapsedCallback+0x1e>
		sysCounter.main_ms_counter++;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001708:	801a      	strh	r2, [r3, #0]
	}
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40000800 	.word	0x40000800
 800171c:	20000b4c 	.word	0x20000b4c

08001720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b094      	sub	sp, #80	; 0x50
 8001724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	2230      	movs	r2, #48	; 0x30
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f009 faec 	bl	800ad0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <SystemClock_Config+0xc8>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <SystemClock_Config+0xc8>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <SystemClock_Config+0xc8>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <SystemClock_Config+0xcc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <SystemClock_Config+0xcc>)
 800176a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <SystemClock_Config+0xcc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001786:	2302      	movs	r3, #2
 8001788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800178a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001790:	2319      	movs	r3, #25
 8001792:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001794:	2390      	movs	r3, #144	; 0x90
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001798:	2302      	movs	r3, #2
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800179c:	2303      	movs	r3, #3
 800179e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 fe7d 	bl	80044a4 <HAL_RCC_OscConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017b0:	f000 f960 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b4:	230f      	movs	r3, #15
 80017b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b8:	2302      	movs	r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	2102      	movs	r1, #2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 f8df 	bl	8004994 <HAL_RCC_ClockConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017dc:	f000 f94a 	bl	8001a74 <Error_Handler>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3750      	adds	r7, #80	; 0x50
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	463b      	mov	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_TIM4_Init+0x94>)
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <MX_TIM4_Init+0x98>)
 8001810:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_TIM4_Init+0x94>)
 8001814:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001818:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_TIM4_Init+0x94>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_TIM4_Init+0x94>)
 8001822:	2201      	movs	r2, #1
 8001824:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_TIM4_Init+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_TIM4_Init+0x94>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <MX_TIM4_Init+0x94>)
 8001834:	f003 fa8e 	bl	8004d54 <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800183e:	f000 f919 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_TIM4_Init+0x94>)
 8001850:	f003 fc3a 	bl	80050c8 <HAL_TIM_ConfigClockSource>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800185a:	f000 f90b 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_TIM4_Init+0x94>)
 800186c:	f003 fe36 	bl	80054dc <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001876:	f000 f8fd 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200009bc 	.word	0x200009bc
 8001888:	40000800 	.word	0x40000800

0800188c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_USART1_UART_Init+0x50>)
 8001894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 8001898:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800189c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 80018b2:	220c      	movs	r2, #12
 80018b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_USART1_UART_Init+0x4c>)
 80018c4:	f003 fe8c 	bl	80055e0 <HAL_UART_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ce:	f000 f8d1 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000a04 	.word	0x20000a04
 80018dc:	40011000 	.word	0x40011000

080018e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_USART2_UART_Init+0x4c>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <MX_USART2_UART_Init+0x50>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_USART2_UART_Init+0x4c>)
 80018ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_USART2_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_USART2_UART_Init+0x4c>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_USART2_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_USART2_UART_Init+0x4c>)
 8001918:	f003 fe62 	bl	80055e0 <HAL_UART_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001922:	f000 f8a7 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000a48 	.word	0x20000a48
 8001930:	40004400 	.word	0x40004400

08001934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <MX_DMA_Init+0x68>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <MX_DMA_Init+0x68>)
 8001944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <MX_DMA_Init+0x68>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_DMA_Init+0x68>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <MX_DMA_Init+0x68>)
 8001960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <MX_DMA_Init+0x68>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2010      	movs	r0, #16
 8001978:	f000 fd23 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800197c:	2010      	movs	r0, #16
 800197e:	f000 fd3c 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	203a      	movs	r0, #58	; 0x3a
 8001988:	f000 fd1b 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800198c:	203a      	movs	r0, #58	; 0x3a
 800198e:	f000 fd34 	bl	80023fa <HAL_NVIC_EnableIRQ>

}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <MX_GPIO_Init+0xc8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <MX_GPIO_Init+0xc8>)
 80019c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <MX_GPIO_Init+0xc8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <MX_GPIO_Init+0xc8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <MX_GPIO_Init+0xc8>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <MX_GPIO_Init+0xc8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_GPIO_Init+0xc8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <MX_GPIO_Init+0xc8>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_GPIO_Init+0xc8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f240 21e2 	movw	r1, #738	; 0x2e2
 8001a10:	4816      	ldr	r0, [pc, #88]	; (8001a6c <MX_GPIO_Init+0xcc>)
 8001a12:	f001 fa97 	bl	8002f44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a1c:	4814      	ldr	r0, [pc, #80]	; (8001a70 <MX_GPIO_Init+0xd0>)
 8001a1e:	f001 fa91 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB5 PB6 PB7
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001a22:	f240 23e2 	movw	r3, #738	; 0x2e2
 8001a26:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_GPIO_Init+0xcc>)
 8001a3c:	f001 f8fe 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_GPIO_Init+0xd0>)
 8001a5a:	f001 f8ef 	bl	8002c3c <HAL_GPIO_Init>

}
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020000 	.word	0x40020000

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>

08001a7e <Delimiter>:
////            *(dataOutput+writerPos) = '\0';
////        }
//    }
//}

void Delimiter(char *inputData, const char delims, int index, unsigned int maxIndexSize, unsigned char *dataOutput){
 8001a7e:	b480      	push	{r7}
 8001a80:	b08b      	sub	sp, #44	; 0x2c
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	72fb      	strb	r3, [r7, #11]
    // Parsed string(char array) to split value by demiliter and output value
    // Argument: ( input data , delimiter/splitter letter , no of extract data , max array size, array to store result)
    unsigned int found = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int strIndex[2] = {0};
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
    unsigned int readerPos = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
    unsigned int loaderPos = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    unsigned int writerPos = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]

    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	e01c      	b.n	8001ae8 <Delimiter+0x6a>

        if(*(inputData+readerPos) == delims || readerPos == maxIndexSize){
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	7afa      	ldrb	r2, [r7, #11]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d003      	beq.n	8001ac4 <Delimiter+0x46>
 8001abc:	6a3a      	ldr	r2, [r7, #32]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d10e      	bne.n	8001ae2 <Delimiter+0x64>
            found++;
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
            strIndex[0] = strIndex[1]+1;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	613b      	str	r3, [r7, #16]
            strIndex[1] = (readerPos == maxIndexSize) ? readerPos + 1 : readerPos;
 8001ad0:	6a3a      	ldr	r2, [r7, #32]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d102      	bne.n	8001ade <Delimiter+0x60>
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	3301      	adds	r3, #1
 8001adc:	e000      	b.n	8001ae0 <Delimiter+0x62>
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	617b      	str	r3, [r7, #20]
    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d203      	bcs.n	8001af8 <Delimiter+0x7a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d9da      	bls.n	8001aae <Delimiter+0x30>
        }
    }

    if(found > index){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d91c      	bls.n	8001b3a <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e015      	b.n	8001b32 <Delimiter+0xb4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	440b      	add	r3, r1
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	701a      	strb	r2, [r3, #0]
           writerPos++;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61bb      	str	r3, [r7, #24]
           if((loaderPos > maxIndexSize)||(writerPos > maxIndexSize)){
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d80a      	bhi.n	8001b3a <Delimiter+0xbc>
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d806      	bhi.n	8001b3a <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3e5      	bcc.n	8001b06 <Delimiter+0x88>
// to next people if you need to fix it let's do it and thank you (>w<)
//
// Modify by REDWOLF DiGiTAL
// (yep... I'm ignore code performance because I'm not time ;w;)

    if(index == 0) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11c      	bne.n	8001b7a <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	e015      	b.n	8001b72 <Delimiter+0xf4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	441a      	add	r2, r3
 8001b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	440b      	add	r3, r1
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	701a      	strb	r2, [r3, #0]
           writerPos++;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]

           if((loaderPos > strIndex[0])||(writerPos > strIndex[0])){
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d80a      	bhi.n	8001b7a <Delimiter+0xfc>
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d806      	bhi.n	8001b7a <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3e5      	bcc.n	8001b46 <Delimiter+0xc8>
               break;
           }
        }
    }

    if(index >= found) {
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d825      	bhi.n	8001bce <Delimiter+0x150>
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	e01b      	b.n	8001bc2 <Delimiter+0x144>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	441a      	add	r2, r3
 8001b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	440b      	add	r3, r1
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]

           if(*(inputData+loaderPos) == '\0' || (loaderPos >= maxIndexSize) || writerPos >= maxIndexSize) {
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d013      	beq.n	8001bce <Delimiter+0x150>
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d20f      	bcs.n	8001bce <Delimiter+0x150>
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20b      	bcs.n	8001bce <Delimiter+0x150>
               break;
           }

           writerPos++;
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61bb      	str	r3, [r7, #24]
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1dd      	bne.n	8001b8a <Delimiter+0x10c>
        }
    }
}
 8001bce:	bf00      	nop
 8001bd0:	372c      	adds	r7, #44	; 0x2c
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <NMEACRCCal>:
 *  Copy-Distribute-Modify is prohibited
 *
 *  Code created by MangMuang's Elektronik, 15 JULY 2022
 *
 */ // =====================================================
unsigned char NMEACRCCal(const unsigned char *sentenceIn){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    unsigned char CRCinStr[3] = {0};
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <NMEACRCCal+0xa0>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	81bb      	strh	r3, [r7, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	73bb      	strb	r3, [r7, #14]
    unsigned char CRCin = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	77bb      	strb	r3, [r7, #30]
    unsigned char CRCResult = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char* dollarSign;
    char* starSign;
    unsigned int totalSize = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    dollarSign = strchr((const char *)sentenceIn, '$');
 8001bfc:	2124      	movs	r1, #36	; 0x24
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f009 f8ac 	bl	800ad5c <strchr>
 8001c04:	6178      	str	r0, [r7, #20]
    starSign = strchr((const char *)sentenceIn, '*');
 8001c06:	212a      	movs	r1, #42	; 0x2a
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f009 f8a7 	bl	800ad5c <strchr>
 8001c0e:	6138      	str	r0, [r7, #16]
    totalSize = starSign-dollarSign;
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	61bb      	str	r3, [r7, #24]
    strncpy((char *)CRCinStr, starSign + 1, 2);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1c59      	adds	r1, r3, #1
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2202      	movs	r2, #2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f009 f8a7 	bl	800ad76 <strncpy>
    CRCin = (unsigned char)strtol((char *)CRCinStr, NULL, 16);
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f009 f935 	bl	800aea0 <strtol>
 8001c36:	4603      	mov	r3, r0
 8001c38:	77bb      	strb	r3, [r7, #30]
    for(unsigned int CalCnt = 1; CalCnt < totalSize; CalCnt++){
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	e00b      	b.n	8001c58 <NMEACRCCal+0x7c>
        CRCResult ^= sentenceIn[CalCnt];
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	4413      	add	r3, r2
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c4c:	4053      	eors	r3, r2
 8001c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(unsigned int CalCnt = 1; CalCnt < totalSize; CalCnt++){
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	3301      	adds	r3, #1
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	6a3a      	ldr	r2, [r7, #32]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3ef      	bcc.n	8001c40 <NMEACRCCal+0x64>
    }
    unsigned char CRCCMPResult = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	77fb      	strb	r3, [r7, #31]
    if(CRCin == CRCResult){
 8001c64:	7fba      	ldrb	r2, [r7, #30]
 8001c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d101      	bne.n	8001c72 <NMEACRCCal+0x96>
        CRCCMPResult = 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	77fb      	strb	r3, [r7, #31]
    }
    return CRCCMPResult;
 8001c72:	7ffb      	ldrb	r3, [r7, #31]

}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800bc64 	.word	0x0800bc64

08001c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_MspInit+0x4c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_MspInit+0x4c>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_MspInit+0x4c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_MspInit+0x4c>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_MspInit+0x4c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d115      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_TIM_Base_MspInit+0x4c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_TIM_Base_MspInit+0x4c>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_TIM_Base_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	201e      	movs	r0, #30
 8001d04:	f000 fb5d 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d08:	201e      	movs	r0, #30
 8001d0a:	f000 fb76 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a69      	ldr	r2, [pc, #420]	; (8001ee4 <HAL_UART_MspInit+0x1c4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d164      	bne.n	8001e0c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a67      	ldr	r2, [pc, #412]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001d4c:	f043 0310 	orr.w	r3, r3, #16
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b65      	ldr	r3, [pc, #404]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	4855      	ldr	r0, [pc, #340]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001d98:	f000 ff50 	bl	8002c3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d9c:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001d9e:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <HAL_UART_MspInit+0x1d4>)
 8001da0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001da2:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001da4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001da8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001daa:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001db6:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001dca:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001dd0:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dd8:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001dde:	4844      	ldr	r0, [pc, #272]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001de0:	f000 fb2a 	bl	8002438 <HAL_DMA_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001dea:	f7ff fe43 	bl	8001a74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a3f      	ldr	r2, [pc, #252]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38
 8001df4:	4a3e      	ldr	r2, [pc, #248]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2025      	movs	r0, #37	; 0x25
 8001e00:	f000 fadf 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e04:	2025      	movs	r0, #37	; 0x25
 8001e06:	f000 faf8 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e0a:	e066      	b.n	8001eda <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a39      	ldr	r2, [pc, #228]	; (8001ef8 <HAL_UART_MspInit+0x1d8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d161      	bne.n	8001eda <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e4e:	230c      	movs	r3, #12
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e5e:	2307      	movs	r3, #7
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	4820      	ldr	r0, [pc, #128]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001e6a:	f000 fee7 	bl	8002c3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e70:	4a23      	ldr	r2, [pc, #140]	; (8001f00 <HAL_UART_MspInit+0x1e0>)
 8001e72:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001eae:	4813      	ldr	r0, [pc, #76]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001eb0:	f000 fac2 	bl	8002438 <HAL_DMA_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001eba:	f7ff fddb 	bl	8001a74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2026      	movs	r0, #38	; 0x26
 8001ed0:	f000 fa77 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ed4:	2026      	movs	r0, #38	; 0x26
 8001ed6:	f000 fa90 	bl	80023fa <HAL_NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3730      	adds	r7, #48	; 0x30
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40011000 	.word	0x40011000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	20000a8c 	.word	0x20000a8c
 8001ef4:	40026440 	.word	0x40026440
 8001ef8:	40004400 	.word	0x40004400
 8001efc:	20000aec 	.word	0x20000aec
 8001f00:	40026088 	.word	0x40026088

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x4>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <MemManage_Handler+0x4>

08001f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f50:	f000 f902 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <DMA1_Stream5_IRQHandler+0x10>)
 8001f5e:	f000 fc03 	bl	8002768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000aec 	.word	0x20000aec

08001f6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <TIM4_IRQHandler+0x10>)
 8001f72:	f002 ffa1 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200009bc 	.word	0x200009bc

08001f80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <USART1_IRQHandler+0x10>)
 8001f86:	f003 fc6f 	bl	8005868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000a04 	.word	0x20000a04

08001f94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <USART2_IRQHandler+0x10>)
 8001f9a:	f003 fc65 	bl	8005868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000a48 	.word	0x20000a48

08001fa8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <DMA2_Stream2_IRQHandler+0x10>)
 8001fae:	f000 fbdb 	bl	8002768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000a8c 	.word	0x20000a8c

08001fbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <OTG_FS_IRQHandler+0x10>)
 8001fc2:	f001 f942 	bl	800324a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200020b8 	.word	0x200020b8

08001fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <_sbrk+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <_sbrk+0x60>)
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <_sbrk+0x64>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <_sbrk+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d207      	bcs.n	8002010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002000:	f008 fe4c 	bl	800ac9c <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	220c      	movs	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e009      	b.n	8002024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_sbrk+0x64>)
 8002020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20020000 	.word	0x20020000
 8002030:	00000400 	.word	0x00000400
 8002034:	20000bd0 	.word	0x20000bd0
 8002038:	200027f8 	.word	0x200027f8

0800203c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <SystemInit+0x20>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <SystemInit+0x20>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002066:	490e      	ldr	r1, [pc, #56]	; (80020a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800207c:	4c0b      	ldr	r4, [pc, #44]	; (80020ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800208a:	f7ff ffd7 	bl	800203c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208e:	f008 fe0b 	bl	800aca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002092:	f7fe fed7 	bl	8000e44 <main>
  bx  lr    
 8002096:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80020a4:	0800be08 	.word	0x0800be08
  ldr r2, =_sbss
 80020a8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80020ac:	200027f4 	.word	0x200027f4

080020b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC_IRQHandler>
	...

080020b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_Init+0x40>)
 80020be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_Init+0x40>)
 80020ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_Init+0x40>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 f965 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	200f      	movs	r0, #15
 80020e4:	f000 f808 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7ff fdca 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x54>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_InitTick+0x58>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f981 	bl	800241e <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 f945 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_InitTick+0x5c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000000 	.word	0x20000000
 8002150:	20000008 	.word	0x20000008
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008
 800217c:	20000bd4 	.word	0x20000bd4

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000bd4 	.word	0x20000bd4

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff ffee 	bl	8002180 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffde 	bl	8002180 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000008 	.word	0x20000008

080021e0 <__NVIC_SetPriorityGrouping>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002340:	f3bf 8f4f 	dsb	sy
}
 8002344:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <__NVIC_SystemReset+0x24>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800234e:	4904      	ldr	r1, [pc, #16]	; (8002360 <__NVIC_SystemReset+0x24>)
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_SystemReset+0x28>)
 8002352:	4313      	orrs	r3, r2
 8002354:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002356:	f3bf 8f4f 	dsb	sy
}
 800235a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <__NVIC_SystemReset+0x20>
 8002360:	e000ed00 	.word	0xe000ed00
 8002364:	05fa0004 	.word	0x05fa0004

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff78 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff13 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff28 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff78 	bl	80022d4 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff47 	bl	8002280 <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff1b 	bl	8002244 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800241a:	f7ff ff8f 	bl	800233c <__NVIC_SystemReset>

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff9e 	bl	8002368 <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff fe9c 	bl	8002180 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e099      	b.n	8002588 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002474:	e00f      	b.n	8002496 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002476:	f7ff fe83 	bl	8002180 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b05      	cmp	r3, #5
 8002482:	d908      	bls.n	8002496 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2203      	movs	r2, #3
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e078      	b.n	8002588 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e8      	bne.n	8002476 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_DMA_Init+0x158>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d107      	bne.n	8002500 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	4313      	orrs	r3, r2
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 0307 	bic.w	r3, r3, #7
 8002516:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	2b04      	cmp	r3, #4
 8002528:	d117      	bne.n	800255a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00e      	beq.n	800255a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fb01 	bl	8002b44 <DMA_CheckFifoParam>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002556:	2301      	movs	r3, #1
 8002558:	e016      	b.n	8002588 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fab8 	bl	8002ad8 <DMA_CalcBaseAndBitshift>
 8002568:	4603      	mov	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	223f      	movs	r2, #63	; 0x3f
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	f010803f 	.word	0xf010803f

08002594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_DMA_Start_IT+0x26>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e040      	b.n	800263c <HAL_DMA_Start_IT+0xa8>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d12f      	bne.n	800262e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fa4a 	bl	8002a7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	223f      	movs	r2, #63	; 0x3f
 80025ee:	409a      	lsls	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0216 	orr.w	r2, r2, #22
 8002602:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0208 	orr.w	r2, r2, #8
 800261a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e005      	b.n	800263a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002636:	2302      	movs	r3, #2
 8002638:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800263a:	7dfb      	ldrb	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002652:	f7ff fd95 	bl	8002180 <HAL_GetTick>
 8002656:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d008      	beq.n	8002676 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e052      	b.n	800271c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0216 	bic.w	r2, r2, #22
 8002684:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002694:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d103      	bne.n	80026a6 <HAL_DMA_Abort+0x62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0208 	bic.w	r2, r2, #8
 80026b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c6:	e013      	b.n	80026f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026c8:	f7ff fd5a 	bl	8002180 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d90c      	bls.n	80026f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2203      	movs	r2, #3
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e015      	b.n	800271c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e4      	bne.n	80026c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	223f      	movs	r2, #63	; 0x3f
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d004      	beq.n	8002742 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e00c      	b.n	800275c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2205      	movs	r2, #5
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002774:	4b8e      	ldr	r3, [pc, #568]	; (80029b0 <HAL_DMA_IRQHandler+0x248>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a8e      	ldr	r2, [pc, #568]	; (80029b4 <HAL_DMA_IRQHandler+0x24c>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a9b      	lsrs	r3, r3, #10
 8002780:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2208      	movs	r2, #8
 8002794:	409a      	lsls	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01a      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0204 	bic.w	r2, r2, #4
 80027ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	2208      	movs	r2, #8
 80027c2:	409a      	lsls	r2, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	2201      	movs	r2, #1
 80027da:	409a      	lsls	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	2201      	movs	r2, #1
 80027f8:	409a      	lsls	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f043 0202 	orr.w	r2, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	2204      	movs	r2, #4
 8002810:	409a      	lsls	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d012      	beq.n	8002840 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	2204      	movs	r2, #4
 800282e:	409a      	lsls	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	f043 0204 	orr.w	r2, r3, #4
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	2210      	movs	r2, #16
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d043      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d03c      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	2210      	movs	r2, #16
 8002864:	409a      	lsls	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d018      	beq.n	80028aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d108      	bne.n	8002898 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d024      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
 8002896:	e01f      	b.n	80028d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01b      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
 80028a8:	e016      	b.n	80028d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0208 	bic.w	r2, r2, #8
 80028c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	2220      	movs	r2, #32
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 808f 	beq.w	8002a08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8087 	beq.w	8002a08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2220      	movs	r2, #32
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b05      	cmp	r3, #5
 8002910:	d136      	bne.n	8002980 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0216 	bic.w	r2, r2, #22
 8002920:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002930:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <HAL_DMA_IRQHandler+0x1da>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0208 	bic.w	r2, r2, #8
 8002950:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	223f      	movs	r2, #63	; 0x3f
 8002958:	409a      	lsls	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002972:	2b00      	cmp	r3, #0
 8002974:	d07e      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
        }
        return;
 800297e:	e079      	b.n	8002a74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01d      	beq.n	80029ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d031      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
 80029ac:	e02c      	b.n	8002a08 <HAL_DMA_IRQHandler+0x2a0>
 80029ae:	bf00      	nop
 80029b0:	20000000 	.word	0x20000000
 80029b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d023      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
 80029c8:	e01e      	b.n	8002a08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10f      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0210 	bic.w	r2, r2, #16
 80029e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d032      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d022      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2205      	movs	r2, #5
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	3301      	adds	r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d307      	bcc.n	8002a50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f2      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x2cc>
 8002a4e:	e000      	b.n	8002a52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
 8002a72:	e000      	b.n	8002a76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a74:	bf00      	nop
    }
  }
}
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d108      	bne.n	8002abc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aba:	e007      	b.n	8002acc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	60da      	str	r2, [r3, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3b10      	subs	r3, #16
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <DMA_CalcBaseAndBitshift+0x64>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002af2:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <DMA_CalcBaseAndBitshift+0x68>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d909      	bls.n	8002b1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	1d1a      	adds	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	659a      	str	r2, [r3, #88]	; 0x58
 8002b18:	e007      	b.n	8002b2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	aaaaaaab 	.word	0xaaaaaaab
 8002b40:	0800bcbc 	.word	0x0800bcbc

08002b44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11f      	bne.n	8002b9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d856      	bhi.n	8002c12 <DMA_CheckFifoParam+0xce>
 8002b64:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <DMA_CheckFifoParam+0x28>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b8f 	.word	0x08002b8f
 8002b74:	08002b7d 	.word	0x08002b7d
 8002b78:	08002c13 	.word	0x08002c13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d046      	beq.n	8002c16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8c:	e043      	b.n	8002c16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b96:	d140      	bne.n	8002c1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e03d      	b.n	8002c1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba6:	d121      	bne.n	8002bec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d837      	bhi.n	8002c1e <DMA_CheckFifoParam+0xda>
 8002bae:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <DMA_CheckFifoParam+0x70>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002bcb 	.word	0x08002bcb
 8002bbc:	08002bc5 	.word	0x08002bc5
 8002bc0:	08002bdd 	.word	0x08002bdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e030      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d025      	beq.n	8002c22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bda:	e022      	b.n	8002c22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002be4:	d11f      	bne.n	8002c26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bea:	e01c      	b.n	8002c26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d903      	bls.n	8002bfa <DMA_CheckFifoParam+0xb6>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d003      	beq.n	8002c00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bf8:	e018      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfe:	e015      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c10:	e00b      	b.n	8002c2a <DMA_CheckFifoParam+0xe6>
      break;
 8002c12:	bf00      	nop
 8002c14:	e00a      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c16:	bf00      	nop
 8002c18:	e008      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e006      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e004      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c22:	bf00      	nop
 8002c24:	e002      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	; 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e159      	b.n	8002f0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	f040 8148 	bne.w	8002f06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d005      	beq.n	8002c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d130      	bne.n	8002cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0201 	and.w	r2, r3, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d017      	beq.n	8002d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d123      	bne.n	8002d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a2 	beq.w	8002f06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b57      	ldr	r3, [pc, #348]	; (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4a56      	ldr	r2, [pc, #344]	; (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd2:	4b54      	ldr	r3, [pc, #336]	; (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dde:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_GPIO_Init+0x2ec>)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a49      	ldr	r2, [pc, #292]	; (8002f2c <HAL_GPIO_Init+0x2f0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d019      	beq.n	8002e3e <HAL_GPIO_Init+0x202>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a48      	ldr	r2, [pc, #288]	; (8002f30 <HAL_GPIO_Init+0x2f4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_GPIO_Init+0x1fe>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <HAL_GPIO_Init+0x2f8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00d      	beq.n	8002e36 <HAL_GPIO_Init+0x1fa>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a46      	ldr	r2, [pc, #280]	; (8002f38 <HAL_GPIO_Init+0x2fc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <HAL_GPIO_Init+0x1f6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a45      	ldr	r2, [pc, #276]	; (8002f3c <HAL_GPIO_Init+0x300>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_GPIO_Init+0x1f2>
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	e008      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e2e:	2307      	movs	r3, #7
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e004      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f002 0203 	and.w	r2, r2, #3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e50:	4935      	ldr	r1, [pc, #212]	; (8002f28 <HAL_GPIO_Init+0x2ec>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5e:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e82:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e88:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eac:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb2:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	f67f aea2 	bls.w	8002c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40013c00 	.word	0x40013c00

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f88:	887a      	ldrh	r2, [r7, #2]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	041a      	lsls	r2, r3, #16
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	400b      	ands	r3, r1
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fac:	b08f      	sub	sp, #60	; 0x3c
 8002fae:	af0a      	add	r7, sp, #40	; 0x28
 8002fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e10f      	b.n	80031dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f007 fb52 	bl	800a680 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fe39 	bl	8006c72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	687e      	ldr	r6, [r7, #4]
 8003008:	466d      	mov	r5, sp
 800300a:	f106 0410 	add.w	r4, r6, #16
 800300e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800301a:	e885 0003 	stmia.w	r5, {r0, r1}
 800301e:	1d33      	adds	r3, r6, #4
 8003020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003022:	6838      	ldr	r0, [r7, #0]
 8003024:	f003 fd10 	bl	8006a48 <USB_CoreInit>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2202      	movs	r2, #2
 8003032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e0d0      	b.n	80031dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fe27 	bl	8006c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
 800304a:	e04a      	b.n	80030e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	333d      	adds	r3, #61	; 0x3d
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	333c      	adds	r3, #60	; 0x3c
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	b298      	uxth	r0, r3
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3344      	adds	r3, #68	; 0x44
 8003088:	4602      	mov	r2, r0
 800308a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3340      	adds	r3, #64	; 0x40
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3348      	adds	r3, #72	; 0x48
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	334c      	adds	r3, #76	; 0x4c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3354      	adds	r3, #84	; 0x54
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	3301      	adds	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3af      	bcc.n	800304c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e044      	b.n	800317c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	3301      	adds	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d3b5      	bcc.n	80030f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	687e      	ldr	r6, [r7, #4]
 800318e:	466d      	mov	r5, sp
 8003190:	f106 0410 	add.w	r4, r6, #16
 8003194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a4:	1d33      	adds	r3, r6, #4
 80031a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a8:	6838      	ldr	r0, [r7, #0]
 80031aa:	f003 fdbf 	bl	8006d2c <USB_DevInit>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e00d      	b.n	80031dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f004 ff0e 	bl	8007ff6 <USB_DevDisconnect>

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_PCD_Start+0x1c>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e020      	b.n	8003242 <HAL_PCD_Start+0x5e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	2b01      	cmp	r3, #1
 800320e:	d109      	bne.n	8003224 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003214:	2b01      	cmp	r3, #1
 8003216:	d005      	beq.n	8003224 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fd11 	bl	8006c50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f004 febe 	bl	8007fb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800324a:	b590      	push	{r4, r7, lr}
 800324c:	b08d      	sub	sp, #52	; 0x34
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f004 ff7c 	bl	800815e <USB_GetMode>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 848a 	bne.w	8003b82 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fee0 	bl	8008038 <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8480 	beq.w	8003b80 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f004 fecd 	bl	8008038 <USB_ReadInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d107      	bne.n	80032b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f002 0202 	and.w	r2, r2, #2
 80032b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f004 febb 	bl	8008038 <USB_ReadInterrupts>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d161      	bne.n	8003390 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0210 	bic.w	r2, r2, #16
 80032da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	3304      	adds	r3, #4
 80032fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	0c5b      	lsrs	r3, r3, #17
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	2b02      	cmp	r3, #2
 8003306:	d124      	bne.n	8003352 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d035      	beq.n	8003380 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800331e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6a38      	ldr	r0, [r7, #32]
 8003328:	f004 fcf2 	bl	8007d10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003338:	441a      	add	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800334a:	441a      	add	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	621a      	str	r2, [r3, #32]
 8003350:	e016      	b.n	8003380 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	0c5b      	lsrs	r3, r3, #17
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	2b06      	cmp	r3, #6
 800335c:	d110      	bne.n	8003380 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003364:	2208      	movs	r2, #8
 8003366:	4619      	mov	r1, r3
 8003368:	6a38      	ldr	r0, [r7, #32]
 800336a:	f004 fcd1 	bl	8007d10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6a1a      	ldr	r2, [r3, #32]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337a:	441a      	add	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0210 	orr.w	r2, r2, #16
 800338e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f004 fe4f 	bl	8008038 <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033a4:	f040 80a7 	bne.w	80034f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 fe54 	bl	800805e <USB_ReadDevAllOutEpInterrupt>
 80033b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033b8:	e099      	b.n	80034ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 808e 	beq.w	80034e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fe78 	bl	80080c6 <USB_ReadDevOutEPInterrupt>
 80033d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ee:	461a      	mov	r2, r3
 80033f0:	2301      	movs	r3, #1
 80033f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fec2 	bl	8004180 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	461a      	mov	r2, r3
 8003414:	2308      	movs	r3, #8
 8003416:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 ff98 	bl	8004350 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	461a      	mov	r2, r3
 8003438:	2310      	movs	r3, #16
 800343a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d030      	beq.n	80034a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b80      	cmp	r3, #128	; 0x80
 8003450:	d109      	bne.n	8003466 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003464:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d108      	bne.n	8003496 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2200      	movs	r2, #0
 8003488:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	b2db      	uxtb	r3, r3
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f007 f9f1 	bl	800a878 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	2302      	movs	r3, #2
 80034a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	461a      	mov	r2, r3
 80034c0:	2320      	movs	r3, #32
 80034c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	461a      	mov	r2, r3
 80034dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	3301      	adds	r3, #1
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f af62 	bne.w	80033ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 fd9c 	bl	8008038 <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800350a:	f040 80db 	bne.w	80036c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 fdbd 	bl	8008092 <USB_ReadDevAllInEpInterrupt>
 8003518:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800351e:	e0cd      	b.n	80036bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80c2 	beq.w	80036b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f004 fde3 	bl	8008102 <USB_ReadDevInEPInterrupt>
 800353c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d057      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	2201      	movs	r2, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43db      	mvns	r3, r3
 8003562:	69f9      	ldr	r1, [r7, #28]
 8003564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003568:	4013      	ands	r3, r2
 800356a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003578:	461a      	mov	r2, r3
 800357a:	2301      	movs	r3, #1
 800357c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d132      	bne.n	80035ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	334c      	adds	r3, #76	; 0x4c
 8003596:	6819      	ldr	r1, [r3, #0]
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	3348      	adds	r3, #72	; 0x48
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4419      	add	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4403      	add	r3, r0
 80035ba:	334c      	adds	r3, #76	; 0x4c
 80035bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d113      	bne.n	80035ec <HAL_PCD_IRQHandler+0x3a2>
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	3354      	adds	r3, #84	; 0x54
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035e4:	461a      	mov	r2, r3
 80035e6:	2101      	movs	r1, #1
 80035e8:	f004 fdea 	bl	80081c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f007 f8c5 	bl	800a782 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360e:	461a      	mov	r2, r3
 8003610:	2308      	movs	r3, #8
 8003612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362a:	461a      	mov	r2, r3
 800362c:	2310      	movs	r3, #16
 800362e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	461a      	mov	r2, r3
 8003648:	2340      	movs	r3, #64	; 0x40
 800364a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d023      	beq.n	800369e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003658:	6a38      	ldr	r0, [r7, #32]
 800365a:	f003 fccb 	bl	8006ff4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	3338      	adds	r3, #56	; 0x38
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	3304      	adds	r3, #4
 8003670:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	78db      	ldrb	r3, [r3, #3]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d108      	bne.n	800368c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	b2db      	uxtb	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f007 f908 	bl	800a89c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003698:	461a      	mov	r2, r3
 800369a:	2302      	movs	r3, #2
 800369c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fcdb 	bl	8004066 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	3301      	adds	r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f47f af2e 	bne.w	8003520 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f004 fcb5 	bl	8008038 <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036d8:	d122      	bne.n	8003720 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d108      	bne.n	800370a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003700:	2100      	movs	r1, #0
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fec2 	bl	800448c <HAL_PCDEx_LPM_Callback>
 8003708:	e002      	b.n	8003710 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f007 f8a6 	bl	800a85c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f004 fc87 	bl	8008038 <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003734:	d112      	bne.n	800375c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d102      	bne.n	800374c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f007 f862 	bl	800a810 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800375a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f004 fc69 	bl	8008038 <USB_ReadInterrupts>
 8003766:	4603      	mov	r3, r0
 8003768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	f040 80b7 	bne.w	80038e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2110      	movs	r1, #16
 800378e:	4618      	mov	r0, r3
 8003790:	f003 fc30 	bl	8006ff4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003798:	e046      	b.n	8003828 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a6:	461a      	mov	r2, r3
 80037a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037da:	461a      	mov	r2, r3
 80037dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f2:	0151      	lsls	r1, r2, #5
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	440a      	add	r2, r1
 80037f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003800:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003812:	0151      	lsls	r1, r2, #5
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	440a      	add	r2, r1
 8003818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003820:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	3301      	adds	r3, #1
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800382e:	429a      	cmp	r2, r3
 8003830:	d3b3      	bcc.n	800379a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003840:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003844:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385e:	f043 030b 	orr.w	r3, r3, #11
 8003862:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003874:	f043 030b 	orr.w	r3, r3, #11
 8003878:	6453      	str	r3, [r2, #68]	; 0x44
 800387a:	e015      	b.n	80038a8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800388e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003892:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a2:	f043 030b 	orr.w	r3, r3, #11
 80038a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038cc:	461a      	mov	r2, r3
 80038ce:	f004 fc77 	bl	80081c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 fba6 	bl	8008038 <USB_ReadInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f6:	d124      	bne.n	8003942 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 fc3c 	bl	800817a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f003 fbf1 	bl	80070ee <USB_GetDevSpeed>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	f001 f9e8 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 800391c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	4620      	mov	r0, r4
 8003928:	f003 f8f0 	bl	8006b0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f006 ff50 	bl	800a7d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003940:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f004 fb76 	bl	8008038 <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	d10a      	bne.n	800396c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f006 ff2d 	bl	800a7b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f002 0208 	and.w	r2, r2, #8
 800396a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f004 fb61 	bl	8008038 <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d122      	bne.n	80039c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800398c:	2301      	movs	r3, #1
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
 8003990:	e014      	b.n	80039bc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fb27 	bl	8004004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	3301      	adds	r3, #1
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d3e5      	bcc.n	8003992 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fb34 	bl	8008038 <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039da:	d13b      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039dc:	2301      	movs	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
 80039e0:	e02b      	b.n	8003a3a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	3340      	adds	r3, #64	; 0x40
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d115      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da12      	bge.n	8003a34 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	333f      	adds	r3, #63	; 0x3f
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fae8 	bl	8004004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	3301      	adds	r3, #1
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d3ce      	bcc.n	80039e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 faed 	bl	8008038 <USB_ReadInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a68:	d155      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e045      	b.n	8003afc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d12e      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da2b      	bge.n	8003af6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003aaa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d121      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af2:	6053      	str	r3, [r2, #4]
            break;
 8003af4:	e007      	b.n	8003b06 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	3301      	adds	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d3b4      	bcc.n	8003a70 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 fa8c 	bl	8008038 <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2a:	d10a      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f006 fec7 	bl	800a8c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 fa76 	bl	8008038 <USB_ReadInterrupts>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d115      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f006 feb7 	bl	800a8dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	e000      	b.n	8003b82 <HAL_PCD_IRQHandler+0x938>
      return;
 8003b80:	bf00      	nop
    }
  }
}
 8003b82:	3734      	adds	r7, #52	; 0x34
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd90      	pop	{r4, r7, pc}

08003b88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_PCD_SetAddress+0x1a>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e013      	b.n	8003bca <HAL_PCD_SetAddress+0x42>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f004 f9d4 	bl	8007f68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	4608      	mov	r0, r1
 8003bdc:	4611      	mov	r1, r2
 8003bde:	461a      	mov	r2, r3
 8003be0:	4603      	mov	r3, r0
 8003be2:	70fb      	strb	r3, [r7, #3]
 8003be4:	460b      	mov	r3, r1
 8003be6:	803b      	strh	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	da0f      	bge.n	8003c18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 020f 	and.w	r2, r3, #15
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	3338      	adds	r3, #56	; 0x38
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	705a      	strb	r2, [r3, #1]
 8003c16:	e00f      	b.n	8003c38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 020f 	and.w	r2, r3, #15
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3304      	adds	r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c44:	883a      	ldrh	r2, [r7, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	78ba      	ldrb	r2, [r7, #2]
 8003c4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c62:	78bb      	ldrb	r3, [r7, #2]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d102      	bne.n	8003c6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_PCD_EP_Open+0xaa>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e00e      	b.n	8003c9a <HAL_PCD_EP_Open+0xc8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68f9      	ldr	r1, [r7, #12]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 fa54 	bl	8007138 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c98:	7afb      	ldrb	r3, [r7, #11]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da0f      	bge.n	8003cd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	3338      	adds	r3, #56	; 0x38
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	3304      	adds	r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	705a      	strb	r2, [r3, #1]
 8003cd4:	e00f      	b.n	8003cf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_PCD_EP_Close+0x6e>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e00e      	b.n	8003d2e <HAL_PCD_EP_Close+0x8c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68f9      	ldr	r1, [r7, #12]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 fa92 	bl	8007248 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	460b      	mov	r3, r1
 8003d44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d78:	7afb      	ldrb	r3, [r7, #11]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d102      	bne.n	8003d92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d92:	7afb      	ldrb	r3, [r7, #11]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6979      	ldr	r1, [r7, #20]
 8003daa:	f003 fd71 	bl	8007890 <USB_EP0StartXfer>
 8003dae:	e008      	b.n	8003dc2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6979      	ldr	r1, [r7, #20]
 8003dbe:	f003 fb1f 	bl	8007400 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	7afb      	ldrb	r3, [r7, #11]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3338      	adds	r3, #56	; 0x38
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	3304      	adds	r3, #4
 8003e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d102      	bne.n	8003e56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e56:	7afb      	ldrb	r3, [r7, #11]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6979      	ldr	r1, [r7, #20]
 8003e6e:	f003 fd0f 	bl	8007890 <USB_EP0StartXfer>
 8003e72:	e008      	b.n	8003e86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	f003 fabd 	bl	8007400 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 020f 	and.w	r2, r3, #15
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d901      	bls.n	8003eae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e050      	b.n	8003f50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	da0f      	bge.n	8003ed6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	3338      	adds	r3, #56	; 0x38
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	3304      	adds	r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	705a      	strb	r2, [r3, #1]
 8003ed4:	e00d      	b.n	8003ef2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3304      	adds	r3, #4
 8003eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_PCD_EP_SetStall+0x82>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e01e      	b.n	8003f50 <HAL_PCD_EP_SetStall+0xc0>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f003 ff4d 	bl	8007dc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	b2d9      	uxtb	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f40:	461a      	mov	r2, r3
 8003f42:	f004 f93d 	bl	80081c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	f003 020f 	and.w	r2, r3, #15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d901      	bls.n	8003f76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e042      	b.n	8003ffc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da0f      	bge.n	8003f9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	3338      	adds	r3, #56	; 0x38
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	3304      	adds	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	705a      	strb	r2, [r3, #1]
 8003f9c:	e00f      	b.n	8003fbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_PCD_EP_ClrStall+0x86>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e00e      	b.n	8003ffc <HAL_PCD_EP_ClrStall+0xa4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f003 ff55 	bl	8007e9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da0c      	bge.n	8004032 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 020f 	and.w	r2, r3, #15
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	3338      	adds	r3, #56	; 0x38
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	3304      	adds	r3, #4
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e00c      	b.n	800404c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68f9      	ldr	r1, [r7, #12]
 8004052:	4618      	mov	r0, r3
 8004054:	f003 fd74 	bl	8007b40 <USB_EPStopXfer>
 8004058:	4603      	mov	r3, r0
 800405a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800405c:	7afb      	ldrb	r3, [r7, #11]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b08a      	sub	sp, #40	; 0x28
 800406a:	af02      	add	r7, sp, #8
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	3338      	adds	r3, #56	; 0x38
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	429a      	cmp	r2, r3
 8004098:	d901      	bls.n	800409e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06c      	b.n	8004178 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d902      	bls.n	80040ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3303      	adds	r3, #3
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c2:	e02b      	b.n	800411c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d902      	bls.n	80040e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3303      	adds	r3, #3
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6919      	ldr	r1, [r3, #16]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4603      	mov	r3, r0
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f003 fdc8 	bl	8007c94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	441a      	add	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	b29b      	uxth	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	429a      	cmp	r2, r3
 8004130:	d809      	bhi.n	8004146 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800413a:	429a      	cmp	r2, r3
 800413c:	d203      	bcs.n	8004146 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1be      	bne.n	80040c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	429a      	cmp	r2, r3
 8004150:	d811      	bhi.n	8004176 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	2201      	movs	r2, #1
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	43db      	mvns	r3, r3
 800416c:	6939      	ldr	r1, [r7, #16]
 800416e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004172:	4013      	ands	r3, r2
 8004174:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	333c      	adds	r3, #60	; 0x3c
 8004198:	3304      	adds	r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d17b      	bne.n	80042ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4a61      	ldr	r2, [pc, #388]	; (8004348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	f240 80b9 	bls.w	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80b3 	beq.w	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	461a      	mov	r2, r3
 80041e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e8:	6093      	str	r3, [r2, #8]
 80041ea:	e0a7      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	2320      	movs	r3, #32
 8004206:	6093      	str	r3, [r2, #8]
 8004208:	e098      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 8093 	bne.w	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4a4b      	ldr	r2, [pc, #300]	; (8004348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d90f      	bls.n	800423e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423a:	6093      	str	r3, [r2, #8]
 800423c:	e07e      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	3304      	adds	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	0159      	lsls	r1, r3, #5
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	440b      	add	r3, r1
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d114      	bne.n	80042a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004288:	461a      	mov	r2, r3
 800428a:	2101      	movs	r1, #1
 800428c:	f003 ff98 	bl	80081c0 <USB_EP0_OutStart>
 8004290:	e006      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	441a      	add	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f006 fa50 	bl	800a74c <HAL_PCD_DataOutStageCallback>
 80042ac:	e046      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4a26      	ldr	r2, [pc, #152]	; (800434c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d124      	bne.n	8004300 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	461a      	mov	r2, r3
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	6093      	str	r3, [r2, #8]
 80042d4:	e032      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	461a      	mov	r2, r3
 80042ee:	2320      	movs	r3, #32
 80042f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	4619      	mov	r1, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f006 fa27 	bl	800a74c <HAL_PCD_DataOutStageCallback>
 80042fe:	e01d      	b.n	800433c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d114      	bne.n	8004330 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d108      	bne.n	8004330 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004328:	461a      	mov	r2, r3
 800432a:	2100      	movs	r1, #0
 800432c:	f003 ff48 	bl	80081c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	4619      	mov	r1, r3
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f006 fa08 	bl	800a74c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	4f54300a 	.word	0x4f54300a
 800434c:	4f54310a 	.word	0x4f54310a

08004350 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	333c      	adds	r3, #60	; 0x3c
 8004368:	3304      	adds	r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d90e      	bls.n	80043a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	461a      	mov	r2, r3
 800439e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f006 f9bf 	bl	800a728 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d90c      	bls.n	80043cc <PCD_EP_OutSetupPacket_int+0x7c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d108      	bne.n	80043cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043c4:	461a      	mov	r2, r3
 80043c6:	2101      	movs	r1, #1
 80043c8:	f003 fefa 	bl	80081c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	4f54300a 	.word	0x4f54300a

080043dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
 80043e8:	4613      	mov	r3, r2
 80043ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043fa:	883b      	ldrh	r3, [r7, #0]
 80043fc:	0419      	lsls	r1, r3, #16
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	430a      	orrs	r2, r1
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
 8004408:	e028      	b.n	800445c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4413      	add	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e00d      	b.n	800443a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	3340      	adds	r3, #64	; 0x40
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4413      	add	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	3301      	adds	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	7bfa      	ldrb	r2, [r7, #15]
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	3b01      	subs	r3, #1
 8004440:	429a      	cmp	r2, r3
 8004442:	d3ec      	bcc.n	800441e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004444:	883b      	ldrh	r3, [r7, #0]
 8004446:	0418      	lsls	r0, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6819      	ldr	r1, [r3, #0]
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	3b01      	subs	r3, #1
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4302      	orrs	r2, r0
 8004454:	3340      	adds	r3, #64	; 0x40
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	887a      	ldrh	r2, [r7, #2]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e267      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d075      	beq.n	80045ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044c2:	4b88      	ldr	r3, [pc, #544]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d00c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ce:	4b85      	ldr	r3, [pc, #532]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d112      	bne.n	8004500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044da:	4b82      	ldr	r3, [pc, #520]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e6:	d10b      	bne.n	8004500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	4b7e      	ldr	r3, [pc, #504]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d05b      	beq.n	80045ac <HAL_RCC_OscConfig+0x108>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d157      	bne.n	80045ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e242      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d106      	bne.n	8004518 <HAL_RCC_OscConfig+0x74>
 800450a:	4b76      	ldr	r3, [pc, #472]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a75      	ldr	r2, [pc, #468]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e01d      	b.n	8004554 <HAL_RCC_OscConfig+0xb0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x98>
 8004522:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6f      	ldr	r2, [pc, #444]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6c      	ldr	r2, [pc, #432]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0xb0>
 800453c:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a68      	ldr	r2, [pc, #416]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b66      	ldr	r3, [pc, #408]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a65      	ldr	r2, [pc, #404]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 800454e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fd fe10 	bl	8002180 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004564:	f7fd fe0c 	bl	8002180 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e207      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	4b5b      	ldr	r3, [pc, #364]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0xc0>
 8004582:	e014      	b.n	80045ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fd fdfc 	bl	8002180 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458c:	f7fd fdf8 	bl	8002180 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e1f3      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459e:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0xe8>
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d063      	beq.n	8004682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ba:	4b4a      	ldr	r3, [pc, #296]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d11c      	bne.n	800460c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b44      	ldr	r3, [pc, #272]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045de:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_RCC_OscConfig+0x152>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e1c7      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f6:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4937      	ldr	r1, [pc, #220]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460a:	e03a      	b.n	8004682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004614:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCC_OscConfig+0x244>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fd fdb1 	bl	8002180 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004622:	f7fd fdad 	bl	8002180 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e1a8      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004634:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4925      	ldr	r1, [pc, #148]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	e015      	b.n	8004682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004656:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCC_OscConfig+0x244>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd fd90 	bl	8002180 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004664:	f7fd fd8c 	bl	8002180 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e187      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d036      	beq.n	80046fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d016      	beq.n	80046c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_RCC_OscConfig+0x248>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fd fd70 	bl	8002180 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fd fd6c 	bl	8002180 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e167      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_OscConfig+0x240>)
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x200>
 80046c2:	e01b      	b.n	80046fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_OscConfig+0x248>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ca:	f7fd fd59 	bl	8002180 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d0:	e00e      	b.n	80046f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d2:	f7fd fd55 	bl	8002180 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d907      	bls.n	80046f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e150      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
 80046e4:	40023800 	.word	0x40023800
 80046e8:	42470000 	.word	0x42470000
 80046ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	4b88      	ldr	r3, [pc, #544]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ea      	bne.n	80046d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8097 	beq.w	8004838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470e:	4b81      	ldr	r3, [pc, #516]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	4b7d      	ldr	r3, [pc, #500]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	4a7c      	ldr	r2, [pc, #496]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	4b7a      	ldr	r3, [pc, #488]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473a:	4b77      	ldr	r3, [pc, #476]	; (8004918 <HAL_RCC_OscConfig+0x474>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d118      	bne.n	8004778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004746:	4b74      	ldr	r3, [pc, #464]	; (8004918 <HAL_RCC_OscConfig+0x474>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a73      	ldr	r2, [pc, #460]	; (8004918 <HAL_RCC_OscConfig+0x474>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004752:	f7fd fd15 	bl	8002180 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475a:	f7fd fd11 	bl	8002180 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e10c      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCC_OscConfig+0x474>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d106      	bne.n	800478e <HAL_RCC_OscConfig+0x2ea>
 8004780:	4b64      	ldr	r3, [pc, #400]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a63      	ldr	r2, [pc, #396]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
 800478c:	e01c      	b.n	80047c8 <HAL_RCC_OscConfig+0x324>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b05      	cmp	r3, #5
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x30c>
 8004796:	4b5f      	ldr	r3, [pc, #380]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a5e      	ldr	r2, [pc, #376]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 800479c:	f043 0304 	orr.w	r3, r3, #4
 80047a0:	6713      	str	r3, [r2, #112]	; 0x70
 80047a2:	4b5c      	ldr	r3, [pc, #368]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	4a5b      	ldr	r2, [pc, #364]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0x324>
 80047b0:	4b58      	ldr	r3, [pc, #352]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a57      	ldr	r2, [pc, #348]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	4b55      	ldr	r3, [pc, #340]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4a54      	ldr	r2, [pc, #336]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047c2:	f023 0304 	bic.w	r3, r3, #4
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fd fcd6 	bl	8002180 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7fd fcd2 	bl	8002180 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e0cb      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ee:	4b49      	ldr	r3, [pc, #292]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0ee      	beq.n	80047d8 <HAL_RCC_OscConfig+0x334>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fc:	f7fd fcc0 	bl	8002180 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004802:	e00a      	b.n	800481a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fd fcbc 	bl	8002180 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0b5      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481a:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ee      	bne.n	8004804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	4b39      	ldr	r3, [pc, #228]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	4a38      	ldr	r2, [pc, #224]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80a1 	beq.w	8004984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004842:	4b34      	ldr	r3, [pc, #208]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b08      	cmp	r3, #8
 800484c:	d05c      	beq.n	8004908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d141      	bne.n	80048da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004856:	4b31      	ldr	r3, [pc, #196]	; (800491c <HAL_RCC_OscConfig+0x478>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fd fc90 	bl	8002180 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd fc8c 	bl	8002180 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e087      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	4b27      	ldr	r3, [pc, #156]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	019b      	lsls	r3, r3, #6
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	491b      	ldr	r1, [pc, #108]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_RCC_OscConfig+0x478>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fd fc65 	bl	8002180 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ba:	f7fd fc61 	bl	8002180 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e05c      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048cc:	4b11      	ldr	r3, [pc, #68]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x416>
 80048d8:	e054      	b.n	8004984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <HAL_RCC_OscConfig+0x478>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd fc4e 	bl	8002180 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fd fc4a 	bl	8002180 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e045      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCC_OscConfig+0x470>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x444>
 8004906:	e03d      	b.n	8004984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d107      	bne.n	8004920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e038      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
 8004914:	40023800 	.word	0x40023800
 8004918:	40007000 	.word	0x40007000
 800491c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x4ec>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d028      	beq.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d121      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d11a      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	3b01      	subs	r3, #1
 800496a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800

08004994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0cc      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049a8:	4b68      	ldr	r3, [pc, #416]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90c      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b65      	ldr	r3, [pc, #404]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b63      	ldr	r3, [pc, #396]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0b8      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e8:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a52      	ldr	r2, [pc, #328]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b50      	ldr	r3, [pc, #320]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	494d      	ldr	r1, [pc, #308]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d044      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d119      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d003      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a52:	4b3f      	ldr	r3, [pc, #252]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e06f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a62:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e067      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 0203 	bic.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4934      	ldr	r1, [pc, #208]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a84:	f7fd fb7c 	bl	8002180 <HAL_GetTick>
 8004a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8c:	f7fd fb78 	bl	8002180 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e04f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 020c 	and.w	r2, r3, #12
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1eb      	bne.n	8004a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d20c      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e032      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4916      	ldr	r1, [pc, #88]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	490e      	ldr	r1, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b1a:	f000 f821 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	490a      	ldr	r1, [pc, #40]	; (8004b54 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2c:	5ccb      	ldrb	r3, [r1, r3]
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd fadc 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023c00 	.word	0x40023c00
 8004b50:	40023800 	.word	0x40023800
 8004b54:	0800bca4 	.word	0x0800bca4
 8004b58:	20000000 	.word	0x20000000
 8004b5c:	20000004 	.word	0x20000004

08004b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b090      	sub	sp, #64	; 0x40
 8004b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b70:	2300      	movs	r3, #0
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b78:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d00d      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	f200 80a1 	bhi.w	8004ccc <HAL_RCC_GetSysClockFreq+0x16c>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x34>
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b92:	e09b      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b94:	4b53      	ldr	r3, [pc, #332]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b98:	e09b      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b9a:	4b53      	ldr	r3, [pc, #332]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b9e:	e098      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba0:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004baa:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb6:	4b4a      	ldr	r3, [pc, #296]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bcc:	fb03 f201 	mul.w	r2, r3, r1
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	fb00 f303 	mul.w	r3, r0, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	4a43      	ldr	r2, [pc, #268]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bda:	fba0 1202 	umull	r1, r2, r0, r2
 8004bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004be0:	460a      	mov	r2, r1
 8004be2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be6:	4413      	add	r3, r2
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	2200      	movs	r2, #0
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	61fa      	str	r2, [r7, #28]
 8004bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004bfa:	f7fb fb49 	bl	8000290 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4613      	mov	r3, r2
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c06:	e053      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	2200      	movs	r2, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	617a      	str	r2, [r7, #20]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c1a:	f04f 0b00 	mov.w	fp, #0
 8004c1e:	4652      	mov	r2, sl
 8004c20:	465b      	mov	r3, fp
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	0159      	lsls	r1, r3, #5
 8004c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c30:	0150      	lsls	r0, r2, #5
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	ebb2 080a 	subs.w	r8, r2, sl
 8004c3a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c52:	ebb2 0408 	subs.w	r4, r2, r8
 8004c56:	eb63 0509 	sbc.w	r5, r3, r9
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	00eb      	lsls	r3, r5, #3
 8004c64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c68:	00e2      	lsls	r2, r4, #3
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	461d      	mov	r5, r3
 8004c6e:	eb14 030a 	adds.w	r3, r4, sl
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	eb45 030b 	adc.w	r3, r5, fp
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c86:	4629      	mov	r1, r5
 8004c88:	028b      	lsls	r3, r1, #10
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c90:	4621      	mov	r1, r4
 8004c92:	028a      	lsls	r2, r1, #10
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	60fa      	str	r2, [r7, #12]
 8004ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ca4:	f7fb faf4 	bl	8000290 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4613      	mov	r3, r2
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cca:	e002      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3740      	adds	r7, #64	; 0x40
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	00f42400 	.word	0x00f42400
 8004ce8:	017d7840 	.word	0x017d7840

08004cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000000 	.word	0x20000000

08004d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d08:	f7ff fff0 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	0a9b      	lsrs	r3, r3, #10
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4903      	ldr	r1, [pc, #12]	; (8004d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	0800bcb4 	.word	0x0800bcb4

08004d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d30:	f7ff ffdc 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0b5b      	lsrs	r3, r3, #13
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4903      	ldr	r1, [pc, #12]	; (8004d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	0800bcb4 	.word	0x0800bcb4

08004d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e041      	b.n	8004dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fc ffa8 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f000 fa88 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d001      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e044      	b.n	8004e96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d018      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x6c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d013      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x6c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x6c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_TIM_Base_Start_IT+0xb8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x6c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x6c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d111      	bne.n	8004e84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d010      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e82:	e007      	b.n	8004e94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40014000 	.word	0x40014000

08004eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d122      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d11b      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0202 	mvn.w	r2, #2
 8004ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f9b5 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f9a7 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f9b8 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d122      	bne.n	8004f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d11b      	bne.n	8004f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0204 	mvn.w	r2, #4
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f98b 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f97d 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f98e 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0208 	mvn.w	r2, #8
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2204      	movs	r2, #4
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f961 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f953 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f964 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d122      	bne.n	8005010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d11b      	bne.n	8005010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0210 	mvn.w	r2, #16
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2208      	movs	r2, #8
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f937 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f929 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f93a 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d10e      	bne.n	800503c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d107      	bne.n	800503c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0201 	mvn.w	r2, #1
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc fb58 	bl	80016ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d10e      	bne.n	8005068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005054:	2b80      	cmp	r3, #128	; 0x80
 8005056:	d107      	bne.n	8005068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fab2 	bl	80055cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f8ff 	bl	8005292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0220 	mvn.w	r2, #32
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa7c 	bl	80055b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIM_ConfigClockSource+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e0b4      	b.n	800524e <HAL_TIM_ConfigClockSource+0x186>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800510a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	d03e      	beq.n	800519c <HAL_TIM_ConfigClockSource+0xd4>
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	f200 8087 	bhi.w	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	f000 8086 	beq.w	800523a <HAL_TIM_ConfigClockSource+0x172>
 800512e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005132:	d87f      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b70      	cmp	r3, #112	; 0x70
 8005136:	d01a      	beq.n	800516e <HAL_TIM_ConfigClockSource+0xa6>
 8005138:	2b70      	cmp	r3, #112	; 0x70
 800513a:	d87b      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d050      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005140:	2b60      	cmp	r3, #96	; 0x60
 8005142:	d877      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b50      	cmp	r3, #80	; 0x50
 8005146:	d03c      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005148:	2b50      	cmp	r3, #80	; 0x50
 800514a:	d873      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d058      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x13a>
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d86f      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	d064      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005158:	2b30      	cmp	r3, #48	; 0x30
 800515a:	d86b      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d060      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005160:	2b20      	cmp	r3, #32
 8005162:	d867      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d05c      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 8005168:	2b10      	cmp	r3, #16
 800516a:	d05a      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15a>
 800516c:	e062      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6899      	ldr	r1, [r3, #8]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f000 f98d 	bl	800549c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	609a      	str	r2, [r3, #8]
      break;
 800519a:	e04f      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6899      	ldr	r1, [r3, #8]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f000 f976 	bl	800549c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051be:	609a      	str	r2, [r3, #8]
      break;
 80051c0:	e03c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f000 f8ea 	bl	80053a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2150      	movs	r1, #80	; 0x50
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f943 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 80051e0:	e02c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f000 f909 	bl	8005406 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2160      	movs	r1, #96	; 0x60
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f933 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8005200:	e01c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	461a      	mov	r2, r3
 8005210:	f000 f8ca 	bl	80053a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f923 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8005220:	e00c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f000 f91a 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8005232:	e003      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e000      	b.n	800523c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800523a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a34      	ldr	r2, [pc, #208]	; (800538c <TIM_Base_SetConfig+0xe4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00f      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d00b      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a31      	ldr	r2, [pc, #196]	; (8005390 <TIM_Base_SetConfig+0xe8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a30      	ldr	r2, [pc, #192]	; (8005394 <TIM_Base_SetConfig+0xec>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_Base_SetConfig+0x38>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a2f      	ldr	r2, [pc, #188]	; (8005398 <TIM_Base_SetConfig+0xf0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d108      	bne.n	80052f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a25      	ldr	r2, [pc, #148]	; (800538c <TIM_Base_SetConfig+0xe4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01b      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005300:	d017      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a22      	ldr	r2, [pc, #136]	; (8005390 <TIM_Base_SetConfig+0xe8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a21      	ldr	r2, [pc, #132]	; (8005394 <TIM_Base_SetConfig+0xec>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00f      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a20      	ldr	r2, [pc, #128]	; (8005398 <TIM_Base_SetConfig+0xf0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1f      	ldr	r2, [pc, #124]	; (800539c <TIM_Base_SetConfig+0xf4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <TIM_Base_SetConfig+0xf8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <TIM_Base_SetConfig+0xfc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a08      	ldr	r2, [pc, #32]	; (800538c <TIM_Base_SetConfig+0xe4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d103      	bne.n	8005378 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	615a      	str	r2, [r3, #20]
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800

080053a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 030a 	bic.w	r3, r3, #10
 80053e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005406:	b480      	push	{r7}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0210 	bic.w	r2, r3, #16
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	031b      	lsls	r3, r3, #12
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	f043 0307 	orr.w	r3, r3, #7
 8005488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	609a      	str	r2, [r3, #8]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	431a      	orrs	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e050      	b.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d018      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d013      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a16      	ldr	r2, [pc, #88]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d10c      	bne.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4313      	orrs	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40014000 	.word	0x40014000

080055b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e03f      	b.n	8005672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fc fb8a 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2224      	movs	r2, #36	; 0x24
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 ff9b 	bl	8006560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b08a      	sub	sp, #40	; 0x28
 800567e:	af02      	add	r7, sp, #8
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	603b      	str	r3, [r7, #0]
 8005686:	4613      	mov	r3, r2
 8005688:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b20      	cmp	r3, #32
 8005698:	d17c      	bne.n	8005794 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_UART_Transmit+0x2c>
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e075      	b.n	8005796 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_UART_Transmit+0x3e>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e06e      	b.n	8005796 <HAL_UART_Transmit+0x11c>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2221      	movs	r2, #33	; 0x21
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ce:	f7fc fd57 	bl	8002180 <HAL_GetTick>
 80056d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	88fa      	ldrh	r2, [r7, #6]
 80056de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e8:	d108      	bne.n	80056fc <HAL_UART_Transmit+0x82>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	e003      	b.n	8005704 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800570c:	e02a      	b.n	8005764 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	; 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fc53 	bl	8005fc4 <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e036      	b.n	8005796 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10b      	bne.n	8005746 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800573c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	3302      	adds	r3, #2
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	e007      	b.n	8005756 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3301      	adds	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1cf      	bne.n	800570e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	2140      	movs	r1, #64	; 0x40
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fc23 	bl	8005fc4 <UART_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e006      	b.n	8005796 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	e000      	b.n	8005796 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005794:	2302      	movs	r3, #2
  }
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b08c      	sub	sp, #48	; 0x30
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d152      	bne.n	800585e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e04b      	b.n	8005860 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e044      	b.n	8005860 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fc58 	bl	80060a0 <UART_Start_Receive_DMA>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80057f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d12c      	bne.n	8005858 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	2b01      	cmp	r3, #1
 8005804:	d125      	bne.n	8005852 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	617b      	str	r3, [r7, #20]
   return(result);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f043 0310 	orr.w	r3, r3, #16
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800583c:	627a      	str	r2, [r7, #36]	; 0x24
 800583e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6a39      	ldr	r1, [r7, #32]
 8005842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	61fb      	str	r3, [r7, #28]
   return(result);
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005850:	e002      	b.n	8005858 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800585c:	e000      	b.n	8005860 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800585e:	2302      	movs	r3, #2
  }
}
 8005860:	4618      	mov	r0, r3
 8005862:	3730      	adds	r7, #48	; 0x30
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b0ba      	sub	sp, #232	; 0xe8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800588e:	2300      	movs	r3, #0
 8005890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005894:	2300      	movs	r3, #0
 8005896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <HAL_UART_IRQHandler+0x66>
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fd8f 	bl	80063ea <UART_Receive_IT>
      return;
 80058cc:	e256      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80de 	beq.w	8005a94 <HAL_UART_IRQHandler+0x22c>
 80058d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80d1 	beq.w	8005a94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <HAL_UART_IRQHandler+0xae>
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f043 0201 	orr.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_UART_IRQHandler+0xd2>
 8005922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0202 	orr.w	r2, r3, #2
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_UART_IRQHandler+0xf6>
 8005946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f043 0204 	orr.w	r2, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d011      	beq.n	800598e <HAL_UART_IRQHandler+0x126>
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f043 0208 	orr.w	r2, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 81ed 	beq.w	8005d72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_UART_IRQHandler+0x14e>
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fd1a 	bl	80063ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <HAL_UART_IRQHandler+0x17a>
 80059da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04f      	beq.n	8005a82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fc22 	bl	800622c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d141      	bne.n	8005a7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3314      	adds	r3, #20
 80059fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1d9      	bne.n	80059f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d013      	beq.n	8005a72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	4a7d      	ldr	r2, [pc, #500]	; (8005c44 <HAL_UART_IRQHandler+0x3dc>)
 8005a50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fc fe64 	bl	8002724 <HAL_DMA_Abort_IT>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d016      	beq.n	8005a90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	e00e      	b.n	8005a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f9a4 	bl	8005dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	e00a      	b.n	8005a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f9a0 	bl	8005dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	e006      	b.n	8005a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f99c 	bl	8005dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a8e:	e170      	b.n	8005d72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	bf00      	nop
    return;
 8005a92:	e16e      	b.n	8005d72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	f040 814a 	bne.w	8005d32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8143 	beq.w	8005d32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 813c 	beq.w	8005d32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	f040 80b4 	bne.w	8005c48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8140 	beq.w	8005d76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005afe:	429a      	cmp	r2, r3
 8005b00:	f080 8139 	bcs.w	8005d76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b16:	f000 8088 	beq.w	8005c2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1d9      	bne.n	8005b1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3314      	adds	r3, #20
 8005b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e1      	bne.n	8005b66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3314      	adds	r3, #20
 8005ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e3      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfa:	f023 0310 	bic.w	r3, r3, #16
 8005bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e3      	bne.n	8005be8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fc fd0d 	bl	8002644 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fb fcba 	bl	80015b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c40:	e099      	b.n	8005d76 <HAL_UART_IRQHandler+0x50e>
 8005c42:	bf00      	nop
 8005c44:	080062f3 	.word	0x080062f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 808b 	beq.w	8005d7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8086 	beq.w	8005d7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c92:	647a      	str	r2, [r7, #68]	; 0x44
 8005c94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e3      	bne.n	8005c6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cca:	633a      	str	r2, [r7, #48]	; 0x30
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e3      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d10:	61fa      	str	r2, [r7, #28]
 8005d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	69b9      	ldr	r1, [r7, #24]
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e3      	bne.n	8005cec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb fc42 	bl	80015b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d30:	e023      	b.n	8005d7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <HAL_UART_IRQHandler+0x4ea>
 8005d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fae5 	bl	800631a <UART_Transmit_IT>
    return;
 8005d50:	e014      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00e      	beq.n	8005d7c <HAL_UART_IRQHandler+0x514>
 8005d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fb25 	bl	80063ba <UART_EndTransmit_IT>
    return;
 8005d70:	e004      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
    return;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
      return;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_UART_IRQHandler+0x514>
      return;
 8005d7a:	bf00      	nop
  }
}
 8005d7c:	37e8      	adds	r7, #232	; 0xe8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop

08005d84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b09c      	sub	sp, #112	; 0x70
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d172      	bne.n	8005ed6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	2200      	movs	r2, #0
 8005df4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e16:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	667b      	str	r3, [r7, #100]	; 0x64
 8005e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8005e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e74:	663b      	str	r3, [r7, #96]	; 0x60
 8005e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e5      	bne.n	8005e5e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d119      	bne.n	8005ed6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f023 0310 	bic.w	r3, r3, #16
 8005eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ec2:	61fa      	str	r2, [r7, #28]
 8005ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	69b9      	ldr	r1, [r7, #24]
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	617b      	str	r3, [r7, #20]
   return(result);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e5      	bne.n	8005ea2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d106      	bne.n	8005eec <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ee6:	f7fb fb65 	bl	80015b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eea:	e002      	b.n	8005ef2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005eec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005eee:	f7ff ff53 	bl	8005d98 <HAL_UART_RxCpltCallback>
}
 8005ef2:	bf00      	nop
 8005ef4:	3770      	adds	r7, #112	; 0x70
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d108      	bne.n	8005f22 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4619      	mov	r1, r3
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7fb fb4a 	bl	80015b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f20:	e002      	b.n	8005f28 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff ff42 	bl	8005dac <HAL_UART_RxHalfCpltCallback>
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4c:	2b80      	cmp	r3, #128	; 0x80
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b21      	cmp	r3, #33	; 0x21
 8005f62:	d108      	bne.n	8005f76 <UART_DMAError+0x46>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f70:	68b8      	ldr	r0, [r7, #8]
 8005f72:	f000 f933 	bl	80061dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b40      	cmp	r3, #64	; 0x40
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b22      	cmp	r3, #34	; 0x22
 8005f96:	d108      	bne.n	8005faa <UART_DMAError+0x7a>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005fa4:	68b8      	ldr	r0, [r7, #8]
 8005fa6:	f000 f941 	bl	800622c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f043 0210 	orr.w	r2, r3, #16
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fb6:	68b8      	ldr	r0, [r7, #8]
 8005fb8:	f7ff ff02 	bl	8005dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b090      	sub	sp, #64	; 0x40
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd4:	e050      	b.n	8006078 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fdc:	d04c      	beq.n	8006078 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fe4:	f7fc f8cc 	bl	8002180 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d241      	bcs.n	8006078 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	330c      	adds	r3, #12
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006014:	637a      	str	r2, [r7, #52]	; 0x34
 8006016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800601a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e5      	bne.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	613b      	str	r3, [r7, #16]
   return(result);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006048:	623a      	str	r2, [r7, #32]
 800604a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69f9      	ldr	r1, [r7, #28]
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	61bb      	str	r3, [r7, #24]
   return(result);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e00f      	b.n	8006098 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	429a      	cmp	r2, r3
 8006086:	bf0c      	ite	eq
 8006088:	2301      	moveq	r3, #1
 800608a:	2300      	movne	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	429a      	cmp	r2, r3
 8006094:	d09f      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3740      	adds	r7, #64	; 0x40
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b098      	sub	sp, #96	; 0x60
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	88fa      	ldrh	r2, [r7, #6]
 80060b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2222      	movs	r2, #34	; 0x22
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	4a40      	ldr	r2, [pc, #256]	; (80061d0 <UART_Start_Receive_DMA+0x130>)
 80060ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	4a3f      	ldr	r2, [pc, #252]	; (80061d4 <UART_Start_Receive_DMA+0x134>)
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	4a3e      	ldr	r2, [pc, #248]	; (80061d8 <UART_Start_Receive_DMA+0x138>)
 80060de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	2200      	movs	r2, #0
 80060e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060e8:	f107 0308 	add.w	r3, r7, #8
 80060ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	f7fc fa48 	bl	8002594 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006104:	2300      	movs	r3, #0
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d019      	beq.n	800615e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800613a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006140:	65bb      	str	r3, [r7, #88]	; 0x58
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	330c      	adds	r3, #12
 8006148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800614a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800614c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	657b      	str	r3, [r7, #84]	; 0x54
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800617e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e5      	bne.n	800615e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3314      	adds	r3, #20
 8006198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	617b      	str	r3, [r7, #20]
   return(result);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a8:	653b      	str	r3, [r7, #80]	; 0x50
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3314      	adds	r3, #20
 80061b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061b2:	627a      	str	r2, [r7, #36]	; 0x24
 80061b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6a39      	ldr	r1, [r7, #32]
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	61fb      	str	r3, [r7, #28]
   return(result);
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3760      	adds	r7, #96	; 0x60
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	08005dd5 	.word	0x08005dd5
 80061d4:	08005efb 	.word	0x08005efb
 80061d8:	08005f31 	.word	0x08005f31

080061dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b089      	sub	sp, #36	; 0x24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	330c      	adds	r3, #12
 80061ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	330c      	adds	r3, #12
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	61ba      	str	r2, [r7, #24]
 8006206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6979      	ldr	r1, [r7, #20]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	613b      	str	r3, [r7, #16]
   return(result);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e5      	bne.n	80061e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006220:	bf00      	nop
 8006222:	3724      	adds	r7, #36	; 0x24
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b095      	sub	sp, #84	; 0x54
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800624a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006254:	643a      	str	r2, [r7, #64]	; 0x40
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800625a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	61fb      	str	r3, [r7, #28]
   return(result);
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f023 0301 	bic.w	r3, r3, #1
 800627e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800628e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e5      	bne.n	8006268 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d119      	bne.n	80062d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f023 0310 	bic.w	r3, r3, #16
 80062ba:	647b      	str	r3, [r7, #68]	; 0x44
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c4:	61ba      	str	r2, [r7, #24]
 80062c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6979      	ldr	r1, [r7, #20]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	613b      	str	r3, [r7, #16]
   return(result);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e5      	bne.n	80062a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062e6:	bf00      	nop
 80062e8:	3754      	adds	r7, #84	; 0x54
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fd57 	bl	8005dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b21      	cmp	r3, #33	; 0x21
 800632c:	d13e      	bne.n	80063ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	d114      	bne.n	8006362 <UART_Transmit_IT+0x48>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d110      	bne.n	8006362 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	621a      	str	r2, [r3, #32]
 8006360:	e008      	b.n	8006374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	1c59      	adds	r1, r3, #1
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6211      	str	r1, [r2, #32]
 800636c:	781a      	ldrb	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29b      	uxth	r3, r3
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4619      	mov	r1, r3
 8006382:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10f      	bne.n	80063a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	e000      	b.n	80063ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063ac:	2302      	movs	r3, #2
  }
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff fcd2 	bl	8005d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08c      	sub	sp, #48	; 0x30
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b22      	cmp	r3, #34	; 0x22
 80063fc:	f040 80ab 	bne.w	8006556 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006408:	d117      	bne.n	800643a <UART_Receive_IT+0x50>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d113      	bne.n	800643a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006428:	b29a      	uxth	r2, r3
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	1c9a      	adds	r2, r3, #2
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	629a      	str	r2, [r3, #40]	; 0x28
 8006438:	e026      	b.n	8006488 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644c:	d007      	beq.n	800645e <UART_Receive_IT+0x74>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <UART_Receive_IT+0x82>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	e008      	b.n	800647e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006478:	b2da      	uxtb	r2, r3
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29b      	uxth	r3, r3
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4619      	mov	r1, r3
 8006496:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006498:	2b00      	cmp	r3, #0
 800649a:	d15a      	bne.n	8006552 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0220 	bic.w	r2, r2, #32
 80064aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d135      	bne.n	8006548 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	613b      	str	r3, [r7, #16]
   return(result);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f023 0310 	bic.w	r3, r3, #16
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	623a      	str	r2, [r7, #32]
 8006504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	69f9      	ldr	r1, [r7, #28]
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e5      	bne.n	80064e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b10      	cmp	r3, #16
 8006522:	d10a      	bne.n	800653a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7fb f837 	bl	80015b4 <HAL_UARTEx_RxEventCallback>
 8006546:	e002      	b.n	800654e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fc25 	bl	8005d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e002      	b.n	8006558 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e000      	b.n	8006558 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
  }
}
 8006558:	4618      	mov	r0, r3
 800655a:	3730      	adds	r7, #48	; 0x30
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006564:	b0c0      	sub	sp, #256	; 0x100
 8006566:	af00      	add	r7, sp, #0
 8006568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	ea40 0301 	orr.w	r3, r0, r1
 8006588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	431a      	orrs	r2, r3
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	431a      	orrs	r2, r3
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065b8:	f021 010c 	bic.w	r1, r1, #12
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065c6:	430b      	orrs	r3, r1
 80065c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065da:	6999      	ldr	r1, [r3, #24]
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	ea40 0301 	orr.w	r3, r0, r1
 80065e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b8f      	ldr	r3, [pc, #572]	; (800682c <UART_SetConfig+0x2cc>)
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d005      	beq.n	8006600 <UART_SetConfig+0xa0>
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b8d      	ldr	r3, [pc, #564]	; (8006830 <UART_SetConfig+0x2d0>)
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d104      	bne.n	800660a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006600:	f7fe fb94 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8006604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006608:	e003      	b.n	8006612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660a:	f7fe fb7b 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 800660e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661c:	f040 810c 	bne.w	8006838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006624:	2200      	movs	r2, #0
 8006626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800662a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800662e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006632:	4622      	mov	r2, r4
 8006634:	462b      	mov	r3, r5
 8006636:	1891      	adds	r1, r2, r2
 8006638:	65b9      	str	r1, [r7, #88]	; 0x58
 800663a:	415b      	adcs	r3, r3
 800663c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800663e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006642:	4621      	mov	r1, r4
 8006644:	eb12 0801 	adds.w	r8, r2, r1
 8006648:	4629      	mov	r1, r5
 800664a:	eb43 0901 	adc.w	r9, r3, r1
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800665a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800665e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006662:	4690      	mov	r8, r2
 8006664:	4699      	mov	r9, r3
 8006666:	4623      	mov	r3, r4
 8006668:	eb18 0303 	adds.w	r3, r8, r3
 800666c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006670:	462b      	mov	r3, r5
 8006672:	eb49 0303 	adc.w	r3, r9, r3
 8006676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800668a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800668e:	460b      	mov	r3, r1
 8006690:	18db      	adds	r3, r3, r3
 8006692:	653b      	str	r3, [r7, #80]	; 0x50
 8006694:	4613      	mov	r3, r2
 8006696:	eb42 0303 	adc.w	r3, r2, r3
 800669a:	657b      	str	r3, [r7, #84]	; 0x54
 800669c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066a4:	f7f9 fdf4 	bl	8000290 <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4b61      	ldr	r3, [pc, #388]	; (8006834 <UART_SetConfig+0x2d4>)
 80066ae:	fba3 2302 	umull	r2, r3, r3, r2
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	011c      	lsls	r4, r3, #4
 80066b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	1891      	adds	r1, r2, r2
 80066ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80066d0:	415b      	adcs	r3, r3
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066d8:	4641      	mov	r1, r8
 80066da:	eb12 0a01 	adds.w	sl, r2, r1
 80066de:	4649      	mov	r1, r9
 80066e0:	eb43 0b01 	adc.w	fp, r3, r1
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066f8:	4692      	mov	sl, r2
 80066fa:	469b      	mov	fp, r3
 80066fc:	4643      	mov	r3, r8
 80066fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006706:	464b      	mov	r3, r9
 8006708:	eb4b 0303 	adc.w	r3, fp, r3
 800670c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800671c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006724:	460b      	mov	r3, r1
 8006726:	18db      	adds	r3, r3, r3
 8006728:	643b      	str	r3, [r7, #64]	; 0x40
 800672a:	4613      	mov	r3, r2
 800672c:	eb42 0303 	adc.w	r3, r2, r3
 8006730:	647b      	str	r3, [r7, #68]	; 0x44
 8006732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800673a:	f7f9 fda9 	bl	8000290 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4611      	mov	r1, r2
 8006744:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <UART_SetConfig+0x2d4>)
 8006746:	fba3 2301 	umull	r2, r3, r3, r1
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	2264      	movs	r2, #100	; 0x64
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	1acb      	subs	r3, r1, r3
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800675a:	4b36      	ldr	r3, [pc, #216]	; (8006834 <UART_SetConfig+0x2d4>)
 800675c:	fba3 2302 	umull	r2, r3, r3, r2
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006768:	441c      	add	r4, r3
 800676a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800676e:	2200      	movs	r2, #0
 8006770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	1891      	adds	r1, r2, r2
 8006782:	63b9      	str	r1, [r7, #56]	; 0x38
 8006784:	415b      	adcs	r3, r3
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800678c:	4641      	mov	r1, r8
 800678e:	1851      	adds	r1, r2, r1
 8006790:	6339      	str	r1, [r7, #48]	; 0x30
 8006792:	4649      	mov	r1, r9
 8006794:	414b      	adcs	r3, r1
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067a4:	4659      	mov	r1, fp
 80067a6:	00cb      	lsls	r3, r1, #3
 80067a8:	4651      	mov	r1, sl
 80067aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ae:	4651      	mov	r1, sl
 80067b0:	00ca      	lsls	r2, r1, #3
 80067b2:	4610      	mov	r0, r2
 80067b4:	4619      	mov	r1, r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	4642      	mov	r2, r8
 80067ba:	189b      	adds	r3, r3, r2
 80067bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c0:	464b      	mov	r3, r9
 80067c2:	460a      	mov	r2, r1
 80067c4:	eb42 0303 	adc.w	r3, r2, r3
 80067c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067e0:	460b      	mov	r3, r1
 80067e2:	18db      	adds	r3, r3, r3
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e6:	4613      	mov	r3, r2
 80067e8:	eb42 0303 	adc.w	r3, r2, r3
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067f6:	f7f9 fd4b 	bl	8000290 <__aeabi_uldivmod>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <UART_SetConfig+0x2d4>)
 8006800:	fba3 1302 	umull	r1, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	2164      	movs	r1, #100	; 0x64
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	3332      	adds	r3, #50	; 0x32
 8006812:	4a08      	ldr	r2, [pc, #32]	; (8006834 <UART_SetConfig+0x2d4>)
 8006814:	fba2 2303 	umull	r2, r3, r2, r3
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	f003 0207 	and.w	r2, r3, #7
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4422      	add	r2, r4
 8006826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006828:	e105      	b.n	8006a36 <UART_SetConfig+0x4d6>
 800682a:	bf00      	nop
 800682c:	40011000 	.word	0x40011000
 8006830:	40011400 	.word	0x40011400
 8006834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683c:	2200      	movs	r2, #0
 800683e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800684a:	4642      	mov	r2, r8
 800684c:	464b      	mov	r3, r9
 800684e:	1891      	adds	r1, r2, r2
 8006850:	6239      	str	r1, [r7, #32]
 8006852:	415b      	adcs	r3, r3
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
 8006856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800685a:	4641      	mov	r1, r8
 800685c:	1854      	adds	r4, r2, r1
 800685e:	4649      	mov	r1, r9
 8006860:	eb43 0501 	adc.w	r5, r3, r1
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	00eb      	lsls	r3, r5, #3
 800686e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006872:	00e2      	lsls	r2, r4, #3
 8006874:	4614      	mov	r4, r2
 8006876:	461d      	mov	r5, r3
 8006878:	4643      	mov	r3, r8
 800687a:	18e3      	adds	r3, r4, r3
 800687c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006880:	464b      	mov	r3, r9
 8006882:	eb45 0303 	adc.w	r3, r5, r3
 8006886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068a6:	4629      	mov	r1, r5
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	4621      	mov	r1, r4
 80068ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b0:	4621      	mov	r1, r4
 80068b2:	008a      	lsls	r2, r1, #2
 80068b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068b8:	f7f9 fcea 	bl	8000290 <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4b60      	ldr	r3, [pc, #384]	; (8006a44 <UART_SetConfig+0x4e4>)
 80068c2:	fba3 2302 	umull	r2, r3, r3, r2
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	011c      	lsls	r4, r3, #4
 80068ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	1891      	adds	r1, r2, r2
 80068e2:	61b9      	str	r1, [r7, #24]
 80068e4:	415b      	adcs	r3, r3
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ec:	4641      	mov	r1, r8
 80068ee:	1851      	adds	r1, r2, r1
 80068f0:	6139      	str	r1, [r7, #16]
 80068f2:	4649      	mov	r1, r9
 80068f4:	414b      	adcs	r3, r1
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006904:	4659      	mov	r1, fp
 8006906:	00cb      	lsls	r3, r1, #3
 8006908:	4651      	mov	r1, sl
 800690a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800690e:	4651      	mov	r1, sl
 8006910:	00ca      	lsls	r2, r1, #3
 8006912:	4610      	mov	r0, r2
 8006914:	4619      	mov	r1, r3
 8006916:	4603      	mov	r3, r0
 8006918:	4642      	mov	r2, r8
 800691a:	189b      	adds	r3, r3, r2
 800691c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006920:	464b      	mov	r3, r9
 8006922:	460a      	mov	r2, r1
 8006924:	eb42 0303 	adc.w	r3, r2, r3
 8006928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	67bb      	str	r3, [r7, #120]	; 0x78
 8006936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006944:	4649      	mov	r1, r9
 8006946:	008b      	lsls	r3, r1, #2
 8006948:	4641      	mov	r1, r8
 800694a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800694e:	4641      	mov	r1, r8
 8006950:	008a      	lsls	r2, r1, #2
 8006952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006956:	f7f9 fc9b 	bl	8000290 <__aeabi_uldivmod>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006960:	fba3 1302 	umull	r1, r3, r3, r2
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	2164      	movs	r1, #100	; 0x64
 8006968:	fb01 f303 	mul.w	r3, r1, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	3332      	adds	r3, #50	; 0x32
 8006972:	4a34      	ldr	r2, [pc, #208]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800697e:	441c      	add	r4, r3
 8006980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006984:	2200      	movs	r2, #0
 8006986:	673b      	str	r3, [r7, #112]	; 0x70
 8006988:	677a      	str	r2, [r7, #116]	; 0x74
 800698a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800698e:	4642      	mov	r2, r8
 8006990:	464b      	mov	r3, r9
 8006992:	1891      	adds	r1, r2, r2
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	415b      	adcs	r3, r3
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800699e:	4641      	mov	r1, r8
 80069a0:	1851      	adds	r1, r2, r1
 80069a2:	6039      	str	r1, [r7, #0]
 80069a4:	4649      	mov	r1, r9
 80069a6:	414b      	adcs	r3, r1
 80069a8:	607b      	str	r3, [r7, #4]
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069b6:	4659      	mov	r1, fp
 80069b8:	00cb      	lsls	r3, r1, #3
 80069ba:	4651      	mov	r1, sl
 80069bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c0:	4651      	mov	r1, sl
 80069c2:	00ca      	lsls	r2, r1, #3
 80069c4:	4610      	mov	r0, r2
 80069c6:	4619      	mov	r1, r3
 80069c8:	4603      	mov	r3, r0
 80069ca:	4642      	mov	r2, r8
 80069cc:	189b      	adds	r3, r3, r2
 80069ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d0:	464b      	mov	r3, r9
 80069d2:	460a      	mov	r2, r1
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	663b      	str	r3, [r7, #96]	; 0x60
 80069e4:	667a      	str	r2, [r7, #100]	; 0x64
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069f2:	4649      	mov	r1, r9
 80069f4:	008b      	lsls	r3, r1, #2
 80069f6:	4641      	mov	r1, r8
 80069f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069fc:	4641      	mov	r1, r8
 80069fe:	008a      	lsls	r2, r1, #2
 8006a00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a04:	f7f9 fc44 	bl	8000290 <__aeabi_uldivmod>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	2164      	movs	r1, #100	; 0x64
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	3332      	adds	r3, #50	; 0x32
 8006a20:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4422      	add	r2, r4
 8006a34:	609a      	str	r2, [r3, #8]
}
 8006a36:	bf00      	nop
 8006a38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a42:	bf00      	nop
 8006a44:	51eb851f 	.word	0x51eb851f

08006a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a48:	b084      	sub	sp, #16
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	f107 001c 	add.w	r0, r7, #28
 8006a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d122      	bne.n	8006aa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d105      	bne.n	8006a9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fbee 	bl	800827c <USB_CoreReset>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]
 8006aa4:	e01a      	b.n	8006adc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fbe2 	bl	800827c <USB_CoreReset>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ace:	e005      	b.n	8006adc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10b      	bne.n	8006afa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f043 0206 	orr.w	r2, r3, #6
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b06:	b004      	add	sp, #16
 8006b08:	4770      	bx	lr
	...

08006b0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d165      	bne.n	8006bec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a41      	ldr	r2, [pc, #260]	; (8006c28 <USB_SetTurnaroundTime+0x11c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d906      	bls.n	8006b36 <USB_SetTurnaroundTime+0x2a>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4a40      	ldr	r2, [pc, #256]	; (8006c2c <USB_SetTurnaroundTime+0x120>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d202      	bcs.n	8006b36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b30:	230f      	movs	r3, #15
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e062      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <USB_SetTurnaroundTime+0x120>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d306      	bcc.n	8006b4c <USB_SetTurnaroundTime+0x40>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4a3b      	ldr	r2, [pc, #236]	; (8006c30 <USB_SetTurnaroundTime+0x124>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d202      	bcs.n	8006b4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b46:	230e      	movs	r3, #14
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	e057      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4a38      	ldr	r2, [pc, #224]	; (8006c30 <USB_SetTurnaroundTime+0x124>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d306      	bcc.n	8006b62 <USB_SetTurnaroundTime+0x56>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4a37      	ldr	r2, [pc, #220]	; (8006c34 <USB_SetTurnaroundTime+0x128>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d202      	bcs.n	8006b62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b5c:	230d      	movs	r3, #13
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e04c      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4a33      	ldr	r2, [pc, #204]	; (8006c34 <USB_SetTurnaroundTime+0x128>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d306      	bcc.n	8006b78 <USB_SetTurnaroundTime+0x6c>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4a32      	ldr	r2, [pc, #200]	; (8006c38 <USB_SetTurnaroundTime+0x12c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d802      	bhi.n	8006b78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b72:	230c      	movs	r3, #12
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	e041      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4a2f      	ldr	r2, [pc, #188]	; (8006c38 <USB_SetTurnaroundTime+0x12c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d906      	bls.n	8006b8e <USB_SetTurnaroundTime+0x82>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4a2e      	ldr	r2, [pc, #184]	; (8006c3c <USB_SetTurnaroundTime+0x130>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d802      	bhi.n	8006b8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b88:	230b      	movs	r3, #11
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e036      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <USB_SetTurnaroundTime+0x130>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d906      	bls.n	8006ba4 <USB_SetTurnaroundTime+0x98>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4a29      	ldr	r2, [pc, #164]	; (8006c40 <USB_SetTurnaroundTime+0x134>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d802      	bhi.n	8006ba4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e02b      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4a26      	ldr	r2, [pc, #152]	; (8006c40 <USB_SetTurnaroundTime+0x134>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d906      	bls.n	8006bba <USB_SetTurnaroundTime+0xae>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	4a25      	ldr	r2, [pc, #148]	; (8006c44 <USB_SetTurnaroundTime+0x138>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d202      	bcs.n	8006bba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bb4:	2309      	movs	r3, #9
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e020      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <USB_SetTurnaroundTime+0x138>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d306      	bcc.n	8006bd0 <USB_SetTurnaroundTime+0xc4>
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4a20      	ldr	r2, [pc, #128]	; (8006c48 <USB_SetTurnaroundTime+0x13c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d802      	bhi.n	8006bd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006bca:	2308      	movs	r3, #8
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	e015      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <USB_SetTurnaroundTime+0x13c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d906      	bls.n	8006be6 <USB_SetTurnaroundTime+0xda>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <USB_SetTurnaroundTime+0x140>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d202      	bcs.n	8006be6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006be0:	2307      	movs	r3, #7
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e00a      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006be6:	2306      	movs	r3, #6
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e007      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006bf2:	2309      	movs	r3, #9
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e001      	b.n	8006bfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006bf8:	2309      	movs	r3, #9
 8006bfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	029b      	lsls	r3, r3, #10
 8006c10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c14:	431a      	orrs	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	00d8acbf 	.word	0x00d8acbf
 8006c2c:	00e4e1c0 	.word	0x00e4e1c0
 8006c30:	00f42400 	.word	0x00f42400
 8006c34:	01067380 	.word	0x01067380
 8006c38:	011a499f 	.word	0x011a499f
 8006c3c:	01312cff 	.word	0x01312cff
 8006c40:	014ca43f 	.word	0x014ca43f
 8006c44:	016e3600 	.word	0x016e3600
 8006c48:	01a6ab1f 	.word	0x01a6ab1f
 8006c4c:	01e84800 	.word	0x01e84800

08006c50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f043 0201 	orr.w	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f023 0201 	bic.w	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d115      	bne.n	8006ce2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	f7fb fa68 	bl	8002198 <HAL_Delay>
      ms++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fa45 	bl	800815e <USB_GetMode>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d01e      	beq.n	8006d18 <USB_SetCurrentMode+0x84>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b31      	cmp	r3, #49	; 0x31
 8006cde:	d9f0      	bls.n	8006cc2 <USB_SetCurrentMode+0x2e>
 8006ce0:	e01a      	b.n	8006d18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d115      	bne.n	8006d14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	f7fb fa4f 	bl	8002198 <HAL_Delay>
      ms++;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fa2c 	bl	800815e <USB_GetMode>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <USB_SetCurrentMode+0x84>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b31      	cmp	r3, #49	; 0x31
 8006d10:	d9f0      	bls.n	8006cf4 <USB_SetCurrentMode+0x60>
 8006d12:	e001      	b.n	8006d18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e005      	b.n	8006d24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b32      	cmp	r3, #50	; 0x32
 8006d1c:	d101      	bne.n	8006d22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	e009      	b.n	8006d60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3340      	adds	r3, #64	; 0x40
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	2200      	movs	r2, #0
 8006d58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b0e      	cmp	r3, #14
 8006d64:	d9f2      	bls.n	8006d4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11c      	bne.n	8006da6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d7a:	f043 0302 	orr.w	r3, r3, #2
 8006d7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38
 8006da4:	e00b      	b.n	8006dbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd8:	461a      	mov	r2, r3
 8006dda:	680b      	ldr	r3, [r1, #0]
 8006ddc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10c      	bne.n	8006dfe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dea:	2100      	movs	r1, #0
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f965 	bl	80070bc <USB_SetDevSpeed>
 8006df2:	e008      	b.n	8006e06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006df4:	2101      	movs	r1, #1
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f960 	bl	80070bc <USB_SetDevSpeed>
 8006dfc:	e003      	b.n	8006e06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dfe:	2103      	movs	r1, #3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f95b 	bl	80070bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e06:	2110      	movs	r1, #16
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f8f3 	bl	8006ff4 <USB_FlushTxFifo>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f91f 	bl	800705c <USB_FlushRxFifo>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2e:	461a      	mov	r2, r3
 8006e30:	2300      	movs	r3, #0
 8006e32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	461a      	mov	r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	e043      	b.n	8006eda <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e68:	d118      	bne.n	8006e9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e013      	b.n	8006eae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e92:	461a      	mov	r2, r3
 8006e94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	e008      	b.n	8006eae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eba:	461a      	mov	r2, r3
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ed2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d3b7      	bcc.n	8006e52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	e043      	b.n	8006f70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efe:	d118      	bne.n	8006f32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f12:	461a      	mov	r2, r3
 8006f14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e013      	b.n	8006f44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e008      	b.n	8006f44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	461a      	mov	r2, r3
 8006f40:	2300      	movs	r3, #0
 8006f42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	461a      	mov	r2, r3
 8006f52:	2300      	movs	r3, #0
 8006f54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f62:	461a      	mov	r2, r3
 8006f64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	613b      	str	r3, [r7, #16]
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d3b7      	bcc.n	8006ee8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d105      	bne.n	8006fac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f043 0210 	orr.w	r2, r3, #16
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <USB_DevInit+0x2c4>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	f043 0208 	orr.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d107      	bne.n	8006fe0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fd8:	f043 0304 	orr.w	r3, r3, #4
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fec:	b004      	add	sp, #16
 8006fee:	4770      	bx	lr
 8006ff0:	803c3800 	.word	0x803c3800

08006ff4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3301      	adds	r3, #1
 8007006:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4a13      	ldr	r2, [pc, #76]	; (8007058 <USB_FlushTxFifo+0x64>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d901      	bls.n	8007014 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e01b      	b.n	800704c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	daf2      	bge.n	8007002 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	019b      	lsls	r3, r3, #6
 8007024:	f043 0220 	orr.w	r2, r3, #32
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4a08      	ldr	r2, [pc, #32]	; (8007058 <USB_FlushTxFifo+0x64>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d901      	bls.n	800703e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e006      	b.n	800704c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b20      	cmp	r3, #32
 8007048:	d0f0      	beq.n	800702c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	00030d40 	.word	0x00030d40

0800705c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <USB_FlushRxFifo+0x5c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e018      	b.n	80070ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	daf2      	bge.n	8007068 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2210      	movs	r2, #16
 800708a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4a08      	ldr	r2, [pc, #32]	; (80070b8 <USB_FlushRxFifo+0x5c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e006      	b.n	80070ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b10      	cmp	r3, #16
 80070a8:	d0f0      	beq.n	800708c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	00030d40 	.word	0x00030d40

080070bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070dc:	4313      	orrs	r3, r2
 80070de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b087      	sub	sp, #28
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0306 	and.w	r3, r3, #6
 8007106:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800710e:	2300      	movs	r3, #0
 8007110:	75fb      	strb	r3, [r7, #23]
 8007112:	e00a      	b.n	800712a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d002      	beq.n	8007120 <USB_GetDevSpeed+0x32>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b06      	cmp	r3, #6
 800711e:	d102      	bne.n	8007126 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007120:	2302      	movs	r3, #2
 8007122:	75fb      	strb	r3, [r7, #23]
 8007124:	e001      	b.n	800712a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007126:	230f      	movs	r3, #15
 8007128:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
}
 800712c:	4618      	mov	r0, r3
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d13a      	bne.n	80071ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715a:	69da      	ldr	r2, [r3, #28]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	2101      	movs	r1, #1
 8007166:	fa01 f303 	lsl.w	r3, r1, r3
 800716a:	b29b      	uxth	r3, r3
 800716c:	68f9      	ldr	r1, [r7, #12]
 800716e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007172:	4313      	orrs	r3, r2
 8007174:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d155      	bne.n	8007238 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	791b      	ldrb	r3, [r3, #4]
 80071a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	059b      	lsls	r3, r3, #22
 80071ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071b0:	4313      	orrs	r3, r2
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	e036      	b.n	8007238 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d0:	69da      	ldr	r2, [r3, #28]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	2101      	movs	r1, #1
 80071dc:	fa01 f303 	lsl.w	r3, r1, r3
 80071e0:	041b      	lsls	r3, r3, #16
 80071e2:	68f9      	ldr	r1, [r7, #12]
 80071e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e8:	4313      	orrs	r3, r2
 80071ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d11a      	bne.n	8007238 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	791b      	ldrb	r3, [r3, #4]
 800721c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800721e:	430b      	orrs	r3, r1
 8007220:	4313      	orrs	r3, r2
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	440a      	add	r2, r1
 800722a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007236:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
	...

08007248 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d161      	bne.n	8007328 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800727a:	d11f      	bne.n	80072bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800729a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	2101      	movs	r1, #1
 80072ce:	fa01 f303 	lsl.w	r3, r1, r3
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	43db      	mvns	r3, r3
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072dc:	4013      	ands	r3, r2
 80072de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	2101      	movs	r1, #1
 80072f2:	fa01 f303 	lsl.w	r3, r1, r3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	43db      	mvns	r3, r3
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007300:	4013      	ands	r3, r2
 8007302:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	0159      	lsls	r1, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	440b      	add	r3, r1
 800731a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731e:	4619      	mov	r1, r3
 8007320:	4b35      	ldr	r3, [pc, #212]	; (80073f8 <USB_DeactivateEndpoint+0x1b0>)
 8007322:	4013      	ands	r3, r2
 8007324:	600b      	str	r3, [r1, #0]
 8007326:	e060      	b.n	80073ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800733a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800733e:	d11f      	bne.n	8007380 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	440a      	add	r2, r1
 8007356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800735e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	440a      	add	r2, r1
 8007376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800737a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800737e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	f003 030f 	and.w	r3, r3, #15
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f303 	lsl.w	r3, r1, r3
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	43db      	mvns	r3, r3
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a0:	4013      	ands	r3, r2
 80073a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	2101      	movs	r1, #1
 80073b6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	43db      	mvns	r3, r3
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073c4:	4013      	ands	r3, r2
 80073c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	0159      	lsls	r1, r3, #5
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	440b      	add	r3, r1
 80073de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e2:	4619      	mov	r1, r3
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <USB_DeactivateEndpoint+0x1b4>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	ec337800 	.word	0xec337800
 80073fc:	eff37800 	.word	0xeff37800

08007400 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	; 0x28
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b01      	cmp	r3, #1
 800741e:	f040 815c 	bne.w	80076da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d132      	bne.n	8007490 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007444:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007448:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800744c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800746c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	440a      	add	r2, r1
 8007484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007488:	0cdb      	lsrs	r3, r3, #19
 800748a:	04db      	lsls	r3, r3, #19
 800748c:	6113      	str	r3, [r2, #16]
 800748e:	e074      	b.n	800757a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074aa:	0cdb      	lsrs	r3, r3, #19
 80074ac:	04db      	lsls	r3, r3, #19
 80074ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6999      	ldr	r1, [r3, #24]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	440b      	add	r3, r1
 80074ec:	1e59      	subs	r1, r3, #1
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80074f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074f8:	4b9d      	ldr	r3, [pc, #628]	; (8007770 <USB_EPStartXfer+0x370>)
 80074fa:	400b      	ands	r3, r1
 80074fc:	69b9      	ldr	r1, [r7, #24]
 80074fe:	0148      	lsls	r0, r1, #5
 8007500:	69f9      	ldr	r1, [r7, #28]
 8007502:	4401      	add	r1, r0
 8007504:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007508:	4313      	orrs	r3, r2
 800750a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007522:	69b9      	ldr	r1, [r7, #24]
 8007524:	0148      	lsls	r0, r1, #5
 8007526:	69f9      	ldr	r1, [r7, #28]
 8007528:	4401      	add	r1, r0
 800752a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800752e:	4313      	orrs	r3, r2
 8007530:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	791b      	ldrb	r3, [r3, #4]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d11f      	bne.n	800757a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	440a      	add	r2, r1
 8007550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007554:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007558:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	440a      	add	r2, r1
 8007570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007578:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d14b      	bne.n	8007618 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007594:	461a      	mov	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	791b      	ldrb	r3, [r3, #4]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d128      	bne.n	80075f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d110      	bne.n	80075d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	0151      	lsls	r1, r2, #5
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	440a      	add	r2, r1
 80075ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	e00f      	b.n	80075f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007610:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	e133      	b.n	8007880 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	0151      	lsls	r1, r2, #5
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	440a      	add	r2, r1
 800762e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007632:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007636:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	791b      	ldrb	r3, [r3, #4]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d015      	beq.n	800766c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 811b 	beq.w	8007880 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	2101      	movs	r1, #1
 800765c:	fa01 f303 	lsl.w	r3, r1, r3
 8007660:	69f9      	ldr	r1, [r7, #28]
 8007662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007666:	4313      	orrs	r3, r2
 8007668:	634b      	str	r3, [r1, #52]	; 0x34
 800766a:	e109      	b.n	8007880 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007678:	2b00      	cmp	r3, #0
 800767a:	d110      	bne.n	800769e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	e00f      	b.n	80076be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6919      	ldr	r1, [r3, #16]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	b298      	uxth	r0, r3
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4603      	mov	r3, r0
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fade 	bl	8007c94 <USB_WritePacket>
 80076d8:	e0d2      	b.n	8007880 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f4:	0cdb      	lsrs	r3, r3, #19
 80076f6:	04db      	lsls	r3, r3, #19
 80076f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007714:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007718:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800771c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d126      	bne.n	8007774 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800773c:	69b9      	ldr	r1, [r7, #24]
 800773e:	0148      	lsls	r0, r1, #5
 8007740:	69f9      	ldr	r1, [r7, #28]
 8007742:	4401      	add	r1, r0
 8007744:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007748:	4313      	orrs	r3, r2
 800774a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	440a      	add	r2, r1
 8007762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800776a:	6113      	str	r3, [r2, #16]
 800776c:	e03a      	b.n	80077e4 <USB_EPStartXfer+0x3e4>
 800776e:	bf00      	nop
 8007770:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	699a      	ldr	r2, [r3, #24]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	4413      	add	r3, r2
 800777e:	1e5a      	subs	r2, r3, #1
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	fbb2 f3f3 	udiv	r3, r2, r3
 8007788:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	8afa      	ldrh	r2, [r7, #22]
 8007790:	fb03 f202 	mul.w	r2, r3, r2
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a4:	691a      	ldr	r2, [r3, #16]
 80077a6:	8afb      	ldrh	r3, [r7, #22]
 80077a8:	04d9      	lsls	r1, r3, #19
 80077aa:	4b38      	ldr	r3, [pc, #224]	; (800788c <USB_EPStartXfer+0x48c>)
 80077ac:	400b      	ands	r3, r1
 80077ae:	69b9      	ldr	r1, [r7, #24]
 80077b0:	0148      	lsls	r0, r1, #5
 80077b2:	69f9      	ldr	r1, [r7, #28]
 80077b4:	4401      	add	r1, r0
 80077b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077ba:	4313      	orrs	r3, r2
 80077bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077d4:	69b9      	ldr	r1, [r7, #24]
 80077d6:	0148      	lsls	r0, r1, #5
 80077d8:	69f9      	ldr	r1, [r7, #28]
 80077da:	4401      	add	r1, r0
 80077dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077e0:	4313      	orrs	r3, r2
 80077e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d10d      	bne.n	8007806 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6919      	ldr	r1, [r3, #16]
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007802:	460a      	mov	r2, r1
 8007804:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	791b      	ldrb	r3, [r3, #4]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d128      	bne.n	8007860 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781a:	2b00      	cmp	r3, #0
 800781c:	d110      	bne.n	8007840 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	0151      	lsls	r1, r2, #5
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	440a      	add	r2, r1
 8007834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007838:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	e00f      	b.n	8007860 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800785e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800787a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800787e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3720      	adds	r7, #32
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	1ff80000 	.word	0x1ff80000

08007890 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	f040 80ce 	bne.w	8007a4e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d132      	bne.n	8007920 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007918:	0cdb      	lsrs	r3, r3, #19
 800791a:	04db      	lsls	r3, r3, #19
 800791c:	6113      	str	r3, [r2, #16]
 800791e:	e04e      	b.n	80079be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	440a      	add	r2, r1
 8007936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800793a:	0cdb      	lsrs	r3, r3, #19
 800793c:	04db      	lsls	r3, r3, #19
 800793e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800795e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007962:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	429a      	cmp	r2, r3
 800796e:	d903      	bls.n	8007978 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	440a      	add	r2, r1
 800798e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ae:	6939      	ldr	r1, [r7, #16]
 80079b0:	0148      	lsls	r0, r1, #5
 80079b2:	6979      	ldr	r1, [r7, #20]
 80079b4:	4401      	add	r1, r0
 80079b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079ba:	4313      	orrs	r3, r2
 80079bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d11e      	bne.n	8007a02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d8:	461a      	mov	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	0151      	lsls	r1, r2, #5
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	440a      	add	r2, r1
 80079f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	e097      	b.n	8007b32 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	0151      	lsls	r1, r2, #5
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	440a      	add	r2, r1
 8007a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8083 	beq.w	8007b32 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a42:	6979      	ldr	r1, [r7, #20]
 8007a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	634b      	str	r3, [r1, #52]	; 0x34
 8007a4c:	e071      	b.n	8007b32 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	0151      	lsls	r1, r2, #5
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	440a      	add	r2, r1
 8007a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a68:	0cdb      	lsrs	r3, r3, #19
 8007a6a:	04db      	lsls	r3, r3, #19
 8007a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	0151      	lsls	r1, r2, #5
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	440a      	add	r2, r1
 8007ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ac8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	691a      	ldr	r2, [r3, #16]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ae0:	6939      	ldr	r1, [r7, #16]
 8007ae2:	0148      	lsls	r0, r1, #5
 8007ae4:	6979      	ldr	r1, [r7, #20]
 8007ae6:	4401      	add	r1, r0
 8007ae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007aec:	4313      	orrs	r3, r2
 8007aee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d10d      	bne.n	8007b12 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6919      	ldr	r1, [r3, #16]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	460a      	mov	r2, r1
 8007b10:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d14a      	bne.n	8007bf4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b76:	f040 8086 	bne.w	8007c86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	7812      	ldrb	r2, [r2, #0]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	7812      	ldrb	r2, [r2, #0]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f242 7210 	movw	r2, #10000	; 0x2710
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d902      	bls.n	8007bd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007bd6:	e056      	b.n	8007c86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf0:	d0e7      	beq.n	8007bc2 <USB_EPStopXfer+0x82>
 8007bf2:	e048      	b.n	8007c86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c0c:	d13b      	bne.n	8007c86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	7812      	ldrb	r2, [r2, #0]
 8007c46:	0151      	lsls	r1, r2, #5
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	440a      	add	r2, r1
 8007c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d902      	bls.n	8007c6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	75fb      	strb	r3, [r7, #23]
          break;
 8007c6a:	e00c      	b.n	8007c86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c84:	d0e7      	beq.n	8007c56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b089      	sub	sp, #36	; 0x24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	71fb      	strb	r3, [r7, #7]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d123      	bne.n	8007d02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007cba:	88bb      	ldrh	r3, [r7, #4]
 8007cbc:	3303      	adds	r3, #3
 8007cbe:	089b      	lsrs	r3, r3, #2
 8007cc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61bb      	str	r3, [r7, #24]
 8007cc6:	e018      	b.n	8007cfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	031a      	lsls	r2, r3, #12
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	3301      	adds	r3, #1
 8007cec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d3e2      	bcc.n	8007cc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3724      	adds	r7, #36	; 0x24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b08b      	sub	sp, #44	; 0x2c
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	089b      	lsrs	r3, r3, #2
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d36:	2300      	movs	r3, #0
 8007d38:	623b      	str	r3, [r7, #32]
 8007d3a:	e014      	b.n	8007d66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	3301      	adds	r3, #1
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	3301      	adds	r3, #1
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	3301      	adds	r3, #1
 8007d64:	623b      	str	r3, [r7, #32]
 8007d66:	6a3a      	ldr	r2, [r7, #32]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d3e6      	bcc.n	8007d3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d6e:	8bfb      	ldrh	r3, [r7, #30]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d01e      	beq.n	8007db2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	6812      	ldr	r2, [r2, #0]
 8007d86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	fa22 f303 	lsr.w	r3, r2, r3
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	701a      	strb	r2, [r3, #0]
      i++;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	3301      	adds	r3, #1
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007da6:	8bfb      	ldrh	r3, [r7, #30]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007dac:	8bfb      	ldrh	r3, [r7, #30]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1ea      	bne.n	8007d88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	372c      	adds	r7, #44	; 0x2c
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	785b      	ldrb	r3, [r3, #1]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d12c      	bne.n	8007e36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	db12      	blt.n	8007e14 <USB_EPSetStall+0x54>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00f      	beq.n	8007e14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	0151      	lsls	r1, r2, #5
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	440a      	add	r2, r1
 8007e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	e02b      	b.n	8007e8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	db12      	blt.n	8007e6e <USB_EPSetStall+0xae>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00f      	beq.n	8007e6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	785b      	ldrb	r3, [r3, #1]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d128      	bne.n	8007f0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	0151      	lsls	r1, r2, #5
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	440a      	add	r2, r1
 8007ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ed6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	791b      	ldrb	r3, [r3, #4]
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d003      	beq.n	8007ee8 <USB_EPClearStall+0x4c>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	791b      	ldrb	r3, [r3, #4]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d138      	bne.n	8007f5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	0151      	lsls	r1, r2, #5
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	440a      	add	r2, r1
 8007efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	e027      	b.n	8007f5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	0151      	lsls	r1, r2, #5
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	440a      	add	r2, r1
 8007f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	791b      	ldrb	r3, [r3, #4]
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d003      	beq.n	8007f3a <USB_EPClearStall+0x9e>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	791b      	ldrb	r3, [r3, #4]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d10f      	bne.n	8007f5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f9c:	68f9      	ldr	r1, [r7, #12]
 8007f9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fe2:	f023 0302 	bic.w	r3, r3, #2
 8007fe6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008010:	f023 0303 	bic.w	r3, r3, #3
 8008014:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008024:	f043 0302 	orr.w	r3, r3, #2
 8008028:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008050:	68fb      	ldr	r3, [r7, #12]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	4013      	ands	r3, r2
 8008080:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	0c1b      	lsrs	r3, r3, #16
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	4013      	ands	r3, r2
 80080b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	b29b      	uxth	r3, r3
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	460b      	mov	r3, r1
 80080d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4013      	ands	r3, r2
 80080f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080f4:	68bb      	ldr	r3, [r7, #8]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008102:	b480      	push	{r7}
 8008104:	b087      	sub	sp, #28
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008124:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	f003 030f 	and.w	r3, r3, #15
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	fa22 f303 	lsr.w	r3, r2, r3
 8008132:	01db      	lsls	r3, r3, #7
 8008134:	b2db      	uxtb	r3, r3
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4013      	ands	r3, r2
 800814e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008150:	68bb      	ldr	r3, [r7, #8]
}
 8008152:	4618      	mov	r0, r3
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	f003 0301 	and.w	r3, r3, #1
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800817a:	b480      	push	{r7}
 800817c:	b085      	sub	sp, #20
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008194:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008198:	f023 0307 	bic.w	r3, r3, #7
 800819c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	460b      	mov	r3, r1
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	333c      	adds	r3, #60	; 0x3c
 80081d6:	3304      	adds	r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	4a26      	ldr	r2, [pc, #152]	; (8008278 <USB_EP0_OutStart+0xb8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d90a      	bls.n	80081fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081f4:	d101      	bne.n	80081fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	e037      	b.n	800826a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008200:	461a      	mov	r2, r3
 8008202:	2300      	movs	r3, #0
 8008204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008228:	f043 0318 	orr.w	r3, r3, #24
 800822c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008240:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d10f      	bne.n	8008268 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824e:	461a      	mov	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008262:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	4f54300a 	.word	0x4f54300a

0800827c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3301      	adds	r3, #1
 800828c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4a13      	ldr	r2, [pc, #76]	; (80082e0 <USB_CoreReset+0x64>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d901      	bls.n	800829a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e01b      	b.n	80082d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	daf2      	bge.n	8008288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f043 0201 	orr.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4a09      	ldr	r2, [pc, #36]	; (80082e0 <USB_CoreReset+0x64>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d901      	bls.n	80082c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e006      	b.n	80082d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d0f0      	beq.n	80082b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	00030d40 	.word	0x00030d40

080082e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082f4:	f002 fc8a 	bl	800ac0c <USBD_static_malloc>
 80082f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d109      	bne.n	8008314 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	32b0      	adds	r2, #176	; 0xb0
 800830a:	2100      	movs	r1, #0
 800830c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008310:	2302      	movs	r3, #2
 8008312:	e0d4      	b.n	80084be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008314:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008318:	2100      	movs	r1, #0
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f002 fcf6 	bl	800ad0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	32b0      	adds	r2, #176	; 0xb0
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	32b0      	adds	r2, #176	; 0xb0
 800833a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7c1b      	ldrb	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d138      	bne.n	80083be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800834c:	4b5e      	ldr	r3, [pc, #376]	; (80084c8 <USBD_CDC_Init+0x1e4>)
 800834e:	7819      	ldrb	r1, [r3, #0]
 8008350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008354:	2202      	movs	r2, #2
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f002 fb35 	bl	800a9c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800835c:	4b5a      	ldr	r3, [pc, #360]	; (80084c8 <USBD_CDC_Init+0x1e4>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 020f 	and.w	r2, r3, #15
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	3324      	adds	r3, #36	; 0x24
 8008372:	2201      	movs	r2, #1
 8008374:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008376:	4b55      	ldr	r3, [pc, #340]	; (80084cc <USBD_CDC_Init+0x1e8>)
 8008378:	7819      	ldrb	r1, [r3, #0]
 800837a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800837e:	2202      	movs	r2, #2
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f002 fb20 	bl	800a9c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008386:	4b51      	ldr	r3, [pc, #324]	; (80084cc <USBD_CDC_Init+0x1e8>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 020f 	and.w	r2, r3, #15
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800839e:	2201      	movs	r2, #1
 80083a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80083a2:	4b4b      	ldr	r3, [pc, #300]	; (80084d0 <USBD_CDC_Init+0x1ec>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f003 020f 	and.w	r2, r3, #15
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	440b      	add	r3, r1
 80083b6:	3326      	adds	r3, #38	; 0x26
 80083b8:	2210      	movs	r2, #16
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	e035      	b.n	800842a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083be:	4b42      	ldr	r3, [pc, #264]	; (80084c8 <USBD_CDC_Init+0x1e4>)
 80083c0:	7819      	ldrb	r1, [r3, #0]
 80083c2:	2340      	movs	r3, #64	; 0x40
 80083c4:	2202      	movs	r2, #2
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f002 fafd 	bl	800a9c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083cc:	4b3e      	ldr	r3, [pc, #248]	; (80084c8 <USBD_CDC_Init+0x1e4>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f003 020f 	and.w	r2, r3, #15
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	3324      	adds	r3, #36	; 0x24
 80083e2:	2201      	movs	r2, #1
 80083e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083e6:	4b39      	ldr	r3, [pc, #228]	; (80084cc <USBD_CDC_Init+0x1e8>)
 80083e8:	7819      	ldrb	r1, [r3, #0]
 80083ea:	2340      	movs	r3, #64	; 0x40
 80083ec:	2202      	movs	r2, #2
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f002 fae9 	bl	800a9c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083f4:	4b35      	ldr	r3, [pc, #212]	; (80084cc <USBD_CDC_Init+0x1e8>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	f003 020f 	and.w	r2, r3, #15
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800840c:	2201      	movs	r2, #1
 800840e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008410:	4b2f      	ldr	r3, [pc, #188]	; (80084d0 <USBD_CDC_Init+0x1ec>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f003 020f 	and.w	r2, r3, #15
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	3326      	adds	r3, #38	; 0x26
 8008426:	2210      	movs	r2, #16
 8008428:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800842a:	4b29      	ldr	r3, [pc, #164]	; (80084d0 <USBD_CDC_Init+0x1ec>)
 800842c:	7819      	ldrb	r1, [r3, #0]
 800842e:	2308      	movs	r3, #8
 8008430:	2203      	movs	r2, #3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f002 fac7 	bl	800a9c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008438:	4b25      	ldr	r3, [pc, #148]	; (80084d0 <USBD_CDC_Init+0x1ec>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f003 020f 	and.w	r2, r3, #15
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	3324      	adds	r3, #36	; 0x24
 800844e:	2201      	movs	r2, #1
 8008450:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	33b0      	adds	r3, #176	; 0xb0
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008488:	2302      	movs	r3, #2
 800848a:	e018      	b.n	80084be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7c1b      	ldrb	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10a      	bne.n	80084aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008494:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <USBD_CDC_Init+0x1e8>)
 8008496:	7819      	ldrb	r1, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800849e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f002 fb7e 	bl	800aba4 <USBD_LL_PrepareReceive>
 80084a8:	e008      	b.n	80084bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084aa:	4b08      	ldr	r3, [pc, #32]	; (80084cc <USBD_CDC_Init+0x1e8>)
 80084ac:	7819      	ldrb	r1, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084b4:	2340      	movs	r3, #64	; 0x40
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f002 fb74 	bl	800aba4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000093 	.word	0x20000093
 80084cc:	20000094 	.word	0x20000094
 80084d0:	20000095 	.word	0x20000095

080084d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084e0:	4b3a      	ldr	r3, [pc, #232]	; (80085cc <USBD_CDC_DeInit+0xf8>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f002 fa93 	bl	800aa12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084ec:	4b37      	ldr	r3, [pc, #220]	; (80085cc <USBD_CDC_DeInit+0xf8>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	f003 020f 	and.w	r2, r3, #15
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	440b      	add	r3, r1
 8008500:	3324      	adds	r3, #36	; 0x24
 8008502:	2200      	movs	r2, #0
 8008504:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008506:	4b32      	ldr	r3, [pc, #200]	; (80085d0 <USBD_CDC_DeInit+0xfc>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f002 fa80 	bl	800aa12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008512:	4b2f      	ldr	r3, [pc, #188]	; (80085d0 <USBD_CDC_DeInit+0xfc>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 020f 	and.w	r2, r3, #15
 800851a:	6879      	ldr	r1, [r7, #4]
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	440b      	add	r3, r1
 8008526:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800852a:	2200      	movs	r2, #0
 800852c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800852e:	4b29      	ldr	r3, [pc, #164]	; (80085d4 <USBD_CDC_DeInit+0x100>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f002 fa6c 	bl	800aa12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800853a:	4b26      	ldr	r3, [pc, #152]	; (80085d4 <USBD_CDC_DeInit+0x100>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 020f 	and.w	r2, r3, #15
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	440b      	add	r3, r1
 800854e:	3324      	adds	r3, #36	; 0x24
 8008550:	2200      	movs	r2, #0
 8008552:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008554:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <USBD_CDC_DeInit+0x100>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	f003 020f 	and.w	r2, r3, #15
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	3326      	adds	r3, #38	; 0x26
 800856a:	2200      	movs	r2, #0
 800856c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	32b0      	adds	r2, #176	; 0xb0
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01f      	beq.n	80085c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	33b0      	adds	r3, #176	; 0xb0
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	32b0      	adds	r2, #176	; 0xb0
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f002 fb40 	bl	800ac28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	32b0      	adds	r2, #176	; 0xb0
 80085b2:	2100      	movs	r1, #0
 80085b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000093 	.word	0x20000093
 80085d0:	20000094 	.word	0x20000094
 80085d4:	20000095 	.word	0x20000095

080085d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	32b0      	adds	r2, #176	; 0xb0
 80085ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008604:	2303      	movs	r3, #3
 8008606:	e0bf      	b.n	8008788 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008610:	2b00      	cmp	r3, #0
 8008612:	d050      	beq.n	80086b6 <USBD_CDC_Setup+0xde>
 8008614:	2b20      	cmp	r3, #32
 8008616:	f040 80af 	bne.w	8008778 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	88db      	ldrh	r3, [r3, #6]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d03a      	beq.n	8008698 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b25b      	sxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	da1b      	bge.n	8008664 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	33b0      	adds	r3, #176	; 0xb0
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008642:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	88d2      	ldrh	r2, [r2, #6]
 8008648:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b07      	cmp	r3, #7
 8008650:	bf28      	it	cs
 8008652:	2307      	movcs	r3, #7
 8008654:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	89fa      	ldrh	r2, [r7, #14]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 fd89 	bl	800a174 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008662:	e090      	b.n	8008786 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	785a      	ldrb	r2, [r3, #1]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	88db      	ldrh	r3, [r3, #6]
 8008672:	2b3f      	cmp	r3, #63	; 0x3f
 8008674:	d803      	bhi.n	800867e <USBD_CDC_Setup+0xa6>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	88db      	ldrh	r3, [r3, #6]
 800867a:	b2da      	uxtb	r2, r3
 800867c:	e000      	b.n	8008680 <USBD_CDC_Setup+0xa8>
 800867e:	2240      	movs	r2, #64	; 0x40
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008686:	6939      	ldr	r1, [r7, #16]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800868e:	461a      	mov	r2, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 fd9b 	bl	800a1cc <USBD_CtlPrepareRx>
      break;
 8008696:	e076      	b.n	8008786 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	33b0      	adds	r3, #176	; 0xb0
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	7850      	ldrb	r0, [r2, #1]
 80086ae:	2200      	movs	r2, #0
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	4798      	blx	r3
      break;
 80086b4:	e067      	b.n	8008786 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b0b      	cmp	r3, #11
 80086bc:	d851      	bhi.n	8008762 <USBD_CDC_Setup+0x18a>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <USBD_CDC_Setup+0xec>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086f5 	.word	0x080086f5
 80086c8:	08008771 	.word	0x08008771
 80086cc:	08008763 	.word	0x08008763
 80086d0:	08008763 	.word	0x08008763
 80086d4:	08008763 	.word	0x08008763
 80086d8:	08008763 	.word	0x08008763
 80086dc:	08008763 	.word	0x08008763
 80086e0:	08008763 	.word	0x08008763
 80086e4:	08008763 	.word	0x08008763
 80086e8:	08008763 	.word	0x08008763
 80086ec:	0800871f 	.word	0x0800871f
 80086f0:	08008749 	.word	0x08008749
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d107      	bne.n	8008710 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008700:	f107 030a 	add.w	r3, r7, #10
 8008704:	2202      	movs	r2, #2
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fd33 	bl	800a174 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800870e:	e032      	b.n	8008776 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 fcbd 	bl	800a092 <USBD_CtlError>
            ret = USBD_FAIL;
 8008718:	2303      	movs	r3, #3
 800871a:	75fb      	strb	r3, [r7, #23]
          break;
 800871c:	e02b      	b.n	8008776 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b03      	cmp	r3, #3
 8008728:	d107      	bne.n	800873a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800872a:	f107 030d 	add.w	r3, r7, #13
 800872e:	2201      	movs	r2, #1
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fd1e 	bl	800a174 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008738:	e01d      	b.n	8008776 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 fca8 	bl	800a092 <USBD_CtlError>
            ret = USBD_FAIL;
 8008742:	2303      	movs	r3, #3
 8008744:	75fb      	strb	r3, [r7, #23]
          break;
 8008746:	e016      	b.n	8008776 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b03      	cmp	r3, #3
 8008752:	d00f      	beq.n	8008774 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 fc9b 	bl	800a092 <USBD_CtlError>
            ret = USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008760:	e008      	b.n	8008774 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fc94 	bl	800a092 <USBD_CtlError>
          ret = USBD_FAIL;
 800876a:	2303      	movs	r3, #3
 800876c:	75fb      	strb	r3, [r7, #23]
          break;
 800876e:	e002      	b.n	8008776 <USBD_CDC_Setup+0x19e>
          break;
 8008770:	bf00      	nop
 8008772:	e008      	b.n	8008786 <USBD_CDC_Setup+0x1ae>
          break;
 8008774:	bf00      	nop
      }
      break;
 8008776:	e006      	b.n	8008786 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 fc89 	bl	800a092 <USBD_CtlError>
      ret = USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	75fb      	strb	r3, [r7, #23]
      break;
 8008784:	bf00      	nop
  }

  return (uint8_t)ret;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	32b0      	adds	r2, #176	; 0xb0
 80087ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e065      	b.n	8008886 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	32b0      	adds	r2, #176	; 0xb0
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	f003 020f 	and.w	r2, r3, #15
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	3318      	adds	r3, #24
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d02f      	beq.n	8008844 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	f003 020f 	and.w	r2, r3, #15
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	3318      	adds	r3, #24
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	f003 010f 	and.w	r1, r3, #15
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	460b      	mov	r3, r1
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	440b      	add	r3, r1
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4403      	add	r3, r0
 800880c:	3348      	adds	r3, #72	; 0x48
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	fbb2 f1f3 	udiv	r1, r2, r3
 8008814:	fb01 f303 	mul.w	r3, r1, r3
 8008818:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800881a:	2b00      	cmp	r3, #0
 800881c:	d112      	bne.n	8008844 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	f003 020f 	and.w	r2, r3, #15
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	440b      	add	r3, r1
 8008830:	3318      	adds	r3, #24
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008836:	78f9      	ldrb	r1, [r7, #3]
 8008838:	2300      	movs	r3, #0
 800883a:	2200      	movs	r2, #0
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f002 f990 	bl	800ab62 <USBD_LL_Transmit>
 8008842:	e01f      	b.n	8008884 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	33b0      	adds	r3, #176	; 0xb0
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d010      	beq.n	8008884 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	33b0      	adds	r3, #176	; 0xb0
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	32b0      	adds	r2, #176	; 0xb0
 80088a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	32b0      	adds	r2, #176	; 0xb0
 80088b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80088bc:	2303      	movs	r3, #3
 80088be:	e01a      	b.n	80088f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f002 f98e 	bl	800abe6 <USBD_LL_GetRxDataSize>
 80088ca:	4602      	mov	r2, r0
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	33b0      	adds	r3, #176	; 0xb0
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088f0:	4611      	mov	r1, r2
 80088f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	32b0      	adds	r2, #176	; 0xb0
 8008910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008914:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	e025      	b.n	800896c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	33b0      	adds	r3, #176	; 0xb0
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01a      	beq.n	800896a <USBD_CDC_EP0_RxReady+0x6c>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800893a:	2bff      	cmp	r3, #255	; 0xff
 800893c:	d015      	beq.n	800896a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	33b0      	adds	r3, #176	; 0xb0
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008956:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800895e:	b292      	uxth	r2, r2
 8008960:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	22ff      	movs	r2, #255	; 0xff
 8008966:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800897c:	2182      	movs	r1, #130	; 0x82
 800897e:	4818      	ldr	r0, [pc, #96]	; (80089e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008980:	f000 fd4f 	bl	8009422 <USBD_GetEpDesc>
 8008984:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008986:	2101      	movs	r1, #1
 8008988:	4815      	ldr	r0, [pc, #84]	; (80089e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800898a:	f000 fd4a 	bl	8009422 <USBD_GetEpDesc>
 800898e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008990:	2181      	movs	r1, #129	; 0x81
 8008992:	4813      	ldr	r0, [pc, #76]	; (80089e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008994:	f000 fd45 	bl	8009422 <USBD_GetEpDesc>
 8008998:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2210      	movs	r2, #16
 80089a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d006      	beq.n	80089ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089b4:	711a      	strb	r2, [r3, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d006      	beq.n	80089ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089c8:	711a      	strb	r2, [r3, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2243      	movs	r2, #67	; 0x43
 80089d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	20000050 	.word	0x20000050

080089e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089ec:	2182      	movs	r1, #130	; 0x82
 80089ee:	4818      	ldr	r0, [pc, #96]	; (8008a50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089f0:	f000 fd17 	bl	8009422 <USBD_GetEpDesc>
 80089f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089f6:	2101      	movs	r1, #1
 80089f8:	4815      	ldr	r0, [pc, #84]	; (8008a50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089fa:	f000 fd12 	bl	8009422 <USBD_GetEpDesc>
 80089fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a00:	2181      	movs	r1, #129	; 0x81
 8008a02:	4813      	ldr	r0, [pc, #76]	; (8008a50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a04:	f000 fd0d 	bl	8009422 <USBD_GetEpDesc>
 8008a08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2210      	movs	r2, #16
 8008a14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d006      	beq.n	8008a2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	711a      	strb	r2, [r3, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f042 0202 	orr.w	r2, r2, #2
 8008a28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d006      	beq.n	8008a3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	711a      	strb	r2, [r3, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f042 0202 	orr.w	r2, r2, #2
 8008a3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2243      	movs	r2, #67	; 0x43
 8008a42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a44:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000050 	.word	0x20000050

08008a54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a5c:	2182      	movs	r1, #130	; 0x82
 8008a5e:	4818      	ldr	r0, [pc, #96]	; (8008ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a60:	f000 fcdf 	bl	8009422 <USBD_GetEpDesc>
 8008a64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a66:	2101      	movs	r1, #1
 8008a68:	4815      	ldr	r0, [pc, #84]	; (8008ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a6a:	f000 fcda 	bl	8009422 <USBD_GetEpDesc>
 8008a6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a70:	2181      	movs	r1, #129	; 0x81
 8008a72:	4813      	ldr	r0, [pc, #76]	; (8008ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a74:	f000 fcd5 	bl	8009422 <USBD_GetEpDesc>
 8008a78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	2210      	movs	r2, #16
 8008a84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d006      	beq.n	8008a9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a94:	711a      	strb	r2, [r3, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d006      	beq.n	8008aae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aa8:	711a      	strb	r2, [r3, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2243      	movs	r2, #67	; 0x43
 8008ab2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ab4:	4b02      	ldr	r3, [pc, #8]	; (8008ac0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000050 	.word	0x20000050

08008ac4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	220a      	movs	r2, #10
 8008ad0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ad2:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	2000000c 	.word	0x2000000c

08008ae4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e009      	b.n	8008b0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	33b0      	adds	r3, #176	; 0xb0
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	32b0      	adds	r2, #176	; 0xb0
 8008b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b32:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e008      	b.n	8008b50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	32b0      	adds	r2, #176	; 0xb0
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e004      	b.n	8008b8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
	...

08008b98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	32b0      	adds	r2, #176	; 0xb0
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	32b0      	adds	r2, #176	; 0xb0
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e025      	b.n	8008c16 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11f      	bne.n	8008c14 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008bdc:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <USBD_CDC_TransmitPacket+0x88>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4403      	add	r3, r0
 8008bf6:	3318      	adds	r3, #24
 8008bf8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <USBD_CDC_TransmitPacket+0x88>)
 8008bfc:	7819      	ldrb	r1, [r3, #0]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 ffa9 	bl	800ab62 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000093 	.word	0x20000093

08008c24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	32b0      	adds	r2, #176	; 0xb0
 8008c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	32b0      	adds	r2, #176	; 0xb0
 8008c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e018      	b.n	8008c84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	7c1b      	ldrb	r3, [r3, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10a      	bne.n	8008c70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c5a:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <USBD_CDC_ReceivePacket+0x68>)
 8008c5c:	7819      	ldrb	r1, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 ff9b 	bl	800aba4 <USBD_LL_PrepareReceive>
 8008c6e:	e008      	b.n	8008c82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c70:	4b06      	ldr	r3, [pc, #24]	; (8008c8c <USBD_CDC_ReceivePacket+0x68>)
 8008c72:	7819      	ldrb	r1, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c7a:	2340      	movs	r3, #64	; 0x40
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 ff91 	bl	800aba4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20000094 	.word	0x20000094

08008c90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e01f      	b.n	8008ce8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	79fa      	ldrb	r2, [r7, #7]
 8008cda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f001 fe0b 	bl	800a8f8 <USBD_LL_Init>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e025      	b.n	8008d54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	32ae      	adds	r2, #174	; 0xae
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00f      	beq.n	8008d44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	32ae      	adds	r2, #174	; 0xae
 8008d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	f107 020e 	add.w	r2, r7, #14
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 fe13 	bl	800a990 <USBD_LL_Start>
 8008d6a:	4603      	mov	r3, r0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d009      	beq.n	8008db8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	4611      	mov	r1, r2
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	4611      	mov	r1, r2
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008de8:	2303      	movs	r3, #3
 8008dea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f001 f908 	bl	800a01e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e2a:	f003 031f 	and.w	r3, r3, #31
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d01a      	beq.n	8008e68 <USBD_LL_SetupStage+0x72>
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d822      	bhi.n	8008e7c <USBD_LL_SetupStage+0x86>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <USBD_LL_SetupStage+0x4a>
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d00a      	beq.n	8008e54 <USBD_LL_SetupStage+0x5e>
 8008e3e:	e01d      	b.n	8008e7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fb5f 	bl	800950c <USBD_StdDevReq>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]
      break;
 8008e52:	e020      	b.n	8008e96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fbc7 	bl	80095f0 <USBD_StdItfReq>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
      break;
 8008e66:	e016      	b.n	8008e96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fc29 	bl	80096c8 <USBD_StdEPReq>
 8008e76:	4603      	mov	r3, r0
 8008e78:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7a:	e00c      	b.n	8008e96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 fde0 	bl	800aa50 <USBD_LL_StallEP>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]
      break;
 8008e94:	bf00      	nop
  }

  return ret;
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d16e      	bne.n	8008f96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ebe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	f040 8098 	bne.w	8008ffc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d913      	bls.n	8008f00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	1ad2      	subs	r2, r2, r3
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	bf28      	it	cs
 8008ef2:	4613      	movcs	r3, r2
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f001 f984 	bl	800a206 <USBD_CtlContinueRx>
 8008efe:	e07d      	b.n	8008ffc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f06:	f003 031f 	and.w	r3, r3, #31
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d014      	beq.n	8008f38 <USBD_LL_DataOutStage+0x98>
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d81d      	bhi.n	8008f4e <USBD_LL_DataOutStage+0xae>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <USBD_LL_DataOutStage+0x7c>
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d003      	beq.n	8008f22 <USBD_LL_DataOutStage+0x82>
 8008f1a:	e018      	b.n	8008f4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	75bb      	strb	r3, [r7, #22]
            break;
 8008f20:	e018      	b.n	8008f54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 fa5e 	bl	80093ee <USBD_CoreFindIF>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75bb      	strb	r3, [r7, #22]
            break;
 8008f36:	e00d      	b.n	8008f54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	4619      	mov	r1, r3
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fa60 	bl	8009408 <USBD_CoreFindEP>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	75bb      	strb	r3, [r7, #22]
            break;
 8008f4c:	e002      	b.n	8008f54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	75bb      	strb	r3, [r7, #22]
            break;
 8008f52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008f54:	7dbb      	ldrb	r3, [r7, #22]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d119      	bne.n	8008f8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d113      	bne.n	8008f8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008f66:	7dba      	ldrb	r2, [r7, #22]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	32ae      	adds	r2, #174	; 0xae
 8008f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00b      	beq.n	8008f8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008f76:	7dba      	ldrb	r2, [r7, #22]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f7e:	7dba      	ldrb	r2, [r7, #22]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	32ae      	adds	r2, #174	; 0xae
 8008f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f001 f94a 	bl	800a228 <USBD_CtlSendStatus>
 8008f94:	e032      	b.n	8008ffc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f96:	7afb      	ldrb	r3, [r7, #11]
 8008f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 fa31 	bl	8009408 <USBD_CoreFindEP>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008faa:	7dbb      	ldrb	r3, [r7, #22]
 8008fac:	2bff      	cmp	r3, #255	; 0xff
 8008fae:	d025      	beq.n	8008ffc <USBD_LL_DataOutStage+0x15c>
 8008fb0:	7dbb      	ldrb	r3, [r7, #22]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d122      	bne.n	8008ffc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d117      	bne.n	8008ff2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008fc2:	7dba      	ldrb	r2, [r7, #22]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	32ae      	adds	r2, #174	; 0xae
 8008fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00f      	beq.n	8008ff2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008fd2:	7dba      	ldrb	r2, [r7, #22]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008fda:	7dba      	ldrb	r2, [r7, #22]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	32ae      	adds	r2, #174	; 0xae
 8008fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	7afa      	ldrb	r2, [r7, #11]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	4798      	blx	r3
 8008fee:	4603      	mov	r3, r0
 8008ff0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	e000      	b.n	8008ffe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b086      	sub	sp, #24
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	460b      	mov	r3, r1
 8009010:	607a      	str	r2, [r7, #4]
 8009012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d16f      	bne.n	80090fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3314      	adds	r3, #20
 800901e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009026:	2b02      	cmp	r3, #2
 8009028:	d15a      	bne.n	80090e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	689a      	ldr	r2, [r3, #8]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	429a      	cmp	r2, r3
 8009034:	d914      	bls.n	8009060 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	461a      	mov	r2, r3
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f001 f8ac 	bl	800a1aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009052:	2300      	movs	r3, #0
 8009054:	2200      	movs	r2, #0
 8009056:	2100      	movs	r1, #0
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f001 fda3 	bl	800aba4 <USBD_LL_PrepareReceive>
 800905e:	e03f      	b.n	80090e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	429a      	cmp	r2, r3
 800906a:	d11c      	bne.n	80090a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009074:	429a      	cmp	r2, r3
 8009076:	d316      	bcc.n	80090a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009082:	429a      	cmp	r2, r3
 8009084:	d20f      	bcs.n	80090a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009086:	2200      	movs	r2, #0
 8009088:	2100      	movs	r1, #0
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f001 f88d 	bl	800a1aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009098:	2300      	movs	r3, #0
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f001 fd80 	bl	800aba4 <USBD_LL_PrepareReceive>
 80090a4:	e01c      	b.n	80090e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d10f      	bne.n	80090d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090d2:	2180      	movs	r1, #128	; 0x80
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f001 fcbb 	bl	800aa50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f001 f8b7 	bl	800a24e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d03a      	beq.n	8009160 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff fe42 	bl	8008d74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80090f8:	e032      	b.n	8009160 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80090fa:	7afb      	ldrb	r3, [r7, #11]
 80090fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009100:	b2db      	uxtb	r3, r3
 8009102:	4619      	mov	r1, r3
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f97f 	bl	8009408 <USBD_CoreFindEP>
 800910a:	4603      	mov	r3, r0
 800910c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	2bff      	cmp	r3, #255	; 0xff
 8009112:	d025      	beq.n	8009160 <USBD_LL_DataInStage+0x15a>
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d122      	bne.n	8009160 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b03      	cmp	r3, #3
 8009124:	d11c      	bne.n	8009160 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009126:	7dfa      	ldrb	r2, [r7, #23]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	32ae      	adds	r2, #174	; 0xae
 800912c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d014      	beq.n	8009160 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009136:	7dfa      	ldrb	r2, [r7, #23]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800913e:	7dfa      	ldrb	r2, [r7, #23]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	32ae      	adds	r2, #174	; 0xae
 8009144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	7afa      	ldrb	r2, [r7, #11]
 800914c:	4611      	mov	r1, r2
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	4798      	blx	r3
 8009152:	4603      	mov	r3, r0
 8009154:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009156:	7dbb      	ldrb	r3, [r7, #22]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800915c:	7dbb      	ldrb	r3, [r7, #22]
 800915e:	e000      	b.n	8009162 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d014      	beq.n	80091d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00e      	beq.n	80091d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	6852      	ldr	r2, [r2, #4]
 80091be:	b2d2      	uxtb	r2, r2
 80091c0:	4611      	mov	r1, r2
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	4798      	blx	r3
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80091cc:	2303      	movs	r3, #3
 80091ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091d0:	2340      	movs	r3, #64	; 0x40
 80091d2:	2200      	movs	r2, #0
 80091d4:	2100      	movs	r1, #0
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 fbf5 	bl	800a9c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2240      	movs	r2, #64	; 0x40
 80091e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091ec:	2340      	movs	r3, #64	; 0x40
 80091ee:	2200      	movs	r2, #0
 80091f0:	2180      	movs	r1, #128	; 0x80
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 fbe7 	bl	800a9c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2240      	movs	r2, #64	; 0x40
 8009202:	621a      	str	r2, [r3, #32]

  return ret;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923c:	b2da      	uxtb	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2204      	movs	r2, #4
 8009248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b04      	cmp	r3, #4
 800926c:	d106      	bne.n	800927c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009274:	b2da      	uxtb	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b03      	cmp	r3, #3
 800929c:	d110      	bne.n	80092c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	460b      	mov	r3, r1
 80092d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	32ae      	adds	r2, #174	; 0xae
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e01c      	b.n	8009326 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d115      	bne.n	8009324 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	32ae      	adds	r2, #174	; 0xae
 8009302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	32ae      	adds	r2, #174	; 0xae
 8009316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	4611      	mov	r1, r2
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b082      	sub	sp, #8
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	460b      	mov	r3, r1
 8009338:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	32ae      	adds	r2, #174	; 0xae
 8009344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800934c:	2303      	movs	r3, #3
 800934e:	e01c      	b.n	800938a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b03      	cmp	r3, #3
 800935a:	d115      	bne.n	8009388 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	32ae      	adds	r2, #174	; 0xae
 8009366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	32ae      	adds	r2, #174	; 0xae
 800937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	78fa      	ldrb	r2, [r7, #3]
 8009382:	4611      	mov	r1, r2
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00e      	beq.n	80093e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	6852      	ldr	r2, [r2, #4]
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	4611      	mov	r1, r2
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80093e0:	2303      	movs	r3, #3
 80093e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009414:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	885b      	ldrh	r3, [r3, #2]
 800943e:	b29a      	uxth	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	429a      	cmp	r2, r3
 8009448:	d920      	bls.n	800948c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	b29b      	uxth	r3, r3
 8009450:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009452:	e013      	b.n	800947c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009454:	f107 030a 	add.w	r3, r7, #10
 8009458:	4619      	mov	r1, r3
 800945a:	6978      	ldr	r0, [r7, #20]
 800945c:	f000 f81b 	bl	8009496 <USBD_GetNextDesc>
 8009460:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	785b      	ldrb	r3, [r3, #1]
 8009466:	2b05      	cmp	r3, #5
 8009468:	d108      	bne.n	800947c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	789b      	ldrb	r3, [r3, #2]
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	429a      	cmp	r2, r3
 8009476:	d008      	beq.n	800948a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009478:	2300      	movs	r3, #0
 800947a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	885b      	ldrh	r3, [r3, #2]
 8009480:	b29a      	uxth	r2, r3
 8009482:	897b      	ldrh	r3, [r7, #10]
 8009484:	429a      	cmp	r2, r3
 8009486:	d8e5      	bhi.n	8009454 <USBD_GetEpDesc+0x32>
 8009488:	e000      	b.n	800948c <USBD_GetEpDesc+0x6a>
          break;
 800948a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800948c:	693b      	ldr	r3, [r7, #16]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009496:	b480      	push	{r7}
 8009498:	b085      	sub	sp, #20
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	881a      	ldrh	r2, [r3, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4413      	add	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80094c2:	68fb      	ldr	r3, [r7, #12]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	3301      	adds	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80094ee:	8a3b      	ldrh	r3, [r7, #16]
 80094f0:	021b      	lsls	r3, r3, #8
 80094f2:	b21a      	sxth	r2, r3
 80094f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	b21b      	sxth	r3, r3
 80094fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094fe:	89fb      	ldrh	r3, [r7, #14]
}
 8009500:	4618      	mov	r0, r3
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009522:	2b40      	cmp	r3, #64	; 0x40
 8009524:	d005      	beq.n	8009532 <USBD_StdDevReq+0x26>
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	d857      	bhi.n	80095da <USBD_StdDevReq+0xce>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00f      	beq.n	800954e <USBD_StdDevReq+0x42>
 800952e:	2b20      	cmp	r3, #32
 8009530:	d153      	bne.n	80095da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	32ae      	adds	r2, #174	; 0xae
 800953c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]
      break;
 800954c:	e04a      	b.n	80095e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	785b      	ldrb	r3, [r3, #1]
 8009552:	2b09      	cmp	r3, #9
 8009554:	d83b      	bhi.n	80095ce <USBD_StdDevReq+0xc2>
 8009556:	a201      	add	r2, pc, #4	; (adr r2, 800955c <USBD_StdDevReq+0x50>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	080095b1 	.word	0x080095b1
 8009560:	080095c5 	.word	0x080095c5
 8009564:	080095cf 	.word	0x080095cf
 8009568:	080095bb 	.word	0x080095bb
 800956c:	080095cf 	.word	0x080095cf
 8009570:	0800958f 	.word	0x0800958f
 8009574:	08009585 	.word	0x08009585
 8009578:	080095cf 	.word	0x080095cf
 800957c:	080095a7 	.word	0x080095a7
 8009580:	08009599 	.word	0x08009599
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fa3c 	bl	8009a04 <USBD_GetDescriptor>
          break;
 800958c:	e024      	b.n	80095d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fba1 	bl	8009cd8 <USBD_SetAddress>
          break;
 8009596:	e01f      	b.n	80095d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fbe0 	bl	8009d60 <USBD_SetConfig>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]
          break;
 80095a4:	e018      	b.n	80095d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fc83 	bl	8009eb4 <USBD_GetConfig>
          break;
 80095ae:	e013      	b.n	80095d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fcb4 	bl	8009f20 <USBD_GetStatus>
          break;
 80095b8:	e00e      	b.n	80095d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fce3 	bl	8009f88 <USBD_SetFeature>
          break;
 80095c2:	e009      	b.n	80095d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fd07 	bl	8009fda <USBD_ClrFeature>
          break;
 80095cc:	e004      	b.n	80095d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fd5e 	bl	800a092 <USBD_CtlError>
          break;
 80095d6:	bf00      	nop
      }
      break;
 80095d8:	e004      	b.n	80095e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fd58 	bl	800a092 <USBD_CtlError>
      break;
 80095e2:	bf00      	nop
  }

  return ret;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop

080095f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	d005      	beq.n	8009616 <USBD_StdItfReq+0x26>
 800960a:	2b40      	cmp	r3, #64	; 0x40
 800960c:	d852      	bhi.n	80096b4 <USBD_StdItfReq+0xc4>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <USBD_StdItfReq+0x26>
 8009612:	2b20      	cmp	r3, #32
 8009614:	d14e      	bne.n	80096b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961c:	b2db      	uxtb	r3, r3
 800961e:	3b01      	subs	r3, #1
 8009620:	2b02      	cmp	r3, #2
 8009622:	d840      	bhi.n	80096a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	889b      	ldrh	r3, [r3, #4]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b01      	cmp	r3, #1
 800962c:	d836      	bhi.n	800969c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	889b      	ldrh	r3, [r3, #4]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff fed9 	bl	80093ee <USBD_CoreFindIF>
 800963c:	4603      	mov	r3, r0
 800963e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	2bff      	cmp	r3, #255	; 0xff
 8009644:	d01d      	beq.n	8009682 <USBD_StdItfReq+0x92>
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d11a      	bne.n	8009682 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800964c:	7bba      	ldrb	r2, [r7, #14]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	32ae      	adds	r2, #174	; 0xae
 8009652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00f      	beq.n	800967c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800965c:	7bba      	ldrb	r2, [r7, #14]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009664:	7bba      	ldrb	r2, [r7, #14]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	32ae      	adds	r2, #174	; 0xae
 800966a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	4798      	blx	r3
 8009676:	4603      	mov	r3, r0
 8009678:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800967a:	e004      	b.n	8009686 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800967c:	2303      	movs	r3, #3
 800967e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009680:	e001      	b.n	8009686 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009682:	2303      	movs	r3, #3
 8009684:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	88db      	ldrh	r3, [r3, #6]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d110      	bne.n	80096b0 <USBD_StdItfReq+0xc0>
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10d      	bne.n	80096b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fdc7 	bl	800a228 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800969a:	e009      	b.n	80096b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fcf7 	bl	800a092 <USBD_CtlError>
          break;
 80096a4:	e004      	b.n	80096b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fcf2 	bl	800a092 <USBD_CtlError>
          break;
 80096ae:	e000      	b.n	80096b2 <USBD_StdItfReq+0xc2>
          break;
 80096b0:	bf00      	nop
      }
      break;
 80096b2:	e004      	b.n	80096be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fceb 	bl	800a092 <USBD_CtlError>
      break;
 80096bc:	bf00      	nop
  }

  return ret;
 80096be:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	889b      	ldrh	r3, [r3, #4]
 80096da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096e4:	2b40      	cmp	r3, #64	; 0x40
 80096e6:	d007      	beq.n	80096f8 <USBD_StdEPReq+0x30>
 80096e8:	2b40      	cmp	r3, #64	; 0x40
 80096ea:	f200 817f 	bhi.w	80099ec <USBD_StdEPReq+0x324>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d02a      	beq.n	8009748 <USBD_StdEPReq+0x80>
 80096f2:	2b20      	cmp	r3, #32
 80096f4:	f040 817a 	bne.w	80099ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff fe83 	bl	8009408 <USBD_CoreFindEP>
 8009702:	4603      	mov	r3, r0
 8009704:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009706:	7b7b      	ldrb	r3, [r7, #13]
 8009708:	2bff      	cmp	r3, #255	; 0xff
 800970a:	f000 8174 	beq.w	80099f6 <USBD_StdEPReq+0x32e>
 800970e:	7b7b      	ldrb	r3, [r7, #13]
 8009710:	2b00      	cmp	r3, #0
 8009712:	f040 8170 	bne.w	80099f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009716:	7b7a      	ldrb	r2, [r7, #13]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800971e:	7b7a      	ldrb	r2, [r7, #13]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	32ae      	adds	r2, #174	; 0xae
 8009724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 8163 	beq.w	80099f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009730:	7b7a      	ldrb	r2, [r7, #13]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	32ae      	adds	r2, #174	; 0xae
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	4798      	blx	r3
 8009742:	4603      	mov	r3, r0
 8009744:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009746:	e156      	b.n	80099f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	2b03      	cmp	r3, #3
 800974e:	d008      	beq.n	8009762 <USBD_StdEPReq+0x9a>
 8009750:	2b03      	cmp	r3, #3
 8009752:	f300 8145 	bgt.w	80099e0 <USBD_StdEPReq+0x318>
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 809b 	beq.w	8009892 <USBD_StdEPReq+0x1ca>
 800975c:	2b01      	cmp	r3, #1
 800975e:	d03c      	beq.n	80097da <USBD_StdEPReq+0x112>
 8009760:	e13e      	b.n	80099e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b02      	cmp	r3, #2
 800976c:	d002      	beq.n	8009774 <USBD_StdEPReq+0xac>
 800976e:	2b03      	cmp	r3, #3
 8009770:	d016      	beq.n	80097a0 <USBD_StdEPReq+0xd8>
 8009772:	e02c      	b.n	80097ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <USBD_StdEPReq+0xce>
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b80      	cmp	r3, #128	; 0x80
 800977e:	d00a      	beq.n	8009796 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f963 	bl	800aa50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 f95f 	bl	800aa50 <USBD_LL_StallEP>
 8009792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009794:	e020      	b.n	80097d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fc7a 	bl	800a092 <USBD_CtlError>
              break;
 800979e:	e01b      	b.n	80097d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	885b      	ldrh	r3, [r3, #2]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10e      	bne.n	80097c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <USBD_StdEPReq+0xfe>
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b80      	cmp	r3, #128	; 0x80
 80097b2:	d008      	beq.n	80097c6 <USBD_StdEPReq+0xfe>
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	88db      	ldrh	r3, [r3, #6]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f001 f945 	bl	800aa50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fd2e 	bl	800a228 <USBD_CtlSendStatus>

              break;
 80097cc:	e004      	b.n	80097d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fc5e 	bl	800a092 <USBD_CtlError>
              break;
 80097d6:	bf00      	nop
          }
          break;
 80097d8:	e107      	b.n	80099ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d002      	beq.n	80097ec <USBD_StdEPReq+0x124>
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d016      	beq.n	8009818 <USBD_StdEPReq+0x150>
 80097ea:	e04b      	b.n	8009884 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <USBD_StdEPReq+0x146>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d00a      	beq.n	800980e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 f927 	bl	800aa50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009802:	2180      	movs	r1, #128	; 0x80
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f923 	bl	800aa50 <USBD_LL_StallEP>
 800980a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800980c:	e040      	b.n	8009890 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fc3e 	bl	800a092 <USBD_CtlError>
              break;
 8009816:	e03b      	b.n	8009890 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	885b      	ldrh	r3, [r3, #2]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d136      	bne.n	800988e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009826:	2b00      	cmp	r3, #0
 8009828:	d004      	beq.n	8009834 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 f92d 	bl	800aa8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fcf7 	bl	800a228 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7ff fde2 	bl	8009408 <USBD_CoreFindEP>
 8009844:	4603      	mov	r3, r0
 8009846:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009848:	7b7b      	ldrb	r3, [r7, #13]
 800984a:	2bff      	cmp	r3, #255	; 0xff
 800984c:	d01f      	beq.n	800988e <USBD_StdEPReq+0x1c6>
 800984e:	7b7b      	ldrb	r3, [r7, #13]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d11c      	bne.n	800988e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009854:	7b7a      	ldrb	r2, [r7, #13]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800985c:	7b7a      	ldrb	r2, [r7, #13]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	32ae      	adds	r2, #174	; 0xae
 8009862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d010      	beq.n	800988e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800986c:	7b7a      	ldrb	r2, [r7, #13]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	32ae      	adds	r2, #174	; 0xae
 8009872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	4798      	blx	r3
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009882:	e004      	b.n	800988e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fc03 	bl	800a092 <USBD_CtlError>
              break;
 800988c:	e000      	b.n	8009890 <USBD_StdEPReq+0x1c8>
              break;
 800988e:	bf00      	nop
          }
          break;
 8009890:	e0ab      	b.n	80099ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b02      	cmp	r3, #2
 800989c:	d002      	beq.n	80098a4 <USBD_StdEPReq+0x1dc>
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d032      	beq.n	8009908 <USBD_StdEPReq+0x240>
 80098a2:	e097      	b.n	80099d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <USBD_StdEPReq+0x1f2>
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	2b80      	cmp	r3, #128	; 0x80
 80098ae:	d004      	beq.n	80098ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fbed 	bl	800a092 <USBD_CtlError>
                break;
 80098b8:	e091      	b.n	80099de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	da0b      	bge.n	80098da <USBD_StdEPReq+0x212>
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c8:	4613      	mov	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	3310      	adds	r3, #16
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	4413      	add	r3, r2
 80098d6:	3304      	adds	r3, #4
 80098d8:	e00b      	b.n	80098f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	4413      	add	r3, r2
 80098f0:	3304      	adds	r3, #4
 80098f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2202      	movs	r2, #2
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fc37 	bl	800a174 <USBD_CtlSendData>
              break;
 8009906:	e06a      	b.n	80099de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800990c:	2b00      	cmp	r3, #0
 800990e:	da11      	bge.n	8009934 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	f003 020f 	and.w	r2, r3, #15
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	3324      	adds	r3, #36	; 0x24
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d117      	bne.n	800995a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fbb0 	bl	800a092 <USBD_CtlError>
                  break;
 8009932:	e054      	b.n	80099de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	f003 020f 	and.w	r2, r3, #15
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	440b      	add	r3, r1
 8009946:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fb9d 	bl	800a092 <USBD_CtlError>
                  break;
 8009958:	e041      	b.n	80099de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800995a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800995e:	2b00      	cmp	r3, #0
 8009960:	da0b      	bge.n	800997a <USBD_StdEPReq+0x2b2>
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	3310      	adds	r3, #16
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	3304      	adds	r3, #4
 8009978:	e00b      	b.n	8009992 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009980:	4613      	mov	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	4413      	add	r3, r2
 8009990:	3304      	adds	r3, #4
 8009992:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <USBD_StdEPReq+0x2d8>
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	2b80      	cmp	r3, #128	; 0x80
 800999e:	d103      	bne.n	80099a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	e00e      	b.n	80099c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 f88d 	bl	800aacc <USBD_LL_IsStallEP>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d003      	beq.n	80099c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2201      	movs	r2, #1
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e002      	b.n	80099c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2202      	movs	r2, #2
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fbd1 	bl	800a174 <USBD_CtlSendData>
              break;
 80099d2:	e004      	b.n	80099de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fb5b 	bl	800a092 <USBD_CtlError>
              break;
 80099dc:	bf00      	nop
          }
          break;
 80099de:	e004      	b.n	80099ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fb55 	bl	800a092 <USBD_CtlError>
          break;
 80099e8:	bf00      	nop
      }
      break;
 80099ea:	e005      	b.n	80099f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fb4f 	bl	800a092 <USBD_CtlError>
      break;
 80099f4:	e000      	b.n	80099f8 <USBD_StdEPReq+0x330>
      break;
 80099f6:	bf00      	nop
  }

  return ret;
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	885b      	ldrh	r3, [r3, #2]
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	3b01      	subs	r3, #1
 8009a24:	2b06      	cmp	r3, #6
 8009a26:	f200 8128 	bhi.w	8009c7a <USBD_GetDescriptor+0x276>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <USBD_GetDescriptor+0x2c>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009a4d 	.word	0x08009a4d
 8009a34:	08009a65 	.word	0x08009a65
 8009a38:	08009aa5 	.word	0x08009aa5
 8009a3c:	08009c7b 	.word	0x08009c7b
 8009a40:	08009c7b 	.word	0x08009c7b
 8009a44:	08009c1b 	.word	0x08009c1b
 8009a48:	08009c47 	.word	0x08009c47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	7c12      	ldrb	r2, [r2, #16]
 8009a58:	f107 0108 	add.w	r1, r7, #8
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
      break;
 8009a62:	e112      	b.n	8009c8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	7c1b      	ldrb	r3, [r3, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10d      	bne.n	8009a88 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	f107 0208 	add.w	r2, r7, #8
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3301      	adds	r3, #1
 8009a82:	2202      	movs	r2, #2
 8009a84:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a86:	e100      	b.n	8009c8a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	f107 0208 	add.w	r2, r7, #8
 8009a94:	4610      	mov	r0, r2
 8009a96:	4798      	blx	r3
 8009a98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	701a      	strb	r2, [r3, #0]
      break;
 8009aa2:	e0f2      	b.n	8009c8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	885b      	ldrh	r3, [r3, #2]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b05      	cmp	r3, #5
 8009aac:	f200 80ac 	bhi.w	8009c08 <USBD_GetDescriptor+0x204>
 8009ab0:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <USBD_GetDescriptor+0xb4>)
 8009ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab6:	bf00      	nop
 8009ab8:	08009ad1 	.word	0x08009ad1
 8009abc:	08009b05 	.word	0x08009b05
 8009ac0:	08009b39 	.word	0x08009b39
 8009ac4:	08009b6d 	.word	0x08009b6d
 8009ac8:	08009ba1 	.word	0x08009ba1
 8009acc:	08009bd5 	.word	0x08009bd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00b      	beq.n	8009af4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	7c12      	ldrb	r2, [r2, #16]
 8009ae8:	f107 0108 	add.w	r1, r7, #8
 8009aec:	4610      	mov	r0, r2
 8009aee:	4798      	blx	r3
 8009af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af2:	e091      	b.n	8009c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 facb 	bl	800a092 <USBD_CtlError>
            err++;
 8009afc:	7afb      	ldrb	r3, [r7, #11]
 8009afe:	3301      	adds	r3, #1
 8009b00:	72fb      	strb	r3, [r7, #11]
          break;
 8009b02:	e089      	b.n	8009c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	7c12      	ldrb	r2, [r2, #16]
 8009b1c:	f107 0108 	add.w	r1, r7, #8
 8009b20:	4610      	mov	r0, r2
 8009b22:	4798      	blx	r3
 8009b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b26:	e077      	b.n	8009c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fab1 	bl	800a092 <USBD_CtlError>
            err++;
 8009b30:	7afb      	ldrb	r3, [r7, #11]
 8009b32:	3301      	adds	r3, #1
 8009b34:	72fb      	strb	r3, [r7, #11]
          break;
 8009b36:	e06f      	b.n	8009c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00b      	beq.n	8009b5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	7c12      	ldrb	r2, [r2, #16]
 8009b50:	f107 0108 	add.w	r1, r7, #8
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
 8009b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b5a:	e05d      	b.n	8009c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fa97 	bl	800a092 <USBD_CtlError>
            err++;
 8009b64:	7afb      	ldrb	r3, [r7, #11]
 8009b66:	3301      	adds	r3, #1
 8009b68:	72fb      	strb	r3, [r7, #11]
          break;
 8009b6a:	e055      	b.n	8009c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	7c12      	ldrb	r2, [r2, #16]
 8009b84:	f107 0108 	add.w	r1, r7, #8
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4798      	blx	r3
 8009b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8e:	e043      	b.n	8009c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa7d 	bl	800a092 <USBD_CtlError>
            err++;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9e:	e03b      	b.n	8009c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	7c12      	ldrb	r2, [r2, #16]
 8009bb8:	f107 0108 	add.w	r1, r7, #8
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4798      	blx	r3
 8009bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc2:	e029      	b.n	8009c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fa63 	bl	800a092 <USBD_CtlError>
            err++;
 8009bcc:	7afb      	ldrb	r3, [r7, #11]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bd2:	e021      	b.n	8009c18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bf6:	e00f      	b.n	8009c18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa49 	bl	800a092 <USBD_CtlError>
            err++;
 8009c00:	7afb      	ldrb	r3, [r7, #11]
 8009c02:	3301      	adds	r3, #1
 8009c04:	72fb      	strb	r3, [r7, #11]
          break;
 8009c06:	e007      	b.n	8009c18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa41 	bl	800a092 <USBD_CtlError>
          err++;
 8009c10:	7afb      	ldrb	r3, [r7, #11]
 8009c12:	3301      	adds	r3, #1
 8009c14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c16:	bf00      	nop
      }
      break;
 8009c18:	e037      	b.n	8009c8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	7c1b      	ldrb	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2a:	f107 0208 	add.w	r2, r7, #8
 8009c2e:	4610      	mov	r0, r2
 8009c30:	4798      	blx	r3
 8009c32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c34:	e029      	b.n	8009c8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fa2a 	bl	800a092 <USBD_CtlError>
        err++;
 8009c3e:	7afb      	ldrb	r3, [r7, #11]
 8009c40:	3301      	adds	r3, #1
 8009c42:	72fb      	strb	r3, [r7, #11]
      break;
 8009c44:	e021      	b.n	8009c8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7c1b      	ldrb	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10d      	bne.n	8009c6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c56:	f107 0208 	add.w	r2, r7, #8
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	4798      	blx	r3
 8009c5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	3301      	adds	r3, #1
 8009c64:	2207      	movs	r2, #7
 8009c66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c68:	e00f      	b.n	8009c8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fa10 	bl	800a092 <USBD_CtlError>
        err++;
 8009c72:	7afb      	ldrb	r3, [r7, #11]
 8009c74:	3301      	adds	r3, #1
 8009c76:	72fb      	strb	r3, [r7, #11]
      break;
 8009c78:	e007      	b.n	8009c8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa08 	bl	800a092 <USBD_CtlError>
      err++;
 8009c82:	7afb      	ldrb	r3, [r7, #11]
 8009c84:	3301      	adds	r3, #1
 8009c86:	72fb      	strb	r3, [r7, #11]
      break;
 8009c88:	bf00      	nop
  }

  if (err != 0U)
 8009c8a:	7afb      	ldrb	r3, [r7, #11]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d11e      	bne.n	8009cce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	88db      	ldrh	r3, [r3, #6]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d016      	beq.n	8009cc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c98:	893b      	ldrh	r3, [r7, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00e      	beq.n	8009cbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	88da      	ldrh	r2, [r3, #6]
 8009ca2:	893b      	ldrh	r3, [r7, #8]
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	bf28      	it	cs
 8009ca8:	4613      	movcs	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cae:	893b      	ldrh	r3, [r7, #8]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	68f9      	ldr	r1, [r7, #12]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa5d 	bl	800a174 <USBD_CtlSendData>
 8009cba:	e009      	b.n	8009cd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f9e7 	bl	800a092 <USBD_CtlError>
 8009cc4:	e004      	b.n	8009cd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 faae 	bl	800a228 <USBD_CtlSendStatus>
 8009ccc:	e000      	b.n	8009cd0 <USBD_GetDescriptor+0x2cc>
    return;
 8009cce:	bf00      	nop
  }
}
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop

08009cd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	889b      	ldrh	r3, [r3, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d131      	bne.n	8009d4e <USBD_SetAddress+0x76>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	88db      	ldrh	r3, [r3, #6]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d12d      	bne.n	8009d4e <USBD_SetAddress+0x76>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8009cf8:	d829      	bhi.n	8009d4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	885b      	ldrh	r3, [r3, #2]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d104      	bne.n	8009d1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f9bc 	bl	800a092 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d1a:	e01d      	b.n	8009d58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7bfa      	ldrb	r2, [r7, #15]
 8009d20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fefb 	bl	800ab24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa7a 	bl	800a228 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d004      	beq.n	8009d44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d42:	e009      	b.n	8009d58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4c:	e004      	b.n	8009d58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f99e 	bl	800a092 <USBD_CtlError>
  }
}
 8009d56:	bf00      	nop
 8009d58:	bf00      	nop
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	885b      	ldrh	r3, [r3, #2]
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	4b4e      	ldr	r3, [pc, #312]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009d76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d78:	4b4d      	ldr	r3, [pc, #308]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d905      	bls.n	8009d8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f985 	bl	800a092 <USBD_CtlError>
    return USBD_FAIL;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e08c      	b.n	8009ea6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d002      	beq.n	8009d9e <USBD_SetConfig+0x3e>
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d029      	beq.n	8009df0 <USBD_SetConfig+0x90>
 8009d9c:	e075      	b.n	8009e8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d9e:	4b44      	ldr	r3, [pc, #272]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d020      	beq.n	8009de8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009da6:	4b42      	ldr	r3, [pc, #264]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009db0:	4b3f      	ldr	r3, [pc, #252]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fe ffe7 	bl	8008d8a <USBD_SetClassConfig>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d008      	beq.n	8009dd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f962 	bl	800a092 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dd6:	e065      	b.n	8009ea4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fa25 	bl	800a228 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2203      	movs	r2, #3
 8009de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009de6:	e05d      	b.n	8009ea4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fa1d 	bl	800a228 <USBD_CtlSendStatus>
      break;
 8009dee:	e059      	b.n	8009ea4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009df0:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d112      	bne.n	8009e1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e00:	4b2b      	ldr	r3, [pc, #172]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e0a:	4b29      	ldr	r3, [pc, #164]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7fe ffd6 	bl	8008dc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fa06 	bl	800a228 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e1c:	e042      	b.n	8009ea4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e1e:	4b24      	ldr	r3, [pc, #144]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d02a      	beq.n	8009e82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7fe ffc4 	bl	8008dc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e3a:	4b1d      	ldr	r3, [pc, #116]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e44:	4b1a      	ldr	r3, [pc, #104]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7fe ff9d 	bl	8008d8a <USBD_SetClassConfig>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00f      	beq.n	8009e7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f918 	bl	800a092 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7fe ffa9 	bl	8008dc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e78:	e014      	b.n	8009ea4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f9d4 	bl	800a228 <USBD_CtlSendStatus>
      break;
 8009e80:	e010      	b.n	8009ea4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f9d0 	bl	800a228 <USBD_CtlSendStatus>
      break;
 8009e88:	e00c      	b.n	8009ea4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 f900 	bl	800a092 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e92:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <USBD_SetConfig+0x150>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7fe ff92 	bl	8008dc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea2:	bf00      	nop
  }

  return ret;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000bd8 	.word	0x20000bd8

08009eb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	88db      	ldrh	r3, [r3, #6]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d004      	beq.n	8009ed0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f8e2 	bl	800a092 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ece:	e023      	b.n	8009f18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	dc02      	bgt.n	8009ee2 <USBD_GetConfig+0x2e>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dc03      	bgt.n	8009ee8 <USBD_GetConfig+0x34>
 8009ee0:	e015      	b.n	8009f0e <USBD_GetConfig+0x5a>
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d00b      	beq.n	8009efe <USBD_GetConfig+0x4a>
 8009ee6:	e012      	b.n	8009f0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f93c 	bl	800a174 <USBD_CtlSendData>
        break;
 8009efc:	e00c      	b.n	8009f18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	3304      	adds	r3, #4
 8009f02:	2201      	movs	r2, #1
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f934 	bl	800a174 <USBD_CtlSendData>
        break;
 8009f0c:	e004      	b.n	8009f18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f8be 	bl	800a092 <USBD_CtlError>
        break;
 8009f16:	bf00      	nop
}
 8009f18:	bf00      	nop
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	3b01      	subs	r3, #1
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d81e      	bhi.n	8009f76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	88db      	ldrh	r3, [r3, #6]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d004      	beq.n	8009f4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f8a5 	bl	800a092 <USBD_CtlError>
        break;
 8009f48:	e01a      	b.n	8009f80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	f043 0202 	orr.w	r2, r3, #2
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	330c      	adds	r3, #12
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f900 	bl	800a174 <USBD_CtlSendData>
      break;
 8009f74:	e004      	b.n	8009f80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f88a 	bl	800a092 <USBD_CtlError>
      break;
 8009f7e:	bf00      	nop
  }
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	885b      	ldrh	r3, [r3, #2]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d107      	bne.n	8009faa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f940 	bl	800a228 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009fa8:	e013      	b.n	8009fd2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	885b      	ldrh	r3, [r3, #2]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d10b      	bne.n	8009fca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	889b      	ldrh	r3, [r3, #4]
 8009fb6:	0a1b      	lsrs	r3, r3, #8
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f930 	bl	800a228 <USBD_CtlSendStatus>
}
 8009fc8:	e003      	b.n	8009fd2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f860 	bl	800a092 <USBD_CtlError>
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d80b      	bhi.n	800a00a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	885b      	ldrh	r3, [r3, #2]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d10c      	bne.n	800a014 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f910 	bl	800a228 <USBD_CtlSendStatus>
      }
      break;
 800a008:	e004      	b.n	800a014 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f840 	bl	800a092 <USBD_CtlError>
      break;
 800a012:	e000      	b.n	800a016 <USBD_ClrFeature+0x3c>
      break;
 800a014:	bf00      	nop
  }
}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	781a      	ldrb	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3301      	adds	r3, #1
 800a038:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	781a      	ldrb	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3301      	adds	r3, #1
 800a046:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff fa41 	bl	80094d0 <SWAPBYTE>
 800a04e:	4603      	mov	r3, r0
 800a050:	461a      	mov	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3301      	adds	r3, #1
 800a05a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	3301      	adds	r3, #1
 800a060:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff fa34 	bl	80094d0 <SWAPBYTE>
 800a068:	4603      	mov	r3, r0
 800a06a:	461a      	mov	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3301      	adds	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7ff fa27 	bl	80094d0 <SWAPBYTE>
 800a082:	4603      	mov	r3, r0
 800a084:	461a      	mov	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	80da      	strh	r2, [r3, #6]
}
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a09c:	2180      	movs	r1, #128	; 0x80
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fcd6 	bl	800aa50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fcd2 	bl	800aa50 <USBD_LL_StallEP>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d036      	beq.n	800a138 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0ce:	6938      	ldr	r0, [r7, #16]
 800a0d0:	f000 f836 	bl	800a140 <USBD_GetLen>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7812      	ldrb	r2, [r2, #0]
 800a0ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	2203      	movs	r2, #3
 800a0fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	3301      	adds	r3, #1
 800a102:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a104:	e013      	b.n	800a12e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	4413      	add	r3, r2
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	7812      	ldrb	r2, [r2, #0]
 800a110:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	3301      	adds	r3, #1
 800a116:	613b      	str	r3, [r7, #16]
    idx++;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	3301      	adds	r3, #1
 800a11c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	4413      	add	r3, r2
 800a124:	2200      	movs	r2, #0
 800a126:	701a      	strb	r2, [r3, #0]
    idx++;
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	3301      	adds	r3, #1
 800a12c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e7      	bne.n	800a106 <USBD_GetString+0x52>
 800a136:	e000      	b.n	800a13a <USBD_GetString+0x86>
    return;
 800a138:	bf00      	nop
  }
}
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a150:	e005      	b.n	800a15e <USBD_GetLen+0x1e>
  {
    len++;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	3301      	adds	r3, #1
 800a156:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	3301      	adds	r3, #1
 800a15c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1f5      	bne.n	800a152 <USBD_GetLen+0x12>
  }

  return len;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2202      	movs	r2, #2
 800a184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	2100      	movs	r1, #0
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 fce1 	bl	800ab62 <USBD_LL_Transmit>

  return USBD_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f000 fcd0 	bl	800ab62 <USBD_LL_Transmit>

  return USBD_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2203      	movs	r2, #3
 800a1dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 fcd4 	bl	800aba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	2100      	movs	r1, #0
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 fcc3 	bl	800aba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2204      	movs	r2, #4
 800a234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a238:	2300      	movs	r3, #0
 800a23a:	2200      	movs	r2, #0
 800a23c:	2100      	movs	r1, #0
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fc8f 	bl	800ab62 <USBD_LL_Transmit>

  return USBD_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2205      	movs	r2, #5
 800a25a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a25e:	2300      	movs	r3, #0
 800a260:	2200      	movs	r2, #0
 800a262:	2100      	movs	r1, #0
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fc9d 	bl	800aba4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a278:	2200      	movs	r2, #0
 800a27a:	4912      	ldr	r1, [pc, #72]	; (800a2c4 <MX_USB_DEVICE_Init+0x50>)
 800a27c:	4812      	ldr	r0, [pc, #72]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a27e:	f7fe fd07 	bl	8008c90 <USBD_Init>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a288:	f7f7 fbf4 	bl	8001a74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a28c:	490f      	ldr	r1, [pc, #60]	; (800a2cc <MX_USB_DEVICE_Init+0x58>)
 800a28e:	480e      	ldr	r0, [pc, #56]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a290:	f7fe fd2e 	bl	8008cf0 <USBD_RegisterClass>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a29a:	f7f7 fbeb 	bl	8001a74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a29e:	490c      	ldr	r1, [pc, #48]	; (800a2d0 <MX_USB_DEVICE_Init+0x5c>)
 800a2a0:	4809      	ldr	r0, [pc, #36]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a2a2:	f7fe fc1f 	bl	8008ae4 <USBD_CDC_RegisterInterface>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2ac:	f7f7 fbe2 	bl	8001a74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2b0:	4805      	ldr	r0, [pc, #20]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a2b2:	f7fe fd53 	bl	8008d5c <USBD_Start>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2bc:	f7f7 fbda 	bl	8001a74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2c0:	bf00      	nop
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	200000ac 	.word	0x200000ac
 800a2c8:	20000bdc 	.word	0x20000bdc
 800a2cc:	20000018 	.word	0x20000018
 800a2d0:	20000098 	.word	0x20000098

0800a2d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a2d8:	2200      	movs	r2, #0
 800a2da:	4905      	ldr	r1, [pc, #20]	; (800a2f0 <CDC_Init_FS+0x1c>)
 800a2dc:	4805      	ldr	r0, [pc, #20]	; (800a2f4 <CDC_Init_FS+0x20>)
 800a2de:	f7fe fc1b 	bl	8008b18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a2e2:	4905      	ldr	r1, [pc, #20]	; (800a2f8 <CDC_Init_FS+0x24>)
 800a2e4:	4803      	ldr	r0, [pc, #12]	; (800a2f4 <CDC_Init_FS+0x20>)
 800a2e6:	f7fe fc39 	bl	8008b5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a2ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	200016b8 	.word	0x200016b8
 800a2f4:	20000bdc 	.word	0x20000bdc
 800a2f8:	20000eb8 	.word	0x20000eb8

0800a2fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a300:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a302:	4618      	mov	r0, r3
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
 800a318:	4613      	mov	r3, r2
 800a31a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a31c:	79fb      	ldrb	r3, [r7, #7]
 800a31e:	2b23      	cmp	r3, #35	; 0x23
 800a320:	d84a      	bhi.n	800a3b8 <CDC_Control_FS+0xac>
 800a322:	a201      	add	r2, pc, #4	; (adr r2, 800a328 <CDC_Control_FS+0x1c>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a3b9 	.word	0x0800a3b9
 800a32c:	0800a3b9 	.word	0x0800a3b9
 800a330:	0800a3b9 	.word	0x0800a3b9
 800a334:	0800a3b9 	.word	0x0800a3b9
 800a338:	0800a3b9 	.word	0x0800a3b9
 800a33c:	0800a3b9 	.word	0x0800a3b9
 800a340:	0800a3b9 	.word	0x0800a3b9
 800a344:	0800a3b9 	.word	0x0800a3b9
 800a348:	0800a3b9 	.word	0x0800a3b9
 800a34c:	0800a3b9 	.word	0x0800a3b9
 800a350:	0800a3b9 	.word	0x0800a3b9
 800a354:	0800a3b9 	.word	0x0800a3b9
 800a358:	0800a3b9 	.word	0x0800a3b9
 800a35c:	0800a3b9 	.word	0x0800a3b9
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3b9 	.word	0x0800a3b9
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	0800a3b9 	.word	0x0800a3b9
 800a370:	0800a3b9 	.word	0x0800a3b9
 800a374:	0800a3b9 	.word	0x0800a3b9
 800a378:	0800a3b9 	.word	0x0800a3b9
 800a37c:	0800a3b9 	.word	0x0800a3b9
 800a380:	0800a3b9 	.word	0x0800a3b9
 800a384:	0800a3b9 	.word	0x0800a3b9
 800a388:	0800a3b9 	.word	0x0800a3b9
 800a38c:	0800a3b9 	.word	0x0800a3b9
 800a390:	0800a3b9 	.word	0x0800a3b9
 800a394:	0800a3b9 	.word	0x0800a3b9
 800a398:	0800a3b9 	.word	0x0800a3b9
 800a39c:	0800a3b9 	.word	0x0800a3b9
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3b9 	.word	0x0800a3b9
 800a3a8:	0800a3b9 	.word	0x0800a3b9
 800a3ac:	0800a3b9 	.word	0x0800a3b9
 800a3b0:	0800a3b9 	.word	0x0800a3b9
 800a3b4:	0800a3b9 	.word	0x0800a3b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3b8:	bf00      	nop
  }

  return (USBD_OK);
 800a3ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	4805      	ldr	r0, [pc, #20]	; (800a3ec <CDC_Receive_FS+0x24>)
 800a3d6:	f7fe fbc1 	bl	8008b5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a3da:	4804      	ldr	r0, [pc, #16]	; (800a3ec <CDC_Receive_FS+0x24>)
 800a3dc:	f7fe fc22 	bl	8008c24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a3e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000bdc 	.word	0x20000bdc

0800a3f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a400:	4b0d      	ldr	r3, [pc, #52]	; (800a438 <CDC_Transmit_FS+0x48>)
 800a402:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a406:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a412:	2301      	movs	r3, #1
 800a414:	e00b      	b.n	800a42e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a416:	887b      	ldrh	r3, [r7, #2]
 800a418:	461a      	mov	r2, r3
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	4806      	ldr	r0, [pc, #24]	; (800a438 <CDC_Transmit_FS+0x48>)
 800a41e:	f7fe fb7b 	bl	8008b18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a422:	4805      	ldr	r0, [pc, #20]	; (800a438 <CDC_Transmit_FS+0x48>)
 800a424:	f7fe fbb8 	bl	8008b98 <USBD_CDC_TransmitPacket>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000bdc 	.word	0x20000bdc

0800a43c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	4613      	mov	r3, r2
 800a448:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a44e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a452:	4618      	mov	r0, r3
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2212      	movs	r2, #18
 800a470:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a472:	4b03      	ldr	r3, [pc, #12]	; (800a480 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	200000c8 	.word	0x200000c8

0800a484 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4603      	mov	r3, r0
 800a48c:	6039      	str	r1, [r7, #0]
 800a48e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2204      	movs	r2, #4
 800a494:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a496:	4b03      	ldr	r3, [pc, #12]	; (800a4a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	200000dc 	.word	0x200000dc

0800a4a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	6039      	str	r1, [r7, #0]
 800a4b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4b4:	79fb      	ldrb	r3, [r7, #7]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d105      	bne.n	800a4c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	4907      	ldr	r1, [pc, #28]	; (800a4dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a4be:	4808      	ldr	r0, [pc, #32]	; (800a4e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4c0:	f7ff fdf8 	bl	800a0b4 <USBD_GetString>
 800a4c4:	e004      	b.n	800a4d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	4904      	ldr	r1, [pc, #16]	; (800a4dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a4ca:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4cc:	f7ff fdf2 	bl	800a0b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4d0:	4b02      	ldr	r3, [pc, #8]	; (800a4dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20001eb8 	.word	0x20001eb8
 800a4e0:	0800bc68 	.word	0x0800bc68

0800a4e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	6039      	str	r1, [r7, #0]
 800a4ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	4904      	ldr	r1, [pc, #16]	; (800a504 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4f4:	4804      	ldr	r0, [pc, #16]	; (800a508 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4f6:	f7ff fddd 	bl	800a0b4 <USBD_GetString>
  return USBD_StrDesc;
 800a4fa:	4b02      	ldr	r3, [pc, #8]	; (800a504 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20001eb8 	.word	0x20001eb8
 800a508:	0800bc74 	.word	0x0800bc74

0800a50c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	6039      	str	r1, [r7, #0]
 800a516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	221a      	movs	r2, #26
 800a51c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a51e:	f000 f843 	bl	800a5a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a522:	4b02      	ldr	r3, [pc, #8]	; (800a52c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	200000e0 	.word	0x200000e0

0800a530 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	6039      	str	r1, [r7, #0]
 800a53a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a53c:	79fb      	ldrb	r3, [r7, #7]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d105      	bne.n	800a54e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	4907      	ldr	r1, [pc, #28]	; (800a564 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a546:	4808      	ldr	r0, [pc, #32]	; (800a568 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a548:	f7ff fdb4 	bl	800a0b4 <USBD_GetString>
 800a54c:	e004      	b.n	800a558 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	4904      	ldr	r1, [pc, #16]	; (800a564 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a552:	4805      	ldr	r0, [pc, #20]	; (800a568 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a554:	f7ff fdae 	bl	800a0b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a558:	4b02      	ldr	r3, [pc, #8]	; (800a564 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20001eb8 	.word	0x20001eb8
 800a568:	0800bc88 	.word	0x0800bc88

0800a56c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	6039      	str	r1, [r7, #0]
 800a576:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d105      	bne.n	800a58a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4907      	ldr	r1, [pc, #28]	; (800a5a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a582:	4808      	ldr	r0, [pc, #32]	; (800a5a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a584:	f7ff fd96 	bl	800a0b4 <USBD_GetString>
 800a588:	e004      	b.n	800a594 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	4904      	ldr	r1, [pc, #16]	; (800a5a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a58e:	4805      	ldr	r0, [pc, #20]	; (800a5a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a590:	f7ff fd90 	bl	800a0b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a594:	4b02      	ldr	r3, [pc, #8]	; (800a5a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20001eb8 	.word	0x20001eb8
 800a5a4:	0800bc94 	.word	0x0800bc94

0800a5a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5ae:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <Get_SerialNum+0x44>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5b4:	4b0e      	ldr	r3, [pc, #56]	; (800a5f0 <Get_SerialNum+0x48>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5ba:	4b0e      	ldr	r3, [pc, #56]	; (800a5f4 <Get_SerialNum+0x4c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d009      	beq.n	800a5e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5ce:	2208      	movs	r2, #8
 800a5d0:	4909      	ldr	r1, [pc, #36]	; (800a5f8 <Get_SerialNum+0x50>)
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 f814 	bl	800a600 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5d8:	2204      	movs	r2, #4
 800a5da:	4908      	ldr	r1, [pc, #32]	; (800a5fc <Get_SerialNum+0x54>)
 800a5dc:	68b8      	ldr	r0, [r7, #8]
 800a5de:	f000 f80f 	bl	800a600 <IntToUnicode>
  }
}
 800a5e2:	bf00      	nop
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	1fff7a10 	.word	0x1fff7a10
 800a5f0:	1fff7a14 	.word	0x1fff7a14
 800a5f4:	1fff7a18 	.word	0x1fff7a18
 800a5f8:	200000e2 	.word	0x200000e2
 800a5fc:	200000f2 	.word	0x200000f2

0800a600 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	4613      	mov	r3, r2
 800a60c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a612:	2300      	movs	r3, #0
 800a614:	75fb      	strb	r3, [r7, #23]
 800a616:	e027      	b.n	800a668 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	0f1b      	lsrs	r3, r3, #28
 800a61c:	2b09      	cmp	r3, #9
 800a61e:	d80b      	bhi.n	800a638 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	0f1b      	lsrs	r3, r3, #28
 800a624:	b2da      	uxtb	r2, r3
 800a626:	7dfb      	ldrb	r3, [r7, #23]
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	4619      	mov	r1, r3
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	440b      	add	r3, r1
 800a630:	3230      	adds	r2, #48	; 0x30
 800a632:	b2d2      	uxtb	r2, r2
 800a634:	701a      	strb	r2, [r3, #0]
 800a636:	e00a      	b.n	800a64e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	0f1b      	lsrs	r3, r3, #28
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	4619      	mov	r1, r3
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	440b      	add	r3, r1
 800a648:	3237      	adds	r2, #55	; 0x37
 800a64a:	b2d2      	uxtb	r2, r2
 800a64c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	011b      	lsls	r3, r3, #4
 800a652:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a654:	7dfb      	ldrb	r3, [r7, #23]
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	3301      	adds	r3, #1
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	4413      	add	r3, r2
 800a65e:	2200      	movs	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a662:	7dfb      	ldrb	r3, [r7, #23]
 800a664:	3301      	adds	r3, #1
 800a666:	75fb      	strb	r3, [r7, #23]
 800a668:	7dfa      	ldrb	r2, [r7, #23]
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d3d3      	bcc.n	800a618 <IntToUnicode+0x18>
  }
}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
	...

0800a680 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08a      	sub	sp, #40	; 0x28
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a688:	f107 0314 	add.w	r3, r7, #20
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	605a      	str	r2, [r3, #4]
 800a692:	609a      	str	r2, [r3, #8]
 800a694:	60da      	str	r2, [r3, #12]
 800a696:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6a0:	d13a      	bne.n	800a718 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	613b      	str	r3, [r7, #16]
 800a6a6:	4b1e      	ldr	r3, [pc, #120]	; (800a720 <HAL_PCD_MspInit+0xa0>)
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6aa:	4a1d      	ldr	r2, [pc, #116]	; (800a720 <HAL_PCD_MspInit+0xa0>)
 800a6ac:	f043 0301 	orr.w	r3, r3, #1
 800a6b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a6b2:	4b1b      	ldr	r3, [pc, #108]	; (800a720 <HAL_PCD_MspInit+0xa0>)
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	613b      	str	r3, [r7, #16]
 800a6bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a6be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a6c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6d0:	230a      	movs	r3, #10
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6d4:	f107 0314 	add.w	r3, r7, #20
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4812      	ldr	r0, [pc, #72]	; (800a724 <HAL_PCD_MspInit+0xa4>)
 800a6dc:	f7f8 faae 	bl	8002c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6e0:	4b0f      	ldr	r3, [pc, #60]	; (800a720 <HAL_PCD_MspInit+0xa0>)
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e4:	4a0e      	ldr	r2, [pc, #56]	; (800a720 <HAL_PCD_MspInit+0xa0>)
 800a6e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ea:	6353      	str	r3, [r2, #52]	; 0x34
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <HAL_PCD_MspInit+0xa0>)
 800a6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f4:	4a0a      	ldr	r2, [pc, #40]	; (800a720 <HAL_PCD_MspInit+0xa0>)
 800a6f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6fa:	6453      	str	r3, [r2, #68]	; 0x44
 800a6fc:	4b08      	ldr	r3, [pc, #32]	; (800a720 <HAL_PCD_MspInit+0xa0>)
 800a6fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a704:	60fb      	str	r3, [r7, #12]
 800a706:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a708:	2200      	movs	r2, #0
 800a70a:	2100      	movs	r1, #0
 800a70c:	2043      	movs	r0, #67	; 0x43
 800a70e:	f7f7 fe58 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a712:	2043      	movs	r0, #67	; 0x43
 800a714:	f7f7 fe71 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a718:	bf00      	nop
 800a71a:	3728      	adds	r7, #40	; 0x28
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	40023800 	.word	0x40023800
 800a724:	40020000 	.word	0x40020000

0800a728 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f7fe fb59 	bl	8008df6 <USBD_LL_SetupStage>
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a75e:	78fa      	ldrb	r2, [r7, #3]
 800a760:	6879      	ldr	r1, [r7, #4]
 800a762:	4613      	mov	r3, r2
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	440b      	add	r3, r1
 800a76c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	78fb      	ldrb	r3, [r7, #3]
 800a774:	4619      	mov	r1, r3
 800a776:	f7fe fb93 	bl	8008ea0 <USBD_LL_DataOutStage>
}
 800a77a:	bf00      	nop
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	460b      	mov	r3, r1
 800a78c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a794:	78fa      	ldrb	r2, [r7, #3]
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	4613      	mov	r3, r2
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	440b      	add	r3, r1
 800a7a2:	334c      	adds	r3, #76	; 0x4c
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	78fb      	ldrb	r3, [r7, #3]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f7fe fc2c 	bl	8009006 <USBD_LL_DataInStage>
}
 800a7ae:	bf00      	nop
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe fd60 	bl	800928a <USBD_LL_SOF>
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d001      	beq.n	800a7ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a7e6:	f7f7 f945 	bl	8001a74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7f0:	7bfa      	ldrb	r2, [r7, #15]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe fd0a 	bl	800920e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a800:	4618      	mov	r0, r3
 800a802:	f7fe fcb2 	bl	800916a <USBD_LL_Reset>
}
 800a806:	bf00      	nop
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
	...

0800a810 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fd05 	bl	800922e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	6812      	ldr	r2, [r2, #0]
 800a832:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a836:	f043 0301 	orr.w	r3, r3, #1
 800a83a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d005      	beq.n	800a850 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a844:	4b04      	ldr	r3, [pc, #16]	; (800a858 <HAL_PCD_SuspendCallback+0x48>)
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	4a03      	ldr	r2, [pc, #12]	; (800a858 <HAL_PCD_SuspendCallback+0x48>)
 800a84a:	f043 0306 	orr.w	r3, r3, #6
 800a84e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	e000ed00 	.word	0xe000ed00

0800a85c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fcf5 	bl	800925a <USBD_LL_Resume>
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a88a:	78fa      	ldrb	r2, [r7, #3]
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe fd4d 	bl	800932e <USBD_LL_IsoOUTIncomplete>
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ae:	78fa      	ldrb	r2, [r7, #3]
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe fd09 	bl	80092ca <USBD_LL_IsoINIncomplete>
}
 800a8b8:	bf00      	nop
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fd5f 	bl	8009392 <USBD_LL_DevConnected>
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fd5c 	bl	80093a8 <USBD_LL_DevDisconnected>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d13c      	bne.n	800a982 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a908:	4a20      	ldr	r2, [pc, #128]	; (800a98c <USBD_LL_Init+0x94>)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a1e      	ldr	r2, [pc, #120]	; (800a98c <USBD_LL_Init+0x94>)
 800a914:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a918:	4b1c      	ldr	r3, [pc, #112]	; (800a98c <USBD_LL_Init+0x94>)
 800a91a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a91e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a920:	4b1a      	ldr	r3, [pc, #104]	; (800a98c <USBD_LL_Init+0x94>)
 800a922:	2204      	movs	r2, #4
 800a924:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a926:	4b19      	ldr	r3, [pc, #100]	; (800a98c <USBD_LL_Init+0x94>)
 800a928:	2202      	movs	r2, #2
 800a92a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a92c:	4b17      	ldr	r3, [pc, #92]	; (800a98c <USBD_LL_Init+0x94>)
 800a92e:	2200      	movs	r2, #0
 800a930:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a932:	4b16      	ldr	r3, [pc, #88]	; (800a98c <USBD_LL_Init+0x94>)
 800a934:	2202      	movs	r2, #2
 800a936:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a938:	4b14      	ldr	r3, [pc, #80]	; (800a98c <USBD_LL_Init+0x94>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a93e:	4b13      	ldr	r3, [pc, #76]	; (800a98c <USBD_LL_Init+0x94>)
 800a940:	2200      	movs	r2, #0
 800a942:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a944:	4b11      	ldr	r3, [pc, #68]	; (800a98c <USBD_LL_Init+0x94>)
 800a946:	2200      	movs	r2, #0
 800a948:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a94a:	4b10      	ldr	r3, [pc, #64]	; (800a98c <USBD_LL_Init+0x94>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a950:	4b0e      	ldr	r3, [pc, #56]	; (800a98c <USBD_LL_Init+0x94>)
 800a952:	2200      	movs	r2, #0
 800a954:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a956:	480d      	ldr	r0, [pc, #52]	; (800a98c <USBD_LL_Init+0x94>)
 800a958:	f7f8 fb27 	bl	8002faa <HAL_PCD_Init>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a962:	f7f7 f887 	bl	8001a74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a966:	2180      	movs	r1, #128	; 0x80
 800a968:	4808      	ldr	r0, [pc, #32]	; (800a98c <USBD_LL_Init+0x94>)
 800a96a:	f7f9 fd7e 	bl	800446a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a96e:	2240      	movs	r2, #64	; 0x40
 800a970:	2100      	movs	r1, #0
 800a972:	4806      	ldr	r0, [pc, #24]	; (800a98c <USBD_LL_Init+0x94>)
 800a974:	f7f9 fd32 	bl	80043dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a978:	2280      	movs	r2, #128	; 0x80
 800a97a:	2101      	movs	r1, #1
 800a97c:	4803      	ldr	r0, [pc, #12]	; (800a98c <USBD_LL_Init+0x94>)
 800a97e:	f7f9 fd2d 	bl	80043dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	200020b8 	.word	0x200020b8

0800a990 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7f8 fc1c 	bl	80031e4 <HAL_PCD_Start>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 f942 	bl	800ac3c <USBD_Get_USB_Status>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	70fb      	strb	r3, [r7, #3]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70bb      	strb	r3, [r7, #2]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9ee:	78bb      	ldrb	r3, [r7, #2]
 800a9f0:	883a      	ldrh	r2, [r7, #0]
 800a9f2:	78f9      	ldrb	r1, [r7, #3]
 800a9f4:	f7f9 f8ed 	bl	8003bd2 <HAL_PCD_EP_Open>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 f91c 	bl	800ac3c <USBD_Get_USB_Status>
 800aa04:	4603      	mov	r3, r0
 800aa06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	4611      	mov	r1, r2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7f9 f936 	bl	8003ca2 <HAL_PCD_EP_Close>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f8fd 	bl	800ac3c <USBD_Get_USB_Status>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f9 fa0e 	bl	8003e90 <HAL_PCD_EP_SetStall>
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 f8de 	bl	800ac3c <USBD_Get_USB_Status>
 800aa80:	4603      	mov	r3, r0
 800aa82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	460b      	mov	r3, r1
 800aa98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aaa8:	78fa      	ldrb	r2, [r7, #3]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7f9 fa53 	bl	8003f58 <HAL_PCD_EP_ClrStall>
 800aab2:	4603      	mov	r3, r0
 800aab4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 f8bf 	bl	800ac3c <USBD_Get_USB_Status>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aade:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	da0b      	bge.n	800ab00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaee:	68f9      	ldr	r1, [r7, #12]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	333e      	adds	r3, #62	; 0x3e
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	e00b      	b.n	800ab18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	00db      	lsls	r3, r3, #3
 800ab0c:	4413      	add	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	440b      	add	r3, r1
 800ab12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ab16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	4611      	mov	r1, r2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7f9 f820 	bl	8003b88 <HAL_PCD_SetAddress>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 f874 	bl	800ac3c <USBD_Get_USB_Status>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b086      	sub	sp, #24
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab80:	7af9      	ldrb	r1, [r7, #11]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	f7f9 f939 	bl	8003dfc <HAL_PCD_EP_Transmit>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 f853 	bl	800ac3c <USBD_Get_USB_Status>
 800ab96:	4603      	mov	r3, r0
 800ab98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	460b      	mov	r3, r1
 800abb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abc2:	7af9      	ldrb	r1, [r7, #11]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	f7f9 f8b5 	bl	8003d36 <HAL_PCD_EP_Receive>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 f832 	bl	800ac3c <USBD_Get_USB_Status>
 800abd8:	4603      	mov	r3, r0
 800abda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abdc:	7dbb      	ldrb	r3, [r7, #22]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	460b      	mov	r3, r1
 800abf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7f9 f8e5 	bl	8003dcc <HAL_PCD_EP_GetRxCount>
 800ac02:	4603      	mov	r3, r0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac14:	4b03      	ldr	r3, [pc, #12]	; (800ac24 <USBD_static_malloc+0x18>)
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	200025c4 	.word	0x200025c4

0800ac28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]

}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	4603      	mov	r3, r0
 800ac44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d817      	bhi.n	800ac80 <USBD_Get_USB_Status+0x44>
 800ac50:	a201      	add	r2, pc, #4	; (adr r2, 800ac58 <USBD_Get_USB_Status+0x1c>)
 800ac52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac56:	bf00      	nop
 800ac58:	0800ac69 	.word	0x0800ac69
 800ac5c:	0800ac6f 	.word	0x0800ac6f
 800ac60:	0800ac75 	.word	0x0800ac75
 800ac64:	0800ac7b 	.word	0x0800ac7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac6c:	e00b      	b.n	800ac86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	73fb      	strb	r3, [r7, #15]
    break;
 800ac72:	e008      	b.n	800ac86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac74:	2301      	movs	r3, #1
 800ac76:	73fb      	strb	r3, [r7, #15]
    break;
 800ac78:	e005      	b.n	800ac86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac7e:	e002      	b.n	800ac86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac80:	2303      	movs	r3, #3
 800ac82:	73fb      	strb	r3, [r7, #15]
    break;
 800ac84:	bf00      	nop
  }
  return usb_status;
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <atoi>:
 800ac94:	220a      	movs	r2, #10
 800ac96:	2100      	movs	r1, #0
 800ac98:	f000 b902 	b.w	800aea0 <strtol>

0800ac9c <__errno>:
 800ac9c:	4b01      	ldr	r3, [pc, #4]	; (800aca4 <__errno+0x8>)
 800ac9e:	6818      	ldr	r0, [r3, #0]
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	200000fc 	.word	0x200000fc

0800aca8 <__libc_init_array>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	4d0d      	ldr	r5, [pc, #52]	; (800ace0 <__libc_init_array+0x38>)
 800acac:	4c0d      	ldr	r4, [pc, #52]	; (800ace4 <__libc_init_array+0x3c>)
 800acae:	1b64      	subs	r4, r4, r5
 800acb0:	10a4      	asrs	r4, r4, #2
 800acb2:	2600      	movs	r6, #0
 800acb4:	42a6      	cmp	r6, r4
 800acb6:	d109      	bne.n	800accc <__libc_init_array+0x24>
 800acb8:	4d0b      	ldr	r5, [pc, #44]	; (800ace8 <__libc_init_array+0x40>)
 800acba:	4c0c      	ldr	r4, [pc, #48]	; (800acec <__libc_init_array+0x44>)
 800acbc:	f000 fd3a 	bl	800b734 <_init>
 800acc0:	1b64      	subs	r4, r4, r5
 800acc2:	10a4      	asrs	r4, r4, #2
 800acc4:	2600      	movs	r6, #0
 800acc6:	42a6      	cmp	r6, r4
 800acc8:	d105      	bne.n	800acd6 <__libc_init_array+0x2e>
 800acca:	bd70      	pop	{r4, r5, r6, pc}
 800accc:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd0:	4798      	blx	r3
 800acd2:	3601      	adds	r6, #1
 800acd4:	e7ee      	b.n	800acb4 <__libc_init_array+0xc>
 800acd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acda:	4798      	blx	r3
 800acdc:	3601      	adds	r6, #1
 800acde:	e7f2      	b.n	800acc6 <__libc_init_array+0x1e>
 800ace0:	0800be00 	.word	0x0800be00
 800ace4:	0800be00 	.word	0x0800be00
 800ace8:	0800be00 	.word	0x0800be00
 800acec:	0800be04 	.word	0x0800be04

0800acf0 <memcpy>:
 800acf0:	440a      	add	r2, r1
 800acf2:	4291      	cmp	r1, r2
 800acf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800acf8:	d100      	bne.n	800acfc <memcpy+0xc>
 800acfa:	4770      	bx	lr
 800acfc:	b510      	push	{r4, lr}
 800acfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad06:	4291      	cmp	r1, r2
 800ad08:	d1f9      	bne.n	800acfe <memcpy+0xe>
 800ad0a:	bd10      	pop	{r4, pc}

0800ad0c <memset>:
 800ad0c:	4402      	add	r2, r0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d100      	bne.n	800ad16 <memset+0xa>
 800ad14:	4770      	bx	lr
 800ad16:	f803 1b01 	strb.w	r1, [r3], #1
 800ad1a:	e7f9      	b.n	800ad10 <memset+0x4>

0800ad1c <siprintf>:
 800ad1c:	b40e      	push	{r1, r2, r3}
 800ad1e:	b500      	push	{lr}
 800ad20:	b09c      	sub	sp, #112	; 0x70
 800ad22:	ab1d      	add	r3, sp, #116	; 0x74
 800ad24:	9002      	str	r0, [sp, #8]
 800ad26:	9006      	str	r0, [sp, #24]
 800ad28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad2c:	4809      	ldr	r0, [pc, #36]	; (800ad54 <siprintf+0x38>)
 800ad2e:	9107      	str	r1, [sp, #28]
 800ad30:	9104      	str	r1, [sp, #16]
 800ad32:	4909      	ldr	r1, [pc, #36]	; (800ad58 <siprintf+0x3c>)
 800ad34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad38:	9105      	str	r1, [sp, #20]
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	a902      	add	r1, sp, #8
 800ad40:	f000 f914 	bl	800af6c <_svfiprintf_r>
 800ad44:	9b02      	ldr	r3, [sp, #8]
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	b01c      	add	sp, #112	; 0x70
 800ad4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad50:	b003      	add	sp, #12
 800ad52:	4770      	bx	lr
 800ad54:	200000fc 	.word	0x200000fc
 800ad58:	ffff0208 	.word	0xffff0208

0800ad5c <strchr>:
 800ad5c:	b2c9      	uxtb	r1, r1
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad64:	b11a      	cbz	r2, 800ad6e <strchr+0x12>
 800ad66:	428a      	cmp	r2, r1
 800ad68:	d1f9      	bne.n	800ad5e <strchr+0x2>
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	4770      	bx	lr
 800ad6e:	2900      	cmp	r1, #0
 800ad70:	bf18      	it	ne
 800ad72:	2300      	movne	r3, #0
 800ad74:	e7f9      	b.n	800ad6a <strchr+0xe>

0800ad76 <strncpy>:
 800ad76:	b510      	push	{r4, lr}
 800ad78:	3901      	subs	r1, #1
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	b132      	cbz	r2, 800ad8c <strncpy+0x16>
 800ad7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad82:	f803 4b01 	strb.w	r4, [r3], #1
 800ad86:	3a01      	subs	r2, #1
 800ad88:	2c00      	cmp	r4, #0
 800ad8a:	d1f7      	bne.n	800ad7c <strncpy+0x6>
 800ad8c:	441a      	add	r2, r3
 800ad8e:	2100      	movs	r1, #0
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d100      	bne.n	800ad96 <strncpy+0x20>
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9a:	e7f9      	b.n	800ad90 <strncpy+0x1a>

0800ad9c <_strtol_l.constprop.0>:
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada2:	d001      	beq.n	800ada8 <_strtol_l.constprop.0+0xc>
 800ada4:	2b24      	cmp	r3, #36	; 0x24
 800ada6:	d906      	bls.n	800adb6 <_strtol_l.constprop.0+0x1a>
 800ada8:	f7ff ff78 	bl	800ac9c <__errno>
 800adac:	2316      	movs	r3, #22
 800adae:	6003      	str	r3, [r0, #0]
 800adb0:	2000      	movs	r0, #0
 800adb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ae9c <_strtol_l.constprop.0+0x100>
 800adba:	460d      	mov	r5, r1
 800adbc:	462e      	mov	r6, r5
 800adbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adc2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800adc6:	f017 0708 	ands.w	r7, r7, #8
 800adca:	d1f7      	bne.n	800adbc <_strtol_l.constprop.0+0x20>
 800adcc:	2c2d      	cmp	r4, #45	; 0x2d
 800adce:	d132      	bne.n	800ae36 <_strtol_l.constprop.0+0x9a>
 800add0:	782c      	ldrb	r4, [r5, #0]
 800add2:	2701      	movs	r7, #1
 800add4:	1cb5      	adds	r5, r6, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d05b      	beq.n	800ae92 <_strtol_l.constprop.0+0xf6>
 800adda:	2b10      	cmp	r3, #16
 800addc:	d109      	bne.n	800adf2 <_strtol_l.constprop.0+0x56>
 800adde:	2c30      	cmp	r4, #48	; 0x30
 800ade0:	d107      	bne.n	800adf2 <_strtol_l.constprop.0+0x56>
 800ade2:	782c      	ldrb	r4, [r5, #0]
 800ade4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ade8:	2c58      	cmp	r4, #88	; 0x58
 800adea:	d14d      	bne.n	800ae88 <_strtol_l.constprop.0+0xec>
 800adec:	786c      	ldrb	r4, [r5, #1]
 800adee:	2310      	movs	r3, #16
 800adf0:	3502      	adds	r5, #2
 800adf2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800adf6:	f108 38ff 	add.w	r8, r8, #4294967295
 800adfa:	f04f 0c00 	mov.w	ip, #0
 800adfe:	fbb8 f9f3 	udiv	r9, r8, r3
 800ae02:	4666      	mov	r6, ip
 800ae04:	fb03 8a19 	mls	sl, r3, r9, r8
 800ae08:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ae0c:	f1be 0f09 	cmp.w	lr, #9
 800ae10:	d816      	bhi.n	800ae40 <_strtol_l.constprop.0+0xa4>
 800ae12:	4674      	mov	r4, lr
 800ae14:	42a3      	cmp	r3, r4
 800ae16:	dd24      	ble.n	800ae62 <_strtol_l.constprop.0+0xc6>
 800ae18:	f1bc 0f00 	cmp.w	ip, #0
 800ae1c:	db1e      	blt.n	800ae5c <_strtol_l.constprop.0+0xc0>
 800ae1e:	45b1      	cmp	r9, r6
 800ae20:	d31c      	bcc.n	800ae5c <_strtol_l.constprop.0+0xc0>
 800ae22:	d101      	bne.n	800ae28 <_strtol_l.constprop.0+0x8c>
 800ae24:	45a2      	cmp	sl, r4
 800ae26:	db19      	blt.n	800ae5c <_strtol_l.constprop.0+0xc0>
 800ae28:	fb06 4603 	mla	r6, r6, r3, r4
 800ae2c:	f04f 0c01 	mov.w	ip, #1
 800ae30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae34:	e7e8      	b.n	800ae08 <_strtol_l.constprop.0+0x6c>
 800ae36:	2c2b      	cmp	r4, #43	; 0x2b
 800ae38:	bf04      	itt	eq
 800ae3a:	782c      	ldrbeq	r4, [r5, #0]
 800ae3c:	1cb5      	addeq	r5, r6, #2
 800ae3e:	e7ca      	b.n	800add6 <_strtol_l.constprop.0+0x3a>
 800ae40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ae44:	f1be 0f19 	cmp.w	lr, #25
 800ae48:	d801      	bhi.n	800ae4e <_strtol_l.constprop.0+0xb2>
 800ae4a:	3c37      	subs	r4, #55	; 0x37
 800ae4c:	e7e2      	b.n	800ae14 <_strtol_l.constprop.0+0x78>
 800ae4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ae52:	f1be 0f19 	cmp.w	lr, #25
 800ae56:	d804      	bhi.n	800ae62 <_strtol_l.constprop.0+0xc6>
 800ae58:	3c57      	subs	r4, #87	; 0x57
 800ae5a:	e7db      	b.n	800ae14 <_strtol_l.constprop.0+0x78>
 800ae5c:	f04f 3cff 	mov.w	ip, #4294967295
 800ae60:	e7e6      	b.n	800ae30 <_strtol_l.constprop.0+0x94>
 800ae62:	f1bc 0f00 	cmp.w	ip, #0
 800ae66:	da05      	bge.n	800ae74 <_strtol_l.constprop.0+0xd8>
 800ae68:	2322      	movs	r3, #34	; 0x22
 800ae6a:	6003      	str	r3, [r0, #0]
 800ae6c:	4646      	mov	r6, r8
 800ae6e:	b942      	cbnz	r2, 800ae82 <_strtol_l.constprop.0+0xe6>
 800ae70:	4630      	mov	r0, r6
 800ae72:	e79e      	b.n	800adb2 <_strtol_l.constprop.0+0x16>
 800ae74:	b107      	cbz	r7, 800ae78 <_strtol_l.constprop.0+0xdc>
 800ae76:	4276      	negs	r6, r6
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	d0f9      	beq.n	800ae70 <_strtol_l.constprop.0+0xd4>
 800ae7c:	f1bc 0f00 	cmp.w	ip, #0
 800ae80:	d000      	beq.n	800ae84 <_strtol_l.constprop.0+0xe8>
 800ae82:	1e69      	subs	r1, r5, #1
 800ae84:	6011      	str	r1, [r2, #0]
 800ae86:	e7f3      	b.n	800ae70 <_strtol_l.constprop.0+0xd4>
 800ae88:	2430      	movs	r4, #48	; 0x30
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1b1      	bne.n	800adf2 <_strtol_l.constprop.0+0x56>
 800ae8e:	2308      	movs	r3, #8
 800ae90:	e7af      	b.n	800adf2 <_strtol_l.constprop.0+0x56>
 800ae92:	2c30      	cmp	r4, #48	; 0x30
 800ae94:	d0a5      	beq.n	800ade2 <_strtol_l.constprop.0+0x46>
 800ae96:	230a      	movs	r3, #10
 800ae98:	e7ab      	b.n	800adf2 <_strtol_l.constprop.0+0x56>
 800ae9a:	bf00      	nop
 800ae9c:	0800bcc5 	.word	0x0800bcc5

0800aea0 <strtol>:
 800aea0:	4613      	mov	r3, r2
 800aea2:	460a      	mov	r2, r1
 800aea4:	4601      	mov	r1, r0
 800aea6:	4802      	ldr	r0, [pc, #8]	; (800aeb0 <strtol+0x10>)
 800aea8:	6800      	ldr	r0, [r0, #0]
 800aeaa:	f7ff bf77 	b.w	800ad9c <_strtol_l.constprop.0>
 800aeae:	bf00      	nop
 800aeb0:	200000fc 	.word	0x200000fc

0800aeb4 <__ssputs_r>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	688e      	ldr	r6, [r1, #8]
 800aeba:	429e      	cmp	r6, r3
 800aebc:	4682      	mov	sl, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	4690      	mov	r8, r2
 800aec2:	461f      	mov	r7, r3
 800aec4:	d838      	bhi.n	800af38 <__ssputs_r+0x84>
 800aec6:	898a      	ldrh	r2, [r1, #12]
 800aec8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aecc:	d032      	beq.n	800af34 <__ssputs_r+0x80>
 800aece:	6825      	ldr	r5, [r4, #0]
 800aed0:	6909      	ldr	r1, [r1, #16]
 800aed2:	eba5 0901 	sub.w	r9, r5, r1
 800aed6:	6965      	ldr	r5, [r4, #20]
 800aed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aedc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aee0:	3301      	adds	r3, #1
 800aee2:	444b      	add	r3, r9
 800aee4:	106d      	asrs	r5, r5, #1
 800aee6:	429d      	cmp	r5, r3
 800aee8:	bf38      	it	cc
 800aeea:	461d      	movcc	r5, r3
 800aeec:	0553      	lsls	r3, r2, #21
 800aeee:	d531      	bpl.n	800af54 <__ssputs_r+0xa0>
 800aef0:	4629      	mov	r1, r5
 800aef2:	f000 fb55 	bl	800b5a0 <_malloc_r>
 800aef6:	4606      	mov	r6, r0
 800aef8:	b950      	cbnz	r0, 800af10 <__ssputs_r+0x5c>
 800aefa:	230c      	movs	r3, #12
 800aefc:	f8ca 3000 	str.w	r3, [sl]
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af06:	81a3      	strh	r3, [r4, #12]
 800af08:	f04f 30ff 	mov.w	r0, #4294967295
 800af0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af10:	6921      	ldr	r1, [r4, #16]
 800af12:	464a      	mov	r2, r9
 800af14:	f7ff feec 	bl	800acf0 <memcpy>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	6126      	str	r6, [r4, #16]
 800af26:	6165      	str	r5, [r4, #20]
 800af28:	444e      	add	r6, r9
 800af2a:	eba5 0509 	sub.w	r5, r5, r9
 800af2e:	6026      	str	r6, [r4, #0]
 800af30:	60a5      	str	r5, [r4, #8]
 800af32:	463e      	mov	r6, r7
 800af34:	42be      	cmp	r6, r7
 800af36:	d900      	bls.n	800af3a <__ssputs_r+0x86>
 800af38:	463e      	mov	r6, r7
 800af3a:	6820      	ldr	r0, [r4, #0]
 800af3c:	4632      	mov	r2, r6
 800af3e:	4641      	mov	r1, r8
 800af40:	f000 faa8 	bl	800b494 <memmove>
 800af44:	68a3      	ldr	r3, [r4, #8]
 800af46:	1b9b      	subs	r3, r3, r6
 800af48:	60a3      	str	r3, [r4, #8]
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	4433      	add	r3, r6
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	2000      	movs	r0, #0
 800af52:	e7db      	b.n	800af0c <__ssputs_r+0x58>
 800af54:	462a      	mov	r2, r5
 800af56:	f000 fb97 	bl	800b688 <_realloc_r>
 800af5a:	4606      	mov	r6, r0
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1e1      	bne.n	800af24 <__ssputs_r+0x70>
 800af60:	6921      	ldr	r1, [r4, #16]
 800af62:	4650      	mov	r0, sl
 800af64:	f000 fab0 	bl	800b4c8 <_free_r>
 800af68:	e7c7      	b.n	800aefa <__ssputs_r+0x46>
	...

0800af6c <_svfiprintf_r>:
 800af6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	4698      	mov	r8, r3
 800af72:	898b      	ldrh	r3, [r1, #12]
 800af74:	061b      	lsls	r3, r3, #24
 800af76:	b09d      	sub	sp, #116	; 0x74
 800af78:	4607      	mov	r7, r0
 800af7a:	460d      	mov	r5, r1
 800af7c:	4614      	mov	r4, r2
 800af7e:	d50e      	bpl.n	800af9e <_svfiprintf_r+0x32>
 800af80:	690b      	ldr	r3, [r1, #16]
 800af82:	b963      	cbnz	r3, 800af9e <_svfiprintf_r+0x32>
 800af84:	2140      	movs	r1, #64	; 0x40
 800af86:	f000 fb0b 	bl	800b5a0 <_malloc_r>
 800af8a:	6028      	str	r0, [r5, #0]
 800af8c:	6128      	str	r0, [r5, #16]
 800af8e:	b920      	cbnz	r0, 800af9a <_svfiprintf_r+0x2e>
 800af90:	230c      	movs	r3, #12
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	f04f 30ff 	mov.w	r0, #4294967295
 800af98:	e0d1      	b.n	800b13e <_svfiprintf_r+0x1d2>
 800af9a:	2340      	movs	r3, #64	; 0x40
 800af9c:	616b      	str	r3, [r5, #20]
 800af9e:	2300      	movs	r3, #0
 800afa0:	9309      	str	r3, [sp, #36]	; 0x24
 800afa2:	2320      	movs	r3, #32
 800afa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800afac:	2330      	movs	r3, #48	; 0x30
 800afae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b158 <_svfiprintf_r+0x1ec>
 800afb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afb6:	f04f 0901 	mov.w	r9, #1
 800afba:	4623      	mov	r3, r4
 800afbc:	469a      	mov	sl, r3
 800afbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afc2:	b10a      	cbz	r2, 800afc8 <_svfiprintf_r+0x5c>
 800afc4:	2a25      	cmp	r2, #37	; 0x25
 800afc6:	d1f9      	bne.n	800afbc <_svfiprintf_r+0x50>
 800afc8:	ebba 0b04 	subs.w	fp, sl, r4
 800afcc:	d00b      	beq.n	800afe6 <_svfiprintf_r+0x7a>
 800afce:	465b      	mov	r3, fp
 800afd0:	4622      	mov	r2, r4
 800afd2:	4629      	mov	r1, r5
 800afd4:	4638      	mov	r0, r7
 800afd6:	f7ff ff6d 	bl	800aeb4 <__ssputs_r>
 800afda:	3001      	adds	r0, #1
 800afdc:	f000 80aa 	beq.w	800b134 <_svfiprintf_r+0x1c8>
 800afe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afe2:	445a      	add	r2, fp
 800afe4:	9209      	str	r2, [sp, #36]	; 0x24
 800afe6:	f89a 3000 	ldrb.w	r3, [sl]
 800afea:	2b00      	cmp	r3, #0
 800afec:	f000 80a2 	beq.w	800b134 <_svfiprintf_r+0x1c8>
 800aff0:	2300      	movs	r3, #0
 800aff2:	f04f 32ff 	mov.w	r2, #4294967295
 800aff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800affa:	f10a 0a01 	add.w	sl, sl, #1
 800affe:	9304      	str	r3, [sp, #16]
 800b000:	9307      	str	r3, [sp, #28]
 800b002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b006:	931a      	str	r3, [sp, #104]	; 0x68
 800b008:	4654      	mov	r4, sl
 800b00a:	2205      	movs	r2, #5
 800b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b010:	4851      	ldr	r0, [pc, #324]	; (800b158 <_svfiprintf_r+0x1ec>)
 800b012:	f7f5 f8ed 	bl	80001f0 <memchr>
 800b016:	9a04      	ldr	r2, [sp, #16]
 800b018:	b9d8      	cbnz	r0, 800b052 <_svfiprintf_r+0xe6>
 800b01a:	06d0      	lsls	r0, r2, #27
 800b01c:	bf44      	itt	mi
 800b01e:	2320      	movmi	r3, #32
 800b020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b024:	0711      	lsls	r1, r2, #28
 800b026:	bf44      	itt	mi
 800b028:	232b      	movmi	r3, #43	; 0x2b
 800b02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b02e:	f89a 3000 	ldrb.w	r3, [sl]
 800b032:	2b2a      	cmp	r3, #42	; 0x2a
 800b034:	d015      	beq.n	800b062 <_svfiprintf_r+0xf6>
 800b036:	9a07      	ldr	r2, [sp, #28]
 800b038:	4654      	mov	r4, sl
 800b03a:	2000      	movs	r0, #0
 800b03c:	f04f 0c0a 	mov.w	ip, #10
 800b040:	4621      	mov	r1, r4
 800b042:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b046:	3b30      	subs	r3, #48	; 0x30
 800b048:	2b09      	cmp	r3, #9
 800b04a:	d94e      	bls.n	800b0ea <_svfiprintf_r+0x17e>
 800b04c:	b1b0      	cbz	r0, 800b07c <_svfiprintf_r+0x110>
 800b04e:	9207      	str	r2, [sp, #28]
 800b050:	e014      	b.n	800b07c <_svfiprintf_r+0x110>
 800b052:	eba0 0308 	sub.w	r3, r0, r8
 800b056:	fa09 f303 	lsl.w	r3, r9, r3
 800b05a:	4313      	orrs	r3, r2
 800b05c:	9304      	str	r3, [sp, #16]
 800b05e:	46a2      	mov	sl, r4
 800b060:	e7d2      	b.n	800b008 <_svfiprintf_r+0x9c>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	1d19      	adds	r1, r3, #4
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	9103      	str	r1, [sp, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	bfbb      	ittet	lt
 800b06e:	425b      	neglt	r3, r3
 800b070:	f042 0202 	orrlt.w	r2, r2, #2
 800b074:	9307      	strge	r3, [sp, #28]
 800b076:	9307      	strlt	r3, [sp, #28]
 800b078:	bfb8      	it	lt
 800b07a:	9204      	strlt	r2, [sp, #16]
 800b07c:	7823      	ldrb	r3, [r4, #0]
 800b07e:	2b2e      	cmp	r3, #46	; 0x2e
 800b080:	d10c      	bne.n	800b09c <_svfiprintf_r+0x130>
 800b082:	7863      	ldrb	r3, [r4, #1]
 800b084:	2b2a      	cmp	r3, #42	; 0x2a
 800b086:	d135      	bne.n	800b0f4 <_svfiprintf_r+0x188>
 800b088:	9b03      	ldr	r3, [sp, #12]
 800b08a:	1d1a      	adds	r2, r3, #4
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	9203      	str	r2, [sp, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	bfb8      	it	lt
 800b094:	f04f 33ff 	movlt.w	r3, #4294967295
 800b098:	3402      	adds	r4, #2
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b168 <_svfiprintf_r+0x1fc>
 800b0a0:	7821      	ldrb	r1, [r4, #0]
 800b0a2:	2203      	movs	r2, #3
 800b0a4:	4650      	mov	r0, sl
 800b0a6:	f7f5 f8a3 	bl	80001f0 <memchr>
 800b0aa:	b140      	cbz	r0, 800b0be <_svfiprintf_r+0x152>
 800b0ac:	2340      	movs	r3, #64	; 0x40
 800b0ae:	eba0 000a 	sub.w	r0, r0, sl
 800b0b2:	fa03 f000 	lsl.w	r0, r3, r0
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	4303      	orrs	r3, r0
 800b0ba:	3401      	adds	r4, #1
 800b0bc:	9304      	str	r3, [sp, #16]
 800b0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c2:	4826      	ldr	r0, [pc, #152]	; (800b15c <_svfiprintf_r+0x1f0>)
 800b0c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0c8:	2206      	movs	r2, #6
 800b0ca:	f7f5 f891 	bl	80001f0 <memchr>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d038      	beq.n	800b144 <_svfiprintf_r+0x1d8>
 800b0d2:	4b23      	ldr	r3, [pc, #140]	; (800b160 <_svfiprintf_r+0x1f4>)
 800b0d4:	bb1b      	cbnz	r3, 800b11e <_svfiprintf_r+0x1b2>
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	3307      	adds	r3, #7
 800b0da:	f023 0307 	bic.w	r3, r3, #7
 800b0de:	3308      	adds	r3, #8
 800b0e0:	9303      	str	r3, [sp, #12]
 800b0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e4:	4433      	add	r3, r6
 800b0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e8:	e767      	b.n	800afba <_svfiprintf_r+0x4e>
 800b0ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	e7a5      	b.n	800b040 <_svfiprintf_r+0xd4>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	3401      	adds	r4, #1
 800b0f8:	9305      	str	r3, [sp, #20]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	f04f 0c0a 	mov.w	ip, #10
 800b100:	4620      	mov	r0, r4
 800b102:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b106:	3a30      	subs	r2, #48	; 0x30
 800b108:	2a09      	cmp	r2, #9
 800b10a:	d903      	bls.n	800b114 <_svfiprintf_r+0x1a8>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0c5      	beq.n	800b09c <_svfiprintf_r+0x130>
 800b110:	9105      	str	r1, [sp, #20]
 800b112:	e7c3      	b.n	800b09c <_svfiprintf_r+0x130>
 800b114:	fb0c 2101 	mla	r1, ip, r1, r2
 800b118:	4604      	mov	r4, r0
 800b11a:	2301      	movs	r3, #1
 800b11c:	e7f0      	b.n	800b100 <_svfiprintf_r+0x194>
 800b11e:	ab03      	add	r3, sp, #12
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	462a      	mov	r2, r5
 800b124:	4b0f      	ldr	r3, [pc, #60]	; (800b164 <_svfiprintf_r+0x1f8>)
 800b126:	a904      	add	r1, sp, #16
 800b128:	4638      	mov	r0, r7
 800b12a:	f3af 8000 	nop.w
 800b12e:	1c42      	adds	r2, r0, #1
 800b130:	4606      	mov	r6, r0
 800b132:	d1d6      	bne.n	800b0e2 <_svfiprintf_r+0x176>
 800b134:	89ab      	ldrh	r3, [r5, #12]
 800b136:	065b      	lsls	r3, r3, #25
 800b138:	f53f af2c 	bmi.w	800af94 <_svfiprintf_r+0x28>
 800b13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b13e:	b01d      	add	sp, #116	; 0x74
 800b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b144:	ab03      	add	r3, sp, #12
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	462a      	mov	r2, r5
 800b14a:	4b06      	ldr	r3, [pc, #24]	; (800b164 <_svfiprintf_r+0x1f8>)
 800b14c:	a904      	add	r1, sp, #16
 800b14e:	4638      	mov	r0, r7
 800b150:	f000 f87a 	bl	800b248 <_printf_i>
 800b154:	e7eb      	b.n	800b12e <_svfiprintf_r+0x1c2>
 800b156:	bf00      	nop
 800b158:	0800bdc5 	.word	0x0800bdc5
 800b15c:	0800bdcf 	.word	0x0800bdcf
 800b160:	00000000 	.word	0x00000000
 800b164:	0800aeb5 	.word	0x0800aeb5
 800b168:	0800bdcb 	.word	0x0800bdcb

0800b16c <_printf_common>:
 800b16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b170:	4616      	mov	r6, r2
 800b172:	4699      	mov	r9, r3
 800b174:	688a      	ldr	r2, [r1, #8]
 800b176:	690b      	ldr	r3, [r1, #16]
 800b178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b17c:	4293      	cmp	r3, r2
 800b17e:	bfb8      	it	lt
 800b180:	4613      	movlt	r3, r2
 800b182:	6033      	str	r3, [r6, #0]
 800b184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b188:	4607      	mov	r7, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	b10a      	cbz	r2, 800b192 <_printf_common+0x26>
 800b18e:	3301      	adds	r3, #1
 800b190:	6033      	str	r3, [r6, #0]
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	0699      	lsls	r1, r3, #26
 800b196:	bf42      	ittt	mi
 800b198:	6833      	ldrmi	r3, [r6, #0]
 800b19a:	3302      	addmi	r3, #2
 800b19c:	6033      	strmi	r3, [r6, #0]
 800b19e:	6825      	ldr	r5, [r4, #0]
 800b1a0:	f015 0506 	ands.w	r5, r5, #6
 800b1a4:	d106      	bne.n	800b1b4 <_printf_common+0x48>
 800b1a6:	f104 0a19 	add.w	sl, r4, #25
 800b1aa:	68e3      	ldr	r3, [r4, #12]
 800b1ac:	6832      	ldr	r2, [r6, #0]
 800b1ae:	1a9b      	subs	r3, r3, r2
 800b1b0:	42ab      	cmp	r3, r5
 800b1b2:	dc26      	bgt.n	800b202 <_printf_common+0x96>
 800b1b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1b8:	1e13      	subs	r3, r2, #0
 800b1ba:	6822      	ldr	r2, [r4, #0]
 800b1bc:	bf18      	it	ne
 800b1be:	2301      	movne	r3, #1
 800b1c0:	0692      	lsls	r2, r2, #26
 800b1c2:	d42b      	bmi.n	800b21c <_printf_common+0xb0>
 800b1c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	4638      	mov	r0, r7
 800b1cc:	47c0      	blx	r8
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d01e      	beq.n	800b210 <_printf_common+0xa4>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	68e5      	ldr	r5, [r4, #12]
 800b1d6:	6832      	ldr	r2, [r6, #0]
 800b1d8:	f003 0306 	and.w	r3, r3, #6
 800b1dc:	2b04      	cmp	r3, #4
 800b1de:	bf08      	it	eq
 800b1e0:	1aad      	subeq	r5, r5, r2
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	6922      	ldr	r2, [r4, #16]
 800b1e6:	bf0c      	ite	eq
 800b1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1ec:	2500      	movne	r5, #0
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	bfc4      	itt	gt
 800b1f2:	1a9b      	subgt	r3, r3, r2
 800b1f4:	18ed      	addgt	r5, r5, r3
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	341a      	adds	r4, #26
 800b1fa:	42b5      	cmp	r5, r6
 800b1fc:	d11a      	bne.n	800b234 <_printf_common+0xc8>
 800b1fe:	2000      	movs	r0, #0
 800b200:	e008      	b.n	800b214 <_printf_common+0xa8>
 800b202:	2301      	movs	r3, #1
 800b204:	4652      	mov	r2, sl
 800b206:	4649      	mov	r1, r9
 800b208:	4638      	mov	r0, r7
 800b20a:	47c0      	blx	r8
 800b20c:	3001      	adds	r0, #1
 800b20e:	d103      	bne.n	800b218 <_printf_common+0xac>
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	3501      	adds	r5, #1
 800b21a:	e7c6      	b.n	800b1aa <_printf_common+0x3e>
 800b21c:	18e1      	adds	r1, r4, r3
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	2030      	movs	r0, #48	; 0x30
 800b222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b226:	4422      	add	r2, r4
 800b228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b22c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b230:	3302      	adds	r3, #2
 800b232:	e7c7      	b.n	800b1c4 <_printf_common+0x58>
 800b234:	2301      	movs	r3, #1
 800b236:	4622      	mov	r2, r4
 800b238:	4649      	mov	r1, r9
 800b23a:	4638      	mov	r0, r7
 800b23c:	47c0      	blx	r8
 800b23e:	3001      	adds	r0, #1
 800b240:	d0e6      	beq.n	800b210 <_printf_common+0xa4>
 800b242:	3601      	adds	r6, #1
 800b244:	e7d9      	b.n	800b1fa <_printf_common+0x8e>
	...

0800b248 <_printf_i>:
 800b248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	7e0f      	ldrb	r7, [r1, #24]
 800b24e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b250:	2f78      	cmp	r7, #120	; 0x78
 800b252:	4691      	mov	r9, r2
 800b254:	4680      	mov	r8, r0
 800b256:	460c      	mov	r4, r1
 800b258:	469a      	mov	sl, r3
 800b25a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b25e:	d807      	bhi.n	800b270 <_printf_i+0x28>
 800b260:	2f62      	cmp	r7, #98	; 0x62
 800b262:	d80a      	bhi.n	800b27a <_printf_i+0x32>
 800b264:	2f00      	cmp	r7, #0
 800b266:	f000 80d8 	beq.w	800b41a <_printf_i+0x1d2>
 800b26a:	2f58      	cmp	r7, #88	; 0x58
 800b26c:	f000 80a3 	beq.w	800b3b6 <_printf_i+0x16e>
 800b270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b278:	e03a      	b.n	800b2f0 <_printf_i+0xa8>
 800b27a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b27e:	2b15      	cmp	r3, #21
 800b280:	d8f6      	bhi.n	800b270 <_printf_i+0x28>
 800b282:	a101      	add	r1, pc, #4	; (adr r1, 800b288 <_printf_i+0x40>)
 800b284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b288:	0800b2e1 	.word	0x0800b2e1
 800b28c:	0800b2f5 	.word	0x0800b2f5
 800b290:	0800b271 	.word	0x0800b271
 800b294:	0800b271 	.word	0x0800b271
 800b298:	0800b271 	.word	0x0800b271
 800b29c:	0800b271 	.word	0x0800b271
 800b2a0:	0800b2f5 	.word	0x0800b2f5
 800b2a4:	0800b271 	.word	0x0800b271
 800b2a8:	0800b271 	.word	0x0800b271
 800b2ac:	0800b271 	.word	0x0800b271
 800b2b0:	0800b271 	.word	0x0800b271
 800b2b4:	0800b401 	.word	0x0800b401
 800b2b8:	0800b325 	.word	0x0800b325
 800b2bc:	0800b3e3 	.word	0x0800b3e3
 800b2c0:	0800b271 	.word	0x0800b271
 800b2c4:	0800b271 	.word	0x0800b271
 800b2c8:	0800b423 	.word	0x0800b423
 800b2cc:	0800b271 	.word	0x0800b271
 800b2d0:	0800b325 	.word	0x0800b325
 800b2d4:	0800b271 	.word	0x0800b271
 800b2d8:	0800b271 	.word	0x0800b271
 800b2dc:	0800b3eb 	.word	0x0800b3eb
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	1d1a      	adds	r2, r3, #4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	602a      	str	r2, [r5, #0]
 800b2e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e0a3      	b.n	800b43c <_printf_i+0x1f4>
 800b2f4:	6820      	ldr	r0, [r4, #0]
 800b2f6:	6829      	ldr	r1, [r5, #0]
 800b2f8:	0606      	lsls	r6, r0, #24
 800b2fa:	f101 0304 	add.w	r3, r1, #4
 800b2fe:	d50a      	bpl.n	800b316 <_printf_i+0xce>
 800b300:	680e      	ldr	r6, [r1, #0]
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	2e00      	cmp	r6, #0
 800b306:	da03      	bge.n	800b310 <_printf_i+0xc8>
 800b308:	232d      	movs	r3, #45	; 0x2d
 800b30a:	4276      	negs	r6, r6
 800b30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b310:	485e      	ldr	r0, [pc, #376]	; (800b48c <_printf_i+0x244>)
 800b312:	230a      	movs	r3, #10
 800b314:	e019      	b.n	800b34a <_printf_i+0x102>
 800b316:	680e      	ldr	r6, [r1, #0]
 800b318:	602b      	str	r3, [r5, #0]
 800b31a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b31e:	bf18      	it	ne
 800b320:	b236      	sxthne	r6, r6
 800b322:	e7ef      	b.n	800b304 <_printf_i+0xbc>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	6820      	ldr	r0, [r4, #0]
 800b328:	1d19      	adds	r1, r3, #4
 800b32a:	6029      	str	r1, [r5, #0]
 800b32c:	0601      	lsls	r1, r0, #24
 800b32e:	d501      	bpl.n	800b334 <_printf_i+0xec>
 800b330:	681e      	ldr	r6, [r3, #0]
 800b332:	e002      	b.n	800b33a <_printf_i+0xf2>
 800b334:	0646      	lsls	r6, r0, #25
 800b336:	d5fb      	bpl.n	800b330 <_printf_i+0xe8>
 800b338:	881e      	ldrh	r6, [r3, #0]
 800b33a:	4854      	ldr	r0, [pc, #336]	; (800b48c <_printf_i+0x244>)
 800b33c:	2f6f      	cmp	r7, #111	; 0x6f
 800b33e:	bf0c      	ite	eq
 800b340:	2308      	moveq	r3, #8
 800b342:	230a      	movne	r3, #10
 800b344:	2100      	movs	r1, #0
 800b346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b34a:	6865      	ldr	r5, [r4, #4]
 800b34c:	60a5      	str	r5, [r4, #8]
 800b34e:	2d00      	cmp	r5, #0
 800b350:	bfa2      	ittt	ge
 800b352:	6821      	ldrge	r1, [r4, #0]
 800b354:	f021 0104 	bicge.w	r1, r1, #4
 800b358:	6021      	strge	r1, [r4, #0]
 800b35a:	b90e      	cbnz	r6, 800b360 <_printf_i+0x118>
 800b35c:	2d00      	cmp	r5, #0
 800b35e:	d04d      	beq.n	800b3fc <_printf_i+0x1b4>
 800b360:	4615      	mov	r5, r2
 800b362:	fbb6 f1f3 	udiv	r1, r6, r3
 800b366:	fb03 6711 	mls	r7, r3, r1, r6
 800b36a:	5dc7      	ldrb	r7, [r0, r7]
 800b36c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b370:	4637      	mov	r7, r6
 800b372:	42bb      	cmp	r3, r7
 800b374:	460e      	mov	r6, r1
 800b376:	d9f4      	bls.n	800b362 <_printf_i+0x11a>
 800b378:	2b08      	cmp	r3, #8
 800b37a:	d10b      	bne.n	800b394 <_printf_i+0x14c>
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	07de      	lsls	r6, r3, #31
 800b380:	d508      	bpl.n	800b394 <_printf_i+0x14c>
 800b382:	6923      	ldr	r3, [r4, #16]
 800b384:	6861      	ldr	r1, [r4, #4]
 800b386:	4299      	cmp	r1, r3
 800b388:	bfde      	ittt	le
 800b38a:	2330      	movle	r3, #48	; 0x30
 800b38c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b390:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b394:	1b52      	subs	r2, r2, r5
 800b396:	6122      	str	r2, [r4, #16]
 800b398:	f8cd a000 	str.w	sl, [sp]
 800b39c:	464b      	mov	r3, r9
 800b39e:	aa03      	add	r2, sp, #12
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	f7ff fee2 	bl	800b16c <_printf_common>
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	d14c      	bne.n	800b446 <_printf_i+0x1fe>
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	b004      	add	sp, #16
 800b3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b6:	4835      	ldr	r0, [pc, #212]	; (800b48c <_printf_i+0x244>)
 800b3b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b3bc:	6829      	ldr	r1, [r5, #0]
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3c4:	6029      	str	r1, [r5, #0]
 800b3c6:	061d      	lsls	r5, r3, #24
 800b3c8:	d514      	bpl.n	800b3f4 <_printf_i+0x1ac>
 800b3ca:	07df      	lsls	r7, r3, #31
 800b3cc:	bf44      	itt	mi
 800b3ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b3d2:	6023      	strmi	r3, [r4, #0]
 800b3d4:	b91e      	cbnz	r6, 800b3de <_printf_i+0x196>
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	f023 0320 	bic.w	r3, r3, #32
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	2310      	movs	r3, #16
 800b3e0:	e7b0      	b.n	800b344 <_printf_i+0xfc>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	f043 0320 	orr.w	r3, r3, #32
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	2378      	movs	r3, #120	; 0x78
 800b3ec:	4828      	ldr	r0, [pc, #160]	; (800b490 <_printf_i+0x248>)
 800b3ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b3f2:	e7e3      	b.n	800b3bc <_printf_i+0x174>
 800b3f4:	0659      	lsls	r1, r3, #25
 800b3f6:	bf48      	it	mi
 800b3f8:	b2b6      	uxthmi	r6, r6
 800b3fa:	e7e6      	b.n	800b3ca <_printf_i+0x182>
 800b3fc:	4615      	mov	r5, r2
 800b3fe:	e7bb      	b.n	800b378 <_printf_i+0x130>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	6826      	ldr	r6, [r4, #0]
 800b404:	6961      	ldr	r1, [r4, #20]
 800b406:	1d18      	adds	r0, r3, #4
 800b408:	6028      	str	r0, [r5, #0]
 800b40a:	0635      	lsls	r5, r6, #24
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	d501      	bpl.n	800b414 <_printf_i+0x1cc>
 800b410:	6019      	str	r1, [r3, #0]
 800b412:	e002      	b.n	800b41a <_printf_i+0x1d2>
 800b414:	0670      	lsls	r0, r6, #25
 800b416:	d5fb      	bpl.n	800b410 <_printf_i+0x1c8>
 800b418:	8019      	strh	r1, [r3, #0]
 800b41a:	2300      	movs	r3, #0
 800b41c:	6123      	str	r3, [r4, #16]
 800b41e:	4615      	mov	r5, r2
 800b420:	e7ba      	b.n	800b398 <_printf_i+0x150>
 800b422:	682b      	ldr	r3, [r5, #0]
 800b424:	1d1a      	adds	r2, r3, #4
 800b426:	602a      	str	r2, [r5, #0]
 800b428:	681d      	ldr	r5, [r3, #0]
 800b42a:	6862      	ldr	r2, [r4, #4]
 800b42c:	2100      	movs	r1, #0
 800b42e:	4628      	mov	r0, r5
 800b430:	f7f4 fede 	bl	80001f0 <memchr>
 800b434:	b108      	cbz	r0, 800b43a <_printf_i+0x1f2>
 800b436:	1b40      	subs	r0, r0, r5
 800b438:	6060      	str	r0, [r4, #4]
 800b43a:	6863      	ldr	r3, [r4, #4]
 800b43c:	6123      	str	r3, [r4, #16]
 800b43e:	2300      	movs	r3, #0
 800b440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b444:	e7a8      	b.n	800b398 <_printf_i+0x150>
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	462a      	mov	r2, r5
 800b44a:	4649      	mov	r1, r9
 800b44c:	4640      	mov	r0, r8
 800b44e:	47d0      	blx	sl
 800b450:	3001      	adds	r0, #1
 800b452:	d0ab      	beq.n	800b3ac <_printf_i+0x164>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	079b      	lsls	r3, r3, #30
 800b458:	d413      	bmi.n	800b482 <_printf_i+0x23a>
 800b45a:	68e0      	ldr	r0, [r4, #12]
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	4298      	cmp	r0, r3
 800b460:	bfb8      	it	lt
 800b462:	4618      	movlt	r0, r3
 800b464:	e7a4      	b.n	800b3b0 <_printf_i+0x168>
 800b466:	2301      	movs	r3, #1
 800b468:	4632      	mov	r2, r6
 800b46a:	4649      	mov	r1, r9
 800b46c:	4640      	mov	r0, r8
 800b46e:	47d0      	blx	sl
 800b470:	3001      	adds	r0, #1
 800b472:	d09b      	beq.n	800b3ac <_printf_i+0x164>
 800b474:	3501      	adds	r5, #1
 800b476:	68e3      	ldr	r3, [r4, #12]
 800b478:	9903      	ldr	r1, [sp, #12]
 800b47a:	1a5b      	subs	r3, r3, r1
 800b47c:	42ab      	cmp	r3, r5
 800b47e:	dcf2      	bgt.n	800b466 <_printf_i+0x21e>
 800b480:	e7eb      	b.n	800b45a <_printf_i+0x212>
 800b482:	2500      	movs	r5, #0
 800b484:	f104 0619 	add.w	r6, r4, #25
 800b488:	e7f5      	b.n	800b476 <_printf_i+0x22e>
 800b48a:	bf00      	nop
 800b48c:	0800bdd6 	.word	0x0800bdd6
 800b490:	0800bde7 	.word	0x0800bde7

0800b494 <memmove>:
 800b494:	4288      	cmp	r0, r1
 800b496:	b510      	push	{r4, lr}
 800b498:	eb01 0402 	add.w	r4, r1, r2
 800b49c:	d902      	bls.n	800b4a4 <memmove+0x10>
 800b49e:	4284      	cmp	r4, r0
 800b4a0:	4623      	mov	r3, r4
 800b4a2:	d807      	bhi.n	800b4b4 <memmove+0x20>
 800b4a4:	1e43      	subs	r3, r0, #1
 800b4a6:	42a1      	cmp	r1, r4
 800b4a8:	d008      	beq.n	800b4bc <memmove+0x28>
 800b4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4b2:	e7f8      	b.n	800b4a6 <memmove+0x12>
 800b4b4:	4402      	add	r2, r0
 800b4b6:	4601      	mov	r1, r0
 800b4b8:	428a      	cmp	r2, r1
 800b4ba:	d100      	bne.n	800b4be <memmove+0x2a>
 800b4bc:	bd10      	pop	{r4, pc}
 800b4be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4c6:	e7f7      	b.n	800b4b8 <memmove+0x24>

0800b4c8 <_free_r>:
 800b4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ca:	2900      	cmp	r1, #0
 800b4cc:	d044      	beq.n	800b558 <_free_r+0x90>
 800b4ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d2:	9001      	str	r0, [sp, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b4da:	bfb8      	it	lt
 800b4dc:	18e4      	addlt	r4, r4, r3
 800b4de:	f000 f913 	bl	800b708 <__malloc_lock>
 800b4e2:	4a1e      	ldr	r2, [pc, #120]	; (800b55c <_free_r+0x94>)
 800b4e4:	9801      	ldr	r0, [sp, #4]
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	b933      	cbnz	r3, 800b4f8 <_free_r+0x30>
 800b4ea:	6063      	str	r3, [r4, #4]
 800b4ec:	6014      	str	r4, [r2, #0]
 800b4ee:	b003      	add	sp, #12
 800b4f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4f4:	f000 b90e 	b.w	800b714 <__malloc_unlock>
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d908      	bls.n	800b50e <_free_r+0x46>
 800b4fc:	6825      	ldr	r5, [r4, #0]
 800b4fe:	1961      	adds	r1, r4, r5
 800b500:	428b      	cmp	r3, r1
 800b502:	bf01      	itttt	eq
 800b504:	6819      	ldreq	r1, [r3, #0]
 800b506:	685b      	ldreq	r3, [r3, #4]
 800b508:	1949      	addeq	r1, r1, r5
 800b50a:	6021      	streq	r1, [r4, #0]
 800b50c:	e7ed      	b.n	800b4ea <_free_r+0x22>
 800b50e:	461a      	mov	r2, r3
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	b10b      	cbz	r3, 800b518 <_free_r+0x50>
 800b514:	42a3      	cmp	r3, r4
 800b516:	d9fa      	bls.n	800b50e <_free_r+0x46>
 800b518:	6811      	ldr	r1, [r2, #0]
 800b51a:	1855      	adds	r5, r2, r1
 800b51c:	42a5      	cmp	r5, r4
 800b51e:	d10b      	bne.n	800b538 <_free_r+0x70>
 800b520:	6824      	ldr	r4, [r4, #0]
 800b522:	4421      	add	r1, r4
 800b524:	1854      	adds	r4, r2, r1
 800b526:	42a3      	cmp	r3, r4
 800b528:	6011      	str	r1, [r2, #0]
 800b52a:	d1e0      	bne.n	800b4ee <_free_r+0x26>
 800b52c:	681c      	ldr	r4, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	6053      	str	r3, [r2, #4]
 800b532:	4421      	add	r1, r4
 800b534:	6011      	str	r1, [r2, #0]
 800b536:	e7da      	b.n	800b4ee <_free_r+0x26>
 800b538:	d902      	bls.n	800b540 <_free_r+0x78>
 800b53a:	230c      	movs	r3, #12
 800b53c:	6003      	str	r3, [r0, #0]
 800b53e:	e7d6      	b.n	800b4ee <_free_r+0x26>
 800b540:	6825      	ldr	r5, [r4, #0]
 800b542:	1961      	adds	r1, r4, r5
 800b544:	428b      	cmp	r3, r1
 800b546:	bf04      	itt	eq
 800b548:	6819      	ldreq	r1, [r3, #0]
 800b54a:	685b      	ldreq	r3, [r3, #4]
 800b54c:	6063      	str	r3, [r4, #4]
 800b54e:	bf04      	itt	eq
 800b550:	1949      	addeq	r1, r1, r5
 800b552:	6021      	streq	r1, [r4, #0]
 800b554:	6054      	str	r4, [r2, #4]
 800b556:	e7ca      	b.n	800b4ee <_free_r+0x26>
 800b558:	b003      	add	sp, #12
 800b55a:	bd30      	pop	{r4, r5, pc}
 800b55c:	200027e4 	.word	0x200027e4

0800b560 <sbrk_aligned>:
 800b560:	b570      	push	{r4, r5, r6, lr}
 800b562:	4e0e      	ldr	r6, [pc, #56]	; (800b59c <sbrk_aligned+0x3c>)
 800b564:	460c      	mov	r4, r1
 800b566:	6831      	ldr	r1, [r6, #0]
 800b568:	4605      	mov	r5, r0
 800b56a:	b911      	cbnz	r1, 800b572 <sbrk_aligned+0x12>
 800b56c:	f000 f8bc 	bl	800b6e8 <_sbrk_r>
 800b570:	6030      	str	r0, [r6, #0]
 800b572:	4621      	mov	r1, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f000 f8b7 	bl	800b6e8 <_sbrk_r>
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	d00a      	beq.n	800b594 <sbrk_aligned+0x34>
 800b57e:	1cc4      	adds	r4, r0, #3
 800b580:	f024 0403 	bic.w	r4, r4, #3
 800b584:	42a0      	cmp	r0, r4
 800b586:	d007      	beq.n	800b598 <sbrk_aligned+0x38>
 800b588:	1a21      	subs	r1, r4, r0
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 f8ac 	bl	800b6e8 <_sbrk_r>
 800b590:	3001      	adds	r0, #1
 800b592:	d101      	bne.n	800b598 <sbrk_aligned+0x38>
 800b594:	f04f 34ff 	mov.w	r4, #4294967295
 800b598:	4620      	mov	r0, r4
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	200027e8 	.word	0x200027e8

0800b5a0 <_malloc_r>:
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	1ccd      	adds	r5, r1, #3
 800b5a6:	f025 0503 	bic.w	r5, r5, #3
 800b5aa:	3508      	adds	r5, #8
 800b5ac:	2d0c      	cmp	r5, #12
 800b5ae:	bf38      	it	cc
 800b5b0:	250c      	movcc	r5, #12
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	db01      	blt.n	800b5bc <_malloc_r+0x1c>
 800b5b8:	42a9      	cmp	r1, r5
 800b5ba:	d905      	bls.n	800b5c8 <_malloc_r+0x28>
 800b5bc:	230c      	movs	r3, #12
 800b5be:	603b      	str	r3, [r7, #0]
 800b5c0:	2600      	movs	r6, #0
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c8:	4e2e      	ldr	r6, [pc, #184]	; (800b684 <_malloc_r+0xe4>)
 800b5ca:	f000 f89d 	bl	800b708 <__malloc_lock>
 800b5ce:	6833      	ldr	r3, [r6, #0]
 800b5d0:	461c      	mov	r4, r3
 800b5d2:	bb34      	cbnz	r4, 800b622 <_malloc_r+0x82>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f7ff ffc2 	bl	800b560 <sbrk_aligned>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	4604      	mov	r4, r0
 800b5e0:	d14d      	bne.n	800b67e <_malloc_r+0xde>
 800b5e2:	6834      	ldr	r4, [r6, #0]
 800b5e4:	4626      	mov	r6, r4
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	d140      	bne.n	800b66c <_malloc_r+0xcc>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	eb04 0803 	add.w	r8, r4, r3
 800b5f4:	f000 f878 	bl	800b6e8 <_sbrk_r>
 800b5f8:	4580      	cmp	r8, r0
 800b5fa:	d13a      	bne.n	800b672 <_malloc_r+0xd2>
 800b5fc:	6821      	ldr	r1, [r4, #0]
 800b5fe:	3503      	adds	r5, #3
 800b600:	1a6d      	subs	r5, r5, r1
 800b602:	f025 0503 	bic.w	r5, r5, #3
 800b606:	3508      	adds	r5, #8
 800b608:	2d0c      	cmp	r5, #12
 800b60a:	bf38      	it	cc
 800b60c:	250c      	movcc	r5, #12
 800b60e:	4629      	mov	r1, r5
 800b610:	4638      	mov	r0, r7
 800b612:	f7ff ffa5 	bl	800b560 <sbrk_aligned>
 800b616:	3001      	adds	r0, #1
 800b618:	d02b      	beq.n	800b672 <_malloc_r+0xd2>
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	442b      	add	r3, r5
 800b61e:	6023      	str	r3, [r4, #0]
 800b620:	e00e      	b.n	800b640 <_malloc_r+0xa0>
 800b622:	6822      	ldr	r2, [r4, #0]
 800b624:	1b52      	subs	r2, r2, r5
 800b626:	d41e      	bmi.n	800b666 <_malloc_r+0xc6>
 800b628:	2a0b      	cmp	r2, #11
 800b62a:	d916      	bls.n	800b65a <_malloc_r+0xba>
 800b62c:	1961      	adds	r1, r4, r5
 800b62e:	42a3      	cmp	r3, r4
 800b630:	6025      	str	r5, [r4, #0]
 800b632:	bf18      	it	ne
 800b634:	6059      	strne	r1, [r3, #4]
 800b636:	6863      	ldr	r3, [r4, #4]
 800b638:	bf08      	it	eq
 800b63a:	6031      	streq	r1, [r6, #0]
 800b63c:	5162      	str	r2, [r4, r5]
 800b63e:	604b      	str	r3, [r1, #4]
 800b640:	4638      	mov	r0, r7
 800b642:	f104 060b 	add.w	r6, r4, #11
 800b646:	f000 f865 	bl	800b714 <__malloc_unlock>
 800b64a:	f026 0607 	bic.w	r6, r6, #7
 800b64e:	1d23      	adds	r3, r4, #4
 800b650:	1af2      	subs	r2, r6, r3
 800b652:	d0b6      	beq.n	800b5c2 <_malloc_r+0x22>
 800b654:	1b9b      	subs	r3, r3, r6
 800b656:	50a3      	str	r3, [r4, r2]
 800b658:	e7b3      	b.n	800b5c2 <_malloc_r+0x22>
 800b65a:	6862      	ldr	r2, [r4, #4]
 800b65c:	42a3      	cmp	r3, r4
 800b65e:	bf0c      	ite	eq
 800b660:	6032      	streq	r2, [r6, #0]
 800b662:	605a      	strne	r2, [r3, #4]
 800b664:	e7ec      	b.n	800b640 <_malloc_r+0xa0>
 800b666:	4623      	mov	r3, r4
 800b668:	6864      	ldr	r4, [r4, #4]
 800b66a:	e7b2      	b.n	800b5d2 <_malloc_r+0x32>
 800b66c:	4634      	mov	r4, r6
 800b66e:	6876      	ldr	r6, [r6, #4]
 800b670:	e7b9      	b.n	800b5e6 <_malloc_r+0x46>
 800b672:	230c      	movs	r3, #12
 800b674:	603b      	str	r3, [r7, #0]
 800b676:	4638      	mov	r0, r7
 800b678:	f000 f84c 	bl	800b714 <__malloc_unlock>
 800b67c:	e7a1      	b.n	800b5c2 <_malloc_r+0x22>
 800b67e:	6025      	str	r5, [r4, #0]
 800b680:	e7de      	b.n	800b640 <_malloc_r+0xa0>
 800b682:	bf00      	nop
 800b684:	200027e4 	.word	0x200027e4

0800b688 <_realloc_r>:
 800b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68c:	4680      	mov	r8, r0
 800b68e:	4614      	mov	r4, r2
 800b690:	460e      	mov	r6, r1
 800b692:	b921      	cbnz	r1, 800b69e <_realloc_r+0x16>
 800b694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b698:	4611      	mov	r1, r2
 800b69a:	f7ff bf81 	b.w	800b5a0 <_malloc_r>
 800b69e:	b92a      	cbnz	r2, 800b6ac <_realloc_r+0x24>
 800b6a0:	f7ff ff12 	bl	800b4c8 <_free_r>
 800b6a4:	4625      	mov	r5, r4
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ac:	f000 f838 	bl	800b720 <_malloc_usable_size_r>
 800b6b0:	4284      	cmp	r4, r0
 800b6b2:	4607      	mov	r7, r0
 800b6b4:	d802      	bhi.n	800b6bc <_realloc_r+0x34>
 800b6b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6ba:	d812      	bhi.n	800b6e2 <_realloc_r+0x5a>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4640      	mov	r0, r8
 800b6c0:	f7ff ff6e 	bl	800b5a0 <_malloc_r>
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d0ed      	beq.n	800b6a6 <_realloc_r+0x1e>
 800b6ca:	42bc      	cmp	r4, r7
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	bf28      	it	cs
 800b6d2:	463a      	movcs	r2, r7
 800b6d4:	f7ff fb0c 	bl	800acf0 <memcpy>
 800b6d8:	4631      	mov	r1, r6
 800b6da:	4640      	mov	r0, r8
 800b6dc:	f7ff fef4 	bl	800b4c8 <_free_r>
 800b6e0:	e7e1      	b.n	800b6a6 <_realloc_r+0x1e>
 800b6e2:	4635      	mov	r5, r6
 800b6e4:	e7df      	b.n	800b6a6 <_realloc_r+0x1e>
	...

0800b6e8 <_sbrk_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4d06      	ldr	r5, [pc, #24]	; (800b704 <_sbrk_r+0x1c>)
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	602b      	str	r3, [r5, #0]
 800b6f4:	f7f6 fc6c 	bl	8001fd0 <_sbrk>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_sbrk_r+0x1a>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_sbrk_r+0x1a>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	200027ec 	.word	0x200027ec

0800b708 <__malloc_lock>:
 800b708:	4801      	ldr	r0, [pc, #4]	; (800b710 <__malloc_lock+0x8>)
 800b70a:	f000 b811 	b.w	800b730 <__retarget_lock_acquire_recursive>
 800b70e:	bf00      	nop
 800b710:	200027f0 	.word	0x200027f0

0800b714 <__malloc_unlock>:
 800b714:	4801      	ldr	r0, [pc, #4]	; (800b71c <__malloc_unlock+0x8>)
 800b716:	f000 b80c 	b.w	800b732 <__retarget_lock_release_recursive>
 800b71a:	bf00      	nop
 800b71c:	200027f0 	.word	0x200027f0

0800b720 <_malloc_usable_size_r>:
 800b720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b724:	1f18      	subs	r0, r3, #4
 800b726:	2b00      	cmp	r3, #0
 800b728:	bfbc      	itt	lt
 800b72a:	580b      	ldrlt	r3, [r1, r0]
 800b72c:	18c0      	addlt	r0, r0, r3
 800b72e:	4770      	bx	lr

0800b730 <__retarget_lock_acquire_recursive>:
 800b730:	4770      	bx	lr

0800b732 <__retarget_lock_release_recursive>:
 800b732:	4770      	bx	lr

0800b734 <_init>:
 800b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b736:	bf00      	nop
 800b738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b73a:	bc08      	pop	{r3}
 800b73c:	469e      	mov	lr, r3
 800b73e:	4770      	bx	lr

0800b740 <_fini>:
 800b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b742:	bf00      	nop
 800b744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b746:	bc08      	pop	{r3}
 800b748:	469e      	mov	lr, r3
 800b74a:	4770      	bx	lr
