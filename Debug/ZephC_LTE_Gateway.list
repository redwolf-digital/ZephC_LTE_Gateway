
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009620  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009814  08009814  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009814  08009814  00019814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800981c  0800981c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800981c  0800981c  0001981c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021d0  200000fc  08009920  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022cc  08009920  000222cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001876c  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003760  00000000  00000000  00038898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001996a  00000000  00000000  0003e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001869f  00000000  00000000  00057ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009227d  00000000  00000000  00070699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  00102968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080097a0 	.word	0x080097a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080097a0 	.word	0x080097a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <initEXIT>:
#include "stm32f4xx.h"
#include "stm32f4xx_it.h"

unsigned char intterruptEvent_Flag = 0;

void initEXIT(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// Enable GPIO Clock
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <initEXIT+0x7c>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <initEXIT+0x7c>)
 8000522:	f043 0302 	orr.w	r3, r3, #2
 8000526:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER &= ~3U << 6;					// GPIO B3 set 00 - INPUT
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <initEXIT+0x80>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <initEXIT+0x80>)
 800052e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000532:	6013      	str	r3, [r2, #0]
	GPIOB -> PUPDR &= ~3U << 6;					// No pull-up|pull-down
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <initEXIT+0x80>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <initEXIT+0x80>)
 800053a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800053e:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI3_IRQn);					// Enable interrupt
 8000540:	2009      	movs	r0, #9
 8000542:	f7ff ffcb 	bl	80004dc <__NVIC_EnableIRQ>

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <initEXIT+0x7c>)
 8000548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <initEXIT+0x7c>)
 800054c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000550:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG -> EXTICR[0] &= SYSCFG_EXTICR1_EXTI3;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <initEXIT+0x84>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	4a11      	ldr	r2, [pc, #68]	; (800059c <initEXIT+0x84>)
 8000558:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800055c:	6093      	str	r3, [r2, #8]
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <initEXIT+0x84>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <initEXIT+0x84>)
 8000564:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000568:	6093      	str	r3, [r2, #8]

	EXTI -> RTSR &= ~EXTI_RTSR_TR3;				// Disable rising trigger
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <initEXIT+0x88>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <initEXIT+0x88>)
 8000570:	f023 0308 	bic.w	r3, r3, #8
 8000574:	6093      	str	r3, [r2, #8]
	EXTI -> RTSR |= EXTI_FTSR_TR3;				// Enable falling trigger
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <initEXIT+0x88>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <initEXIT+0x88>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6093      	str	r3, [r2, #8]

	EXTI -> IMR |= EXTI_IMR_IM3;				// Interrupt Mask 1 = not mask
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <initEXIT+0x88>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <initEXIT+0x88>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	40020400 	.word	0x40020400
 800059c:	40013800 	.word	0x40013800
 80005a0:	40013c00 	.word	0x40013c00

080005a4 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void) {
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR3) != 0) {
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <EXTI3_IRQHandler+0x2c>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f003 0308 	and.w	r3, r3, #8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d008      	beq.n	80005c6 <EXTI3_IRQHandler+0x22>
		intterruptEvent_Flag = 1;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <EXTI3_IRQHandler+0x30>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= EXTI_PR_PR3;
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <EXTI3_IRQHandler+0x2c>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <EXTI3_IRQHandler+0x2c>)
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	6153      	str	r3, [r2, #20]
	}
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40013c00 	.word	0x40013c00
 80005d4:	20000118 	.word	0x20000118

080005d8 <main>:
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  sysValinit();
 80005dc:	f000 f83e 	bl	800065c <sysValinit>

  HAL_Init();
 80005e0:	f000 fc54 	bl	8000e8c <HAL_Init>
  SystemClock_Config();
 80005e4:	f000 f8d8 	bl	8000798 <SystemClock_Config>
  MX_GPIO_Init();
 80005e8:	f000 fa16 	bl	8000a18 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f9de 	bl	80009ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005f0:	f000 f988 	bl	8000904 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f9b0 	bl	8000958 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005f8:	f008 fbae 	bl	8008d58 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80005fc:	f000 f934 	bl	8000868 <MX_TIM4_Init>

  // INTERRUPT
  initEXIT();
 8000600:	f7ff ff8a 	bl	8000518 <initEXIT>


  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 8000604:	480e      	ldr	r0, [pc, #56]	; (8000640 <main+0x68>)
 8000606:	f003 faad 	bl	8003b64 <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 800060a:	22ff      	movs	r2, #255	; 0xff
 800060c:	490d      	ldr	r1, [pc, #52]	; (8000644 <main+0x6c>)
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <main+0x70>)
 8000610:	f003 feeb 	bl	80043ea <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <main+0x74>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <main+0x74>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f022 0208 	bic.w	r2, r2, #8
 8000622:	601a      	str	r2, [r3, #0]

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8000624:	22ff      	movs	r2, #255	; 0xff
 8000626:	490a      	ldr	r1, [pc, #40]	; (8000650 <main+0x78>)
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <main+0x7c>)
 800062a:	f003 fede 	bl	80043ea <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <main+0x80>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <main+0x80>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f022 0208 	bic.w	r2, r2, #8
 800063c:	601a      	str	r2, [r3, #0]
 * |_|_|_|__|__|_____|_|___|  |__|  |__|__|_____|_____|__|__|__|__|_|_|_|_____|
 *
 *  ===============================================================================
 */

  while(1) {
 800063e:	e7fe      	b.n	800063e <main+0x66>
 8000640:	2000051c 	.word	0x2000051c
 8000644:	2000021c 	.word	0x2000021c
 8000648:	200005a8 	.word	0x200005a8
 800064c:	2000064c 	.word	0x2000064c
 8000650:	2000011c 	.word	0x2000011c
 8000654:	20000564 	.word	0x20000564
 8000658:	200005ec 	.word	0x200005ec

0800065c <sysValinit>:


// user custom functions

// init startup value at boot
void sysValinit(void) {
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <sysValinit+0x3c>)
 8000662:	2200      	movs	r2, #0
 8000664:	801a      	strh	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <sysValinit+0x3c>)
 8000668:	2200      	movs	r2, #0
 800066a:	805a      	strh	r2, [r3, #2]
	sysCounter.prev_ERRORtime = 0;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <sysValinit+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	809a      	strh	r2, [r3, #4]
	sysCounter.rebootCount = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <sysValinit+0x3c>)
 8000674:	2200      	movs	r2, #0
 8000676:	719a      	strb	r2, [r3, #6]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <sysValinit+0x3c>)
 800067a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800067e:	811a      	strh	r2, [r3, #8]

	sysFlag.LTE_CMD_Send = 0;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <sysValinit+0x40>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_ERROR = 0;
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <sysValinit+0x40>)
 8000688:	2200      	movs	r2, #0
 800068a:	705a      	strb	r2, [r3, #1]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200006ac 	.word	0x200006ac
 800069c:	200006b8 	.word	0x200006b8

080006a0 <HAL_UARTEx_RxEventCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 10);
}


// UART Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a22      	ldr	r2, [pc, #136]	; (800073c <HAL_UARTEx_RxEventCallback+0x9c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d11c      	bne.n	80006f0 <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	4921      	ldr	r1, [pc, #132]	; (8000740 <HAL_UARTEx_RxEventCallback+0xa0>)
 80006ba:	4822      	ldr	r0, [pc, #136]	; (8000744 <HAL_UARTEx_RxEventCallback+0xa4>)
 80006bc:	f003 fe95 	bl	80043ea <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 80006c0:	22ff      	movs	r2, #255	; 0xff
 80006c2:	2100      	movs	r1, #0
 80006c4:	4820      	ldr	r0, [pc, #128]	; (8000748 <HAL_UARTEx_RxEventCallback+0xa8>)
 80006c6:	f009 f863 	bl	8009790 <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	461a      	mov	r2, r3
 80006ce:	491c      	ldr	r1, [pc, #112]	; (8000740 <HAL_UARTEx_RxEventCallback+0xa0>)
 80006d0:	481d      	ldr	r0, [pc, #116]	; (8000748 <HAL_UARTEx_RxEventCallback+0xa8>)
 80006d2:	f009 f84f 	bl	8009774 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	2100      	movs	r1, #0
 80006da:	4819      	ldr	r0, [pc, #100]	; (8000740 <HAL_UARTEx_RxEventCallback+0xa0>)
 80006dc:	f009 f858 	bl	8009790 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_UARTEx_RxEventCallback+0xac>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_UARTEx_RxEventCallback+0xac>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <HAL_UARTEx_RxEventCallback+0xb0>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d11c      	bne.n	8000734 <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	4915      	ldr	r1, [pc, #84]	; (8000754 <HAL_UARTEx_RxEventCallback+0xb4>)
 80006fe:	4816      	ldr	r0, [pc, #88]	; (8000758 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000700:	f003 fe73 	bl	80043ea <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 8000704:	22ff      	movs	r2, #255	; 0xff
 8000706:	2100      	movs	r1, #0
 8000708:	4814      	ldr	r0, [pc, #80]	; (800075c <HAL_UARTEx_RxEventCallback+0xbc>)
 800070a:	f009 f841 	bl	8009790 <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 800070e:	887b      	ldrh	r3, [r7, #2]
 8000710:	461a      	mov	r2, r3
 8000712:	4910      	ldr	r1, [pc, #64]	; (8000754 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000714:	4811      	ldr	r0, [pc, #68]	; (800075c <HAL_UARTEx_RxEventCallback+0xbc>)
 8000716:	f009 f82d 	bl	8009774 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 800071a:	22ff      	movs	r2, #255	; 0xff
 800071c:	2100      	movs	r1, #0
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000720:	f009 f836 	bl	8009790 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_UARTEx_RxEventCallback+0xc0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <HAL_UARTEx_RxEventCallback+0xc0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f022 0208 	bic.w	r2, r2, #8
 8000732:	601a      	str	r2, [r3, #0]
	}
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40004400 	.word	0x40004400
 8000740:	2000021c 	.word	0x2000021c
 8000744:	200005a8 	.word	0x200005a8
 8000748:	2000041c 	.word	0x2000041c
 800074c:	2000064c 	.word	0x2000064c
 8000750:	40011000 	.word	0x40011000
 8000754:	2000011c 	.word	0x2000011c
 8000758:	20000564 	.word	0x20000564
 800075c:	2000031c 	.word	0x2000031c
 8000760:	200005ec 	.word	0x200005ec

08000764 <HAL_TIM_PeriodElapsedCallback>:


// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d105      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x1e>
		sysCounter.main_ms_counter++;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000780:	801a      	strh	r2, [r3, #0]
	}
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40000800 	.word	0x40000800
 8000794:	200006ac 	.word	0x200006ac

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fff2 	bl	8009790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <SystemClock_Config+0xc8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a26      	ldr	r2, [pc, #152]	; (8000860 <SystemClock_Config+0xc8>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <SystemClock_Config+0xc8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <SystemClock_Config+0xcc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a20      	ldr	r2, [pc, #128]	; (8000864 <SystemClock_Config+0xcc>)
 80007e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <SystemClock_Config+0xcc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000808:	2319      	movs	r3, #25
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800080c:	2390      	movs	r3, #144	; 0x90
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000814:	2303      	movs	r3, #3
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fcf9 	bl	8003214 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000828:	f000 f948 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2102      	movs	r1, #2
 8000848:	4618      	mov	r0, r3
 800084a:	f002 ff5b 	bl	8003704 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000854:	f000 f932 	bl	8000abc <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	; 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_TIM4_Init+0x94>)
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <MX_TIM4_Init+0x98>)
 8000888:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM4_Init+0x94>)
 800088c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000890:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_TIM4_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_TIM4_Init+0x94>)
 800089a:	2201      	movs	r2, #1
 800089c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_TIM4_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_TIM4_Init+0x94>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM4_Init+0x94>)
 80008ac:	f003 f90a 	bl	8003ac4 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f901 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_TIM4_Init+0x94>)
 80008c8:	f003 fab6 	bl	8003e38 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 f8f3 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_TIM4_Init+0x94>)
 80008e4:	f003 fcb2 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80008ee:	f000 f8e5 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000051c 	.word	0x2000051c
 8000900:	40000800 	.word	0x40000800

08000904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART1_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 800093c:	f003 fd08 	bl	8004350 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f8b9 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000564 	.word	0x20000564
 8000954:	40011000 	.word	0x40011000

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART2_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000990:	f003 fcde 	bl	8004350 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f88f 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200005a8 	.word	0x200005a8
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_DMA_Init+0x68>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <MX_DMA_Init+0x68>)
 80009bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_DMA_Init+0x68>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_DMA_Init+0x68>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <MX_DMA_Init+0x68>)
 80009d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_DMA_Init+0x68>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2010      	movs	r0, #16
 80009f0:	f000 fbbd 	bl	800116e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009f4:	2010      	movs	r0, #16
 80009f6:	f000 fbd6 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	203a      	movs	r0, #58	; 0x3a
 8000a00:	f000 fbb5 	bl	800116e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a04:	203a      	movs	r0, #58	; 0x3a
 8000a06:	f000 fbce 	bl	80011a6 <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000a82:	2200      	movs	r2, #0
 8000a84:	f240 21e2 	movw	r1, #738	; 0x2e2
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000a8a:	f001 f92d 	bl	8001ce8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB5 PB6 PB7
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000a8e:	f240 23e2 	movw	r3, #738	; 0x2e2
 8000a92:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0xa0>)
 8000aa8:	f000 ff9a 	bl	80019e0 <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d115      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_TIM_Base_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201e      	movs	r0, #30
 8000b4c:	f000 fb0f 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b50:	201e      	movs	r0, #30
 8000b52:	f000 fb28 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40000800 	.word	0x40000800
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a68      	ldr	r2, [pc, #416]	; (8000d28 <HAL_UART_MspInit+0x1c0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d163      	bne.n	8000c52 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	4b67      	ldr	r3, [pc, #412]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a66      	ldr	r2, [pc, #408]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b64      	ldr	r3, [pc, #400]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	4b60      	ldr	r3, [pc, #384]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a5f      	ldr	r2, [pc, #380]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4854      	ldr	r0, [pc, #336]	; (8000d30 <HAL_UART_MspInit+0x1c8>)
 8000be0:	f000 fefe 	bl	80019e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000be4:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000be6:	4a54      	ldr	r2, [pc, #336]	; (8000d38 <HAL_UART_MspInit+0x1d0>)
 8000be8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000bea:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000bec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bf2:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf8:	4b4e      	ldr	r3, [pc, #312]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bfe:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c04:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c06:	4b4b      	ldr	r3, [pc, #300]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0c:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c12:	4b48      	ldr	r3, [pc, #288]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c18:	4b46      	ldr	r3, [pc, #280]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c1e:	4b45      	ldr	r3, [pc, #276]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c24:	4843      	ldr	r0, [pc, #268]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c26:	f000 fad9 	bl	80011dc <HAL_DMA_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c30:	f7ff ff44 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3f      	ldr	r2, [pc, #252]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c38:	639a      	str	r2, [r3, #56]	; 0x38
 8000c3a:	4a3e      	ldr	r2, [pc, #248]	; (8000d34 <HAL_UART_MspInit+0x1cc>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2025      	movs	r0, #37	; 0x25
 8000c46:	f000 fa92 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c4a:	2025      	movs	r0, #37	; 0x25
 8000c4c:	f000 faab 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c50:	e066      	b.n	8000d20 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a39      	ldr	r2, [pc, #228]	; (8000d3c <HAL_UART_MspInit+0x1d4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d161      	bne.n	8000d20 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a31      	ldr	r2, [pc, #196]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a2a      	ldr	r2, [pc, #168]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <HAL_UART_MspInit+0x1c4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c94:	230c      	movs	r3, #12
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4820      	ldr	r0, [pc, #128]	; (8000d30 <HAL_UART_MspInit+0x1c8>)
 8000cb0:	f000 fe96 	bl	80019e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cb6:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <HAL_UART_MspInit+0x1dc>)
 8000cb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cf4:	4812      	ldr	r0, [pc, #72]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000cf6:	f000 fa71 	bl	80011dc <HAL_DMA_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8000d00:	f7ff fedc 	bl	8000abc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_UART_MspInit+0x1d8>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2026      	movs	r0, #38	; 0x26
 8000d16:	f000 fa2a 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d1a:	2026      	movs	r0, #38	; 0x26
 8000d1c:	f000 fa43 	bl	80011a6 <HAL_NVIC_EnableIRQ>
}
 8000d20:	bf00      	nop
 8000d22:	3730      	adds	r7, #48	; 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	200005ec 	.word	0x200005ec
 8000d38:	40026440 	.word	0x40026440
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	2000064c 	.word	0x2000064c
 8000d44:	40026088 	.word	0x40026088

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f8cc 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <DMA1_Stream5_IRQHandler+0x10>)
 8000da2:	f000 fbb3 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000064c 	.word	0x2000064c

08000db0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <TIM4_IRQHandler+0x10>)
 8000db6:	f002 ff37 	bl	8003c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000051c 	.word	0x2000051c

08000dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <USART1_IRQHandler+0x10>)
 8000dca:	f003 fb73 	bl	80044b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000564 	.word	0x20000564

08000dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <USART2_IRQHandler+0x10>)
 8000dde:	f003 fb69 	bl	80044b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200005a8 	.word	0x200005a8

08000dec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <DMA2_Stream2_IRQHandler+0x10>)
 8000df2:	f000 fb8b 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200005ec 	.word	0x200005ec

08000e00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <OTG_FS_IRQHandler+0x10>)
 8000e06:	f001 f8d8 	bl	8001fba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20001ba0 	.word	0x20001ba0

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e62:	f7ff ffd7 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f008 fc61 	bl	800972c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fbb5 	bl	80005d8 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e7c:	08009824 	.word	0x08009824
  ldr r2, =_sbss
 8000e80:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e84:	200022cc 	.word	0x200022cc

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f94f 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe02 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f967 	bl	80011c2 <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f92f 	bl	800116e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	200006bc 	.word	0x200006bc

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200006bc 	.word	0x200006bc

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriorityGrouping>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff29 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff3e 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff8e 	bl	80010ac <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5d 	bl	8001058 <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff31 	bl	800101c <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa2 	bl	8001114 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff feb6 	bl	8000f58 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e099      	b.n	800132c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2202      	movs	r2, #2
 80011fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001218:	e00f      	b.n	800123a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121a:	f7ff fe9d 	bl	8000f58 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b05      	cmp	r3, #5
 8001226:	d908      	bls.n	800123a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2220      	movs	r2, #32
 800122c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e078      	b.n	800132c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e8      	bne.n	800121a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_DMA_Init+0x158>)
 8001254:	4013      	ands	r3, r2
 8001256:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001266:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2b04      	cmp	r3, #4
 8001292:	d107      	bne.n	80012a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4313      	orrs	r3, r2
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f023 0307 	bic.w	r3, r3, #7
 80012ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d117      	bne.n	80012fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00e      	beq.n	80012fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fb01 	bl	80018e8 <DMA_CheckFifoParam>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012fa:	2301      	movs	r3, #1
 80012fc:	e016      	b.n	800132c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fab8 	bl	800187c <DMA_CalcBaseAndBitshift>
 800130c:	4603      	mov	r3, r0
 800130e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	223f      	movs	r2, #63	; 0x3f
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	f010803f 	.word	0xf010803f

08001338 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_DMA_Start_IT+0x26>
 800135a:	2302      	movs	r3, #2
 800135c:	e040      	b.n	80013e0 <HAL_DMA_Start_IT+0xa8>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d12f      	bne.n	80013d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2202      	movs	r2, #2
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 fa4a 	bl	8001820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	223f      	movs	r2, #63	; 0x3f
 8001392:	409a      	lsls	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0216 	orr.w	r2, r2, #22
 80013a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d007      	beq.n	80013c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0208 	orr.w	r2, r2, #8
 80013be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e005      	b.n	80013de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013da:	2302      	movs	r3, #2
 80013dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013de:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013f6:	f7ff fdaf 	bl	8000f58 <HAL_GetTick>
 80013fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d008      	beq.n	800141a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e052      	b.n	80014c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0216 	bic.w	r2, r2, #22
 8001428:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001438:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <HAL_DMA_Abort+0x62>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0208 	bic.w	r2, r2, #8
 8001458:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146a:	e013      	b.n	8001494 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800146c:	f7ff fd74 	bl	8000f58 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b05      	cmp	r3, #5
 8001478:	d90c      	bls.n	8001494 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2220      	movs	r2, #32
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2203      	movs	r2, #3
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e015      	b.n	80014c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1e4      	bne.n	800146c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	223f      	movs	r2, #63	; 0x3f
 80014a8:	409a      	lsls	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d004      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00c      	b.n	8001500 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2205      	movs	r2, #5
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001518:	4b8e      	ldr	r3, [pc, #568]	; (8001754 <HAL_DMA_IRQHandler+0x248>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a8e      	ldr	r2, [pc, #568]	; (8001758 <HAL_DMA_IRQHandler+0x24c>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0a9b      	lsrs	r3, r3, #10
 8001524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	2208      	movs	r2, #8
 8001538:	409a      	lsls	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01a      	beq.n	8001578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0204 	bic.w	r2, r2, #4
 800155e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	2208      	movs	r2, #8
 8001566:	409a      	lsls	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	2201      	movs	r2, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d012      	beq.n	80015ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2201      	movs	r2, #1
 800159c:	409a      	lsls	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f043 0202 	orr.w	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	2204      	movs	r2, #4
 80015b4:	409a      	lsls	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d012      	beq.n	80015e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f043 0204 	orr.w	r2, r3, #4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	2210      	movs	r2, #16
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d043      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d03c      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	2210      	movs	r2, #16
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d018      	beq.n	800164e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d024      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
 800163a:	e01f      	b.n	800167c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01b      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
 800164c:	e016      	b.n	800167c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0208 	bic.w	r2, r2, #8
 800166a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2220      	movs	r2, #32
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 808f 	beq.w	80017ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 8087 	beq.w	80017ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	2220      	movs	r2, #32
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d136      	bne.n	8001724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0216 	bic.w	r2, r2, #22
 80016c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <HAL_DMA_IRQHandler+0x1da>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0208 	bic.w	r2, r2, #8
 80016f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	223f      	movs	r2, #63	; 0x3f
 80016fc:	409a      	lsls	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001716:	2b00      	cmp	r3, #0
 8001718:	d07e      	beq.n	8001818 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
        }
        return;
 8001722:	e079      	b.n	8001818 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01d      	beq.n	800176e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10d      	bne.n	800175c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	2b00      	cmp	r3, #0
 8001746:	d031      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
 8001750:	e02c      	b.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
 8001752:	bf00      	nop
 8001754:	20000000 	.word	0x20000000
 8001758:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d023      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
 800176c:	e01e      	b.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10f      	bne.n	800179c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0210 	bic.w	r2, r2, #16
 800178a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d032      	beq.n	800181a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d022      	beq.n	8001806 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2205      	movs	r2, #5
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3301      	adds	r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d307      	bcc.n	80017f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f2      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x2cc>
 80017f2:	e000      	b.n	80017f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	4798      	blx	r3
 8001816:	e000      	b.n	800181a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001818:	bf00      	nop
    }
  }
}
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800183c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	d108      	bne.n	8001860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800185e:	e007      	b.n	8001870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3b10      	subs	r3, #16
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <DMA_CalcBaseAndBitshift+0x64>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d909      	bls.n	80018be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	1d1a      	adds	r2, r3, #4
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	659a      	str	r2, [r3, #88]	; 0x58
 80018bc:	e007      	b.n	80018ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018c6:	f023 0303 	bic.w	r3, r3, #3
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	aaaaaaab 	.word	0xaaaaaaab
 80018e4:	0800980c 	.word	0x0800980c

080018e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11f      	bne.n	8001942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d856      	bhi.n	80019b6 <DMA_CheckFifoParam+0xce>
 8001908:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <DMA_CheckFifoParam+0x28>)
 800190a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	08001921 	.word	0x08001921
 8001914:	08001933 	.word	0x08001933
 8001918:	08001921 	.word	0x08001921
 800191c:	080019b7 	.word	0x080019b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d046      	beq.n	80019ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001930:	e043      	b.n	80019ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800193a:	d140      	bne.n	80019be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001940:	e03d      	b.n	80019be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800194a:	d121      	bne.n	8001990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d837      	bhi.n	80019c2 <DMA_CheckFifoParam+0xda>
 8001952:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <DMA_CheckFifoParam+0x70>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001969 	.word	0x08001969
 800195c:	0800196f 	.word	0x0800196f
 8001960:	08001969 	.word	0x08001969
 8001964:	08001981 	.word	0x08001981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      break;
 800196c:	e030      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d025      	beq.n	80019c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800197e:	e022      	b.n	80019c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001988:	d11f      	bne.n	80019ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800198e:	e01c      	b.n	80019ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d903      	bls.n	800199e <DMA_CheckFifoParam+0xb6>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d003      	beq.n	80019a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800199c:	e018      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
      break;
 80019a2:	e015      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      break;
 80019b4:	e00b      	b.n	80019ce <DMA_CheckFifoParam+0xe6>
      break;
 80019b6:	bf00      	nop
 80019b8:	e00a      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
 80019bc:	e008      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
 80019c0:	e006      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019c2:	bf00      	nop
 80019c4:	e004      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019c6:	bf00      	nop
 80019c8:	e002      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ce:	bf00      	nop
    }
  } 
  
  return status; 
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e159      	b.n	8001cb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8148 	bne.w	8001caa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a2 	beq.w	8001caa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x202>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_GPIO_Init+0x2f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x1fe>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x1f6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x1f2>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f aea2 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d04:	e003      	b.n	8001d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	619a      	str	r2, [r3, #24]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1c:	b08f      	sub	sp, #60	; 0x3c
 8001d1e:	af0a      	add	r7, sp, #40	; 0x28
 8001d20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e10f      	b.n	8001f4c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f007 f9e6 	bl	8009118 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2203      	movs	r2, #3
 8001d50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fd39 	bl	80057e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	687e      	ldr	r6, [r7, #4]
 8001d78:	466d      	mov	r5, sp
 8001d7a:	f106 0410 	add.w	r4, r6, #16
 8001d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d8e:	1d33      	adds	r3, r6, #4
 8001d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d92:	6838      	ldr	r0, [r7, #0]
 8001d94:	f003 fc10 	bl	80055b8 <USB_CoreInit>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0d0      	b.n	8001f4c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fd27 	bl	8005804 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e04a      	b.n	8001e52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	333d      	adds	r3, #61	; 0x3d
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	333c      	adds	r3, #60	; 0x3c
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	b298      	uxth	r0, r3
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3344      	adds	r3, #68	; 0x44
 8001df8:	4602      	mov	r2, r0
 8001dfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3340      	adds	r3, #64	; 0x40
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3348      	adds	r3, #72	; 0x48
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	334c      	adds	r3, #76	; 0x4c
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	3354      	adds	r3, #84	; 0x54
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3af      	bcc.n	8001dbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e044      	b.n	8001eec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d3b5      	bcc.n	8001e62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	687e      	ldr	r6, [r7, #4]
 8001efe:	466d      	mov	r5, sp
 8001f00:	f106 0410 	add.w	r4, r6, #16
 8001f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f14:	1d33      	adds	r3, r6, #4
 8001f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f18:	6838      	ldr	r0, [r7, #0]
 8001f1a:	f003 fcbf 	bl	800589c <USB_DevInit>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e00d      	b.n	8001f4c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 fe0e 	bl	8006b66 <USB_DevDisconnect>

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_PCD_Start+0x1c>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e020      	b.n	8001fb2 <HAL_PCD_Start+0x5e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d109      	bne.n	8001f94 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d005      	beq.n	8001f94 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 fc11 	bl	80057c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 fdbe 	bl	8006b24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fba:	b590      	push	{r4, r7, lr}
 8001fbc:	b08d      	sub	sp, #52	; 0x34
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 fe7c 	bl	8006cce <USB_GetMode>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 848a 	bne.w	80028f2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 fde0 	bl	8006ba8 <USB_ReadInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8480 	beq.w	80028f0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f004 fdcd 	bl	8006ba8 <USB_ReadInterrupts>
 800200e:	4603      	mov	r3, r0
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b02      	cmp	r3, #2
 8002016:	d107      	bne.n	8002028 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f002 0202 	and.w	r2, r2, #2
 8002026:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f004 fdbb 	bl	8006ba8 <USB_ReadInterrupts>
 8002032:	4603      	mov	r3, r0
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b10      	cmp	r3, #16
 800203a:	d161      	bne.n	8002100 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0210 	bic.w	r2, r2, #16
 800204a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	0c5b      	lsrs	r3, r3, #17
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	2b02      	cmp	r3, #2
 8002076:	d124      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d035      	beq.n	80020f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800208e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	6a38      	ldr	r0, [r7, #32]
 8002098:	f004 fbf2 	bl	8006880 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a8:	441a      	add	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6a1a      	ldr	r2, [r3, #32]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ba:	441a      	add	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	621a      	str	r2, [r3, #32]
 80020c0:	e016      	b.n	80020f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	0c5b      	lsrs	r3, r3, #17
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d110      	bne.n	80020f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020d4:	2208      	movs	r2, #8
 80020d6:	4619      	mov	r1, r3
 80020d8:	6a38      	ldr	r0, [r7, #32]
 80020da:	f004 fbd1 	bl	8006880 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ea:	441a      	add	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0210 	orr.w	r2, r2, #16
 80020fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f004 fd4f 	bl	8006ba8 <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002110:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002114:	f040 80a7 	bne.w	8002266 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f004 fd54 	bl	8006bce <USB_ReadDevAllOutEpInterrupt>
 8002126:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002128:	e099      	b.n	800225e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 808e 	beq.w	8002252 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f004 fd78 	bl	8006c36 <USB_ReadDevOutEPInterrupt>
 8002146:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215e:	461a      	mov	r2, r3
 8002160:	2301      	movs	r3, #1
 8002162:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fec2 	bl	8002ef0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002182:	461a      	mov	r2, r3
 8002184:	2308      	movs	r3, #8
 8002186:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 ff98 	bl	80030c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a6:	461a      	mov	r2, r3
 80021a8:	2310      	movs	r3, #16
 80021aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d030      	beq.n	8002218 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b80      	cmp	r3, #128	; 0x80
 80021c0:	d109      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	78db      	ldrb	r3, [r3, #3]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d108      	bne.n	8002206 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2200      	movs	r2, #0
 80021f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4619      	mov	r1, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f007 f885 	bl	8009310 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	2302      	movs	r3, #2
 8002216:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222e:	461a      	mov	r2, r3
 8002230:	2320      	movs	r3, #32
 8002232:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224a:	461a      	mov	r2, r3
 800224c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002250:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	3301      	adds	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f af62 	bne.w	800212a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fc9c 	bl	8006ba8 <USB_ReadInterrupts>
 8002270:	4603      	mov	r3, r0
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800227a:	f040 80db 	bne.w	8002434 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f004 fcbd 	bl	8006c02 <USB_ReadDevAllInEpInterrupt>
 8002288:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800228e:	e0cd      	b.n	800242c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80c2 	beq.w	8002420 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 fce3 	bl	8006c72 <USB_ReadDevInEPInterrupt>
 80022ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d057      	beq.n	8002368 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69f9      	ldr	r1, [r7, #28]
 80022d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022d8:	4013      	ands	r3, r2
 80022da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e8:	461a      	mov	r2, r3
 80022ea:	2301      	movs	r3, #1
 80022ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d132      	bne.n	800235c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	334c      	adds	r3, #76	; 0x4c
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4403      	add	r3, r0
 8002316:	3348      	adds	r3, #72	; 0x48
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4419      	add	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4403      	add	r3, r0
 800232a:	334c      	adds	r3, #76	; 0x4c
 800232c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d113      	bne.n	800235c <HAL_PCD_IRQHandler+0x3a2>
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3354      	adds	r3, #84	; 0x54
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d108      	bne.n	800235c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	f004 fcea 	bl	8006d30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f006 ff59 	bl	800921a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237e:	461a      	mov	r2, r3
 8002380:	2308      	movs	r3, #8
 8002382:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239a:	461a      	mov	r2, r3
 800239c:	2310      	movs	r3, #16
 800239e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b6:	461a      	mov	r2, r3
 80023b8:	2340      	movs	r3, #64	; 0x40
 80023ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d023      	beq.n	800240e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c8:	6a38      	ldr	r0, [r7, #32]
 80023ca:	f003 fbcb 	bl	8005b64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	3338      	adds	r3, #56	; 0x38
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	78db      	ldrb	r3, [r3, #3]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f006 ff9c 	bl	8009334 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002408:	461a      	mov	r2, r3
 800240a:	2302      	movs	r3, #2
 800240c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fcdb 	bl	8002dd6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3301      	adds	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f af2e 	bne.w	8002290 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f004 fbb5 	bl	8006ba8 <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002448:	d122      	bne.n	8002490 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002470:	2100      	movs	r1, #0
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fec2 	bl	80031fc <HAL_PCDEx_LPM_Callback>
 8002478:	e002      	b.n	8002480 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f006 ff3a 	bl	80092f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800248e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f004 fb87 	bl	8006ba8 <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024a4:	d112      	bne.n	80024cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d102      	bne.n	80024bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f006 fef6 	bl	80092a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024ca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fb69 	bl	8006ba8 <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e0:	f040 80b7 	bne.w	8002652 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2110      	movs	r1, #16
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fb30 	bl	8005b64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002508:	e046      	b.n	8002598 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002516:	461a      	mov	r2, r3
 8002518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800251c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252e:	0151      	lsls	r1, r2, #5
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	440a      	add	r2, r1
 8002534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002538:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800253c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254a:	461a      	mov	r2, r3
 800254c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002550:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002562:	0151      	lsls	r1, r2, #5
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	440a      	add	r2, r1
 8002568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800256c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002570:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002582:	0151      	lsls	r1, r2, #5
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	440a      	add	r2, r1
 8002588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800258c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002590:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	3301      	adds	r3, #1
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3b3      	bcc.n	800250a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d016      	beq.n	80025ec <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ce:	f043 030b 	orr.w	r3, r3, #11
 80025d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e4:	f043 030b 	orr.w	r3, r3, #11
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	e015      	b.n	8002618 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002602:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002612:	f043 030b 	orr.w	r3, r3, #11
 8002616:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002626:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800262a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800263c:	461a      	mov	r2, r3
 800263e:	f004 fb77 	bl	8006d30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f004 faa6 	bl	8006ba8 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002666:	d124      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f004 fb3c 	bl	8006cea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 faf1 	bl	8005c5e <USB_GetDevSpeed>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681c      	ldr	r4, [r3, #0]
 8002688:	f001 f9e8 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 800268c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4620      	mov	r0, r4
 8002698:	f002 fff0 	bl	800567c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f006 fde4 	bl	800926a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fa76 	bl	8006ba8 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d10a      	bne.n	80026dc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f006 fdc1 	bl	800924e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f002 0208 	and.w	r2, r2, #8
 80026da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 fa61 	bl	8006ba8 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d122      	bne.n	8002736 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026fc:	2301      	movs	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	e014      	b.n	800272c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d105      	bne.n	8002726 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	b2db      	uxtb	r3, r3
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fb27 	bl	8002d74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002732:	429a      	cmp	r2, r3
 8002734:	d3e5      	bcc.n	8002702 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f004 fa34 	bl	8006ba8 <USB_ReadInterrupts>
 8002740:	4603      	mov	r3, r0
 8002742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800274a:	d13b      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800274c:	2301      	movs	r3, #1
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
 8002750:	e02b      	b.n	80027aa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3340      	adds	r3, #64	; 0x40
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d115      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002778:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800277a:	2b00      	cmp	r3, #0
 800277c:	da12      	bge.n	80027a4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	333f      	adds	r3, #63	; 0x3f
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fae8 	bl	8002d74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	3301      	adds	r3, #1
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d3ce      	bcc.n	8002752 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 f9ed 	bl	8006ba8 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027d8:	d155      	bne.n	8002886 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027da:	2301      	movs	r3, #1
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	e045      	b.n	800286c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d12e      	bne.n	8002866 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002808:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	da2b      	bge.n	8002866 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800281a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800281e:	429a      	cmp	r2, r3
 8002820:	d121      	bne.n	8002866 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	6053      	str	r3, [r2, #4]
            break;
 8002864:	e007      	b.n	8002876 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	3301      	adds	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	429a      	cmp	r2, r3
 8002874:	d3b4      	bcc.n	80027e0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f98c 	bl	8006ba8 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289a:	d10a      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f006 fd5b 	bl	8009358 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 f976 	bl	8006ba8 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d115      	bne.n	80028f2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f006 fd4b 	bl	8009374 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	e000      	b.n	80028f2 <HAL_PCD_IRQHandler+0x938>
      return;
 80028f0:	bf00      	nop
    }
  }
}
 80028f2:	3734      	adds	r7, #52	; 0x34
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_PCD_SetAddress+0x1a>
 800290e:	2302      	movs	r3, #2
 8002910:	e013      	b.n	800293a <HAL_PCD_SetAddress+0x42>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f004 f8d4 	bl	8006ad8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	4608      	mov	r0, r1
 800294c:	4611      	mov	r1, r2
 800294e:	461a      	mov	r2, r3
 8002950:	4603      	mov	r3, r0
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	460b      	mov	r3, r1
 8002956:	803b      	strh	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002964:	2b00      	cmp	r3, #0
 8002966:	da0f      	bge.n	8002988 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3338      	adds	r3, #56	; 0x38
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	705a      	strb	r2, [r3, #1]
 8002986:	e00f      	b.n	80029a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 020f 	and.w	r2, r3, #15
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	3304      	adds	r3, #4
 80029a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029b4:	883a      	ldrh	r2, [r7, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	78ba      	ldrb	r2, [r7, #2]
 80029be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029d2:	78bb      	ldrb	r3, [r7, #2]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d102      	bne.n	80029de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_PCD_EP_Open+0xaa>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e00e      	b.n	8002a0a <HAL_PCD_EP_Open+0xc8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 f954 	bl	8005ca8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a08:	7afb      	ldrb	r3, [r7, #11]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da0f      	bge.n	8002a46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 020f 	and.w	r2, r3, #15
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	3338      	adds	r3, #56	; 0x38
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	705a      	strb	r2, [r3, #1]
 8002a44:	e00f      	b.n	8002a66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_EP_Close+0x6e>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e00e      	b.n	8002a9e <HAL_PCD_EP_Close+0x8c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 f992 	bl	8005db8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	3304      	adds	r3, #4
 8002ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	f003 fc71 	bl	8006400 <USB_EP0StartXfer>
 8002b1e:	e008      	b.n	8002b32 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6979      	ldr	r1, [r7, #20]
 8002b2e:	f003 fa1f 	bl	8005f70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	f003 020f 	and.w	r2, r3, #15
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3338      	adds	r3, #56	; 0x38
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6979      	ldr	r1, [r7, #20]
 8002bde:	f003 fc0f 	bl	8006400 <USB_EP0StartXfer>
 8002be2:	e008      	b.n	8002bf6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6979      	ldr	r1, [r7, #20]
 8002bf2:	f003 f9bd 	bl	8005f70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d901      	bls.n	8002c1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e050      	b.n	8002cc0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da0f      	bge.n	8002c46 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3338      	adds	r3, #56	; 0x38
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	705a      	strb	r2, [r3, #1]
 8002c44:	e00d      	b.n	8002c62 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_PCD_EP_SetStall+0x82>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e01e      	b.n	8002cc0 <HAL_PCD_EP_SetStall+0xc0>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68f9      	ldr	r1, [r7, #12]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fe4d 	bl	8006930 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	b2d9      	uxtb	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f004 f83d 	bl	8006d30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 020f 	and.w	r2, r3, #15
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d901      	bls.n	8002ce6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e042      	b.n	8002d6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da0f      	bge.n	8002d0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	3338      	adds	r3, #56	; 0x38
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	705a      	strb	r2, [r3, #1]
 8002d0c:	e00f      	b.n	8002d2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 020f 	and.w	r2, r3, #15
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_PCD_EP_ClrStall+0x86>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e00e      	b.n	8002d6c <HAL_PCD_EP_ClrStall+0xa4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fe55 	bl	8006a0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	da0c      	bge.n	8002da2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3338      	adds	r3, #56	; 0x38
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e00c      	b.n	8002dbc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 020f 	and.w	r2, r3, #15
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	3304      	adds	r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68f9      	ldr	r1, [r7, #12]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fc74 	bl	80066b0 <USB_EPStopXfer>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b08a      	sub	sp, #40	; 0x28
 8002dda:	af02      	add	r7, sp, #8
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	3338      	adds	r3, #56	; 0x38
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1a      	ldr	r2, [r3, #32]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d901      	bls.n	8002e0e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06c      	b.n	8002ee8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d902      	bls.n	8002e2a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3303      	adds	r3, #3
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e32:	e02b      	b.n	8002e8c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d902      	bls.n	8002e50 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3303      	adds	r3, #3
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6919      	ldr	r1, [r3, #16]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f003 fcc8 	bl	8006804 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	441a      	add	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d809      	bhi.n	8002eb6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d203      	bcs.n	8002eb6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1be      	bne.n	8002e34 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d811      	bhi.n	8002ee6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	2201      	movs	r2, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	6939      	ldr	r1, [r7, #16]
 8002ede:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	333c      	adds	r3, #60	; 0x3c
 8002f08:	3304      	adds	r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d17b      	bne.n	800301e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4a61      	ldr	r2, [pc, #388]	; (80030b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	f240 80b9 	bls.w	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80b3 	beq.w	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f52:	461a      	mov	r2, r3
 8002f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	e0a7      	b.n	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f72:	461a      	mov	r2, r3
 8002f74:	2320      	movs	r3, #32
 8002f76:	6093      	str	r3, [r2, #8]
 8002f78:	e098      	b.n	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 8093 	bne.w	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	4a4b      	ldr	r2, [pc, #300]	; (80030b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d90f      	bls.n	8002fae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002faa:	6093      	str	r3, [r2, #8]
 8002fac:	e07e      	b.n	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	0159      	lsls	r1, r3, #5
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	440b      	add	r3, r1
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	1ad2      	subs	r2, r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d114      	bne.n	8003010 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	f003 fe98 	bl	8006d30 <USB_EP0_OutStart>
 8003000:	e006      	b.n	8003010 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	441a      	add	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f006 f8e4 	bl	80091e4 <HAL_PCD_DataOutStageCallback>
 800301c:	e046      	b.n	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	4a26      	ldr	r2, [pc, #152]	; (80030bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d124      	bne.n	8003070 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303c:	461a      	mov	r2, r3
 800303e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003042:	6093      	str	r3, [r2, #8]
 8003044:	e032      	b.n	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305c:	461a      	mov	r2, r3
 800305e:	2320      	movs	r3, #32
 8003060:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	4619      	mov	r1, r3
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f006 f8bb 	bl	80091e4 <HAL_PCD_DataOutStageCallback>
 800306e:	e01d      	b.n	80030ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d114      	bne.n	80030a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003098:	461a      	mov	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f003 fe48 	bl	8006d30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4619      	mov	r1, r3
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f006 f89c 	bl	80091e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	4f54300a 	.word	0x4f54300a
 80030bc:	4f54310a 	.word	0x4f54310a

080030c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	333c      	adds	r3, #60	; 0x3c
 80030d8:	3304      	adds	r3, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <PCD_EP_OutSetupPacket_int+0x88>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d90e      	bls.n	8003114 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310c:	461a      	mov	r2, r3
 800310e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003112:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f006 f853 	bl	80091c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <PCD_EP_OutSetupPacket_int+0x88>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d90c      	bls.n	800313c <PCD_EP_OutSetupPacket_int+0x7c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d108      	bne.n	800313c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003134:	461a      	mov	r2, r3
 8003136:	2101      	movs	r1, #1
 8003138:	f003 fdfa 	bl	8006d30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	4f54300a 	.word	0x4f54300a

0800314c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
 8003158:	4613      	mov	r3, r2
 800315a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d107      	bne.n	800317a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800316a:	883b      	ldrh	r3, [r7, #0]
 800316c:	0419      	lsls	r1, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	430a      	orrs	r2, r1
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
 8003178:	e028      	b.n	80031cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4413      	add	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e00d      	b.n	80031aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	3340      	adds	r3, #64	; 0x40
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4413      	add	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	3301      	adds	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3ec      	bcc.n	800318e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031b4:	883b      	ldrh	r3, [r7, #0]
 80031b6:	0418      	lsls	r0, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	3b01      	subs	r3, #1
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4302      	orrs	r2, r0
 80031c4:	3340      	adds	r3, #64	; 0x40
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	887a      	ldrh	r2, [r7, #2]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e267      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d075      	beq.n	800331e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d00c      	beq.n	8003258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4b85      	ldr	r3, [pc, #532]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d112      	bne.n	8003270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324a:	4b82      	ldr	r3, [pc, #520]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003256:	d10b      	bne.n	8003270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	4b7e      	ldr	r3, [pc, #504]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05b      	beq.n	800331c <HAL_RCC_OscConfig+0x108>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d157      	bne.n	800331c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e242      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d106      	bne.n	8003288 <HAL_RCC_OscConfig+0x74>
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a75      	ldr	r2, [pc, #468]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e01d      	b.n	80032c4 <HAL_RCC_OscConfig+0xb0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x98>
 8003292:	4b70      	ldr	r3, [pc, #448]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6f      	ldr	r2, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b6d      	ldr	r3, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6c      	ldr	r2, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e00b      	b.n	80032c4 <HAL_RCC_OscConfig+0xb0>
 80032ac:	4b69      	ldr	r3, [pc, #420]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a68      	ldr	r2, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b66      	ldr	r3, [pc, #408]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a65      	ldr	r2, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fd fe44 	bl	8000f58 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fd fe40 	bl	8000f58 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e207      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0xc0>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fd fe30 	bl	8000f58 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fd fe2c 	bl	8000f58 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1f3      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0xe8>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d063      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332a:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333e:	2b08      	cmp	r3, #8
 8003340:	d11c      	bne.n	800337c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003342:	4b44      	ldr	r3, [pc, #272]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d116      	bne.n	800337c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x152>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e1c7      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4937      	ldr	r1, [pc, #220]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337a:	e03a      	b.n	80033f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <HAL_RCC_OscConfig+0x244>)
 8003386:	2201      	movs	r2, #1
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fd fde5 	bl	8000f58 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003392:	f7fd fde1 	bl	8000f58 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e1a8      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4925      	ldr	r1, [pc, #148]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_OscConfig+0x244>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd fdc4 	bl	8000f58 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d4:	f7fd fdc0 	bl	8000f58 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e187      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d036      	beq.n	800346c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_RCC_OscConfig+0x248>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fda4 	bl	8000f58 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003414:	f7fd fda0 	bl	8000f58 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e167      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_OscConfig+0x240>)
 8003428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x200>
 8003432:	e01b      	b.n	800346c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_OscConfig+0x248>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343a:	f7fd fd8d 	bl	8000f58 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003440:	e00e      	b.n	8003460 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003442:	f7fd fd89 	bl	8000f58 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d907      	bls.n	8003460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e150      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
 8003454:	40023800 	.word	0x40023800
 8003458:	42470000 	.word	0x42470000
 800345c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ea      	bne.n	8003442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8097 	beq.w	80035a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b81      	ldr	r3, [pc, #516]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a7c      	ldr	r2, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b7a      	ldr	r3, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b77      	ldr	r3, [pc, #476]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b6:	4b74      	ldr	r3, [pc, #464]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a73      	ldr	r2, [pc, #460]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7fd fd49 	bl	8000f58 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fd fd45 	bl	8000f58 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e10c      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_OscConfig+0x474>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x2ea>
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a63      	ldr	r2, [pc, #396]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
 80034fc:	e01c      	b.n	8003538 <HAL_RCC_OscConfig+0x324>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b05      	cmp	r3, #5
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x30c>
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a5e      	ldr	r2, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a5b      	ldr	r2, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0x324>
 8003520:	4b58      	ldr	r3, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a57      	ldr	r2, [pc, #348]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	4b55      	ldr	r3, [pc, #340]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003532:	f023 0304 	bic.w	r3, r3, #4
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd fd0a 	bl	8000f58 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fd fd06 	bl	8000f58 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0cb      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ee      	beq.n	8003548 <HAL_RCC_OscConfig+0x334>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fd fcf4 	bl	8000f58 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fd fcf0 	bl	8000f58 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0b5      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ee      	bne.n	8003574 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a1 	beq.w	80036f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d05c      	beq.n	8003678 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d141      	bne.n	800364a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_RCC_OscConfig+0x478>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fd fcc4 	bl	8000f58 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fd fcc0 	bl	8000f58 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e087      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	3b01      	subs	r3, #1
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	061b      	lsls	r3, r3, #24
 8003616:	491b      	ldr	r1, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x478>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fd fc99 	bl	8000f58 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fd fc95 	bl	8000f58 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e05c      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x416>
 8003648:	e054      	b.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_RCC_OscConfig+0x478>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fd fc82 	bl	8000f58 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003658:	f7fd fc7e 	bl	8000f58 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e045      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_OscConfig+0x470>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x444>
 8003676:	e03d      	b.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e038      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
 8003684:	40023800 	.word	0x40023800
 8003688:	40007000 	.word	0x40007000
 800368c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x4ec>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d028      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d121      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d11a      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d111      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800

08003704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0cc      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b68      	ldr	r3, [pc, #416]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d90c      	bls.n	8003740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d044      	beq.n	8003824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d119      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e067      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4934      	ldr	r1, [pc, #208]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f4:	f7fd fbb0 	bl	8000f58 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fd fbac 	bl	8000f58 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e04f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d20c      	bcs.n	800384c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fb10 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	080097f4 	.word	0x080097f4
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b090      	sub	sp, #64	; 0x40
 80038d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
 80038dc:	2300      	movs	r3, #0
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e0:	2300      	movs	r3, #0
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e8:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d00d      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x40>
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	f200 80a1 	bhi.w	8003a3c <HAL_RCC_GetSysClockFreq+0x16c>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x3a>
 8003902:	e09b      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003908:	e09b      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390a:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800390e:	e098      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003910:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800391a:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d028      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003926:	4b4a      	ldr	r3, [pc, #296]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	099b      	lsrs	r3, r3, #6
 800392c:	2200      	movs	r2, #0
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	627a      	str	r2, [r7, #36]	; 0x24
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003938:	2100      	movs	r1, #0
 800393a:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800393c:	fb03 f201 	mul.w	r2, r3, r1
 8003940:	2300      	movs	r3, #0
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	4413      	add	r3, r2
 8003948:	4a43      	ldr	r2, [pc, #268]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800394a:	fba0 1202 	umull	r1, r2, r0, r2
 800394e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003950:	460a      	mov	r2, r1
 8003952:	62ba      	str	r2, [r7, #40]	; 0x28
 8003954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003956:	4413      	add	r3, r2
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	2200      	movs	r2, #0
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	61fa      	str	r2, [r7, #28]
 8003962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003966:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800396a:	f7fc fc35 	bl	80001d8 <__aeabi_uldivmod>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4613      	mov	r3, r2
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003976:	e053      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003978:	4b35      	ldr	r3, [pc, #212]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	2200      	movs	r2, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	617a      	str	r2, [r7, #20]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800398a:	f04f 0b00 	mov.w	fp, #0
 800398e:	4652      	mov	r2, sl
 8003990:	465b      	mov	r3, fp
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	0159      	lsls	r1, r3, #5
 800399c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a0:	0150      	lsls	r0, r2, #5
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	ebb2 080a 	subs.w	r8, r2, sl
 80039aa:	eb63 090b 	sbc.w	r9, r3, fp
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039c2:	ebb2 0408 	subs.w	r4, r2, r8
 80039c6:	eb63 0509 	sbc.w	r5, r3, r9
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	00eb      	lsls	r3, r5, #3
 80039d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d8:	00e2      	lsls	r2, r4, #3
 80039da:	4614      	mov	r4, r2
 80039dc:	461d      	mov	r5, r3
 80039de:	eb14 030a 	adds.w	r3, r4, sl
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	eb45 030b 	adc.w	r3, r5, fp
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039f6:	4629      	mov	r1, r5
 80039f8:	028b      	lsls	r3, r1, #10
 80039fa:	4621      	mov	r1, r4
 80039fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a00:	4621      	mov	r1, r4
 8003a02:	028a      	lsls	r2, r1, #10
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	60fa      	str	r2, [r7, #12]
 8003a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a14:	f7fc fbe0 	bl	80001d8 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3740      	adds	r7, #64	; 0x40
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	017d7840 	.word	0x017d7840

08003a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000000 	.word	0x20000000

08003a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a78:	f7ff fff0 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08009804 	.word	0x08009804

08003a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa0:	f7ff ffdc 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0b5b      	lsrs	r3, r3, #13
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08009804 	.word	0x08009804

08003ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd f814 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 fa88 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d001      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e044      	b.n	8003c06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba6:	d013      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <HAL_TIM_Base_Start_IT+0xb4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <HAL_TIM_Base_Start_IT+0xb8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d010      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf2:	e007      	b.n	8003c04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800
 8003c20:	40000c00 	.word	0x40000c00
 8003c24:	40014000 	.word	0x40014000

08003c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d122      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d11b      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0202 	mvn.w	r2, #2
 8003c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f9b5 	bl	8003fda <HAL_TIM_IC_CaptureCallback>
 8003c70:	e005      	b.n	8003c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f9a7 	bl	8003fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f9b8 	bl	8003fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d122      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0204 	mvn.w	r2, #4
 8003ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f98b 	bl	8003fda <HAL_TIM_IC_CaptureCallback>
 8003cc4:	e005      	b.n	8003cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f97d 	bl	8003fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f98e 	bl	8003fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d122      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d11b      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0208 	mvn.w	r2, #8
 8003cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2204      	movs	r2, #4
 8003d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f961 	bl	8003fda <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f953 	bl	8003fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f964 	bl	8003fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b10      	cmp	r3, #16
 8003d38:	d122      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d11b      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0210 	mvn.w	r2, #16
 8003d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2208      	movs	r2, #8
 8003d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f937 	bl	8003fda <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f929 	bl	8003fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f93a 	bl	8003fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0201 	mvn.w	r2, #1
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fc fcdc 	bl	8000764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fab2 	bl	800433c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d10e      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d107      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8ff 	bl	8004002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d10e      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d107      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0220 	mvn.w	r2, #32
 8003e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fa7c 	bl	8004328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIM_ConfigClockSource+0x1c>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e0b4      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x186>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8c:	d03e      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0xd4>
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e92:	f200 8087 	bhi.w	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9a:	f000 8086 	beq.w	8003faa <HAL_TIM_ConfigClockSource+0x172>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	d87f      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b70      	cmp	r3, #112	; 0x70
 8003ea6:	d01a      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xa6>
 8003ea8:	2b70      	cmp	r3, #112	; 0x70
 8003eaa:	d87b      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b60      	cmp	r3, #96	; 0x60
 8003eae:	d050      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x11a>
 8003eb0:	2b60      	cmp	r3, #96	; 0x60
 8003eb2:	d877      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b50      	cmp	r3, #80	; 0x50
 8003eb6:	d03c      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0xfa>
 8003eb8:	2b50      	cmp	r3, #80	; 0x50
 8003eba:	d873      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d058      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x13a>
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d86f      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b30      	cmp	r3, #48	; 0x30
 8003ec6:	d064      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec8:	2b30      	cmp	r3, #48	; 0x30
 8003eca:	d86b      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d060      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d867      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d05a      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	e062      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f000 f98d 	bl	800420c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	609a      	str	r2, [r3, #8]
      break;
 8003f0a:	e04f      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6899      	ldr	r1, [r3, #8]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f000 f976 	bl	800420c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f2e:	609a      	str	r2, [r3, #8]
      break;
 8003f30:	e03c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 f8ea 	bl	8004118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2150      	movs	r1, #80	; 0x50
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f943 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003f50:	e02c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f000 f909 	bl	8004176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2160      	movs	r1, #96	; 0x60
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f933 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003f70:	e01c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 f8ca 	bl	8004118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2140      	movs	r1, #64	; 0x40
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f923 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f000 f91a 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e003      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa8:	e000      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a34      	ldr	r2, [pc, #208]	; (80040fc <TIM_Base_SetConfig+0xe4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00f      	beq.n	8004050 <TIM_Base_SetConfig+0x38>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d00b      	beq.n	8004050 <TIM_Base_SetConfig+0x38>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a31      	ldr	r2, [pc, #196]	; (8004100 <TIM_Base_SetConfig+0xe8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_Base_SetConfig+0x38>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a30      	ldr	r2, [pc, #192]	; (8004104 <TIM_Base_SetConfig+0xec>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0x38>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a2f      	ldr	r2, [pc, #188]	; (8004108 <TIM_Base_SetConfig+0xf0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d108      	bne.n	8004062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <TIM_Base_SetConfig+0xe4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01b      	beq.n	80040a2 <TIM_Base_SetConfig+0x8a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d017      	beq.n	80040a2 <TIM_Base_SetConfig+0x8a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <TIM_Base_SetConfig+0xe8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <TIM_Base_SetConfig+0x8a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a21      	ldr	r2, [pc, #132]	; (8004104 <TIM_Base_SetConfig+0xec>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00f      	beq.n	80040a2 <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a20      	ldr	r2, [pc, #128]	; (8004108 <TIM_Base_SetConfig+0xf0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1f      	ldr	r2, [pc, #124]	; (800410c <TIM_Base_SetConfig+0xf4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0x8a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <TIM_Base_SetConfig+0xf8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0x8a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <TIM_Base_SetConfig+0xfc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a08      	ldr	r2, [pc, #32]	; (80040fc <TIM_Base_SetConfig+0xe4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800
 8004108:	40000c00 	.word	0x40000c00
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800

08004118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 030a 	bic.w	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004176:	b480      	push	{r7}
 8004178:	b087      	sub	sp, #28
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0210 	bic.w	r2, r3, #16
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	031b      	lsls	r3, r3, #12
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f043 0307 	orr.w	r3, r3, #7
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	609a      	str	r2, [r3, #8]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	021a      	lsls	r2, r3, #8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	431a      	orrs	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004260:	2302      	movs	r3, #2
 8004262:	e050      	b.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d013      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a16      	ldr	r2, [pc, #88]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a13      	ldr	r2, [pc, #76]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10c      	bne.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40014000 	.word	0x40014000

08004328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e03f      	b.n	80043e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fbf6 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	; 0x24
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fe9b 	bl	80050d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b08c      	sub	sp, #48	; 0x30
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b20      	cmp	r3, #32
 8004402:	d152      	bne.n	80044aa <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04b      	b.n	80044ac <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800441e:	2302      	movs	r3, #2
 8004420:	e044      	b.n	80044ac <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	461a      	mov	r2, r3
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fbea 	bl	8004c10 <UART_Start_Receive_DMA>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004446:	2b00      	cmp	r3, #0
 8004448:	d12c      	bne.n	80044a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	2b01      	cmp	r3, #1
 8004450:	d125      	bne.n	800449e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	617b      	str	r3, [r7, #20]
   return(result);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f043 0310 	orr.w	r3, r3, #16
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004488:	627a      	str	r2, [r7, #36]	; 0x24
 800448a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6a39      	ldr	r1, [r7, #32]
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	61fb      	str	r3, [r7, #28]
   return(result);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e5      	bne.n	8004468 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800449c:	e002      	b.n	80044a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80044a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044a8:	e000      	b.n	80044ac <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3730      	adds	r7, #48	; 0x30
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b0ba      	sub	sp, #232	; 0xe8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_UART_IRQHandler+0x66>
 8004506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fd21 	bl	8004f5a <UART_Receive_IT>
      return;
 8004518:	e256      	b.n	80049c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800451a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80de 	beq.w	80046e0 <HAL_UART_IRQHandler+0x22c>
 8004524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004534:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80d1 	beq.w	80046e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <HAL_UART_IRQHandler+0xae>
 800454a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f043 0201 	orr.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_UART_IRQHandler+0xd2>
 800456e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f043 0202 	orr.w	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <HAL_UART_IRQHandler+0xf6>
 8004592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0204 	orr.w	r2, r3, #4
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d011      	beq.n	80045da <HAL_UART_IRQHandler+0x126>
 80045b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d105      	bne.n	80045ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0208 	orr.w	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 81ed 	beq.w	80049be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_UART_IRQHandler+0x14e>
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fcac 	bl	8004f5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_UART_IRQHandler+0x17a>
 8004626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d04f      	beq.n	80046ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fbb4 	bl	8004d9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d141      	bne.n	80046c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800465c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800466e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800467a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1d9      	bne.n	8004642 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	2b00      	cmp	r3, #0
 8004694:	d013      	beq.n	80046be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	4a7d      	ldr	r2, [pc, #500]	; (8004890 <HAL_UART_IRQHandler+0x3dc>)
 800469c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fc ff10 	bl	80014c8 <HAL_DMA_Abort_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d016      	beq.n	80046dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b8:	4610      	mov	r0, r2
 80046ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	e00e      	b.n	80046dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9a4 	bl	8004a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	e00a      	b.n	80046dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9a0 	bl	8004a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	e006      	b.n	80046dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f99c 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046da:	e170      	b.n	80049be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	bf00      	nop
    return;
 80046de:	e16e      	b.n	80049be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 814a 	bne.w	800497e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8143 	beq.w	800497e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 813c 	beq.w	800497e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	f040 80b4 	bne.w	8004894 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004738:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8140 	beq.w	80049c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800474a:	429a      	cmp	r2, r3
 800474c:	f080 8139 	bcs.w	80049c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004756:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004762:	f000 8088 	beq.w	8004876 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800477c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004792:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800479e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1d9      	bne.n	8004766 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3314      	adds	r3, #20
 80047b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e1      	bne.n	80047b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3314      	adds	r3, #20
 80047f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3314      	adds	r3, #20
 800480e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004812:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004814:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e3      	bne.n	80047ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004846:	f023 0310 	bic.w	r3, r3, #16
 800484a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004858:	65ba      	str	r2, [r7, #88]	; 0x58
 800485a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800485e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e3      	bne.n	8004834 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	4618      	mov	r0, r3
 8004872:	f7fc fdb9 	bl	80013e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800487e:	b29b      	uxth	r3, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	b29b      	uxth	r3, r3
 8004884:	4619      	mov	r1, r3
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fb ff0a 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800488c:	e099      	b.n	80049c2 <HAL_UART_IRQHandler+0x50e>
 800488e:	bf00      	nop
 8004890:	08004e63 	.word	0x08004e63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800489c:	b29b      	uxth	r3, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 808b 	beq.w	80049c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8086 	beq.w	80049c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048de:	647a      	str	r2, [r7, #68]	; 0x44
 80048e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e3      	bne.n	80048ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	623b      	str	r3, [r7, #32]
   return(result);
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004916:	633a      	str	r2, [r7, #48]	; 0x30
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800491c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e3      	bne.n	80048f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	60fb      	str	r3, [r7, #12]
   return(result);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0310 	bic.w	r3, r3, #16
 800494e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800495c:	61fa      	str	r2, [r7, #28]
 800495e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	69b9      	ldr	r1, [r7, #24]
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	617b      	str	r3, [r7, #20]
   return(result);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e3      	bne.n	8004938 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fb fe92 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800497c:	e023      	b.n	80049c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800497e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_UART_IRQHandler+0x4ea>
 800498a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa77 	bl	8004e8a <UART_Transmit_IT>
    return;
 800499c:	e014      	b.n	80049c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00e      	beq.n	80049c8 <HAL_UART_IRQHandler+0x514>
 80049aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fab7 	bl	8004f2a <UART_EndTransmit_IT>
    return;
 80049bc:	e004      	b.n	80049c8 <HAL_UART_IRQHandler+0x514>
    return;
 80049be:	bf00      	nop
 80049c0:	e002      	b.n	80049c8 <HAL_UART_IRQHandler+0x514>
      return;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_UART_IRQHandler+0x514>
      return;
 80049c6:	bf00      	nop
  }
}
 80049c8:	37e8      	adds	r7, #232	; 0xe8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b09c      	sub	sp, #112	; 0x70
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d172      	bne.n	8004b22 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	2200      	movs	r2, #0
 8004a40:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a62:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3314      	adds	r3, #20
 8004a94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a96:	647a      	str	r2, [r7, #68]	; 0x44
 8004a98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e5      	bne.n	8004a76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aca:	633a      	str	r2, [r7, #48]	; 0x30
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e5      	bne.n	8004aaa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d119      	bne.n	8004b22 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f023 0310 	bic.w	r3, r3, #16
 8004b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b0e:	61fa      	str	r2, [r7, #28]
 8004b10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	69b9      	ldr	r1, [r7, #24]
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e5      	bne.n	8004aee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d106      	bne.n	8004b38 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b32:	f7fb fdb5 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b36:	e002      	b.n	8004b3e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b3a:	f7ff ff53 	bl	80049e4 <HAL_UART_RxCpltCallback>
}
 8004b3e:	bf00      	nop
 8004b40:	3770      	adds	r7, #112	; 0x70
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d108      	bne.n	8004b6e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	4619      	mov	r1, r3
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7fb fd9a 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b6c:	e002      	b.n	8004b74 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff ff42 	bl	80049f8 <HAL_UART_RxHalfCpltCallback>
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b80      	cmp	r3, #128	; 0x80
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b21      	cmp	r3, #33	; 0x21
 8004bae:	d108      	bne.n	8004bc2 <UART_DMAError+0x46>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004bbc:	68b8      	ldr	r0, [r7, #8]
 8004bbe:	f000 f8c5 	bl	8004d4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b22      	cmp	r3, #34	; 0x22
 8004be2:	d108      	bne.n	8004bf6 <UART_DMAError+0x7a>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2200      	movs	r2, #0
 8004bee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004bf0:	68b8      	ldr	r0, [r7, #8]
 8004bf2:	f000 f8d3 	bl	8004d9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f043 0210 	orr.w	r2, r3, #16
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c02:	68b8      	ldr	r0, [r7, #8]
 8004c04:	f7ff ff02 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b098      	sub	sp, #96	; 0x60
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2222      	movs	r2, #34	; 0x22
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	4a40      	ldr	r2, [pc, #256]	; (8004d40 <UART_Start_Receive_DMA+0x130>)
 8004c3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	4a3f      	ldr	r2, [pc, #252]	; (8004d44 <UART_Start_Receive_DMA+0x134>)
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	4a3e      	ldr	r2, [pc, #248]	; (8004d48 <UART_Start_Receive_DMA+0x138>)
 8004c4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	2200      	movs	r2, #0
 8004c56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004c58:	f107 0308 	add.w	r3, r7, #8
 8004c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	f7fc fb62 	bl	8001338 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d019      	beq.n	8004cce <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cba:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cee:	63ba      	str	r2, [r7, #56]	; 0x38
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	617b      	str	r3, [r7, #20]
   return(result);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d18:	653b      	str	r3, [r7, #80]	; 0x50
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d22:	627a      	str	r2, [r7, #36]	; 0x24
 8004d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6a39      	ldr	r1, [r7, #32]
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3760      	adds	r7, #96	; 0x60
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	08004a21 	.word	0x08004a21
 8004d44:	08004b47 	.word	0x08004b47
 8004d48:	08004b7d 	.word	0x08004b7d

08004d4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	61ba      	str	r2, [r7, #24]
 8004d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6979      	ldr	r1, [r7, #20]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	613b      	str	r3, [r7, #16]
   return(result);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e5      	bne.n	8004d54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004d90:	bf00      	nop
 8004d92:	3724      	adds	r7, #36	; 0x24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b095      	sub	sp, #84	; 0x54
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc4:	643a      	str	r2, [r7, #64]	; 0x40
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3314      	adds	r3, #20
 8004dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d119      	bne.n	8004e48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0310 	bic.w	r3, r3, #16
 8004e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e34:	61ba      	str	r2, [r7, #24]
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e56:	bf00      	nop
 8004e58:	3754      	adds	r7, #84	; 0x54
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fdc5 	bl	8004a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b21      	cmp	r3, #33	; 0x21
 8004e9c:	d13e      	bne.n	8004f1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d114      	bne.n	8004ed2 <UART_Transmit_IT+0x48>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]
 8004ed0:	e008      	b.n	8004ee4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6211      	str	r1, [r2, #32]
 8004edc:	781a      	ldrb	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10f      	bne.n	8004f18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fd40 	bl	80049d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b08c      	sub	sp, #48	; 0x30
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b22      	cmp	r3, #34	; 0x22
 8004f6c:	f040 80ab 	bne.w	80050c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f78:	d117      	bne.n	8004faa <UART_Receive_IT+0x50>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d113      	bne.n	8004faa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	1c9a      	adds	r2, r3, #2
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa8:	e026      	b.n	8004ff8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbc:	d007      	beq.n	8004fce <UART_Receive_IT+0x74>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <UART_Receive_IT+0x82>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	e008      	b.n	8004fee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4619      	mov	r1, r3
 8005006:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005008:	2b00      	cmp	r3, #0
 800500a:	d15a      	bne.n	80050c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0220 	bic.w	r2, r2, #32
 800501a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800502a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	2b01      	cmp	r3, #1
 800504a:	d135      	bne.n	80050b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	613b      	str	r3, [r7, #16]
   return(result);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f023 0310 	bic.w	r3, r3, #16
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005072:	623a      	str	r2, [r7, #32]
 8005074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	69f9      	ldr	r1, [r7, #28]
 8005078:	6a3a      	ldr	r2, [r7, #32]
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e5      	bne.n	8005052 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d10a      	bne.n	80050aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fb faf5 	bl	80006a0 <HAL_UARTEx_RxEventCallback>
 80050b6:	e002      	b.n	80050be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fc93 	bl	80049e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e002      	b.n	80050c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3730      	adds	r7, #48	; 0x30
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d4:	b0c0      	sub	sp, #256	; 0x100
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ec:	68d9      	ldr	r1, [r3, #12]
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	ea40 0301 	orr.w	r3, r0, r1
 80050f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	431a      	orrs	r2, r3
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005128:	f021 010c 	bic.w	r1, r1, #12
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005136:	430b      	orrs	r3, r1
 8005138:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	6999      	ldr	r1, [r3, #24]
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	ea40 0301 	orr.w	r3, r0, r1
 8005156:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b8f      	ldr	r3, [pc, #572]	; (800539c <UART_SetConfig+0x2cc>)
 8005160:	429a      	cmp	r2, r3
 8005162:	d005      	beq.n	8005170 <UART_SetConfig+0xa0>
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b8d      	ldr	r3, [pc, #564]	; (80053a0 <UART_SetConfig+0x2d0>)
 800516c:	429a      	cmp	r2, r3
 800516e:	d104      	bne.n	800517a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005170:	f7fe fc94 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 8005174:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005178:	e003      	b.n	8005182 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800517a:	f7fe fc7b 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 800517e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518c:	f040 810c 	bne.w	80053a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005194:	2200      	movs	r2, #0
 8005196:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800519a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800519e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	1891      	adds	r1, r2, r2
 80051a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80051aa:	415b      	adcs	r3, r3
 80051ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051b2:	4621      	mov	r1, r4
 80051b4:	eb12 0801 	adds.w	r8, r2, r1
 80051b8:	4629      	mov	r1, r5
 80051ba:	eb43 0901 	adc.w	r9, r3, r1
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d2:	4690      	mov	r8, r2
 80051d4:	4699      	mov	r9, r3
 80051d6:	4623      	mov	r3, r4
 80051d8:	eb18 0303 	adds.w	r3, r8, r3
 80051dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051e0:	462b      	mov	r3, r5
 80051e2:	eb49 0303 	adc.w	r3, r9, r3
 80051e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051fe:	460b      	mov	r3, r1
 8005200:	18db      	adds	r3, r3, r3
 8005202:	653b      	str	r3, [r7, #80]	; 0x50
 8005204:	4613      	mov	r3, r2
 8005206:	eb42 0303 	adc.w	r3, r2, r3
 800520a:	657b      	str	r3, [r7, #84]	; 0x54
 800520c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005210:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005214:	f7fa ffe0 	bl	80001d8 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4b61      	ldr	r3, [pc, #388]	; (80053a4 <UART_SetConfig+0x2d4>)
 800521e:	fba3 2302 	umull	r2, r3, r3, r2
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	011c      	lsls	r4, r3, #4
 8005226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522a:	2200      	movs	r2, #0
 800522c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005230:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005234:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005238:	4642      	mov	r2, r8
 800523a:	464b      	mov	r3, r9
 800523c:	1891      	adds	r1, r2, r2
 800523e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005240:	415b      	adcs	r3, r3
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005244:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005248:	4641      	mov	r1, r8
 800524a:	eb12 0a01 	adds.w	sl, r2, r1
 800524e:	4649      	mov	r1, r9
 8005250:	eb43 0b01 	adc.w	fp, r3, r1
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005260:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005268:	4692      	mov	sl, r2
 800526a:	469b      	mov	fp, r3
 800526c:	4643      	mov	r3, r8
 800526e:	eb1a 0303 	adds.w	r3, sl, r3
 8005272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005276:	464b      	mov	r3, r9
 8005278:	eb4b 0303 	adc.w	r3, fp, r3
 800527c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800528c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005290:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005294:	460b      	mov	r3, r1
 8005296:	18db      	adds	r3, r3, r3
 8005298:	643b      	str	r3, [r7, #64]	; 0x40
 800529a:	4613      	mov	r3, r2
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
 80052a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052aa:	f7fa ff95 	bl	80001d8 <__aeabi_uldivmod>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4611      	mov	r1, r2
 80052b4:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <UART_SetConfig+0x2d4>)
 80052b6:	fba3 2301 	umull	r2, r3, r3, r1
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2264      	movs	r2, #100	; 0x64
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	1acb      	subs	r3, r1, r3
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052ca:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <UART_SetConfig+0x2d4>)
 80052cc:	fba3 2302 	umull	r2, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052d8:	441c      	add	r4, r3
 80052da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80052f4:	415b      	adcs	r3, r3
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052fc:	4641      	mov	r1, r8
 80052fe:	1851      	adds	r1, r2, r1
 8005300:	6339      	str	r1, [r7, #48]	; 0x30
 8005302:	4649      	mov	r1, r9
 8005304:	414b      	adcs	r3, r1
 8005306:	637b      	str	r3, [r7, #52]	; 0x34
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005314:	4659      	mov	r1, fp
 8005316:	00cb      	lsls	r3, r1, #3
 8005318:	4651      	mov	r1, sl
 800531a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531e:	4651      	mov	r1, sl
 8005320:	00ca      	lsls	r2, r1, #3
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	4603      	mov	r3, r0
 8005328:	4642      	mov	r2, r8
 800532a:	189b      	adds	r3, r3, r2
 800532c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005330:	464b      	mov	r3, r9
 8005332:	460a      	mov	r2, r1
 8005334:	eb42 0303 	adc.w	r3, r2, r3
 8005338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005348:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800534c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005350:	460b      	mov	r3, r1
 8005352:	18db      	adds	r3, r3, r3
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
 8005356:	4613      	mov	r3, r2
 8005358:	eb42 0303 	adc.w	r3, r2, r3
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005362:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005366:	f7fa ff37 	bl	80001d8 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <UART_SetConfig+0x2d4>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <UART_SetConfig+0x2d4>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 0207 	and.w	r2, r3, #7
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4422      	add	r2, r4
 8005396:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005398:	e105      	b.n	80055a6 <UART_SetConfig+0x4d6>
 800539a:	bf00      	nop
 800539c:	40011000 	.word	0x40011000
 80053a0:	40011400 	.word	0x40011400
 80053a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053ba:	4642      	mov	r2, r8
 80053bc:	464b      	mov	r3, r9
 80053be:	1891      	adds	r1, r2, r2
 80053c0:	6239      	str	r1, [r7, #32]
 80053c2:	415b      	adcs	r3, r3
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
 80053c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ca:	4641      	mov	r1, r8
 80053cc:	1854      	adds	r4, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb43 0501 	adc.w	r5, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	00eb      	lsls	r3, r5, #3
 80053de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e2:	00e2      	lsls	r2, r4, #3
 80053e4:	4614      	mov	r4, r2
 80053e6:	461d      	mov	r5, r3
 80053e8:	4643      	mov	r3, r8
 80053ea:	18e3      	adds	r3, r4, r3
 80053ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053f0:	464b      	mov	r3, r9
 80053f2:	eb45 0303 	adc.w	r3, r5, r3
 80053f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005416:	4629      	mov	r1, r5
 8005418:	008b      	lsls	r3, r1, #2
 800541a:	4621      	mov	r1, r4
 800541c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005420:	4621      	mov	r1, r4
 8005422:	008a      	lsls	r2, r1, #2
 8005424:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005428:	f7fa fed6 	bl	80001d8 <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4b60      	ldr	r3, [pc, #384]	; (80055b4 <UART_SetConfig+0x4e4>)
 8005432:	fba3 2302 	umull	r2, r3, r3, r2
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	011c      	lsls	r4, r3, #4
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543e:	2200      	movs	r2, #0
 8005440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005444:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005448:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	1891      	adds	r1, r2, r2
 8005452:	61b9      	str	r1, [r7, #24]
 8005454:	415b      	adcs	r3, r3
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800545c:	4641      	mov	r1, r8
 800545e:	1851      	adds	r1, r2, r1
 8005460:	6139      	str	r1, [r7, #16]
 8005462:	4649      	mov	r1, r9
 8005464:	414b      	adcs	r3, r1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005474:	4659      	mov	r1, fp
 8005476:	00cb      	lsls	r3, r1, #3
 8005478:	4651      	mov	r1, sl
 800547a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547e:	4651      	mov	r1, sl
 8005480:	00ca      	lsls	r2, r1, #3
 8005482:	4610      	mov	r0, r2
 8005484:	4619      	mov	r1, r3
 8005486:	4603      	mov	r3, r0
 8005488:	4642      	mov	r2, r8
 800548a:	189b      	adds	r3, r3, r2
 800548c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005490:	464b      	mov	r3, r9
 8005492:	460a      	mov	r2, r1
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80054a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054b4:	4649      	mov	r1, r9
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	4641      	mov	r1, r8
 80054ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054be:	4641      	mov	r1, r8
 80054c0:	008a      	lsls	r2, r1, #2
 80054c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054c6:	f7fa fe87 	bl	80001d8 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <UART_SetConfig+0x4e4>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	; 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	3332      	adds	r3, #50	; 0x32
 80054e2:	4a34      	ldr	r2, [pc, #208]	; (80055b4 <UART_SetConfig+0x4e4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ee:	441c      	add	r4, r3
 80054f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f4:	2200      	movs	r2, #0
 80054f6:	673b      	str	r3, [r7, #112]	; 0x70
 80054f8:	677a      	str	r2, [r7, #116]	; 0x74
 80054fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054fe:	4642      	mov	r2, r8
 8005500:	464b      	mov	r3, r9
 8005502:	1891      	adds	r1, r2, r2
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	415b      	adcs	r3, r3
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550e:	4641      	mov	r1, r8
 8005510:	1851      	adds	r1, r2, r1
 8005512:	6039      	str	r1, [r7, #0]
 8005514:	4649      	mov	r1, r9
 8005516:	414b      	adcs	r3, r1
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005526:	4659      	mov	r1, fp
 8005528:	00cb      	lsls	r3, r1, #3
 800552a:	4651      	mov	r1, sl
 800552c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005530:	4651      	mov	r1, sl
 8005532:	00ca      	lsls	r2, r1, #3
 8005534:	4610      	mov	r0, r2
 8005536:	4619      	mov	r1, r3
 8005538:	4603      	mov	r3, r0
 800553a:	4642      	mov	r2, r8
 800553c:	189b      	adds	r3, r3, r2
 800553e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005540:	464b      	mov	r3, r9
 8005542:	460a      	mov	r2, r1
 8005544:	eb42 0303 	adc.w	r3, r2, r3
 8005548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	663b      	str	r3, [r7, #96]	; 0x60
 8005554:	667a      	str	r2, [r7, #100]	; 0x64
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005562:	4649      	mov	r1, r9
 8005564:	008b      	lsls	r3, r1, #2
 8005566:	4641      	mov	r1, r8
 8005568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556c:	4641      	mov	r1, r8
 800556e:	008a      	lsls	r2, r1, #2
 8005570:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005574:	f7fa fe30 	bl	80001d8 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <UART_SetConfig+0x4e4>)
 800557e:	fba3 1302 	umull	r1, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2164      	movs	r1, #100	; 0x64
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	3332      	adds	r3, #50	; 0x32
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <UART_SetConfig+0x4e4>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	f003 020f 	and.w	r2, r3, #15
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4422      	add	r2, r4
 80055a4:	609a      	str	r2, [r3, #8]
}
 80055a6:	bf00      	nop
 80055a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b2:	bf00      	nop
 80055b4:	51eb851f 	.word	0x51eb851f

080055b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b8:	b084      	sub	sp, #16
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	f107 001c 	add.w	r0, r7, #28
 80055c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d122      	bne.n	8005616 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d105      	bne.n	800560a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 fbee 	bl	8006dec <USB_CoreReset>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]
 8005614:	e01a      	b.n	800564c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fbe2 	bl	8006dec <USB_CoreReset>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800562c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
 800563e:	e005      	b.n	800564c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	2b01      	cmp	r3, #1
 8005650:	d10b      	bne.n	800566a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f043 0206 	orr.w	r2, r3, #6
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005676:	b004      	add	sp, #16
 8005678:	4770      	bx	lr
	...

0800567c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d165      	bne.n	800575c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a41      	ldr	r2, [pc, #260]	; (8005798 <USB_SetTurnaroundTime+0x11c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d906      	bls.n	80056a6 <USB_SetTurnaroundTime+0x2a>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a40      	ldr	r2, [pc, #256]	; (800579c <USB_SetTurnaroundTime+0x120>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d202      	bcs.n	80056a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056a0:	230f      	movs	r3, #15
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e062      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4a3c      	ldr	r2, [pc, #240]	; (800579c <USB_SetTurnaroundTime+0x120>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d306      	bcc.n	80056bc <USB_SetTurnaroundTime+0x40>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <USB_SetTurnaroundTime+0x124>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d202      	bcs.n	80056bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056b6:	230e      	movs	r3, #14
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e057      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <USB_SetTurnaroundTime+0x124>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d306      	bcc.n	80056d2 <USB_SetTurnaroundTime+0x56>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <USB_SetTurnaroundTime+0x128>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d202      	bcs.n	80056d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056cc:	230d      	movs	r3, #13
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e04c      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4a33      	ldr	r2, [pc, #204]	; (80057a4 <USB_SetTurnaroundTime+0x128>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d306      	bcc.n	80056e8 <USB_SetTurnaroundTime+0x6c>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a32      	ldr	r2, [pc, #200]	; (80057a8 <USB_SetTurnaroundTime+0x12c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d802      	bhi.n	80056e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056e2:	230c      	movs	r3, #12
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e041      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4a2f      	ldr	r2, [pc, #188]	; (80057a8 <USB_SetTurnaroundTime+0x12c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d906      	bls.n	80056fe <USB_SetTurnaroundTime+0x82>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a2e      	ldr	r2, [pc, #184]	; (80057ac <USB_SetTurnaroundTime+0x130>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d802      	bhi.n	80056fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056f8:	230b      	movs	r3, #11
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e036      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <USB_SetTurnaroundTime+0x130>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d906      	bls.n	8005714 <USB_SetTurnaroundTime+0x98>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <USB_SetTurnaroundTime+0x134>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d802      	bhi.n	8005714 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800570e:	230a      	movs	r3, #10
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e02b      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <USB_SetTurnaroundTime+0x134>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d906      	bls.n	800572a <USB_SetTurnaroundTime+0xae>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <USB_SetTurnaroundTime+0x138>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d202      	bcs.n	800572a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005724:	2309      	movs	r3, #9
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e020      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <USB_SetTurnaroundTime+0x138>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d306      	bcc.n	8005740 <USB_SetTurnaroundTime+0xc4>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <USB_SetTurnaroundTime+0x13c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d802      	bhi.n	8005740 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800573a:	2308      	movs	r3, #8
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e015      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <USB_SetTurnaroundTime+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d906      	bls.n	8005756 <USB_SetTurnaroundTime+0xda>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <USB_SetTurnaroundTime+0x140>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d202      	bcs.n	8005756 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005750:	2307      	movs	r3, #7
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e00a      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005756:	2306      	movs	r3, #6
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e007      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005762:	2309      	movs	r3, #9
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e001      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005768:	2309      	movs	r3, #9
 800576a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	00d8acbf 	.word	0x00d8acbf
 800579c:	00e4e1c0 	.word	0x00e4e1c0
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	01067380 	.word	0x01067380
 80057a8:	011a499f 	.word	0x011a499f
 80057ac:	01312cff 	.word	0x01312cff
 80057b0:	014ca43f 	.word	0x014ca43f
 80057b4:	016e3600 	.word	0x016e3600
 80057b8:	01a6ab1f 	.word	0x01a6ab1f
 80057bc:	01e84800 	.word	0x01e84800

080057c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f043 0201 	orr.w	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d115      	bne.n	8005852 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005832:	2001      	movs	r0, #1
 8005834:	f7fb fb9c 	bl	8000f70 <HAL_Delay>
      ms++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 fa45 	bl	8006cce <USB_GetMode>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d01e      	beq.n	8005888 <USB_SetCurrentMode+0x84>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b31      	cmp	r3, #49	; 0x31
 800584e:	d9f0      	bls.n	8005832 <USB_SetCurrentMode+0x2e>
 8005850:	e01a      	b.n	8005888 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d115      	bne.n	8005884 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005864:	2001      	movs	r0, #1
 8005866:	f7fb fb83 	bl	8000f70 <HAL_Delay>
      ms++;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3301      	adds	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 fa2c 	bl	8006cce <USB_GetMode>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <USB_SetCurrentMode+0x84>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b31      	cmp	r3, #49	; 0x31
 8005880:	d9f0      	bls.n	8005864 <USB_SetCurrentMode+0x60>
 8005882:	e001      	b.n	8005888 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e005      	b.n	8005894 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b32      	cmp	r3, #50	; 0x32
 800588c:	d101      	bne.n	8005892 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800589c:	b084      	sub	sp, #16
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e009      	b.n	80058d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	3340      	adds	r3, #64	; 0x40
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3301      	adds	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0e      	cmp	r3, #14
 80058d4:	d9f2      	bls.n	80058bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11c      	bne.n	8005916 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
 8005914:	e00b      	b.n	800592e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005934:	461a      	mov	r2, r3
 8005936:	2300      	movs	r3, #0
 8005938:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	4619      	mov	r1, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	461a      	mov	r2, r3
 800594a:	680b      	ldr	r3, [r1, #0]
 800594c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10c      	bne.n	800596e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800595a:	2100      	movs	r1, #0
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f965 	bl	8005c2c <USB_SetDevSpeed>
 8005962:	e008      	b.n	8005976 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005964:	2101      	movs	r1, #1
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f960 	bl	8005c2c <USB_SetDevSpeed>
 800596c:	e003      	b.n	8005976 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800596e:	2103      	movs	r1, #3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f95b 	bl	8005c2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005976:	2110      	movs	r1, #16
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f8f3 	bl	8005b64 <USB_FlushTxFifo>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f91f 	bl	8005bcc <USB_FlushRxFifo>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	461a      	mov	r2, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	461a      	mov	r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	e043      	b.n	8005a4a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d8:	d118      	bne.n	8005a0c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	461a      	mov	r2, r3
 80059ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e013      	b.n	8005a1e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	461a      	mov	r2, r3
 8005a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e008      	b.n	8005a1e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3301      	adds	r3, #1
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d3b7      	bcc.n	80059c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e043      	b.n	8005ae0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a6e:	d118      	bne.n	8005aa2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	461a      	mov	r2, r3
 8005a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e013      	b.n	8005ab4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e008      	b.n	8005ab4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3301      	adds	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d3b7      	bcc.n	8005a58 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005afa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f043 0210 	orr.w	r2, r3, #16
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <USB_DevInit+0x2c4>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f043 0208 	orr.w	r2, r3, #8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d107      	bne.n	8005b50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b48:	f043 0304 	orr.w	r3, r3, #4
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b5c:	b004      	add	sp, #16
 8005b5e:	4770      	bx	lr
 8005b60:	803c3800 	.word	0x803c3800

08005b64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <USB_FlushTxFifo+0x64>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e01b      	b.n	8005bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	daf2      	bge.n	8005b72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	019b      	lsls	r3, r3, #6
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a08      	ldr	r2, [pc, #32]	; (8005bc8 <USB_FlushTxFifo+0x64>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e006      	b.n	8005bbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d0f0      	beq.n	8005b9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	00030d40 	.word	0x00030d40

08005bcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a11      	ldr	r2, [pc, #68]	; (8005c28 <USB_FlushRxFifo+0x5c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e018      	b.n	8005c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	daf2      	bge.n	8005bd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <USB_FlushRxFifo+0x5c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e006      	b.n	8005c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d0f0      	beq.n	8005bfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	00030d40 	.word	0x00030d40

08005c2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b087      	sub	sp, #28
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0306 	and.w	r3, r3, #6
 8005c76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	75fb      	strb	r3, [r7, #23]
 8005c82:	e00a      	b.n	8005c9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d002      	beq.n	8005c90 <USB_GetDevSpeed+0x32>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d102      	bne.n	8005c96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c90:	2302      	movs	r3, #2
 8005c92:	75fb      	strb	r3, [r7, #23]
 8005c94:	e001      	b.n	8005c9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c96:	230f      	movs	r3, #15
 8005c98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d13a      	bne.n	8005d3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	68f9      	ldr	r1, [r7, #12]
 8005cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d155      	bne.n	8005da8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	791b      	ldrb	r3, [r3, #4]
 8005d16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d20:	4313      	orrs	r3, r2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e036      	b.n	8005da8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11a      	bne.n	8005da8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	791b      	ldrb	r3, [r3, #4]
 8005d8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	4313      	orrs	r3, r2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d161      	bne.n	8005e98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dea:	d11f      	bne.n	8005e2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	2101      	movs	r1, #1
 8005e62:	fa01 f303 	lsl.w	r3, r1, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e70:	4013      	ands	r3, r2
 8005e72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	0159      	lsls	r1, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	440b      	add	r3, r1
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4b35      	ldr	r3, [pc, #212]	; (8005f68 <USB_DeactivateEndpoint+0x1b0>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	600b      	str	r3, [r1, #0]
 8005e96:	e060      	b.n	8005f5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eae:	d11f      	bne.n	8005ef0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ece:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	2101      	movs	r1, #1
 8005f02:	fa01 f303 	lsl.w	r3, r1, r3
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f10:	4013      	ands	r3, r2
 8005f12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	2101      	movs	r1, #1
 8005f26:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f34:	4013      	ands	r3, r2
 8005f36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	0159      	lsls	r1, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	440b      	add	r3, r1
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	4619      	mov	r1, r3
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <USB_DeactivateEndpoint+0x1b4>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	ec337800 	.word	0xec337800
 8005f6c:	eff37800 	.word	0xeff37800

08005f70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 815c 	bne.w	800624a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d132      	bne.n	8006000 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff8:	0cdb      	lsrs	r3, r3, #19
 8005ffa:	04db      	lsls	r3, r3, #19
 8005ffc:	6113      	str	r3, [r2, #16]
 8005ffe:	e074      	b.n	80060ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601a:	0cdb      	lsrs	r3, r3, #19
 800601c:	04db      	lsls	r3, r3, #19
 800601e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800603e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6999      	ldr	r1, [r3, #24]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	440b      	add	r3, r1
 800605c:	1e59      	subs	r1, r3, #1
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	fbb1 f3f3 	udiv	r3, r1, r3
 8006066:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006068:	4b9d      	ldr	r3, [pc, #628]	; (80062e0 <USB_EPStartXfer+0x370>)
 800606a:	400b      	ands	r3, r1
 800606c:	69b9      	ldr	r1, [r7, #24]
 800606e:	0148      	lsls	r0, r1, #5
 8006070:	69f9      	ldr	r1, [r7, #28]
 8006072:	4401      	add	r1, r0
 8006074:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006078:	4313      	orrs	r3, r2
 800607a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006092:	69b9      	ldr	r1, [r7, #24]
 8006094:	0148      	lsls	r0, r1, #5
 8006096:	69f9      	ldr	r1, [r7, #28]
 8006098:	4401      	add	r1, r0
 800609a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800609e:	4313      	orrs	r3, r2
 80060a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	791b      	ldrb	r3, [r3, #4]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d11f      	bne.n	80060ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d14b      	bne.n	8006188 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	461a      	mov	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	791b      	ldrb	r3, [r3, #4]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d128      	bne.n	8006166 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d110      	bne.n	8006146 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e00f      	b.n	8006166 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006164:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	e133      	b.n	80063f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	791b      	ldrb	r3, [r3, #4]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d015      	beq.n	80061dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 811b 	beq.w	80063f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	2101      	movs	r1, #1
 80061cc:	fa01 f303 	lsl.w	r3, r1, r3
 80061d0:	69f9      	ldr	r1, [r7, #28]
 80061d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d6:	4313      	orrs	r3, r2
 80061d8:	634b      	str	r3, [r1, #52]	; 0x34
 80061da:	e109      	b.n	80063f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d110      	bne.n	800620e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	e00f      	b.n	800622e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6919      	ldr	r1, [r3, #16]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	b298      	uxth	r0, r3
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4603      	mov	r3, r0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 fade 	bl	8006804 <USB_WritePacket>
 8006248:	e0d2      	b.n	80063f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	0cdb      	lsrs	r3, r3, #19
 8006266:	04db      	lsls	r3, r3, #19
 8006268:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006284:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006288:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800628c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d126      	bne.n	80062e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	0148      	lsls	r0, r1, #5
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	4401      	add	r1, r0
 80062b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062b8:	4313      	orrs	r3, r2
 80062ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062da:	6113      	str	r3, [r2, #16]
 80062dc:	e03a      	b.n	8006354 <USB_EPStartXfer+0x3e4>
 80062de:	bf00      	nop
 80062e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	1e5a      	subs	r2, r3, #1
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	8afa      	ldrh	r2, [r7, #22]
 8006300:	fb03 f202 	mul.w	r2, r3, r2
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	8afb      	ldrh	r3, [r7, #22]
 8006318:	04d9      	lsls	r1, r3, #19
 800631a:	4b38      	ldr	r3, [pc, #224]	; (80063fc <USB_EPStartXfer+0x48c>)
 800631c:	400b      	ands	r3, r1
 800631e:	69b9      	ldr	r1, [r7, #24]
 8006320:	0148      	lsls	r0, r1, #5
 8006322:	69f9      	ldr	r1, [r7, #28]
 8006324:	4401      	add	r1, r0
 8006326:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800632a:	4313      	orrs	r3, r2
 800632c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006344:	69b9      	ldr	r1, [r7, #24]
 8006346:	0148      	lsls	r0, r1, #5
 8006348:	69f9      	ldr	r1, [r7, #28]
 800634a:	4401      	add	r1, r0
 800634c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006350:	4313      	orrs	r3, r2
 8006352:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d10d      	bne.n	8006376 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6919      	ldr	r1, [r3, #16]
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006372:	460a      	mov	r2, r1
 8006374:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	791b      	ldrb	r3, [r3, #4]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d128      	bne.n	80063d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d110      	bne.n	80063b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	e00f      	b.n	80063d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	1ff80000 	.word	0x1ff80000

08006400 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b01      	cmp	r3, #1
 800641e:	f040 80ce 	bne.w	80065be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d132      	bne.n	8006490 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006444:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006448:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800644c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800646c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006488:	0cdb      	lsrs	r3, r3, #19
 800648a:	04db      	lsls	r3, r3, #19
 800648c:	6113      	str	r3, [r2, #16]
 800648e:	e04e      	b.n	800652e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	0151      	lsls	r1, r2, #5
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	440a      	add	r2, r1
 80064a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064aa:	0cdb      	lsrs	r3, r3, #19
 80064ac:	04db      	lsls	r3, r3, #19
 80064ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d903      	bls.n	80064e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006506:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651e:	6939      	ldr	r1, [r7, #16]
 8006520:	0148      	lsls	r0, r1, #5
 8006522:	6979      	ldr	r1, [r7, #20]
 8006524:	4401      	add	r1, r0
 8006526:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800652a:	4313      	orrs	r3, r2
 800652c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d11e      	bne.n	8006572 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	461a      	mov	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	e097      	b.n	80066a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006590:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8083 	beq.w	80066a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	2101      	movs	r1, #1
 80065ae:	fa01 f303 	lsl.w	r3, r1, r3
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b8:	4313      	orrs	r3, r2
 80065ba:	634b      	str	r3, [r1, #52]	; 0x34
 80065bc:	e071      	b.n	80066a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d8:	0cdb      	lsrs	r3, r3, #19
 80065da:	04db      	lsls	r3, r3, #19
 80065dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006600:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006638:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	691a      	ldr	r2, [r3, #16]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006650:	6939      	ldr	r1, [r7, #16]
 8006652:	0148      	lsls	r0, r1, #5
 8006654:	6979      	ldr	r1, [r7, #20]
 8006656:	4401      	add	r1, r0
 8006658:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800665c:	4313      	orrs	r3, r2
 800665e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10d      	bne.n	8006682 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6919      	ldr	r1, [r3, #16]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	460a      	mov	r2, r1
 8006680:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d14a      	bne.n	8006764 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e6:	f040 8086 	bne.w	80067f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	7812      	ldrb	r2, [r2, #0]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	440a      	add	r2, r1
 8006704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006708:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800670c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	7812      	ldrb	r2, [r2, #0]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	440a      	add	r2, r1
 8006728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006730:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f242 7210 	movw	r2, #10000	; 0x2710
 800673e:	4293      	cmp	r3, r2
 8006740:	d902      	bls.n	8006748 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
          break;
 8006746:	e056      	b.n	80067f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006760:	d0e7      	beq.n	8006732 <USB_EPStopXfer+0x82>
 8006762:	e048      	b.n	80067f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800677c:	d13b      	bne.n	80067f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	7812      	ldrb	r2, [r2, #0]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800679c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	7812      	ldrb	r2, [r2, #0]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d902      	bls.n	80067dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	75fb      	strb	r3, [r7, #23]
          break;
 80067da:	e00c      	b.n	80067f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f4:	d0e7      	beq.n	80067c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006804:	b480      	push	{r7}
 8006806:	b089      	sub	sp, #36	; 0x24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4611      	mov	r1, r2
 8006810:	461a      	mov	r2, r3
 8006812:	460b      	mov	r3, r1
 8006814:	71fb      	strb	r3, [r7, #7]
 8006816:	4613      	mov	r3, r2
 8006818:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006822:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d123      	bne.n	8006872 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800682a:	88bb      	ldrh	r3, [r7, #4]
 800682c:	3303      	adds	r3, #3
 800682e:	089b      	lsrs	r3, r3, #2
 8006830:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	e018      	b.n	800686a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	031a      	lsls	r2, r3, #12
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006844:	461a      	mov	r2, r3
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	3301      	adds	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3301      	adds	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	3301      	adds	r3, #1
 800685c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	3301      	adds	r3, #1
 8006862:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	3301      	adds	r3, #1
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d3e2      	bcc.n	8006838 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3724      	adds	r7, #36	; 0x24
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006880:	b480      	push	{r7}
 8006882:	b08b      	sub	sp, #44	; 0x2c
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	4613      	mov	r3, r2
 800688c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	089b      	lsrs	r3, r3, #2
 800689a:	b29b      	uxth	r3, r3
 800689c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068a6:	2300      	movs	r3, #0
 80068a8:	623b      	str	r3, [r7, #32]
 80068aa:	e014      	b.n	80068d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	3301      	adds	r3, #1
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	3301      	adds	r3, #1
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	3301      	adds	r3, #1
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	3301      	adds	r3, #1
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	3301      	adds	r3, #1
 80068d4:	623b      	str	r3, [r7, #32]
 80068d6:	6a3a      	ldr	r2, [r7, #32]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d3e6      	bcc.n	80068ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068de:	8bfb      	ldrh	r3, [r7, #30]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01e      	beq.n	8006922 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ee:	461a      	mov	r2, r3
 80068f0:	f107 0310 	add.w	r3, r7, #16
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	b2da      	uxtb	r2, r3
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	701a      	strb	r2, [r3, #0]
      i++;
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	3301      	adds	r3, #1
 800690e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	3301      	adds	r3, #1
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006916:	8bfb      	ldrh	r3, [r7, #30]
 8006918:	3b01      	subs	r3, #1
 800691a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800691c:	8bfb      	ldrh	r3, [r7, #30]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1ea      	bne.n	80068f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006924:	4618      	mov	r0, r3
 8006926:	372c      	adds	r7, #44	; 0x2c
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d12c      	bne.n	80069a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	db12      	blt.n	8006984 <USB_EPSetStall+0x54>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00f      	beq.n	8006984 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006982:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	e02b      	b.n	80069fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	db12      	blt.n	80069de <USB_EPSetStall+0xae>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00f      	beq.n	80069de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d128      	bne.n	8006a7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	791b      	ldrb	r3, [r3, #4]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d003      	beq.n	8006a58 <USB_EPClearStall+0x4c>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	791b      	ldrb	r3, [r3, #4]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d138      	bne.n	8006aca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	e027      	b.n	8006aca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	0151      	lsls	r1, r2, #5
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	440a      	add	r2, r1
 8006a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	791b      	ldrb	r3, [r3, #4]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d003      	beq.n	8006aaa <USB_EPClearStall+0x9e>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d10f      	bne.n	8006aca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006af6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006afa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b0c:	68f9      	ldr	r1, [r7, #12]
 8006b0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b52:	f023 0302 	bic.w	r3, r3, #2
 8006b56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b80:	f023 0303 	bic.w	r3, r3, #3
 8006b84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b94:	f043 0302 	orr.w	r3, r3, #2
 8006b98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	4013      	ands	r3, r2
 8006c24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	b29b      	uxth	r3, r3
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c46:	78fb      	ldrb	r3, [r7, #3]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4013      	ands	r3, r2
 8006c62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c64:	68bb      	ldr	r3, [r7, #8]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b087      	sub	sp, #28
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	01db      	lsls	r3, r3, #7
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f003 0301 	and.w	r3, r3, #1
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d08:	f023 0307 	bic.w	r3, r3, #7
 8006d0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	333c      	adds	r3, #60	; 0x3c
 8006d46:	3304      	adds	r3, #4
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	4a26      	ldr	r2, [pc, #152]	; (8006de8 <USB_EP0_OutStart+0xb8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d90a      	bls.n	8006d6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d64:	d101      	bne.n	8006d6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e037      	b.n	8006dda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	461a      	mov	r2, r3
 8006d72:	2300      	movs	r3, #0
 8006d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d98:	f043 0318 	orr.w	r3, r3, #24
 8006d9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006db0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d10f      	bne.n	8006dd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006dd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	4f54300a 	.word	0x4f54300a

08006dec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <USB_CoreReset+0x64>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d901      	bls.n	8006e0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e01b      	b.n	8006e42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	daf2      	bge.n	8006df8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f043 0201 	orr.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <USB_CoreReset+0x64>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d901      	bls.n	8006e34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e006      	b.n	8006e42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d0f0      	beq.n	8006e22 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	00030d40 	.word	0x00030d40

08006e54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e64:	f002 fc1e 	bl	80096a4 <USBD_static_malloc>
 8006e68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d109      	bne.n	8006e84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32b0      	adds	r2, #176	; 0xb0
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e80:	2302      	movs	r3, #2
 8006e82:	e0d4      	b.n	800702e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e88:	2100      	movs	r1, #0
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f002 fc80 	bl	8009790 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	; 0xb0
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32b0      	adds	r2, #176	; 0xb0
 8006eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	7c1b      	ldrb	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d138      	bne.n	8006f2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ebc:	4b5e      	ldr	r3, [pc, #376]	; (8007038 <USBD_CDC_Init+0x1e4>)
 8006ebe:	7819      	ldrb	r1, [r3, #0]
 8006ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f002 fac9 	bl	800945e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ecc:	4b5a      	ldr	r3, [pc, #360]	; (8007038 <USBD_CDC_Init+0x1e4>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3324      	adds	r3, #36	; 0x24
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ee6:	4b55      	ldr	r3, [pc, #340]	; (800703c <USBD_CDC_Init+0x1e8>)
 8006ee8:	7819      	ldrb	r1, [r3, #0]
 8006eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eee:	2202      	movs	r2, #2
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f002 fab4 	bl	800945e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ef6:	4b51      	ldr	r3, [pc, #324]	; (800703c <USBD_CDC_Init+0x1e8>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 020f 	and.w	r2, r3, #15
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f0e:	2201      	movs	r2, #1
 8006f10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f12:	4b4b      	ldr	r3, [pc, #300]	; (8007040 <USBD_CDC_Init+0x1ec>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f003 020f 	and.w	r2, r3, #15
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	3326      	adds	r3, #38	; 0x26
 8006f28:	2210      	movs	r2, #16
 8006f2a:	801a      	strh	r2, [r3, #0]
 8006f2c:	e035      	b.n	8006f9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f2e:	4b42      	ldr	r3, [pc, #264]	; (8007038 <USBD_CDC_Init+0x1e4>)
 8006f30:	7819      	ldrb	r1, [r3, #0]
 8006f32:	2340      	movs	r3, #64	; 0x40
 8006f34:	2202      	movs	r2, #2
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f002 fa91 	bl	800945e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f3c:	4b3e      	ldr	r3, [pc, #248]	; (8007038 <USBD_CDC_Init+0x1e4>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 020f 	and.w	r2, r3, #15
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	3324      	adds	r3, #36	; 0x24
 8006f52:	2201      	movs	r2, #1
 8006f54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f56:	4b39      	ldr	r3, [pc, #228]	; (800703c <USBD_CDC_Init+0x1e8>)
 8006f58:	7819      	ldrb	r1, [r3, #0]
 8006f5a:	2340      	movs	r3, #64	; 0x40
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 fa7d 	bl	800945e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f64:	4b35      	ldr	r3, [pc, #212]	; (800703c <USBD_CDC_Init+0x1e8>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f80:	4b2f      	ldr	r3, [pc, #188]	; (8007040 <USBD_CDC_Init+0x1ec>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 020f 	and.w	r2, r3, #15
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	3326      	adds	r3, #38	; 0x26
 8006f96:	2210      	movs	r2, #16
 8006f98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f9a:	4b29      	ldr	r3, [pc, #164]	; (8007040 <USBD_CDC_Init+0x1ec>)
 8006f9c:	7819      	ldrb	r1, [r3, #0]
 8006f9e:	2308      	movs	r3, #8
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f002 fa5b 	bl	800945e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006fa8:	4b25      	ldr	r3, [pc, #148]	; (8007040 <USBD_CDC_Init+0x1ec>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	3324      	adds	r3, #36	; 0x24
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	33b0      	adds	r3, #176	; 0xb0
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e018      	b.n	800702e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	7c1b      	ldrb	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007004:	4b0d      	ldr	r3, [pc, #52]	; (800703c <USBD_CDC_Init+0x1e8>)
 8007006:	7819      	ldrb	r1, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800700e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f002 fb12 	bl	800963c <USBD_LL_PrepareReceive>
 8007018:	e008      	b.n	800702c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800701a:	4b08      	ldr	r3, [pc, #32]	; (800703c <USBD_CDC_Init+0x1e8>)
 800701c:	7819      	ldrb	r1, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f002 fb08 	bl	800963c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000093 	.word	0x20000093
 800703c:	20000094 	.word	0x20000094
 8007040:	20000095 	.word	0x20000095

08007044 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007050:	4b3a      	ldr	r3, [pc, #232]	; (800713c <USBD_CDC_DeInit+0xf8>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f002 fa27 	bl	80094aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800705c:	4b37      	ldr	r3, [pc, #220]	; (800713c <USBD_CDC_DeInit+0xf8>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	f003 020f 	and.w	r2, r3, #15
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	3324      	adds	r3, #36	; 0x24
 8007072:	2200      	movs	r2, #0
 8007074:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007076:	4b32      	ldr	r3, [pc, #200]	; (8007140 <USBD_CDC_DeInit+0xfc>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f002 fa14 	bl	80094aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007082:	4b2f      	ldr	r3, [pc, #188]	; (8007140 <USBD_CDC_DeInit+0xfc>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	f003 020f 	and.w	r2, r3, #15
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	440b      	add	r3, r1
 8007096:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800709a:	2200      	movs	r2, #0
 800709c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800709e:	4b29      	ldr	r3, [pc, #164]	; (8007144 <USBD_CDC_DeInit+0x100>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f002 fa00 	bl	80094aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80070aa:	4b26      	ldr	r3, [pc, #152]	; (8007144 <USBD_CDC_DeInit+0x100>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	f003 020f 	and.w	r2, r3, #15
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	2200      	movs	r2, #0
 80070c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070c4:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <USBD_CDC_DeInit+0x100>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	f003 020f 	and.w	r2, r3, #15
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	3326      	adds	r3, #38	; 0x26
 80070da:	2200      	movs	r2, #0
 80070dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	32b0      	adds	r2, #176	; 0xb0
 80070e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01f      	beq.n	8007130 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	33b0      	adds	r3, #176	; 0xb0
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32b0      	adds	r2, #176	; 0xb0
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	4618      	mov	r0, r3
 8007114:	f002 fad4 	bl	80096c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	32b0      	adds	r2, #176	; 0xb0
 8007122:	2100      	movs	r1, #0
 8007124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000093 	.word	0x20000093
 8007140:	20000094 	.word	0x20000094
 8007144:	20000095 	.word	0x20000095

08007148 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	32b0      	adds	r2, #176	; 0xb0
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007174:	2303      	movs	r3, #3
 8007176:	e0bf      	b.n	80072f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007180:	2b00      	cmp	r3, #0
 8007182:	d050      	beq.n	8007226 <USBD_CDC_Setup+0xde>
 8007184:	2b20      	cmp	r3, #32
 8007186:	f040 80af 	bne.w	80072e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	88db      	ldrh	r3, [r3, #6]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d03a      	beq.n	8007208 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	b25b      	sxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	da1b      	bge.n	80071d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	33b0      	adds	r3, #176	; 0xb0
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80071b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	88d2      	ldrh	r2, [r2, #6]
 80071b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	88db      	ldrh	r3, [r3, #6]
 80071be:	2b07      	cmp	r3, #7
 80071c0:	bf28      	it	cs
 80071c2:	2307      	movcs	r3, #7
 80071c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	89fa      	ldrh	r2, [r7, #14]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 fd43 	bl	8008c58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071d2:	e090      	b.n	80072f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	785a      	ldrb	r2, [r3, #1]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	88db      	ldrh	r3, [r3, #6]
 80071e2:	2b3f      	cmp	r3, #63	; 0x3f
 80071e4:	d803      	bhi.n	80071ee <USBD_CDC_Setup+0xa6>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	88db      	ldrh	r3, [r3, #6]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	e000      	b.n	80071f0 <USBD_CDC_Setup+0xa8>
 80071ee:	2240      	movs	r2, #64	; 0x40
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071f6:	6939      	ldr	r1, [r7, #16]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071fe:	461a      	mov	r2, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fd55 	bl	8008cb0 <USBD_CtlPrepareRx>
      break;
 8007206:	e076      	b.n	80072f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	33b0      	adds	r3, #176	; 0xb0
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	7850      	ldrb	r0, [r2, #1]
 800721e:	2200      	movs	r2, #0
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	4798      	blx	r3
      break;
 8007224:	e067      	b.n	80072f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b0b      	cmp	r3, #11
 800722c:	d851      	bhi.n	80072d2 <USBD_CDC_Setup+0x18a>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <USBD_CDC_Setup+0xec>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007265 	.word	0x08007265
 8007238:	080072e1 	.word	0x080072e1
 800723c:	080072d3 	.word	0x080072d3
 8007240:	080072d3 	.word	0x080072d3
 8007244:	080072d3 	.word	0x080072d3
 8007248:	080072d3 	.word	0x080072d3
 800724c:	080072d3 	.word	0x080072d3
 8007250:	080072d3 	.word	0x080072d3
 8007254:	080072d3 	.word	0x080072d3
 8007258:	080072d3 	.word	0x080072d3
 800725c:	0800728f 	.word	0x0800728f
 8007260:	080072b9 	.word	0x080072b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b03      	cmp	r3, #3
 800726e:	d107      	bne.n	8007280 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007270:	f107 030a 	add.w	r3, r7, #10
 8007274:	2202      	movs	r2, #2
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fced 	bl	8008c58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800727e:	e032      	b.n	80072e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fc77 	bl	8008b76 <USBD_CtlError>
            ret = USBD_FAIL;
 8007288:	2303      	movs	r3, #3
 800728a:	75fb      	strb	r3, [r7, #23]
          break;
 800728c:	e02b      	b.n	80072e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b03      	cmp	r3, #3
 8007298:	d107      	bne.n	80072aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800729a:	f107 030d 	add.w	r3, r7, #13
 800729e:	2201      	movs	r2, #1
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fcd8 	bl	8008c58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072a8:	e01d      	b.n	80072e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 fc62 	bl	8008b76 <USBD_CtlError>
            ret = USBD_FAIL;
 80072b2:	2303      	movs	r3, #3
 80072b4:	75fb      	strb	r3, [r7, #23]
          break;
 80072b6:	e016      	b.n	80072e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d00f      	beq.n	80072e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 fc55 	bl	8008b76 <USBD_CtlError>
            ret = USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072d0:	e008      	b.n	80072e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 fc4e 	bl	8008b76 <USBD_CtlError>
          ret = USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	75fb      	strb	r3, [r7, #23]
          break;
 80072de:	e002      	b.n	80072e6 <USBD_CDC_Setup+0x19e>
          break;
 80072e0:	bf00      	nop
 80072e2:	e008      	b.n	80072f6 <USBD_CDC_Setup+0x1ae>
          break;
 80072e4:	bf00      	nop
      }
      break;
 80072e6:	e006      	b.n	80072f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 fc43 	bl	8008b76 <USBD_CtlError>
      ret = USBD_FAIL;
 80072f0:	2303      	movs	r3, #3
 80072f2:	75fb      	strb	r3, [r7, #23]
      break;
 80072f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	32b0      	adds	r2, #176	; 0xb0
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007326:	2303      	movs	r3, #3
 8007328:	e065      	b.n	80073f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	32b0      	adds	r2, #176	; 0xb0
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3318      	adds	r3, #24
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d02f      	beq.n	80073b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	f003 020f 	and.w	r2, r3, #15
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	3318      	adds	r3, #24
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	f003 010f 	and.w	r1, r3, #15
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	460b      	mov	r3, r1
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	440b      	add	r3, r1
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4403      	add	r3, r0
 800737c:	3348      	adds	r3, #72	; 0x48
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	fbb2 f1f3 	udiv	r1, r2, r3
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800738a:	2b00      	cmp	r3, #0
 800738c:	d112      	bne.n	80073b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	f003 020f 	and.w	r2, r3, #15
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	3318      	adds	r3, #24
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073a6:	78f9      	ldrb	r1, [r7, #3]
 80073a8:	2300      	movs	r3, #0
 80073aa:	2200      	movs	r2, #0
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f002 f924 	bl	80095fa <USBD_LL_Transmit>
 80073b2:	e01f      	b.n	80073f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	33b0      	adds	r3, #176	; 0xb0
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d010      	beq.n	80073f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	33b0      	adds	r3, #176	; 0xb0
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	32b0      	adds	r2, #176	; 0xb0
 8007414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007418:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	32b0      	adds	r2, #176	; 0xb0
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	e01a      	b.n	8007466 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f002 f922 	bl	800967e <USBD_LL_GetRxDataSize>
 800743a:	4602      	mov	r2, r0
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	33b0      	adds	r3, #176	; 0xb0
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007460:	4611      	mov	r1, r2
 8007462:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	32b0      	adds	r2, #176	; 0xb0
 8007480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007484:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	e025      	b.n	80074dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	33b0      	adds	r3, #176	; 0xb0
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01a      	beq.n	80074da <USBD_CDC_EP0_RxReady+0x6c>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074aa:	2bff      	cmp	r3, #255	; 0xff
 80074ac:	d015      	beq.n	80074da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	33b0      	adds	r3, #176	; 0xb0
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80074c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074ce:	b292      	uxth	r2, r2
 80074d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	22ff      	movs	r2, #255	; 0xff
 80074d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074ec:	2182      	movs	r1, #130	; 0x82
 80074ee:	4818      	ldr	r0, [pc, #96]	; (8007550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074f0:	f000 fd09 	bl	8007f06 <USBD_GetEpDesc>
 80074f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074f6:	2101      	movs	r1, #1
 80074f8:	4815      	ldr	r0, [pc, #84]	; (8007550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074fa:	f000 fd04 	bl	8007f06 <USBD_GetEpDesc>
 80074fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007500:	2181      	movs	r1, #129	; 0x81
 8007502:	4813      	ldr	r0, [pc, #76]	; (8007550 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007504:	f000 fcff 	bl	8007f06 <USBD_GetEpDesc>
 8007508:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2210      	movs	r2, #16
 8007514:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d006      	beq.n	800752a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2200      	movs	r2, #0
 8007520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007524:	711a      	strb	r2, [r3, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007538:	711a      	strb	r2, [r3, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2243      	movs	r2, #67	; 0x43
 8007542:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007544:	4b02      	ldr	r3, [pc, #8]	; (8007550 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20000050 	.word	0x20000050

08007554 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800755c:	2182      	movs	r1, #130	; 0x82
 800755e:	4818      	ldr	r0, [pc, #96]	; (80075c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007560:	f000 fcd1 	bl	8007f06 <USBD_GetEpDesc>
 8007564:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007566:	2101      	movs	r1, #1
 8007568:	4815      	ldr	r0, [pc, #84]	; (80075c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800756a:	f000 fccc 	bl	8007f06 <USBD_GetEpDesc>
 800756e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007570:	2181      	movs	r1, #129	; 0x81
 8007572:	4813      	ldr	r0, [pc, #76]	; (80075c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007574:	f000 fcc7 	bl	8007f06 <USBD_GetEpDesc>
 8007578:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2210      	movs	r2, #16
 8007584:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d006      	beq.n	800759a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2200      	movs	r2, #0
 8007590:	711a      	strb	r2, [r3, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f042 0202 	orr.w	r2, r2, #2
 8007598:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	711a      	strb	r2, [r3, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f042 0202 	orr.w	r2, r2, #2
 80075ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2243      	movs	r2, #67	; 0x43
 80075b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075b4:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000050 	.word	0x20000050

080075c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075cc:	2182      	movs	r1, #130	; 0x82
 80075ce:	4818      	ldr	r0, [pc, #96]	; (8007630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075d0:	f000 fc99 	bl	8007f06 <USBD_GetEpDesc>
 80075d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075d6:	2101      	movs	r1, #1
 80075d8:	4815      	ldr	r0, [pc, #84]	; (8007630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075da:	f000 fc94 	bl	8007f06 <USBD_GetEpDesc>
 80075de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075e0:	2181      	movs	r1, #129	; 0x81
 80075e2:	4813      	ldr	r0, [pc, #76]	; (8007630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075e4:	f000 fc8f 	bl	8007f06 <USBD_GetEpDesc>
 80075e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2210      	movs	r2, #16
 80075f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2200      	movs	r2, #0
 8007600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007604:	711a      	strb	r2, [r3, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007618:	711a      	strb	r2, [r3, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2243      	movs	r2, #67	; 0x43
 8007622:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007624:	4b02      	ldr	r3, [pc, #8]	; (8007630 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000050 	.word	0x20000050

08007634 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	220a      	movs	r2, #10
 8007640:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007642:	4b03      	ldr	r3, [pc, #12]	; (8007650 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	2000000c 	.word	0x2000000c

08007654 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	e009      	b.n	800767c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	33b0      	adds	r3, #176	; 0xb0
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	32b0      	adds	r2, #176	; 0xb0
 800769e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e008      	b.n	80076c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	32b0      	adds	r2, #176	; 0xb0
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e004      	b.n	80076fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	32b0      	adds	r2, #176	; 0xb0
 800771a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	32b0      	adds	r2, #176	; 0xb0
 800772a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007732:	2303      	movs	r3, #3
 8007734:	e018      	b.n	8007768 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7c1b      	ldrb	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <USBD_CDC_ReceivePacket+0x68>)
 8007740:	7819      	ldrb	r1, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 ff75 	bl	800963c <USBD_LL_PrepareReceive>
 8007752:	e008      	b.n	8007766 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007754:	4b06      	ldr	r3, [pc, #24]	; (8007770 <USBD_CDC_ReceivePacket+0x68>)
 8007756:	7819      	ldrb	r1, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800775e:	2340      	movs	r3, #64	; 0x40
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 ff6b 	bl	800963c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000094 	.word	0x20000094

08007774 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007788:	2303      	movs	r3, #3
 800778a:	e01f      	b.n	80077cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	79fa      	ldrb	r2, [r7, #7]
 80077be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f001 fde5 	bl	8009390 <USBD_LL_Init>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e025      	b.n	8007838 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	32ae      	adds	r2, #174	; 0xae
 80077fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00f      	beq.n	8007828 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	32ae      	adds	r2, #174	; 0xae
 8007812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	f107 020e 	add.w	r2, r7, #14
 800781c:	4610      	mov	r0, r2
 800781e:	4798      	blx	r3
 8007820:	4602      	mov	r2, r0
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fded 	bl	8009428 <USBD_LL_Start>
 800784e:	4603      	mov	r3, r0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d009      	beq.n	800789c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	4611      	mov	r1, r2
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b084      	sub	sp, #16
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	78fa      	ldrb	r2, [r7, #3]
 80078c0:	4611      	mov	r1, r2
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078cc:	2303      	movs	r3, #3
 80078ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f001 f908 	bl	8008b02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007900:	461a      	mov	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	2b02      	cmp	r3, #2
 8007914:	d01a      	beq.n	800794c <USBD_LL_SetupStage+0x72>
 8007916:	2b02      	cmp	r3, #2
 8007918:	d822      	bhi.n	8007960 <USBD_LL_SetupStage+0x86>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <USBD_LL_SetupStage+0x4a>
 800791e:	2b01      	cmp	r3, #1
 8007920:	d00a      	beq.n	8007938 <USBD_LL_SetupStage+0x5e>
 8007922:	e01d      	b.n	8007960 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fb5f 	bl	8007ff0 <USBD_StdDevReq>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
      break;
 8007936:	e020      	b.n	800797a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fbc7 	bl	80080d4 <USBD_StdItfReq>
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]
      break;
 800794a:	e016      	b.n	800797a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fc29 	bl	80081ac <USBD_StdEPReq>
 800795a:	4603      	mov	r3, r0
 800795c:	73fb      	strb	r3, [r7, #15]
      break;
 800795e:	e00c      	b.n	800797a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007966:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800796a:	b2db      	uxtb	r3, r3
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fdba 	bl	80094e8 <USBD_LL_StallEP>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
      break;
 8007978:	bf00      	nop
  }

  return ret;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	460b      	mov	r3, r1
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d16e      	bne.n	8007a7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	f040 8098 	bne.w	8007ae0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d913      	bls.n	80079e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	1ad2      	subs	r2, r2, r3
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	4293      	cmp	r3, r2
 80079d4:	bf28      	it	cs
 80079d6:	4613      	movcs	r3, r2
 80079d8:	461a      	mov	r2, r3
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f001 f984 	bl	8008cea <USBD_CtlContinueRx>
 80079e2:	e07d      	b.n	8007ae0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079ea:	f003 031f 	and.w	r3, r3, #31
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d014      	beq.n	8007a1c <USBD_LL_DataOutStage+0x98>
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d81d      	bhi.n	8007a32 <USBD_LL_DataOutStage+0xae>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <USBD_LL_DataOutStage+0x7c>
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d003      	beq.n	8007a06 <USBD_LL_DataOutStage+0x82>
 80079fe:	e018      	b.n	8007a32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	75bb      	strb	r3, [r7, #22]
            break;
 8007a04:	e018      	b.n	8007a38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fa5e 	bl	8007ed2 <USBD_CoreFindIF>
 8007a16:	4603      	mov	r3, r0
 8007a18:	75bb      	strb	r3, [r7, #22]
            break;
 8007a1a:	e00d      	b.n	8007a38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	4619      	mov	r1, r3
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fa60 	bl	8007eec <USBD_CoreFindEP>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	75bb      	strb	r3, [r7, #22]
            break;
 8007a30:	e002      	b.n	8007a38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75bb      	strb	r3, [r7, #22]
            break;
 8007a36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a38:	7dbb      	ldrb	r3, [r7, #22]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d119      	bne.n	8007a72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d113      	bne.n	8007a72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a4a:	7dba      	ldrb	r2, [r7, #22]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	32ae      	adds	r2, #174	; 0xae
 8007a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a5a:	7dba      	ldrb	r2, [r7, #22]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a62:	7dba      	ldrb	r2, [r7, #22]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	32ae      	adds	r2, #174	; 0xae
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f001 f94a 	bl	8008d0c <USBD_CtlSendStatus>
 8007a78:	e032      	b.n	8007ae0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 fa31 	bl	8007eec <USBD_CoreFindEP>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a8e:	7dbb      	ldrb	r3, [r7, #22]
 8007a90:	2bff      	cmp	r3, #255	; 0xff
 8007a92:	d025      	beq.n	8007ae0 <USBD_LL_DataOutStage+0x15c>
 8007a94:	7dbb      	ldrb	r3, [r7, #22]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d122      	bne.n	8007ae0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d117      	bne.n	8007ad6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007aa6:	7dba      	ldrb	r2, [r7, #22]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	32ae      	adds	r2, #174	; 0xae
 8007aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00f      	beq.n	8007ad6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ab6:	7dba      	ldrb	r2, [r7, #22]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007abe:	7dba      	ldrb	r2, [r7, #22]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	32ae      	adds	r2, #174	; 0xae
 8007ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	7afa      	ldrb	r2, [r7, #11]
 8007acc:	4611      	mov	r1, r2
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	4798      	blx	r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	e000      	b.n	8007ae2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	460b      	mov	r3, r1
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d16f      	bne.n	8007bde <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3314      	adds	r3, #20
 8007b02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d15a      	bne.n	8007bc4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d914      	bls.n	8007b44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	1ad2      	subs	r2, r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f001 f8ac 	bl	8008c8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b36:	2300      	movs	r3, #0
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 fd7d 	bl	800963c <USBD_LL_PrepareReceive>
 8007b42:	e03f      	b.n	8007bc4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d11c      	bne.n	8007b8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d316      	bcc.n	8007b8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d20f      	bcs.n	8007b8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 f88d 	bl	8008c8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2100      	movs	r1, #0
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f001 fd5a 	bl	800963c <USBD_LL_PrepareReceive>
 8007b88:	e01c      	b.n	8007bc4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d10f      	bne.n	8007bb6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bb6:	2180      	movs	r1, #128	; 0x80
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f001 fc95 	bl	80094e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f001 f8b7 	bl	8008d32 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03a      	beq.n	8007c44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7ff fe42 	bl	8007858 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bdc:	e032      	b.n	8007c44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bde:	7afb      	ldrb	r3, [r7, #11]
 8007be0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	4619      	mov	r1, r3
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f97f 	bl	8007eec <USBD_CoreFindEP>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	2bff      	cmp	r3, #255	; 0xff
 8007bf6:	d025      	beq.n	8007c44 <USBD_LL_DataInStage+0x15a>
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d122      	bne.n	8007c44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d11c      	bne.n	8007c44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c0a:	7dfa      	ldrb	r2, [r7, #23]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	32ae      	adds	r2, #174	; 0xae
 8007c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d014      	beq.n	8007c44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c1a:	7dfa      	ldrb	r2, [r7, #23]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c22:	7dfa      	ldrb	r2, [r7, #23]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	32ae      	adds	r2, #174	; 0xae
 8007c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	7afa      	ldrb	r2, [r7, #11]
 8007c30:	4611      	mov	r1, r2
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	4798      	blx	r3
 8007c36:	4603      	mov	r3, r0
 8007c38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c3a:	7dbb      	ldrb	r3, [r7, #22]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c40:	7dbb      	ldrb	r3, [r7, #22]
 8007c42:	e000      	b.n	8007c46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d014      	beq.n	8007cb4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00e      	beq.n	8007cb4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6852      	ldr	r2, [r2, #4]
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cb4:	2340      	movs	r3, #64	; 0x40
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2100      	movs	r1, #0
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f001 fbcf 	bl	800945e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2240      	movs	r2, #64	; 0x40
 8007ccc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cd0:	2340      	movs	r3, #64	; 0x40
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 fbc1 	bl	800945e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2240      	movs	r2, #64	; 0x40
 8007ce6:	621a      	str	r2, [r3, #32]

  return ret;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d106      	bne.n	8007d60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d110      	bne.n	8007da4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	32ae      	adds	r2, #174	; 0xae
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e01c      	b.n	8007e0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d115      	bne.n	8007e08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	32ae      	adds	r2, #174	; 0xae
 8007de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	32ae      	adds	r2, #174	; 0xae
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	78fa      	ldrb	r2, [r7, #3]
 8007e02:	4611      	mov	r1, r2
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	32ae      	adds	r2, #174	; 0xae
 8007e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e01c      	b.n	8007e6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d115      	bne.n	8007e6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	32ae      	adds	r2, #174	; 0xae
 8007e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32ae      	adds	r2, #174	; 0xae
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	78fa      	ldrb	r2, [r7, #3]
 8007e66:	4611      	mov	r1, r2
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00e      	beq.n	8007ec8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6852      	ldr	r2, [r2, #4]
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	4611      	mov	r1, r2
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ede:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ef8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b086      	sub	sp, #24
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d920      	bls.n	8007f70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f36:	e013      	b.n	8007f60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f38:	f107 030a 	add.w	r3, r7, #10
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6978      	ldr	r0, [r7, #20]
 8007f40:	f000 f81b 	bl	8007f7a <USBD_GetNextDesc>
 8007f44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d108      	bne.n	8007f60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	789b      	ldrb	r3, [r3, #2]
 8007f56:	78fa      	ldrb	r2, [r7, #3]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d008      	beq.n	8007f6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	885b      	ldrh	r3, [r3, #2]
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	897b      	ldrh	r3, [r7, #10]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d8e5      	bhi.n	8007f38 <USBD_GetEpDesc+0x32>
 8007f6c:	e000      	b.n	8007f70 <USBD_GetEpDesc+0x6a>
          break;
 8007f6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f70:	693b      	ldr	r3, [r7, #16]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	881a      	ldrh	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	4413      	add	r3, r2
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fd2:	8a3b      	ldrh	r3, [r7, #16]
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	b21a      	sxth	r2, r3
 8007fd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	b21b      	sxth	r3, r3
 8007fe0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fe2:	89fb      	ldrh	r3, [r7, #14]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d005      	beq.n	8008016 <USBD_StdDevReq+0x26>
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d857      	bhi.n	80080be <USBD_StdDevReq+0xce>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <USBD_StdDevReq+0x42>
 8008012:	2b20      	cmp	r3, #32
 8008014:	d153      	bne.n	80080be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	32ae      	adds	r2, #174	; 0xae
 8008020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	4798      	blx	r3
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]
      break;
 8008030:	e04a      	b.n	80080c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	785b      	ldrb	r3, [r3, #1]
 8008036:	2b09      	cmp	r3, #9
 8008038:	d83b      	bhi.n	80080b2 <USBD_StdDevReq+0xc2>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <USBD_StdDevReq+0x50>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008095 	.word	0x08008095
 8008044:	080080a9 	.word	0x080080a9
 8008048:	080080b3 	.word	0x080080b3
 800804c:	0800809f 	.word	0x0800809f
 8008050:	080080b3 	.word	0x080080b3
 8008054:	08008073 	.word	0x08008073
 8008058:	08008069 	.word	0x08008069
 800805c:	080080b3 	.word	0x080080b3
 8008060:	0800808b 	.word	0x0800808b
 8008064:	0800807d 	.word	0x0800807d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa3c 	bl	80084e8 <USBD_GetDescriptor>
          break;
 8008070:	e024      	b.n	80080bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fba1 	bl	80087bc <USBD_SetAddress>
          break;
 800807a:	e01f      	b.n	80080bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fbe0 	bl	8008844 <USBD_SetConfig>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]
          break;
 8008088:	e018      	b.n	80080bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fc83 	bl	8008998 <USBD_GetConfig>
          break;
 8008092:	e013      	b.n	80080bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fcb4 	bl	8008a04 <USBD_GetStatus>
          break;
 800809c:	e00e      	b.n	80080bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fce3 	bl	8008a6c <USBD_SetFeature>
          break;
 80080a6:	e009      	b.n	80080bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fd07 	bl	8008abe <USBD_ClrFeature>
          break;
 80080b0:	e004      	b.n	80080bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fd5e 	bl	8008b76 <USBD_CtlError>
          break;
 80080ba:	bf00      	nop
      }
      break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fd58 	bl	8008b76 <USBD_CtlError>
      break;
 80080c6:	bf00      	nop
  }

  return ret;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop

080080d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ea:	2b40      	cmp	r3, #64	; 0x40
 80080ec:	d005      	beq.n	80080fa <USBD_StdItfReq+0x26>
 80080ee:	2b40      	cmp	r3, #64	; 0x40
 80080f0:	d852      	bhi.n	8008198 <USBD_StdItfReq+0xc4>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <USBD_StdItfReq+0x26>
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d14e      	bne.n	8008198 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008100:	b2db      	uxtb	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	2b02      	cmp	r3, #2
 8008106:	d840      	bhi.n	800818a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	889b      	ldrh	r3, [r3, #4]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b01      	cmp	r3, #1
 8008110:	d836      	bhi.n	8008180 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	889b      	ldrh	r3, [r3, #4]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff fed9 	bl	8007ed2 <USBD_CoreFindIF>
 8008120:	4603      	mov	r3, r0
 8008122:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2bff      	cmp	r3, #255	; 0xff
 8008128:	d01d      	beq.n	8008166 <USBD_StdItfReq+0x92>
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d11a      	bne.n	8008166 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008130:	7bba      	ldrb	r2, [r7, #14]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	; 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00f      	beq.n	8008160 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008140:	7bba      	ldrb	r2, [r7, #14]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008148:	7bba      	ldrb	r2, [r7, #14]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	32ae      	adds	r2, #174	; 0xae
 800814e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800815e:	e004      	b.n	800816a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008164:	e001      	b.n	800816a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008166:	2303      	movs	r3, #3
 8008168:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	88db      	ldrh	r3, [r3, #6]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d110      	bne.n	8008194 <USBD_StdItfReq+0xc0>
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10d      	bne.n	8008194 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fdc7 	bl	8008d0c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800817e:	e009      	b.n	8008194 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fcf7 	bl	8008b76 <USBD_CtlError>
          break;
 8008188:	e004      	b.n	8008194 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fcf2 	bl	8008b76 <USBD_CtlError>
          break;
 8008192:	e000      	b.n	8008196 <USBD_StdItfReq+0xc2>
          break;
 8008194:	bf00      	nop
      }
      break;
 8008196:	e004      	b.n	80081a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fceb 	bl	8008b76 <USBD_CtlError>
      break;
 80081a0:	bf00      	nop
  }

  return ret;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	889b      	ldrh	r3, [r3, #4]
 80081be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	d007      	beq.n	80081dc <USBD_StdEPReq+0x30>
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	f200 817f 	bhi.w	80084d0 <USBD_StdEPReq+0x324>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d02a      	beq.n	800822c <USBD_StdEPReq+0x80>
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	f040 817a 	bne.w	80084d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fe83 	bl	8007eec <USBD_CoreFindEP>
 80081e6:	4603      	mov	r3, r0
 80081e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ea:	7b7b      	ldrb	r3, [r7, #13]
 80081ec:	2bff      	cmp	r3, #255	; 0xff
 80081ee:	f000 8174 	beq.w	80084da <USBD_StdEPReq+0x32e>
 80081f2:	7b7b      	ldrb	r3, [r7, #13]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f040 8170 	bne.w	80084da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081fa:	7b7a      	ldrb	r2, [r7, #13]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008202:	7b7a      	ldrb	r2, [r7, #13]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	32ae      	adds	r2, #174	; 0xae
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 8163 	beq.w	80084da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008214:	7b7a      	ldrb	r2, [r7, #13]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	32ae      	adds	r2, #174	; 0xae
 800821a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
 8008226:	4603      	mov	r3, r0
 8008228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800822a:	e156      	b.n	80084da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b03      	cmp	r3, #3
 8008232:	d008      	beq.n	8008246 <USBD_StdEPReq+0x9a>
 8008234:	2b03      	cmp	r3, #3
 8008236:	f300 8145 	bgt.w	80084c4 <USBD_StdEPReq+0x318>
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 809b 	beq.w	8008376 <USBD_StdEPReq+0x1ca>
 8008240:	2b01      	cmp	r3, #1
 8008242:	d03c      	beq.n	80082be <USBD_StdEPReq+0x112>
 8008244:	e13e      	b.n	80084c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d002      	beq.n	8008258 <USBD_StdEPReq+0xac>
 8008252:	2b03      	cmp	r3, #3
 8008254:	d016      	beq.n	8008284 <USBD_StdEPReq+0xd8>
 8008256:	e02c      	b.n	80082b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00d      	beq.n	800827a <USBD_StdEPReq+0xce>
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b80      	cmp	r3, #128	; 0x80
 8008262:	d00a      	beq.n	800827a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 f93d 	bl	80094e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800826e:	2180      	movs	r1, #128	; 0x80
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 f939 	bl	80094e8 <USBD_LL_StallEP>
 8008276:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008278:	e020      	b.n	80082bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fc7a 	bl	8008b76 <USBD_CtlError>
              break;
 8008282:	e01b      	b.n	80082bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	885b      	ldrh	r3, [r3, #2]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10e      	bne.n	80082aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <USBD_StdEPReq+0xfe>
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	2b80      	cmp	r3, #128	; 0x80
 8008296:	d008      	beq.n	80082aa <USBD_StdEPReq+0xfe>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	88db      	ldrh	r3, [r3, #6]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d104      	bne.n	80082aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 f91f 	bl	80094e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fd2e 	bl	8008d0c <USBD_CtlSendStatus>

              break;
 80082b0:	e004      	b.n	80082bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc5e 	bl	8008b76 <USBD_CtlError>
              break;
 80082ba:	bf00      	nop
          }
          break;
 80082bc:	e107      	b.n	80084ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d002      	beq.n	80082d0 <USBD_StdEPReq+0x124>
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d016      	beq.n	80082fc <USBD_StdEPReq+0x150>
 80082ce:	e04b      	b.n	8008368 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00d      	beq.n	80082f2 <USBD_StdEPReq+0x146>
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d00a      	beq.n	80082f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 f901 	bl	80094e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082e6:	2180      	movs	r1, #128	; 0x80
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f8fd 	bl	80094e8 <USBD_LL_StallEP>
 80082ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082f0:	e040      	b.n	8008374 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fc3e 	bl	8008b76 <USBD_CtlError>
              break;
 80082fa:	e03b      	b.n	8008374 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	885b      	ldrh	r3, [r3, #2]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d136      	bne.n	8008372 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800830a:	2b00      	cmp	r3, #0
 800830c:	d004      	beq.n	8008318 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 f907 	bl	8009526 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fcf7 	bl	8008d0c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff fde2 	bl	8007eec <USBD_CoreFindEP>
 8008328:	4603      	mov	r3, r0
 800832a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800832c:	7b7b      	ldrb	r3, [r7, #13]
 800832e:	2bff      	cmp	r3, #255	; 0xff
 8008330:	d01f      	beq.n	8008372 <USBD_StdEPReq+0x1c6>
 8008332:	7b7b      	ldrb	r3, [r7, #13]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d11c      	bne.n	8008372 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008338:	7b7a      	ldrb	r2, [r7, #13]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008340:	7b7a      	ldrb	r2, [r7, #13]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	32ae      	adds	r2, #174	; 0xae
 8008346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d010      	beq.n	8008372 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008350:	7b7a      	ldrb	r2, [r7, #13]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	32ae      	adds	r2, #174	; 0xae
 8008356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008366:	e004      	b.n	8008372 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fc03 	bl	8008b76 <USBD_CtlError>
              break;
 8008370:	e000      	b.n	8008374 <USBD_StdEPReq+0x1c8>
              break;
 8008372:	bf00      	nop
          }
          break;
 8008374:	e0ab      	b.n	80084ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d002      	beq.n	8008388 <USBD_StdEPReq+0x1dc>
 8008382:	2b03      	cmp	r3, #3
 8008384:	d032      	beq.n	80083ec <USBD_StdEPReq+0x240>
 8008386:	e097      	b.n	80084b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <USBD_StdEPReq+0x1f2>
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b80      	cmp	r3, #128	; 0x80
 8008392:	d004      	beq.n	800839e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fbed 	bl	8008b76 <USBD_CtlError>
                break;
 800839c:	e091      	b.n	80084c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800839e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da0b      	bge.n	80083be <USBD_StdEPReq+0x212>
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	3310      	adds	r3, #16
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	4413      	add	r3, r2
 80083ba:	3304      	adds	r3, #4
 80083bc:	e00b      	b.n	80083d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	4413      	add	r3, r2
 80083d4:	3304      	adds	r3, #4
 80083d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2202      	movs	r2, #2
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fc37 	bl	8008c58 <USBD_CtlSendData>
              break;
 80083ea:	e06a      	b.n	80084c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	da11      	bge.n	8008418 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	f003 020f 	and.w	r2, r3, #15
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	440b      	add	r3, r1
 8008406:	3324      	adds	r3, #36	; 0x24
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d117      	bne.n	800843e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fbb0 	bl	8008b76 <USBD_CtlError>
                  break;
 8008416:	e054      	b.n	80084c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	f003 020f 	and.w	r2, r3, #15
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fb9d 	bl	8008b76 <USBD_CtlError>
                  break;
 800843c:	e041      	b.n	80084c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800843e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008442:	2b00      	cmp	r3, #0
 8008444:	da0b      	bge.n	800845e <USBD_StdEPReq+0x2b2>
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	3310      	adds	r3, #16
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	3304      	adds	r3, #4
 800845c:	e00b      	b.n	8008476 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	3304      	adds	r3, #4
 8008476:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <USBD_StdEPReq+0x2d8>
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b80      	cmp	r3, #128	; 0x80
 8008482:	d103      	bne.n	800848c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e00e      	b.n	80084aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 f867 	bl	8009564 <USBD_LL_IsStallEP>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2201      	movs	r2, #1
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	e002      	b.n	80084aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2202      	movs	r2, #2
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fbd1 	bl	8008c58 <USBD_CtlSendData>
              break;
 80084b6:	e004      	b.n	80084c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fb5b 	bl	8008b76 <USBD_CtlError>
              break;
 80084c0:	bf00      	nop
          }
          break;
 80084c2:	e004      	b.n	80084ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fb55 	bl	8008b76 <USBD_CtlError>
          break;
 80084cc:	bf00      	nop
      }
      break;
 80084ce:	e005      	b.n	80084dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fb4f 	bl	8008b76 <USBD_CtlError>
      break;
 80084d8:	e000      	b.n	80084dc <USBD_StdEPReq+0x330>
      break;
 80084da:	bf00      	nop
  }

  return ret;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	b29b      	uxth	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	2b06      	cmp	r3, #6
 800850a:	f200 8128 	bhi.w	800875e <USBD_GetDescriptor+0x276>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <USBD_GetDescriptor+0x2c>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008531 	.word	0x08008531
 8008518:	08008549 	.word	0x08008549
 800851c:	08008589 	.word	0x08008589
 8008520:	0800875f 	.word	0x0800875f
 8008524:	0800875f 	.word	0x0800875f
 8008528:	080086ff 	.word	0x080086ff
 800852c:	0800872b 	.word	0x0800872b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	7c12      	ldrb	r2, [r2, #16]
 800853c:	f107 0108 	add.w	r1, r7, #8
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	60f8      	str	r0, [r7, #12]
      break;
 8008546:	e112      	b.n	800876e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7c1b      	ldrb	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10d      	bne.n	800856c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	f107 0208 	add.w	r2, r7, #8
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	2202      	movs	r2, #2
 8008568:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800856a:	e100      	b.n	800876e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	f107 0208 	add.w	r2, r7, #8
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	2202      	movs	r2, #2
 8008584:	701a      	strb	r2, [r3, #0]
      break;
 8008586:	e0f2      	b.n	800876e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	885b      	ldrh	r3, [r3, #2]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b05      	cmp	r3, #5
 8008590:	f200 80ac 	bhi.w	80086ec <USBD_GetDescriptor+0x204>
 8008594:	a201      	add	r2, pc, #4	; (adr r2, 800859c <USBD_GetDescriptor+0xb4>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085b5 	.word	0x080085b5
 80085a0:	080085e9 	.word	0x080085e9
 80085a4:	0800861d 	.word	0x0800861d
 80085a8:	08008651 	.word	0x08008651
 80085ac:	08008685 	.word	0x08008685
 80085b0:	080086b9 	.word	0x080086b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	7c12      	ldrb	r2, [r2, #16]
 80085cc:	f107 0108 	add.w	r1, r7, #8
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3
 80085d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d6:	e091      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 facb 	bl	8008b76 <USBD_CtlError>
            err++;
 80085e0:	7afb      	ldrb	r3, [r7, #11]
 80085e2:	3301      	adds	r3, #1
 80085e4:	72fb      	strb	r3, [r7, #11]
          break;
 80085e6:	e089      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	7c12      	ldrb	r2, [r2, #16]
 8008600:	f107 0108 	add.w	r1, r7, #8
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860a:	e077      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fab1 	bl	8008b76 <USBD_CtlError>
            err++;
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	3301      	adds	r3, #1
 8008618:	72fb      	strb	r3, [r7, #11]
          break;
 800861a:	e06f      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863e:	e05d      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa97 	bl	8008b76 <USBD_CtlError>
            err++;
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	3301      	adds	r3, #1
 800864c:	72fb      	strb	r3, [r7, #11]
          break;
 800864e:	e055      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	7c12      	ldrb	r2, [r2, #16]
 8008668:	f107 0108 	add.w	r1, r7, #8
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008672:	e043      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa7d 	bl	8008b76 <USBD_CtlError>
            err++;
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	3301      	adds	r3, #1
 8008680:	72fb      	strb	r3, [r7, #11]
          break;
 8008682:	e03b      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	7c12      	ldrb	r2, [r2, #16]
 800869c:	f107 0108 	add.w	r1, r7, #8
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a6:	e029      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa63 	bl	8008b76 <USBD_CtlError>
            err++;
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	3301      	adds	r3, #1
 80086b4:	72fb      	strb	r3, [r7, #11]
          break;
 80086b6:	e021      	b.n	80086fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7c12      	ldrb	r2, [r2, #16]
 80086d0:	f107 0108 	add.w	r1, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086da:	e00f      	b.n	80086fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa49 	bl	8008b76 <USBD_CtlError>
            err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ea:	e007      	b.n	80086fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa41 	bl	8008b76 <USBD_CtlError>
          err++;
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	3301      	adds	r3, #1
 80086f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086fa:	bf00      	nop
      }
      break;
 80086fc:	e037      	b.n	800876e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7c1b      	ldrb	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d109      	bne.n	800871a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870e:	f107 0208 	add.w	r2, r7, #8
 8008712:	4610      	mov	r0, r2
 8008714:	4798      	blx	r3
 8008716:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008718:	e029      	b.n	800876e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fa2a 	bl	8008b76 <USBD_CtlError>
        err++;
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	3301      	adds	r3, #1
 8008726:	72fb      	strb	r3, [r7, #11]
      break;
 8008728:	e021      	b.n	800876e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7c1b      	ldrb	r3, [r3, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10d      	bne.n	800874e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f107 0208 	add.w	r2, r7, #8
 800873e:	4610      	mov	r0, r2
 8008740:	4798      	blx	r3
 8008742:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	2207      	movs	r2, #7
 800874a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800874c:	e00f      	b.n	800876e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa10 	bl	8008b76 <USBD_CtlError>
        err++;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	3301      	adds	r3, #1
 800875a:	72fb      	strb	r3, [r7, #11]
      break;
 800875c:	e007      	b.n	800876e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa08 	bl	8008b76 <USBD_CtlError>
      err++;
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	3301      	adds	r3, #1
 800876a:	72fb      	strb	r3, [r7, #11]
      break;
 800876c:	bf00      	nop
  }

  if (err != 0U)
 800876e:	7afb      	ldrb	r3, [r7, #11]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11e      	bne.n	80087b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	88db      	ldrh	r3, [r3, #6]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d016      	beq.n	80087aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800877c:	893b      	ldrh	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00e      	beq.n	80087a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	88da      	ldrh	r2, [r3, #6]
 8008786:	893b      	ldrh	r3, [r7, #8]
 8008788:	4293      	cmp	r3, r2
 800878a:	bf28      	it	cs
 800878c:	4613      	movcs	r3, r2
 800878e:	b29b      	uxth	r3, r3
 8008790:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008792:	893b      	ldrh	r3, [r7, #8]
 8008794:	461a      	mov	r2, r3
 8008796:	68f9      	ldr	r1, [r7, #12]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fa5d 	bl	8008c58 <USBD_CtlSendData>
 800879e:	e009      	b.n	80087b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f9e7 	bl	8008b76 <USBD_CtlError>
 80087a8:	e004      	b.n	80087b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 faae 	bl	8008d0c <USBD_CtlSendStatus>
 80087b0:	e000      	b.n	80087b4 <USBD_GetDescriptor+0x2cc>
    return;
 80087b2:	bf00      	nop
  }
}
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop

080087bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	889b      	ldrh	r3, [r3, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d131      	bne.n	8008832 <USBD_SetAddress+0x76>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	88db      	ldrh	r3, [r3, #6]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d12d      	bne.n	8008832 <USBD_SetAddress+0x76>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	885b      	ldrh	r3, [r3, #2]
 80087da:	2b7f      	cmp	r3, #127	; 0x7f
 80087dc:	d829      	bhi.n	8008832 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	885b      	ldrh	r3, [r3, #2]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d104      	bne.n	8008800 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f9bc 	bl	8008b76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fe:	e01d      	b.n	800883c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	7bfa      	ldrb	r2, [r7, #15]
 8008804:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fed5 	bl	80095bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa7a 	bl	8008d0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d004      	beq.n	8008828 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2202      	movs	r2, #2
 8008822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008826:	e009      	b.n	800883c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008830:	e004      	b.n	800883c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f99e 	bl	8008b76 <USBD_CtlError>
  }
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	885b      	ldrh	r3, [r3, #2]
 8008856:	b2da      	uxtb	r2, r3
 8008858:	4b4e      	ldr	r3, [pc, #312]	; (8008994 <USBD_SetConfig+0x150>)
 800885a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800885c:	4b4d      	ldr	r3, [pc, #308]	; (8008994 <USBD_SetConfig+0x150>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d905      	bls.n	8008870 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f985 	bl	8008b76 <USBD_CtlError>
    return USBD_FAIL;
 800886c:	2303      	movs	r3, #3
 800886e:	e08c      	b.n	800898a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d002      	beq.n	8008882 <USBD_SetConfig+0x3e>
 800887c:	2b03      	cmp	r3, #3
 800887e:	d029      	beq.n	80088d4 <USBD_SetConfig+0x90>
 8008880:	e075      	b.n	800896e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008882:	4b44      	ldr	r3, [pc, #272]	; (8008994 <USBD_SetConfig+0x150>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d020      	beq.n	80088cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800888a:	4b42      	ldr	r3, [pc, #264]	; (8008994 <USBD_SetConfig+0x150>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008894:	4b3f      	ldr	r3, [pc, #252]	; (8008994 <USBD_SetConfig+0x150>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7fe ffe7 	bl	800786e <USBD_SetClassConfig>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d008      	beq.n	80088bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f962 	bl	8008b76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088ba:	e065      	b.n	8008988 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fa25 	bl	8008d0c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2203      	movs	r2, #3
 80088c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088ca:	e05d      	b.n	8008988 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa1d 	bl	8008d0c <USBD_CtlSendStatus>
      break;
 80088d2:	e059      	b.n	8008988 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088d4:	4b2f      	ldr	r3, [pc, #188]	; (8008994 <USBD_SetConfig+0x150>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d112      	bne.n	8008902 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088e4:	4b2b      	ldr	r3, [pc, #172]	; (8008994 <USBD_SetConfig+0x150>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ee:	4b29      	ldr	r3, [pc, #164]	; (8008994 <USBD_SetConfig+0x150>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7fe ffd6 	bl	80078a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fa06 	bl	8008d0c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008900:	e042      	b.n	8008988 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008902:	4b24      	ldr	r3, [pc, #144]	; (8008994 <USBD_SetConfig+0x150>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	429a      	cmp	r2, r3
 800890e:	d02a      	beq.n	8008966 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7fe ffc4 	bl	80078a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800891e:	4b1d      	ldr	r3, [pc, #116]	; (8008994 <USBD_SetConfig+0x150>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008928:	4b1a      	ldr	r3, [pc, #104]	; (8008994 <USBD_SetConfig+0x150>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fe ff9d 	bl	800786e <USBD_SetClassConfig>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00f      	beq.n	800895e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f918 	bl	8008b76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7fe ffa9 	bl	80078a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800895c:	e014      	b.n	8008988 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9d4 	bl	8008d0c <USBD_CtlSendStatus>
      break;
 8008964:	e010      	b.n	8008988 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f9d0 	bl	8008d0c <USBD_CtlSendStatus>
      break;
 800896c:	e00c      	b.n	8008988 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f900 	bl	8008b76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008976:	4b07      	ldr	r3, [pc, #28]	; (8008994 <USBD_SetConfig+0x150>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7fe ff92 	bl	80078a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008982:	2303      	movs	r3, #3
 8008984:	73fb      	strb	r3, [r7, #15]
      break;
 8008986:	bf00      	nop
  }

  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200006c0 	.word	0x200006c0

08008998 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	88db      	ldrh	r3, [r3, #6]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d004      	beq.n	80089b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f8e2 	bl	8008b76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089b2:	e023      	b.n	80089fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	dc02      	bgt.n	80089c6 <USBD_GetConfig+0x2e>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dc03      	bgt.n	80089cc <USBD_GetConfig+0x34>
 80089c4:	e015      	b.n	80089f2 <USBD_GetConfig+0x5a>
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d00b      	beq.n	80089e2 <USBD_GetConfig+0x4a>
 80089ca:	e012      	b.n	80089f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3308      	adds	r3, #8
 80089d6:	2201      	movs	r2, #1
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f93c 	bl	8008c58 <USBD_CtlSendData>
        break;
 80089e0:	e00c      	b.n	80089fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3304      	adds	r3, #4
 80089e6:	2201      	movs	r2, #1
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f934 	bl	8008c58 <USBD_CtlSendData>
        break;
 80089f0:	e004      	b.n	80089fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f8be 	bl	8008b76 <USBD_CtlError>
        break;
 80089fa:	bf00      	nop
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d81e      	bhi.n	8008a5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	88db      	ldrh	r3, [r3, #6]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d004      	beq.n	8008a2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f8a5 	bl	8008b76 <USBD_CtlError>
        break;
 8008a2c:	e01a      	b.n	8008a64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f043 0202 	orr.w	r2, r3, #2
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	2202      	movs	r2, #2
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f900 	bl	8008c58 <USBD_CtlSendData>
      break;
 8008a58:	e004      	b.n	8008a64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f88a 	bl	8008b76 <USBD_CtlError>
      break;
 8008a62:	bf00      	nop
  }
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	885b      	ldrh	r3, [r3, #2]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d107      	bne.n	8008a8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f940 	bl	8008d0c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a8c:	e013      	b.n	8008ab6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	885b      	ldrh	r3, [r3, #2]
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d10b      	bne.n	8008aae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	889b      	ldrh	r3, [r3, #4]
 8008a9a:	0a1b      	lsrs	r3, r3, #8
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f930 	bl	8008d0c <USBD_CtlSendStatus>
}
 8008aac:	e003      	b.n	8008ab6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f860 	bl	8008b76 <USBD_CtlError>
}
 8008ab6:	bf00      	nop
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d80b      	bhi.n	8008aee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	885b      	ldrh	r3, [r3, #2]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d10c      	bne.n	8008af8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f910 	bl	8008d0c <USBD_CtlSendStatus>
      }
      break;
 8008aec:	e004      	b.n	8008af8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f840 	bl	8008b76 <USBD_CtlError>
      break;
 8008af6:	e000      	b.n	8008afa <USBD_ClrFeature+0x3c>
      break;
 8008af8:	bf00      	nop
  }
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	781a      	ldrb	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7ff fa41 	bl	8007fb4 <SWAPBYTE>
 8008b32:	4603      	mov	r3, r0
 8008b34:	461a      	mov	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f7ff fa34 	bl	8007fb4 <SWAPBYTE>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3301      	adds	r3, #1
 8008b58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff fa27 	bl	8007fb4 <SWAPBYTE>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	80da      	strh	r2, [r3, #6]
}
 8008b6e:	bf00      	nop
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b80:	2180      	movs	r1, #128	; 0x80
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fcb0 	bl	80094e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fcac 	bl	80094e8 <USBD_LL_StallEP>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d036      	beq.n	8008c1c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bb2:	6938      	ldr	r0, [r7, #16]
 8008bb4:	f000 f836 	bl	8008c24 <USBD_GetLen>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	3301      	adds	r3, #1
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	4413      	add	r3, r2
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7812      	ldrb	r2, [r2, #0]
 8008bd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bd8:	7dfb      	ldrb	r3, [r7, #23]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	2203      	movs	r2, #3
 8008be0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	3301      	adds	r3, #1
 8008be6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008be8:	e013      	b.n	8008c12 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	4413      	add	r3, r2
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	613b      	str	r3, [r7, #16]
    idx++;
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	4413      	add	r3, r2
 8008c08:	2200      	movs	r2, #0
 8008c0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1e7      	bne.n	8008bea <USBD_GetString+0x52>
 8008c1a:	e000      	b.n	8008c1e <USBD_GetString+0x86>
    return;
 8008c1c:	bf00      	nop
  }
}
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c34:	e005      	b.n	8008c42 <USBD_GetLen+0x1e>
  {
    len++;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f5      	bne.n	8008c36 <USBD_GetLen+0x12>
  }

  return len;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fcbb 	bl	80095fa <USBD_LL_Transmit>

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fcaa 	bl	80095fa <USBD_LL_Transmit>

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	2100      	movs	r1, #0
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 fcae 	bl	800963c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 fc9d 	bl	800963c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2204      	movs	r2, #4
 8008d18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2100      	movs	r1, #0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fc69 	bl	80095fa <USBD_LL_Transmit>

  return USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2205      	movs	r2, #5
 8008d3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d42:	2300      	movs	r3, #0
 8008d44:	2200      	movs	r2, #0
 8008d46:	2100      	movs	r1, #0
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fc77 	bl	800963c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4912      	ldr	r1, [pc, #72]	; (8008da8 <MX_USB_DEVICE_Init+0x50>)
 8008d60:	4812      	ldr	r0, [pc, #72]	; (8008dac <MX_USB_DEVICE_Init+0x54>)
 8008d62:	f7fe fd07 	bl	8007774 <USBD_Init>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d6c:	f7f7 fea6 	bl	8000abc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d70:	490f      	ldr	r1, [pc, #60]	; (8008db0 <MX_USB_DEVICE_Init+0x58>)
 8008d72:	480e      	ldr	r0, [pc, #56]	; (8008dac <MX_USB_DEVICE_Init+0x54>)
 8008d74:	f7fe fd2e 	bl	80077d4 <USBD_RegisterClass>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d7e:	f7f7 fe9d 	bl	8000abc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d82:	490c      	ldr	r1, [pc, #48]	; (8008db4 <MX_USB_DEVICE_Init+0x5c>)
 8008d84:	4809      	ldr	r0, [pc, #36]	; (8008dac <MX_USB_DEVICE_Init+0x54>)
 8008d86:	f7fe fc65 	bl	8007654 <USBD_CDC_RegisterInterface>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d90:	f7f7 fe94 	bl	8000abc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d94:	4805      	ldr	r0, [pc, #20]	; (8008dac <MX_USB_DEVICE_Init+0x54>)
 8008d96:	f7fe fd53 	bl	8007840 <USBD_Start>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008da0:	f7f7 fe8c 	bl	8000abc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008da4:	bf00      	nop
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	200000ac 	.word	0x200000ac
 8008dac:	200006c4 	.word	0x200006c4
 8008db0:	20000018 	.word	0x20000018
 8008db4:	20000098 	.word	0x20000098

08008db8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4905      	ldr	r1, [pc, #20]	; (8008dd4 <CDC_Init_FS+0x1c>)
 8008dc0:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <CDC_Init_FS+0x20>)
 8008dc2:	f7fe fc61 	bl	8007688 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dc6:	4905      	ldr	r1, [pc, #20]	; (8008ddc <CDC_Init_FS+0x24>)
 8008dc8:	4803      	ldr	r0, [pc, #12]	; (8008dd8 <CDC_Init_FS+0x20>)
 8008dca:	f7fe fc7f 	bl	80076cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	200011a0 	.word	0x200011a0
 8008dd8:	200006c4 	.word	0x200006c4
 8008ddc:	200009a0 	.word	0x200009a0

08008de0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008de0:	b480      	push	{r7}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008de4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b23      	cmp	r3, #35	; 0x23
 8008e04:	d84a      	bhi.n	8008e9c <CDC_Control_FS+0xac>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <CDC_Control_FS+0x1c>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e9d 	.word	0x08008e9d
 8008e10:	08008e9d 	.word	0x08008e9d
 8008e14:	08008e9d 	.word	0x08008e9d
 8008e18:	08008e9d 	.word	0x08008e9d
 8008e1c:	08008e9d 	.word	0x08008e9d
 8008e20:	08008e9d 	.word	0x08008e9d
 8008e24:	08008e9d 	.word	0x08008e9d
 8008e28:	08008e9d 	.word	0x08008e9d
 8008e2c:	08008e9d 	.word	0x08008e9d
 8008e30:	08008e9d 	.word	0x08008e9d
 8008e34:	08008e9d 	.word	0x08008e9d
 8008e38:	08008e9d 	.word	0x08008e9d
 8008e3c:	08008e9d 	.word	0x08008e9d
 8008e40:	08008e9d 	.word	0x08008e9d
 8008e44:	08008e9d 	.word	0x08008e9d
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008e9d 	.word	0x08008e9d
 8008e50:	08008e9d 	.word	0x08008e9d
 8008e54:	08008e9d 	.word	0x08008e9d
 8008e58:	08008e9d 	.word	0x08008e9d
 8008e5c:	08008e9d 	.word	0x08008e9d
 8008e60:	08008e9d 	.word	0x08008e9d
 8008e64:	08008e9d 	.word	0x08008e9d
 8008e68:	08008e9d 	.word	0x08008e9d
 8008e6c:	08008e9d 	.word	0x08008e9d
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	08008e9d 	.word	0x08008e9d
 8008e78:	08008e9d 	.word	0x08008e9d
 8008e7c:	08008e9d 	.word	0x08008e9d
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008e9d 	.word	0x08008e9d
 8008e88:	08008e9d 	.word	0x08008e9d
 8008e8c:	08008e9d 	.word	0x08008e9d
 8008e90:	08008e9d 	.word	0x08008e9d
 8008e94:	08008e9d 	.word	0x08008e9d
 8008e98:	08008e9d 	.word	0x08008e9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e9c:	bf00      	nop
  }

  return (USBD_OK);
 8008e9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <CDC_Receive_FS+0x24>)
 8008eba:	f7fe fc07 	bl	80076cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ebe:	4804      	ldr	r0, [pc, #16]	; (8008ed0 <CDC_Receive_FS+0x24>)
 8008ec0:	f7fe fc22 	bl	8007708 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ec4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	200006c4 	.word	0x200006c4

08008ed4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
	...

08008ef8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2212      	movs	r2, #18
 8008f08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f0a:	4b03      	ldr	r3, [pc, #12]	; (8008f18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	200000c8 	.word	0x200000c8

08008f1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	6039      	str	r1, [r7, #0]
 8008f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f2e:	4b03      	ldr	r3, [pc, #12]	; (8008f3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	200000dc 	.word	0x200000dc

08008f40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d105      	bne.n	8008f5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4907      	ldr	r1, [pc, #28]	; (8008f74 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f56:	4808      	ldr	r0, [pc, #32]	; (8008f78 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f58:	f7ff fe1e 	bl	8008b98 <USBD_GetString>
 8008f5c:	e004      	b.n	8008f68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	4904      	ldr	r1, [pc, #16]	; (8008f74 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f62:	4805      	ldr	r0, [pc, #20]	; (8008f78 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f64:	f7ff fe18 	bl	8008b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f68:	4b02      	ldr	r3, [pc, #8]	; (8008f74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	200019a0 	.word	0x200019a0
 8008f78:	080097b8 	.word	0x080097b8

08008f7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	4904      	ldr	r1, [pc, #16]	; (8008f9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f8c:	4804      	ldr	r0, [pc, #16]	; (8008fa0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f8e:	f7ff fe03 	bl	8008b98 <USBD_GetString>
  return USBD_StrDesc;
 8008f92:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	200019a0 	.word	0x200019a0
 8008fa0:	080097c4 	.word	0x080097c4

08008fa4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	6039      	str	r1, [r7, #0]
 8008fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	221a      	movs	r2, #26
 8008fb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fb6:	f000 f843 	bl	8009040 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fba:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	200000e0 	.word	0x200000e0

08008fc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d105      	bne.n	8008fe6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	4907      	ldr	r1, [pc, #28]	; (8008ffc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fde:	4808      	ldr	r0, [pc, #32]	; (8009000 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fe0:	f7ff fdda 	bl	8008b98 <USBD_GetString>
 8008fe4:	e004      	b.n	8008ff0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4904      	ldr	r1, [pc, #16]	; (8008ffc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fea:	4805      	ldr	r0, [pc, #20]	; (8009000 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fec:	f7ff fdd4 	bl	8008b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ff0:	4b02      	ldr	r3, [pc, #8]	; (8008ffc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	200019a0 	.word	0x200019a0
 8009000:	080097d8 	.word	0x080097d8

08009004 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	6039      	str	r1, [r7, #0]
 800900e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d105      	bne.n	8009022 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	4907      	ldr	r1, [pc, #28]	; (8009038 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800901a:	4808      	ldr	r0, [pc, #32]	; (800903c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800901c:	f7ff fdbc 	bl	8008b98 <USBD_GetString>
 8009020:	e004      	b.n	800902c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	4904      	ldr	r1, [pc, #16]	; (8009038 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009026:	4805      	ldr	r0, [pc, #20]	; (800903c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009028:	f7ff fdb6 	bl	8008b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800902c:	4b02      	ldr	r3, [pc, #8]	; (8009038 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	200019a0 	.word	0x200019a0
 800903c:	080097e4 	.word	0x080097e4

08009040 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009046:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <Get_SerialNum+0x44>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800904c:	4b0e      	ldr	r3, [pc, #56]	; (8009088 <Get_SerialNum+0x48>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009052:	4b0e      	ldr	r3, [pc, #56]	; (800908c <Get_SerialNum+0x4c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009066:	2208      	movs	r2, #8
 8009068:	4909      	ldr	r1, [pc, #36]	; (8009090 <Get_SerialNum+0x50>)
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f814 	bl	8009098 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009070:	2204      	movs	r2, #4
 8009072:	4908      	ldr	r1, [pc, #32]	; (8009094 <Get_SerialNum+0x54>)
 8009074:	68b8      	ldr	r0, [r7, #8]
 8009076:	f000 f80f 	bl	8009098 <IntToUnicode>
  }
}
 800907a:	bf00      	nop
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	1fff7a10 	.word	0x1fff7a10
 8009088:	1fff7a14 	.word	0x1fff7a14
 800908c:	1fff7a18 	.word	0x1fff7a18
 8009090:	200000e2 	.word	0x200000e2
 8009094:	200000f2 	.word	0x200000f2

08009098 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]
 80090ae:	e027      	b.n	8009100 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	0f1b      	lsrs	r3, r3, #28
 80090b4:	2b09      	cmp	r3, #9
 80090b6:	d80b      	bhi.n	80090d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	0f1b      	lsrs	r3, r3, #28
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	4619      	mov	r1, r3
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	440b      	add	r3, r1
 80090c8:	3230      	adds	r2, #48	; 0x30
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e00a      	b.n	80090e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	0f1b      	lsrs	r3, r3, #28
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	005b      	lsls	r3, r3, #1
 80090da:	4619      	mov	r1, r3
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	440b      	add	r3, r1
 80090e0:	3237      	adds	r2, #55	; 0x37
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090ec:	7dfb      	ldrb	r3, [r7, #23]
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	3301      	adds	r3, #1
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	4413      	add	r3, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
 80090fc:	3301      	adds	r3, #1
 80090fe:	75fb      	strb	r3, [r7, #23]
 8009100:	7dfa      	ldrb	r2, [r7, #23]
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	429a      	cmp	r2, r3
 8009106:	d3d3      	bcc.n	80090b0 <IntToUnicode+0x18>
  }
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
	...

08009118 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08a      	sub	sp, #40	; 0x28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009120:	f107 0314 	add.w	r3, r7, #20
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	605a      	str	r2, [r3, #4]
 800912a:	609a      	str	r2, [r3, #8]
 800912c:	60da      	str	r2, [r3, #12]
 800912e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009138:	d13a      	bne.n	80091b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800913a:	2300      	movs	r3, #0
 800913c:	613b      	str	r3, [r7, #16]
 800913e:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <HAL_PCD_MspInit+0xa0>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009142:	4a1d      	ldr	r2, [pc, #116]	; (80091b8 <HAL_PCD_MspInit+0xa0>)
 8009144:	f043 0301 	orr.w	r3, r3, #1
 8009148:	6313      	str	r3, [r2, #48]	; 0x30
 800914a:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <HAL_PCD_MspInit+0xa0>)
 800914c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009156:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800915a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800915c:	2302      	movs	r3, #2
 800915e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009160:	2300      	movs	r3, #0
 8009162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009164:	2303      	movs	r3, #3
 8009166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009168:	230a      	movs	r3, #10
 800916a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800916c:	f107 0314 	add.w	r3, r7, #20
 8009170:	4619      	mov	r1, r3
 8009172:	4812      	ldr	r0, [pc, #72]	; (80091bc <HAL_PCD_MspInit+0xa4>)
 8009174:	f7f8 fc34 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009178:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <HAL_PCD_MspInit+0xa0>)
 800917a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917c:	4a0e      	ldr	r2, [pc, #56]	; (80091b8 <HAL_PCD_MspInit+0xa0>)
 800917e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009182:	6353      	str	r3, [r2, #52]	; 0x34
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <HAL_PCD_MspInit+0xa0>)
 800918a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800918c:	4a0a      	ldr	r2, [pc, #40]	; (80091b8 <HAL_PCD_MspInit+0xa0>)
 800918e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009192:	6453      	str	r3, [r2, #68]	; 0x44
 8009194:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <HAL_PCD_MspInit+0xa0>)
 8009196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091a0:	2200      	movs	r2, #0
 80091a2:	2100      	movs	r1, #0
 80091a4:	2043      	movs	r0, #67	; 0x43
 80091a6:	f7f7 ffe2 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091aa:	2043      	movs	r0, #67	; 0x43
 80091ac:	f7f7 fffb 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091b0:	bf00      	nop
 80091b2:	3728      	adds	r7, #40	; 0x28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	40023800 	.word	0x40023800
 80091bc:	40020000 	.word	0x40020000

080091c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	f7fe fb7f 	bl	80078da <USBD_LL_SetupStage>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	4613      	mov	r3, r2
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	440b      	add	r3, r1
 8009204:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	4619      	mov	r1, r3
 800920e:	f7fe fbb9 	bl	8007984 <USBD_LL_DataOutStage>
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4613      	mov	r3, r2
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	4413      	add	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	440b      	add	r3, r1
 800923a:	334c      	adds	r3, #76	; 0x4c
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	4619      	mov	r1, r3
 8009242:	f7fe fc52 	bl	8007aea <USBD_LL_DataInStage>
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe fd86 	bl	8007d6e <USBD_LL_SOF>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009272:	2301      	movs	r3, #1
 8009274:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	2b02      	cmp	r3, #2
 800927c:	d001      	beq.n	8009282 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800927e:	f7f7 fc1d 	bl	8000abc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009288:	7bfa      	ldrb	r2, [r7, #15]
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fd30 	bl	8007cf2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe fcd8 	bl	8007c4e <USBD_LL_Reset>
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fd2b 	bl	8007d12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a1b      	ldr	r3, [r3, #32]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092dc:	4b04      	ldr	r3, [pc, #16]	; (80092f0 <HAL_PCD_SuspendCallback+0x48>)
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	4a03      	ldr	r2, [pc, #12]	; (80092f0 <HAL_PCD_SuspendCallback+0x48>)
 80092e2:	f043 0306 	orr.w	r3, r3, #6
 80092e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	e000ed00 	.word	0xe000ed00

080092f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe fd1b 	bl	8007d3e <USBD_LL_Resume>
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	4611      	mov	r1, r2
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe fd73 	bl	8007e12 <USBD_LL_IsoOUTIncomplete>
}
 800932c:	bf00      	nop
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009346:	78fa      	ldrb	r2, [r7, #3]
 8009348:	4611      	mov	r1, r2
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fd2f 	bl	8007dae <USBD_LL_IsoINIncomplete>
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fd85 	bl	8007e76 <USBD_LL_DevConnected>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fd82 	bl	8007e8c <USBD_LL_DevDisconnected>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d13c      	bne.n	800941a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093a0:	4a20      	ldr	r2, [pc, #128]	; (8009424 <USBD_LL_Init+0x94>)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a1e      	ldr	r2, [pc, #120]	; (8009424 <USBD_LL_Init+0x94>)
 80093ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093b0:	4b1c      	ldr	r3, [pc, #112]	; (8009424 <USBD_LL_Init+0x94>)
 80093b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093b8:	4b1a      	ldr	r3, [pc, #104]	; (8009424 <USBD_LL_Init+0x94>)
 80093ba:	2204      	movs	r2, #4
 80093bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093be:	4b19      	ldr	r3, [pc, #100]	; (8009424 <USBD_LL_Init+0x94>)
 80093c0:	2202      	movs	r2, #2
 80093c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093c4:	4b17      	ldr	r3, [pc, #92]	; (8009424 <USBD_LL_Init+0x94>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093ca:	4b16      	ldr	r3, [pc, #88]	; (8009424 <USBD_LL_Init+0x94>)
 80093cc:	2202      	movs	r2, #2
 80093ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093d0:	4b14      	ldr	r3, [pc, #80]	; (8009424 <USBD_LL_Init+0x94>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093d6:	4b13      	ldr	r3, [pc, #76]	; (8009424 <USBD_LL_Init+0x94>)
 80093d8:	2200      	movs	r2, #0
 80093da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093dc:	4b11      	ldr	r3, [pc, #68]	; (8009424 <USBD_LL_Init+0x94>)
 80093de:	2200      	movs	r2, #0
 80093e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <USBD_LL_Init+0x94>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80093e8:	4b0e      	ldr	r3, [pc, #56]	; (8009424 <USBD_LL_Init+0x94>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80093ee:	480d      	ldr	r0, [pc, #52]	; (8009424 <USBD_LL_Init+0x94>)
 80093f0:	f7f8 fc93 	bl	8001d1a <HAL_PCD_Init>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80093fa:	f7f7 fb5f 	bl	8000abc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80093fe:	2180      	movs	r1, #128	; 0x80
 8009400:	4808      	ldr	r0, [pc, #32]	; (8009424 <USBD_LL_Init+0x94>)
 8009402:	f7f9 feea 	bl	80031da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009406:	2240      	movs	r2, #64	; 0x40
 8009408:	2100      	movs	r1, #0
 800940a:	4806      	ldr	r0, [pc, #24]	; (8009424 <USBD_LL_Init+0x94>)
 800940c:	f7f9 fe9e 	bl	800314c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009410:	2280      	movs	r2, #128	; 0x80
 8009412:	2101      	movs	r1, #1
 8009414:	4803      	ldr	r0, [pc, #12]	; (8009424 <USBD_LL_Init+0x94>)
 8009416:	f7f9 fe99 	bl	800314c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20001ba0 	.word	0x20001ba0

08009428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800943e:	4618      	mov	r0, r3
 8009440:	f7f8 fd88 	bl	8001f54 <HAL_PCD_Start>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 f942 	bl	80096d4 <USBD_Get_USB_Status>
 8009450:	4603      	mov	r3, r0
 8009452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009454:	7bbb      	ldrb	r3, [r7, #14]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	4608      	mov	r0, r1
 8009468:	4611      	mov	r1, r2
 800946a:	461a      	mov	r2, r3
 800946c:	4603      	mov	r3, r0
 800946e:	70fb      	strb	r3, [r7, #3]
 8009470:	460b      	mov	r3, r1
 8009472:	70bb      	strb	r3, [r7, #2]
 8009474:	4613      	mov	r3, r2
 8009476:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009486:	78bb      	ldrb	r3, [r7, #2]
 8009488:	883a      	ldrh	r2, [r7, #0]
 800948a:	78f9      	ldrb	r1, [r7, #3]
 800948c:	f7f9 fa59 	bl	8002942 <HAL_PCD_EP_Open>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f91c 	bl	80096d4 <USBD_Get_USB_Status>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f9 faa2 	bl	8002a12 <HAL_PCD_EP_Close>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f8fd 	bl	80096d4 <USBD_Get_USB_Status>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094de:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009502:	78fa      	ldrb	r2, [r7, #3]
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f7f9 fb7a 	bl	8002c00 <HAL_PCD_EP_SetStall>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f8de 	bl	80096d4 <USBD_Get_USB_Status>
 8009518:	4603      	mov	r3, r0
 800951a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800951c:	7bbb      	ldrb	r3, [r7, #14]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	4611      	mov	r1, r2
 8009544:	4618      	mov	r0, r3
 8009546:	f7f9 fbbf 	bl	8002cc8 <HAL_PCD_EP_ClrStall>
 800954a:	4603      	mov	r3, r0
 800954c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	4618      	mov	r0, r3
 8009552:	f000 f8bf 	bl	80096d4 <USBD_Get_USB_Status>
 8009556:	4603      	mov	r3, r0
 8009558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955a:	7bbb      	ldrb	r3, [r7, #14]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800957c:	2b00      	cmp	r3, #0
 800957e:	da0b      	bge.n	8009598 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009586:	68f9      	ldr	r1, [r7, #12]
 8009588:	4613      	mov	r3, r2
 800958a:	00db      	lsls	r3, r3, #3
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	333e      	adds	r3, #62	; 0x3e
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	e00b      	b.n	80095b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	4613      	mov	r3, r2
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	440b      	add	r3, r1
 80095aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80095ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7f9 f98c 	bl	80028f8 <HAL_PCD_SetAddress>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 f874 	bl	80096d4 <USBD_Get_USB_Status>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b086      	sub	sp, #24
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	603b      	str	r3, [r7, #0]
 8009606:	460b      	mov	r3, r1
 8009608:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009618:	7af9      	ldrb	r1, [r7, #11]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	f7f9 faa5 	bl	8002b6c <HAL_PCD_EP_Transmit>
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	4618      	mov	r0, r3
 800962a:	f000 f853 	bl	80096d4 <USBD_Get_USB_Status>
 800962e:	4603      	mov	r3, r0
 8009630:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009632:	7dbb      	ldrb	r3, [r7, #22]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3718      	adds	r7, #24
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	607a      	str	r2, [r7, #4]
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	460b      	mov	r3, r1
 800964a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800965a:	7af9      	ldrb	r1, [r7, #11]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	f7f9 fa21 	bl	8002aa6 <HAL_PCD_EP_Receive>
 8009664:	4603      	mov	r3, r0
 8009666:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	4618      	mov	r0, r3
 800966c:	f000 f832 	bl	80096d4 <USBD_Get_USB_Status>
 8009670:	4603      	mov	r3, r0
 8009672:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009674:	7dbb      	ldrb	r3, [r7, #22]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	4611      	mov	r1, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f7f9 fa51 	bl	8002b3c <HAL_PCD_EP_GetRxCount>
 800969a:	4603      	mov	r3, r0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096ac:	4b03      	ldr	r3, [pc, #12]	; (80096bc <USBD_static_malloc+0x18>)
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	200020ac 	.word	0x200020ac

080096c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]

}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	d817      	bhi.n	8009718 <USBD_Get_USB_Status+0x44>
 80096e8:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <USBD_Get_USB_Status+0x1c>)
 80096ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ee:	bf00      	nop
 80096f0:	08009701 	.word	0x08009701
 80096f4:	08009707 	.word	0x08009707
 80096f8:	0800970d 	.word	0x0800970d
 80096fc:	08009713 	.word	0x08009713
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]
    break;
 8009704:	e00b      	b.n	800971e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009706:	2303      	movs	r3, #3
 8009708:	73fb      	strb	r3, [r7, #15]
    break;
 800970a:	e008      	b.n	800971e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800970c:	2301      	movs	r3, #1
 800970e:	73fb      	strb	r3, [r7, #15]
    break;
 8009710:	e005      	b.n	800971e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009712:	2303      	movs	r3, #3
 8009714:	73fb      	strb	r3, [r7, #15]
    break;
 8009716:	e002      	b.n	800971e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009718:	2303      	movs	r3, #3
 800971a:	73fb      	strb	r3, [r7, #15]
    break;
 800971c:	bf00      	nop
  }
  return usb_status;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <__libc_init_array>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	4d0d      	ldr	r5, [pc, #52]	; (8009764 <__libc_init_array+0x38>)
 8009730:	4c0d      	ldr	r4, [pc, #52]	; (8009768 <__libc_init_array+0x3c>)
 8009732:	1b64      	subs	r4, r4, r5
 8009734:	10a4      	asrs	r4, r4, #2
 8009736:	2600      	movs	r6, #0
 8009738:	42a6      	cmp	r6, r4
 800973a:	d109      	bne.n	8009750 <__libc_init_array+0x24>
 800973c:	4d0b      	ldr	r5, [pc, #44]	; (800976c <__libc_init_array+0x40>)
 800973e:	4c0c      	ldr	r4, [pc, #48]	; (8009770 <__libc_init_array+0x44>)
 8009740:	f000 f82e 	bl	80097a0 <_init>
 8009744:	1b64      	subs	r4, r4, r5
 8009746:	10a4      	asrs	r4, r4, #2
 8009748:	2600      	movs	r6, #0
 800974a:	42a6      	cmp	r6, r4
 800974c:	d105      	bne.n	800975a <__libc_init_array+0x2e>
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	f855 3b04 	ldr.w	r3, [r5], #4
 8009754:	4798      	blx	r3
 8009756:	3601      	adds	r6, #1
 8009758:	e7ee      	b.n	8009738 <__libc_init_array+0xc>
 800975a:	f855 3b04 	ldr.w	r3, [r5], #4
 800975e:	4798      	blx	r3
 8009760:	3601      	adds	r6, #1
 8009762:	e7f2      	b.n	800974a <__libc_init_array+0x1e>
 8009764:	0800981c 	.word	0x0800981c
 8009768:	0800981c 	.word	0x0800981c
 800976c:	0800981c 	.word	0x0800981c
 8009770:	08009820 	.word	0x08009820

08009774 <memcpy>:
 8009774:	440a      	add	r2, r1
 8009776:	4291      	cmp	r1, r2
 8009778:	f100 33ff 	add.w	r3, r0, #4294967295
 800977c:	d100      	bne.n	8009780 <memcpy+0xc>
 800977e:	4770      	bx	lr
 8009780:	b510      	push	{r4, lr}
 8009782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800978a:	4291      	cmp	r1, r2
 800978c:	d1f9      	bne.n	8009782 <memcpy+0xe>
 800978e:	bd10      	pop	{r4, pc}

08009790 <memset>:
 8009790:	4402      	add	r2, r0
 8009792:	4603      	mov	r3, r0
 8009794:	4293      	cmp	r3, r2
 8009796:	d100      	bne.n	800979a <memset+0xa>
 8009798:	4770      	bx	lr
 800979a:	f803 1b01 	strb.w	r1, [r3], #1
 800979e:	e7f9      	b.n	8009794 <memset+0x4>

080097a0 <_init>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr

080097ac <_fini>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr
