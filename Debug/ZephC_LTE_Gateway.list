
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800a678  0800a678  0001a678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e0  0800a7e0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e0  0800a7e0  0001a7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7e8  0800a7e8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000225c  20000160  0800a950  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023bc  0800a950  000223bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180fd  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003672  00000000  00000000  0003828d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005732  00000000  00000000  0003df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018442  00000000  00000000  0004367a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009268a  00000000  00000000  0005babc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005700  00000000  00000000  000ee198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a660 	.word	0x0800a660

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800a660 	.word	0x0800a660

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  sysValinit();
 8000598:	f000 f88a 	bl	80006b0 <sysValinit>

  HAL_Init();
 800059c:	f000 fdea 	bl	8001174 <HAL_Init>
  SystemClock_Config();
 80005a0:	f000 fa2c 	bl	80009fc <SystemClock_Config>
  MX_GPIO_Init();
 80005a4:	f000 fb6a 	bl	8000c7c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 fb32 	bl	8000c10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 fadc 	bl	8000b68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 fb04 	bl	8000bbc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f008 fea4 	bl	8009300 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80005b8:	f000 fa88 	bl	8000acc <MX_TIM4_Init>



  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 80005bc:	4830      	ldr	r0, [pc, #192]	; (8000680 <main+0xec>)
 80005be:	f003 fc5f 	bl	8003e80 <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 80005c2:	22ff      	movs	r2, #255	; 0xff
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <main+0xf0>)
 80005c6:	4830      	ldr	r0, [pc, #192]	; (8000688 <main+0xf4>)
 80005c8:	f004 f92f 	bl	800482a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <main+0xf8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <main+0xf8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f022 0208 	bic.w	r2, r2, #8
 80005da:	601a      	str	r2, [r3, #0]

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 80005dc:	22ff      	movs	r2, #255	; 0xff
 80005de:	492c      	ldr	r1, [pc, #176]	; (8000690 <main+0xfc>)
 80005e0:	482c      	ldr	r0, [pc, #176]	; (8000694 <main+0x100>)
 80005e2:	f004 f922 	bl	800482a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <main+0x104>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <main+0x104>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f022 0208 	bic.w	r2, r2, #8
 80005f4:	601a      	str	r2, [r3, #0]
  /*
   *			MAIN CODE
   * */

  // Wait LTE module boot
  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);			// BUSY 1
 80005f6:	2201      	movs	r2, #1
 80005f8:	2120      	movs	r1, #32
 80005fa:	4828      	ldr	r0, [pc, #160]	; (800069c <main+0x108>)
 80005fc:	f001 fce8 	bl	8001fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ONLINE, GPIO_PIN_RESET);		// ONLINE 0
 8000600:	2200      	movs	r2, #0
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	4825      	ldr	r0, [pc, #148]	; (800069c <main+0x108>)
 8000606:	f001 fce3 	bl	8001fd0 <HAL_GPIO_WritePin>
  while(sysCounter.main_ms_counter < 500);				// Wait MCU boot
 800060a:	bf00      	nop
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <main+0x10c>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000614:	d3fa      	bcc.n	800060c <main+0x78>
  SerialDebug("[MCU] -> Wait system boot 30sec.\r\n");
 8000616:	4823      	ldr	r0, [pc, #140]	; (80006a4 <main+0x110>)
 8000618:	f000 f868 	bl	80006ec <SerialDebug>

  while(sysCounter.main_ms_counter < LTEbootTime);		// Wait LTE module boot
 800061c:	bf00      	nop
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <main+0x10c>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	f247 522f 	movw	r2, #29999	; 0x752f
 8000626:	4293      	cmp	r3, r2
 8000628:	d9f9      	bls.n	800061e <main+0x8a>
  initLTE();											// Start init LTE module
 800062a:	f000 f905 	bl	8000838 <initLTE>


  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);		// BUSY 0
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	481a      	ldr	r0, [pc, #104]	; (800069c <main+0x108>)
 8000634:	f001 fccc 	bl	8001fd0 <HAL_GPIO_WritePin>
  SerialDebug("[MCU] -> System init done\r\n");
 8000638:	481b      	ldr	r0, [pc, #108]	; (80006a8 <main+0x114>)
 800063a:	f000 f857 	bl	80006ec <SerialDebug>

  while(1) {
	  //code
	  // if LTE ERROR
	  while(sysFlag.LTE_ERROR == 1) {
 800063e:	e019      	b.n	8000674 <main+0xe0>
		  if(sysCounter.main_ms_counter == 0) {
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <main+0x10c>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10c      	bne.n	8000662 <main+0xce>
			  sysCounter.prev_ERRORtime = 0;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <main+0x10c>)
 800064a:	2200      	movs	r2, #0
 800064c:	809a      	strh	r2, [r3, #4]
		  }

		  while((sysCounter.main_ms_counter - sysCounter.prev_ERRORtime) >= 500) {
 800064e:	e008      	b.n	8000662 <main+0xce>
			  HAL_GPIO_TogglePin(GPIOB, ERROR);
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4811      	ldr	r0, [pc, #68]	; (800069c <main+0x108>)
 8000656:	f001 fcd4 	bl	8002002 <HAL_GPIO_TogglePin>
			  sysCounter.prev_ERRORtime = sysCounter.main_ms_counter;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <main+0x10c>)
 800065c:	881a      	ldrh	r2, [r3, #0]
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <main+0x10c>)
 8000660:	809a      	strh	r2, [r3, #4]
		  while((sysCounter.main_ms_counter - sysCounter.prev_ERRORtime) >= 500) {
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <main+0x10c>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <main+0x10c>)
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000672:	daed      	bge.n	8000650 <main+0xbc>
	  while(sysFlag.LTE_ERROR == 1) {
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <main+0x118>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d0e1      	beq.n	8000640 <main+0xac>
 800067c:	e7fa      	b.n	8000674 <main+0xe0>
 800067e:	bf00      	nop
 8000680:	200005fc 	.word	0x200005fc
 8000684:	200002fc 	.word	0x200002fc
 8000688:	20000688 	.word	0x20000688
 800068c:	2000072c 	.word	0x2000072c
 8000690:	200001fc 	.word	0x200001fc
 8000694:	20000644 	.word	0x20000644
 8000698:	200006cc 	.word	0x200006cc
 800069c:	40020400 	.word	0x40020400
 80006a0:	2000078c 	.word	0x2000078c
 80006a4:	0800a678 	.word	0x0800a678
 80006a8:	0800a69c 	.word	0x0800a69c
 80006ac:	20000794 	.word	0x20000794

080006b0 <sysValinit>:


// user custom functions

// init startup value at boot
void sysValinit(void) {
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <sysValinit+0x34>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	801a      	strh	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <sysValinit+0x34>)
 80006bc:	2200      	movs	r2, #0
 80006be:	805a      	strh	r2, [r3, #2]
	sysCounter.prev_ERRORtime = 0;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <sysValinit+0x34>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	809a      	strh	r2, [r3, #4]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <sysValinit+0x34>)
 80006c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006cc:	80da      	strh	r2, [r3, #6]

	sysFlag.LTE_CMD_Send = 0;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <sysValinit+0x38>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_ERROR = 0;
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <sysValinit+0x38>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	705a      	strb	r2, [r3, #1]
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	2000078c 	.word	0x2000078c
 80006e8:	20000794 	.word	0x20000794

080006ec <SerialDebug>:


// Send text via USB VCOM port
void SerialDebug(char *msgDebug) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	while(CDC_Transmit_FS((uint8_t *) msgDebug, strlen(msgDebug)) != USBD_OK);
 80006f4:	bf00      	nop
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff fd72 	bl	80001e0 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29b      	uxth	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f008 feba 	bl	800947c <CDC_Transmit_FS>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f3      	bne.n	80006f6 <SerialDebug+0xa>
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SendCMD_LTE>:
// UART Tx [Polling method]
void SendData(char *msg) {
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 10);
}

void SendCMD_LTE(char *msg) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 10);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff fd5d 	bl	80001e0 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	230a      	movs	r3, #10
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <SendCMD_LTE+0x24>)
 8000730:	f003 ffe9 	bl	8004706 <HAL_UART_Transmit>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000688 	.word	0x20000688

08000740 <HAL_UARTEx_RxEventCallback>:


// UART Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a22      	ldr	r2, [pc, #136]	; (80007dc <HAL_UARTEx_RxEventCallback+0x9c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d11c      	bne.n	8000790 <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8000756:	22ff      	movs	r2, #255	; 0xff
 8000758:	4921      	ldr	r1, [pc, #132]	; (80007e0 <HAL_UARTEx_RxEventCallback+0xa0>)
 800075a:	4822      	ldr	r0, [pc, #136]	; (80007e4 <HAL_UARTEx_RxEventCallback+0xa4>)
 800075c:	f004 f865 	bl	800482a <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	2100      	movs	r1, #0
 8000764:	4820      	ldr	r0, [pc, #128]	; (80007e8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000766:	f009 fb13 	bl	8009d90 <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	461a      	mov	r2, r3
 800076e:	491c      	ldr	r1, [pc, #112]	; (80007e0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000770:	481d      	ldr	r0, [pc, #116]	; (80007e8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000772:	f009 faff 	bl	8009d74 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 8000776:	22ff      	movs	r2, #255	; 0xff
 8000778:	2100      	movs	r1, #0
 800077a:	4819      	ldr	r0, [pc, #100]	; (80007e0 <HAL_UARTEx_RxEventCallback+0xa0>)
 800077c:	f009 fb08 	bl	8009d90 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <HAL_UARTEx_RxEventCallback+0xac>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_UARTEx_RxEventCallback+0xac>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0208 	bic.w	r2, r2, #8
 800078e:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d11c      	bne.n	80007d4 <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 800079a:	22ff      	movs	r2, #255	; 0xff
 800079c:	4915      	ldr	r1, [pc, #84]	; (80007f4 <HAL_UARTEx_RxEventCallback+0xb4>)
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <HAL_UARTEx_RxEventCallback+0xb8>)
 80007a0:	f004 f843 	bl	800482a <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	2100      	movs	r1, #0
 80007a8:	4814      	ldr	r0, [pc, #80]	; (80007fc <HAL_UARTEx_RxEventCallback+0xbc>)
 80007aa:	f009 faf1 	bl	8009d90 <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 80007ae:	887b      	ldrh	r3, [r7, #2]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4910      	ldr	r1, [pc, #64]	; (80007f4 <HAL_UARTEx_RxEventCallback+0xb4>)
 80007b4:	4811      	ldr	r0, [pc, #68]	; (80007fc <HAL_UARTEx_RxEventCallback+0xbc>)
 80007b6:	f009 fadd 	bl	8009d74 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 80007ba:	22ff      	movs	r2, #255	; 0xff
 80007bc:	2100      	movs	r1, #0
 80007be:	480d      	ldr	r0, [pc, #52]	; (80007f4 <HAL_UARTEx_RxEventCallback+0xb4>)
 80007c0:	f009 fae6 	bl	8009d90 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_UARTEx_RxEventCallback+0xc0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_UARTEx_RxEventCallback+0xc0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 0208 	bic.w	r2, r2, #8
 80007d2:	601a      	str	r2, [r3, #0]
	}
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40004400 	.word	0x40004400
 80007e0:	200002fc 	.word	0x200002fc
 80007e4:	20000688 	.word	0x20000688
 80007e8:	200004fc 	.word	0x200004fc
 80007ec:	2000072c 	.word	0x2000072c
 80007f0:	40011000 	.word	0x40011000
 80007f4:	200001fc 	.word	0x200001fc
 80007f8:	20000644 	.word	0x20000644
 80007fc:	200003fc 	.word	0x200003fc
 8000800:	200006cc 	.word	0x200006cc

08000804 <HAL_TIM_PeriodElapsedCallback>:


// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d105      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x1e>
		sysCounter.main_ms_counter++;
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000820:	801a      	strh	r2, [r3, #0]
	}
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40000800 	.word	0x40000800
 8000834:	2000078c 	.word	0x2000078c

08000838 <initLTE>:


// EC25 functions

// init sequence
void initLTE(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	SerialDebug("[MCU] -> start initialize LTE module\r\n");
 800083e:	4844      	ldr	r0, [pc, #272]	; (8000950 <initLTE+0x118>)
 8000840:	f7ff ff54 	bl	80006ec <SerialDebug>

	for(unsigned char countSeq = 0; countSeq < 8; countSeq++) {
 8000844:	2300      	movs	r3, #0
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	e07a      	b.n	8000940 <initLTE+0x108>
//				break;
//
//		}

		// TEST
		switch(countSeq) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d010      	beq.n	8000872 <initLTE+0x3a>
 8000850:	2b02      	cmp	r3, #2
 8000852:	dc13      	bgt.n	800087c <initLTE+0x44>
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <initLTE+0x26>
 8000858:	2b01      	cmp	r3, #1
 800085a:	d005      	beq.n	8000868 <initLTE+0x30>
 800085c:	e00e      	b.n	800087c <initLTE+0x44>
			case 0 :
				sprintf(textBuffer, "OK\r\n");
 800085e:	493d      	ldr	r1, [pc, #244]	; (8000954 <initLTE+0x11c>)
 8000860:	483d      	ldr	r0, [pc, #244]	; (8000958 <initLTE+0x120>)
 8000862:	f009 fa9d 	bl	8009da0 <siprintf>
				break;
 8000866:	e009      	b.n	800087c <initLTE+0x44>

			// Low -> High on DTR: Change to command mode while remaining the connected call
			case 1 :
				sprintf(textBuffer, "ERROR 505\r\n");
 8000868:	493c      	ldr	r1, [pc, #240]	; (800095c <initLTE+0x124>)
 800086a:	483b      	ldr	r0, [pc, #236]	; (8000958 <initLTE+0x120>)
 800086c:	f009 fa98 	bl	8009da0 <siprintf>
				break;
 8000870:	e004      	b.n	800087c <initLTE+0x44>

			// Set frequency band
			case 2 :
				sprintf(textBuffer, "AT+QCFG=\"Band\",511,1\r\n");
 8000872:	493b      	ldr	r1, [pc, #236]	; (8000960 <initLTE+0x128>)
 8000874:	4838      	ldr	r0, [pc, #224]	; (8000958 <initLTE+0x120>)
 8000876:	f009 fa93 	bl	8009da0 <siprintf>
				break;
 800087a:	bf00      	nop
		}


		SendCMD_LTE((char *)textBuffer);						// Send CMD
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <initLTE+0x120>)
 800087e:	f7ff ff4b 	bl	8000718 <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 8000882:	4b38      	ldr	r3, [pc, #224]	; (8000964 <initLTE+0x12c>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <initLTE+0x130>)
 800088a:	881a      	ldrh	r2, [r3, #0]
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <initLTE+0x130>)
 800088e:	805a      	strh	r2, [r3, #2]


		while(sysFlag.LTE_CMD_Send == 1) {
 8000890:	e044      	b.n	800091c <initLTE+0xe4>
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8000892:	4936      	ldr	r1, [pc, #216]	; (800096c <initLTE+0x134>)
 8000894:	4836      	ldr	r0, [pc, #216]	; (8000970 <initLTE+0x138>)
 8000896:	f000 f877 	bl	8000988 <findTarget>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10a      	bne.n	80008b6 <initLTE+0x7e>
				SerialDebug("[LTE] -> OK\r\n");
 80008a0:	4834      	ldr	r0, [pc, #208]	; (8000974 <initLTE+0x13c>)
 80008a2:	f7ff ff23 	bl	80006ec <SerialDebug>

				sysFlag.LTE_CMD_Send = 0;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <initLTE+0x12c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <initLTE+0x130>)
 80008ae:	881a      	ldrh	r2, [r3, #0]
 80008b0:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <initLTE+0x130>)
 80008b2:	805a      	strh	r2, [r3, #2]
				goto CLEARMAINBUFF;
 80008b4:	e037      	b.n	8000926 <initLTE+0xee>
			}

			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80008b6:	4930      	ldr	r1, [pc, #192]	; (8000978 <initLTE+0x140>)
 80008b8:	482d      	ldr	r0, [pc, #180]	; (8000970 <initLTE+0x138>)
 80008ba:	f000 f865 	bl	8000988 <findTarget>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d113      	bne.n	80008ec <initLTE+0xb4>
				SerialDebug("[LTE] -> ");
 80008c4:	482d      	ldr	r0, [pc, #180]	; (800097c <initLTE+0x144>)
 80008c6:	f7ff ff11 	bl	80006ec <SerialDebug>
				SerialDebug((char *)lteComm_MainBuff);
 80008ca:	4829      	ldr	r0, [pc, #164]	; (8000970 <initLTE+0x138>)
 80008cc:	f7ff ff0e 	bl	80006ec <SerialDebug>
				SerialDebug("\r\n");
 80008d0:	482b      	ldr	r0, [pc, #172]	; (8000980 <initLTE+0x148>)
 80008d2:	f7ff ff0b 	bl	80006ec <SerialDebug>

				sysFlag.LTE_ERROR = 1;
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <initLTE+0x12c>)
 80008d8:	2201      	movs	r2, #1
 80008da:	705a      	strb	r2, [r3, #1]
				sysFlag.LTE_CMD_Send = 0;
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <initLTE+0x12c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <initLTE+0x130>)
 80008e4:	881a      	ldrh	r2, [r3, #0]
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <initLTE+0x130>)
 80008e8:	805a      	strh	r2, [r3, #2]
				goto CLEARMAINBUFF;
 80008ea:	e01c      	b.n	8000926 <initLTE+0xee>
			}

			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <initLTE+0x130>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <initLTE+0x130>)
 80008f4:	885b      	ldrh	r3, [r3, #2]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <initLTE+0x130>)
 80008fa:	88d2      	ldrh	r2, [r2, #6]
 80008fc:	4293      	cmp	r3, r2
 80008fe:	db0d      	blt.n	800091c <initLTE+0xe4>
				SerialDebug("[MCU] -> LTE TIME OUT\r\n");
 8000900:	4820      	ldr	r0, [pc, #128]	; (8000984 <initLTE+0x14c>)
 8000902:	f7ff fef3 	bl	80006ec <SerialDebug>

				sysFlag.LTE_ERROR = 1;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <initLTE+0x12c>)
 8000908:	2201      	movs	r2, #1
 800090a:	705a      	strb	r2, [r3, #1]
				sysFlag.LTE_CMD_Send = 0;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <initLTE+0x12c>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <initLTE+0x130>)
 8000914:	881a      	ldrh	r2, [r3, #0]
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <initLTE+0x130>)
 8000918:	805a      	strh	r2, [r3, #2]
				goto CLEARMAINBUFF;
 800091a:	e004      	b.n	8000926 <initLTE+0xee>
		while(sysFlag.LTE_CMD_Send == 1) {
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <initLTE+0x12c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d0b6      	beq.n	8000892 <initLTE+0x5a>
			}


		}

		CLEARMAINBUFF:
 8000924:	bf00      	nop
			memset(textBuffer, 0x00, sizeof(textBuffer));
 8000926:	227d      	movs	r2, #125	; 0x7d
 8000928:	2100      	movs	r1, #0
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <initLTE+0x120>)
 800092c:	f009 fa30 	bl	8009d90 <memset>
			memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8000930:	22ff      	movs	r2, #255	; 0xff
 8000932:	2100      	movs	r1, #0
 8000934:	480e      	ldr	r0, [pc, #56]	; (8000970 <initLTE+0x138>)
 8000936:	f009 fa2b 	bl	8009d90 <memset>
	for(unsigned char countSeq = 0; countSeq < 8; countSeq++) {
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	3301      	adds	r3, #1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b07      	cmp	r3, #7
 8000944:	d981      	bls.n	800084a <initLTE+0x12>
	}
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	0800a6b8 	.word	0x0800a6b8
 8000954:	0800a6e0 	.word	0x0800a6e0
 8000958:	2000017c 	.word	0x2000017c
 800095c:	0800a6e8 	.word	0x0800a6e8
 8000960:	0800a6f4 	.word	0x0800a6f4
 8000964:	20000794 	.word	0x20000794
 8000968:	2000078c 	.word	0x2000078c
 800096c:	0800a70c 	.word	0x0800a70c
 8000970:	200004fc 	.word	0x200004fc
 8000974:	0800a710 	.word	0x0800a710
 8000978:	0800a720 	.word	0x0800a720
 800097c:	0800a728 	.word	0x0800a728
 8000980:	0800a734 	.word	0x0800a734
 8000984:	0800a738 	.word	0x0800a738

08000988 <findTarget>:
/*
 * @brief find string if match it return
 * @retval 0 - Not found
 * @retval 1 - found
 */
int findTarget(const char *inStr, const char *target) {
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
    int i, j;
    for (i = 0; inStr[i] != '\0'; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e023      	b.n	80009e0 <findTarget+0x58>
        j = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 800099c:	e002      	b.n	80009a4 <findTarget+0x1c>
            j++;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	3301      	adds	r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d00c      	beq.n	80009ca <findTarget+0x42>
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	4413      	add	r3, r2
 80009b6:	461a      	mov	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	6839      	ldr	r1, [r7, #0]
 80009c2:	440b      	add	r3, r1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d0e9      	beq.n	800099e <findTarget+0x16>
        }
        if (target[j] == '\0') {
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <findTarget+0x52>
            return 1; // Return 1 if found
 80009d6:	2301      	movs	r3, #1
 80009d8:	e009      	b.n	80009ee <findTarget+0x66>
    for (i = 0; inStr[i] != '\0'; i++) {
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3301      	adds	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1d5      	bne.n	8000998 <findTarget+0x10>
        }
    }
    return 0; // Return 0 if not found
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f009 f9c0 	bl	8009d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <SystemClock_Config+0xc8>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <SystemClock_Config+0xc8>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <SystemClock_Config+0xc8>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a6c:	2319      	movs	r3, #25
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000a70:	2390      	movs	r3, #144	; 0x90
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 0320 	add.w	r3, r7, #32
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fd55 	bl	8003530 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a8c:	f000 f954 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a90:	230f      	movs	r3, #15
 8000a92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a94:	2302      	movs	r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 ffb7 	bl	8003a20 <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ab8:	f000 f93e 	bl	8000d38 <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3750      	adds	r7, #80	; 0x50
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <MX_TIM4_Init+0x98>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000af0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000af4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b10:	f003 f966 	bl	8003de0 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f000 f90d 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b2c:	f003 fb12 	bl	8004154 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f000 f8ff 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_TIM4_Init+0x94>)
 8000b48:	f003 fd0e 	bl	8004568 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b52:	f000 f8f1 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200005fc 	.word	0x200005fc
 8000b64:	40000800 	.word	0x40000800

08000b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <MX_USART1_UART_Init+0x50>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	f003 fd64 	bl	800466c <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f8c5 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000644 	.word	0x20000644
 8000bb8:	40011000 	.word	0x40011000

08000bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <MX_USART2_UART_Init+0x50>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	f003 fd3a 	bl	800466c <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bfe:	f000 f89b 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000688 	.word	0x20000688
 8000c0c:	40004400 	.word	0x40004400

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_DMA_Init+0x68>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <MX_DMA_Init+0x68>)
 8000c20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_DMA_Init+0x68>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_DMA_Init+0x68>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <MX_DMA_Init+0x68>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <MX_DMA_Init+0x68>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2010      	movs	r0, #16
 8000c54:	f000 fbff 	bl	8001456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f000 fc18 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	203a      	movs	r0, #58	; 0x3a
 8000c64:	f000 fbf7 	bl	8001456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c68:	203a      	movs	r0, #58	; 0x3a
 8000c6a:	f000 fc10 	bl	800148e <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_GPIO_Init+0xb4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	21e2      	movs	r1, #226	; 0xe2
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MX_GPIO_Init+0xb8>)
 8000cec:	f001 f970 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB5 PB6 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000cf0:	f240 23e2 	movw	r3, #738	; 0x2e2
 8000cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4619      	mov	r1, r3
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <MX_GPIO_Init+0xb8>)
 8000d0a:	f000 ffdd 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_GPIO_Init+0xb8>)
 8000d24:	f000 ffd0 	bl	8001cc8 <HAL_GPIO_Init>

}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020400 	.word	0x40020400

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_TIM_Base_MspInit+0x48>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d115      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_TIM_Base_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <HAL_TIM_Base_MspInit+0x4c>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_TIM_Base_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	201e      	movs	r0, #30
 8000dc8:	f000 fb45 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dcc:	201e      	movs	r0, #30
 8000dce:	f000 fb5e 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40000800 	.word	0x40000800
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a68      	ldr	r2, [pc, #416]	; (8000fa4 <HAL_UART_MspInit+0x1c0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d163      	bne.n	8000ece <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	4b67      	ldr	r3, [pc, #412]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a66      	ldr	r2, [pc, #408]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b64      	ldr	r3, [pc, #400]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a5f      	ldr	r2, [pc, #380]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e50:	2307      	movs	r3, #7
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4854      	ldr	r0, [pc, #336]	; (8000fac <HAL_UART_MspInit+0x1c8>)
 8000e5c:	f000 ff34 	bl	8001cc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000e60:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e62:	4a54      	ldr	r2, [pc, #336]	; (8000fb4 <HAL_UART_MspInit+0x1d0>)
 8000e64:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000e66:	4b52      	ldr	r3, [pc, #328]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6e:	4b50      	ldr	r3, [pc, #320]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e74:	4b4e      	ldr	r3, [pc, #312]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7a:	4b4d      	ldr	r3, [pc, #308]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e82:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e88:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e8e:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e94:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e9a:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ea0:	4843      	ldr	r0, [pc, #268]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000ea2:	f000 fb0f 	bl	80014c4 <HAL_DMA_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000eac:	f7ff ff44 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a3f      	ldr	r2, [pc, #252]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8000eb6:	4a3e      	ldr	r2, [pc, #248]	; (8000fb0 <HAL_UART_MspInit+0x1cc>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2025      	movs	r0, #37	; 0x25
 8000ec2:	f000 fac8 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ec6:	2025      	movs	r0, #37	; 0x25
 8000ec8:	f000 fae1 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ecc:	e066      	b.n	8000f9c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <HAL_UART_MspInit+0x1d4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d161      	bne.n	8000f9c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a31      	ldr	r2, [pc, #196]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_UART_MspInit+0x1c4>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f10:	230c      	movs	r3, #12
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f20:	2307      	movs	r3, #7
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4820      	ldr	r0, [pc, #128]	; (8000fac <HAL_UART_MspInit+0x1c8>)
 8000f2c:	f000 fecc 	bl	8001cc8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f32:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <HAL_UART_MspInit+0x1dc>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f72:	f000 faa7 	bl	80014c4 <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8000f7c:	f7ff fedc 	bl	8000d38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f84:	639a      	str	r2, [r3, #56]	; 0x38
 8000f86:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_UART_MspInit+0x1d8>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2026      	movs	r0, #38	; 0x26
 8000f92:	f000 fa60 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f96:	2026      	movs	r0, #38	; 0x26
 8000f98:	f000 fa79 	bl	800148e <HAL_NVIC_EnableIRQ>
}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	; 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40011000 	.word	0x40011000
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	200006cc 	.word	0x200006cc
 8000fb4:	40026440 	.word	0x40026440
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	2000072c 	.word	0x2000072c
 8000fc0:	40026088 	.word	0x40026088

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f902 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <DMA1_Stream5_IRQHandler+0x10>)
 800101e:	f000 fbe9 	bl	80017f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000072c 	.word	0x2000072c

0800102c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM4_IRQHandler+0x10>)
 8001032:	f002 ff87 	bl	8003f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200005fc 	.word	0x200005fc

08001040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <USART1_IRQHandler+0x10>)
 8001046:	f003 fc55 	bl	80048f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000644 	.word	0x20000644

08001054 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <USART2_IRQHandler+0x10>)
 800105a:	f003 fc4b 	bl	80048f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000688 	.word	0x20000688

08001068 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA2_Stream2_IRQHandler+0x10>)
 800106e:	f000 fbc1 	bl	80017f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200006cc 	.word	0x200006cc

0800107c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <OTG_FS_IRQHandler+0x10>)
 8001082:	f001 f928 	bl	80022d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20001c80 	.word	0x20001c80

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f008 fe2e 	bl	8009d20 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20020000 	.word	0x20020000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000798 	.word	0x20000798
 80010f8:	200023c0 	.word	0x200023c0

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114a:	f7ff ffd7 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f008 fded 	bl	8009d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fa1f 	bl	8000594 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001164:	0800a7f0 	.word	0x0800a7f0
  ldr r2, =_sbss
 8001168:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800116c:	200023bc 	.word	0x200023bc

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f94f 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fdcc 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f967 	bl	80014aa <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f92f 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	2000079c 	.word	0x2000079c

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000079c 	.word	0x2000079c

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff feb6 	bl	8001240 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e099      	b.n	8001614 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001500:	e00f      	b.n	8001522 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001502:	f7ff fe9d 	bl	8001240 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b05      	cmp	r3, #5
 800150e:	d908      	bls.n	8001522 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2220      	movs	r2, #32
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e078      	b.n	8001614 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1e8      	bne.n	8001502 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_DMA_Init+0x158>)
 800153c:	4013      	ands	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800154e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4313      	orrs	r3, r2
 8001572:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	2b04      	cmp	r3, #4
 800157a:	d107      	bne.n	800158c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4313      	orrs	r3, r2
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f023 0307 	bic.w	r3, r3, #7
 80015a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d117      	bne.n	80015e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4313      	orrs	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00e      	beq.n	80015e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fb01 	bl	8001bd0 <DMA_CheckFifoParam>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2240      	movs	r2, #64	; 0x40
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015e2:	2301      	movs	r3, #1
 80015e4:	e016      	b.n	8001614 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fab8 	bl	8001b64 <DMA_CalcBaseAndBitshift>
 80015f4:	4603      	mov	r3, r0
 80015f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	223f      	movs	r2, #63	; 0x3f
 80015fe:	409a      	lsls	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	f010803f 	.word	0xf010803f

08001620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_DMA_Start_IT+0x26>
 8001642:	2302      	movs	r3, #2
 8001644:	e040      	b.n	80016c8 <HAL_DMA_Start_IT+0xa8>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b01      	cmp	r3, #1
 8001658:	d12f      	bne.n	80016ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2202      	movs	r2, #2
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fa4a 	bl	8001b08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	223f      	movs	r2, #63	; 0x3f
 800167a:	409a      	lsls	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0216 	orr.w	r2, r2, #22
 800168e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e005      	b.n	80016c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016c2:	2302      	movs	r3, #2
 80016c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016de:	f7ff fdaf 	bl	8001240 <HAL_GetTick>
 80016e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d008      	beq.n	8001702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e052      	b.n	80017a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0216 	bic.w	r2, r2, #22
 8001710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <HAL_DMA_Abort+0x62>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0208 	bic.w	r2, r2, #8
 8001740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001752:	e013      	b.n	800177c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001754:	f7ff fd74 	bl	8001240 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b05      	cmp	r3, #5
 8001760:	d90c      	bls.n	800177c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e015      	b.n	80017a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1e4      	bne.n	8001754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	223f      	movs	r2, #63	; 0x3f
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d004      	beq.n	80017ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00c      	b.n	80017e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2205      	movs	r2, #5
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001800:	4b8e      	ldr	r3, [pc, #568]	; (8001a3c <HAL_DMA_IRQHandler+0x248>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a8e      	ldr	r2, [pc, #568]	; (8001a40 <HAL_DMA_IRQHandler+0x24c>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0a9b      	lsrs	r3, r3, #10
 800180c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	2208      	movs	r2, #8
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01a      	beq.n	8001860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2208      	movs	r2, #8
 800184e:	409a      	lsls	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2201      	movs	r2, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	2201      	movs	r2, #1
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2204      	movs	r2, #4
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d012      	beq.n	80018cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	2204      	movs	r2, #4
 80018ba:	409a      	lsls	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	f043 0204 	orr.w	r2, r3, #4
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2210      	movs	r2, #16
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d043      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03c      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	2210      	movs	r2, #16
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d018      	beq.n	8001936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d024      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
 8001922:	e01f      	b.n	8001964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01b      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
 8001934:	e016      	b.n	8001964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0208 	bic.w	r2, r2, #8
 8001952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2220      	movs	r2, #32
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 808f 	beq.w	8001a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8087 	beq.w	8001a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2220      	movs	r2, #32
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b05      	cmp	r3, #5
 800199c:	d136      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0216 	bic.w	r2, r2, #22
 80019ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <HAL_DMA_IRQHandler+0x1da>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0208 	bic.w	r2, r2, #8
 80019dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	223f      	movs	r2, #63	; 0x3f
 80019e4:	409a      	lsls	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d07e      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
        }
        return;
 8001a0a:	e079      	b.n	8001b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01d      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10d      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d031      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e02c      	b.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
 8001a54:	e01e      	b.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0210 	bic.w	r2, r2, #16
 8001a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d032      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d022      	beq.n	8001aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2205      	movs	r2, #5
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d307      	bcc.n	8001adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f2      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x2cc>
 8001ada:	e000      	b.n	8001ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e000      	b.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b00:	bf00      	nop
    }
  }
}
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b40      	cmp	r3, #64	; 0x40
 8001b34:	d108      	bne.n	8001b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b46:	e007      	b.n	8001b58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	60da      	str	r2, [r3, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	3b10      	subs	r3, #16
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b7e:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <DMA_CalcBaseAndBitshift+0x68>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d909      	bls.n	8001ba6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	1d1a      	adds	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba4:	e007      	b.n	8001bb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	aaaaaaab 	.word	0xaaaaaaab
 8001bcc:	0800a7a4 	.word	0x0800a7a4

08001bd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d11f      	bne.n	8001c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d856      	bhi.n	8001c9e <DMA_CheckFifoParam+0xce>
 8001bf0:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <DMA_CheckFifoParam+0x28>)
 8001bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf6:	bf00      	nop
 8001bf8:	08001c09 	.word	0x08001c09
 8001bfc:	08001c1b 	.word	0x08001c1b
 8001c00:	08001c09 	.word	0x08001c09
 8001c04:	08001c9f 	.word	0x08001c9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d046      	beq.n	8001ca2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c18:	e043      	b.n	8001ca2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c22:	d140      	bne.n	8001ca6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c28:	e03d      	b.n	8001ca6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c32:	d121      	bne.n	8001c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d837      	bhi.n	8001caa <DMA_CheckFifoParam+0xda>
 8001c3a:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <DMA_CheckFifoParam+0x70>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001c57 	.word	0x08001c57
 8001c48:	08001c51 	.word	0x08001c51
 8001c4c:	08001c69 	.word	0x08001c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
      break;
 8001c54:	e030      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d025      	beq.n	8001cae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c66:	e022      	b.n	8001cae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c70:	d11f      	bne.n	8001cb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c76:	e01c      	b.n	8001cb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d903      	bls.n	8001c86 <DMA_CheckFifoParam+0xb6>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d003      	beq.n	8001c8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c84:	e018      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      break;
 8001c8a:	e015      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00e      	beq.n	8001cb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9c:	e00b      	b.n	8001cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001c9e:	bf00      	nop
 8001ca0:	e00a      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ca2:	bf00      	nop
 8001ca4:	e008      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ca6:	bf00      	nop
 8001ca8:	e006      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001caa:	bf00      	nop
 8001cac:	e004      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cae:	bf00      	nop
 8001cb0:	e002      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	e159      	b.n	8001f98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f040 8148 	bne.w	8001f92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d005      	beq.n	8001d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d130      	bne.n	8001d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d50:	2201      	movs	r2, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 0201 	and.w	r2, r3, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d017      	beq.n	8001db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d123      	bne.n	8001e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	69b9      	ldr	r1, [r7, #24]
 8001e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a2 	beq.w	8001f92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <HAL_GPIO_Init+0x2e8>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a56      	ldr	r2, [pc, #344]	; (8001fb0 <HAL_GPIO_Init+0x2e8>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <HAL_GPIO_Init+0x2e8>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6a:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_GPIO_Init+0x2ec>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <HAL_GPIO_Init+0x2f0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x202>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a48      	ldr	r2, [pc, #288]	; (8001fbc <HAL_GPIO_Init+0x2f4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x1fe>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a47      	ldr	r2, [pc, #284]	; (8001fc0 <HAL_GPIO_Init+0x2f8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x1fa>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a46      	ldr	r2, [pc, #280]	; (8001fc4 <HAL_GPIO_Init+0x2fc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x1f6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <HAL_GPIO_Init+0x300>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x1f2>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e008      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x204>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f002 0203 	and.w	r2, r2, #3
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001edc:	4935      	ldr	r1, [pc, #212]	; (8001fb4 <HAL_GPIO_Init+0x2ec>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f38:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f62:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_GPIO_Init+0x304>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	f67f aea2 	bls.w	8001ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002014:	887a      	ldrh	r2, [r7, #2]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	041a      	lsls	r2, r3, #16
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43d9      	mvns	r1, r3
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002038:	b08f      	sub	sp, #60	; 0x3c
 800203a:	af0a      	add	r7, sp, #40	; 0x28
 800203c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e10f      	b.n	8002268 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f007 fb52 	bl	800970c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fe39 	bl	8005cfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	687e      	ldr	r6, [r7, #4]
 8002094:	466d      	mov	r5, sp
 8002096:	f106 0410 	add.w	r4, r6, #16
 800209a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020aa:	1d33      	adds	r3, r6, #4
 80020ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ae:	6838      	ldr	r0, [r7, #0]
 80020b0:	f003 fd10 	bl	8005ad4 <USB_CoreInit>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0d0      	b.n	8002268 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fe27 	bl	8005d20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e04a      	b.n	800216e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	333d      	adds	r3, #61	; 0x3d
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	333c      	adds	r3, #60	; 0x3c
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	b298      	uxth	r0, r3
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3344      	adds	r3, #68	; 0x44
 8002114:	4602      	mov	r2, r0
 8002116:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3340      	adds	r3, #64	; 0x40
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	3348      	adds	r3, #72	; 0x48
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	334c      	adds	r3, #76	; 0x4c
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3354      	adds	r3, #84	; 0x54
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	3301      	adds	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3af      	bcc.n	80020d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e044      	b.n	8002208 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	3301      	adds	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3b5      	bcc.n	800217e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	687e      	ldr	r6, [r7, #4]
 800221a:	466d      	mov	r5, sp
 800221c:	f106 0410 	add.w	r4, r6, #16
 8002220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800222c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002230:	1d33      	adds	r3, r6, #4
 8002232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	f003 fdbf 	bl	8005db8 <USB_DevInit>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00d      	b.n	8002268 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f004 ff0e 	bl	8007082 <USB_DevDisconnect>

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002270 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_PCD_Start+0x1c>
 8002288:	2302      	movs	r3, #2
 800228a:	e020      	b.n	80022ce <HAL_PCD_Start+0x5e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	2b01      	cmp	r3, #1
 800229a:	d109      	bne.n	80022b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d005      	beq.n	80022b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 fd11 	bl	8005cdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 febe 	bl	8007040 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022d6:	b590      	push	{r4, r7, lr}
 80022d8:	b08d      	sub	sp, #52	; 0x34
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 ff7c 	bl	80071ea <USB_GetMode>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 848a 	bne.w	8002c0e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f004 fee0 	bl	80070c4 <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8480 	beq.w	8002c0c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fecd 	bl	80070c4 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d107      	bne.n	8002344 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f002 0202 	and.w	r2, r2, #2
 8002342:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 febb 	bl	80070c4 <USB_ReadInterrupts>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b10      	cmp	r3, #16
 8002356:	d161      	bne.n	800241c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0210 	bic.w	r2, r2, #16
 8002366:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f003 020f 	and.w	r2, r3, #15
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	0c5b      	lsrs	r3, r3, #17
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	2b02      	cmp	r3, #2
 8002392:	d124      	bne.n	80023de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d035      	beq.n	800240c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	6a38      	ldr	r0, [r7, #32]
 80023b4:	f004 fcf2 	bl	8006d9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c4:	441a      	add	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d6:	441a      	add	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	621a      	str	r2, [r3, #32]
 80023dc:	e016      	b.n	800240c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	0c5b      	lsrs	r3, r3, #17
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d110      	bne.n	800240c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023f0:	2208      	movs	r2, #8
 80023f2:	4619      	mov	r1, r3
 80023f4:	6a38      	ldr	r0, [r7, #32]
 80023f6:	f004 fcd1 	bl	8006d9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	6a1a      	ldr	r2, [r3, #32]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002406:	441a      	add	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0210 	orr.w	r2, r2, #16
 800241a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f004 fe4f 	bl	80070c4 <USB_ReadInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002430:	f040 80a7 	bne.w	8002582 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f004 fe54 	bl	80070ea <USB_ReadDevAllOutEpInterrupt>
 8002442:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002444:	e099      	b.n	800257a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 808e 	beq.w	800256e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f004 fe78 	bl	8007152 <USB_ReadDevOutEPInterrupt>
 8002462:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00c      	beq.n	8002488 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247a:	461a      	mov	r2, r3
 800247c:	2301      	movs	r3, #1
 800247e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fec2 	bl	800320c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249e:	461a      	mov	r2, r3
 80024a0:	2308      	movs	r3, #8
 80024a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 ff98 	bl	80033dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c2:	461a      	mov	r2, r3
 80024c4:	2310      	movs	r3, #16
 80024c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d030      	beq.n	8002534 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d109      	bne.n	80024f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	3304      	adds	r3, #4
 8002506:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	78db      	ldrb	r3, [r3, #3]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d108      	bne.n	8002522 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2200      	movs	r2, #0
 8002514:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f007 f9f1 	bl	8009904 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252e:	461a      	mov	r2, r3
 8002530:	2302      	movs	r3, #2
 8002532:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254a:	461a      	mov	r2, r3
 800254c:	2320      	movs	r3, #32
 800254e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002566:	461a      	mov	r2, r3
 8002568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	3301      	adds	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	2b00      	cmp	r3, #0
 800257e:	f47f af62 	bne.w	8002446 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f004 fd9c 	bl	80070c4 <USB_ReadInterrupts>
 800258c:	4603      	mov	r3, r0
 800258e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002596:	f040 80db 	bne.w	8002750 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f004 fdbd 	bl	800711e <USB_ReadDevAllInEpInterrupt>
 80025a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025aa:	e0cd      	b.n	8002748 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80c2 	beq.w	800273c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fde3 	bl	800718e <USB_ReadDevInEPInterrupt>
 80025c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d057      	beq.n	8002684 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	2201      	movs	r2, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69f9      	ldr	r1, [r7, #28]
 80025f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025f4:	4013      	ands	r3, r2
 80025f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002604:	461a      	mov	r2, r3
 8002606:	2301      	movs	r3, #1
 8002608:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d132      	bne.n	8002678 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	334c      	adds	r3, #76	; 0x4c
 8002622:	6819      	ldr	r1, [r3, #0]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4403      	add	r3, r0
 8002632:	3348      	adds	r3, #72	; 0x48
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4419      	add	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4403      	add	r3, r0
 8002646:	334c      	adds	r3, #76	; 0x4c
 8002648:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	d113      	bne.n	8002678 <HAL_PCD_IRQHandler+0x3a2>
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3354      	adds	r3, #84	; 0x54
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002670:	461a      	mov	r2, r3
 8002672:	2101      	movs	r1, #1
 8002674:	f004 fdea 	bl	800724c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	b2db      	uxtb	r3, r3
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f007 f8c5 	bl	800980e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269a:	461a      	mov	r2, r3
 800269c:	2308      	movs	r3, #8
 800269e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b6:	461a      	mov	r2, r3
 80026b8:	2310      	movs	r3, #16
 80026ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d2:	461a      	mov	r2, r3
 80026d4:	2340      	movs	r3, #64	; 0x40
 80026d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d023      	beq.n	800272a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e4:	6a38      	ldr	r0, [r7, #32]
 80026e6:	f003 fccb 	bl	8006080 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	3338      	adds	r3, #56	; 0x38
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	78db      	ldrb	r3, [r3, #3]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2200      	movs	r2, #0
 800270a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f007 f908 	bl	8009928 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002724:	461a      	mov	r2, r3
 8002726:	2302      	movs	r3, #2
 8002728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fcdb 	bl	80030f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	3301      	adds	r3, #1
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	f47f af2e 	bne.w	80025ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fcb5 	bl	80070c4 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002764:	d122      	bne.n	80027ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800278c:	2100      	movs	r1, #0
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fec2 	bl	8003518 <HAL_PCDEx_LPM_Callback>
 8002794:	e002      	b.n	800279c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f007 f8a6 	bl	80098e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f004 fc87 	bl	80070c4 <USB_ReadInterrupts>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c0:	d112      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f007 f862 	bl	800989c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027e6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 fc69 	bl	80070c4 <USB_ReadInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	f040 80b7 	bne.w	800296e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2110      	movs	r1, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fc30 	bl	8006080 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002824:	e046      	b.n	80028b4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002832:	461a      	mov	r2, r3
 8002834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002838:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284a:	0151      	lsls	r1, r2, #5
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	440a      	add	r2, r1
 8002850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002854:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002858:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002866:	461a      	mov	r2, r3
 8002868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800286c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800287e:	0151      	lsls	r1, r2, #5
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	440a      	add	r2, r1
 8002884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800288c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289e:	0151      	lsls	r1, r2, #5
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	440a      	add	r2, r1
 80028a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	3301      	adds	r3, #1
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d3b3      	bcc.n	8002826 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ea:	f043 030b 	orr.w	r3, r3, #11
 80028ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002900:	f043 030b 	orr.w	r3, r3, #11
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	e015      	b.n	8002934 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800291e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292e:	f043 030b 	orr.w	r3, r3, #11
 8002932:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002942:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002946:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002958:	461a      	mov	r2, r3
 800295a:	f004 fc77 	bl	800724c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800296c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 fba6 	bl	80070c4 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002982:	d124      	bne.n	80029ce <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fc3c 	bl	8007206 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fbf1 	bl	800617a <USB_GetDevSpeed>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681c      	ldr	r4, [r3, #0]
 80029a4:	f001 f9e8 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 80029a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	4620      	mov	r0, r4
 80029b4:	f003 f8f0 	bl	8005b98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f006 ff50 	bl	800985e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fb76 	bl	80070c4 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d10a      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f006 ff2d 	bl	8009842 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f002 0208 	and.w	r2, r2, #8
 80029f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f004 fb61 	bl	80070c4 <USB_ReadInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d122      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a18:	2301      	movs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	e014      	b.n	8002a48 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fb27 	bl	8003090 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	3301      	adds	r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d3e5      	bcc.n	8002a1e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f004 fb34 	bl	80070c4 <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a66:	d13b      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a68:	2301      	movs	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	e02b      	b.n	8002ac6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3340      	adds	r3, #64	; 0x40
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d115      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da12      	bge.n	8002ac0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	333f      	adds	r3, #63	; 0x3f
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fae8 	bl	8003090 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d3ce      	bcc.n	8002a6e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 faed 	bl	80070c4 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af4:	d155      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af6:	2301      	movs	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e045      	b.n	8002b88 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d12e      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	da2b      	bge.n	8002b82 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b36:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d121      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7e:	6053      	str	r3, [r2, #4]
            break;
 8002b80:	e007      	b.n	8002b92 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	3301      	adds	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3b4      	bcc.n	8002afc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 fa8c 	bl	80070c4 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d10a      	bne.n	8002bce <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f006 fec7 	bl	800994c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 fa76 	bl	80070c4 <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d115      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f006 feb7 	bl	8009968 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	e000      	b.n	8002c0e <HAL_PCD_IRQHandler+0x938>
      return;
 8002c0c:	bf00      	nop
    }
  }
}
 8002c0e:	3734      	adds	r7, #52	; 0x34
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd90      	pop	{r4, r7, pc}

08002c14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_PCD_SetAddress+0x1a>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e013      	b.n	8002c56 <HAL_PCD_SetAddress+0x42>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 f9d4 	bl	8006ff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	4608      	mov	r0, r1
 8002c68:	4611      	mov	r1, r2
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	70fb      	strb	r3, [r7, #3]
 8002c70:	460b      	mov	r3, r1
 8002c72:	803b      	strh	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	da0f      	bge.n	8002ca4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3338      	adds	r3, #56	; 0x38
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	705a      	strb	r2, [r3, #1]
 8002ca2:	e00f      	b.n	8002cc4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cd0:	883a      	ldrh	r2, [r7, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	78ba      	ldrb	r2, [r7, #2]
 8002cda:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cee:	78bb      	ldrb	r3, [r7, #2]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d102      	bne.n	8002cfa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_PCD_EP_Open+0xaa>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e00e      	b.n	8002d26 <HAL_PCD_EP_Open+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fa54 	bl	80061c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d24:	7afb      	ldrb	r3, [r7, #11]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da0f      	bge.n	8002d62 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3338      	adds	r3, #56	; 0x38
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	3304      	adds	r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	705a      	strb	r2, [r3, #1]
 8002d60:	e00f      	b.n	8002d82 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 020f 	and.w	r2, r3, #15
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	3304      	adds	r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_PCD_EP_Close+0x6e>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e00e      	b.n	8002dba <HAL_PCD_EP_Close+0x8c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68f9      	ldr	r1, [r7, #12]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 fa92 	bl	80062d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	6979      	ldr	r1, [r7, #20]
 8002e36:	f003 fd71 	bl	800691c <USB_EP0StartXfer>
 8002e3a:	e008      	b.n	8002e4e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6979      	ldr	r1, [r7, #20]
 8002e4a:	f003 fb1f 	bl	800648c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	460b      	mov	r3, r1
 8002e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	3338      	adds	r3, #56	; 0x38
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	3304      	adds	r3, #4
 8002eae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6979      	ldr	r1, [r7, #20]
 8002efa:	f003 fd0f 	bl	800691c <USB_EP0StartXfer>
 8002efe:	e008      	b.n	8002f12 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6979      	ldr	r1, [r7, #20]
 8002f0e:	f003 fabd 	bl	800648c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 020f 	and.w	r2, r3, #15
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d901      	bls.n	8002f3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e050      	b.n	8002fdc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da0f      	bge.n	8002f62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	f003 020f 	and.w	r2, r3, #15
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3338      	adds	r3, #56	; 0x38
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	705a      	strb	r2, [r3, #1]
 8002f60:	e00d      	b.n	8002f7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_PCD_EP_SetStall+0x82>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e01e      	b.n	8002fdc <HAL_PCD_EP_SetStall+0xc0>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 ff4d 	bl	8006e4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	b2d9      	uxtb	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f004 f93d 	bl	800724c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 020f 	and.w	r2, r3, #15
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d901      	bls.n	8003002 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e042      	b.n	8003088 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003006:	2b00      	cmp	r3, #0
 8003008:	da0f      	bge.n	800302a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	3338      	adds	r3, #56	; 0x38
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	3304      	adds	r3, #4
 8003020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	705a      	strb	r2, [r3, #1]
 8003028:	e00f      	b.n	800304a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	f003 020f 	and.w	r2, r3, #15
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	3304      	adds	r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_PCD_EP_ClrStall+0x86>
 8003066:	2302      	movs	r3, #2
 8003068:	e00e      	b.n	8003088 <HAL_PCD_EP_ClrStall+0xa4>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68f9      	ldr	r1, [r7, #12]
 8003078:	4618      	mov	r0, r3
 800307a:	f003 ff55 	bl	8006f28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800309c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	da0c      	bge.n	80030be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 020f 	and.w	r2, r3, #15
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	3338      	adds	r3, #56	; 0x38
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	3304      	adds	r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e00c      	b.n	80030d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68f9      	ldr	r1, [r7, #12]
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fd74 	bl	8006bcc <USB_EPStopXfer>
 80030e4:	4603      	mov	r3, r0
 80030e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030e8:	7afb      	ldrb	r3, [r7, #11]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b08a      	sub	sp, #40	; 0x28
 80030f6:	af02      	add	r7, sp, #8
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	3338      	adds	r3, #56	; 0x38
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1a      	ldr	r2, [r3, #32]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	429a      	cmp	r2, r3
 8003124:	d901      	bls.n	800312a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06c      	b.n	8003204 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	429a      	cmp	r2, r3
 800313e:	d902      	bls.n	8003146 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3303      	adds	r3, #3
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800314e:	e02b      	b.n	80031a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	429a      	cmp	r2, r3
 8003164:	d902      	bls.n	800316c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3303      	adds	r3, #3
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003184:	b2db      	uxtb	r3, r3
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4603      	mov	r3, r0
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f003 fdc8 	bl	8006d20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	441a      	add	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	441a      	add	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d809      	bhi.n	80031d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a1a      	ldr	r2, [r3, #32]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d203      	bcs.n	80031d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1be      	bne.n	8003150 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d811      	bhi.n	8003202 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	2201      	movs	r2, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	6939      	ldr	r1, [r7, #16]
 80031fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031fe:	4013      	ands	r3, r2
 8003200:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	333c      	adds	r3, #60	; 0x3c
 8003224:	3304      	adds	r3, #4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d17b      	bne.n	800333a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d015      	beq.n	8003278 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	4a61      	ldr	r2, [pc, #388]	; (80033d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	f240 80b9 	bls.w	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80b3 	beq.w	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	461a      	mov	r2, r3
 8003270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003274:	6093      	str	r3, [r2, #8]
 8003276:	e0a7      	b.n	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	2320      	movs	r3, #32
 8003292:	6093      	str	r3, [r2, #8]
 8003294:	e098      	b.n	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 8093 	bne.w	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d90f      	bls.n	80032ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	6093      	str	r3, [r2, #8]
 80032c8:	e07e      	b.n	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	3304      	adds	r3, #4
 80032de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	0159      	lsls	r1, r3, #5
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	440b      	add	r3, r1
 80032ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f6:	1ad2      	subs	r2, r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d114      	bne.n	800332c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003314:	461a      	mov	r2, r3
 8003316:	2101      	movs	r1, #1
 8003318:	f003 ff98 	bl	800724c <USB_EP0_OutStart>
 800331c:	e006      	b.n	800332c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	441a      	add	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	4619      	mov	r1, r3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f006 fa50 	bl	80097d8 <HAL_PCD_DataOutStageCallback>
 8003338:	e046      	b.n	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d124      	bne.n	800338c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335e:	6093      	str	r3, [r2, #8]
 8003360:	e032      	b.n	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	2320      	movs	r3, #32
 800337c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f006 fa27 	bl	80097d8 <HAL_PCD_DataOutStageCallback>
 800338a:	e01d      	b.n	80033c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d108      	bne.n	80033bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033b4:	461a      	mov	r2, r3
 80033b6:	2100      	movs	r1, #0
 80033b8:	f003 ff48 	bl	800724c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f006 fa08 	bl	80097d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	4f54300a 	.word	0x4f54300a
 80033d8:	4f54310a 	.word	0x4f54310a

080033dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	333c      	adds	r3, #60	; 0x3c
 80033f4:	3304      	adds	r3, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a15      	ldr	r2, [pc, #84]	; (8003464 <PCD_EP_OutSetupPacket_int+0x88>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d90e      	bls.n	8003430 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003428:	461a      	mov	r2, r3
 800342a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f006 f9bf 	bl	80097b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <PCD_EP_OutSetupPacket_int+0x88>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d90c      	bls.n	8003458 <PCD_EP_OutSetupPacket_int+0x7c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d108      	bne.n	8003458 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003450:	461a      	mov	r2, r3
 8003452:	2101      	movs	r1, #1
 8003454:	f003 fefa 	bl	800724c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	4f54300a 	.word	0x4f54300a

08003468 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
 8003474:	4613      	mov	r3, r2
 8003476:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d107      	bne.n	8003496 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003486:	883b      	ldrh	r3, [r7, #0]
 8003488:	0419      	lsls	r1, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	430a      	orrs	r2, r1
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
 8003494:	e028      	b.n	80034e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	4413      	add	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e00d      	b.n	80034c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	3340      	adds	r3, #64	; 0x40
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4413      	add	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	3301      	adds	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d3ec      	bcc.n	80034aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034d0:	883b      	ldrh	r3, [r7, #0]
 80034d2:	0418      	lsls	r0, r3, #16
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	3b01      	subs	r3, #1
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	4302      	orrs	r2, r0
 80034e0:	3340      	adds	r3, #64	; 0x40
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e267      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d075      	beq.n	800363a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354e:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b04      	cmp	r3, #4
 8003558:	d00c      	beq.n	8003574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355a:	4b85      	ldr	r3, [pc, #532]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003562:	2b08      	cmp	r3, #8
 8003564:	d112      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003566:	4b82      	ldr	r3, [pc, #520]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003572:	d10b      	bne.n	800358c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d05b      	beq.n	8003638 <HAL_RCC_OscConfig+0x108>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d157      	bne.n	8003638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e242      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d106      	bne.n	80035a4 <HAL_RCC_OscConfig+0x74>
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e01d      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b70      	ldr	r3, [pc, #448]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6f      	ldr	r2, [pc, #444]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6c      	ldr	r2, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0xb0>
 80035c8:	4b69      	ldr	r3, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a68      	ldr	r2, [pc, #416]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b66      	ldr	r3, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a65      	ldr	r2, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fd fe2a 	bl	8001240 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fd fe26 	bl	8001240 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e207      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0xc0>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fd fe16 	bl	8001240 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003618:	f7fd fe12 	bl	8001240 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1f3      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0xe8>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d063      	beq.n	800370e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11c      	bne.n	8003698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365e:	4b44      	ldr	r3, [pc, #272]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x152>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e1c7      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4937      	ldr	r1, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	e03a      	b.n	800370e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a0:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_RCC_OscConfig+0x244>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fd fdcb 	bl	8001240 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ae:	f7fd fdc7 	bl	8001240 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1a8      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4925      	ldr	r1, [pc, #148]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
 80036e0:	e015      	b.n	800370e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_OscConfig+0x244>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fd fdaa 	bl	8001240 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f0:	f7fd fda6 	bl	8001240 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e187      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d036      	beq.n	8003788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCC_OscConfig+0x248>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7fd fd8a 	bl	8001240 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003730:	f7fd fd86 	bl	8001240 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e167      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x240>)
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x200>
 800374e:	e01b      	b.n	8003788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_OscConfig+0x248>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fd fd73 	bl	8001240 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	e00e      	b.n	800377c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375e:	f7fd fd6f 	bl	8001240 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d907      	bls.n	800377c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e150      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
 8003770:	40023800 	.word	0x40023800
 8003774:	42470000 	.word	0x42470000
 8003778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377c:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800377e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ea      	bne.n	800375e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8097 	beq.w	80038c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379a:	4b81      	ldr	r3, [pc, #516]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10f      	bne.n	80037c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	4b7d      	ldr	r3, [pc, #500]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	4a7c      	ldr	r2, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6413      	str	r3, [r2, #64]	; 0x40
 80037b6:	4b7a      	ldr	r3, [pc, #488]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d2:	4b74      	ldr	r3, [pc, #464]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a73      	ldr	r2, [pc, #460]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7fd fd2f 	bl	8001240 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7fd fd2b 	bl	8001240 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e10c      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_OscConfig+0x474>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x2ea>
 800380c:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a63      	ldr	r2, [pc, #396]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	e01c      	b.n	8003854 <HAL_RCC_OscConfig+0x324>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b05      	cmp	r3, #5
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x30c>
 8003822:	4b5f      	ldr	r3, [pc, #380]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a5e      	ldr	r2, [pc, #376]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	6713      	str	r3, [r2, #112]	; 0x70
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a5b      	ldr	r2, [pc, #364]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0x324>
 800383c:	4b58      	ldr	r3, [pc, #352]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a57      	ldr	r2, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	4b55      	ldr	r3, [pc, #340]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	4a54      	ldr	r2, [pc, #336]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 0304 	bic.w	r3, r3, #4
 8003852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fd fcf0 	bl	8001240 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fd fcec 	bl	8001240 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0cb      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0ee      	beq.n	8003864 <HAL_RCC_OscConfig+0x334>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003888:	f7fd fcda 	bl	8001240 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fd fcd6 	bl	8001240 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0b5      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a6:	4b3e      	ldr	r3, [pc, #248]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1ee      	bne.n	8003890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b8:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4a38      	ldr	r2, [pc, #224]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80a1 	beq.w	8003a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d05c      	beq.n	8003994 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d141      	bne.n	8003966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fd fcaa 	bl	8001240 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fd fca6 	bl	8001240 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e087      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	491b      	ldr	r1, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fd fc7f 	bl	8001240 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003946:	f7fd fc7b 	bl	8001240 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e05c      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x416>
 8003964:	e054      	b.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_OscConfig+0x478>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fd fc68 	bl	8001240 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7fd fc64 	bl	8001240 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e045      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_OscConfig+0x470>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x444>
 8003992:	e03d      	b.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e038      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40007000 	.word	0x40007000
 80039a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d028      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d121      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d11a      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039dc:	4013      	ands	r3, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d111      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800

08003a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0cc      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b68      	ldr	r3, [pc, #416]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d90c      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b65      	ldr	r3, [pc, #404]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d044      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d119      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b3f      	ldr	r3, [pc, #252]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e06f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e067      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4b37      	ldr	r3, [pc, #220]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4934      	ldr	r1, [pc, #208]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7fd fb96 	bl	8001240 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fd fb92 	bl	8001240 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e04f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b25      	ldr	r3, [pc, #148]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d20c      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd faf6 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	0800a78c 	.word	0x0800a78c
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000004 	.word	0x20000004

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b090      	sub	sp, #64	; 0x40
 8003bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c04:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d00d      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x40>
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	f200 80a1 	bhi.w	8003d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1e:	e09b      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c24:	e09b      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c26:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2a:	e098      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c2c:	4b4f      	ldr	r3, [pc, #316]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c36:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d028      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	2200      	movs	r2, #0
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c54:	2100      	movs	r1, #0
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c58:	fb03 f201 	mul.w	r2, r3, r1
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	fb00 f303 	mul.w	r3, r0, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	4a43      	ldr	r2, [pc, #268]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c66:	fba0 1202 	umull	r1, r2, r0, r2
 8003c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c6c:	460a      	mov	r2, r1
 8003c6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c72:	4413      	add	r3, r2
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c78:	2200      	movs	r2, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	61fa      	str	r2, [r7, #28]
 8003c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c86:	f7fc fb03 	bl	8000290 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4613      	mov	r3, r2
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c92:	e053      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c94:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	617a      	str	r2, [r7, #20]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ca6:	f04f 0b00 	mov.w	fp, #0
 8003caa:	4652      	mov	r2, sl
 8003cac:	465b      	mov	r3, fp
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	0159      	lsls	r1, r3, #5
 8003cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cbc:	0150      	lsls	r0, r2, #5
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8003cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cde:	ebb2 0408 	subs.w	r4, r2, r8
 8003ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	00eb      	lsls	r3, r5, #3
 8003cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf4:	00e2      	lsls	r2, r4, #3
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	eb14 030a 	adds.w	r3, r4, sl
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	eb45 030b 	adc.w	r3, r5, fp
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d12:	4629      	mov	r1, r5
 8003d14:	028b      	lsls	r3, r1, #10
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	028a      	lsls	r2, r1, #10
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	2200      	movs	r2, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	60fa      	str	r2, [r7, #12]
 8003d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d30:	f7fc faae 	bl	8000290 <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4613      	mov	r3, r2
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	3301      	adds	r3, #1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3740      	adds	r7, #64	; 0x40
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	00f42400 	.word	0x00f42400
 8003d74:	017d7840 	.word	0x017d7840

08003d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000000 	.word	0x20000000

08003d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d94:	f7ff fff0 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0a9b      	lsrs	r3, r3, #10
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	0800a79c 	.word	0x0800a79c

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dbc:	f7ff ffdc 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0b5b      	lsrs	r3, r3, #13
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	0800a79c 	.word	0x0800a79c

08003de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e041      	b.n	8003e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fc ffc4 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f000 fa88 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e044      	b.n	8003f22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_TIM_Base_Start_IT+0xb0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec2:	d013      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1a      	ldr	r2, [pc, #104]	; (8003f34 <HAL_TIM_Base_Start_IT+0xb4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a19      	ldr	r2, [pc, #100]	; (8003f38 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <HAL_TIM_Base_Start_IT+0xbc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x6c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d010      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	e007      	b.n	8003f20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40014000 	.word	0x40014000

08003f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f9b5 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9a7 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f9b8 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0204 	mvn.w	r2, #4
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f98b 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f97d 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f98e 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b08      	cmp	r3, #8
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f961 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f953 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f964 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0210 	mvn.w	r2, #16
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2208      	movs	r2, #8
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f937 	bl	80042f6 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f929 	bl	80042e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f93a 	bl	800430a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0201 	mvn.w	r2, #1
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc fb9e 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b80      	cmp	r3, #128	; 0x80
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fab2 	bl	8004658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d107      	bne.n	8004120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8ff 	bl	800431e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d10e      	bne.n	800414c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b20      	cmp	r3, #32
 800413a:	d107      	bne.n	800414c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0220 	mvn.w	r2, #32
 8004144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fa7c 	bl	8004644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_TIM_ConfigClockSource+0x1c>
 800416c:	2302      	movs	r3, #2
 800416e:	e0b4      	b.n	80042da <HAL_TIM_ConfigClockSource+0x186>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800418e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a8:	d03e      	beq.n	8004228 <HAL_TIM_ConfigClockSource+0xd4>
 80041aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ae:	f200 8087 	bhi.w	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	f000 8086 	beq.w	80042c6 <HAL_TIM_ConfigClockSource+0x172>
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d87f      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b70      	cmp	r3, #112	; 0x70
 80041c2:	d01a      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0xa6>
 80041c4:	2b70      	cmp	r3, #112	; 0x70
 80041c6:	d87b      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b60      	cmp	r3, #96	; 0x60
 80041ca:	d050      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x11a>
 80041cc:	2b60      	cmp	r3, #96	; 0x60
 80041ce:	d877      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b50      	cmp	r3, #80	; 0x50
 80041d2:	d03c      	beq.n	800424e <HAL_TIM_ConfigClockSource+0xfa>
 80041d4:	2b50      	cmp	r3, #80	; 0x50
 80041d6:	d873      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d058      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x13a>
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d86f      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b30      	cmp	r3, #48	; 0x30
 80041e2:	d064      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	2b30      	cmp	r3, #48	; 0x30
 80041e6:	d86b      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d060      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d867      	bhi.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d05c      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d05a      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x15a>
 80041f8:	e062      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6899      	ldr	r1, [r3, #8]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f000 f98d 	bl	8004528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800421c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	609a      	str	r2, [r3, #8]
      break;
 8004226:	e04f      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6899      	ldr	r1, [r3, #8]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f000 f976 	bl	8004528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424a:	609a      	str	r2, [r3, #8]
      break;
 800424c:	e03c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	461a      	mov	r2, r3
 800425c:	f000 f8ea 	bl	8004434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2150      	movs	r1, #80	; 0x50
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f943 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 800426c:	e02c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6859      	ldr	r1, [r3, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	461a      	mov	r2, r3
 800427c:	f000 f909 	bl	8004492 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2160      	movs	r1, #96	; 0x60
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f933 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 800428c:	e01c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	461a      	mov	r2, r3
 800429c:	f000 f8ca 	bl	8004434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2140      	movs	r1, #64	; 0x40
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f923 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 80042ac:	e00c      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f000 f91a 	bl	80044f2 <TIM_ITRx_SetConfig>
      break;
 80042be:	e003      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      break;
 80042c4:	e000      	b.n	80042c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a34      	ldr	r2, [pc, #208]	; (8004418 <TIM_Base_SetConfig+0xe4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a31      	ldr	r2, [pc, #196]	; (800441c <TIM_Base_SetConfig+0xe8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a30      	ldr	r2, [pc, #192]	; (8004420 <TIM_Base_SetConfig+0xec>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <TIM_Base_SetConfig+0xf0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a25      	ldr	r2, [pc, #148]	; (8004418 <TIM_Base_SetConfig+0xe4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01b      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d017      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a22      	ldr	r2, [pc, #136]	; (800441c <TIM_Base_SetConfig+0xe8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a21      	ldr	r2, [pc, #132]	; (8004420 <TIM_Base_SetConfig+0xec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <TIM_Base_SetConfig+0xf0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <TIM_Base_SetConfig+0xf4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	; (800442c <TIM_Base_SetConfig+0xf8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <TIM_Base_SetConfig+0xfc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <TIM_Base_SetConfig+0xe4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	615a      	str	r2, [r3, #20]
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800

08004434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f023 030a 	bic.w	r3, r3, #10
 8004470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004492:	b480      	push	{r7}
 8004494:	b087      	sub	sp, #28
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0210 	bic.w	r2, r3, #16
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	031b      	lsls	r3, r3, #12
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	f043 0307 	orr.w	r3, r3, #7
 8004514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	609a      	str	r2, [r3, #8]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	021a      	lsls	r2, r3, #8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	431a      	orrs	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	609a      	str	r2, [r3, #8]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800457c:	2302      	movs	r3, #2
 800457e:	e050      	b.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d018      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045cc:	d013      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a18      	ldr	r2, [pc, #96]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a16      	ldr	r2, [pc, #88]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a15      	ldr	r2, [pc, #84]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10c      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40014000 	.word	0x40014000

08004644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e03f      	b.n	80046fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc fba6 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 ff9b 	bl	80055ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b08a      	sub	sp, #40	; 0x28
 800470a:	af02      	add	r7, sp, #8
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b20      	cmp	r3, #32
 8004724:	d17c      	bne.n	8004820 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Transmit+0x2c>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e075      	b.n	8004822 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_UART_Transmit+0x3e>
 8004740:	2302      	movs	r3, #2
 8004742:	e06e      	b.n	8004822 <HAL_UART_Transmit+0x11c>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2221      	movs	r2, #33	; 0x21
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800475a:	f7fc fd71 	bl	8001240 <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	88fa      	ldrh	r2, [r7, #6]
 8004764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	d108      	bne.n	8004788 <HAL_UART_Transmit+0x82>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	e003      	b.n	8004790 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004798:	e02a      	b.n	80047f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fc53 	bl	8005050 <UART_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e036      	b.n	8004822 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3302      	adds	r3, #2
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e007      	b.n	80047e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1cf      	bne.n	800479a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2140      	movs	r1, #64	; 0x40
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fc23 	bl	8005050 <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e006      	b.n	8004822 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e000      	b.n	8004822 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
  }
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b08c      	sub	sp, #48	; 0x30
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	4613      	mov	r3, r2
 8004836:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b20      	cmp	r3, #32
 8004842:	d152      	bne.n	80048ea <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e04b      	b.n	80048ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800485e:	2302      	movs	r3, #2
 8004860:	e044      	b.n	80048ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	461a      	mov	r2, r3
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fc58 	bl	800512c <UART_Start_Receive_DMA>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004886:	2b00      	cmp	r3, #0
 8004888:	d12c      	bne.n	80048e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	2b01      	cmp	r3, #1
 8004890:	d125      	bne.n	80048de <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	617b      	str	r3, [r7, #20]
   return(result);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f043 0310 	orr.w	r3, r3, #16
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c8:	627a      	str	r2, [r7, #36]	; 0x24
 80048ca:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6a39      	ldr	r1, [r7, #32]
 80048ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e5      	bne.n	80048a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80048dc:	e002      	b.n	80048e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80048e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048e8:	e000      	b.n	80048ec <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3730      	adds	r7, #48	; 0x30
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b0ba      	sub	sp, #232	; 0xe8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800491a:	2300      	movs	r3, #0
 800491c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004920:	2300      	movs	r3, #0
 8004922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_UART_IRQHandler+0x66>
 8004946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fd8f 	bl	8005476 <UART_Receive_IT>
      return;
 8004958:	e256      	b.n	8004e08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800495a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80de 	beq.w	8004b20 <HAL_UART_IRQHandler+0x22c>
 8004964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80d1 	beq.w	8004b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800497e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_UART_IRQHandler+0xae>
 800498a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f043 0201 	orr.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_UART_IRQHandler+0xd2>
 80049ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f043 0202 	orr.w	r2, r3, #2
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_UART_IRQHandler+0xf6>
 80049d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f043 0204 	orr.w	r2, r3, #4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d011      	beq.n	8004a1a <HAL_UART_IRQHandler+0x126>
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f043 0208 	orr.w	r2, r3, #8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 81ed 	beq.w	8004dfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_UART_IRQHandler+0x14e>
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fd1a 	bl	8005476 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_UART_IRQHandler+0x17a>
 8004a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d04f      	beq.n	8004b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fc22 	bl	80052b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d141      	bne.n	8004b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3314      	adds	r3, #20
 8004a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3314      	adds	r3, #20
 8004aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1d9      	bne.n	8004a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d013      	beq.n	8004afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	4a7d      	ldr	r2, [pc, #500]	; (8004cd0 <HAL_UART_IRQHandler+0x3dc>)
 8004adc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc fe64 	bl	80017b0 <HAL_DMA_Abort_IT>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004af8:	4610      	mov	r0, r2
 8004afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	e00e      	b.n	8004b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9a4 	bl	8004e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	e00a      	b.n	8004b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9a0 	bl	8004e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0c:	e006      	b.n	8004b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f99c 	bl	8004e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b1a:	e170      	b.n	8004dfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	bf00      	nop
    return;
 8004b1e:	e16e      	b.n	8004dfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	f040 814a 	bne.w	8004dbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8143 	beq.w	8004dbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 813c 	beq.w	8004dbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	f040 80b4 	bne.w	8004cd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8140 	beq.w	8004e02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	f080 8139 	bcs.w	8004e02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba2:	f000 8088 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1d9      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3314      	adds	r3, #20
 8004bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3314      	adds	r3, #20
 8004c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e1      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3314      	adds	r3, #20
 8004c34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3314      	adds	r3, #20
 8004c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e3      	bne.n	8004c2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c86:	f023 0310 	bic.w	r3, r3, #16
 8004c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c98:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e3      	bne.n	8004c74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fc fd0d 	bl	80016d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fb fd3a 	bl	8000740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ccc:	e099      	b.n	8004e02 <HAL_UART_IRQHandler+0x50e>
 8004cce:	bf00      	nop
 8004cd0:	0800537f 	.word	0x0800537f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 808b 	beq.w	8004e06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8086 	beq.w	8004e06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8004d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e3      	bne.n	8004cfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3314      	adds	r3, #20
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	623b      	str	r3, [r7, #32]
   return(result);
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3314      	adds	r3, #20
 8004d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d56:	633a      	str	r2, [r7, #48]	; 0x30
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e3      	bne.n	8004d32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0310 	bic.w	r3, r3, #16
 8004d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	330c      	adds	r3, #12
 8004d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d9c:	61fa      	str	r2, [r7, #28]
 8004d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	69b9      	ldr	r1, [r7, #24]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	617b      	str	r3, [r7, #20]
   return(result);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e3      	bne.n	8004d78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fb fcc2 	bl	8000740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dbc:	e023      	b.n	8004e06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <HAL_UART_IRQHandler+0x4ea>
 8004dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fae5 	bl	80053a6 <UART_Transmit_IT>
    return;
 8004ddc:	e014      	b.n	8004e08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00e      	beq.n	8004e08 <HAL_UART_IRQHandler+0x514>
 8004dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fb25 	bl	8005446 <UART_EndTransmit_IT>
    return;
 8004dfc:	e004      	b.n	8004e08 <HAL_UART_IRQHandler+0x514>
    return;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <HAL_UART_IRQHandler+0x514>
      return;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <HAL_UART_IRQHandler+0x514>
      return;
 8004e06:	bf00      	nop
  }
}
 8004e08:	37e8      	adds	r7, #232	; 0xe8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop

08004e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b09c      	sub	sp, #112	; 0x70
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d172      	bne.n	8004f62 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7e:	2200      	movs	r2, #0
 8004e80:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e98:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ea2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ea4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ed6:	647a      	str	r2, [r7, #68]	; 0x44
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3314      	adds	r3, #20
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f00:	663b      	str	r3, [r7, #96]	; 0x60
 8004f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e5      	bne.n	8004eea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d119      	bne.n	8004f62 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0310 	bic.w	r3, r3, #16
 8004f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f4e:	61fa      	str	r2, [r7, #28]
 8004f50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	69b9      	ldr	r1, [r7, #24]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d106      	bne.n	8004f78 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f72:	f7fb fbe5 	bl	8000740 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f76:	e002      	b.n	8004f7e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f7a:	f7ff ff53 	bl	8004e24 <HAL_UART_RxCpltCallback>
}
 8004f7e:	bf00      	nop
 8004f80:	3770      	adds	r7, #112	; 0x70
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d108      	bne.n	8004fae <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7fb fbca 	bl	8000740 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fac:	e002      	b.n	8004fb4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff ff42 	bl	8004e38 <HAL_UART_RxHalfCpltCallback>
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b21      	cmp	r3, #33	; 0x21
 8004fee:	d108      	bne.n	8005002 <UART_DMAError+0x46>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ffc:	68b8      	ldr	r0, [r7, #8]
 8004ffe:	f000 f933 	bl	8005268 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b22      	cmp	r3, #34	; 0x22
 8005022:	d108      	bne.n	8005036 <UART_DMAError+0x7a>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2200      	movs	r2, #0
 800502e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005030:	68b8      	ldr	r0, [r7, #8]
 8005032:	f000 f941 	bl	80052b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f043 0210 	orr.w	r2, r3, #16
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005042:	68b8      	ldr	r0, [r7, #8]
 8005044:	f7ff ff02 	bl	8004e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b090      	sub	sp, #64	; 0x40
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005060:	e050      	b.n	8005104 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d04c      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800506a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800506c:	2b00      	cmp	r3, #0
 800506e:	d007      	beq.n	8005080 <UART_WaitOnFlagUntilTimeout+0x30>
 8005070:	f7fc f8e6 	bl	8001240 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800507c:	429a      	cmp	r2, r3
 800507e:	d241      	bcs.n	8005104 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	330c      	adds	r3, #12
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050a0:	637a      	str	r2, [r7, #52]	; 0x34
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e5      	bne.n	8005080 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3314      	adds	r3, #20
 80050ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	613b      	str	r3, [r7, #16]
   return(result);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3314      	adds	r3, #20
 80050d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d4:	623a      	str	r2, [r7, #32]
 80050d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	6a3a      	ldr	r2, [r7, #32]
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e5      	bne.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e00f      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4013      	ands	r3, r2
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	429a      	cmp	r2, r3
 8005120:	d09f      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3740      	adds	r7, #64	; 0x40
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b098      	sub	sp, #96	; 0x60
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2222      	movs	r2, #34	; 0x22
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	4a40      	ldr	r2, [pc, #256]	; (800525c <UART_Start_Receive_DMA+0x130>)
 800515a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	4a3f      	ldr	r2, [pc, #252]	; (8005260 <UART_Start_Receive_DMA+0x134>)
 8005162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <UART_Start_Receive_DMA+0x138>)
 800516a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	2200      	movs	r2, #0
 8005172:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005174:	f107 0308 	add.w	r3, r7, #8
 8005178:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	f7fc fa48 	bl	8001620 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d019      	beq.n	80051ea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	330c      	adds	r3, #12
 80051d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e5      	bne.n	80051b6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	657b      	str	r3, [r7, #84]	; 0x54
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800520a:	63ba      	str	r2, [r7, #56]	; 0x38
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	617b      	str	r3, [r7, #20]
   return(result);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005234:	653b      	str	r3, [r7, #80]	; 0x50
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800523e:	627a      	str	r2, [r7, #36]	; 0x24
 8005240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6a39      	ldr	r1, [r7, #32]
 8005244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	61fb      	str	r3, [r7, #28]
   return(result);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3760      	adds	r7, #96	; 0x60
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08004e61 	.word	0x08004e61
 8005260:	08004f87 	.word	0x08004f87
 8005264:	08004fbd 	.word	0x08004fbd

08005268 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	61ba      	str	r2, [r7, #24]
 8005292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6979      	ldr	r1, [r7, #20]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	613b      	str	r3, [r7, #16]
   return(result);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80052ac:	bf00      	nop
 80052ae:	3724      	adds	r7, #36	; 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b095      	sub	sp, #84	; 0x54
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052e0:	643a      	str	r2, [r7, #64]	; 0x40
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e5      	bne.n	80052c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3314      	adds	r3, #20
 80052fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	61fb      	str	r3, [r7, #28]
   return(result);
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800531a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e5      	bne.n	80052f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	2b01      	cmp	r3, #1
 800532e:	d119      	bne.n	8005364 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f023 0310 	bic.w	r3, r3, #16
 8005346:	647b      	str	r3, [r7, #68]	; 0x44
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005350:	61ba      	str	r2, [r7, #24]
 8005352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6979      	ldr	r1, [r7, #20]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	613b      	str	r3, [r7, #16]
   return(result);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e5      	bne.n	8005330 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005372:	bf00      	nop
 8005374:	3754      	adds	r7, #84	; 0x54
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff fd57 	bl	8004e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b21      	cmp	r3, #33	; 0x21
 80053b8:	d13e      	bne.n	8005438 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	d114      	bne.n	80053ee <UART_Transmit_IT+0x48>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d110      	bne.n	80053ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	621a      	str	r2, [r3, #32]
 80053ec:	e008      	b.n	8005400 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6211      	str	r1, [r2, #32]
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29b      	uxth	r3, r3
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4619      	mov	r1, r3
 800540e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10f      	bne.n	8005434 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005422:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005432:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	e000      	b.n	800543a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005438:	2302      	movs	r3, #2
  }
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800545c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fcd2 	bl	8004e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b08c      	sub	sp, #48	; 0x30
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b22      	cmp	r3, #34	; 0x22
 8005488:	f040 80ab 	bne.w	80055e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005494:	d117      	bne.n	80054c6 <UART_Receive_IT+0x50>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d113      	bne.n	80054c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	1c9a      	adds	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28
 80054c4:	e026      	b.n	8005514 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d007      	beq.n	80054ea <UART_Receive_IT+0x74>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <UART_Receive_IT+0x82>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e008      	b.n	800550a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005504:	b2da      	uxtb	r2, r3
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29b      	uxth	r3, r3
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4619      	mov	r1, r3
 8005522:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005524:	2b00      	cmp	r3, #0
 8005526:	d15a      	bne.n	80055de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0220 	bic.w	r2, r2, #32
 8005536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	2b01      	cmp	r3, #1
 8005566:	d135      	bne.n	80055d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	613b      	str	r3, [r7, #16]
   return(result);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f023 0310 	bic.w	r3, r3, #16
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	623a      	str	r2, [r7, #32]
 8005590:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	69f9      	ldr	r1, [r7, #28]
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	61bb      	str	r3, [r7, #24]
   return(result);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d10a      	bne.n	80055c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fb f8b7 	bl	8000740 <HAL_UARTEx_RxEventCallback>
 80055d2:	e002      	b.n	80055da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff fc25 	bl	8004e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e002      	b.n	80055e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055e2:	2302      	movs	r3, #2
  }
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3730      	adds	r7, #48	; 0x30
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f0:	b0c0      	sub	sp, #256	; 0x100
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	68d9      	ldr	r1, [r3, #12]
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	ea40 0301 	orr.w	r3, r0, r1
 8005614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	431a      	orrs	r2, r3
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	431a      	orrs	r2, r3
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005644:	f021 010c 	bic.w	r1, r1, #12
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005652:	430b      	orrs	r3, r1
 8005654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005666:	6999      	ldr	r1, [r3, #24]
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	ea40 0301 	orr.w	r3, r0, r1
 8005672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b8f      	ldr	r3, [pc, #572]	; (80058b8 <UART_SetConfig+0x2cc>)
 800567c:	429a      	cmp	r2, r3
 800567e:	d005      	beq.n	800568c <UART_SetConfig+0xa0>
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b8d      	ldr	r3, [pc, #564]	; (80058bc <UART_SetConfig+0x2d0>)
 8005688:	429a      	cmp	r2, r3
 800568a:	d104      	bne.n	8005696 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800568c:	f7fe fb94 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8005690:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005694:	e003      	b.n	800569e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005696:	f7fe fb7b 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 800569a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a8:	f040 810c 	bne.w	80058c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056be:	4622      	mov	r2, r4
 80056c0:	462b      	mov	r3, r5
 80056c2:	1891      	adds	r1, r2, r2
 80056c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80056c6:	415b      	adcs	r3, r3
 80056c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056ce:	4621      	mov	r1, r4
 80056d0:	eb12 0801 	adds.w	r8, r2, r1
 80056d4:	4629      	mov	r1, r5
 80056d6:	eb43 0901 	adc.w	r9, r3, r1
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ee:	4690      	mov	r8, r2
 80056f0:	4699      	mov	r9, r3
 80056f2:	4623      	mov	r3, r4
 80056f4:	eb18 0303 	adds.w	r3, r8, r3
 80056f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056fc:	462b      	mov	r3, r5
 80056fe:	eb49 0303 	adc.w	r3, r9, r3
 8005702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005712:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800571a:	460b      	mov	r3, r1
 800571c:	18db      	adds	r3, r3, r3
 800571e:	653b      	str	r3, [r7, #80]	; 0x50
 8005720:	4613      	mov	r3, r2
 8005722:	eb42 0303 	adc.w	r3, r2, r3
 8005726:	657b      	str	r3, [r7, #84]	; 0x54
 8005728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800572c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005730:	f7fa fdae 	bl	8000290 <__aeabi_uldivmod>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4b61      	ldr	r3, [pc, #388]	; (80058c0 <UART_SetConfig+0x2d4>)
 800573a:	fba3 2302 	umull	r2, r3, r3, r2
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	011c      	lsls	r4, r3, #4
 8005742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005746:	2200      	movs	r2, #0
 8005748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800574c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005754:	4642      	mov	r2, r8
 8005756:	464b      	mov	r3, r9
 8005758:	1891      	adds	r1, r2, r2
 800575a:	64b9      	str	r1, [r7, #72]	; 0x48
 800575c:	415b      	adcs	r3, r3
 800575e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005764:	4641      	mov	r1, r8
 8005766:	eb12 0a01 	adds.w	sl, r2, r1
 800576a:	4649      	mov	r1, r9
 800576c:	eb43 0b01 	adc.w	fp, r3, r1
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800577c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005784:	4692      	mov	sl, r2
 8005786:	469b      	mov	fp, r3
 8005788:	4643      	mov	r3, r8
 800578a:	eb1a 0303 	adds.w	r3, sl, r3
 800578e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005792:	464b      	mov	r3, r9
 8005794:	eb4b 0303 	adc.w	r3, fp, r3
 8005798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057b0:	460b      	mov	r3, r1
 80057b2:	18db      	adds	r3, r3, r3
 80057b4:	643b      	str	r3, [r7, #64]	; 0x40
 80057b6:	4613      	mov	r3, r2
 80057b8:	eb42 0303 	adc.w	r3, r2, r3
 80057bc:	647b      	str	r3, [r7, #68]	; 0x44
 80057be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057c6:	f7fa fd63 	bl	8000290 <__aeabi_uldivmod>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4611      	mov	r1, r2
 80057d0:	4b3b      	ldr	r3, [pc, #236]	; (80058c0 <UART_SetConfig+0x2d4>)
 80057d2:	fba3 2301 	umull	r2, r3, r3, r1
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2264      	movs	r2, #100	; 0x64
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	1acb      	subs	r3, r1, r3
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057e6:	4b36      	ldr	r3, [pc, #216]	; (80058c0 <UART_SetConfig+0x2d4>)
 80057e8:	fba3 2302 	umull	r2, r3, r3, r2
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057f4:	441c      	add	r4, r3
 80057f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005800:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	1891      	adds	r1, r2, r2
 800580e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005810:	415b      	adcs	r3, r3
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005818:	4641      	mov	r1, r8
 800581a:	1851      	adds	r1, r2, r1
 800581c:	6339      	str	r1, [r7, #48]	; 0x30
 800581e:	4649      	mov	r1, r9
 8005820:	414b      	adcs	r3, r1
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005830:	4659      	mov	r1, fp
 8005832:	00cb      	lsls	r3, r1, #3
 8005834:	4651      	mov	r1, sl
 8005836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800583a:	4651      	mov	r1, sl
 800583c:	00ca      	lsls	r2, r1, #3
 800583e:	4610      	mov	r0, r2
 8005840:	4619      	mov	r1, r3
 8005842:	4603      	mov	r3, r0
 8005844:	4642      	mov	r2, r8
 8005846:	189b      	adds	r3, r3, r2
 8005848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800584c:	464b      	mov	r3, r9
 800584e:	460a      	mov	r2, r1
 8005850:	eb42 0303 	adc.w	r3, r2, r3
 8005854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005864:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800586c:	460b      	mov	r3, r1
 800586e:	18db      	adds	r3, r3, r3
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
 8005872:	4613      	mov	r3, r2
 8005874:	eb42 0303 	adc.w	r3, r2, r3
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800587e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005882:	f7fa fd05 	bl	8000290 <__aeabi_uldivmod>
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <UART_SetConfig+0x2d4>)
 800588c:	fba3 1302 	umull	r1, r3, r3, r2
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	2164      	movs	r1, #100	; 0x64
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	3332      	adds	r3, #50	; 0x32
 800589e:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <UART_SetConfig+0x2d4>)
 80058a0:	fba2 2303 	umull	r2, r3, r2, r3
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	f003 0207 	and.w	r2, r3, #7
 80058aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4422      	add	r2, r4
 80058b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058b4:	e105      	b.n	8005ac2 <UART_SetConfig+0x4d6>
 80058b6:	bf00      	nop
 80058b8:	40011000 	.word	0x40011000
 80058bc:	40011400 	.word	0x40011400
 80058c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058d6:	4642      	mov	r2, r8
 80058d8:	464b      	mov	r3, r9
 80058da:	1891      	adds	r1, r2, r2
 80058dc:	6239      	str	r1, [r7, #32]
 80058de:	415b      	adcs	r3, r3
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
 80058e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058e6:	4641      	mov	r1, r8
 80058e8:	1854      	adds	r4, r2, r1
 80058ea:	4649      	mov	r1, r9
 80058ec:	eb43 0501 	adc.w	r5, r3, r1
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	00eb      	lsls	r3, r5, #3
 80058fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058fe:	00e2      	lsls	r2, r4, #3
 8005900:	4614      	mov	r4, r2
 8005902:	461d      	mov	r5, r3
 8005904:	4643      	mov	r3, r8
 8005906:	18e3      	adds	r3, r4, r3
 8005908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800590c:	464b      	mov	r3, r9
 800590e:	eb45 0303 	adc.w	r3, r5, r3
 8005912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005922:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005932:	4629      	mov	r1, r5
 8005934:	008b      	lsls	r3, r1, #2
 8005936:	4621      	mov	r1, r4
 8005938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800593c:	4621      	mov	r1, r4
 800593e:	008a      	lsls	r2, r1, #2
 8005940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005944:	f7fa fca4 	bl	8000290 <__aeabi_uldivmod>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4b60      	ldr	r3, [pc, #384]	; (8005ad0 <UART_SetConfig+0x4e4>)
 800594e:	fba3 2302 	umull	r2, r3, r3, r2
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	011c      	lsls	r4, r3, #4
 8005956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800595a:	2200      	movs	r2, #0
 800595c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005960:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005964:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005968:	4642      	mov	r2, r8
 800596a:	464b      	mov	r3, r9
 800596c:	1891      	adds	r1, r2, r2
 800596e:	61b9      	str	r1, [r7, #24]
 8005970:	415b      	adcs	r3, r3
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005978:	4641      	mov	r1, r8
 800597a:	1851      	adds	r1, r2, r1
 800597c:	6139      	str	r1, [r7, #16]
 800597e:	4649      	mov	r1, r9
 8005980:	414b      	adcs	r3, r1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005990:	4659      	mov	r1, fp
 8005992:	00cb      	lsls	r3, r1, #3
 8005994:	4651      	mov	r1, sl
 8005996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800599a:	4651      	mov	r1, sl
 800599c:	00ca      	lsls	r2, r1, #3
 800599e:	4610      	mov	r0, r2
 80059a0:	4619      	mov	r1, r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	4642      	mov	r2, r8
 80059a6:	189b      	adds	r3, r3, r2
 80059a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ac:	464b      	mov	r3, r9
 80059ae:	460a      	mov	r2, r1
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059d0:	4649      	mov	r1, r9
 80059d2:	008b      	lsls	r3, r1, #2
 80059d4:	4641      	mov	r1, r8
 80059d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059da:	4641      	mov	r1, r8
 80059dc:	008a      	lsls	r2, r1, #2
 80059de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059e2:	f7fa fc55 	bl	8000290 <__aeabi_uldivmod>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	4b39      	ldr	r3, [pc, #228]	; (8005ad0 <UART_SetConfig+0x4e4>)
 80059ec:	fba3 1302 	umull	r1, r3, r3, r2
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	2164      	movs	r1, #100	; 0x64
 80059f4:	fb01 f303 	mul.w	r3, r1, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	3332      	adds	r3, #50	; 0x32
 80059fe:	4a34      	ldr	r2, [pc, #208]	; (8005ad0 <UART_SetConfig+0x4e4>)
 8005a00:	fba2 2303 	umull	r2, r3, r2, r3
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0a:	441c      	add	r4, r3
 8005a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a10:	2200      	movs	r2, #0
 8005a12:	673b      	str	r3, [r7, #112]	; 0x70
 8005a14:	677a      	str	r2, [r7, #116]	; 0x74
 8005a16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a1a:	4642      	mov	r2, r8
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	1891      	adds	r1, r2, r2
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	415b      	adcs	r3, r3
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	1851      	adds	r1, r2, r1
 8005a2e:	6039      	str	r1, [r7, #0]
 8005a30:	4649      	mov	r1, r9
 8005a32:	414b      	adcs	r3, r1
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a42:	4659      	mov	r1, fp
 8005a44:	00cb      	lsls	r3, r1, #3
 8005a46:	4651      	mov	r1, sl
 8005a48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	00ca      	lsls	r2, r1, #3
 8005a50:	4610      	mov	r0, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	4603      	mov	r3, r0
 8005a56:	4642      	mov	r2, r8
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	460a      	mov	r2, r1
 8005a60:	eb42 0303 	adc.w	r3, r2, r3
 8005a64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a70:	667a      	str	r2, [r7, #100]	; 0x64
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a7e:	4649      	mov	r1, r9
 8005a80:	008b      	lsls	r3, r1, #2
 8005a82:	4641      	mov	r1, r8
 8005a84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a88:	4641      	mov	r1, r8
 8005a8a:	008a      	lsls	r2, r1, #2
 8005a8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a90:	f7fa fbfe 	bl	8000290 <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <UART_SetConfig+0x4e4>)
 8005a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2164      	movs	r1, #100	; 0x64
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	3332      	adds	r3, #50	; 0x32
 8005aac:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <UART_SetConfig+0x4e4>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	f003 020f 	and.w	r2, r3, #15
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4422      	add	r2, r4
 8005ac0:	609a      	str	r2, [r3, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ace:	bf00      	nop
 8005ad0:	51eb851f 	.word	0x51eb851f

08005ad4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	f107 001c 	add.w	r0, r7, #28
 8005ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d122      	bne.n	8005b32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d105      	bne.n	8005b26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fbee 	bl	8007308 <USB_CoreReset>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	73fb      	strb	r3, [r7, #15]
 8005b30:	e01a      	b.n	8005b68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 fbe2 	bl	8007308 <USB_CoreReset>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	639a      	str	r2, [r3, #56]	; 0x38
 8005b5a:	e005      	b.n	8005b68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10b      	bne.n	8005b86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f043 0206 	orr.w	r2, r3, #6
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f043 0220 	orr.w	r2, r3, #32
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b92:	b004      	add	sp, #16
 8005b94:	4770      	bx	lr
	...

08005b98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d165      	bne.n	8005c78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4a41      	ldr	r2, [pc, #260]	; (8005cb4 <USB_SetTurnaroundTime+0x11c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d906      	bls.n	8005bc2 <USB_SetTurnaroundTime+0x2a>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4a40      	ldr	r2, [pc, #256]	; (8005cb8 <USB_SetTurnaroundTime+0x120>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d202      	bcs.n	8005bc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005bbc:	230f      	movs	r3, #15
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e062      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4a3c      	ldr	r2, [pc, #240]	; (8005cb8 <USB_SetTurnaroundTime+0x120>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d306      	bcc.n	8005bd8 <USB_SetTurnaroundTime+0x40>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4a3b      	ldr	r2, [pc, #236]	; (8005cbc <USB_SetTurnaroundTime+0x124>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d202      	bcs.n	8005bd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005bd2:	230e      	movs	r3, #14
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e057      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4a38      	ldr	r2, [pc, #224]	; (8005cbc <USB_SetTurnaroundTime+0x124>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d306      	bcc.n	8005bee <USB_SetTurnaroundTime+0x56>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4a37      	ldr	r2, [pc, #220]	; (8005cc0 <USB_SetTurnaroundTime+0x128>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d202      	bcs.n	8005bee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005be8:	230d      	movs	r3, #13
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e04c      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <USB_SetTurnaroundTime+0x128>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d306      	bcc.n	8005c04 <USB_SetTurnaroundTime+0x6c>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4a32      	ldr	r2, [pc, #200]	; (8005cc4 <USB_SetTurnaroundTime+0x12c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d802      	bhi.n	8005c04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005bfe:	230c      	movs	r3, #12
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e041      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <USB_SetTurnaroundTime+0x12c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d906      	bls.n	8005c1a <USB_SetTurnaroundTime+0x82>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4a2e      	ldr	r2, [pc, #184]	; (8005cc8 <USB_SetTurnaroundTime+0x130>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d802      	bhi.n	8005c1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c14:	230b      	movs	r3, #11
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e036      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <USB_SetTurnaroundTime+0x130>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d906      	bls.n	8005c30 <USB_SetTurnaroundTime+0x98>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	4a29      	ldr	r2, [pc, #164]	; (8005ccc <USB_SetTurnaroundTime+0x134>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d802      	bhi.n	8005c30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c2a:	230a      	movs	r3, #10
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e02b      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <USB_SetTurnaroundTime+0x134>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d906      	bls.n	8005c46 <USB_SetTurnaroundTime+0xae>
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4a25      	ldr	r2, [pc, #148]	; (8005cd0 <USB_SetTurnaroundTime+0x138>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d202      	bcs.n	8005c46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c40:	2309      	movs	r3, #9
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e020      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4a21      	ldr	r2, [pc, #132]	; (8005cd0 <USB_SetTurnaroundTime+0x138>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d306      	bcc.n	8005c5c <USB_SetTurnaroundTime+0xc4>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4a20      	ldr	r2, [pc, #128]	; (8005cd4 <USB_SetTurnaroundTime+0x13c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d802      	bhi.n	8005c5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c56:	2308      	movs	r3, #8
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	e015      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <USB_SetTurnaroundTime+0x13c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d906      	bls.n	8005c72 <USB_SetTurnaroundTime+0xda>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <USB_SetTurnaroundTime+0x140>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d202      	bcs.n	8005c72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c6c:	2307      	movs	r3, #7
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e00a      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c72:	2306      	movs	r3, #6
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e007      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c7e:	2309      	movs	r3, #9
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e001      	b.n	8005c88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c84:	2309      	movs	r3, #9
 8005c86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	00d8acbf 	.word	0x00d8acbf
 8005cb8:	00e4e1c0 	.word	0x00e4e1c0
 8005cbc:	00f42400 	.word	0x00f42400
 8005cc0:	01067380 	.word	0x01067380
 8005cc4:	011a499f 	.word	0x011a499f
 8005cc8:	01312cff 	.word	0x01312cff
 8005ccc:	014ca43f 	.word	0x014ca43f
 8005cd0:	016e3600 	.word	0x016e3600
 8005cd4:	01a6ab1f 	.word	0x01a6ab1f
 8005cd8:	01e84800 	.word	0x01e84800

08005cdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f043 0201 	orr.w	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f023 0201 	bic.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d115      	bne.n	8005d6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f7fb fa82 	bl	8001258 <HAL_Delay>
      ms++;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3301      	adds	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f001 fa45 	bl	80071ea <USB_GetMode>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d01e      	beq.n	8005da4 <USB_SetCurrentMode+0x84>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b31      	cmp	r3, #49	; 0x31
 8005d6a:	d9f0      	bls.n	8005d4e <USB_SetCurrentMode+0x2e>
 8005d6c:	e01a      	b.n	8005da4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d115      	bne.n	8005da0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d80:	2001      	movs	r0, #1
 8005d82:	f7fb fa69 	bl	8001258 <HAL_Delay>
      ms++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 fa2c 	bl	80071ea <USB_GetMode>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <USB_SetCurrentMode+0x84>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b31      	cmp	r3, #49	; 0x31
 8005d9c:	d9f0      	bls.n	8005d80 <USB_SetCurrentMode+0x60>
 8005d9e:	e001      	b.n	8005da4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e005      	b.n	8005db0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b32      	cmp	r3, #50	; 0x32
 8005da8:	d101      	bne.n	8005dae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005db8:	b084      	sub	sp, #16
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e009      	b.n	8005dec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	3340      	adds	r3, #64	; 0x40
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	3301      	adds	r3, #1
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b0e      	cmp	r3, #14
 8005df0:	d9f2      	bls.n	8005dd8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11c      	bne.n	8005e32 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e06:	f043 0302 	orr.w	r3, r3, #2
 8005e0a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8005e30:	e00b      	b.n	8005e4a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e50:	461a      	mov	r2, r3
 8005e52:	2300      	movs	r3, #0
 8005e54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e64:	461a      	mov	r2, r3
 8005e66:	680b      	ldr	r3, [r1, #0]
 8005e68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d10c      	bne.n	8005e8a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e76:	2100      	movs	r1, #0
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f965 	bl	8006148 <USB_SetDevSpeed>
 8005e7e:	e008      	b.n	8005e92 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e80:	2101      	movs	r1, #1
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f960 	bl	8006148 <USB_SetDevSpeed>
 8005e88:	e003      	b.n	8005e92 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f95b 	bl	8006148 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e92:	2110      	movs	r1, #16
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f8f3 	bl	8006080 <USB_FlushTxFifo>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f91f 	bl	80060e8 <USB_FlushRxFifo>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	461a      	mov	r2, r3
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	e043      	b.n	8005f66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef4:	d118      	bne.n	8005f28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e013      	b.n	8005f3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e008      	b.n	8005f3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	461a      	mov	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	461a      	mov	r2, r3
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3301      	adds	r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d3b7      	bcc.n	8005ede <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e043      	b.n	8005ffc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f8a:	d118      	bne.n	8005fbe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e013      	b.n	8005fd0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	e008      	b.n	8005fd0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	429a      	cmp	r2, r3
 8006002:	d3b7      	bcc.n	8005f74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006016:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006024:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	2b00      	cmp	r3, #0
 800602a:	d105      	bne.n	8006038 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f043 0210 	orr.w	r2, r3, #16
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	4b0f      	ldr	r3, [pc, #60]	; (800607c <USB_DevInit+0x2c4>)
 800603e:	4313      	orrs	r3, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f043 0208 	orr.w	r2, r3, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d107      	bne.n	800606c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006064:	f043 0304 	orr.w	r3, r3, #4
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006078:	b004      	add	sp, #16
 800607a:	4770      	bx	lr
 800607c:	803c3800 	.word	0x803c3800

08006080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3301      	adds	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4a13      	ldr	r2, [pc, #76]	; (80060e4 <USB_FlushTxFifo+0x64>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d901      	bls.n	80060a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e01b      	b.n	80060d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	daf2      	bge.n	800608e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	019b      	lsls	r3, r3, #6
 80060b0:	f043 0220 	orr.w	r2, r3, #32
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a08      	ldr	r2, [pc, #32]	; (80060e4 <USB_FlushTxFifo+0x64>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e006      	b.n	80060d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d0f0      	beq.n	80060b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	00030d40 	.word	0x00030d40

080060e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a11      	ldr	r2, [pc, #68]	; (8006144 <USB_FlushRxFifo+0x5c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e018      	b.n	8006138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	daf2      	bge.n	80060f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2210      	movs	r2, #16
 8006116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a08      	ldr	r2, [pc, #32]	; (8006144 <USB_FlushRxFifo+0x5c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e006      	b.n	8006138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b10      	cmp	r3, #16
 8006134:	d0f0      	beq.n	8006118 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	00030d40 	.word	0x00030d40

08006148 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006168:	4313      	orrs	r3, r2
 800616a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0306 	and.w	r3, r3, #6
 8006192:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800619a:	2300      	movs	r3, #0
 800619c:	75fb      	strb	r3, [r7, #23]
 800619e:	e00a      	b.n	80061b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d002      	beq.n	80061ac <USB_GetDevSpeed+0x32>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b06      	cmp	r3, #6
 80061aa:	d102      	bne.n	80061b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061ac:	2302      	movs	r3, #2
 80061ae:	75fb      	strb	r3, [r7, #23]
 80061b0:	e001      	b.n	80061b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061b2:	230f      	movs	r3, #15
 80061b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d13a      	bne.n	8006256 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	2101      	movs	r1, #1
 80061f2:	fa01 f303 	lsl.w	r3, r1, r3
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061fe:	4313      	orrs	r3, r2
 8006200:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d155      	bne.n	80062c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	791b      	ldrb	r3, [r3, #4]
 8006232:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006234:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	059b      	lsls	r3, r3, #22
 800623a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800623c:	4313      	orrs	r3, r2
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	440a      	add	r2, r1
 8006246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800624e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	e036      	b.n	80062c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625c:	69da      	ldr	r2, [r3, #28]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	2101      	movs	r1, #1
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	041b      	lsls	r3, r3, #16
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006274:	4313      	orrs	r3, r2
 8006276:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d11a      	bne.n	80062c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	791b      	ldrb	r3, [r3, #4]
 80062a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062aa:	430b      	orrs	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d161      	bne.n	80063b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006306:	d11f      	bne.n	8006348 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006326:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006346:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	2101      	movs	r1, #1
 800635a:	fa01 f303 	lsl.w	r3, r1, r3
 800635e:	b29b      	uxth	r3, r3
 8006360:	43db      	mvns	r3, r3
 8006362:	68f9      	ldr	r1, [r7, #12]
 8006364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006368:	4013      	ands	r3, r2
 800636a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	2101      	movs	r1, #1
 800637e:	fa01 f303 	lsl.w	r3, r1, r3
 8006382:	b29b      	uxth	r3, r3
 8006384:	43db      	mvns	r3, r3
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800638c:	4013      	ands	r3, r2
 800638e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	0159      	lsls	r1, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	440b      	add	r3, r1
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	4619      	mov	r1, r3
 80063ac:	4b35      	ldr	r3, [pc, #212]	; (8006484 <USB_DeactivateEndpoint+0x1b0>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	600b      	str	r3, [r1, #0]
 80063b2:	e060      	b.n	8006476 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ca:	d11f      	bne.n	800640c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800640a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	2101      	movs	r1, #1
 800641e:	fa01 f303 	lsl.w	r3, r1, r3
 8006422:	041b      	lsls	r3, r3, #16
 8006424:	43db      	mvns	r3, r3
 8006426:	68f9      	ldr	r1, [r7, #12]
 8006428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800642c:	4013      	ands	r3, r2
 800642e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006436:	69da      	ldr	r2, [r3, #28]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	2101      	movs	r1, #1
 8006442:	fa01 f303 	lsl.w	r3, r1, r3
 8006446:	041b      	lsls	r3, r3, #16
 8006448:	43db      	mvns	r3, r3
 800644a:	68f9      	ldr	r1, [r7, #12]
 800644c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006450:	4013      	ands	r3, r2
 8006452:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	0159      	lsls	r1, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	440b      	add	r3, r1
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	4619      	mov	r1, r3
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <USB_DeactivateEndpoint+0x1b4>)
 8006472:	4013      	ands	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	ec337800 	.word	0xec337800
 8006488:	eff37800 	.word	0xeff37800

0800648c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	f040 815c 	bne.w	8006766 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d132      	bne.n	800651c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	440a      	add	r2, r1
 8006510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006514:	0cdb      	lsrs	r3, r3, #19
 8006516:	04db      	lsls	r3, r3, #19
 8006518:	6113      	str	r3, [r2, #16]
 800651a:	e074      	b.n	8006606 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006536:	0cdb      	lsrs	r3, r3, #19
 8006538:	04db      	lsls	r3, r3, #19
 800653a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006556:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800655a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800655e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6999      	ldr	r1, [r3, #24]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	440b      	add	r3, r1
 8006578:	1e59      	subs	r1, r3, #1
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006582:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006584:	4b9d      	ldr	r3, [pc, #628]	; (80067fc <USB_EPStartXfer+0x370>)
 8006586:	400b      	ands	r3, r1
 8006588:	69b9      	ldr	r1, [r7, #24]
 800658a:	0148      	lsls	r0, r1, #5
 800658c:	69f9      	ldr	r1, [r7, #28]
 800658e:	4401      	add	r1, r0
 8006590:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006594:	4313      	orrs	r3, r2
 8006596:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ae:	69b9      	ldr	r1, [r7, #24]
 80065b0:	0148      	lsls	r0, r1, #5
 80065b2:	69f9      	ldr	r1, [r7, #28]
 80065b4:	4401      	add	r1, r0
 80065b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065ba:	4313      	orrs	r3, r2
 80065bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	791b      	ldrb	r3, [r3, #4]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d11f      	bne.n	8006606 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80065e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006604:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d14b      	bne.n	80066a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d009      	beq.n	8006628 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	461a      	mov	r2, r3
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	791b      	ldrb	r3, [r3, #4]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d128      	bne.n	8006682 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663c:	2b00      	cmp	r3, #0
 800663e:	d110      	bne.n	8006662 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e00f      	b.n	8006682 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006680:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e133      	b.n	800690c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	791b      	ldrb	r3, [r3, #4]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d015      	beq.n	80066f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 811b 	beq.w	800690c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	2101      	movs	r1, #1
 80066e8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ec:	69f9      	ldr	r1, [r7, #28]
 80066ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f2:	4313      	orrs	r3, r2
 80066f4:	634b      	str	r3, [r1, #52]	; 0x34
 80066f6:	e109      	b.n	800690c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006722:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e00f      	b.n	800674a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	440a      	add	r2, r1
 8006740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006748:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6919      	ldr	r1, [r3, #16]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	b298      	uxth	r0, r3
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	4603      	mov	r3, r0
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fade 	bl	8006d20 <USB_WritePacket>
 8006764:	e0d2      	b.n	800690c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006780:	0cdb      	lsrs	r3, r3, #19
 8006782:	04db      	lsls	r3, r3, #19
 8006784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	440a      	add	r2, r1
 800679c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d126      	bne.n	8006800 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c8:	69b9      	ldr	r1, [r7, #24]
 80067ca:	0148      	lsls	r0, r1, #5
 80067cc:	69f9      	ldr	r1, [r7, #28]
 80067ce:	4401      	add	r1, r0
 80067d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067d4:	4313      	orrs	r3, r2
 80067d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067f6:	6113      	str	r3, [r2, #16]
 80067f8:	e03a      	b.n	8006870 <USB_EPStartXfer+0x3e4>
 80067fa:	bf00      	nop
 80067fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	4413      	add	r3, r2
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	8afa      	ldrh	r2, [r7, #22]
 800681c:	fb03 f202 	mul.w	r2, r3, r2
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	691a      	ldr	r2, [r3, #16]
 8006832:	8afb      	ldrh	r3, [r7, #22]
 8006834:	04d9      	lsls	r1, r3, #19
 8006836:	4b38      	ldr	r3, [pc, #224]	; (8006918 <USB_EPStartXfer+0x48c>)
 8006838:	400b      	ands	r3, r1
 800683a:	69b9      	ldr	r1, [r7, #24]
 800683c:	0148      	lsls	r0, r1, #5
 800683e:	69f9      	ldr	r1, [r7, #28]
 8006840:	4401      	add	r1, r0
 8006842:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006846:	4313      	orrs	r3, r2
 8006848:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006860:	69b9      	ldr	r1, [r7, #24]
 8006862:	0148      	lsls	r0, r1, #5
 8006864:	69f9      	ldr	r1, [r7, #28]
 8006866:	4401      	add	r1, r0
 8006868:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800686c:	4313      	orrs	r3, r2
 800686e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d10d      	bne.n	8006892 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6919      	ldr	r1, [r3, #16]
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688e:	460a      	mov	r2, r1
 8006890:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	791b      	ldrb	r3, [r3, #4]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d128      	bne.n	80068ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d110      	bne.n	80068cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e00f      	b.n	80068ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006906:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800690a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	1ff80000 	.word	0x1ff80000

0800691c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b01      	cmp	r3, #1
 800693a:	f040 80ce 	bne.w	8006ada <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d132      	bne.n	80069ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	440a      	add	r2, r1
 800695c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006960:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006964:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006968:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	0151      	lsls	r1, r2, #5
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	440a      	add	r2, r1
 8006980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006984:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006988:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a4:	0cdb      	lsrs	r3, r3, #19
 80069a6:	04db      	lsls	r3, r3, #19
 80069a8:	6113      	str	r3, [r2, #16]
 80069aa:	e04e      	b.n	8006a4a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c6:	0cdb      	lsrs	r3, r3, #19
 80069c8:	04db      	lsls	r3, r3, #19
 80069ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	699a      	ldr	r2, [r3, #24]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d903      	bls.n	8006a04 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a3a:	6939      	ldr	r1, [r7, #16]
 8006a3c:	0148      	lsls	r0, r1, #5
 8006a3e:	6979      	ldr	r1, [r7, #20]
 8006a40:	4401      	add	r1, r0
 8006a42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a46:	4313      	orrs	r3, r2
 8006a48:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d11e      	bne.n	8006a8e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d009      	beq.n	8006a6c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a64:	461a      	mov	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e097      	b.n	8006bbe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 8083 	beq.w	8006bbe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	2101      	movs	r1, #1
 8006aca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ace:	6979      	ldr	r1, [r7, #20]
 8006ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	634b      	str	r3, [r1, #52]	; 0x34
 8006ad8:	e071      	b.n	8006bbe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af4:	0cdb      	lsrs	r3, r3, #19
 8006af6:	04db      	lsls	r3, r3, #19
 8006af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b6c:	6939      	ldr	r1, [r7, #16]
 8006b6e:	0148      	lsls	r0, r1, #5
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	4401      	add	r1, r0
 8006b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d10d      	bne.n	8006b9e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6919      	ldr	r1, [r3, #16]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d14a      	bne.n	8006c80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c02:	f040 8086 	bne.w	8006d12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	7812      	ldrb	r2, [r2, #0]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d902      	bls.n	8006c64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
          break;
 8006c62:	e056      	b.n	8006d12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c7c:	d0e7      	beq.n	8006c4e <USB_EPStopXfer+0x82>
 8006c7e:	e048      	b.n	8006d12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c98:	d13b      	bne.n	8006d12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	7812      	ldrb	r2, [r2, #0]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	7812      	ldrb	r2, [r2, #0]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f242 7210 	movw	r2, #10000	; 0x2710
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d902      	bls.n	8006cf8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cf6:	e00c      	b.n	8006d12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d10:	d0e7      	beq.n	8006ce2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	460b      	mov	r3, r1
 8006d30:	71fb      	strb	r3, [r7, #7]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d123      	bne.n	8006d8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d46:	88bb      	ldrh	r3, [r7, #4]
 8006d48:	3303      	adds	r3, #3
 8006d4a:	089b      	lsrs	r3, r3, #2
 8006d4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	e018      	b.n	8006d86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	031a      	lsls	r2, r3, #12
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d60:	461a      	mov	r2, r3
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	3301      	adds	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	3301      	adds	r3, #1
 8006d78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	3301      	adds	r3, #1
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d3e2      	bcc.n	8006d54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3724      	adds	r7, #36	; 0x24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b08b      	sub	sp, #44	; 0x2c
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	089b      	lsrs	r3, r3, #2
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006dba:	88fb      	ldrh	r3, [r7, #6]
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	623b      	str	r3, [r7, #32]
 8006dc6:	e014      	b.n	8006df2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	3301      	adds	r3, #1
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	3301      	adds	r3, #1
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	3301      	adds	r3, #1
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	3301      	adds	r3, #1
 8006df0:	623b      	str	r3, [r7, #32]
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d3e6      	bcc.n	8006dc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006dfa:	8bfb      	ldrh	r3, [r7, #30]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01e      	beq.n	8006e3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f107 0310 	add.w	r3, r7, #16
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	701a      	strb	r2, [r3, #0]
      i++;
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	3301      	adds	r3, #1
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e32:	8bfb      	ldrh	r3, [r7, #30]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e38:	8bfb      	ldrh	r3, [r7, #30]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1ea      	bne.n	8006e14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	372c      	adds	r7, #44	; 0x2c
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	785b      	ldrb	r3, [r3, #1]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d12c      	bne.n	8006ec2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	db12      	blt.n	8006ea0 <USB_EPSetStall+0x54>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00f      	beq.n	8006ea0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	e02b      	b.n	8006f1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	db12      	blt.n	8006efa <USB_EPSetStall+0xae>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00f      	beq.n	8006efa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	785b      	ldrb	r3, [r3, #1]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d128      	bne.n	8006f96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	791b      	ldrb	r3, [r3, #4]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d003      	beq.n	8006f74 <USB_EPClearStall+0x4c>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	791b      	ldrb	r3, [r3, #4]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d138      	bne.n	8006fe6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e027      	b.n	8006fe6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	791b      	ldrb	r3, [r3, #4]
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d003      	beq.n	8006fc6 <USB_EPClearStall+0x9e>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	791b      	ldrb	r3, [r3, #4]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d10f      	bne.n	8006fe6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007012:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007016:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800702e:	4313      	orrs	r3, r2
 8007030:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800705a:	f023 0303 	bic.w	r3, r3, #3
 800705e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800706e:	f023 0302 	bic.w	r3, r3, #2
 8007072:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800709c:	f023 0303 	bic.w	r3, r3, #3
 80070a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b0:	f043 0302 	orr.w	r3, r3, #2
 80070b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4013      	ands	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070dc:	68fb      	ldr	r3, [r7, #12]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	4013      	ands	r3, r2
 800710c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	0c1b      	lsrs	r3, r3, #16
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	4013      	ands	r3, r2
 8007140:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	b29b      	uxth	r3, r3
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	4013      	ands	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007180:	68bb      	ldr	r3, [r7, #8]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800718e:	b480      	push	{r7}
 8007190:	b087      	sub	sp, #28
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	fa22 f303 	lsr.w	r3, r2, r3
 80071be:	01db      	lsls	r3, r3, #7
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4013      	ands	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071dc:	68bb      	ldr	r3, [r7, #8]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	f003 0301 	and.w	r3, r3, #1
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007220:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007224:	f023 0307 	bic.w	r3, r3, #7
 8007228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	460b      	mov	r3, r1
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	333c      	adds	r3, #60	; 0x3c
 8007262:	3304      	adds	r3, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	4a26      	ldr	r2, [pc, #152]	; (8007304 <USB_EP0_OutStart+0xb8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d90a      	bls.n	8007286 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800727c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007280:	d101      	bne.n	8007286 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	e037      	b.n	80072f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728c:	461a      	mov	r2, r3
 800728e:	2300      	movs	r3, #0
 8007290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b4:	f043 0318 	orr.w	r3, r3, #24
 80072b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80072cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d10f      	bne.n	80072f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	4f54300a 	.word	0x4f54300a

08007308 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4a13      	ldr	r2, [pc, #76]	; (800736c <USB_CoreReset+0x64>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e01b      	b.n	800735e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	daf2      	bge.n	8007314 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f043 0201 	orr.w	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a09      	ldr	r2, [pc, #36]	; (800736c <USB_CoreReset+0x64>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d901      	bls.n	8007350 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e006      	b.n	800735e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b01      	cmp	r3, #1
 800735a:	d0f0      	beq.n	800733e <USB_CoreReset+0x36>

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	00030d40 	.word	0x00030d40

08007370 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800737c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007380:	f002 fc8a 	bl	8009c98 <USBD_static_malloc>
 8007384:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d109      	bne.n	80073a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32b0      	adds	r2, #176	; 0xb0
 8007396:	2100      	movs	r1, #0
 8007398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800739c:	2302      	movs	r3, #2
 800739e:	e0d4      	b.n	800754a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80073a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80073a4:	2100      	movs	r1, #0
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f002 fcf2 	bl	8009d90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	32b0      	adds	r2, #176	; 0xb0
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	32b0      	adds	r2, #176	; 0xb0
 80073c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	7c1b      	ldrb	r3, [r3, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d138      	bne.n	800744a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073d8:	4b5e      	ldr	r3, [pc, #376]	; (8007554 <USBD_CDC_Init+0x1e4>)
 80073da:	7819      	ldrb	r1, [r3, #0]
 80073dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e0:	2202      	movs	r2, #2
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f002 fb35 	bl	8009a52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073e8:	4b5a      	ldr	r3, [pc, #360]	; (8007554 <USBD_CDC_Init+0x1e4>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f003 020f 	and.w	r2, r3, #15
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3324      	adds	r3, #36	; 0x24
 80073fe:	2201      	movs	r2, #1
 8007400:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007402:	4b55      	ldr	r3, [pc, #340]	; (8007558 <USBD_CDC_Init+0x1e8>)
 8007404:	7819      	ldrb	r1, [r3, #0]
 8007406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800740a:	2202      	movs	r2, #2
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f002 fb20 	bl	8009a52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007412:	4b51      	ldr	r3, [pc, #324]	; (8007558 <USBD_CDC_Init+0x1e8>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	f003 020f 	and.w	r2, r3, #15
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800742a:	2201      	movs	r2, #1
 800742c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800742e:	4b4b      	ldr	r3, [pc, #300]	; (800755c <USBD_CDC_Init+0x1ec>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3326      	adds	r3, #38	; 0x26
 8007444:	2210      	movs	r2, #16
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e035      	b.n	80074b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800744a:	4b42      	ldr	r3, [pc, #264]	; (8007554 <USBD_CDC_Init+0x1e4>)
 800744c:	7819      	ldrb	r1, [r3, #0]
 800744e:	2340      	movs	r3, #64	; 0x40
 8007450:	2202      	movs	r2, #2
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f002 fafd 	bl	8009a52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007458:	4b3e      	ldr	r3, [pc, #248]	; (8007554 <USBD_CDC_Init+0x1e4>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 020f 	and.w	r2, r3, #15
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	3324      	adds	r3, #36	; 0x24
 800746e:	2201      	movs	r2, #1
 8007470:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007472:	4b39      	ldr	r3, [pc, #228]	; (8007558 <USBD_CDC_Init+0x1e8>)
 8007474:	7819      	ldrb	r1, [r3, #0]
 8007476:	2340      	movs	r3, #64	; 0x40
 8007478:	2202      	movs	r2, #2
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f002 fae9 	bl	8009a52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007480:	4b35      	ldr	r3, [pc, #212]	; (8007558 <USBD_CDC_Init+0x1e8>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007498:	2201      	movs	r2, #1
 800749a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800749c:	4b2f      	ldr	r3, [pc, #188]	; (800755c <USBD_CDC_Init+0x1ec>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	f003 020f 	and.w	r2, r3, #15
 80074a4:	6879      	ldr	r1, [r7, #4]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	440b      	add	r3, r1
 80074b0:	3326      	adds	r3, #38	; 0x26
 80074b2:	2210      	movs	r2, #16
 80074b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074b6:	4b29      	ldr	r3, [pc, #164]	; (800755c <USBD_CDC_Init+0x1ec>)
 80074b8:	7819      	ldrb	r1, [r3, #0]
 80074ba:	2308      	movs	r3, #8
 80074bc:	2203      	movs	r2, #3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f002 fac7 	bl	8009a52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80074c4:	4b25      	ldr	r3, [pc, #148]	; (800755c <USBD_CDC_Init+0x1ec>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f003 020f 	and.w	r2, r3, #15
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	3324      	adds	r3, #36	; 0x24
 80074da:	2201      	movs	r2, #1
 80074dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	33b0      	adds	r3, #176	; 0xb0
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007514:	2302      	movs	r3, #2
 8007516:	e018      	b.n	800754a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7c1b      	ldrb	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007520:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <USBD_CDC_Init+0x1e8>)
 8007522:	7819      	ldrb	r1, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800752a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f002 fb7e 	bl	8009c30 <USBD_LL_PrepareReceive>
 8007534:	e008      	b.n	8007548 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007536:	4b08      	ldr	r3, [pc, #32]	; (8007558 <USBD_CDC_Init+0x1e8>)
 8007538:	7819      	ldrb	r1, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007540:	2340      	movs	r3, #64	; 0x40
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f002 fb74 	bl	8009c30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000093 	.word	0x20000093
 8007558:	20000094 	.word	0x20000094
 800755c:	20000095 	.word	0x20000095

08007560 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800756c:	4b3a      	ldr	r3, [pc, #232]	; (8007658 <USBD_CDC_DeInit+0xf8>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f002 fa93 	bl	8009a9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007578:	4b37      	ldr	r3, [pc, #220]	; (8007658 <USBD_CDC_DeInit+0xf8>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 020f 	and.w	r2, r3, #15
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	3324      	adds	r3, #36	; 0x24
 800758e:	2200      	movs	r2, #0
 8007590:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007592:	4b32      	ldr	r3, [pc, #200]	; (800765c <USBD_CDC_DeInit+0xfc>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f002 fa80 	bl	8009a9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800759e:	4b2f      	ldr	r3, [pc, #188]	; (800765c <USBD_CDC_DeInit+0xfc>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f003 020f 	and.w	r2, r3, #15
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075b6:	2200      	movs	r2, #0
 80075b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80075ba:	4b29      	ldr	r3, [pc, #164]	; (8007660 <USBD_CDC_DeInit+0x100>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f002 fa6c 	bl	8009a9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80075c6:	4b26      	ldr	r3, [pc, #152]	; (8007660 <USBD_CDC_DeInit+0x100>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f003 020f 	and.w	r2, r3, #15
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	3324      	adds	r3, #36	; 0x24
 80075dc:	2200      	movs	r2, #0
 80075de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80075e0:	4b1f      	ldr	r3, [pc, #124]	; (8007660 <USBD_CDC_DeInit+0x100>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 020f 	and.w	r2, r3, #15
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	3326      	adds	r3, #38	; 0x26
 80075f6:	2200      	movs	r2, #0
 80075f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	32b0      	adds	r2, #176	; 0xb0
 8007604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01f      	beq.n	800764c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	33b0      	adds	r3, #176	; 0xb0
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	32b0      	adds	r2, #176	; 0xb0
 800762a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762e:	4618      	mov	r0, r3
 8007630:	f002 fb40 	bl	8009cb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	32b0      	adds	r2, #176	; 0xb0
 800763e:	2100      	movs	r1, #0
 8007640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000093 	.word	0x20000093
 800765c:	20000094 	.word	0x20000094
 8007660:	20000095 	.word	0x20000095

08007664 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	32b0      	adds	r2, #176	; 0xb0
 8007678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007690:	2303      	movs	r3, #3
 8007692:	e0bf      	b.n	8007814 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800769c:	2b00      	cmp	r3, #0
 800769e:	d050      	beq.n	8007742 <USBD_CDC_Setup+0xde>
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	f040 80af 	bne.w	8007804 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88db      	ldrh	r3, [r3, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d03a      	beq.n	8007724 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da1b      	bge.n	80076f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	33b0      	adds	r3, #176	; 0xb0
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80076ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	88d2      	ldrh	r2, [r2, #6]
 80076d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	88db      	ldrh	r3, [r3, #6]
 80076da:	2b07      	cmp	r3, #7
 80076dc:	bf28      	it	cs
 80076de:	2307      	movcs	r3, #7
 80076e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	89fa      	ldrh	r2, [r7, #14]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fd89 	bl	8009200 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80076ee:	e090      	b.n	8007812 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	785a      	ldrb	r2, [r3, #1]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	88db      	ldrh	r3, [r3, #6]
 80076fe:	2b3f      	cmp	r3, #63	; 0x3f
 8007700:	d803      	bhi.n	800770a <USBD_CDC_Setup+0xa6>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	88db      	ldrh	r3, [r3, #6]
 8007706:	b2da      	uxtb	r2, r3
 8007708:	e000      	b.n	800770c <USBD_CDC_Setup+0xa8>
 800770a:	2240      	movs	r2, #64	; 0x40
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007712:	6939      	ldr	r1, [r7, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800771a:	461a      	mov	r2, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 fd9b 	bl	8009258 <USBD_CtlPrepareRx>
      break;
 8007722:	e076      	b.n	8007812 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	33b0      	adds	r3, #176	; 0xb0
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	7850      	ldrb	r0, [r2, #1]
 800773a:	2200      	movs	r2, #0
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	4798      	blx	r3
      break;
 8007740:	e067      	b.n	8007812 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b0b      	cmp	r3, #11
 8007748:	d851      	bhi.n	80077ee <USBD_CDC_Setup+0x18a>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <USBD_CDC_Setup+0xec>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	08007781 	.word	0x08007781
 8007754:	080077fd 	.word	0x080077fd
 8007758:	080077ef 	.word	0x080077ef
 800775c:	080077ef 	.word	0x080077ef
 8007760:	080077ef 	.word	0x080077ef
 8007764:	080077ef 	.word	0x080077ef
 8007768:	080077ef 	.word	0x080077ef
 800776c:	080077ef 	.word	0x080077ef
 8007770:	080077ef 	.word	0x080077ef
 8007774:	080077ef 	.word	0x080077ef
 8007778:	080077ab 	.word	0x080077ab
 800777c:	080077d5 	.word	0x080077d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b03      	cmp	r3, #3
 800778a:	d107      	bne.n	800779c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800778c:	f107 030a 	add.w	r3, r7, #10
 8007790:	2202      	movs	r2, #2
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fd33 	bl	8009200 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800779a:	e032      	b.n	8007802 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fcbd 	bl	800911e <USBD_CtlError>
            ret = USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	75fb      	strb	r3, [r7, #23]
          break;
 80077a8:	e02b      	b.n	8007802 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d107      	bne.n	80077c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077b6:	f107 030d 	add.w	r3, r7, #13
 80077ba:	2201      	movs	r2, #1
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f001 fd1e 	bl	8009200 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c4:	e01d      	b.n	8007802 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fca8 	bl	800911e <USBD_CtlError>
            ret = USBD_FAIL;
 80077ce:	2303      	movs	r3, #3
 80077d0:	75fb      	strb	r3, [r7, #23]
          break;
 80077d2:	e016      	b.n	8007802 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d00f      	beq.n	8007800 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 fc9b 	bl	800911e <USBD_CtlError>
            ret = USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077ec:	e008      	b.n	8007800 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fc94 	bl	800911e <USBD_CtlError>
          ret = USBD_FAIL;
 80077f6:	2303      	movs	r3, #3
 80077f8:	75fb      	strb	r3, [r7, #23]
          break;
 80077fa:	e002      	b.n	8007802 <USBD_CDC_Setup+0x19e>
          break;
 80077fc:	bf00      	nop
 80077fe:	e008      	b.n	8007812 <USBD_CDC_Setup+0x1ae>
          break;
 8007800:	bf00      	nop
      }
      break;
 8007802:	e006      	b.n	8007812 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 fc89 	bl	800911e <USBD_CtlError>
      ret = USBD_FAIL;
 800780c:	2303      	movs	r3, #3
 800780e:	75fb      	strb	r3, [r7, #23]
      break;
 8007810:	bf00      	nop
  }

  return (uint8_t)ret;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800782e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	32b0      	adds	r2, #176	; 0xb0
 800783a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007842:	2303      	movs	r3, #3
 8007844:	e065      	b.n	8007912 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	32b0      	adds	r2, #176	; 0xb0
 8007850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007854:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	f003 020f 	and.w	r2, r3, #15
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	3318      	adds	r3, #24
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d02f      	beq.n	80078d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f003 020f 	and.w	r2, r3, #15
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	3318      	adds	r3, #24
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	f003 010f 	and.w	r1, r3, #15
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	460b      	mov	r3, r1
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	440b      	add	r3, r1
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4403      	add	r3, r0
 8007898:	3348      	adds	r3, #72	; 0x48
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	fbb2 f1f3 	udiv	r1, r2, r3
 80078a0:	fb01 f303 	mul.w	r3, r1, r3
 80078a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d112      	bne.n	80078d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	3318      	adds	r3, #24
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078c2:	78f9      	ldrb	r1, [r7, #3]
 80078c4:	2300      	movs	r3, #0
 80078c6:	2200      	movs	r2, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 f990 	bl	8009bee <USBD_LL_Transmit>
 80078ce:	e01f      	b.n	8007910 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	33b0      	adds	r3, #176	; 0xb0
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	33b0      	adds	r3, #176	; 0xb0
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	32b0      	adds	r2, #176	; 0xb0
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	32b0      	adds	r2, #176	; 0xb0
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007948:	2303      	movs	r3, #3
 800794a:	e01a      	b.n	8007982 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f002 f98e 	bl	8009c72 <USBD_LL_GetRxDataSize>
 8007956:	4602      	mov	r2, r0
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	33b0      	adds	r3, #176	; 0xb0
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800797c:	4611      	mov	r1, r2
 800797e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	32b0      	adds	r2, #176	; 0xb0
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e025      	b.n	80079f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	33b0      	adds	r3, #176	; 0xb0
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01a      	beq.n	80079f6 <USBD_CDC_EP0_RxReady+0x6c>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079c6:	2bff      	cmp	r3, #255	; 0xff
 80079c8:	d015      	beq.n	80079f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	33b0      	adds	r3, #176	; 0xb0
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80079e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079ea:	b292      	uxth	r2, r2
 80079ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	22ff      	movs	r2, #255	; 0xff
 80079f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a08:	2182      	movs	r1, #130	; 0x82
 8007a0a:	4818      	ldr	r0, [pc, #96]	; (8007a6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a0c:	f000 fd4f 	bl	80084ae <USBD_GetEpDesc>
 8007a10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a12:	2101      	movs	r1, #1
 8007a14:	4815      	ldr	r0, [pc, #84]	; (8007a6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a16:	f000 fd4a 	bl	80084ae <USBD_GetEpDesc>
 8007a1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a1c:	2181      	movs	r1, #129	; 0x81
 8007a1e:	4813      	ldr	r0, [pc, #76]	; (8007a6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a20:	f000 fd45 	bl	80084ae <USBD_GetEpDesc>
 8007a24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d006      	beq.n	8007a46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a40:	711a      	strb	r2, [r3, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d006      	beq.n	8007a5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a54:	711a      	strb	r2, [r3, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2243      	movs	r2, #67	; 0x43
 8007a5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a60:	4b02      	ldr	r3, [pc, #8]	; (8007a6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000050 	.word	0x20000050

08007a70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a78:	2182      	movs	r1, #130	; 0x82
 8007a7a:	4818      	ldr	r0, [pc, #96]	; (8007adc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a7c:	f000 fd17 	bl	80084ae <USBD_GetEpDesc>
 8007a80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a82:	2101      	movs	r1, #1
 8007a84:	4815      	ldr	r0, [pc, #84]	; (8007adc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a86:	f000 fd12 	bl	80084ae <USBD_GetEpDesc>
 8007a8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a8c:	2181      	movs	r1, #129	; 0x81
 8007a8e:	4813      	ldr	r0, [pc, #76]	; (8007adc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a90:	f000 fd0d 	bl	80084ae <USBD_GetEpDesc>
 8007a94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d006      	beq.n	8007ab6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	711a      	strb	r2, [r3, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f042 0202 	orr.w	r2, r2, #2
 8007ab4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d006      	beq.n	8007aca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	711a      	strb	r2, [r3, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f042 0202 	orr.w	r2, r2, #2
 8007ac8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2243      	movs	r2, #67	; 0x43
 8007ace:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000050 	.word	0x20000050

08007ae0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ae8:	2182      	movs	r1, #130	; 0x82
 8007aea:	4818      	ldr	r0, [pc, #96]	; (8007b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007aec:	f000 fcdf 	bl	80084ae <USBD_GetEpDesc>
 8007af0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007af2:	2101      	movs	r1, #1
 8007af4:	4815      	ldr	r0, [pc, #84]	; (8007b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007af6:	f000 fcda 	bl	80084ae <USBD_GetEpDesc>
 8007afa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007afc:	2181      	movs	r1, #129	; 0x81
 8007afe:	4813      	ldr	r0, [pc, #76]	; (8007b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b00:	f000 fcd5 	bl	80084ae <USBD_GetEpDesc>
 8007b04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2210      	movs	r2, #16
 8007b10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d006      	beq.n	8007b26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b20:	711a      	strb	r2, [r3, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d006      	beq.n	8007b3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b34:	711a      	strb	r2, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2243      	movs	r2, #67	; 0x43
 8007b3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b40:	4b02      	ldr	r3, [pc, #8]	; (8007b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000050 	.word	0x20000050

08007b50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b5e:	4b03      	ldr	r3, [pc, #12]	; (8007b6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	2000000c 	.word	0x2000000c

08007b70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e009      	b.n	8007b98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	33b0      	adds	r3, #176	; 0xb0
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	32b0      	adds	r2, #176	; 0xb0
 8007bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e008      	b.n	8007bdc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	32b0      	adds	r2, #176	; 0xb0
 8007bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e004      	b.n	8007c16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
	...

08007c24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32b0      	adds	r2, #176	; 0xb0
 8007c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32b0      	adds	r2, #176	; 0xb0
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e025      	b.n	8007ca2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d11f      	bne.n	8007ca0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007c68:	4b10      	ldr	r3, [pc, #64]	; (8007cac <USBD_CDC_TransmitPacket+0x88>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4403      	add	r3, r0
 8007c82:	3318      	adds	r3, #24
 8007c84:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007c86:	4b09      	ldr	r3, [pc, #36]	; (8007cac <USBD_CDC_TransmitPacket+0x88>)
 8007c88:	7819      	ldrb	r1, [r3, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 ffa9 	bl	8009bee <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000093 	.word	0x20000093

08007cb0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	32b0      	adds	r2, #176	; 0xb0
 8007cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	32b0      	adds	r2, #176	; 0xb0
 8007cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e018      	b.n	8007d10 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7c1b      	ldrb	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10a      	bne.n	8007cfc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ce6:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <USBD_CDC_ReceivePacket+0x68>)
 8007ce8:	7819      	ldrb	r1, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 ff9b 	bl	8009c30 <USBD_LL_PrepareReceive>
 8007cfa:	e008      	b.n	8007d0e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cfc:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <USBD_CDC_ReceivePacket+0x68>)
 8007cfe:	7819      	ldrb	r1, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d06:	2340      	movs	r3, #64	; 0x40
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 ff91 	bl	8009c30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000094 	.word	0x20000094

08007d1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e01f      	b.n	8007d74 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	79fa      	ldrb	r2, [r7, #7]
 8007d66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f001 fe0b 	bl	8009984 <USBD_LL_Init>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e025      	b.n	8007de0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	32ae      	adds	r2, #174	; 0xae
 8007da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00f      	beq.n	8007dd0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	32ae      	adds	r2, #174	; 0xae
 8007dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	f107 020e 	add.w	r2, r7, #14
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	4602      	mov	r2, r0
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fe13 	bl	8009a1c <USBD_LL_Start>
 8007df6:	4603      	mov	r3, r0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d009      	beq.n	8007e44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	78fa      	ldrb	r2, [r7, #3]
 8007e68:	4611      	mov	r1, r2
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 f908 	bl	80090aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eb6:	f003 031f 	and.w	r3, r3, #31
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d01a      	beq.n	8007ef4 <USBD_LL_SetupStage+0x72>
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d822      	bhi.n	8007f08 <USBD_LL_SetupStage+0x86>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <USBD_LL_SetupStage+0x4a>
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d00a      	beq.n	8007ee0 <USBD_LL_SetupStage+0x5e>
 8007eca:	e01d      	b.n	8007f08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fb5f 	bl	8008598 <USBD_StdDevReq>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ede:	e020      	b.n	8007f22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fbc7 	bl	800867c <USBD_StdItfReq>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef2:	e016      	b.n	8007f22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fc29 	bl	8008754 <USBD_StdEPReq>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]
      break;
 8007f06:	e00c      	b.n	8007f22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fde0 	bl	8009adc <USBD_LL_StallEP>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f20:	bf00      	nop
  }

  return ret;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	460b      	mov	r3, r1
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d16e      	bne.n	8008022 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	f040 8098 	bne.w	8008088 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d913      	bls.n	8007f8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	1ad2      	subs	r2, r2, r3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	bf28      	it	cs
 8007f7e:	4613      	movcs	r3, r2
 8007f80:	461a      	mov	r2, r3
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f001 f984 	bl	8009292 <USBD_CtlContinueRx>
 8007f8a:	e07d      	b.n	8008088 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f92:	f003 031f 	and.w	r3, r3, #31
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d014      	beq.n	8007fc4 <USBD_LL_DataOutStage+0x98>
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d81d      	bhi.n	8007fda <USBD_LL_DataOutStage+0xae>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <USBD_LL_DataOutStage+0x7c>
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d003      	beq.n	8007fae <USBD_LL_DataOutStage+0x82>
 8007fa6:	e018      	b.n	8007fda <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	75bb      	strb	r3, [r7, #22]
            break;
 8007fac:	e018      	b.n	8007fe0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 fa5e 	bl	800847a <USBD_CoreFindIF>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75bb      	strb	r3, [r7, #22]
            break;
 8007fc2:	e00d      	b.n	8007fe0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4619      	mov	r1, r3
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 fa60 	bl	8008494 <USBD_CoreFindEP>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	75bb      	strb	r3, [r7, #22]
            break;
 8007fd8:	e002      	b.n	8007fe0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75bb      	strb	r3, [r7, #22]
            break;
 8007fde:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007fe0:	7dbb      	ldrb	r3, [r7, #22]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d119      	bne.n	800801a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d113      	bne.n	800801a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ff2:	7dba      	ldrb	r2, [r7, #22]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	32ae      	adds	r2, #174	; 0xae
 8007ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00b      	beq.n	800801a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008002:	7dba      	ldrb	r2, [r7, #22]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800800a:	7dba      	ldrb	r2, [r7, #22]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	32ae      	adds	r2, #174	; 0xae
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f001 f94a 	bl	80092b4 <USBD_CtlSendStatus>
 8008020:	e032      	b.n	8008088 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008022:	7afb      	ldrb	r3, [r7, #11]
 8008024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008028:	b2db      	uxtb	r3, r3
 800802a:	4619      	mov	r1, r3
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 fa31 	bl	8008494 <USBD_CoreFindEP>
 8008032:	4603      	mov	r3, r0
 8008034:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008036:	7dbb      	ldrb	r3, [r7, #22]
 8008038:	2bff      	cmp	r3, #255	; 0xff
 800803a:	d025      	beq.n	8008088 <USBD_LL_DataOutStage+0x15c>
 800803c:	7dbb      	ldrb	r3, [r7, #22]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d122      	bne.n	8008088 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b03      	cmp	r3, #3
 800804c:	d117      	bne.n	800807e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800804e:	7dba      	ldrb	r2, [r7, #22]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	32ae      	adds	r2, #174	; 0xae
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800805e:	7dba      	ldrb	r2, [r7, #22]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008066:	7dba      	ldrb	r2, [r7, #22]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	32ae      	adds	r2, #174	; 0xae
 800806c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	7afa      	ldrb	r2, [r7, #11]
 8008074:	4611      	mov	r1, r2
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	4798      	blx	r3
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	e000      	b.n	800808a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	460b      	mov	r3, r1
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d16f      	bne.n	8008186 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3314      	adds	r3, #20
 80080aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d15a      	bne.n	800816c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d914      	bls.n	80080ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	1ad2      	subs	r2, r2, r3
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	461a      	mov	r2, r3
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f001 f8ac 	bl	8009236 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080de:	2300      	movs	r3, #0
 80080e0:	2200      	movs	r2, #0
 80080e2:	2100      	movs	r1, #0
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f001 fda3 	bl	8009c30 <USBD_LL_PrepareReceive>
 80080ea:	e03f      	b.n	800816c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d11c      	bne.n	8008132 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008100:	429a      	cmp	r2, r3
 8008102:	d316      	bcc.n	8008132 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800810e:	429a      	cmp	r2, r3
 8008110:	d20f      	bcs.n	8008132 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008112:	2200      	movs	r2, #0
 8008114:	2100      	movs	r1, #0
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f001 f88d 	bl	8009236 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008124:	2300      	movs	r3, #0
 8008126:	2200      	movs	r2, #0
 8008128:	2100      	movs	r1, #0
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f001 fd80 	bl	8009c30 <USBD_LL_PrepareReceive>
 8008130:	e01c      	b.n	800816c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b03      	cmp	r3, #3
 800813c:	d10f      	bne.n	800815e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800815e:	2180      	movs	r1, #128	; 0x80
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f001 fcbb 	bl	8009adc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f001 f8b7 	bl	80092da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d03a      	beq.n	80081ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff fe42 	bl	8007e00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008184:	e032      	b.n	80081ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800818c:	b2db      	uxtb	r3, r3
 800818e:	4619      	mov	r1, r3
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f97f 	bl	8008494 <USBD_CoreFindEP>
 8008196:	4603      	mov	r3, r0
 8008198:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	2bff      	cmp	r3, #255	; 0xff
 800819e:	d025      	beq.n	80081ec <USBD_LL_DataInStage+0x15a>
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d122      	bne.n	80081ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d11c      	bne.n	80081ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081b2:	7dfa      	ldrb	r2, [r7, #23]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	32ae      	adds	r2, #174	; 0xae
 80081b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d014      	beq.n	80081ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081c2:	7dfa      	ldrb	r2, [r7, #23]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081ca:	7dfa      	ldrb	r2, [r7, #23]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	32ae      	adds	r2, #174	; 0xae
 80081d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	7afa      	ldrb	r2, [r7, #11]
 80081d8:	4611      	mov	r1, r2
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	4798      	blx	r3
 80081de:	4603      	mov	r3, r0
 80081e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80081e2:	7dbb      	ldrb	r3, [r7, #22]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80081e8:	7dbb      	ldrb	r3, [r7, #22]
 80081ea:	e000      	b.n	80081ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d014      	beq.n	800825c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00e      	beq.n	800825c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6852      	ldr	r2, [r2, #4]
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	4611      	mov	r1, r2
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008258:	2303      	movs	r3, #3
 800825a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800825c:	2340      	movs	r3, #64	; 0x40
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 fbf5 	bl	8009a52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2240      	movs	r2, #64	; 0x40
 8008274:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008278:	2340      	movs	r3, #64	; 0x40
 800827a:	2200      	movs	r2, #0
 800827c:	2180      	movs	r1, #128	; 0x80
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 fbe7 	bl	8009a52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2240      	movs	r2, #64	; 0x40
 800828e:	621a      	str	r2, [r3, #32]

  return ret;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	78fa      	ldrb	r2, [r7, #3]
 80082aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2204      	movs	r2, #4
 80082d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d106      	bne.n	8008308 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008300:	b2da      	uxtb	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b03      	cmp	r3, #3
 8008328:	d110      	bne.n	800834c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	32ae      	adds	r2, #174	; 0xae
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e01c      	b.n	80083b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b03      	cmp	r3, #3
 8008382:	d115      	bne.n	80083b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32ae      	adds	r2, #174	; 0xae
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	32ae      	adds	r2, #174	; 0xae
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	4611      	mov	r1, r2
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	32ae      	adds	r2, #174	; 0xae
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	e01c      	b.n	8008416 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d115      	bne.n	8008414 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32ae      	adds	r2, #174	; 0xae
 80083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	32ae      	adds	r2, #174	; 0xae
 8008406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	78fa      	ldrb	r2, [r7, #3]
 800840e:	4611      	mov	r1, r2
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00e      	beq.n	8008470 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	6852      	ldr	r2, [r2, #4]
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	4611      	mov	r1, r2
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800846c:	2303      	movs	r3, #3
 800846e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008486:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b086      	sub	sp, #24
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d920      	bls.n	8008518 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80084de:	e013      	b.n	8008508 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80084e0:	f107 030a 	add.w	r3, r7, #10
 80084e4:	4619      	mov	r1, r3
 80084e6:	6978      	ldr	r0, [r7, #20]
 80084e8:	f000 f81b 	bl	8008522 <USBD_GetNextDesc>
 80084ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	d108      	bne.n	8008508 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	789b      	ldrb	r3, [r3, #2]
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	429a      	cmp	r2, r3
 8008502:	d008      	beq.n	8008516 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	885b      	ldrh	r3, [r3, #2]
 800850c:	b29a      	uxth	r2, r3
 800850e:	897b      	ldrh	r3, [r7, #10]
 8008510:	429a      	cmp	r2, r3
 8008512:	d8e5      	bhi.n	80084e0 <USBD_GetEpDesc+0x32>
 8008514:	e000      	b.n	8008518 <USBD_GetEpDesc+0x6a>
          break;
 8008516:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008518:	693b      	ldr	r3, [r7, #16]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	881a      	ldrh	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	4413      	add	r3, r2
 800853c:	b29a      	uxth	r2, r3
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4413      	add	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800854e:	68fb      	ldr	r3, [r7, #12]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	3301      	adds	r3, #1
 8008572:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800857a:	8a3b      	ldrh	r3, [r7, #16]
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	b21a      	sxth	r2, r3
 8008580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008584:	4313      	orrs	r3, r2
 8008586:	b21b      	sxth	r3, r3
 8008588:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800858a:	89fb      	ldrh	r3, [r7, #14]
}
 800858c:	4618      	mov	r0, r3
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ae:	2b40      	cmp	r3, #64	; 0x40
 80085b0:	d005      	beq.n	80085be <USBD_StdDevReq+0x26>
 80085b2:	2b40      	cmp	r3, #64	; 0x40
 80085b4:	d857      	bhi.n	8008666 <USBD_StdDevReq+0xce>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00f      	beq.n	80085da <USBD_StdDevReq+0x42>
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d153      	bne.n	8008666 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	32ae      	adds	r2, #174	; 0xae
 80085c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
      break;
 80085d8:	e04a      	b.n	8008670 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b09      	cmp	r3, #9
 80085e0:	d83b      	bhi.n	800865a <USBD_StdDevReq+0xc2>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <USBD_StdDevReq+0x50>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	0800863d 	.word	0x0800863d
 80085ec:	08008651 	.word	0x08008651
 80085f0:	0800865b 	.word	0x0800865b
 80085f4:	08008647 	.word	0x08008647
 80085f8:	0800865b 	.word	0x0800865b
 80085fc:	0800861b 	.word	0x0800861b
 8008600:	08008611 	.word	0x08008611
 8008604:	0800865b 	.word	0x0800865b
 8008608:	08008633 	.word	0x08008633
 800860c:	08008625 	.word	0x08008625
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa3c 	bl	8008a90 <USBD_GetDescriptor>
          break;
 8008618:	e024      	b.n	8008664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fba1 	bl	8008d64 <USBD_SetAddress>
          break;
 8008622:	e01f      	b.n	8008664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fbe0 	bl	8008dec <USBD_SetConfig>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
          break;
 8008630:	e018      	b.n	8008664 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc83 	bl	8008f40 <USBD_GetConfig>
          break;
 800863a:	e013      	b.n	8008664 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fcb4 	bl	8008fac <USBD_GetStatus>
          break;
 8008644:	e00e      	b.n	8008664 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fce3 	bl	8009014 <USBD_SetFeature>
          break;
 800864e:	e009      	b.n	8008664 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fd07 	bl	8009066 <USBD_ClrFeature>
          break;
 8008658:	e004      	b.n	8008664 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fd5e 	bl	800911e <USBD_CtlError>
          break;
 8008662:	bf00      	nop
      }
      break;
 8008664:	e004      	b.n	8008670 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fd58 	bl	800911e <USBD_CtlError>
      break;
 800866e:	bf00      	nop
  }

  return ret;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop

0800867c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d005      	beq.n	80086a2 <USBD_StdItfReq+0x26>
 8008696:	2b40      	cmp	r3, #64	; 0x40
 8008698:	d852      	bhi.n	8008740 <USBD_StdItfReq+0xc4>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <USBD_StdItfReq+0x26>
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d14e      	bne.n	8008740 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	3b01      	subs	r3, #1
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d840      	bhi.n	8008732 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	889b      	ldrh	r3, [r3, #4]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d836      	bhi.n	8008728 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	889b      	ldrh	r3, [r3, #4]
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff fed9 	bl	800847a <USBD_CoreFindIF>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2bff      	cmp	r3, #255	; 0xff
 80086d0:	d01d      	beq.n	800870e <USBD_StdItfReq+0x92>
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11a      	bne.n	800870e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80086d8:	7bba      	ldrb	r2, [r7, #14]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	32ae      	adds	r2, #174	; 0xae
 80086de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00f      	beq.n	8008708 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80086e8:	7bba      	ldrb	r2, [r7, #14]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086f0:	7bba      	ldrb	r2, [r7, #14]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	32ae      	adds	r2, #174	; 0xae
 80086f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008706:	e004      	b.n	8008712 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008708:	2303      	movs	r3, #3
 800870a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800870c:	e001      	b.n	8008712 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800870e:	2303      	movs	r3, #3
 8008710:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	88db      	ldrh	r3, [r3, #6]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d110      	bne.n	800873c <USBD_StdItfReq+0xc0>
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10d      	bne.n	800873c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fdc7 	bl	80092b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008726:	e009      	b.n	800873c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fcf7 	bl	800911e <USBD_CtlError>
          break;
 8008730:	e004      	b.n	800873c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fcf2 	bl	800911e <USBD_CtlError>
          break;
 800873a:	e000      	b.n	800873e <USBD_StdItfReq+0xc2>
          break;
 800873c:	bf00      	nop
      }
      break;
 800873e:	e004      	b.n	800874a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fceb 	bl	800911e <USBD_CtlError>
      break;
 8008748:	bf00      	nop
  }

  return ret;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	889b      	ldrh	r3, [r3, #4]
 8008766:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008770:	2b40      	cmp	r3, #64	; 0x40
 8008772:	d007      	beq.n	8008784 <USBD_StdEPReq+0x30>
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	f200 817f 	bhi.w	8008a78 <USBD_StdEPReq+0x324>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d02a      	beq.n	80087d4 <USBD_StdEPReq+0x80>
 800877e:	2b20      	cmp	r3, #32
 8008780:	f040 817a 	bne.w	8008a78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff fe83 	bl	8008494 <USBD_CoreFindEP>
 800878e:	4603      	mov	r3, r0
 8008790:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008792:	7b7b      	ldrb	r3, [r7, #13]
 8008794:	2bff      	cmp	r3, #255	; 0xff
 8008796:	f000 8174 	beq.w	8008a82 <USBD_StdEPReq+0x32e>
 800879a:	7b7b      	ldrb	r3, [r7, #13]
 800879c:	2b00      	cmp	r3, #0
 800879e:	f040 8170 	bne.w	8008a82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80087a2:	7b7a      	ldrb	r2, [r7, #13]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087aa:	7b7a      	ldrb	r2, [r7, #13]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	32ae      	adds	r2, #174	; 0xae
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8163 	beq.w	8008a82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087bc:	7b7a      	ldrb	r2, [r7, #13]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32ae      	adds	r2, #174	; 0xae
 80087c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4798      	blx	r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087d2:	e156      	b.n	8008a82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	785b      	ldrb	r3, [r3, #1]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d008      	beq.n	80087ee <USBD_StdEPReq+0x9a>
 80087dc:	2b03      	cmp	r3, #3
 80087de:	f300 8145 	bgt.w	8008a6c <USBD_StdEPReq+0x318>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 809b 	beq.w	800891e <USBD_StdEPReq+0x1ca>
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d03c      	beq.n	8008866 <USBD_StdEPReq+0x112>
 80087ec:	e13e      	b.n	8008a6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d002      	beq.n	8008800 <USBD_StdEPReq+0xac>
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d016      	beq.n	800882c <USBD_StdEPReq+0xd8>
 80087fe:	e02c      	b.n	800885a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00d      	beq.n	8008822 <USBD_StdEPReq+0xce>
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b80      	cmp	r3, #128	; 0x80
 800880a:	d00a      	beq.n	8008822 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 f963 	bl	8009adc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008816:	2180      	movs	r1, #128	; 0x80
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 f95f 	bl	8009adc <USBD_LL_StallEP>
 800881e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008820:	e020      	b.n	8008864 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc7a 	bl	800911e <USBD_CtlError>
              break;
 800882a:	e01b      	b.n	8008864 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	885b      	ldrh	r3, [r3, #2]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10e      	bne.n	8008852 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00b      	beq.n	8008852 <USBD_StdEPReq+0xfe>
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b80      	cmp	r3, #128	; 0x80
 800883e:	d008      	beq.n	8008852 <USBD_StdEPReq+0xfe>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	88db      	ldrh	r3, [r3, #6]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d104      	bne.n	8008852 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 f945 	bl	8009adc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fd2e 	bl	80092b4 <USBD_CtlSendStatus>

              break;
 8008858:	e004      	b.n	8008864 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fc5e 	bl	800911e <USBD_CtlError>
              break;
 8008862:	bf00      	nop
          }
          break;
 8008864:	e107      	b.n	8008a76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d002      	beq.n	8008878 <USBD_StdEPReq+0x124>
 8008872:	2b03      	cmp	r3, #3
 8008874:	d016      	beq.n	80088a4 <USBD_StdEPReq+0x150>
 8008876:	e04b      	b.n	8008910 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00d      	beq.n	800889a <USBD_StdEPReq+0x146>
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b80      	cmp	r3, #128	; 0x80
 8008882:	d00a      	beq.n	800889a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f927 	bl	8009adc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800888e:	2180      	movs	r1, #128	; 0x80
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 f923 	bl	8009adc <USBD_LL_StallEP>
 8008896:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008898:	e040      	b.n	800891c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fc3e 	bl	800911e <USBD_CtlError>
              break;
 80088a2:	e03b      	b.n	800891c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	885b      	ldrh	r3, [r3, #2]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d136      	bne.n	800891a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d004      	beq.n	80088c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 f92d 	bl	8009b1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fcf7 	bl	80092b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff fde2 	bl	8008494 <USBD_CoreFindEP>
 80088d0:	4603      	mov	r3, r0
 80088d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088d4:	7b7b      	ldrb	r3, [r7, #13]
 80088d6:	2bff      	cmp	r3, #255	; 0xff
 80088d8:	d01f      	beq.n	800891a <USBD_StdEPReq+0x1c6>
 80088da:	7b7b      	ldrb	r3, [r7, #13]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d11c      	bne.n	800891a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80088e0:	7b7a      	ldrb	r2, [r7, #13]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80088e8:	7b7a      	ldrb	r2, [r7, #13]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	32ae      	adds	r2, #174	; 0xae
 80088ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d010      	beq.n	800891a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088f8:	7b7a      	ldrb	r2, [r7, #13]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	32ae      	adds	r2, #174	; 0xae
 80088fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
 800890a:	4603      	mov	r3, r0
 800890c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800890e:	e004      	b.n	800891a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fc03 	bl	800911e <USBD_CtlError>
              break;
 8008918:	e000      	b.n	800891c <USBD_StdEPReq+0x1c8>
              break;
 800891a:	bf00      	nop
          }
          break;
 800891c:	e0ab      	b.n	8008a76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d002      	beq.n	8008930 <USBD_StdEPReq+0x1dc>
 800892a:	2b03      	cmp	r3, #3
 800892c:	d032      	beq.n	8008994 <USBD_StdEPReq+0x240>
 800892e:	e097      	b.n	8008a60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d007      	beq.n	8008946 <USBD_StdEPReq+0x1f2>
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b80      	cmp	r3, #128	; 0x80
 800893a:	d004      	beq.n	8008946 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fbed 	bl	800911e <USBD_CtlError>
                break;
 8008944:	e091      	b.n	8008a6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800894a:	2b00      	cmp	r3, #0
 800894c:	da0b      	bge.n	8008966 <USBD_StdEPReq+0x212>
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	3310      	adds	r3, #16
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	4413      	add	r3, r2
 8008962:	3304      	adds	r3, #4
 8008964:	e00b      	b.n	800897e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	4413      	add	r3, r2
 800897c:	3304      	adds	r3, #4
 800897e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2202      	movs	r2, #2
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc37 	bl	8009200 <USBD_CtlSendData>
              break;
 8008992:	e06a      	b.n	8008a6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da11      	bge.n	80089c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	f003 020f 	and.w	r2, r3, #15
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	440b      	add	r3, r1
 80089ae:	3324      	adds	r3, #36	; 0x24
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d117      	bne.n	80089e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fbb0 	bl	800911e <USBD_CtlError>
                  break;
 80089be:	e054      	b.n	8008a6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	f003 020f 	and.w	r2, r3, #15
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d104      	bne.n	80089e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fb9d 	bl	800911e <USBD_CtlError>
                  break;
 80089e4:	e041      	b.n	8008a6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da0b      	bge.n	8008a06 <USBD_StdEPReq+0x2b2>
 80089ee:	7bbb      	ldrb	r3, [r7, #14]
 80089f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	3310      	adds	r3, #16
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	4413      	add	r3, r2
 8008a02:	3304      	adds	r3, #4
 8008a04:	e00b      	b.n	8008a1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <USBD_StdEPReq+0x2d8>
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	2b80      	cmp	r3, #128	; 0x80
 8008a2a:	d103      	bne.n	8008a34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e00e      	b.n	8008a52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 f88d 	bl	8009b58 <USBD_LL_IsStallEP>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2201      	movs	r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e002      	b.n	8008a52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2202      	movs	r2, #2
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fbd1 	bl	8009200 <USBD_CtlSendData>
              break;
 8008a5e:	e004      	b.n	8008a6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fb5b 	bl	800911e <USBD_CtlError>
              break;
 8008a68:	bf00      	nop
          }
          break;
 8008a6a:	e004      	b.n	8008a76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fb55 	bl	800911e <USBD_CtlError>
          break;
 8008a74:	bf00      	nop
      }
      break;
 8008a76:	e005      	b.n	8008a84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fb4f 	bl	800911e <USBD_CtlError>
      break;
 8008a80:	e000      	b.n	8008a84 <USBD_StdEPReq+0x330>
      break;
 8008a82:	bf00      	nop
  }

  return ret;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	2b06      	cmp	r3, #6
 8008ab2:	f200 8128 	bhi.w	8008d06 <USBD_GetDescriptor+0x276>
 8008ab6:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <USBD_GetDescriptor+0x2c>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008ad9 	.word	0x08008ad9
 8008ac0:	08008af1 	.word	0x08008af1
 8008ac4:	08008b31 	.word	0x08008b31
 8008ac8:	08008d07 	.word	0x08008d07
 8008acc:	08008d07 	.word	0x08008d07
 8008ad0:	08008ca7 	.word	0x08008ca7
 8008ad4:	08008cd3 	.word	0x08008cd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	7c12      	ldrb	r2, [r2, #16]
 8008ae4:	f107 0108 	add.w	r1, r7, #8
 8008ae8:	4610      	mov	r0, r2
 8008aea:	4798      	blx	r3
 8008aec:	60f8      	str	r0, [r7, #12]
      break;
 8008aee:	e112      	b.n	8008d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	7c1b      	ldrb	r3, [r3, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10d      	bne.n	8008b14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	f107 0208 	add.w	r2, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	2202      	movs	r2, #2
 8008b10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b12:	e100      	b.n	8008d16 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	f107 0208 	add.w	r2, r7, #8
 8008b20:	4610      	mov	r0, r2
 8008b22:	4798      	blx	r3
 8008b24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	701a      	strb	r2, [r3, #0]
      break;
 8008b2e:	e0f2      	b.n	8008d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	885b      	ldrh	r3, [r3, #2]
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b05      	cmp	r3, #5
 8008b38:	f200 80ac 	bhi.w	8008c94 <USBD_GetDescriptor+0x204>
 8008b3c:	a201      	add	r2, pc, #4	; (adr r2, 8008b44 <USBD_GetDescriptor+0xb4>)
 8008b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b42:	bf00      	nop
 8008b44:	08008b5d 	.word	0x08008b5d
 8008b48:	08008b91 	.word	0x08008b91
 8008b4c:	08008bc5 	.word	0x08008bc5
 8008b50:	08008bf9 	.word	0x08008bf9
 8008b54:	08008c2d 	.word	0x08008c2d
 8008b58:	08008c61 	.word	0x08008c61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00b      	beq.n	8008b80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	7c12      	ldrb	r2, [r2, #16]
 8008b74:	f107 0108 	add.w	r1, r7, #8
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4798      	blx	r3
 8008b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b7e:	e091      	b.n	8008ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 facb 	bl	800911e <USBD_CtlError>
            err++;
 8008b88:	7afb      	ldrb	r3, [r7, #11]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b8e:	e089      	b.n	8008ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	7c12      	ldrb	r2, [r2, #16]
 8008ba8:	f107 0108 	add.w	r1, r7, #8
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bb2:	e077      	b.n	8008ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fab1 	bl	800911e <USBD_CtlError>
            err++;
 8008bbc:	7afb      	ldrb	r3, [r7, #11]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bc2:	e06f      	b.n	8008ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	7c12      	ldrb	r2, [r2, #16]
 8008bdc:	f107 0108 	add.w	r1, r7, #8
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008be6:	e05d      	b.n	8008ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa97 	bl	800911e <USBD_CtlError>
            err++;
 8008bf0:	7afb      	ldrb	r3, [r7, #11]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bf6:	e055      	b.n	8008ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	7c12      	ldrb	r2, [r2, #16]
 8008c10:	f107 0108 	add.w	r1, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c1a:	e043      	b.n	8008ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa7d 	bl	800911e <USBD_CtlError>
            err++;
 8008c24:	7afb      	ldrb	r3, [r7, #11]
 8008c26:	3301      	adds	r3, #1
 8008c28:	72fb      	strb	r3, [r7, #11]
          break;
 8008c2a:	e03b      	b.n	8008ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	7c12      	ldrb	r2, [r2, #16]
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4798      	blx	r3
 8008c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4e:	e029      	b.n	8008ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa63 	bl	800911e <USBD_CtlError>
            err++;
 8008c58:	7afb      	ldrb	r3, [r7, #11]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5e:	e021      	b.n	8008ca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	7c12      	ldrb	r2, [r2, #16]
 8008c78:	f107 0108 	add.w	r1, r7, #8
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4798      	blx	r3
 8008c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c82:	e00f      	b.n	8008ca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa49 	bl	800911e <USBD_CtlError>
            err++;
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	72fb      	strb	r3, [r7, #11]
          break;
 8008c92:	e007      	b.n	8008ca4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa41 	bl	800911e <USBD_CtlError>
          err++;
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ca2:	bf00      	nop
      }
      break;
 8008ca4:	e037      	b.n	8008d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	7c1b      	ldrb	r3, [r3, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d109      	bne.n	8008cc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb6:	f107 0208 	add.w	r2, r7, #8
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4798      	blx	r3
 8008cbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cc0:	e029      	b.n	8008d16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fa2a 	bl	800911e <USBD_CtlError>
        err++;
 8008cca:	7afb      	ldrb	r3, [r7, #11]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	72fb      	strb	r3, [r7, #11]
      break;
 8008cd0:	e021      	b.n	8008d16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7c1b      	ldrb	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10d      	bne.n	8008cf6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	f107 0208 	add.w	r2, r7, #8
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	4798      	blx	r3
 8008cea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf4:	e00f      	b.n	8008d16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fa10 	bl	800911e <USBD_CtlError>
        err++;
 8008cfe:	7afb      	ldrb	r3, [r7, #11]
 8008d00:	3301      	adds	r3, #1
 8008d02:	72fb      	strb	r3, [r7, #11]
      break;
 8008d04:	e007      	b.n	8008d16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa08 	bl	800911e <USBD_CtlError>
      err++;
 8008d0e:	7afb      	ldrb	r3, [r7, #11]
 8008d10:	3301      	adds	r3, #1
 8008d12:	72fb      	strb	r3, [r7, #11]
      break;
 8008d14:	bf00      	nop
  }

  if (err != 0U)
 8008d16:	7afb      	ldrb	r3, [r7, #11]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d11e      	bne.n	8008d5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	88db      	ldrh	r3, [r3, #6]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d016      	beq.n	8008d52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d24:	893b      	ldrh	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00e      	beq.n	8008d48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	88da      	ldrh	r2, [r3, #6]
 8008d2e:	893b      	ldrh	r3, [r7, #8]
 8008d30:	4293      	cmp	r3, r2
 8008d32:	bf28      	it	cs
 8008d34:	4613      	movcs	r3, r2
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d3a:	893b      	ldrh	r3, [r7, #8]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fa5d 	bl	8009200 <USBD_CtlSendData>
 8008d46:	e009      	b.n	8008d5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f9e7 	bl	800911e <USBD_CtlError>
 8008d50:	e004      	b.n	8008d5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 faae 	bl	80092b4 <USBD_CtlSendStatus>
 8008d58:	e000      	b.n	8008d5c <USBD_GetDescriptor+0x2cc>
    return;
 8008d5a:	bf00      	nop
  }
}
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop

08008d64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	889b      	ldrh	r3, [r3, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d131      	bne.n	8008dda <USBD_SetAddress+0x76>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	88db      	ldrh	r3, [r3, #6]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d12d      	bne.n	8008dda <USBD_SetAddress+0x76>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	885b      	ldrh	r3, [r3, #2]
 8008d82:	2b7f      	cmp	r3, #127	; 0x7f
 8008d84:	d829      	bhi.n	8008dda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	885b      	ldrh	r3, [r3, #2]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d104      	bne.n	8008da8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f9bc 	bl	800911e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da6:	e01d      	b.n	8008de4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	7bfa      	ldrb	r2, [r7, #15]
 8008dac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fefb 	bl	8009bb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fa7a 	bl	80092b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dce:	e009      	b.n	8008de4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd8:	e004      	b.n	8008de4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f99e 	bl	800911e <USBD_CtlError>
  }
}
 8008de2:	bf00      	nop
 8008de4:	bf00      	nop
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	885b      	ldrh	r3, [r3, #2]
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	4b4e      	ldr	r3, [pc, #312]	; (8008f3c <USBD_SetConfig+0x150>)
 8008e02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e04:	4b4d      	ldr	r3, [pc, #308]	; (8008f3c <USBD_SetConfig+0x150>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d905      	bls.n	8008e18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f985 	bl	800911e <USBD_CtlError>
    return USBD_FAIL;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e08c      	b.n	8008f32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d002      	beq.n	8008e2a <USBD_SetConfig+0x3e>
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d029      	beq.n	8008e7c <USBD_SetConfig+0x90>
 8008e28:	e075      	b.n	8008f16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e2a:	4b44      	ldr	r3, [pc, #272]	; (8008f3c <USBD_SetConfig+0x150>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d020      	beq.n	8008e74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e32:	4b42      	ldr	r3, [pc, #264]	; (8008f3c <USBD_SetConfig+0x150>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e3c:	4b3f      	ldr	r3, [pc, #252]	; (8008f3c <USBD_SetConfig+0x150>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fe ffe7 	bl	8007e16 <USBD_SetClassConfig>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f962 	bl	800911e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e62:	e065      	b.n	8008f30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fa25 	bl	80092b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e72:	e05d      	b.n	8008f30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa1d 	bl	80092b4 <USBD_CtlSendStatus>
      break;
 8008e7a:	e059      	b.n	8008f30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e7c:	4b2f      	ldr	r3, [pc, #188]	; (8008f3c <USBD_SetConfig+0x150>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d112      	bne.n	8008eaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e8c:	4b2b      	ldr	r3, [pc, #172]	; (8008f3c <USBD_SetConfig+0x150>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e96:	4b29      	ldr	r3, [pc, #164]	; (8008f3c <USBD_SetConfig+0x150>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7fe ffd6 	bl	8007e4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa06 	bl	80092b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ea8:	e042      	b.n	8008f30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008eaa:	4b24      	ldr	r3, [pc, #144]	; (8008f3c <USBD_SetConfig+0x150>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d02a      	beq.n	8008f0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7fe ffc4 	bl	8007e4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ec6:	4b1d      	ldr	r3, [pc, #116]	; (8008f3c <USBD_SetConfig+0x150>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ed0:	4b1a      	ldr	r3, [pc, #104]	; (8008f3c <USBD_SetConfig+0x150>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7fe ff9d 	bl	8007e16 <USBD_SetClassConfig>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00f      	beq.n	8008f06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f918 	bl	800911e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7fe ffa9 	bl	8007e4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f04:	e014      	b.n	8008f30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9d4 	bl	80092b4 <USBD_CtlSendStatus>
      break;
 8008f0c:	e010      	b.n	8008f30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f9d0 	bl	80092b4 <USBD_CtlSendStatus>
      break;
 8008f14:	e00c      	b.n	8008f30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f900 	bl	800911e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f1e:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <USBD_SetConfig+0x150>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7fe ff92 	bl	8007e4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2e:	bf00      	nop
  }

  return ret;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200007a0 	.word	0x200007a0

08008f40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	88db      	ldrh	r3, [r3, #6]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d004      	beq.n	8008f5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f8e2 	bl	800911e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f5a:	e023      	b.n	8008fa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	dc02      	bgt.n	8008f6e <USBD_GetConfig+0x2e>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dc03      	bgt.n	8008f74 <USBD_GetConfig+0x34>
 8008f6c:	e015      	b.n	8008f9a <USBD_GetConfig+0x5a>
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d00b      	beq.n	8008f8a <USBD_GetConfig+0x4a>
 8008f72:	e012      	b.n	8008f9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	2201      	movs	r2, #1
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f93c 	bl	8009200 <USBD_CtlSendData>
        break;
 8008f88:	e00c      	b.n	8008fa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f934 	bl	8009200 <USBD_CtlSendData>
        break;
 8008f98:	e004      	b.n	8008fa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f8be 	bl	800911e <USBD_CtlError>
        break;
 8008fa2:	bf00      	nop
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d81e      	bhi.n	8009002 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	88db      	ldrh	r3, [r3, #6]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d004      	beq.n	8008fd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f8a5 	bl	800911e <USBD_CtlError>
        break;
 8008fd4:	e01a      	b.n	800900c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f043 0202 	orr.w	r2, r3, #2
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	330c      	adds	r3, #12
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f900 	bl	8009200 <USBD_CtlSendData>
      break;
 8009000:	e004      	b.n	800900c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f88a 	bl	800911e <USBD_CtlError>
      break;
 800900a:	bf00      	nop
  }
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	885b      	ldrh	r3, [r3, #2]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d107      	bne.n	8009036 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f940 	bl	80092b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009034:	e013      	b.n	800905e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	885b      	ldrh	r3, [r3, #2]
 800903a:	2b02      	cmp	r3, #2
 800903c:	d10b      	bne.n	8009056 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	889b      	ldrh	r3, [r3, #4]
 8009042:	0a1b      	lsrs	r3, r3, #8
 8009044:	b29b      	uxth	r3, r3
 8009046:	b2da      	uxtb	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f930 	bl	80092b4 <USBD_CtlSendStatus>
}
 8009054:	e003      	b.n	800905e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f860 	bl	800911e <USBD_CtlError>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009076:	b2db      	uxtb	r3, r3
 8009078:	3b01      	subs	r3, #1
 800907a:	2b02      	cmp	r3, #2
 800907c:	d80b      	bhi.n	8009096 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	885b      	ldrh	r3, [r3, #2]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d10c      	bne.n	80090a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f910 	bl	80092b4 <USBD_CtlSendStatus>
      }
      break;
 8009094:	e004      	b.n	80090a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f840 	bl	800911e <USBD_CtlError>
      break;
 800909e:	e000      	b.n	80090a2 <USBD_ClrFeature+0x3c>
      break;
 80090a0:	bf00      	nop
  }
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	781a      	ldrb	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	781a      	ldrb	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3301      	adds	r3, #1
 80090d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f7ff fa41 	bl	800855c <SWAPBYTE>
 80090da:	4603      	mov	r3, r0
 80090dc:	461a      	mov	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3301      	adds	r3, #1
 80090e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3301      	adds	r3, #1
 80090ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f7ff fa34 	bl	800855c <SWAPBYTE>
 80090f4:	4603      	mov	r3, r0
 80090f6:	461a      	mov	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3301      	adds	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7ff fa27 	bl	800855c <SWAPBYTE>
 800910e:	4603      	mov	r3, r0
 8009110:	461a      	mov	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	80da      	strh	r2, [r3, #6]
}
 8009116:	bf00      	nop
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009128:	2180      	movs	r1, #128	; 0x80
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fcd6 	bl	8009adc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009130:	2100      	movs	r1, #0
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fcd2 	bl	8009adc <USBD_LL_StallEP>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d036      	beq.n	80091c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800915a:	6938      	ldr	r0, [r7, #16]
 800915c:	f000 f836 	bl	80091cc <USBD_GetLen>
 8009160:	4603      	mov	r3, r0
 8009162:	3301      	adds	r3, #1
 8009164:	b29b      	uxth	r3, r3
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	4413      	add	r3, r2
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	7812      	ldrb	r2, [r2, #0]
 8009178:	701a      	strb	r2, [r3, #0]
  idx++;
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	3301      	adds	r3, #1
 800917e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	4413      	add	r3, r2
 8009186:	2203      	movs	r2, #3
 8009188:	701a      	strb	r2, [r3, #0]
  idx++;
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	3301      	adds	r3, #1
 800918e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009190:	e013      	b.n	80091ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	4413      	add	r3, r2
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	7812      	ldrb	r2, [r2, #0]
 800919c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3301      	adds	r3, #1
 80091a2:	613b      	str	r3, [r7, #16]
    idx++;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	3301      	adds	r3, #1
 80091a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	4413      	add	r3, r2
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	3301      	adds	r3, #1
 80091b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e7      	bne.n	8009192 <USBD_GetString+0x52>
 80091c2:	e000      	b.n	80091c6 <USBD_GetString+0x86>
    return;
 80091c4:	bf00      	nop
  }
}
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091dc:	e005      	b.n	80091ea <USBD_GetLen+0x1e>
  {
    len++;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	3301      	adds	r3, #1
 80091e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f5      	bne.n	80091de <USBD_GetLen+0x12>
  }

  return len;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2202      	movs	r2, #2
 8009210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	2100      	movs	r1, #0
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 fce1 	bl	8009bee <USBD_LL_Transmit>

  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	2100      	movs	r1, #0
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 fcd0 	bl	8009bee <USBD_LL_Transmit>

  return USBD_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2203      	movs	r2, #3
 8009268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	2100      	movs	r1, #0
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 fcd4 	bl	8009c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	2100      	movs	r1, #0
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 fcc3 	bl	8009c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2204      	movs	r2, #4
 80092c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092c4:	2300      	movs	r3, #0
 80092c6:	2200      	movs	r2, #0
 80092c8:	2100      	movs	r1, #0
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fc8f 	bl	8009bee <USBD_LL_Transmit>

  return USBD_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b082      	sub	sp, #8
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2205      	movs	r2, #5
 80092e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092ea:	2300      	movs	r3, #0
 80092ec:	2200      	movs	r2, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fc9d 	bl	8009c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009304:	2200      	movs	r2, #0
 8009306:	4912      	ldr	r1, [pc, #72]	; (8009350 <MX_USB_DEVICE_Init+0x50>)
 8009308:	4812      	ldr	r0, [pc, #72]	; (8009354 <MX_USB_DEVICE_Init+0x54>)
 800930a:	f7fe fd07 	bl	8007d1c <USBD_Init>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009314:	f7f7 fd10 	bl	8000d38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009318:	490f      	ldr	r1, [pc, #60]	; (8009358 <MX_USB_DEVICE_Init+0x58>)
 800931a:	480e      	ldr	r0, [pc, #56]	; (8009354 <MX_USB_DEVICE_Init+0x54>)
 800931c:	f7fe fd2e 	bl	8007d7c <USBD_RegisterClass>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009326:	f7f7 fd07 	bl	8000d38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800932a:	490c      	ldr	r1, [pc, #48]	; (800935c <MX_USB_DEVICE_Init+0x5c>)
 800932c:	4809      	ldr	r0, [pc, #36]	; (8009354 <MX_USB_DEVICE_Init+0x54>)
 800932e:	f7fe fc1f 	bl	8007b70 <USBD_CDC_RegisterInterface>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009338:	f7f7 fcfe 	bl	8000d38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800933c:	4805      	ldr	r0, [pc, #20]	; (8009354 <MX_USB_DEVICE_Init+0x54>)
 800933e:	f7fe fd53 	bl	8007de8 <USBD_Start>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009348:	f7f7 fcf6 	bl	8000d38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800934c:	bf00      	nop
 800934e:	bd80      	pop	{r7, pc}
 8009350:	200000ac 	.word	0x200000ac
 8009354:	200007a4 	.word	0x200007a4
 8009358:	20000018 	.word	0x20000018
 800935c:	20000098 	.word	0x20000098

08009360 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009364:	2200      	movs	r2, #0
 8009366:	4905      	ldr	r1, [pc, #20]	; (800937c <CDC_Init_FS+0x1c>)
 8009368:	4805      	ldr	r0, [pc, #20]	; (8009380 <CDC_Init_FS+0x20>)
 800936a:	f7fe fc1b 	bl	8007ba4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800936e:	4905      	ldr	r1, [pc, #20]	; (8009384 <CDC_Init_FS+0x24>)
 8009370:	4803      	ldr	r0, [pc, #12]	; (8009380 <CDC_Init_FS+0x20>)
 8009372:	f7fe fc39 	bl	8007be8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009376:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009378:	4618      	mov	r0, r3
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20001280 	.word	0x20001280
 8009380:	200007a4 	.word	0x200007a4
 8009384:	20000a80 	.word	0x20000a80

08009388 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800938c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800938e:	4618      	mov	r0, r3
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
 80093a4:	4613      	mov	r3, r2
 80093a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	2b23      	cmp	r3, #35	; 0x23
 80093ac:	d84a      	bhi.n	8009444 <CDC_Control_FS+0xac>
 80093ae:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <CDC_Control_FS+0x1c>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	08009445 	.word	0x08009445
 80093b8:	08009445 	.word	0x08009445
 80093bc:	08009445 	.word	0x08009445
 80093c0:	08009445 	.word	0x08009445
 80093c4:	08009445 	.word	0x08009445
 80093c8:	08009445 	.word	0x08009445
 80093cc:	08009445 	.word	0x08009445
 80093d0:	08009445 	.word	0x08009445
 80093d4:	08009445 	.word	0x08009445
 80093d8:	08009445 	.word	0x08009445
 80093dc:	08009445 	.word	0x08009445
 80093e0:	08009445 	.word	0x08009445
 80093e4:	08009445 	.word	0x08009445
 80093e8:	08009445 	.word	0x08009445
 80093ec:	08009445 	.word	0x08009445
 80093f0:	08009445 	.word	0x08009445
 80093f4:	08009445 	.word	0x08009445
 80093f8:	08009445 	.word	0x08009445
 80093fc:	08009445 	.word	0x08009445
 8009400:	08009445 	.word	0x08009445
 8009404:	08009445 	.word	0x08009445
 8009408:	08009445 	.word	0x08009445
 800940c:	08009445 	.word	0x08009445
 8009410:	08009445 	.word	0x08009445
 8009414:	08009445 	.word	0x08009445
 8009418:	08009445 	.word	0x08009445
 800941c:	08009445 	.word	0x08009445
 8009420:	08009445 	.word	0x08009445
 8009424:	08009445 	.word	0x08009445
 8009428:	08009445 	.word	0x08009445
 800942c:	08009445 	.word	0x08009445
 8009430:	08009445 	.word	0x08009445
 8009434:	08009445 	.word	0x08009445
 8009438:	08009445 	.word	0x08009445
 800943c:	08009445 	.word	0x08009445
 8009440:	08009445 	.word	0x08009445
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009444:	bf00      	nop
  }

  return (USBD_OK);
 8009446:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009448:	4618      	mov	r0, r3
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	4805      	ldr	r0, [pc, #20]	; (8009478 <CDC_Receive_FS+0x24>)
 8009462:	f7fe fbc1 	bl	8007be8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009466:	4804      	ldr	r0, [pc, #16]	; (8009478 <CDC_Receive_FS+0x24>)
 8009468:	f7fe fc22 	bl	8007cb0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800946c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	200007a4 	.word	0x200007a4

0800947c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800948c:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <CDC_Transmit_FS+0x48>)
 800948e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009492:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800949e:	2301      	movs	r3, #1
 80094a0:	e00b      	b.n	80094ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094a2:	887b      	ldrh	r3, [r7, #2]
 80094a4:	461a      	mov	r2, r3
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	4806      	ldr	r0, [pc, #24]	; (80094c4 <CDC_Transmit_FS+0x48>)
 80094aa:	f7fe fb7b 	bl	8007ba4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094ae:	4805      	ldr	r0, [pc, #20]	; (80094c4 <CDC_Transmit_FS+0x48>)
 80094b0:	f7fe fbb8 	bl	8007c24 <USBD_CDC_TransmitPacket>
 80094b4:	4603      	mov	r3, r0
 80094b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	200007a4 	.word	0x200007a4

080094c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	4613      	mov	r3, r2
 80094d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80094da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2212      	movs	r2, #18
 80094fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094fe:	4b03      	ldr	r3, [pc, #12]	; (800950c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	200000c8 	.word	0x200000c8

08009510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2204      	movs	r2, #4
 8009520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009522:	4b03      	ldr	r3, [pc, #12]	; (8009530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	200000dc 	.word	0x200000dc

08009534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	6039      	str	r1, [r7, #0]
 800953e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d105      	bne.n	8009552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	4907      	ldr	r1, [pc, #28]	; (8009568 <USBD_FS_ProductStrDescriptor+0x34>)
 800954a:	4808      	ldr	r0, [pc, #32]	; (800956c <USBD_FS_ProductStrDescriptor+0x38>)
 800954c:	f7ff fdf8 	bl	8009140 <USBD_GetString>
 8009550:	e004      	b.n	800955c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	4904      	ldr	r1, [pc, #16]	; (8009568 <USBD_FS_ProductStrDescriptor+0x34>)
 8009556:	4805      	ldr	r0, [pc, #20]	; (800956c <USBD_FS_ProductStrDescriptor+0x38>)
 8009558:	f7ff fdf2 	bl	8009140 <USBD_GetString>
  }
  return USBD_StrDesc;
 800955c:	4b02      	ldr	r3, [pc, #8]	; (8009568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20001a80 	.word	0x20001a80
 800956c:	0800a750 	.word	0x0800a750

08009570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	6039      	str	r1, [r7, #0]
 800957a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	4904      	ldr	r1, [pc, #16]	; (8009590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009580:	4804      	ldr	r0, [pc, #16]	; (8009594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009582:	f7ff fddd 	bl	8009140 <USBD_GetString>
  return USBD_StrDesc;
 8009586:	4b02      	ldr	r3, [pc, #8]	; (8009590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20001a80 	.word	0x20001a80
 8009594:	0800a75c 	.word	0x0800a75c

08009598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	221a      	movs	r2, #26
 80095a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095aa:	f000 f843 	bl	8009634 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095ae:	4b02      	ldr	r3, [pc, #8]	; (80095b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	200000e0 	.word	0x200000e0

080095bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	6039      	str	r1, [r7, #0]
 80095c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095c8:	79fb      	ldrb	r3, [r7, #7]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d105      	bne.n	80095da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	4907      	ldr	r1, [pc, #28]	; (80095f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095d2:	4808      	ldr	r0, [pc, #32]	; (80095f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d4:	f7ff fdb4 	bl	8009140 <USBD_GetString>
 80095d8:	e004      	b.n	80095e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	4904      	ldr	r1, [pc, #16]	; (80095f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095de:	4805      	ldr	r0, [pc, #20]	; (80095f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095e0:	f7ff fdae 	bl	8009140 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095e4:	4b02      	ldr	r3, [pc, #8]	; (80095f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20001a80 	.word	0x20001a80
 80095f4:	0800a770 	.word	0x0800a770

080095f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	6039      	str	r1, [r7, #0]
 8009602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d105      	bne.n	8009616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	4907      	ldr	r1, [pc, #28]	; (800962c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800960e:	4808      	ldr	r0, [pc, #32]	; (8009630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009610:	f7ff fd96 	bl	8009140 <USBD_GetString>
 8009614:	e004      	b.n	8009620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4904      	ldr	r1, [pc, #16]	; (800962c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800961a:	4805      	ldr	r0, [pc, #20]	; (8009630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800961c:	f7ff fd90 	bl	8009140 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009620:	4b02      	ldr	r3, [pc, #8]	; (800962c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20001a80 	.word	0x20001a80
 8009630:	0800a77c 	.word	0x0800a77c

08009634 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800963a:	4b0f      	ldr	r3, [pc, #60]	; (8009678 <Get_SerialNum+0x44>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009640:	4b0e      	ldr	r3, [pc, #56]	; (800967c <Get_SerialNum+0x48>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009646:	4b0e      	ldr	r3, [pc, #56]	; (8009680 <Get_SerialNum+0x4c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d009      	beq.n	800966e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800965a:	2208      	movs	r2, #8
 800965c:	4909      	ldr	r1, [pc, #36]	; (8009684 <Get_SerialNum+0x50>)
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f814 	bl	800968c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009664:	2204      	movs	r2, #4
 8009666:	4908      	ldr	r1, [pc, #32]	; (8009688 <Get_SerialNum+0x54>)
 8009668:	68b8      	ldr	r0, [r7, #8]
 800966a:	f000 f80f 	bl	800968c <IntToUnicode>
  }
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	1fff7a10 	.word	0x1fff7a10
 800967c:	1fff7a14 	.word	0x1fff7a14
 8009680:	1fff7a18 	.word	0x1fff7a18
 8009684:	200000e2 	.word	0x200000e2
 8009688:	200000f2 	.word	0x200000f2

0800968c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800969e:	2300      	movs	r3, #0
 80096a0:	75fb      	strb	r3, [r7, #23]
 80096a2:	e027      	b.n	80096f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	0f1b      	lsrs	r3, r3, #28
 80096a8:	2b09      	cmp	r3, #9
 80096aa:	d80b      	bhi.n	80096c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	0f1b      	lsrs	r3, r3, #28
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	4619      	mov	r1, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	440b      	add	r3, r1
 80096bc:	3230      	adds	r2, #48	; 0x30
 80096be:	b2d2      	uxtb	r2, r2
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e00a      	b.n	80096da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	0f1b      	lsrs	r3, r3, #28
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	4619      	mov	r1, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	440b      	add	r3, r1
 80096d4:	3237      	adds	r2, #55	; 0x37
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	3301      	adds	r3, #1
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	2200      	movs	r2, #0
 80096ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	3301      	adds	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]
 80096f4:	7dfa      	ldrb	r2, [r7, #23]
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d3d3      	bcc.n	80096a4 <IntToUnicode+0x18>
  }
}
 80096fc:	bf00      	nop
 80096fe:	bf00      	nop
 8009700:	371c      	adds	r7, #28
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
	...

0800970c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	; 0x28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009714:	f107 0314 	add.w	r3, r7, #20
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	605a      	str	r2, [r3, #4]
 800971e:	609a      	str	r2, [r3, #8]
 8009720:	60da      	str	r2, [r3, #12]
 8009722:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800972c:	d13a      	bne.n	80097a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800972e:	2300      	movs	r3, #0
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <HAL_PCD_MspInit+0xa0>)
 8009734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009736:	4a1d      	ldr	r2, [pc, #116]	; (80097ac <HAL_PCD_MspInit+0xa0>)
 8009738:	f043 0301 	orr.w	r3, r3, #1
 800973c:	6313      	str	r3, [r2, #48]	; 0x30
 800973e:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <HAL_PCD_MspInit+0xa0>)
 8009740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	613b      	str	r3, [r7, #16]
 8009748:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800974a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800974e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009750:	2302      	movs	r3, #2
 8009752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009754:	2300      	movs	r3, #0
 8009756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009758:	2303      	movs	r3, #3
 800975a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800975c:	230a      	movs	r3, #10
 800975e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009760:	f107 0314 	add.w	r3, r7, #20
 8009764:	4619      	mov	r1, r3
 8009766:	4812      	ldr	r0, [pc, #72]	; (80097b0 <HAL_PCD_MspInit+0xa4>)
 8009768:	f7f8 faae 	bl	8001cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800976c:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <HAL_PCD_MspInit+0xa0>)
 800976e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009770:	4a0e      	ldr	r2, [pc, #56]	; (80097ac <HAL_PCD_MspInit+0xa0>)
 8009772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009776:	6353      	str	r3, [r2, #52]	; 0x34
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <HAL_PCD_MspInit+0xa0>)
 800977e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009780:	4a0a      	ldr	r2, [pc, #40]	; (80097ac <HAL_PCD_MspInit+0xa0>)
 8009782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009786:	6453      	str	r3, [r2, #68]	; 0x44
 8009788:	4b08      	ldr	r3, [pc, #32]	; (80097ac <HAL_PCD_MspInit+0xa0>)
 800978a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009794:	2200      	movs	r2, #0
 8009796:	2100      	movs	r1, #0
 8009798:	2043      	movs	r0, #67	; 0x43
 800979a:	f7f7 fe5c 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800979e:	2043      	movs	r0, #67	; 0x43
 80097a0:	f7f7 fe75 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097a4:	bf00      	nop
 80097a6:	3728      	adds	r7, #40	; 0x28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	40023800 	.word	0x40023800
 80097b0:	40020000 	.word	0x40020000

080097b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f7fe fb59 	bl	8007e82 <USBD_LL_SetupStage>
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097ea:	78fa      	ldrb	r2, [r7, #3]
 80097ec:	6879      	ldr	r1, [r7, #4]
 80097ee:	4613      	mov	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	78fb      	ldrb	r3, [r7, #3]
 8009800:	4619      	mov	r1, r3
 8009802:	f7fe fb93 	bl	8007f2c <USBD_LL_DataOutStage>
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009820:	78fa      	ldrb	r2, [r7, #3]
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	4613      	mov	r3, r2
 8009826:	00db      	lsls	r3, r3, #3
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	440b      	add	r3, r1
 800982e:	334c      	adds	r3, #76	; 0x4c
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	4619      	mov	r1, r3
 8009836:	f7fe fc2c 	bl	8008092 <USBD_LL_DataInStage>
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fd60 	bl	8008316 <USBD_LL_SOF>
}
 8009856:	bf00      	nop
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009866:	2301      	movs	r3, #1
 8009868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	2b02      	cmp	r3, #2
 8009870:	d001      	beq.n	8009876 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009872:	f7f7 fa61 	bl	8000d38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800987c:	7bfa      	ldrb	r2, [r7, #15]
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe fd0a 	bl	800829a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800988c:	4618      	mov	r0, r3
 800988e:	f7fe fcb2 	bl	80081f6 <USBD_LL_Reset>
}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fd05 	bl	80082ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098c2:	f043 0301 	orr.w	r3, r3, #1
 80098c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098d0:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <HAL_PCD_SuspendCallback+0x48>)
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	4a03      	ldr	r2, [pc, #12]	; (80098e4 <HAL_PCD_SuspendCallback+0x48>)
 80098d6:	f043 0306 	orr.w	r3, r3, #6
 80098da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	e000ed00 	.word	0xe000ed00

080098e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe fcf5 	bl	80082e6 <USBD_LL_Resume>
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009916:	78fa      	ldrb	r2, [r7, #3]
 8009918:	4611      	mov	r1, r2
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fd4d 	bl	80083ba <USBD_LL_IsoOUTIncomplete>
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe fd09 	bl	8008356 <USBD_LL_IsoINIncomplete>
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fd5f 	bl	800841e <USBD_LL_DevConnected>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fd5c 	bl	8008434 <USBD_LL_DevDisconnected>
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d13c      	bne.n	8009a0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009994:	4a20      	ldr	r2, [pc, #128]	; (8009a18 <USBD_LL_Init+0x94>)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a1e      	ldr	r2, [pc, #120]	; (8009a18 <USBD_LL_Init+0x94>)
 80099a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80099a4:	4b1c      	ldr	r3, [pc, #112]	; (8009a18 <USBD_LL_Init+0x94>)
 80099a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80099ac:	4b1a      	ldr	r3, [pc, #104]	; (8009a18 <USBD_LL_Init+0x94>)
 80099ae:	2204      	movs	r2, #4
 80099b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80099b2:	4b19      	ldr	r3, [pc, #100]	; (8009a18 <USBD_LL_Init+0x94>)
 80099b4:	2202      	movs	r2, #2
 80099b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099b8:	4b17      	ldr	r3, [pc, #92]	; (8009a18 <USBD_LL_Init+0x94>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80099be:	4b16      	ldr	r3, [pc, #88]	; (8009a18 <USBD_LL_Init+0x94>)
 80099c0:	2202      	movs	r2, #2
 80099c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099c4:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <USBD_LL_Init+0x94>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80099ca:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <USBD_LL_Init+0x94>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80099d0:	4b11      	ldr	r3, [pc, #68]	; (8009a18 <USBD_LL_Init+0x94>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80099d6:	4b10      	ldr	r3, [pc, #64]	; (8009a18 <USBD_LL_Init+0x94>)
 80099d8:	2200      	movs	r2, #0
 80099da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80099dc:	4b0e      	ldr	r3, [pc, #56]	; (8009a18 <USBD_LL_Init+0x94>)
 80099de:	2200      	movs	r2, #0
 80099e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80099e2:	480d      	ldr	r0, [pc, #52]	; (8009a18 <USBD_LL_Init+0x94>)
 80099e4:	f7f8 fb27 	bl	8002036 <HAL_PCD_Init>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099ee:	f7f7 f9a3 	bl	8000d38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099f2:	2180      	movs	r1, #128	; 0x80
 80099f4:	4808      	ldr	r0, [pc, #32]	; (8009a18 <USBD_LL_Init+0x94>)
 80099f6:	f7f9 fd7e 	bl	80034f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099fa:	2240      	movs	r2, #64	; 0x40
 80099fc:	2100      	movs	r1, #0
 80099fe:	4806      	ldr	r0, [pc, #24]	; (8009a18 <USBD_LL_Init+0x94>)
 8009a00:	f7f9 fd32 	bl	8003468 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a04:	2280      	movs	r2, #128	; 0x80
 8009a06:	2101      	movs	r1, #1
 8009a08:	4803      	ldr	r0, [pc, #12]	; (8009a18 <USBD_LL_Init+0x94>)
 8009a0a:	f7f9 fd2d 	bl	8003468 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20001c80 	.word	0x20001c80

08009a1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f8 fc1c 	bl	8002270 <HAL_PCD_Start>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 f942 	bl	8009cc8 <USBD_Get_USB_Status>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	4608      	mov	r0, r1
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4603      	mov	r3, r0
 8009a62:	70fb      	strb	r3, [r7, #3]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70bb      	strb	r3, [r7, #2]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a7a:	78bb      	ldrb	r3, [r7, #2]
 8009a7c:	883a      	ldrh	r2, [r7, #0]
 8009a7e:	78f9      	ldrb	r1, [r7, #3]
 8009a80:	f7f9 f8ed 	bl	8002c5e <HAL_PCD_EP_Open>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 f91c 	bl	8009cc8 <USBD_Get_USB_Status>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7f9 f936 	bl	8002d2e <HAL_PCD_EP_Close>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 f8fd 	bl	8009cc8 <USBD_Get_USB_Status>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009af6:	78fa      	ldrb	r2, [r7, #3]
 8009af8:	4611      	mov	r1, r2
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7f9 fa0e 	bl	8002f1c <HAL_PCD_EP_SetStall>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 f8de 	bl	8009cc8 <USBD_Get_USB_Status>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b084      	sub	sp, #16
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	460b      	mov	r3, r1
 8009b24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b34:	78fa      	ldrb	r2, [r7, #3]
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7f9 fa53 	bl	8002fe4 <HAL_PCD_EP_ClrStall>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 f8bf 	bl	8009cc8 <USBD_Get_USB_Status>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da0b      	bge.n	8009b8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b74:	78fb      	ldrb	r3, [r7, #3]
 8009b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b7a:	68f9      	ldr	r1, [r7, #12]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	440b      	add	r3, r1
 8009b86:	333e      	adds	r3, #62	; 0x3e
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	e00b      	b.n	8009ba4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b92:	68f9      	ldr	r1, [r7, #12]
 8009b94:	4613      	mov	r3, r2
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009ba2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bca:	78fa      	ldrb	r2, [r7, #3]
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f9 f820 	bl	8002c14 <HAL_PCD_SetAddress>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f874 	bl	8009cc8 <USBD_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b086      	sub	sp, #24
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	607a      	str	r2, [r7, #4]
 8009bf8:	603b      	str	r3, [r7, #0]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c0c:	7af9      	ldrb	r1, [r7, #11]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	f7f9 f939 	bl	8002e88 <HAL_PCD_EP_Transmit>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 f853 	bl	8009cc8 <USBD_Get_USB_Status>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c26:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c4e:	7af9      	ldrb	r1, [r7, #11]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	f7f9 f8b5 	bl	8002dc2 <HAL_PCD_EP_Receive>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 f832 	bl	8009cc8 <USBD_Get_USB_Status>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c68:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b082      	sub	sp, #8
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c84:	78fa      	ldrb	r2, [r7, #3]
 8009c86:	4611      	mov	r1, r2
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7f9 f8e5 	bl	8002e58 <HAL_PCD_EP_GetRxCount>
 8009c8e:	4603      	mov	r3, r0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ca0:	4b03      	ldr	r3, [pc, #12]	; (8009cb0 <USBD_static_malloc+0x18>)
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	2000218c 	.word	0x2000218c

08009cb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]

}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d817      	bhi.n	8009d0c <USBD_Get_USB_Status+0x44>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <USBD_Get_USB_Status+0x1c>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009cf5 	.word	0x08009cf5
 8009ce8:	08009cfb 	.word	0x08009cfb
 8009cec:	08009d01 	.word	0x08009d01
 8009cf0:	08009d07 	.word	0x08009d07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf8:	e00b      	b.n	8009d12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cfe:	e008      	b.n	8009d12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d00:	2301      	movs	r3, #1
 8009d02:	73fb      	strb	r3, [r7, #15]
    break;
 8009d04:	e005      	b.n	8009d12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d06:	2303      	movs	r3, #3
 8009d08:	73fb      	strb	r3, [r7, #15]
    break;
 8009d0a:	e002      	b.n	8009d12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d10:	bf00      	nop
  }
  return usb_status;
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <__errno>:
 8009d20:	4b01      	ldr	r3, [pc, #4]	; (8009d28 <__errno+0x8>)
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	200000fc 	.word	0x200000fc

08009d2c <__libc_init_array>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	4d0d      	ldr	r5, [pc, #52]	; (8009d64 <__libc_init_array+0x38>)
 8009d30:	4c0d      	ldr	r4, [pc, #52]	; (8009d68 <__libc_init_array+0x3c>)
 8009d32:	1b64      	subs	r4, r4, r5
 8009d34:	10a4      	asrs	r4, r4, #2
 8009d36:	2600      	movs	r6, #0
 8009d38:	42a6      	cmp	r6, r4
 8009d3a:	d109      	bne.n	8009d50 <__libc_init_array+0x24>
 8009d3c:	4d0b      	ldr	r5, [pc, #44]	; (8009d6c <__libc_init_array+0x40>)
 8009d3e:	4c0c      	ldr	r4, [pc, #48]	; (8009d70 <__libc_init_array+0x44>)
 8009d40:	f000 fc8e 	bl	800a660 <_init>
 8009d44:	1b64      	subs	r4, r4, r5
 8009d46:	10a4      	asrs	r4, r4, #2
 8009d48:	2600      	movs	r6, #0
 8009d4a:	42a6      	cmp	r6, r4
 8009d4c:	d105      	bne.n	8009d5a <__libc_init_array+0x2e>
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d54:	4798      	blx	r3
 8009d56:	3601      	adds	r6, #1
 8009d58:	e7ee      	b.n	8009d38 <__libc_init_array+0xc>
 8009d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d5e:	4798      	blx	r3
 8009d60:	3601      	adds	r6, #1
 8009d62:	e7f2      	b.n	8009d4a <__libc_init_array+0x1e>
 8009d64:	0800a7e8 	.word	0x0800a7e8
 8009d68:	0800a7e8 	.word	0x0800a7e8
 8009d6c:	0800a7e8 	.word	0x0800a7e8
 8009d70:	0800a7ec 	.word	0x0800a7ec

08009d74 <memcpy>:
 8009d74:	440a      	add	r2, r1
 8009d76:	4291      	cmp	r1, r2
 8009d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d7c:	d100      	bne.n	8009d80 <memcpy+0xc>
 8009d7e:	4770      	bx	lr
 8009d80:	b510      	push	{r4, lr}
 8009d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d8a:	4291      	cmp	r1, r2
 8009d8c:	d1f9      	bne.n	8009d82 <memcpy+0xe>
 8009d8e:	bd10      	pop	{r4, pc}

08009d90 <memset>:
 8009d90:	4402      	add	r2, r0
 8009d92:	4603      	mov	r3, r0
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d100      	bne.n	8009d9a <memset+0xa>
 8009d98:	4770      	bx	lr
 8009d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d9e:	e7f9      	b.n	8009d94 <memset+0x4>

08009da0 <siprintf>:
 8009da0:	b40e      	push	{r1, r2, r3}
 8009da2:	b500      	push	{lr}
 8009da4:	b09c      	sub	sp, #112	; 0x70
 8009da6:	ab1d      	add	r3, sp, #116	; 0x74
 8009da8:	9002      	str	r0, [sp, #8]
 8009daa:	9006      	str	r0, [sp, #24]
 8009dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009db0:	4809      	ldr	r0, [pc, #36]	; (8009dd8 <siprintf+0x38>)
 8009db2:	9107      	str	r1, [sp, #28]
 8009db4:	9104      	str	r1, [sp, #16]
 8009db6:	4909      	ldr	r1, [pc, #36]	; (8009ddc <siprintf+0x3c>)
 8009db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dbc:	9105      	str	r1, [sp, #20]
 8009dbe:	6800      	ldr	r0, [r0, #0]
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	a902      	add	r1, sp, #8
 8009dc4:	f000 f868 	bl	8009e98 <_svfiprintf_r>
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	b01c      	add	sp, #112	; 0x70
 8009dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd4:	b003      	add	sp, #12
 8009dd6:	4770      	bx	lr
 8009dd8:	200000fc 	.word	0x200000fc
 8009ddc:	ffff0208 	.word	0xffff0208

08009de0 <__ssputs_r>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	688e      	ldr	r6, [r1, #8]
 8009de6:	429e      	cmp	r6, r3
 8009de8:	4682      	mov	sl, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	4690      	mov	r8, r2
 8009dee:	461f      	mov	r7, r3
 8009df0:	d838      	bhi.n	8009e64 <__ssputs_r+0x84>
 8009df2:	898a      	ldrh	r2, [r1, #12]
 8009df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009df8:	d032      	beq.n	8009e60 <__ssputs_r+0x80>
 8009dfa:	6825      	ldr	r5, [r4, #0]
 8009dfc:	6909      	ldr	r1, [r1, #16]
 8009dfe:	eba5 0901 	sub.w	r9, r5, r1
 8009e02:	6965      	ldr	r5, [r4, #20]
 8009e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	444b      	add	r3, r9
 8009e10:	106d      	asrs	r5, r5, #1
 8009e12:	429d      	cmp	r5, r3
 8009e14:	bf38      	it	cc
 8009e16:	461d      	movcc	r5, r3
 8009e18:	0553      	lsls	r3, r2, #21
 8009e1a:	d531      	bpl.n	8009e80 <__ssputs_r+0xa0>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f000 fb55 	bl	800a4cc <_malloc_r>
 8009e22:	4606      	mov	r6, r0
 8009e24:	b950      	cbnz	r0, 8009e3c <__ssputs_r+0x5c>
 8009e26:	230c      	movs	r3, #12
 8009e28:	f8ca 3000 	str.w	r3, [sl]
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3c:	6921      	ldr	r1, [r4, #16]
 8009e3e:	464a      	mov	r2, r9
 8009e40:	f7ff ff98 	bl	8009d74 <memcpy>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	6126      	str	r6, [r4, #16]
 8009e52:	6165      	str	r5, [r4, #20]
 8009e54:	444e      	add	r6, r9
 8009e56:	eba5 0509 	sub.w	r5, r5, r9
 8009e5a:	6026      	str	r6, [r4, #0]
 8009e5c:	60a5      	str	r5, [r4, #8]
 8009e5e:	463e      	mov	r6, r7
 8009e60:	42be      	cmp	r6, r7
 8009e62:	d900      	bls.n	8009e66 <__ssputs_r+0x86>
 8009e64:	463e      	mov	r6, r7
 8009e66:	6820      	ldr	r0, [r4, #0]
 8009e68:	4632      	mov	r2, r6
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	f000 faa8 	bl	800a3c0 <memmove>
 8009e70:	68a3      	ldr	r3, [r4, #8]
 8009e72:	1b9b      	subs	r3, r3, r6
 8009e74:	60a3      	str	r3, [r4, #8]
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	4433      	add	r3, r6
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e7db      	b.n	8009e38 <__ssputs_r+0x58>
 8009e80:	462a      	mov	r2, r5
 8009e82:	f000 fb97 	bl	800a5b4 <_realloc_r>
 8009e86:	4606      	mov	r6, r0
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d1e1      	bne.n	8009e50 <__ssputs_r+0x70>
 8009e8c:	6921      	ldr	r1, [r4, #16]
 8009e8e:	4650      	mov	r0, sl
 8009e90:	f000 fab0 	bl	800a3f4 <_free_r>
 8009e94:	e7c7      	b.n	8009e26 <__ssputs_r+0x46>
	...

08009e98 <_svfiprintf_r>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	4698      	mov	r8, r3
 8009e9e:	898b      	ldrh	r3, [r1, #12]
 8009ea0:	061b      	lsls	r3, r3, #24
 8009ea2:	b09d      	sub	sp, #116	; 0x74
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	d50e      	bpl.n	8009eca <_svfiprintf_r+0x32>
 8009eac:	690b      	ldr	r3, [r1, #16]
 8009eae:	b963      	cbnz	r3, 8009eca <_svfiprintf_r+0x32>
 8009eb0:	2140      	movs	r1, #64	; 0x40
 8009eb2:	f000 fb0b 	bl	800a4cc <_malloc_r>
 8009eb6:	6028      	str	r0, [r5, #0]
 8009eb8:	6128      	str	r0, [r5, #16]
 8009eba:	b920      	cbnz	r0, 8009ec6 <_svfiprintf_r+0x2e>
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e0d1      	b.n	800a06a <_svfiprintf_r+0x1d2>
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	616b      	str	r3, [r5, #20]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ece:	2320      	movs	r3, #32
 8009ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ed8:	2330      	movs	r3, #48	; 0x30
 8009eda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a084 <_svfiprintf_r+0x1ec>
 8009ede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ee2:	f04f 0901 	mov.w	r9, #1
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	469a      	mov	sl, r3
 8009eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eee:	b10a      	cbz	r2, 8009ef4 <_svfiprintf_r+0x5c>
 8009ef0:	2a25      	cmp	r2, #37	; 0x25
 8009ef2:	d1f9      	bne.n	8009ee8 <_svfiprintf_r+0x50>
 8009ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ef8:	d00b      	beq.n	8009f12 <_svfiprintf_r+0x7a>
 8009efa:	465b      	mov	r3, fp
 8009efc:	4622      	mov	r2, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff ff6d 	bl	8009de0 <__ssputs_r>
 8009f06:	3001      	adds	r0, #1
 8009f08:	f000 80aa 	beq.w	800a060 <_svfiprintf_r+0x1c8>
 8009f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f0e:	445a      	add	r2, fp
 8009f10:	9209      	str	r2, [sp, #36]	; 0x24
 8009f12:	f89a 3000 	ldrb.w	r3, [sl]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 80a2 	beq.w	800a060 <_svfiprintf_r+0x1c8>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f26:	f10a 0a01 	add.w	sl, sl, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	9307      	str	r3, [sp, #28]
 8009f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f32:	931a      	str	r3, [sp, #104]	; 0x68
 8009f34:	4654      	mov	r4, sl
 8009f36:	2205      	movs	r2, #5
 8009f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3c:	4851      	ldr	r0, [pc, #324]	; (800a084 <_svfiprintf_r+0x1ec>)
 8009f3e:	f7f6 f957 	bl	80001f0 <memchr>
 8009f42:	9a04      	ldr	r2, [sp, #16]
 8009f44:	b9d8      	cbnz	r0, 8009f7e <_svfiprintf_r+0xe6>
 8009f46:	06d0      	lsls	r0, r2, #27
 8009f48:	bf44      	itt	mi
 8009f4a:	2320      	movmi	r3, #32
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	0711      	lsls	r1, r2, #28
 8009f52:	bf44      	itt	mi
 8009f54:	232b      	movmi	r3, #43	; 0x2b
 8009f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f60:	d015      	beq.n	8009f8e <_svfiprintf_r+0xf6>
 8009f62:	9a07      	ldr	r2, [sp, #28]
 8009f64:	4654      	mov	r4, sl
 8009f66:	2000      	movs	r0, #0
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f72:	3b30      	subs	r3, #48	; 0x30
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d94e      	bls.n	800a016 <_svfiprintf_r+0x17e>
 8009f78:	b1b0      	cbz	r0, 8009fa8 <_svfiprintf_r+0x110>
 8009f7a:	9207      	str	r2, [sp, #28]
 8009f7c:	e014      	b.n	8009fa8 <_svfiprintf_r+0x110>
 8009f7e:	eba0 0308 	sub.w	r3, r0, r8
 8009f82:	fa09 f303 	lsl.w	r3, r9, r3
 8009f86:	4313      	orrs	r3, r2
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	46a2      	mov	sl, r4
 8009f8c:	e7d2      	b.n	8009f34 <_svfiprintf_r+0x9c>
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	1d19      	adds	r1, r3, #4
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	9103      	str	r1, [sp, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bfbb      	ittet	lt
 8009f9a:	425b      	neglt	r3, r3
 8009f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa0:	9307      	strge	r3, [sp, #28]
 8009fa2:	9307      	strlt	r3, [sp, #28]
 8009fa4:	bfb8      	it	lt
 8009fa6:	9204      	strlt	r2, [sp, #16]
 8009fa8:	7823      	ldrb	r3, [r4, #0]
 8009faa:	2b2e      	cmp	r3, #46	; 0x2e
 8009fac:	d10c      	bne.n	8009fc8 <_svfiprintf_r+0x130>
 8009fae:	7863      	ldrb	r3, [r4, #1]
 8009fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb2:	d135      	bne.n	800a020 <_svfiprintf_r+0x188>
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	9203      	str	r2, [sp, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bfb8      	it	lt
 8009fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fc4:	3402      	adds	r4, #2
 8009fc6:	9305      	str	r3, [sp, #20]
 8009fc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a094 <_svfiprintf_r+0x1fc>
 8009fcc:	7821      	ldrb	r1, [r4, #0]
 8009fce:	2203      	movs	r2, #3
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	f7f6 f90d 	bl	80001f0 <memchr>
 8009fd6:	b140      	cbz	r0, 8009fea <_svfiprintf_r+0x152>
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	eba0 000a 	sub.w	r0, r0, sl
 8009fde:	fa03 f000 	lsl.w	r0, r3, r0
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	4303      	orrs	r3, r0
 8009fe6:	3401      	adds	r4, #1
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fee:	4826      	ldr	r0, [pc, #152]	; (800a088 <_svfiprintf_r+0x1f0>)
 8009ff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ff4:	2206      	movs	r2, #6
 8009ff6:	f7f6 f8fb 	bl	80001f0 <memchr>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d038      	beq.n	800a070 <_svfiprintf_r+0x1d8>
 8009ffe:	4b23      	ldr	r3, [pc, #140]	; (800a08c <_svfiprintf_r+0x1f4>)
 800a000:	bb1b      	cbnz	r3, 800a04a <_svfiprintf_r+0x1b2>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	3307      	adds	r3, #7
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	3308      	adds	r3, #8
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	4433      	add	r3, r6
 800a012:	9309      	str	r3, [sp, #36]	; 0x24
 800a014:	e767      	b.n	8009ee6 <_svfiprintf_r+0x4e>
 800a016:	fb0c 3202 	mla	r2, ip, r2, r3
 800a01a:	460c      	mov	r4, r1
 800a01c:	2001      	movs	r0, #1
 800a01e:	e7a5      	b.n	8009f6c <_svfiprintf_r+0xd4>
 800a020:	2300      	movs	r3, #0
 800a022:	3401      	adds	r4, #1
 800a024:	9305      	str	r3, [sp, #20]
 800a026:	4619      	mov	r1, r3
 800a028:	f04f 0c0a 	mov.w	ip, #10
 800a02c:	4620      	mov	r0, r4
 800a02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a032:	3a30      	subs	r2, #48	; 0x30
 800a034:	2a09      	cmp	r2, #9
 800a036:	d903      	bls.n	800a040 <_svfiprintf_r+0x1a8>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0c5      	beq.n	8009fc8 <_svfiprintf_r+0x130>
 800a03c:	9105      	str	r1, [sp, #20]
 800a03e:	e7c3      	b.n	8009fc8 <_svfiprintf_r+0x130>
 800a040:	fb0c 2101 	mla	r1, ip, r1, r2
 800a044:	4604      	mov	r4, r0
 800a046:	2301      	movs	r3, #1
 800a048:	e7f0      	b.n	800a02c <_svfiprintf_r+0x194>
 800a04a:	ab03      	add	r3, sp, #12
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	462a      	mov	r2, r5
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <_svfiprintf_r+0x1f8>)
 800a052:	a904      	add	r1, sp, #16
 800a054:	4638      	mov	r0, r7
 800a056:	f3af 8000 	nop.w
 800a05a:	1c42      	adds	r2, r0, #1
 800a05c:	4606      	mov	r6, r0
 800a05e:	d1d6      	bne.n	800a00e <_svfiprintf_r+0x176>
 800a060:	89ab      	ldrh	r3, [r5, #12]
 800a062:	065b      	lsls	r3, r3, #25
 800a064:	f53f af2c 	bmi.w	8009ec0 <_svfiprintf_r+0x28>
 800a068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a06a:	b01d      	add	sp, #116	; 0x74
 800a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a070:	ab03      	add	r3, sp, #12
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	462a      	mov	r2, r5
 800a076:	4b06      	ldr	r3, [pc, #24]	; (800a090 <_svfiprintf_r+0x1f8>)
 800a078:	a904      	add	r1, sp, #16
 800a07a:	4638      	mov	r0, r7
 800a07c:	f000 f87a 	bl	800a174 <_printf_i>
 800a080:	e7eb      	b.n	800a05a <_svfiprintf_r+0x1c2>
 800a082:	bf00      	nop
 800a084:	0800a7ac 	.word	0x0800a7ac
 800a088:	0800a7b6 	.word	0x0800a7b6
 800a08c:	00000000 	.word	0x00000000
 800a090:	08009de1 	.word	0x08009de1
 800a094:	0800a7b2 	.word	0x0800a7b2

0800a098 <_printf_common>:
 800a098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	4616      	mov	r6, r2
 800a09e:	4699      	mov	r9, r3
 800a0a0:	688a      	ldr	r2, [r1, #8]
 800a0a2:	690b      	ldr	r3, [r1, #16]
 800a0a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	bfb8      	it	lt
 800a0ac:	4613      	movlt	r3, r2
 800a0ae:	6033      	str	r3, [r6, #0]
 800a0b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0b4:	4607      	mov	r7, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	b10a      	cbz	r2, 800a0be <_printf_common+0x26>
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	0699      	lsls	r1, r3, #26
 800a0c2:	bf42      	ittt	mi
 800a0c4:	6833      	ldrmi	r3, [r6, #0]
 800a0c6:	3302      	addmi	r3, #2
 800a0c8:	6033      	strmi	r3, [r6, #0]
 800a0ca:	6825      	ldr	r5, [r4, #0]
 800a0cc:	f015 0506 	ands.w	r5, r5, #6
 800a0d0:	d106      	bne.n	800a0e0 <_printf_common+0x48>
 800a0d2:	f104 0a19 	add.w	sl, r4, #25
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	6832      	ldr	r2, [r6, #0]
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	42ab      	cmp	r3, r5
 800a0de:	dc26      	bgt.n	800a12e <_printf_common+0x96>
 800a0e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0e4:	1e13      	subs	r3, r2, #0
 800a0e6:	6822      	ldr	r2, [r4, #0]
 800a0e8:	bf18      	it	ne
 800a0ea:	2301      	movne	r3, #1
 800a0ec:	0692      	lsls	r2, r2, #26
 800a0ee:	d42b      	bmi.n	800a148 <_printf_common+0xb0>
 800a0f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	47c0      	blx	r8
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d01e      	beq.n	800a13c <_printf_common+0xa4>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	68e5      	ldr	r5, [r4, #12]
 800a102:	6832      	ldr	r2, [r6, #0]
 800a104:	f003 0306 	and.w	r3, r3, #6
 800a108:	2b04      	cmp	r3, #4
 800a10a:	bf08      	it	eq
 800a10c:	1aad      	subeq	r5, r5, r2
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	6922      	ldr	r2, [r4, #16]
 800a112:	bf0c      	ite	eq
 800a114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a118:	2500      	movne	r5, #0
 800a11a:	4293      	cmp	r3, r2
 800a11c:	bfc4      	itt	gt
 800a11e:	1a9b      	subgt	r3, r3, r2
 800a120:	18ed      	addgt	r5, r5, r3
 800a122:	2600      	movs	r6, #0
 800a124:	341a      	adds	r4, #26
 800a126:	42b5      	cmp	r5, r6
 800a128:	d11a      	bne.n	800a160 <_printf_common+0xc8>
 800a12a:	2000      	movs	r0, #0
 800a12c:	e008      	b.n	800a140 <_printf_common+0xa8>
 800a12e:	2301      	movs	r3, #1
 800a130:	4652      	mov	r2, sl
 800a132:	4649      	mov	r1, r9
 800a134:	4638      	mov	r0, r7
 800a136:	47c0      	blx	r8
 800a138:	3001      	adds	r0, #1
 800a13a:	d103      	bne.n	800a144 <_printf_common+0xac>
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295
 800a140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a144:	3501      	adds	r5, #1
 800a146:	e7c6      	b.n	800a0d6 <_printf_common+0x3e>
 800a148:	18e1      	adds	r1, r4, r3
 800a14a:	1c5a      	adds	r2, r3, #1
 800a14c:	2030      	movs	r0, #48	; 0x30
 800a14e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a152:	4422      	add	r2, r4
 800a154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a15c:	3302      	adds	r3, #2
 800a15e:	e7c7      	b.n	800a0f0 <_printf_common+0x58>
 800a160:	2301      	movs	r3, #1
 800a162:	4622      	mov	r2, r4
 800a164:	4649      	mov	r1, r9
 800a166:	4638      	mov	r0, r7
 800a168:	47c0      	blx	r8
 800a16a:	3001      	adds	r0, #1
 800a16c:	d0e6      	beq.n	800a13c <_printf_common+0xa4>
 800a16e:	3601      	adds	r6, #1
 800a170:	e7d9      	b.n	800a126 <_printf_common+0x8e>
	...

0800a174 <_printf_i>:
 800a174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a178:	7e0f      	ldrb	r7, [r1, #24]
 800a17a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a17c:	2f78      	cmp	r7, #120	; 0x78
 800a17e:	4691      	mov	r9, r2
 800a180:	4680      	mov	r8, r0
 800a182:	460c      	mov	r4, r1
 800a184:	469a      	mov	sl, r3
 800a186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a18a:	d807      	bhi.n	800a19c <_printf_i+0x28>
 800a18c:	2f62      	cmp	r7, #98	; 0x62
 800a18e:	d80a      	bhi.n	800a1a6 <_printf_i+0x32>
 800a190:	2f00      	cmp	r7, #0
 800a192:	f000 80d8 	beq.w	800a346 <_printf_i+0x1d2>
 800a196:	2f58      	cmp	r7, #88	; 0x58
 800a198:	f000 80a3 	beq.w	800a2e2 <_printf_i+0x16e>
 800a19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1a4:	e03a      	b.n	800a21c <_printf_i+0xa8>
 800a1a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1aa:	2b15      	cmp	r3, #21
 800a1ac:	d8f6      	bhi.n	800a19c <_printf_i+0x28>
 800a1ae:	a101      	add	r1, pc, #4	; (adr r1, 800a1b4 <_printf_i+0x40>)
 800a1b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1b4:	0800a20d 	.word	0x0800a20d
 800a1b8:	0800a221 	.word	0x0800a221
 800a1bc:	0800a19d 	.word	0x0800a19d
 800a1c0:	0800a19d 	.word	0x0800a19d
 800a1c4:	0800a19d 	.word	0x0800a19d
 800a1c8:	0800a19d 	.word	0x0800a19d
 800a1cc:	0800a221 	.word	0x0800a221
 800a1d0:	0800a19d 	.word	0x0800a19d
 800a1d4:	0800a19d 	.word	0x0800a19d
 800a1d8:	0800a19d 	.word	0x0800a19d
 800a1dc:	0800a19d 	.word	0x0800a19d
 800a1e0:	0800a32d 	.word	0x0800a32d
 800a1e4:	0800a251 	.word	0x0800a251
 800a1e8:	0800a30f 	.word	0x0800a30f
 800a1ec:	0800a19d 	.word	0x0800a19d
 800a1f0:	0800a19d 	.word	0x0800a19d
 800a1f4:	0800a34f 	.word	0x0800a34f
 800a1f8:	0800a19d 	.word	0x0800a19d
 800a1fc:	0800a251 	.word	0x0800a251
 800a200:	0800a19d 	.word	0x0800a19d
 800a204:	0800a19d 	.word	0x0800a19d
 800a208:	0800a317 	.word	0x0800a317
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	1d1a      	adds	r2, r3, #4
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	602a      	str	r2, [r5, #0]
 800a214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a21c:	2301      	movs	r3, #1
 800a21e:	e0a3      	b.n	800a368 <_printf_i+0x1f4>
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	6829      	ldr	r1, [r5, #0]
 800a224:	0606      	lsls	r6, r0, #24
 800a226:	f101 0304 	add.w	r3, r1, #4
 800a22a:	d50a      	bpl.n	800a242 <_printf_i+0xce>
 800a22c:	680e      	ldr	r6, [r1, #0]
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	2e00      	cmp	r6, #0
 800a232:	da03      	bge.n	800a23c <_printf_i+0xc8>
 800a234:	232d      	movs	r3, #45	; 0x2d
 800a236:	4276      	negs	r6, r6
 800a238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a23c:	485e      	ldr	r0, [pc, #376]	; (800a3b8 <_printf_i+0x244>)
 800a23e:	230a      	movs	r3, #10
 800a240:	e019      	b.n	800a276 <_printf_i+0x102>
 800a242:	680e      	ldr	r6, [r1, #0]
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a24a:	bf18      	it	ne
 800a24c:	b236      	sxthne	r6, r6
 800a24e:	e7ef      	b.n	800a230 <_printf_i+0xbc>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	6820      	ldr	r0, [r4, #0]
 800a254:	1d19      	adds	r1, r3, #4
 800a256:	6029      	str	r1, [r5, #0]
 800a258:	0601      	lsls	r1, r0, #24
 800a25a:	d501      	bpl.n	800a260 <_printf_i+0xec>
 800a25c:	681e      	ldr	r6, [r3, #0]
 800a25e:	e002      	b.n	800a266 <_printf_i+0xf2>
 800a260:	0646      	lsls	r6, r0, #25
 800a262:	d5fb      	bpl.n	800a25c <_printf_i+0xe8>
 800a264:	881e      	ldrh	r6, [r3, #0]
 800a266:	4854      	ldr	r0, [pc, #336]	; (800a3b8 <_printf_i+0x244>)
 800a268:	2f6f      	cmp	r7, #111	; 0x6f
 800a26a:	bf0c      	ite	eq
 800a26c:	2308      	moveq	r3, #8
 800a26e:	230a      	movne	r3, #10
 800a270:	2100      	movs	r1, #0
 800a272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a276:	6865      	ldr	r5, [r4, #4]
 800a278:	60a5      	str	r5, [r4, #8]
 800a27a:	2d00      	cmp	r5, #0
 800a27c:	bfa2      	ittt	ge
 800a27e:	6821      	ldrge	r1, [r4, #0]
 800a280:	f021 0104 	bicge.w	r1, r1, #4
 800a284:	6021      	strge	r1, [r4, #0]
 800a286:	b90e      	cbnz	r6, 800a28c <_printf_i+0x118>
 800a288:	2d00      	cmp	r5, #0
 800a28a:	d04d      	beq.n	800a328 <_printf_i+0x1b4>
 800a28c:	4615      	mov	r5, r2
 800a28e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a292:	fb03 6711 	mls	r7, r3, r1, r6
 800a296:	5dc7      	ldrb	r7, [r0, r7]
 800a298:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a29c:	4637      	mov	r7, r6
 800a29e:	42bb      	cmp	r3, r7
 800a2a0:	460e      	mov	r6, r1
 800a2a2:	d9f4      	bls.n	800a28e <_printf_i+0x11a>
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d10b      	bne.n	800a2c0 <_printf_i+0x14c>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	07de      	lsls	r6, r3, #31
 800a2ac:	d508      	bpl.n	800a2c0 <_printf_i+0x14c>
 800a2ae:	6923      	ldr	r3, [r4, #16]
 800a2b0:	6861      	ldr	r1, [r4, #4]
 800a2b2:	4299      	cmp	r1, r3
 800a2b4:	bfde      	ittt	le
 800a2b6:	2330      	movle	r3, #48	; 0x30
 800a2b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2c0:	1b52      	subs	r2, r2, r5
 800a2c2:	6122      	str	r2, [r4, #16]
 800a2c4:	f8cd a000 	str.w	sl, [sp]
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	aa03      	add	r2, sp, #12
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	f7ff fee2 	bl	800a098 <_printf_common>
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d14c      	bne.n	800a372 <_printf_i+0x1fe>
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	b004      	add	sp, #16
 800a2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e2:	4835      	ldr	r0, [pc, #212]	; (800a3b8 <_printf_i+0x244>)
 800a2e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2e8:	6829      	ldr	r1, [r5, #0]
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2f0:	6029      	str	r1, [r5, #0]
 800a2f2:	061d      	lsls	r5, r3, #24
 800a2f4:	d514      	bpl.n	800a320 <_printf_i+0x1ac>
 800a2f6:	07df      	lsls	r7, r3, #31
 800a2f8:	bf44      	itt	mi
 800a2fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a2fe:	6023      	strmi	r3, [r4, #0]
 800a300:	b91e      	cbnz	r6, 800a30a <_printf_i+0x196>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	f023 0320 	bic.w	r3, r3, #32
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	2310      	movs	r3, #16
 800a30c:	e7b0      	b.n	800a270 <_printf_i+0xfc>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	f043 0320 	orr.w	r3, r3, #32
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	2378      	movs	r3, #120	; 0x78
 800a318:	4828      	ldr	r0, [pc, #160]	; (800a3bc <_printf_i+0x248>)
 800a31a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a31e:	e7e3      	b.n	800a2e8 <_printf_i+0x174>
 800a320:	0659      	lsls	r1, r3, #25
 800a322:	bf48      	it	mi
 800a324:	b2b6      	uxthmi	r6, r6
 800a326:	e7e6      	b.n	800a2f6 <_printf_i+0x182>
 800a328:	4615      	mov	r5, r2
 800a32a:	e7bb      	b.n	800a2a4 <_printf_i+0x130>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	6826      	ldr	r6, [r4, #0]
 800a330:	6961      	ldr	r1, [r4, #20]
 800a332:	1d18      	adds	r0, r3, #4
 800a334:	6028      	str	r0, [r5, #0]
 800a336:	0635      	lsls	r5, r6, #24
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	d501      	bpl.n	800a340 <_printf_i+0x1cc>
 800a33c:	6019      	str	r1, [r3, #0]
 800a33e:	e002      	b.n	800a346 <_printf_i+0x1d2>
 800a340:	0670      	lsls	r0, r6, #25
 800a342:	d5fb      	bpl.n	800a33c <_printf_i+0x1c8>
 800a344:	8019      	strh	r1, [r3, #0]
 800a346:	2300      	movs	r3, #0
 800a348:	6123      	str	r3, [r4, #16]
 800a34a:	4615      	mov	r5, r2
 800a34c:	e7ba      	b.n	800a2c4 <_printf_i+0x150>
 800a34e:	682b      	ldr	r3, [r5, #0]
 800a350:	1d1a      	adds	r2, r3, #4
 800a352:	602a      	str	r2, [r5, #0]
 800a354:	681d      	ldr	r5, [r3, #0]
 800a356:	6862      	ldr	r2, [r4, #4]
 800a358:	2100      	movs	r1, #0
 800a35a:	4628      	mov	r0, r5
 800a35c:	f7f5 ff48 	bl	80001f0 <memchr>
 800a360:	b108      	cbz	r0, 800a366 <_printf_i+0x1f2>
 800a362:	1b40      	subs	r0, r0, r5
 800a364:	6060      	str	r0, [r4, #4]
 800a366:	6863      	ldr	r3, [r4, #4]
 800a368:	6123      	str	r3, [r4, #16]
 800a36a:	2300      	movs	r3, #0
 800a36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a370:	e7a8      	b.n	800a2c4 <_printf_i+0x150>
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	462a      	mov	r2, r5
 800a376:	4649      	mov	r1, r9
 800a378:	4640      	mov	r0, r8
 800a37a:	47d0      	blx	sl
 800a37c:	3001      	adds	r0, #1
 800a37e:	d0ab      	beq.n	800a2d8 <_printf_i+0x164>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	079b      	lsls	r3, r3, #30
 800a384:	d413      	bmi.n	800a3ae <_printf_i+0x23a>
 800a386:	68e0      	ldr	r0, [r4, #12]
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	4298      	cmp	r0, r3
 800a38c:	bfb8      	it	lt
 800a38e:	4618      	movlt	r0, r3
 800a390:	e7a4      	b.n	800a2dc <_printf_i+0x168>
 800a392:	2301      	movs	r3, #1
 800a394:	4632      	mov	r2, r6
 800a396:	4649      	mov	r1, r9
 800a398:	4640      	mov	r0, r8
 800a39a:	47d0      	blx	sl
 800a39c:	3001      	adds	r0, #1
 800a39e:	d09b      	beq.n	800a2d8 <_printf_i+0x164>
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	68e3      	ldr	r3, [r4, #12]
 800a3a4:	9903      	ldr	r1, [sp, #12]
 800a3a6:	1a5b      	subs	r3, r3, r1
 800a3a8:	42ab      	cmp	r3, r5
 800a3aa:	dcf2      	bgt.n	800a392 <_printf_i+0x21e>
 800a3ac:	e7eb      	b.n	800a386 <_printf_i+0x212>
 800a3ae:	2500      	movs	r5, #0
 800a3b0:	f104 0619 	add.w	r6, r4, #25
 800a3b4:	e7f5      	b.n	800a3a2 <_printf_i+0x22e>
 800a3b6:	bf00      	nop
 800a3b8:	0800a7bd 	.word	0x0800a7bd
 800a3bc:	0800a7ce 	.word	0x0800a7ce

0800a3c0 <memmove>:
 800a3c0:	4288      	cmp	r0, r1
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	eb01 0402 	add.w	r4, r1, r2
 800a3c8:	d902      	bls.n	800a3d0 <memmove+0x10>
 800a3ca:	4284      	cmp	r4, r0
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	d807      	bhi.n	800a3e0 <memmove+0x20>
 800a3d0:	1e43      	subs	r3, r0, #1
 800a3d2:	42a1      	cmp	r1, r4
 800a3d4:	d008      	beq.n	800a3e8 <memmove+0x28>
 800a3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3de:	e7f8      	b.n	800a3d2 <memmove+0x12>
 800a3e0:	4402      	add	r2, r0
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	428a      	cmp	r2, r1
 800a3e6:	d100      	bne.n	800a3ea <memmove+0x2a>
 800a3e8:	bd10      	pop	{r4, pc}
 800a3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3f2:	e7f7      	b.n	800a3e4 <memmove+0x24>

0800a3f4 <_free_r>:
 800a3f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3f6:	2900      	cmp	r1, #0
 800a3f8:	d044      	beq.n	800a484 <_free_r+0x90>
 800a3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3fe:	9001      	str	r0, [sp, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f1a1 0404 	sub.w	r4, r1, #4
 800a406:	bfb8      	it	lt
 800a408:	18e4      	addlt	r4, r4, r3
 800a40a:	f000 f913 	bl	800a634 <__malloc_lock>
 800a40e:	4a1e      	ldr	r2, [pc, #120]	; (800a488 <_free_r+0x94>)
 800a410:	9801      	ldr	r0, [sp, #4]
 800a412:	6813      	ldr	r3, [r2, #0]
 800a414:	b933      	cbnz	r3, 800a424 <_free_r+0x30>
 800a416:	6063      	str	r3, [r4, #4]
 800a418:	6014      	str	r4, [r2, #0]
 800a41a:	b003      	add	sp, #12
 800a41c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a420:	f000 b90e 	b.w	800a640 <__malloc_unlock>
 800a424:	42a3      	cmp	r3, r4
 800a426:	d908      	bls.n	800a43a <_free_r+0x46>
 800a428:	6825      	ldr	r5, [r4, #0]
 800a42a:	1961      	adds	r1, r4, r5
 800a42c:	428b      	cmp	r3, r1
 800a42e:	bf01      	itttt	eq
 800a430:	6819      	ldreq	r1, [r3, #0]
 800a432:	685b      	ldreq	r3, [r3, #4]
 800a434:	1949      	addeq	r1, r1, r5
 800a436:	6021      	streq	r1, [r4, #0]
 800a438:	e7ed      	b.n	800a416 <_free_r+0x22>
 800a43a:	461a      	mov	r2, r3
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	b10b      	cbz	r3, 800a444 <_free_r+0x50>
 800a440:	42a3      	cmp	r3, r4
 800a442:	d9fa      	bls.n	800a43a <_free_r+0x46>
 800a444:	6811      	ldr	r1, [r2, #0]
 800a446:	1855      	adds	r5, r2, r1
 800a448:	42a5      	cmp	r5, r4
 800a44a:	d10b      	bne.n	800a464 <_free_r+0x70>
 800a44c:	6824      	ldr	r4, [r4, #0]
 800a44e:	4421      	add	r1, r4
 800a450:	1854      	adds	r4, r2, r1
 800a452:	42a3      	cmp	r3, r4
 800a454:	6011      	str	r1, [r2, #0]
 800a456:	d1e0      	bne.n	800a41a <_free_r+0x26>
 800a458:	681c      	ldr	r4, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	6053      	str	r3, [r2, #4]
 800a45e:	4421      	add	r1, r4
 800a460:	6011      	str	r1, [r2, #0]
 800a462:	e7da      	b.n	800a41a <_free_r+0x26>
 800a464:	d902      	bls.n	800a46c <_free_r+0x78>
 800a466:	230c      	movs	r3, #12
 800a468:	6003      	str	r3, [r0, #0]
 800a46a:	e7d6      	b.n	800a41a <_free_r+0x26>
 800a46c:	6825      	ldr	r5, [r4, #0]
 800a46e:	1961      	adds	r1, r4, r5
 800a470:	428b      	cmp	r3, r1
 800a472:	bf04      	itt	eq
 800a474:	6819      	ldreq	r1, [r3, #0]
 800a476:	685b      	ldreq	r3, [r3, #4]
 800a478:	6063      	str	r3, [r4, #4]
 800a47a:	bf04      	itt	eq
 800a47c:	1949      	addeq	r1, r1, r5
 800a47e:	6021      	streq	r1, [r4, #0]
 800a480:	6054      	str	r4, [r2, #4]
 800a482:	e7ca      	b.n	800a41a <_free_r+0x26>
 800a484:	b003      	add	sp, #12
 800a486:	bd30      	pop	{r4, r5, pc}
 800a488:	200023ac 	.word	0x200023ac

0800a48c <sbrk_aligned>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	4e0e      	ldr	r6, [pc, #56]	; (800a4c8 <sbrk_aligned+0x3c>)
 800a490:	460c      	mov	r4, r1
 800a492:	6831      	ldr	r1, [r6, #0]
 800a494:	4605      	mov	r5, r0
 800a496:	b911      	cbnz	r1, 800a49e <sbrk_aligned+0x12>
 800a498:	f000 f8bc 	bl	800a614 <_sbrk_r>
 800a49c:	6030      	str	r0, [r6, #0]
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	f000 f8b7 	bl	800a614 <_sbrk_r>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	d00a      	beq.n	800a4c0 <sbrk_aligned+0x34>
 800a4aa:	1cc4      	adds	r4, r0, #3
 800a4ac:	f024 0403 	bic.w	r4, r4, #3
 800a4b0:	42a0      	cmp	r0, r4
 800a4b2:	d007      	beq.n	800a4c4 <sbrk_aligned+0x38>
 800a4b4:	1a21      	subs	r1, r4, r0
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f000 f8ac 	bl	800a614 <_sbrk_r>
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d101      	bne.n	800a4c4 <sbrk_aligned+0x38>
 800a4c0:	f04f 34ff 	mov.w	r4, #4294967295
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	200023b0 	.word	0x200023b0

0800a4cc <_malloc_r>:
 800a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d0:	1ccd      	adds	r5, r1, #3
 800a4d2:	f025 0503 	bic.w	r5, r5, #3
 800a4d6:	3508      	adds	r5, #8
 800a4d8:	2d0c      	cmp	r5, #12
 800a4da:	bf38      	it	cc
 800a4dc:	250c      	movcc	r5, #12
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	db01      	blt.n	800a4e8 <_malloc_r+0x1c>
 800a4e4:	42a9      	cmp	r1, r5
 800a4e6:	d905      	bls.n	800a4f4 <_malloc_r+0x28>
 800a4e8:	230c      	movs	r3, #12
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	2600      	movs	r6, #0
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f4:	4e2e      	ldr	r6, [pc, #184]	; (800a5b0 <_malloc_r+0xe4>)
 800a4f6:	f000 f89d 	bl	800a634 <__malloc_lock>
 800a4fa:	6833      	ldr	r3, [r6, #0]
 800a4fc:	461c      	mov	r4, r3
 800a4fe:	bb34      	cbnz	r4, 800a54e <_malloc_r+0x82>
 800a500:	4629      	mov	r1, r5
 800a502:	4638      	mov	r0, r7
 800a504:	f7ff ffc2 	bl	800a48c <sbrk_aligned>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	4604      	mov	r4, r0
 800a50c:	d14d      	bne.n	800a5aa <_malloc_r+0xde>
 800a50e:	6834      	ldr	r4, [r6, #0]
 800a510:	4626      	mov	r6, r4
 800a512:	2e00      	cmp	r6, #0
 800a514:	d140      	bne.n	800a598 <_malloc_r+0xcc>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	4631      	mov	r1, r6
 800a51a:	4638      	mov	r0, r7
 800a51c:	eb04 0803 	add.w	r8, r4, r3
 800a520:	f000 f878 	bl	800a614 <_sbrk_r>
 800a524:	4580      	cmp	r8, r0
 800a526:	d13a      	bne.n	800a59e <_malloc_r+0xd2>
 800a528:	6821      	ldr	r1, [r4, #0]
 800a52a:	3503      	adds	r5, #3
 800a52c:	1a6d      	subs	r5, r5, r1
 800a52e:	f025 0503 	bic.w	r5, r5, #3
 800a532:	3508      	adds	r5, #8
 800a534:	2d0c      	cmp	r5, #12
 800a536:	bf38      	it	cc
 800a538:	250c      	movcc	r5, #12
 800a53a:	4629      	mov	r1, r5
 800a53c:	4638      	mov	r0, r7
 800a53e:	f7ff ffa5 	bl	800a48c <sbrk_aligned>
 800a542:	3001      	adds	r0, #1
 800a544:	d02b      	beq.n	800a59e <_malloc_r+0xd2>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	442b      	add	r3, r5
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	e00e      	b.n	800a56c <_malloc_r+0xa0>
 800a54e:	6822      	ldr	r2, [r4, #0]
 800a550:	1b52      	subs	r2, r2, r5
 800a552:	d41e      	bmi.n	800a592 <_malloc_r+0xc6>
 800a554:	2a0b      	cmp	r2, #11
 800a556:	d916      	bls.n	800a586 <_malloc_r+0xba>
 800a558:	1961      	adds	r1, r4, r5
 800a55a:	42a3      	cmp	r3, r4
 800a55c:	6025      	str	r5, [r4, #0]
 800a55e:	bf18      	it	ne
 800a560:	6059      	strne	r1, [r3, #4]
 800a562:	6863      	ldr	r3, [r4, #4]
 800a564:	bf08      	it	eq
 800a566:	6031      	streq	r1, [r6, #0]
 800a568:	5162      	str	r2, [r4, r5]
 800a56a:	604b      	str	r3, [r1, #4]
 800a56c:	4638      	mov	r0, r7
 800a56e:	f104 060b 	add.w	r6, r4, #11
 800a572:	f000 f865 	bl	800a640 <__malloc_unlock>
 800a576:	f026 0607 	bic.w	r6, r6, #7
 800a57a:	1d23      	adds	r3, r4, #4
 800a57c:	1af2      	subs	r2, r6, r3
 800a57e:	d0b6      	beq.n	800a4ee <_malloc_r+0x22>
 800a580:	1b9b      	subs	r3, r3, r6
 800a582:	50a3      	str	r3, [r4, r2]
 800a584:	e7b3      	b.n	800a4ee <_malloc_r+0x22>
 800a586:	6862      	ldr	r2, [r4, #4]
 800a588:	42a3      	cmp	r3, r4
 800a58a:	bf0c      	ite	eq
 800a58c:	6032      	streq	r2, [r6, #0]
 800a58e:	605a      	strne	r2, [r3, #4]
 800a590:	e7ec      	b.n	800a56c <_malloc_r+0xa0>
 800a592:	4623      	mov	r3, r4
 800a594:	6864      	ldr	r4, [r4, #4]
 800a596:	e7b2      	b.n	800a4fe <_malloc_r+0x32>
 800a598:	4634      	mov	r4, r6
 800a59a:	6876      	ldr	r6, [r6, #4]
 800a59c:	e7b9      	b.n	800a512 <_malloc_r+0x46>
 800a59e:	230c      	movs	r3, #12
 800a5a0:	603b      	str	r3, [r7, #0]
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	f000 f84c 	bl	800a640 <__malloc_unlock>
 800a5a8:	e7a1      	b.n	800a4ee <_malloc_r+0x22>
 800a5aa:	6025      	str	r5, [r4, #0]
 800a5ac:	e7de      	b.n	800a56c <_malloc_r+0xa0>
 800a5ae:	bf00      	nop
 800a5b0:	200023ac 	.word	0x200023ac

0800a5b4 <_realloc_r>:
 800a5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b8:	4680      	mov	r8, r0
 800a5ba:	4614      	mov	r4, r2
 800a5bc:	460e      	mov	r6, r1
 800a5be:	b921      	cbnz	r1, 800a5ca <_realloc_r+0x16>
 800a5c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	f7ff bf81 	b.w	800a4cc <_malloc_r>
 800a5ca:	b92a      	cbnz	r2, 800a5d8 <_realloc_r+0x24>
 800a5cc:	f7ff ff12 	bl	800a3f4 <_free_r>
 800a5d0:	4625      	mov	r5, r4
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d8:	f000 f838 	bl	800a64c <_malloc_usable_size_r>
 800a5dc:	4284      	cmp	r4, r0
 800a5de:	4607      	mov	r7, r0
 800a5e0:	d802      	bhi.n	800a5e8 <_realloc_r+0x34>
 800a5e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5e6:	d812      	bhi.n	800a60e <_realloc_r+0x5a>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4640      	mov	r0, r8
 800a5ec:	f7ff ff6e 	bl	800a4cc <_malloc_r>
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d0ed      	beq.n	800a5d2 <_realloc_r+0x1e>
 800a5f6:	42bc      	cmp	r4, r7
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	bf28      	it	cs
 800a5fe:	463a      	movcs	r2, r7
 800a600:	f7ff fbb8 	bl	8009d74 <memcpy>
 800a604:	4631      	mov	r1, r6
 800a606:	4640      	mov	r0, r8
 800a608:	f7ff fef4 	bl	800a3f4 <_free_r>
 800a60c:	e7e1      	b.n	800a5d2 <_realloc_r+0x1e>
 800a60e:	4635      	mov	r5, r6
 800a610:	e7df      	b.n	800a5d2 <_realloc_r+0x1e>
	...

0800a614 <_sbrk_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4d06      	ldr	r5, [pc, #24]	; (800a630 <_sbrk_r+0x1c>)
 800a618:	2300      	movs	r3, #0
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	f7f6 fd36 	bl	8001090 <_sbrk>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_sbrk_r+0x1a>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_sbrk_r+0x1a>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	200023b4 	.word	0x200023b4

0800a634 <__malloc_lock>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__malloc_lock+0x8>)
 800a636:	f000 b811 	b.w	800a65c <__retarget_lock_acquire_recursive>
 800a63a:	bf00      	nop
 800a63c:	200023b8 	.word	0x200023b8

0800a640 <__malloc_unlock>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__malloc_unlock+0x8>)
 800a642:	f000 b80c 	b.w	800a65e <__retarget_lock_release_recursive>
 800a646:	bf00      	nop
 800a648:	200023b8 	.word	0x200023b8

0800a64c <_malloc_usable_size_r>:
 800a64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a650:	1f18      	subs	r0, r3, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	bfbc      	itt	lt
 800a656:	580b      	ldrlt	r3, [r1, r0]
 800a658:	18c0      	addlt	r0, r0, r3
 800a65a:	4770      	bx	lr

0800a65c <__retarget_lock_acquire_recursive>:
 800a65c:	4770      	bx	lr

0800a65e <__retarget_lock_release_recursive>:
 800a65e:	4770      	bx	lr

0800a660 <_init>:
 800a660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a662:	bf00      	nop
 800a664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a666:	bc08      	pop	{r3}
 800a668:	469e      	mov	lr, r3
 800a66a:	4770      	bx	lr

0800a66c <_fini>:
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	bf00      	nop
 800a670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a672:	bc08      	pop	{r3}
 800a674:	469e      	mov	lr, r3
 800a676:	4770      	bx	lr
