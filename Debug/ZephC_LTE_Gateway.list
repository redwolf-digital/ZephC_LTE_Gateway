
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009abc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d08  08009d08  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009d08  08009d08  00019d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d10  08009d10  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002114  200000fc  08009e14  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002210  08009e14  00022210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018801  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e2  00000000  00000000  0003892d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cf3  00000000  00000000  0003e658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018560  00000000  00000000  0005734b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000922b3  00000000  00000000  0006f8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101b5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  00101bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009c3c 	.word	0x08009c3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08009c3c 	.word	0x08009c3c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <__NVIC_EnableIRQ+0x38>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <initEXIT>:
#include "stm32f4xx.h"
#include "stm32f4xx_it.h"

unsigned char intterruptEvent_Flag = 0;

void initEXIT(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// Enable GPIO Clock
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <initEXIT+0x7c>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <initEXIT+0x7c>)
 8000532:	f043 0302 	orr.w	r3, r3, #2
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER &= ~3U << 6;					// GPIO B3 set 00 - INPUT
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <initEXIT+0x80>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <initEXIT+0x80>)
 800053e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000542:	6013      	str	r3, [r2, #0]
	GPIOB -> PUPDR &= ~3U << 6;					// No pull-up|pull-down
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <initEXIT+0x80>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <initEXIT+0x80>)
 800054a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800054e:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI3_IRQn);					// Enable interrupt
 8000550:	2009      	movs	r0, #9
 8000552:	f7ff ffcb 	bl	80004ec <__NVIC_EnableIRQ>

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <initEXIT+0x7c>)
 8000558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800055a:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <initEXIT+0x7c>)
 800055c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000560:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG -> EXTICR[0] &= SYSCFG_EXTICR1_EXTI3;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <initEXIT+0x84>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <initEXIT+0x84>)
 8000568:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800056c:	6093      	str	r3, [r2, #8]
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <initEXIT+0x84>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <initEXIT+0x84>)
 8000574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000578:	6093      	str	r3, [r2, #8]

	EXTI -> RTSR &= ~EXTI_RTSR_TR3;				// Disable rising trigger
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <initEXIT+0x88>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <initEXIT+0x88>)
 8000580:	f023 0308 	bic.w	r3, r3, #8
 8000584:	6093      	str	r3, [r2, #8]
	EXTI -> RTSR |= EXTI_FTSR_TR3;				// Enable falling trigger
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <initEXIT+0x88>)
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <initEXIT+0x88>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	6093      	str	r3, [r2, #8]

	EXTI -> IMR |= EXTI_IMR_IM3;				// Interrupt Mask 1 = not mask
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <initEXIT+0x88>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <initEXIT+0x88>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40013800 	.word	0x40013800
 80005b0:	40013c00 	.word	0x40013c00

080005b4 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void) {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR3) != 0) {
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <EXTI3_IRQHandler+0x2c>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d008      	beq.n	80005d6 <EXTI3_IRQHandler+0x22>
		intterruptEvent_Flag = 1;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <EXTI3_IRQHandler+0x30>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= EXTI_PR_PR3;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <EXTI3_IRQHandler+0x2c>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <EXTI3_IRQHandler+0x2c>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6153      	str	r3, [r2, #20]
	}
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40013c00 	.word	0x40013c00
 80005e4:	20000118 	.word	0x20000118

080005e8 <main>:
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  sysValinit();
 80005ee:	f000 f895 	bl	800071c <sysValinit>
  sensorValInit();
 80005f2:	f000 f8b5 	bl	8000760 <sensorValInit>

  HAL_Init();
 80005f6:	f000 fd2b 	bl	8001050 <HAL_Init>
  SystemClock_Config();
 80005fa:	f000 f995 	bl	8000928 <SystemClock_Config>
  MX_GPIO_Init();
 80005fe:	f000 fad3 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fa9b 	bl	8000b3c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000606:	f000 fa45 	bl	8000a94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800060a:	f000 fa6d 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800060e:	f008 fdcb 	bl	80091a8 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000612:	f000 f9f1 	bl	80009f8 <MX_TIM4_Init>


  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 8000616:	4832      	ldr	r0, [pc, #200]	; (80006e0 <main+0xf8>)
 8000618:	f003 fb86 	bl	8003d28 <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 800061c:	22ff      	movs	r2, #255	; 0xff
 800061e:	4931      	ldr	r1, [pc, #196]	; (80006e4 <main+0xfc>)
 8000620:	4831      	ldr	r0, [pc, #196]	; (80006e8 <main+0x100>)
 8000622:	f004 f856 	bl	80046d2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <main+0x104>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <main+0x104>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f022 0208 	bic.w	r2, r2, #8
 8000634:	601a      	str	r2, [r3, #0]

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	492d      	ldr	r1, [pc, #180]	; (80006f0 <main+0x108>)
 800063a:	482e      	ldr	r0, [pc, #184]	; (80006f4 <main+0x10c>)
 800063c:	f004 f849 	bl	80046d2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <main+0x110>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <main+0x110>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f022 0208 	bic.w	r2, r2, #8
 800064e:	601a      	str	r2, [r3, #0]



  // INTERRUPT
  initEXIT();
 8000650:	f7ff ff6a 	bl	8000528 <initEXIT>

	while(1) {


	RS485Handle :
	while(intterruptEvent_Flag == 1) {									// Get RTS Signal
 8000654:	bf00      	nop
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <main+0x114>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1fa      	bne.n	8000654 <main+0x6c>
	  SerialDebug("[MCU] -> GET RTS\r\n");
 800065e:	4828      	ldr	r0, [pc, #160]	; (8000700 <main+0x118>)
 8000660:	f000 f8ae 	bl	80007c0 <SerialDebug>
	  sensorValInit();													// Clear buffer
 8000664:	f000 f87c 	bl	8000760 <sensorValInit>
	  memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));		// Clear buffer
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	2100      	movs	r1, #0
 800066c:	4825      	ldr	r0, [pc, #148]	; (8000704 <main+0x11c>)
 800066e:	f009 fadd 	bl	8009c2c <memset>
	  // Generate pulse 5ms.
	  SerialDebug("[MCU] -> SEND RDY\r\n");
 8000672:	4825      	ldr	r0, [pc, #148]	; (8000708 <main+0x120>)
 8000674:	f000 f8a4 	bl	80007c0 <SerialDebug>
	  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	4823      	ldr	r0, [pc, #140]	; (800070c <main+0x124>)
 800067e:	f001 fc15 	bl	8001eac <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000682:	2005      	movs	r0, #5
 8000684:	f000 fd56 	bl	8001134 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	481f      	ldr	r0, [pc, #124]	; (800070c <main+0x124>)
 800068e:	f001 fc0d 	bl	8001eac <HAL_GPIO_WritePin>

	  // Process data
	  SerialDebug("[MCU] -> WAIT DATA\r\n");
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <main+0x128>)
 8000694:	f000 f894 	bl	80007c0 <SerialDebug>
	  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <main+0x12c>)
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <main+0x12c>)
 800069e:	80da      	strh	r2, [r3, #6]


	  while(dataComm_mainBuff != 0x00){									// Wait DMA put data from UART to buffer
		  // Timeout 5 sec.
		  if(sysCounter.main_ms_counter == 0) {
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <main+0x12c>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <main+0xc6>
			  sysCounter.prev_msgTimeOut = 0;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <main+0x12c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	80da      	strh	r2, [r3, #6]
		  }
		  if((sysCounter.main_ms_counter - sysCounter.prev_msgTimeOut) >= msgTimeOut) {
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <main+0x12c>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <main+0x12c>)
 80006b6:	88db      	ldrh	r3, [r3, #6]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80006be:	4293      	cmp	r3, r2
 80006c0:	ddee      	ble.n	80006a0 <main+0xb8>
			  SerialDebug("[RS485] -> TIME OUT\r\n");
 80006c2:	4815      	ldr	r0, [pc, #84]	; (8000718 <main+0x130>)
 80006c4:	f000 f87c 	bl	80007c0 <SerialDebug>
			  SendData_RS485((char *)0x02);								// Send response code 0x02 -> ERROR
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 f88f 	bl	80007ec <SendData_RS485>
			  intterruptEvent_Flag = 0;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <main+0x114>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
			  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <main+0x12c>)
 80006d6:	881a      	ldrh	r2, [r3, #0]
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <main+0x12c>)
 80006da:	80da      	strh	r2, [r3, #6]
 80006dc:	e7ba      	b.n	8000654 <main+0x6c>
 80006de:	bf00      	nop
 80006e0:	2000041c 	.word	0x2000041c
 80006e4:	2000019c 	.word	0x2000019c
 80006e8:	200004a8 	.word	0x200004a8
 80006ec:	2000054c 	.word	0x2000054c
 80006f0:	2000011c 	.word	0x2000011c
 80006f4:	20000464 	.word	0x20000464
 80006f8:	200004ec 	.word	0x200004ec
 80006fc:	20000118 	.word	0x20000118
 8000700:	08009c54 	.word	0x08009c54
 8000704:	2000029c 	.word	0x2000029c
 8000708:	08009c68 	.word	0x08009c68
 800070c:	40020400 	.word	0x40020400
 8000710:	08009c7c 	.word	0x08009c7c
 8000714:	200005ac 	.word	0x200005ac
 8000718:	08009c94 	.word	0x08009c94

0800071c <sysValinit>:


// user custom functions

// init startup value at boot
void sysValinit(void) {
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <sysValinit+0x3c>)
 8000722:	2200      	movs	r2, #0
 8000724:	801a      	strh	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <sysValinit+0x3c>)
 8000728:	2200      	movs	r2, #0
 800072a:	805a      	strh	r2, [r3, #2]
	sysCounter.prev_ERRORtime = 0;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <sysValinit+0x3c>)
 800072e:	2200      	movs	r2, #0
 8000730:	809a      	strh	r2, [r3, #4]
	sysCounter.rebootCount = 0;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <sysValinit+0x3c>)
 8000734:	2200      	movs	r2, #0
 8000736:	721a      	strb	r2, [r3, #8]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <sysValinit+0x3c>)
 800073a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073e:	815a      	strh	r2, [r3, #10]

	sysFlag.LTE_CMD_Send = 0;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <sysValinit+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_ERROR = 0;
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <sysValinit+0x40>)
 8000748:	2200      	movs	r2, #0
 800074a:	705a      	strb	r2, [r3, #1]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200005ac 	.word	0x200005ac
 800075c:	200005b8 	.word	0x200005b8

08000760 <sensorValInit>:


// init sensor variable handle
// set/clear buffer array
void sensorValInit(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	SENSOR.dateStamp[0] = '\0';
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <sensorValInit+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
	SENSOR.dateStamp[0] = '\0';
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <sensorValInit+0x5c>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	SENSOR.ID[0] = '\0';
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <sensorValInit+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	741a      	strb	r2, [r3, #16]
	SENSOR.X[0] = '\0';
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <sensorValInit+0x5c>)
 8000778:	2200      	movs	r2, #0
 800077a:	745a      	strb	r2, [r3, #17]
	SENSOR.Y[0] = '\0';
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <sensorValInit+0x5c>)
 800077e:	2200      	movs	r2, #0
 8000780:	75da      	strb	r2, [r3, #23]
	SENSOR.Z[0] = '\0';
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <sensorValInit+0x5c>)
 8000784:	2200      	movs	r2, #0
 8000786:	775a      	strb	r2, [r3, #29]
	SENSOR.Huim[0] = '\0';
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <sensorValInit+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	SENSOR.Temp[0] = '\0';
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <sensorValInit+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	SENSOR.Alc[0] = '\0';
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <sensorValInit+0x5c>)
 800079a:	2200      	movs	r2, #0
 800079c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	SENSOR.Carbon[0] = '\0';
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <sensorValInit+0x5c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	SENSOR.AirFlow[0] = '\0';
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <sensorValInit+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200005bc 	.word	0x200005bc

080007c0 <SerialDebug>:


// Send text via USB VCOM port
void SerialDebug(char *msgDebug) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	while(CDC_Transmit_FS((uint8_t *) msgDebug, strlen(msgDebug)) != USBD_OK);
 80007c8:	bf00      	nop
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff fd04 	bl	80001d8 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	4619      	mov	r1, r3
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f008 fda4 	bl	8009324 <CDC_Transmit_FS>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f3      	bne.n	80007ca <SerialDebug+0xa>
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SendData_RS485>:


// RS485 Tx [Polling method]
void SendData_RS485(char *msg) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, RS485_TxMode, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <SendData_RS485+0x3c>)
 80007fc:	f001 fb56 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 10);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fce9 	bl	80001d8 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	230a      	movs	r3, #10
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <SendData_RS485+0x40>)
 8000810:	f003 fecd 	bl	80045ae <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, RS485_TxMode, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <SendData_RS485+0x3c>)
 800081c:	f001 fb46 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40020000 	.word	0x40020000
 800082c:	20000464 	.word	0x20000464

08000830 <HAL_UARTEx_RxEventCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 10);
}


// UART1/UART2 Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_UARTEx_RxEventCallback+0x9c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d11c      	bne.n	8000880 <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8000846:	22ff      	movs	r2, #255	; 0xff
 8000848:	4921      	ldr	r1, [pc, #132]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa0>)
 800084a:	4822      	ldr	r0, [pc, #136]	; (80008d4 <HAL_UARTEx_RxEventCallback+0xa4>)
 800084c:	f003 ff41 	bl	80046d2 <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 8000850:	22ff      	movs	r2, #255	; 0xff
 8000852:	2100      	movs	r1, #0
 8000854:	4820      	ldr	r0, [pc, #128]	; (80008d8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000856:	f009 f9e9 	bl	8009c2c <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 800085a:	887b      	ldrh	r3, [r7, #2]
 800085c:	461a      	mov	r2, r3
 800085e:	491c      	ldr	r1, [pc, #112]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000860:	481d      	ldr	r0, [pc, #116]	; (80008d8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000862:	f009 f9d5 	bl	8009c10 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	2100      	movs	r1, #0
 800086a:	4819      	ldr	r0, [pc, #100]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa0>)
 800086c:	f009 f9de 	bl	8009c2c <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_UARTEx_RxEventCallback+0xac>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_UARTEx_RxEventCallback+0xac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f022 0208 	bic.w	r2, r2, #8
 800087e:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d11c      	bne.n	80008c4 <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	4915      	ldr	r1, [pc, #84]	; (80008e4 <HAL_UARTEx_RxEventCallback+0xb4>)
 800088e:	4816      	ldr	r0, [pc, #88]	; (80008e8 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000890:	f003 ff1f 	bl	80046d2 <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	2100      	movs	r1, #0
 8000898:	4814      	ldr	r0, [pc, #80]	; (80008ec <HAL_UARTEx_RxEventCallback+0xbc>)
 800089a:	f009 f9c7 	bl	8009c2c <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 800089e:	887b      	ldrh	r3, [r7, #2]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4910      	ldr	r1, [pc, #64]	; (80008e4 <HAL_UARTEx_RxEventCallback+0xb4>)
 80008a4:	4811      	ldr	r0, [pc, #68]	; (80008ec <HAL_UARTEx_RxEventCallback+0xbc>)
 80008a6:	f009 f9b3 	bl	8009c10 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <HAL_UARTEx_RxEventCallback+0xb4>)
 80008b0:	f009 f9bc 	bl	8009c2c <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_UARTEx_RxEventCallback+0xc0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <HAL_UARTEx_RxEventCallback+0xc0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f022 0208 	bic.w	r2, r2, #8
 80008c2:	601a      	str	r2, [r3, #0]
	}
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40004400 	.word	0x40004400
 80008d0:	2000019c 	.word	0x2000019c
 80008d4:	200004a8 	.word	0x200004a8
 80008d8:	2000031c 	.word	0x2000031c
 80008dc:	2000054c 	.word	0x2000054c
 80008e0:	40011000 	.word	0x40011000
 80008e4:	2000011c 	.word	0x2000011c
 80008e8:	20000464 	.word	0x20000464
 80008ec:	2000029c 	.word	0x2000029c
 80008f0:	200004ec 	.word	0x200004ec

080008f4 <HAL_TIM_PeriodElapsedCallback>:




// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d105      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x1e>
		sysCounter.main_ms_counter++;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000910:	801a      	strh	r2, [r3, #0]
	}
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40000800 	.word	0x40000800
 8000924:	200005ac 	.word	0x200005ac

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f009 f978 	bl	8009c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <SystemClock_Config+0xc8>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <SystemClock_Config+0xc8>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <SystemClock_Config+0xc8>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <SystemClock_Config+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <SystemClock_Config+0xcc>)
 8000972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <SystemClock_Config+0xcc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000998:	2319      	movs	r3, #25
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800099c:	2390      	movs	r3, #144	; 0x90
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009a4:	2303      	movs	r3, #3
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 fd13 	bl	80033d8 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b8:	f000 f960 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2102      	movs	r1, #2
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 ff75 	bl	80038c8 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e4:	f000 f94a 	bl	8000c7c <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	; 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <MX_TIM4_Init+0x98>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a1c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000a20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a3a:	4814      	ldr	r0, [pc, #80]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a3c:	f003 f924 	bl	8003c88 <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 f919 	bl	8000c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a58:	f003 fad0 	bl	8003ffc <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f90b 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <MX_TIM4_Init+0x94>)
 8000a74:	f003 fccc 	bl	8004410 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000a7e:	f000 f8fd 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000041c 	.word	0x2000041c
 8000a90:	40000800 	.word	0x40000800

08000a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART1_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000acc:	f003 fd22 	bl	8004514 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f8d1 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000464 	.word	0x20000464
 8000ae4:	40011000 	.word	0x40011000

08000ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_USART2_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b20:	f003 fcf8 	bl	8004514 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2a:	f000 f8a7 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200004a8 	.word	0x200004a8
 8000b38:	40004400 	.word	0x40004400

08000b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_DMA_Init+0x68>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <MX_DMA_Init+0x68>)
 8000b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_DMA_Init+0x68>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_DMA_Init+0x68>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <MX_DMA_Init+0x68>)
 8000b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_DMA_Init+0x68>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2010      	movs	r0, #16
 8000b80:	f000 fbd7 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b84:	2010      	movs	r0, #16
 8000b86:	f000 fbf0 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	203a      	movs	r0, #58	; 0x3a
 8000b90:	f000 fbcf 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b94:	203a      	movs	r0, #58	; 0x3a
 8000b96:	f000 fbe8 	bl	800136a <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a2a      	ldr	r2, [pc, #168]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000c12:	2200      	movs	r2, #0
 8000c14:	f240 21e2 	movw	r1, #738	; 0x2e2
 8000c18:	4816      	ldr	r0, [pc, #88]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000c1a:	f001 f947 	bl	8001eac <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	4814      	ldr	r0, [pc, #80]	; (8000c78 <MX_GPIO_Init+0xd0>)
 8000c26:	f001 f941 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB5 PB6 PB7
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000c2a:	f240 23e2 	movw	r3, #738	; 0x2e2
 8000c2e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000c44:	f000 ffae 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_GPIO_Init+0xd0>)
 8000c62:	f000 ff9f 	bl	8001ba4 <HAL_GPIO_Init>

}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020000 	.word	0x40020000

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d115      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_TIM_Base_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <HAL_TIM_Base_MspInit+0x4c>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	201e      	movs	r0, #30
 8000d0c:	f000 fb11 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d10:	201e      	movs	r0, #30
 8000d12:	f000 fb2a 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40000800 	.word	0x40000800
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a69      	ldr	r2, [pc, #420]	; (8000eec <HAL_UART_MspInit+0x1c4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d164      	bne.n	8000e14 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a67      	ldr	r2, [pc, #412]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b65      	ldr	r3, [pc, #404]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a60      	ldr	r2, [pc, #384]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d94:	2307      	movs	r3, #7
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4855      	ldr	r0, [pc, #340]	; (8000ef4 <HAL_UART_MspInit+0x1cc>)
 8000da0:	f000 ff00 	bl	8001ba4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000da6:	4a55      	ldr	r2, [pc, #340]	; (8000efc <HAL_UART_MspInit+0x1d4>)
 8000da8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000daa:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db8:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dbe:	4b4e      	ldr	r3, [pc, #312]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dde:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000de6:	4844      	ldr	r0, [pc, #272]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000de8:	f000 fada 	bl	80013a0 <HAL_DMA_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000df2:	f7ff ff43 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a3f      	ldr	r2, [pc, #252]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
 8000dfc:	4a3e      	ldr	r2, [pc, #248]	; (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2025      	movs	r0, #37	; 0x25
 8000e08:	f000 fa93 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0c:	2025      	movs	r0, #37	; 0x25
 8000e0e:	f000 faac 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e12:	e066      	b.n	8000ee2 <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a39      	ldr	r2, [pc, #228]	; (8000f00 <HAL_UART_MspInit+0x1d8>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d161      	bne.n	8000ee2 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a32      	ldr	r2, [pc, #200]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a2b      	ldr	r2, [pc, #172]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e56:	230c      	movs	r3, #12
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e66:	2307      	movs	r3, #7
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <HAL_UART_MspInit+0x1cc>)
 8000e72:	f000 fe97 	bl	8001ba4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000e78:	4a23      	ldr	r2, [pc, #140]	; (8000f08 <HAL_UART_MspInit+0x1e0>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e82:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000eb8:	f000 fa72 	bl	80013a0 <HAL_DMA_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8000ec2:	f7ff fedb 	bl	8000c7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_UART_MspInit+0x1dc>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2026      	movs	r0, #38	; 0x26
 8000ed8:	f000 fa2b 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000edc:	2026      	movs	r0, #38	; 0x26
 8000ede:	f000 fa44 	bl	800136a <HAL_NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3730      	adds	r7, #48	; 0x30
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	200004ec 	.word	0x200004ec
 8000efc:	40026440 	.word	0x40026440
 8000f00:	40004400 	.word	0x40004400
 8000f04:	2000054c 	.word	0x2000054c
 8000f08:	40026088 	.word	0x40026088

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 f8cc 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA1_Stream5_IRQHandler+0x10>)
 8000f66:	f000 fbb3 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000054c 	.word	0x2000054c

08000f74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <TIM4_IRQHandler+0x10>)
 8000f7a:	f002 ff37 	bl	8003dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000041c 	.word	0x2000041c

08000f88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <USART1_IRQHandler+0x10>)
 8000f8e:	f003 fc05 	bl	800479c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000464 	.word	0x20000464

08000f9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <USART2_IRQHandler+0x10>)
 8000fa2:	f003 fbfb 	bl	800479c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200004a8 	.word	0x200004a8

08000fb0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <DMA2_Stream2_IRQHandler+0x10>)
 8000fb6:	f000 fb8b 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200004ec 	.word	0x200004ec

08000fc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <OTG_FS_IRQHandler+0x10>)
 8000fca:	f001 f8d8 	bl	800217e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20001ae4 	.word	0x20001ae4

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f008 fdcd 	bl	8009bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fadb 	bl	80005e8 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001040:	08009d18 	.word	0x08009d18
  ldr r2, =_sbss
 8001044:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001048:	20002210 	.word	0x20002210

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f94f 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fe00 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f967 	bl	8001386 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f92f 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20000600 	.word	0x20000600

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000600 	.word	0x20000600

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff feb6 	bl	800111c <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e099      	b.n	80014f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013dc:	e00f      	b.n	80013fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013de:	f7ff fe9d 	bl	800111c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d908      	bls.n	80013fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2220      	movs	r2, #32
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e078      	b.n	80014f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1e8      	bne.n	80013de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_DMA_Init+0x158>)
 8001418:	4013      	ands	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800142a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4313      	orrs	r3, r2
 800144e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	2b04      	cmp	r3, #4
 8001456:	d107      	bne.n	8001468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4313      	orrs	r3, r2
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4313      	orrs	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f023 0307 	bic.w	r3, r3, #7
 800147e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	4313      	orrs	r3, r2
 8001488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	2b04      	cmp	r3, #4
 8001490:	d117      	bne.n	80014c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4313      	orrs	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00e      	beq.n	80014c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fb01 	bl	8001aac <DMA_CheckFifoParam>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2240      	movs	r2, #64	; 0x40
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014be:	2301      	movs	r3, #1
 80014c0:	e016      	b.n	80014f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fab8 	bl	8001a40 <DMA_CalcBaseAndBitshift>
 80014d0:	4603      	mov	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d8:	223f      	movs	r2, #63	; 0x3f
 80014da:	409a      	lsls	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	f010803f 	.word	0xf010803f

080014fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_DMA_Start_IT+0x26>
 800151e:	2302      	movs	r3, #2
 8001520:	e040      	b.n	80015a4 <HAL_DMA_Start_IT+0xa8>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d12f      	bne.n	8001596 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2202      	movs	r2, #2
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fa4a 	bl	80019e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	223f      	movs	r2, #63	; 0x3f
 8001556:	409a      	lsls	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0216 	orr.w	r2, r2, #22
 800156a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0208 	orr.w	r2, r2, #8
 8001582:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	e005      	b.n	80015a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800159e:	2302      	movs	r3, #2
 80015a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015ba:	f7ff fdaf 	bl	800111c <HAL_GetTick>
 80015be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e052      	b.n	8001684 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0216 	bic.w	r2, r2, #22
 80015ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d103      	bne.n	800160e <HAL_DMA_Abort+0x62>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0208 	bic.w	r2, r2, #8
 800161c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162e:	e013      	b.n	8001658 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001630:	f7ff fd74 	bl	800111c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b05      	cmp	r3, #5
 800163c:	d90c      	bls.n	8001658 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2220      	movs	r2, #32
 8001642:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2203      	movs	r2, #3
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e015      	b.n	8001684 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1e4      	bne.n	8001630 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	223f      	movs	r2, #63	; 0x3f
 800166c:	409a      	lsls	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d004      	beq.n	80016aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00c      	b.n	80016c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2205      	movs	r2, #5
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0201 	bic.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016dc:	4b8e      	ldr	r3, [pc, #568]	; (8001918 <HAL_DMA_IRQHandler+0x248>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a8e      	ldr	r2, [pc, #568]	; (800191c <HAL_DMA_IRQHandler+0x24c>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0a9b      	lsrs	r3, r3, #10
 80016e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2208      	movs	r2, #8
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01a      	beq.n	800173c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0204 	bic.w	r2, r2, #4
 8001722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	2208      	movs	r2, #8
 800172a:	409a      	lsls	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	2201      	movs	r2, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d012      	beq.n	8001772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2201      	movs	r2, #1
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f043 0202 	orr.w	r2, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	2204      	movs	r2, #4
 8001778:	409a      	lsls	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d012      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00b      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	2204      	movs	r2, #4
 8001796:	409a      	lsls	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	f043 0204 	orr.w	r2, r3, #4
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2210      	movs	r2, #16
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d043      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03c      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2210      	movs	r2, #16
 80017cc:	409a      	lsls	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d018      	beq.n	8001812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d108      	bne.n	8001800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d024      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
 80017fe:	e01f      	b.n	8001840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01b      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
 8001810:	e016      	b.n	8001840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d107      	bne.n	8001830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0208 	bic.w	r2, r2, #8
 800182e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	2220      	movs	r2, #32
 8001846:	409a      	lsls	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 808f 	beq.w	8001970 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8087 	beq.w	8001970 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2220      	movs	r2, #32
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b05      	cmp	r3, #5
 8001878:	d136      	bne.n	80018e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0216 	bic.w	r2, r2, #22
 8001888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d103      	bne.n	80018aa <HAL_DMA_IRQHandler+0x1da>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0208 	bic.w	r2, r2, #8
 80018b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	223f      	movs	r2, #63	; 0x3f
 80018c0:	409a      	lsls	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d07e      	beq.n	80019dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
        }
        return;
 80018e6:	e079      	b.n	80019dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01d      	beq.n	8001932 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10d      	bne.n	8001920 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	2b00      	cmp	r3, #0
 800190a:	d031      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
 8001914:	e02c      	b.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e01e      	b.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10f      	bne.n	8001960 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0210 	bic.w	r2, r2, #16
 800194e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	2b00      	cmp	r3, #0
 8001976:	d032      	beq.n	80019de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d022      	beq.n	80019ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2205      	movs	r2, #5
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3301      	adds	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d307      	bcc.n	80019b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f2      	bne.n	800199c <HAL_DMA_IRQHandler+0x2cc>
 80019b6:	e000      	b.n	80019ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
 80019da:	e000      	b.n	80019de <HAL_DMA_IRQHandler+0x30e>
        return;
 80019dc:	bf00      	nop
    }
  }
}
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	d108      	bne.n	8001a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a22:	e007      	b.n	8001a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3b10      	subs	r3, #16
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d909      	bls.n	8001a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	1d1a      	adds	r2, r3, #4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a80:	e007      	b.n	8001a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	aaaaaaab 	.word	0xaaaaaaab
 8001aa8:	08009d00 	.word	0x08009d00

08001aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11f      	bne.n	8001b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d856      	bhi.n	8001b7a <DMA_CheckFifoParam+0xce>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <DMA_CheckFifoParam+0x28>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001af7 	.word	0x08001af7
 8001adc:	08001ae5 	.word	0x08001ae5
 8001ae0:	08001b7b 	.word	0x08001b7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d046      	beq.n	8001b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af4:	e043      	b.n	8001b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001afe:	d140      	bne.n	8001b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b04:	e03d      	b.n	8001b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b0e:	d121      	bne.n	8001b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d837      	bhi.n	8001b86 <DMA_CheckFifoParam+0xda>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <DMA_CheckFifoParam+0x70>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b33 	.word	0x08001b33
 8001b24:	08001b2d 	.word	0x08001b2d
 8001b28:	08001b45 	.word	0x08001b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b30:	e030      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d025      	beq.n	8001b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b42:	e022      	b.n	8001b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b4c:	d11f      	bne.n	8001b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b52:	e01c      	b.n	8001b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d903      	bls.n	8001b62 <DMA_CheckFifoParam+0xb6>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d003      	beq.n	8001b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b60:	e018      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
      break;
 8001b66:	e015      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00e      	beq.n	8001b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
      break;
 8001b78:	e00b      	b.n	8001b92 <DMA_CheckFifoParam+0xe6>
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e00a      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7e:	bf00      	nop
 8001b80:	e008      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
 8001b84:	e006      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b86:	bf00      	nop
 8001b88:	e004      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e002      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b92:	bf00      	nop
    }
  } 
  
  return status; 
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e159      	b.n	8001e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 8148 	bne.w	8001e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d005      	beq.n	8001bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d130      	bne.n	8001c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 0201 	and.w	r2, r3, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d017      	beq.n	8001c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d123      	bne.n	8001ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a2 	beq.w	8001e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <HAL_GPIO_Init+0x2e8>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a56      	ldr	r2, [pc, #344]	; (8001e8c <HAL_GPIO_Init+0x2e8>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b54      	ldr	r3, [pc, #336]	; (8001e8c <HAL_GPIO_Init+0x2e8>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <HAL_GPIO_Init+0x2ec>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a49      	ldr	r2, [pc, #292]	; (8001e94 <HAL_GPIO_Init+0x2f0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x202>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a48      	ldr	r2, [pc, #288]	; (8001e98 <HAL_GPIO_Init+0x2f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x1fe>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a47      	ldr	r2, [pc, #284]	; (8001e9c <HAL_GPIO_Init+0x2f8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x1fa>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a46      	ldr	r2, [pc, #280]	; (8001ea0 <HAL_GPIO_Init+0x2fc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x1f6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a45      	ldr	r2, [pc, #276]	; (8001ea4 <HAL_GPIO_Init+0x300>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x1f2>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e008      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e004      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x204>
 8001da6:	2300      	movs	r3, #0
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	f002 0203 	and.w	r2, r2, #3
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	4093      	lsls	r3, r2
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db8:	4935      	ldr	r1, [pc, #212]	; (8001e90 <HAL_GPIO_Init+0x2ec>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e14:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e1a:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e68:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3301      	adds	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	f67f aea2 	bls.w	8001bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ede:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee0:	b08f      	sub	sp, #60	; 0x3c
 8001ee2:	af0a      	add	r7, sp, #40	; 0x28
 8001ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e10f      	b.n	8002110 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f007 fb52 	bl	80095b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2203      	movs	r2, #3
 8001f14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fe39 	bl	8005ba6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	687e      	ldr	r6, [r7, #4]
 8001f3c:	466d      	mov	r5, sp
 8001f3e:	f106 0410 	add.w	r4, r6, #16
 8001f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f52:	1d33      	adds	r3, r6, #4
 8001f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f56:	6838      	ldr	r0, [r7, #0]
 8001f58:	f003 fd10 	bl	800597c <USB_CoreInit>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0d0      	b.n	8002110 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 fe27 	bl	8005bc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	e04a      	b.n	8002016 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	333d      	adds	r3, #61	; 0x3d
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	333c      	adds	r3, #60	; 0x3c
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	b298      	uxth	r0, r3
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3344      	adds	r3, #68	; 0x44
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3340      	adds	r3, #64	; 0x40
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3348      	adds	r3, #72	; 0x48
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	334c      	adds	r3, #76	; 0x4c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3354      	adds	r3, #84	; 0x54
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3301      	adds	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3af      	bcc.n	8001f80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e044      	b.n	80020b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3301      	adds	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3b5      	bcc.n	8002026 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	687e      	ldr	r6, [r7, #4]
 80020c2:	466d      	mov	r5, sp
 80020c4:	f106 0410 	add.w	r4, r6, #16
 80020c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020d8:	1d33      	adds	r3, r6, #4
 80020da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020dc:	6838      	ldr	r0, [r7, #0]
 80020de:	f003 fdbf 	bl	8005c60 <USB_DevInit>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e00d      	b.n	8002110 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f004 ff0e 	bl	8006f2a <USB_DevDisconnect>

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002118 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_PCD_Start+0x1c>
 8002130:	2302      	movs	r3, #2
 8002132:	e020      	b.n	8002176 <HAL_PCD_Start+0x5e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	2b01      	cmp	r3, #1
 8002142:	d109      	bne.n	8002158 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002148:	2b01      	cmp	r3, #1
 800214a:	d005      	beq.n	8002158 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fd11 	bl	8005b84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 febe 	bl	8006ee8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800217e:	b590      	push	{r4, r7, lr}
 8002180:	b08d      	sub	sp, #52	; 0x34
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f004 ff7c 	bl	8007092 <USB_GetMode>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 848a 	bne.w	8002ab6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fee0 	bl	8006f6c <USB_ReadInterrupts>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8480 	beq.w	8002ab4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fecd 	bl	8006f6c <USB_ReadInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d107      	bne.n	80021ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f002 0202 	and.w	r2, r2, #2
 80021ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 febb 	bl	8006f6c <USB_ReadInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d161      	bne.n	80022c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0210 	bic.w	r2, r2, #16
 800220e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	0c5b      	lsrs	r3, r3, #17
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	2b02      	cmp	r3, #2
 800223a:	d124      	bne.n	8002286 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d035      	beq.n	80022b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	6a38      	ldr	r0, [r7, #32]
 800225c:	f004 fcf2 	bl	8006c44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800226c:	441a      	add	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227e:	441a      	add	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	621a      	str	r2, [r3, #32]
 8002284:	e016      	b.n	80022b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	0c5b      	lsrs	r3, r3, #17
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	2b06      	cmp	r3, #6
 8002290:	d110      	bne.n	80022b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002298:	2208      	movs	r2, #8
 800229a:	4619      	mov	r1, r3
 800229c:	6a38      	ldr	r0, [r7, #32]
 800229e:	f004 fcd1 	bl	8006c44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ae:	441a      	add	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0210 	orr.w	r2, r2, #16
 80022c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f004 fe4f 	bl	8006f6c <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022d8:	f040 80a7 	bne.w	800242a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 fe54 	bl	8006f92 <USB_ReadDevAllOutEpInterrupt>
 80022ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022ec:	e099      	b.n	8002422 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 808e 	beq.w	8002416 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f004 fe78 	bl	8006ffa <USB_ReadDevOutEPInterrupt>
 800230a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	461a      	mov	r2, r3
 8002324:	2301      	movs	r3, #1
 8002326:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fec2 	bl	80030b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002346:	461a      	mov	r2, r3
 8002348:	2308      	movs	r3, #8
 800234a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800234c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 ff98 	bl	8003284 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236a:	461a      	mov	r2, r3
 800236c:	2310      	movs	r3, #16
 800236e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d030      	beq.n	80023dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d109      	bne.n	800239a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002398:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	78db      	ldrb	r3, [r3, #3]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d108      	bne.n	80023ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2200      	movs	r2, #0
 80023bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f007 f9f1 	bl	80097ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d6:	461a      	mov	r2, r3
 80023d8:	2302      	movs	r3, #2
 80023da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f2:	461a      	mov	r2, r3
 80023f4:	2320      	movs	r3, #32
 80023f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240e:	461a      	mov	r2, r3
 8002410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002414:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	3301      	adds	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	f47f af62 	bne.w	80022ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f004 fd9c 	bl	8006f6c <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800243e:	f040 80db 	bne.w	80025f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f004 fdbd 	bl	8006fc6 <USB_ReadDevAllInEpInterrupt>
 800244c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002452:	e0cd      	b.n	80025f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80c2 	beq.w	80025e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fde3 	bl	8007036 <USB_ReadDevInEPInterrupt>
 8002470:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d057      	beq.n	800252c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	2201      	movs	r2, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	69f9      	ldr	r1, [r7, #28]
 8002498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800249c:	4013      	ands	r3, r2
 800249e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ac:	461a      	mov	r2, r3
 80024ae:	2301      	movs	r3, #1
 80024b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d132      	bne.n	8002520 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	334c      	adds	r3, #76	; 0x4c
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4403      	add	r3, r0
 80024da:	3348      	adds	r3, #72	; 0x48
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4419      	add	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4403      	add	r3, r0
 80024ee:	334c      	adds	r3, #76	; 0x4c
 80024f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d113      	bne.n	8002520 <HAL_PCD_IRQHandler+0x3a2>
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3354      	adds	r3, #84	; 0x54
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002518:	461a      	mov	r2, r3
 800251a:	2101      	movs	r1, #1
 800251c:	f004 fdea 	bl	80070f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	b2db      	uxtb	r3, r3
 8002524:	4619      	mov	r1, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f007 f8c5 	bl	80096b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002542:	461a      	mov	r2, r3
 8002544:	2308      	movs	r3, #8
 8002546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800255e:	461a      	mov	r2, r3
 8002560:	2310      	movs	r3, #16
 8002562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257a:	461a      	mov	r2, r3
 800257c:	2340      	movs	r3, #64	; 0x40
 800257e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d023      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800258a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258c:	6a38      	ldr	r0, [r7, #32]
 800258e:	f003 fccb 	bl	8005f28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	3338      	adds	r3, #56	; 0x38
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	3304      	adds	r3, #4
 80025a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	78db      	ldrb	r3, [r3, #3]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2200      	movs	r2, #0
 80025b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f007 f908 	bl	80097d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025cc:	461a      	mov	r2, r3
 80025ce:	2302      	movs	r3, #2
 80025d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fcdb 	bl	8002f9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3301      	adds	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f af2e 	bne.w	8002454 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 fcb5 	bl	8006f6c <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800260c:	d122      	bne.n	8002654 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002628:	2b01      	cmp	r3, #1
 800262a:	d108      	bne.n	800263e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002634:	2100      	movs	r1, #0
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fec2 	bl	80033c0 <HAL_PCDEx_LPM_Callback>
 800263c:	e002      	b.n	8002644 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f007 f8a6 	bl	8009790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f004 fc87 	bl	8006f6c <USB_ReadInterrupts>
 800265e:	4603      	mov	r3, r0
 8002660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002668:	d112      	bne.n	8002690 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f007 f862 	bl	8009744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800268e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fc69 	bl	8006f6c <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a4:	f040 80b7 	bne.w	8002816 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2110      	movs	r1, #16
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fc30 	bl	8005f28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026cc:	e046      	b.n	800275c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026da:	461a      	mov	r2, r3
 80026dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f2:	0151      	lsls	r1, r2, #5
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	440a      	add	r2, r1
 80026f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002700:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270e:	461a      	mov	r2, r3
 8002710:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002714:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	4413      	add	r3, r2
 800271e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002726:	0151      	lsls	r1, r2, #5
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	440a      	add	r2, r1
 800272c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002730:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002734:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002746:	0151      	lsls	r1, r2, #5
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	440a      	add	r2, r1
 800274c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002750:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002754:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	3301      	adds	r3, #1
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	429a      	cmp	r2, r3
 8002764:	d3b3      	bcc.n	80026ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002774:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002778:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002792:	f043 030b 	orr.w	r3, r3, #11
 8002796:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a8:	f043 030b 	orr.w	r3, r3, #11
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	e015      	b.n	80027dc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d6:	f043 030b 	orr.w	r3, r3, #11
 80027da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002800:	461a      	mov	r2, r3
 8002802:	f004 fc77 	bl	80070f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fba6 	bl	8006f6c <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282a:	d124      	bne.n	8002876 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fc3c 	bl	80070ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fbf1 	bl	8006022 <USB_GetDevSpeed>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681c      	ldr	r4, [r3, #0]
 800284c:	f001 f9e8 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8002850:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	4620      	mov	r0, r4
 800285c:	f003 f8f0 	bl	8005a40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f006 ff50 	bl	8009706 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fb76 	bl	8006f6c <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b08      	cmp	r3, #8
 8002888:	d10a      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f006 ff2d 	bl	80096ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f002 0208 	and.w	r2, r2, #8
 800289e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 fb61 	bl	8006f6c <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d122      	bne.n	80028fa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c0:	2301      	movs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	e014      	b.n	80028f0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fb27 	bl	8002f38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	3301      	adds	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3e5      	bcc.n	80028c6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 fb34 	bl	8006f6c <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290e:	d13b      	bne.n	8002988 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002910:	2301      	movs	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	e02b      	b.n	800296e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3340      	adds	r3, #64	; 0x40
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800293c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800293e:	2b00      	cmp	r3, #0
 8002940:	da12      	bge.n	8002968 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	333f      	adds	r3, #63	; 0x3f
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fae8 	bl	8002f38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	3301      	adds	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	429a      	cmp	r2, r3
 8002976:	d3ce      	bcc.n	8002916 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f004 faed 	bl	8006f6c <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800299c:	d155      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800299e:	2301      	movs	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e045      	b.n	8002a30 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d12e      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da2b      	bge.n	8002a2a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d121      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a26:	6053      	str	r3, [r2, #4]
            break;
 8002a28:	e007      	b.n	8002a3a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3b4      	bcc.n	80029a4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 fa8c 	bl	8006f6c <USB_ReadInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d10a      	bne.n	8002a76 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f006 fec7 	bl	80097f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 fa76 	bl	8006f6c <USB_ReadInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d115      	bne.n	8002ab6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f006 feb7 	bl	8009810 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	e000      	b.n	8002ab6 <HAL_PCD_IRQHandler+0x938>
      return;
 8002ab4:	bf00      	nop
    }
  }
}
 8002ab6:	3734      	adds	r7, #52	; 0x34
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}

08002abc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_PCD_SetAddress+0x1a>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e013      	b.n	8002afe <HAL_PCD_SetAddress+0x42>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 f9d4 	bl	8006e9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	4608      	mov	r0, r1
 8002b10:	4611      	mov	r1, r2
 8002b12:	461a      	mov	r2, r3
 8002b14:	4603      	mov	r3, r0
 8002b16:	70fb      	strb	r3, [r7, #3]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	803b      	strh	r3, [r7, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da0f      	bge.n	8002b4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 020f 	and.w	r2, r3, #15
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	3338      	adds	r3, #56	; 0x38
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	705a      	strb	r2, [r3, #1]
 8002b4a:	e00f      	b.n	8002b6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 020f 	and.w	r2, r3, #15
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b78:	883a      	ldrh	r2, [r7, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	78ba      	ldrb	r2, [r7, #2]
 8002b82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	785b      	ldrb	r3, [r3, #1]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b96:	78bb      	ldrb	r3, [r7, #2]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d102      	bne.n	8002ba2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_PCD_EP_Open+0xaa>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e00e      	b.n	8002bce <HAL_PCD_EP_Open+0xc8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68f9      	ldr	r1, [r7, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fa54 	bl	800606c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	da0f      	bge.n	8002c0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 020f 	and.w	r2, r3, #15
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	3338      	adds	r3, #56	; 0x38
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	705a      	strb	r2, [r3, #1]
 8002c08:	e00f      	b.n	8002c2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	3304      	adds	r3, #4
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_PCD_EP_Close+0x6e>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e00e      	b.n	8002c62 <HAL_PCD_EP_Close+0x8c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68f9      	ldr	r1, [r7, #12]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fa92 	bl	800617c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	460b      	mov	r3, r1
 8002c78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c7a:	7afb      	ldrb	r3, [r7, #11]
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	3304      	adds	r3, #4
 8002c92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cac:	7afb      	ldrb	r3, [r7, #11]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6979      	ldr	r1, [r7, #20]
 8002cde:	f003 fd71 	bl	80067c4 <USB_EP0StartXfer>
 8002ce2:	e008      	b.n	8002cf6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6979      	ldr	r1, [r7, #20]
 8002cf2:	f003 fb1f 	bl	8006334 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3338      	adds	r3, #56	; 0x38
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	6979      	ldr	r1, [r7, #20]
 8002da2:	f003 fd0f 	bl	80067c4 <USB_EP0StartXfer>
 8002da6:	e008      	b.n	8002dba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	6979      	ldr	r1, [r7, #20]
 8002db6:	f003 fabd 	bl	8006334 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 020f 	and.w	r2, r3, #15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d901      	bls.n	8002de2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e050      	b.n	8002e84 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0f      	bge.n	8002e0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	3338      	adds	r3, #56	; 0x38
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	705a      	strb	r2, [r3, #1]
 8002e08:	e00d      	b.n	8002e26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_PCD_EP_SetStall+0x82>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e01e      	b.n	8002e84 <HAL_PCD_EP_SetStall+0xc0>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 ff4d 	bl	8006cf4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	b2d9      	uxtb	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e74:	461a      	mov	r2, r3
 8002e76:	f004 f93d 	bl	80070f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d901      	bls.n	8002eaa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e042      	b.n	8002f30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da0f      	bge.n	8002ed2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3338      	adds	r3, #56	; 0x38
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	705a      	strb	r2, [r3, #1]
 8002ed0:	e00f      	b.n	8002ef2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 020f 	and.w	r2, r3, #15
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3304      	adds	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_PCD_EP_ClrStall+0x86>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e00e      	b.n	8002f30 <HAL_PCD_EP_ClrStall+0xa4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 ff55 	bl	8006dd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da0c      	bge.n	8002f66 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	3338      	adds	r3, #56	; 0x38
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e00c      	b.n	8002f80 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 fd74 	bl	8006a74 <USB_EPStopXfer>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f90:	7afb      	ldrb	r3, [r7, #11]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08a      	sub	sp, #40	; 0x28
 8002f9e:	af02      	add	r7, sp, #8
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	3338      	adds	r3, #56	; 0x38
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d901      	bls.n	8002fd2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06c      	b.n	80030ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d902      	bls.n	8002fee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3303      	adds	r3, #3
 8002ff2:	089b      	lsrs	r3, r3, #2
 8002ff4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ff6:	e02b      	b.n	8003050 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	429a      	cmp	r2, r3
 800300c:	d902      	bls.n	8003014 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3303      	adds	r3, #3
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6919      	ldr	r1, [r3, #16]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800302c:	b2db      	uxtb	r3, r3
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	4603      	mov	r3, r0
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f003 fdc8 	bl	8006bc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	441a      	add	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	441a      	add	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	b29b      	uxth	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	429a      	cmp	r2, r3
 8003064:	d809      	bhi.n	800307a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800306e:	429a      	cmp	r2, r3
 8003070:	d203      	bcs.n	800307a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1be      	bne.n	8002ff8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	429a      	cmp	r2, r3
 8003084:	d811      	bhi.n	80030aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	2201      	movs	r2, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	43db      	mvns	r3, r3
 80030a0:	6939      	ldr	r1, [r7, #16]
 80030a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030a6:	4013      	ands	r3, r2
 80030a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	333c      	adds	r3, #60	; 0x3c
 80030cc:	3304      	adds	r3, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d17b      	bne.n	80031e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d015      	beq.n	8003120 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4a61      	ldr	r2, [pc, #388]	; (800327c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	f240 80b9 	bls.w	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80b3 	beq.w	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003116:	461a      	mov	r2, r3
 8003118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311c:	6093      	str	r3, [r2, #8]
 800311e:	e0a7      	b.n	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	461a      	mov	r2, r3
 8003138:	2320      	movs	r3, #32
 800313a:	6093      	str	r3, [r2, #8]
 800313c:	e098      	b.n	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 8093 	bne.w	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	4a4b      	ldr	r2, [pc, #300]	; (800327c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d90f      	bls.n	8003172 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003168:	461a      	mov	r2, r3
 800316a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800316e:	6093      	str	r3, [r2, #8]
 8003170:	e07e      	b.n	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	3304      	adds	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	440b      	add	r3, r1
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319e:	1ad2      	subs	r2, r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d114      	bne.n	80031d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031bc:	461a      	mov	r2, r3
 80031be:	2101      	movs	r1, #1
 80031c0:	f003 ff98 	bl	80070f4 <USB_EP0_OutStart>
 80031c4:	e006      	b.n	80031d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	441a      	add	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f006 fa50 	bl	8009680 <HAL_PCD_DataOutStageCallback>
 80031e0:	e046      	b.n	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4a26      	ldr	r2, [pc, #152]	; (8003280 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d124      	bne.n	8003234 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003206:	6093      	str	r3, [r2, #8]
 8003208:	e032      	b.n	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	461a      	mov	r2, r3
 8003222:	2320      	movs	r3, #32
 8003224:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f006 fa27 	bl	8009680 <HAL_PCD_DataOutStageCallback>
 8003232:	e01d      	b.n	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d114      	bne.n	8003264 <PCD_EP_OutXfrComplete_int+0x1b0>
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d108      	bne.n	8003264 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800325c:	461a      	mov	r2, r3
 800325e:	2100      	movs	r1, #0
 8003260:	f003 ff48 	bl	80070f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f006 fa08 	bl	8009680 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	4f54300a 	.word	0x4f54300a
 8003280:	4f54310a 	.word	0x4f54310a

08003284 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	333c      	adds	r3, #60	; 0x3c
 800329c:	3304      	adds	r3, #4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <PCD_EP_OutSetupPacket_int+0x88>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d90e      	bls.n	80032d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d0:	461a      	mov	r2, r3
 80032d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f006 f9bf 	bl	800965c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a0a      	ldr	r2, [pc, #40]	; (800330c <PCD_EP_OutSetupPacket_int+0x88>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d90c      	bls.n	8003300 <PCD_EP_OutSetupPacket_int+0x7c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d108      	bne.n	8003300 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032f8:	461a      	mov	r2, r3
 80032fa:	2101      	movs	r1, #1
 80032fc:	f003 fefa 	bl	80070f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	4f54300a 	.word	0x4f54300a

08003310 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
 800331c:	4613      	mov	r3, r2
 800331e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800332e:	883b      	ldrh	r3, [r7, #0]
 8003330:	0419      	lsls	r1, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	430a      	orrs	r2, r1
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
 800333c:	e028      	b.n	8003390 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4413      	add	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e00d      	b.n	800336e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	3340      	adds	r3, #64	; 0x40
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4413      	add	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	3301      	adds	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	3b01      	subs	r3, #1
 8003374:	429a      	cmp	r2, r3
 8003376:	d3ec      	bcc.n	8003352 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003378:	883b      	ldrh	r3, [r7, #0]
 800337a:	0418      	lsls	r0, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	3b01      	subs	r3, #1
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	4302      	orrs	r2, r0
 8003388:	3340      	adds	r3, #64	; 0x40
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e267      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d075      	beq.n	80034e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f6:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d00c      	beq.n	800341c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4b85      	ldr	r3, [pc, #532]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340a:	2b08      	cmp	r3, #8
 800340c:	d112      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341a:	d10b      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	4b7e      	ldr	r3, [pc, #504]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05b      	beq.n	80034e0 <HAL_RCC_OscConfig+0x108>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d157      	bne.n	80034e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e242      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x74>
 800343e:	4b76      	ldr	r3, [pc, #472]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a75      	ldr	r2, [pc, #468]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0xb0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x98>
 8003456:	4b70      	ldr	r3, [pc, #448]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6f      	ldr	r2, [pc, #444]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6c      	ldr	r2, [pc, #432]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xb0>
 8003470:	4b69      	ldr	r3, [pc, #420]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a68      	ldr	r2, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b66      	ldr	r3, [pc, #408]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd fe44 	bl	800111c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003498:	f7fd fe40 	bl	800111c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e207      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0xc0>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fd fe30 	bl	800111c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fd fe2c 	bl	800111c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1f3      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	4b51      	ldr	r3, [pc, #324]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0xe8>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d063      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003502:	2b08      	cmp	r3, #8
 8003504:	d11c      	bne.n	8003540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b44      	ldr	r3, [pc, #272]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d116      	bne.n	8003540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x152>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d001      	beq.n	800352a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e1c7      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4937      	ldr	r1, [pc, #220]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	e03a      	b.n	80035b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d020      	beq.n	800358a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003548:	4b34      	ldr	r3, [pc, #208]	; (800361c <HAL_RCC_OscConfig+0x244>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fd fde5 	bl	800111c <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003556:	f7fd fde1 	bl	800111c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1a8      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4925      	ldr	r1, [pc, #148]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_OscConfig+0x244>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fd fdc4 	bl	800111c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003598:	f7fd fdc0 	bl	800111c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e187      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d036      	beq.n	8003630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_RCC_OscConfig+0x248>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fd fda4 	bl	800111c <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d8:	f7fd fda0 	bl	800111c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e167      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x240>)
 80035ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x200>
 80035f6:	e01b      	b.n	8003630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_OscConfig+0x248>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fd fd8d 	bl	800111c <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	e00e      	b.n	8003624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003606:	f7fd fd89 	bl	800111c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d907      	bls.n	8003624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e150      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
 8003618:	40023800 	.word	0x40023800
 800361c:	42470000 	.word	0x42470000
 8003620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	4b88      	ldr	r3, [pc, #544]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ea      	bne.n	8003606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8097 	beq.w	800376c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003642:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	4b7d      	ldr	r3, [pc, #500]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a7c      	ldr	r2, [pc, #496]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b7a      	ldr	r3, [pc, #488]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b77      	ldr	r3, [pc, #476]	; (800384c <HAL_RCC_OscConfig+0x474>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367a:	4b74      	ldr	r3, [pc, #464]	; (800384c <HAL_RCC_OscConfig+0x474>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a73      	ldr	r2, [pc, #460]	; (800384c <HAL_RCC_OscConfig+0x474>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fd fd49 	bl	800111c <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fd fd45 	bl	800111c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e10c      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_OscConfig+0x474>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2ea>
 80036b4:	4b64      	ldr	r3, [pc, #400]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a63      	ldr	r2, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	e01c      	b.n	80036fc <HAL_RCC_OscConfig+0x324>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x30c>
 80036ca:	4b5f      	ldr	r3, [pc, #380]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a5e      	ldr	r2, [pc, #376]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	4b5c      	ldr	r3, [pc, #368]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a5b      	ldr	r2, [pc, #364]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	e00b      	b.n	80036fc <HAL_RCC_OscConfig+0x324>
 80036e4:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a57      	ldr	r2, [pc, #348]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a54      	ldr	r2, [pc, #336]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 0304 	bic.w	r3, r3, #4
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d015      	beq.n	8003730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fd0a 	bl	800111c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fd fd06 	bl	800111c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0cb      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	4b49      	ldr	r3, [pc, #292]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0ee      	beq.n	800370c <HAL_RCC_OscConfig+0x334>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003730:	f7fd fcf4 	bl	800111c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fd fcf0 	bl	800111c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0b5      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374e:	4b3e      	ldr	r3, [pc, #248]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ee      	bne.n	8003738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	4a38      	ldr	r2, [pc, #224]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a1 	beq.w	80038b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b08      	cmp	r3, #8
 8003780:	d05c      	beq.n	800383c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d141      	bne.n	800380e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fd fcc4 	bl	800111c <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd fcc0 	bl	800111c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e087      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	3b01      	subs	r3, #1
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	491b      	ldr	r1, [pc, #108]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e0:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fd fc99 	bl	800111c <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fd fc95 	bl	800111c <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e05c      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x416>
 800380c:	e054      	b.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_RCC_OscConfig+0x478>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fd fc82 	bl	800111c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fd fc7e 	bl	800111c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e045      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_OscConfig+0x470>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x444>
 800383a:	e03d      	b.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e038      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
 8003848:	40023800 	.word	0x40023800
 800384c:	40007000 	.word	0x40007000
 8003850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x4ec>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d028      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d121      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d11a      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800388a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	3b01      	subs	r3, #1
 800389e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0cc      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d90c      	bls.n	8003904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b65      	ldr	r3, [pc, #404]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0b8      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800391c:	4b59      	ldr	r3, [pc, #356]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003934:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	494d      	ldr	r1, [pc, #308]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d044      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d119      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d003      	beq.n	8003986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	2b03      	cmp	r3, #3
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e067      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4934      	ldr	r1, [pc, #208]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b8:	f7fd fbb0 	bl	800111c <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c0:	f7fd fbac 	bl	800111c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e04f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 020c 	and.w	r2, r3, #12
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d1eb      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d20c      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e032      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4916      	ldr	r1, [pc, #88]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	490e      	ldr	r1, [pc, #56]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4e:	f000 f821 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	490a      	ldr	r1, [pc, #40]	; (8003a88 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	5ccb      	ldrb	r3, [r1, r3]
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fb10 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00
 8003a84:	40023800 	.word	0x40023800
 8003a88:	08009ce8 	.word	0x08009ce8
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	20000004 	.word	0x20000004

08003a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b090      	sub	sp, #64	; 0x40
 8003a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	f200 80a1 	bhi.w	8003c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac6:	e09b      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003acc:	e09b      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ace:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ad2:	e098      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4b4f      	ldr	r3, [pc, #316]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ade:	4b4d      	ldr	r3, [pc, #308]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d028      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aea:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	2200      	movs	r2, #0
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	627a      	str	r2, [r7, #36]	; 0x24
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003afc:	2100      	movs	r1, #0
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b00:	fb03 f201 	mul.w	r2, r3, r1
 8003b04:	2300      	movs	r3, #0
 8003b06:	fb00 f303 	mul.w	r3, r0, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4a43      	ldr	r2, [pc, #268]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b14:	460a      	mov	r2, r1
 8003b16:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1a:	4413      	add	r3, r2
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	2200      	movs	r2, #0
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	61fa      	str	r2, [r7, #28]
 8003b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b2e:	f7fc fb5b 	bl	80001e8 <__aeabi_uldivmod>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4613      	mov	r3, r2
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3a:	e053      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3c:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	099b      	lsrs	r3, r3, #6
 8003b42:	2200      	movs	r2, #0
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	617a      	str	r2, [r7, #20]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b4e:	f04f 0b00 	mov.w	fp, #0
 8003b52:	4652      	mov	r2, sl
 8003b54:	465b      	mov	r3, fp
 8003b56:	f04f 0000 	mov.w	r0, #0
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	0159      	lsls	r1, r3, #5
 8003b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b64:	0150      	lsls	r0, r2, #5
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b86:	ebb2 0408 	subs.w	r4, r2, r8
 8003b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	00eb      	lsls	r3, r5, #3
 8003b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b9c:	00e2      	lsls	r2, r4, #3
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	461d      	mov	r5, r3
 8003ba2:	eb14 030a 	adds.w	r3, r4, sl
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	eb45 030b 	adc.w	r3, r5, fp
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bba:	4629      	mov	r1, r5
 8003bbc:	028b      	lsls	r3, r1, #10
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	028a      	lsls	r2, r1, #10
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	60fa      	str	r2, [r7, #12]
 8003bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd8:	f7fc fb06 	bl	80001e8 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4613      	mov	r3, r2
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bfe:	e002      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3740      	adds	r7, #64	; 0x40
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	00f42400 	.word	0x00f42400
 8003c1c:	017d7840 	.word	0x017d7840

08003c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000000 	.word	0x20000000

08003c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c3c:	f7ff fff0 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0a9b      	lsrs	r3, r3, #10
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4903      	ldr	r1, [pc, #12]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	08009cf8 	.word	0x08009cf8

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c64:	f7ff ffdc 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0b5b      	lsrs	r3, r3, #13
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	08009cf8 	.word	0x08009cf8

08003c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e041      	b.n	8003d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd f812 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fa88 	bl	80041dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e044      	b.n	8003dca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d018      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x6c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d013      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x6c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <HAL_TIM_Base_Start_IT+0xb4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x6c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x6c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_TIM_Base_Start_IT+0x6c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d111      	bne.n	8003db8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d010      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db6:	e007      	b.n	8003dc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40014000 	.word	0x40014000

08003dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0202 	mvn.w	r2, #2
 8003e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f9b5 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9a7 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f9b8 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0204 	mvn.w	r2, #4
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f98b 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f97d 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f98e 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0208 	mvn.w	r2, #8
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f961 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f953 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f964 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0210 	mvn.w	r2, #16
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f937 	bl	800419e <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f929 	bl	800418a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f93a 	bl	80041b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0201 	mvn.w	r2, #1
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc fcc2 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d10e      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fab2 	bl	8004500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8ff 	bl	80041c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d107      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0220 	mvn.w	r2, #32
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa7c 	bl	80044ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_TIM_ConfigClockSource+0x1c>
 8004014:	2302      	movs	r3, #2
 8004016:	e0b4      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x186>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800403e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004050:	d03e      	beq.n	80040d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004056:	f200 8087 	bhi.w	8004168 <HAL_TIM_ConfigClockSource+0x16c>
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405e:	f000 8086 	beq.w	800416e <HAL_TIM_ConfigClockSource+0x172>
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d87f      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x16c>
 8004068:	2b70      	cmp	r3, #112	; 0x70
 800406a:	d01a      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0xa6>
 800406c:	2b70      	cmp	r3, #112	; 0x70
 800406e:	d87b      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x16c>
 8004070:	2b60      	cmp	r3, #96	; 0x60
 8004072:	d050      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x11a>
 8004074:	2b60      	cmp	r3, #96	; 0x60
 8004076:	d877      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b50      	cmp	r3, #80	; 0x50
 800407a:	d03c      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0xfa>
 800407c:	2b50      	cmp	r3, #80	; 0x50
 800407e:	d873      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d058      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0x13a>
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d86f      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d064      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x15a>
 800408c:	2b30      	cmp	r3, #48	; 0x30
 800408e:	d86b      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d060      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	2b20      	cmp	r3, #32
 8004096:	d867      	bhi.n	8004168 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d05c      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x15a>
 800409c:	2b10      	cmp	r3, #16
 800409e:	d05a      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x15a>
 80040a0:	e062      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f000 f98d 	bl	80043d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	609a      	str	r2, [r3, #8]
      break;
 80040ce:	e04f      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6899      	ldr	r1, [r3, #8]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f000 f976 	bl	80043d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f2:	609a      	str	r2, [r3, #8]
      break;
 80040f4:	e03c      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6859      	ldr	r1, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	461a      	mov	r2, r3
 8004104:	f000 f8ea 	bl	80042dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2150      	movs	r1, #80	; 0x50
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f943 	bl	800439a <TIM_ITRx_SetConfig>
      break;
 8004114:	e02c      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	461a      	mov	r2, r3
 8004124:	f000 f909 	bl	800433a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2160      	movs	r1, #96	; 0x60
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f933 	bl	800439a <TIM_ITRx_SetConfig>
      break;
 8004134:	e01c      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	461a      	mov	r2, r3
 8004144:	f000 f8ca 	bl	80042dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2140      	movs	r1, #64	; 0x40
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f923 	bl	800439a <TIM_ITRx_SetConfig>
      break;
 8004154:	e00c      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f000 f91a 	bl	800439a <TIM_ITRx_SetConfig>
      break;
 8004166:	e003      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      break;
 800416c:	e000      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800416e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a34      	ldr	r2, [pc, #208]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00f      	beq.n	8004214 <TIM_Base_SetConfig+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a31      	ldr	r2, [pc, #196]	; (80042c4 <TIM_Base_SetConfig+0xe8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0x38>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a30      	ldr	r2, [pc, #192]	; (80042c8 <TIM_Base_SetConfig+0xec>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x38>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a2f      	ldr	r2, [pc, #188]	; (80042cc <TIM_Base_SetConfig+0xf0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01b      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d017      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <TIM_Base_SetConfig+0xe8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <TIM_Base_SetConfig+0xec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00f      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a20      	ldr	r2, [pc, #128]	; (80042cc <TIM_Base_SetConfig+0xf0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <TIM_Base_SetConfig+0xf4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <TIM_Base_SetConfig+0xf8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <TIM_Base_SetConfig+0xfc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d103      	bne.n	80042ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	615a      	str	r2, [r3, #20]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800

080042dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0201 	bic.w	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f023 030a 	bic.w	r3, r3, #10
 8004318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f023 0210 	bic.w	r2, r3, #16
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004364:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	031b      	lsls	r3, r3, #12
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004376:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f043 0307 	orr.w	r3, r3, #7
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004424:	2302      	movs	r3, #2
 8004426:	e050      	b.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d018      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d013      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10c      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40014000 	.word	0x40014000

080044ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e03f      	b.n	80045a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fbf4 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 ff9b 	bl	8005494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	af02      	add	r7, sp, #8
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d17c      	bne.n	80046c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UART_Transmit+0x2c>
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e075      	b.n	80046ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Transmit+0x3e>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e06e      	b.n	80046ca <HAL_UART_Transmit+0x11c>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2221      	movs	r2, #33	; 0x21
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004602:	f7fc fd8b 	bl	800111c <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d108      	bne.n	8004630 <HAL_UART_Transmit+0x82>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e003      	b.n	8004638 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004640:	e02a      	b.n	8004698 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fc53 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e036      	b.n	80046ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3302      	adds	r3, #2
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	e007      	b.n	800468a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	3301      	adds	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1cf      	bne.n	8004642 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2140      	movs	r1, #64	; 0x40
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fc23 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e006      	b.n	80046ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b08c      	sub	sp, #48	; 0x30
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	4613      	mov	r3, r2
 80046de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d152      	bne.n	8004792 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e04b      	b.n	8004794 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004706:	2302      	movs	r3, #2
 8004708:	e044      	b.n	8004794 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	461a      	mov	r2, r3
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fc58 	bl	8004fd4 <UART_Start_Receive_DMA>
 8004724:	4603      	mov	r3, r0
 8004726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800472a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800472e:	2b00      	cmp	r3, #0
 8004730:	d12c      	bne.n	800478c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	2b01      	cmp	r3, #1
 8004738:	d125      	bne.n	8004786 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	617b      	str	r3, [r7, #20]
   return(result);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f043 0310 	orr.w	r3, r3, #16
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004770:	627a      	str	r2, [r7, #36]	; 0x24
 8004772:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6a39      	ldr	r1, [r7, #32]
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	61fb      	str	r3, [r7, #28]
   return(result);
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e5      	bne.n	8004750 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004784:	e002      	b.n	800478c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800478c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004790:	e000      	b.n	8004794 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3730      	adds	r7, #48	; 0x30
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b0ba      	sub	sp, #232	; 0xe8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10f      	bne.n	8004802 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_UART_IRQHandler+0x66>
 80047ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fd8f 	bl	800531e <UART_Receive_IT>
      return;
 8004800:	e256      	b.n	8004cb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 80de 	beq.w	80049c8 <HAL_UART_IRQHandler+0x22c>
 800480c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80d1 	beq.w	80049c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_UART_IRQHandler+0xae>
 8004832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_UART_IRQHandler+0xd2>
 8004856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f043 0202 	orr.w	r2, r3, #2
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_UART_IRQHandler+0xf6>
 800487a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0204 	orr.w	r2, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d011      	beq.n	80048c2 <HAL_UART_IRQHandler+0x126>
 800489e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f043 0208 	orr.w	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 81ed 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_UART_IRQHandler+0x14e>
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fd1a 	bl	800531e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <HAL_UART_IRQHandler+0x17a>
 800490e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d04f      	beq.n	80049b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fc22 	bl	8005160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d141      	bne.n	80049ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3314      	adds	r3, #20
 8004952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004956:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800495a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800496e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1d9      	bne.n	800492a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	2b00      	cmp	r3, #0
 800497c:	d013      	beq.n	80049a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	4a7d      	ldr	r2, [pc, #500]	; (8004b78 <HAL_UART_IRQHandler+0x3dc>)
 8004984:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc fe7e 	bl	800168c <HAL_DMA_Abort_IT>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d016      	beq.n	80049c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a0:	4610      	mov	r0, r2
 80049a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	e00e      	b.n	80049c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9a4 	bl	8004cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ac:	e00a      	b.n	80049c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f9a0 	bl	8004cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e006      	b.n	80049c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f99c 	bl	8004cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049c2:	e170      	b.n	8004ca6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	bf00      	nop
    return;
 80049c6:	e16e      	b.n	8004ca6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	f040 814a 	bne.w	8004c66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 8143 	beq.w	8004c66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 813c 	beq.w	8004c66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	f040 80b4 	bne.w	8004b7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8140 	beq.w	8004caa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a32:	429a      	cmp	r2, r3
 8004a34:	f080 8139 	bcs.w	8004caa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4a:	f000 8088 	beq.w	8004b5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
 8004a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1d9      	bne.n	8004a4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3314      	adds	r3, #20
 8004aa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3314      	adds	r3, #20
 8004aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004abe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e1      	bne.n	8004a9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004afa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004afc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e3      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2e:	f023 0310 	bic.w	r3, r3, #16
 8004b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b40:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e3      	bne.n	8004b1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fc fd27 	bl	80015ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fb fe5e 	bl	8000830 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b74:	e099      	b.n	8004caa <HAL_UART_IRQHandler+0x50e>
 8004b76:	bf00      	nop
 8004b78:	08005227 	.word	0x08005227
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 808b 	beq.w	8004cae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8086 	beq.w	8004cae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bc6:	647a      	str	r2, [r7, #68]	; 0x44
 8004bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e3      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3314      	adds	r3, #20
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	623b      	str	r3, [r7, #32]
   return(result);
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e3      	bne.n	8004bda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0310 	bic.w	r3, r3, #16
 8004c36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c44:	61fa      	str	r2, [r7, #28]
 8004c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	617b      	str	r3, [r7, #20]
   return(result);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e3      	bne.n	8004c20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fb fde6 	bl	8000830 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c64:	e023      	b.n	8004cae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_UART_IRQHandler+0x4ea>
 8004c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fae5 	bl	800524e <UART_Transmit_IT>
    return;
 8004c84:	e014      	b.n	8004cb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00e      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x514>
 8004c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb25 	bl	80052ee <UART_EndTransmit_IT>
    return;
 8004ca4:	e004      	b.n	8004cb0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ca6:	bf00      	nop
 8004ca8:	e002      	b.n	8004cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8004caa:	bf00      	nop
 8004cac:	e000      	b.n	8004cb0 <HAL_UART_IRQHandler+0x514>
      return;
 8004cae:	bf00      	nop
  }
}
 8004cb0:	37e8      	adds	r7, #232	; 0xe8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop

08004cb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b09c      	sub	sp, #112	; 0x70
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d172      	bne.n	8004e0a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	2200      	movs	r2, #0
 8004d28:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d40:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e5      	bne.n	8004d2a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	667b      	str	r3, [r7, #100]	; 0x64
 8004d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3314      	adds	r3, #20
 8004d7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8004d80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e5      	bne.n	8004d5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3314      	adds	r3, #20
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	623b      	str	r3, [r7, #32]
   return(result);
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da8:	663b      	str	r3, [r7, #96]	; 0x60
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3314      	adds	r3, #20
 8004db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004db2:	633a      	str	r2, [r7, #48]	; 0x30
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e5      	bne.n	8004d92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d119      	bne.n	8004e0a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f023 0310 	bic.w	r3, r3, #16
 8004dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004df6:	61fa      	str	r2, [r7, #28]
 8004df8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	69b9      	ldr	r1, [r7, #24]
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	617b      	str	r3, [r7, #20]
   return(result);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e5      	bne.n	8004dd6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d106      	bne.n	8004e20 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e16:	4619      	mov	r1, r3
 8004e18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e1a:	f7fb fd09 	bl	8000830 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e1e:	e002      	b.n	8004e26 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004e20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e22:	f7ff ff53 	bl	8004ccc <HAL_UART_RxCpltCallback>
}
 8004e26:	bf00      	nop
 8004e28:	3770      	adds	r7, #112	; 0x70
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d108      	bne.n	8004e56 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7fb fcee 	bl	8000830 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e54:	e002      	b.n	8004e5c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff ff42 	bl	8004ce0 <HAL_UART_RxHalfCpltCallback>
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b21      	cmp	r3, #33	; 0x21
 8004e96:	d108      	bne.n	8004eaa <UART_DMAError+0x46>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ea4:	68b8      	ldr	r0, [r7, #8]
 8004ea6:	f000 f933 	bl	8005110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b22      	cmp	r3, #34	; 0x22
 8004eca:	d108      	bne.n	8004ede <UART_DMAError+0x7a>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004ed8:	68b8      	ldr	r0, [r7, #8]
 8004eda:	f000 f941 	bl	8005160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0210 	orr.w	r2, r3, #16
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eea:	68b8      	ldr	r0, [r7, #8]
 8004eec:	f7ff ff02 	bl	8004cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b090      	sub	sp, #64	; 0x40
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f08:	e050      	b.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d04c      	beq.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f18:	f7fc f900 	bl	800111c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d241      	bcs.n	8004fac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f48:	637a      	str	r2, [r7, #52]	; 0x34
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3314      	adds	r3, #20
 8004f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7c:	623a      	str	r2, [r7, #32]
 8004f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69f9      	ldr	r1, [r7, #28]
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e00f      	b.n	8004fcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d09f      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3740      	adds	r7, #64	; 0x40
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b098      	sub	sp, #96	; 0x60
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2222      	movs	r2, #34	; 0x22
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	4a40      	ldr	r2, [pc, #256]	; (8005104 <UART_Start_Receive_DMA+0x130>)
 8005002:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <UART_Start_Receive_DMA+0x134>)
 800500a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	4a3e      	ldr	r2, [pc, #248]	; (800510c <UART_Start_Receive_DMA+0x138>)
 8005012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	2200      	movs	r2, #0
 800501a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800501c:	f107 0308 	add.w	r3, r7, #8
 8005020:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	f7fc fa62 	bl	80014fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d019      	beq.n	8005092 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	330c      	adds	r3, #12
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005074:	65bb      	str	r3, [r7, #88]	; 0x58
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800507e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005080:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	657b      	str	r3, [r7, #84]	; 0x54
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	617b      	str	r3, [r7, #20]
   return(result);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3314      	adds	r3, #20
 80050e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050e6:	627a      	str	r2, [r7, #36]	; 0x24
 80050e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6a39      	ldr	r1, [r7, #32]
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e5      	bne.n	80050c6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3760      	adds	r7, #96	; 0x60
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	08004d09 	.word	0x08004d09
 8005108:	08004e2f 	.word	0x08004e2f
 800510c:	08004e65 	.word	0x08004e65

08005110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	60bb      	str	r3, [r7, #8]
   return(result);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	61ba      	str	r2, [r7, #24]
 800513a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6979      	ldr	r1, [r7, #20]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	613b      	str	r3, [r7, #16]
   return(result);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005154:	bf00      	nop
 8005156:	3724      	adds	r7, #36	; 0x24
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b095      	sub	sp, #84	; 0x54
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005188:	643a      	str	r2, [r7, #64]	; 0x40
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800518e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d119      	bne.n	800520c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	647b      	str	r3, [r7, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051f8:	61ba      	str	r2, [r7, #24]
 80051fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	613b      	str	r3, [r7, #16]
   return(result);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
}
 800521a:	bf00      	nop
 800521c:	3754      	adds	r7, #84	; 0x54
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff fd57 	bl	8004cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b21      	cmp	r3, #33	; 0x21
 8005260:	d13e      	bne.n	80052e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d114      	bne.n	8005296 <UART_Transmit_IT+0x48>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d110      	bne.n	8005296 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005288:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	1c9a      	adds	r2, r3, #2
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]
 8005294:	e008      	b.n	80052a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	1c59      	adds	r1, r3, #1
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6211      	str	r1, [r2, #32]
 80052a0:	781a      	ldrb	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4619      	mov	r1, r3
 80052b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10f      	bne.n	80052dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005304:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fcd2 	bl	8004cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b08c      	sub	sp, #48	; 0x30
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b22      	cmp	r3, #34	; 0x22
 8005330:	f040 80ab 	bne.w	800548a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533c:	d117      	bne.n	800536e <UART_Receive_IT+0x50>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d113      	bne.n	800536e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535c:	b29a      	uxth	r2, r3
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	629a      	str	r2, [r3, #40]	; 0x28
 800536c:	e026      	b.n	80053bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005380:	d007      	beq.n	8005392 <UART_Receive_IT+0x74>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <UART_Receive_IT+0x82>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e008      	b.n	80053b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4619      	mov	r1, r3
 80053ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d15a      	bne.n	8005486 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0220 	bic.w	r2, r2, #32
 80053de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	2b01      	cmp	r3, #1
 800540e:	d135      	bne.n	800547c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	613b      	str	r3, [r7, #16]
   return(result);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f023 0310 	bic.w	r3, r3, #16
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	623a      	str	r2, [r7, #32]
 8005438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	69f9      	ldr	r1, [r7, #28]
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	61bb      	str	r3, [r7, #24]
   return(result);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b10      	cmp	r3, #16
 8005456:	d10a      	bne.n	800546e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7fb f9db 	bl	8000830 <HAL_UARTEx_RxEventCallback>
 800547a:	e002      	b.n	8005482 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fc25 	bl	8004ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e002      	b.n	800548c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3730      	adds	r7, #48	; 0x30
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005498:	b0c0      	sub	sp, #256	; 0x100
 800549a:	af00      	add	r7, sp, #0
 800549c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	68d9      	ldr	r1, [r3, #12]
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	ea40 0301 	orr.w	r3, r0, r1
 80054bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054ec:	f021 010c 	bic.w	r1, r1, #12
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054fa:	430b      	orrs	r3, r1
 80054fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550e:	6999      	ldr	r1, [r3, #24]
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	ea40 0301 	orr.w	r3, r0, r1
 800551a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b8f      	ldr	r3, [pc, #572]	; (8005760 <UART_SetConfig+0x2cc>)
 8005524:	429a      	cmp	r2, r3
 8005526:	d005      	beq.n	8005534 <UART_SetConfig+0xa0>
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b8d      	ldr	r3, [pc, #564]	; (8005764 <UART_SetConfig+0x2d0>)
 8005530:	429a      	cmp	r2, r3
 8005532:	d104      	bne.n	800553e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005534:	f7fe fb94 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8005538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800553c:	e003      	b.n	8005546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800553e:	f7fe fb7b 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 8005542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005550:	f040 810c 	bne.w	800576c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005558:	2200      	movs	r2, #0
 800555a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800555e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005566:	4622      	mov	r2, r4
 8005568:	462b      	mov	r3, r5
 800556a:	1891      	adds	r1, r2, r2
 800556c:	65b9      	str	r1, [r7, #88]	; 0x58
 800556e:	415b      	adcs	r3, r3
 8005570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005576:	4621      	mov	r1, r4
 8005578:	eb12 0801 	adds.w	r8, r2, r1
 800557c:	4629      	mov	r1, r5
 800557e:	eb43 0901 	adc.w	r9, r3, r1
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800558e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005596:	4690      	mov	r8, r2
 8005598:	4699      	mov	r9, r3
 800559a:	4623      	mov	r3, r4
 800559c:	eb18 0303 	adds.w	r3, r8, r3
 80055a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055a4:	462b      	mov	r3, r5
 80055a6:	eb49 0303 	adc.w	r3, r9, r3
 80055aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055c2:	460b      	mov	r3, r1
 80055c4:	18db      	adds	r3, r3, r3
 80055c6:	653b      	str	r3, [r7, #80]	; 0x50
 80055c8:	4613      	mov	r3, r2
 80055ca:	eb42 0303 	adc.w	r3, r2, r3
 80055ce:	657b      	str	r3, [r7, #84]	; 0x54
 80055d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055d8:	f7fa fe06 	bl	80001e8 <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4b61      	ldr	r3, [pc, #388]	; (8005768 <UART_SetConfig+0x2d4>)
 80055e2:	fba3 2302 	umull	r2, r3, r3, r2
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	011c      	lsls	r4, r3, #4
 80055ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	1891      	adds	r1, r2, r2
 8005602:	64b9      	str	r1, [r7, #72]	; 0x48
 8005604:	415b      	adcs	r3, r3
 8005606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800560c:	4641      	mov	r1, r8
 800560e:	eb12 0a01 	adds.w	sl, r2, r1
 8005612:	4649      	mov	r1, r9
 8005614:	eb43 0b01 	adc.w	fp, r3, r1
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800562c:	4692      	mov	sl, r2
 800562e:	469b      	mov	fp, r3
 8005630:	4643      	mov	r3, r8
 8005632:	eb1a 0303 	adds.w	r3, sl, r3
 8005636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800563a:	464b      	mov	r3, r9
 800563c:	eb4b 0303 	adc.w	r3, fp, r3
 8005640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005658:	460b      	mov	r3, r1
 800565a:	18db      	adds	r3, r3, r3
 800565c:	643b      	str	r3, [r7, #64]	; 0x40
 800565e:	4613      	mov	r3, r2
 8005660:	eb42 0303 	adc.w	r3, r2, r3
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
 8005666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800566a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800566e:	f7fa fdbb 	bl	80001e8 <__aeabi_uldivmod>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4611      	mov	r1, r2
 8005678:	4b3b      	ldr	r3, [pc, #236]	; (8005768 <UART_SetConfig+0x2d4>)
 800567a:	fba3 2301 	umull	r2, r3, r3, r1
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	2264      	movs	r2, #100	; 0x64
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	1acb      	subs	r3, r1, r3
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800568e:	4b36      	ldr	r3, [pc, #216]	; (8005768 <UART_SetConfig+0x2d4>)
 8005690:	fba3 2302 	umull	r2, r3, r3, r2
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800569c:	441c      	add	r4, r3
 800569e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056b0:	4642      	mov	r2, r8
 80056b2:	464b      	mov	r3, r9
 80056b4:	1891      	adds	r1, r2, r2
 80056b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80056b8:	415b      	adcs	r3, r3
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056c0:	4641      	mov	r1, r8
 80056c2:	1851      	adds	r1, r2, r1
 80056c4:	6339      	str	r1, [r7, #48]	; 0x30
 80056c6:	4649      	mov	r1, r9
 80056c8:	414b      	adcs	r3, r1
 80056ca:	637b      	str	r3, [r7, #52]	; 0x34
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056d8:	4659      	mov	r1, fp
 80056da:	00cb      	lsls	r3, r1, #3
 80056dc:	4651      	mov	r1, sl
 80056de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e2:	4651      	mov	r1, sl
 80056e4:	00ca      	lsls	r2, r1, #3
 80056e6:	4610      	mov	r0, r2
 80056e8:	4619      	mov	r1, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	4642      	mov	r2, r8
 80056ee:	189b      	adds	r3, r3, r2
 80056f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f4:	464b      	mov	r3, r9
 80056f6:	460a      	mov	r2, r1
 80056f8:	eb42 0303 	adc.w	r3, r2, r3
 80056fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800570c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005714:	460b      	mov	r3, r1
 8005716:	18db      	adds	r3, r3, r3
 8005718:	62bb      	str	r3, [r7, #40]	; 0x28
 800571a:	4613      	mov	r3, r2
 800571c:	eb42 0303 	adc.w	r3, r2, r3
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800572a:	f7fa fd5d 	bl	80001e8 <__aeabi_uldivmod>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <UART_SetConfig+0x2d4>)
 8005734:	fba3 1302 	umull	r1, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	2164      	movs	r1, #100	; 0x64
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	3332      	adds	r3, #50	; 0x32
 8005746:	4a08      	ldr	r2, [pc, #32]	; (8005768 <UART_SetConfig+0x2d4>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	f003 0207 	and.w	r2, r3, #7
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4422      	add	r2, r4
 800575a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800575c:	e105      	b.n	800596a <UART_SetConfig+0x4d6>
 800575e:	bf00      	nop
 8005760:	40011000 	.word	0x40011000
 8005764:	40011400 	.word	0x40011400
 8005768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800576c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005770:	2200      	movs	r2, #0
 8005772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800577a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800577e:	4642      	mov	r2, r8
 8005780:	464b      	mov	r3, r9
 8005782:	1891      	adds	r1, r2, r2
 8005784:	6239      	str	r1, [r7, #32]
 8005786:	415b      	adcs	r3, r3
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
 800578a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800578e:	4641      	mov	r1, r8
 8005790:	1854      	adds	r4, r2, r1
 8005792:	4649      	mov	r1, r9
 8005794:	eb43 0501 	adc.w	r5, r3, r1
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	00eb      	lsls	r3, r5, #3
 80057a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057a6:	00e2      	lsls	r2, r4, #3
 80057a8:	4614      	mov	r4, r2
 80057aa:	461d      	mov	r5, r3
 80057ac:	4643      	mov	r3, r8
 80057ae:	18e3      	adds	r3, r4, r3
 80057b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057b4:	464b      	mov	r3, r9
 80057b6:	eb45 0303 	adc.w	r3, r5, r3
 80057ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057da:	4629      	mov	r1, r5
 80057dc:	008b      	lsls	r3, r1, #2
 80057de:	4621      	mov	r1, r4
 80057e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e4:	4621      	mov	r1, r4
 80057e6:	008a      	lsls	r2, r1, #2
 80057e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057ec:	f7fa fcfc 	bl	80001e8 <__aeabi_uldivmod>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4b60      	ldr	r3, [pc, #384]	; (8005978 <UART_SetConfig+0x4e4>)
 80057f6:	fba3 2302 	umull	r2, r3, r3, r2
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	011c      	lsls	r4, r3, #4
 80057fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005802:	2200      	movs	r2, #0
 8005804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800580c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	1891      	adds	r1, r2, r2
 8005816:	61b9      	str	r1, [r7, #24]
 8005818:	415b      	adcs	r3, r3
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005820:	4641      	mov	r1, r8
 8005822:	1851      	adds	r1, r2, r1
 8005824:	6139      	str	r1, [r7, #16]
 8005826:	4649      	mov	r1, r9
 8005828:	414b      	adcs	r3, r1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005838:	4659      	mov	r1, fp
 800583a:	00cb      	lsls	r3, r1, #3
 800583c:	4651      	mov	r1, sl
 800583e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005842:	4651      	mov	r1, sl
 8005844:	00ca      	lsls	r2, r1, #3
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	4603      	mov	r3, r0
 800584c:	4642      	mov	r2, r8
 800584e:	189b      	adds	r3, r3, r2
 8005850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005854:	464b      	mov	r3, r9
 8005856:	460a      	mov	r2, r1
 8005858:	eb42 0303 	adc.w	r3, r2, r3
 800585c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	67bb      	str	r3, [r7, #120]	; 0x78
 800586a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005878:	4649      	mov	r1, r9
 800587a:	008b      	lsls	r3, r1, #2
 800587c:	4641      	mov	r1, r8
 800587e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005882:	4641      	mov	r1, r8
 8005884:	008a      	lsls	r2, r1, #2
 8005886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800588a:	f7fa fcad 	bl	80001e8 <__aeabi_uldivmod>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4b39      	ldr	r3, [pc, #228]	; (8005978 <UART_SetConfig+0x4e4>)
 8005894:	fba3 1302 	umull	r1, r3, r3, r2
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	2164      	movs	r1, #100	; 0x64
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	3332      	adds	r3, #50	; 0x32
 80058a6:	4a34      	ldr	r2, [pc, #208]	; (8005978 <UART_SetConfig+0x4e4>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b2:	441c      	add	r4, r3
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	673b      	str	r3, [r7, #112]	; 0x70
 80058bc:	677a      	str	r2, [r7, #116]	; 0x74
 80058be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058c2:	4642      	mov	r2, r8
 80058c4:	464b      	mov	r3, r9
 80058c6:	1891      	adds	r1, r2, r2
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	415b      	adcs	r3, r3
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058d2:	4641      	mov	r1, r8
 80058d4:	1851      	adds	r1, r2, r1
 80058d6:	6039      	str	r1, [r7, #0]
 80058d8:	4649      	mov	r1, r9
 80058da:	414b      	adcs	r3, r1
 80058dc:	607b      	str	r3, [r7, #4]
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058ea:	4659      	mov	r1, fp
 80058ec:	00cb      	lsls	r3, r1, #3
 80058ee:	4651      	mov	r1, sl
 80058f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058f4:	4651      	mov	r1, sl
 80058f6:	00ca      	lsls	r2, r1, #3
 80058f8:	4610      	mov	r0, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	4603      	mov	r3, r0
 80058fe:	4642      	mov	r2, r8
 8005900:	189b      	adds	r3, r3, r2
 8005902:	66bb      	str	r3, [r7, #104]	; 0x68
 8005904:	464b      	mov	r3, r9
 8005906:	460a      	mov	r2, r1
 8005908:	eb42 0303 	adc.w	r3, r2, r3
 800590c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	663b      	str	r3, [r7, #96]	; 0x60
 8005918:	667a      	str	r2, [r7, #100]	; 0x64
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005926:	4649      	mov	r1, r9
 8005928:	008b      	lsls	r3, r1, #2
 800592a:	4641      	mov	r1, r8
 800592c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005930:	4641      	mov	r1, r8
 8005932:	008a      	lsls	r2, r1, #2
 8005934:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005938:	f7fa fc56 	bl	80001e8 <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <UART_SetConfig+0x4e4>)
 8005942:	fba3 1302 	umull	r1, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2164      	movs	r1, #100	; 0x64
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	3332      	adds	r3, #50	; 0x32
 8005954:	4a08      	ldr	r2, [pc, #32]	; (8005978 <UART_SetConfig+0x4e4>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4422      	add	r2, r4
 8005968:	609a      	str	r2, [r3, #8]
}
 800596a:	bf00      	nop
 800596c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005970:	46bd      	mov	sp, r7
 8005972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005976:	bf00      	nop
 8005978:	51eb851f 	.word	0x51eb851f

0800597c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800597c:	b084      	sub	sp, #16
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	f107 001c 	add.w	r0, r7, #28
 800598a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	2b01      	cmp	r3, #1
 8005992:	d122      	bne.n	80059da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d105      	bne.n	80059ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fbee 	bl	80071b0 <USB_CoreReset>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e01a      	b.n	8005a10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 fbe2 	bl	80071b0 <USB_CoreReset>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
 8005a02:	e005      	b.n	8005a10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d10b      	bne.n	8005a2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f043 0206 	orr.w	r2, r3, #6
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a3a:	b004      	add	sp, #16
 8005a3c:	4770      	bx	lr
	...

08005a40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d165      	bne.n	8005b20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4a41      	ldr	r2, [pc, #260]	; (8005b5c <USB_SetTurnaroundTime+0x11c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d906      	bls.n	8005a6a <USB_SetTurnaroundTime+0x2a>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4a40      	ldr	r2, [pc, #256]	; (8005b60 <USB_SetTurnaroundTime+0x120>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d202      	bcs.n	8005a6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a64:	230f      	movs	r3, #15
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	e062      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4a3c      	ldr	r2, [pc, #240]	; (8005b60 <USB_SetTurnaroundTime+0x120>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d306      	bcc.n	8005a80 <USB_SetTurnaroundTime+0x40>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4a3b      	ldr	r2, [pc, #236]	; (8005b64 <USB_SetTurnaroundTime+0x124>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d202      	bcs.n	8005a80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a7a:	230e      	movs	r3, #14
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	e057      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4a38      	ldr	r2, [pc, #224]	; (8005b64 <USB_SetTurnaroundTime+0x124>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d306      	bcc.n	8005a96 <USB_SetTurnaroundTime+0x56>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4a37      	ldr	r2, [pc, #220]	; (8005b68 <USB_SetTurnaroundTime+0x128>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d202      	bcs.n	8005a96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a90:	230d      	movs	r3, #13
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e04c      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4a33      	ldr	r2, [pc, #204]	; (8005b68 <USB_SetTurnaroundTime+0x128>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d306      	bcc.n	8005aac <USB_SetTurnaroundTime+0x6c>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4a32      	ldr	r2, [pc, #200]	; (8005b6c <USB_SetTurnaroundTime+0x12c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d802      	bhi.n	8005aac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e041      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4a2f      	ldr	r2, [pc, #188]	; (8005b6c <USB_SetTurnaroundTime+0x12c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d906      	bls.n	8005ac2 <USB_SetTurnaroundTime+0x82>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4a2e      	ldr	r2, [pc, #184]	; (8005b70 <USB_SetTurnaroundTime+0x130>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d802      	bhi.n	8005ac2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005abc:	230b      	movs	r3, #11
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e036      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4a2a      	ldr	r2, [pc, #168]	; (8005b70 <USB_SetTurnaroundTime+0x130>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d906      	bls.n	8005ad8 <USB_SetTurnaroundTime+0x98>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <USB_SetTurnaroundTime+0x134>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d802      	bhi.n	8005ad8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ad2:	230a      	movs	r3, #10
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e02b      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <USB_SetTurnaroundTime+0x134>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d906      	bls.n	8005aee <USB_SetTurnaroundTime+0xae>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4a25      	ldr	r2, [pc, #148]	; (8005b78 <USB_SetTurnaroundTime+0x138>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d202      	bcs.n	8005aee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ae8:	2309      	movs	r3, #9
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e020      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4a21      	ldr	r2, [pc, #132]	; (8005b78 <USB_SetTurnaroundTime+0x138>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d306      	bcc.n	8005b04 <USB_SetTurnaroundTime+0xc4>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4a20      	ldr	r2, [pc, #128]	; (8005b7c <USB_SetTurnaroundTime+0x13c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d802      	bhi.n	8005b04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005afe:	2308      	movs	r3, #8
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e015      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <USB_SetTurnaroundTime+0x13c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d906      	bls.n	8005b1a <USB_SetTurnaroundTime+0xda>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <USB_SetTurnaroundTime+0x140>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d202      	bcs.n	8005b1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b14:	2307      	movs	r3, #7
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e00a      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b1a:	2306      	movs	r3, #6
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	e007      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b26:	2309      	movs	r3, #9
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e001      	b.n	8005b30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b2c:	2309      	movs	r3, #9
 8005b2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	029b      	lsls	r3, r3, #10
 8005b44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	00d8acbf 	.word	0x00d8acbf
 8005b60:	00e4e1c0 	.word	0x00e4e1c0
 8005b64:	00f42400 	.word	0x00f42400
 8005b68:	01067380 	.word	0x01067380
 8005b6c:	011a499f 	.word	0x011a499f
 8005b70:	01312cff 	.word	0x01312cff
 8005b74:	014ca43f 	.word	0x014ca43f
 8005b78:	016e3600 	.word	0x016e3600
 8005b7c:	01a6ab1f 	.word	0x01a6ab1f
 8005b80:	01e84800 	.word	0x01e84800

08005b84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d115      	bne.n	8005c16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f7fb fa9c 	bl	8001134 <HAL_Delay>
      ms++;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 fa45 	bl	8007092 <USB_GetMode>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d01e      	beq.n	8005c4c <USB_SetCurrentMode+0x84>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b31      	cmp	r3, #49	; 0x31
 8005c12:	d9f0      	bls.n	8005bf6 <USB_SetCurrentMode+0x2e>
 8005c14:	e01a      	b.n	8005c4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d115      	bne.n	8005c48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c28:	2001      	movs	r0, #1
 8005c2a:	f7fb fa83 	bl	8001134 <HAL_Delay>
      ms++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fa2c 	bl	8007092 <USB_GetMode>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <USB_SetCurrentMode+0x84>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b31      	cmp	r3, #49	; 0x31
 8005c44:	d9f0      	bls.n	8005c28 <USB_SetCurrentMode+0x60>
 8005c46:	e001      	b.n	8005c4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e005      	b.n	8005c58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b32      	cmp	r3, #50	; 0x32
 8005c50:	d101      	bne.n	8005c56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c60:	b084      	sub	sp, #16
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e009      	b.n	8005c94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	3340      	adds	r3, #64	; 0x40
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	3301      	adds	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b0e      	cmp	r3, #14
 8005c98:	d9f2      	bls.n	8005c80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d11c      	bne.n	8005cda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cae:	f043 0302 	orr.w	r3, r3, #2
 8005cb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8005cd8:	e00b      	b.n	8005cf2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d04:	4619      	mov	r1, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	680b      	ldr	r3, [r1, #0]
 8005d10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d10c      	bne.n	8005d32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d1e:	2100      	movs	r1, #0
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f965 	bl	8005ff0 <USB_SetDevSpeed>
 8005d26:	e008      	b.n	8005d3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d28:	2101      	movs	r1, #1
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f960 	bl	8005ff0 <USB_SetDevSpeed>
 8005d30:	e003      	b.n	8005d3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d32:	2103      	movs	r1, #3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f95b 	bl	8005ff0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d3a:	2110      	movs	r1, #16
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f8f3 	bl	8005f28 <USB_FlushTxFifo>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f91f 	bl	8005f90 <USB_FlushRxFifo>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	461a      	mov	r2, r3
 8005d64:	2300      	movs	r3, #0
 8005d66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2300      	movs	r3, #0
 8005d72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	e043      	b.n	8005e0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d9c:	d118      	bne.n	8005dd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	461a      	mov	r2, r3
 8005db2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	e013      	b.n	8005de2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e008      	b.n	8005de2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	461a      	mov	r2, r3
 8005dde:	2300      	movs	r3, #0
 8005de0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	461a      	mov	r2, r3
 8005df0:	2300      	movs	r3, #0
 8005df2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	461a      	mov	r2, r3
 8005e02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d3b7      	bcc.n	8005d86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e16:	2300      	movs	r3, #0
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	e043      	b.n	8005ea4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e32:	d118      	bne.n	8005e66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e013      	b.n	8005e78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	e008      	b.n	8005e78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	461a      	mov	r2, r3
 8005e74:	2300      	movs	r3, #0
 8005e76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	461a      	mov	r2, r3
 8005e98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d3b7      	bcc.n	8005e1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ebe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ecc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f043 0210 	orr.w	r2, r3, #16
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699a      	ldr	r2, [r3, #24]
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <USB_DevInit+0x2c4>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f043 0208 	orr.w	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f0c:	f043 0304 	orr.w	r3, r3, #4
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f20:	b004      	add	sp, #16
 8005f22:	4770      	bx	lr
 8005f24:	803c3800 	.word	0x803c3800

08005f28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <USB_FlushTxFifo+0x64>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d901      	bls.n	8005f48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e01b      	b.n	8005f80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	daf2      	bge.n	8005f36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	019b      	lsls	r3, r3, #6
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <USB_FlushTxFifo+0x64>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e006      	b.n	8005f80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d0f0      	beq.n	8005f60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	00030d40 	.word	0x00030d40

08005f90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a11      	ldr	r2, [pc, #68]	; (8005fec <USB_FlushRxFifo+0x5c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e018      	b.n	8005fe0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	daf2      	bge.n	8005f9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2210      	movs	r2, #16
 8005fbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a08      	ldr	r2, [pc, #32]	; (8005fec <USB_FlushRxFifo+0x5c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e006      	b.n	8005fe0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d0f0      	beq.n	8005fc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	00030d40 	.word	0x00030d40

08005ff0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006010:	4313      	orrs	r3, r2
 8006012:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006022:	b480      	push	{r7}
 8006024:	b087      	sub	sp, #28
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0306 	and.w	r3, r3, #6
 800603a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]
 8006046:	e00a      	b.n	800605e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d002      	beq.n	8006054 <USB_GetDevSpeed+0x32>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b06      	cmp	r3, #6
 8006052:	d102      	bne.n	800605a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006054:	2302      	movs	r3, #2
 8006056:	75fb      	strb	r3, [r7, #23]
 8006058:	e001      	b.n	800605e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800605a:	230f      	movs	r3, #15
 800605c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d13a      	bne.n	80060fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	2101      	movs	r1, #1
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	b29b      	uxth	r3, r3
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a6:	4313      	orrs	r3, r2
 80060a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d155      	bne.n	800616c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	791b      	ldrb	r3, [r3, #4]
 80060da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	059b      	lsls	r3, r3, #22
 80060e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060e4:	4313      	orrs	r3, r2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	e036      	b.n	800616c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	2101      	movs	r1, #1
 8006110:	fa01 f303 	lsl.w	r3, r1, r3
 8006114:	041b      	lsls	r3, r3, #16
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800611c:	4313      	orrs	r3, r2
 800611e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d11a      	bne.n	800616c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	791b      	ldrb	r3, [r3, #4]
 8006150:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006152:	430b      	orrs	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d161      	bne.n	800625c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ae:	d11f      	bne.n	80061f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	2101      	movs	r1, #1
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	b29b      	uxth	r3, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006210:	4013      	ands	r3, r2
 8006212:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	2101      	movs	r1, #1
 8006226:	fa01 f303 	lsl.w	r3, r1, r3
 800622a:	b29b      	uxth	r3, r3
 800622c:	43db      	mvns	r3, r3
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006234:	4013      	ands	r3, r2
 8006236:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	0159      	lsls	r1, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	440b      	add	r3, r1
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	4619      	mov	r1, r3
 8006254:	4b35      	ldr	r3, [pc, #212]	; (800632c <USB_DeactivateEndpoint+0x1b0>)
 8006256:	4013      	ands	r3, r2
 8006258:	600b      	str	r3, [r1, #0]
 800625a:	e060      	b.n	800631e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800626e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006272:	d11f      	bne.n	80062b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006292:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	43db      	mvns	r3, r3
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d4:	4013      	ands	r3, r2
 80062d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	2101      	movs	r1, #1
 80062ea:	fa01 f303 	lsl.w	r3, r1, r3
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	43db      	mvns	r3, r3
 80062f2:	68f9      	ldr	r1, [r7, #12]
 80062f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062f8:	4013      	ands	r3, r2
 80062fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	0159      	lsls	r1, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	440b      	add	r3, r1
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	4619      	mov	r1, r3
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <USB_DeactivateEndpoint+0x1b4>)
 800631a:	4013      	ands	r3, r2
 800631c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	ec337800 	.word	0xec337800
 8006330:	eff37800 	.word	0xeff37800

08006334 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08a      	sub	sp, #40	; 0x28
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b01      	cmp	r3, #1
 8006352:	f040 815c 	bne.w	800660e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d132      	bne.n	80063c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006378:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800637c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063bc:	0cdb      	lsrs	r3, r3, #19
 80063be:	04db      	lsls	r3, r3, #19
 80063c0:	6113      	str	r3, [r2, #16]
 80063c2:	e074      	b.n	80064ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063de:	0cdb      	lsrs	r3, r3, #19
 80063e0:	04db      	lsls	r3, r3, #19
 80063e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006402:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006406:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006414:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6999      	ldr	r1, [r3, #24]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	440b      	add	r3, r1
 8006420:	1e59      	subs	r1, r3, #1
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	fbb1 f3f3 	udiv	r3, r1, r3
 800642a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800642c:	4b9d      	ldr	r3, [pc, #628]	; (80066a4 <USB_EPStartXfer+0x370>)
 800642e:	400b      	ands	r3, r1
 8006430:	69b9      	ldr	r1, [r7, #24]
 8006432:	0148      	lsls	r0, r1, #5
 8006434:	69f9      	ldr	r1, [r7, #28]
 8006436:	4401      	add	r1, r0
 8006438:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800643c:	4313      	orrs	r3, r2
 800643e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006456:	69b9      	ldr	r1, [r7, #24]
 8006458:	0148      	lsls	r0, r1, #5
 800645a:	69f9      	ldr	r1, [r7, #28]
 800645c:	4401      	add	r1, r0
 800645e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006462:	4313      	orrs	r3, r2
 8006464:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	791b      	ldrb	r3, [r3, #4]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d11f      	bne.n	80064ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006488:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800648c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d14b      	bne.n	800654c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c8:	461a      	mov	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	791b      	ldrb	r3, [r3, #4]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d128      	bne.n	800652a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d110      	bne.n	800650a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e00f      	b.n	800652a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006528:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	0151      	lsls	r1, r2, #5
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	440a      	add	r2, r1
 8006540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006544:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e133      	b.n	80067b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800656a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	791b      	ldrb	r3, [r3, #4]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d015      	beq.n	80065a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 811b 	beq.w	80067b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	2101      	movs	r1, #1
 8006590:	fa01 f303 	lsl.w	r3, r1, r3
 8006594:	69f9      	ldr	r1, [r7, #28]
 8006596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800659a:	4313      	orrs	r3, r2
 800659c:	634b      	str	r3, [r1, #52]	; 0x34
 800659e:	e109      	b.n	80067b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d110      	bne.n	80065d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	e00f      	b.n	80065f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6919      	ldr	r1, [r3, #16]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	781a      	ldrb	r2, [r3, #0]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	b298      	uxth	r0, r3
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4603      	mov	r3, r0
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 fade 	bl	8006bc8 <USB_WritePacket>
 800660c:	e0d2      	b.n	80067b4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006628:	0cdb      	lsrs	r3, r3, #19
 800662a:	04db      	lsls	r3, r3, #19
 800662c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	440a      	add	r2, r1
 8006644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006648:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800664c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006650:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d126      	bne.n	80066a8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006670:	69b9      	ldr	r1, [r7, #24]
 8006672:	0148      	lsls	r0, r1, #5
 8006674:	69f9      	ldr	r1, [r7, #28]
 8006676:	4401      	add	r1, r0
 8006678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800667c:	4313      	orrs	r3, r2
 800667e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800669e:	6113      	str	r3, [r2, #16]
 80066a0:	e03a      	b.n	8006718 <USB_EPStartXfer+0x3e4>
 80066a2:	bf00      	nop
 80066a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	699a      	ldr	r2, [r3, #24]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	1e5a      	subs	r2, r3, #1
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066bc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	8afa      	ldrh	r2, [r7, #22]
 80066c4:	fb03 f202 	mul.w	r2, r3, r2
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	8afb      	ldrh	r3, [r7, #22]
 80066dc:	04d9      	lsls	r1, r3, #19
 80066de:	4b38      	ldr	r3, [pc, #224]	; (80067c0 <USB_EPStartXfer+0x48c>)
 80066e0:	400b      	ands	r3, r1
 80066e2:	69b9      	ldr	r1, [r7, #24]
 80066e4:	0148      	lsls	r0, r1, #5
 80066e6:	69f9      	ldr	r1, [r7, #28]
 80066e8:	4401      	add	r1, r0
 80066ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066ee:	4313      	orrs	r3, r2
 80066f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006708:	69b9      	ldr	r1, [r7, #24]
 800670a:	0148      	lsls	r0, r1, #5
 800670c:	69f9      	ldr	r1, [r7, #28]
 800670e:	4401      	add	r1, r0
 8006710:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006714:	4313      	orrs	r3, r2
 8006716:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d10d      	bne.n	800673a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6919      	ldr	r1, [r3, #16]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	460a      	mov	r2, r1
 8006738:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	791b      	ldrb	r3, [r3, #4]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d128      	bne.n	8006794 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d110      	bne.n	8006774 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	440a      	add	r2, r1
 8006768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e00f      	b.n	8006794 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	440a      	add	r2, r1
 800678a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006792:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	1ff80000 	.word	0x1ff80000

080067c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	f040 80ce 	bne.w	8006982 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d132      	bne.n	8006854 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800680c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684c:	0cdb      	lsrs	r3, r3, #19
 800684e:	04db      	lsls	r3, r3, #19
 8006850:	6113      	str	r3, [r2, #16]
 8006852:	e04e      	b.n	80068f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	0cdb      	lsrs	r3, r3, #19
 8006870:	04db      	lsls	r3, r3, #19
 8006872:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006892:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006896:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d903      	bls.n	80068ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e2:	6939      	ldr	r1, [r7, #16]
 80068e4:	0148      	lsls	r0, r1, #5
 80068e6:	6979      	ldr	r1, [r7, #20]
 80068e8:	4401      	add	r1, r0
 80068ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068ee:	4313      	orrs	r3, r2
 80068f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d11e      	bne.n	8006936 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	461a      	mov	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e097      	b.n	8006a66 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006950:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006954:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8083 	beq.w	8006a66 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f303 	lsl.w	r3, r1, r3
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800697c:	4313      	orrs	r3, r2
 800697e:	634b      	str	r3, [r1, #52]	; 0x34
 8006980:	e071      	b.n	8006a66 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	440a      	add	r2, r1
 8006998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699c:	0cdb      	lsrs	r3, r3, #19
 800699e:	04db      	lsls	r3, r3, #19
 80069a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a14:	6939      	ldr	r1, [r7, #16]
 8006a16:	0148      	lsls	r0, r1, #5
 8006a18:	6979      	ldr	r1, [r7, #20]
 8006a1a:	4401      	add	r1, r0
 8006a1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a20:	4313      	orrs	r3, r2
 8006a22:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d10d      	bne.n	8006a46 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d009      	beq.n	8006a46 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6919      	ldr	r1, [r3, #16]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	460a      	mov	r2, r1
 8006a44:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d14a      	bne.n	8006b28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aaa:	f040 8086 	bne.w	8006bba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	7812      	ldrb	r2, [r2, #0]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006acc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ad0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	7812      	ldrb	r2, [r2, #0]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006af4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3301      	adds	r3, #1
 8006afa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d902      	bls.n	8006b0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
          break;
 8006b0a:	e056      	b.n	8006bba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b24:	d0e7      	beq.n	8006af6 <USB_EPStopXfer+0x82>
 8006b26:	e048      	b.n	8006bba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b40:	d13b      	bne.n	8006bba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	7812      	ldrb	r2, [r2, #0]
 8006b56:	0151      	lsls	r1, r2, #5
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	7812      	ldrb	r2, [r2, #0]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d902      	bls.n	8006ba0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b9e:	e00c      	b.n	8006bba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bb8:	d0e7      	beq.n	8006b8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	371c      	adds	r7, #28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	; 0x24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	71fb      	strb	r3, [r7, #7]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006be6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d123      	bne.n	8006c36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bee:	88bb      	ldrh	r3, [r7, #4]
 8006bf0:	3303      	adds	r3, #3
 8006bf2:	089b      	lsrs	r3, r3, #2
 8006bf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e018      	b.n	8006c2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	031a      	lsls	r2, r3, #12
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c08:	461a      	mov	r2, r3
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	3301      	adds	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3301      	adds	r3, #1
 8006c26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d3e2      	bcc.n	8006bfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3724      	adds	r7, #36	; 0x24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b08b      	sub	sp, #44	; 0x2c
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	089b      	lsrs	r3, r3, #2
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	623b      	str	r3, [r7, #32]
 8006c6e:	e014      	b.n	8006c9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	3301      	adds	r3, #1
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	3301      	adds	r3, #1
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	3301      	adds	r3, #1
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	3301      	adds	r3, #1
 8006c98:	623b      	str	r3, [r7, #32]
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d3e6      	bcc.n	8006c70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ca2:	8bfb      	ldrh	r3, [r7, #30]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01e      	beq.n	8006ce6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f107 0310 	add.w	r3, r7, #16
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	701a      	strb	r2, [r3, #0]
      i++;
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006cda:	8bfb      	ldrh	r3, [r7, #30]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ce0:	8bfb      	ldrh	r3, [r7, #30]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ea      	bne.n	8006cbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	372c      	adds	r7, #44	; 0x2c
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d12c      	bne.n	8006d6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	db12      	blt.n	8006d48 <USB_EPSetStall+0x54>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00f      	beq.n	8006d48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	e02b      	b.n	8006dc2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	db12      	blt.n	8006da2 <USB_EPSetStall+0xae>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00f      	beq.n	8006da2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	0151      	lsls	r1, r2, #5
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	440a      	add	r2, r1
 8006d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006da0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d128      	bne.n	8006e3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	791b      	ldrb	r3, [r3, #4]
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d003      	beq.n	8006e1c <USB_EPClearStall+0x4c>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	791b      	ldrb	r3, [r3, #4]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d138      	bne.n	8006e8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	e027      	b.n	8006e8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	791b      	ldrb	r3, [r3, #4]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d003      	beq.n	8006e6e <USB_EPClearStall+0x9e>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	791b      	ldrb	r3, [r3, #4]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d10f      	bne.n	8006e8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ebe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ed0:	68f9      	ldr	r1, [r7, #12]
 8006ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f16:	f023 0302 	bic.w	r3, r3, #2
 8006f1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f44:	f023 0303 	bic.w	r3, r3, #3
 8006f48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f58:	f043 0302 	orr.w	r3, r3, #2
 8006f5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4013      	ands	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f84:	68fb      	ldr	r3, [r7, #12]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b085      	sub	sp, #20
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	0c1b      	lsrs	r3, r3, #16
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	b29b      	uxth	r3, r3
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	4013      	ands	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007028:	68bb      	ldr	r3, [r7, #8]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007036:	b480      	push	{r7}
 8007038:	b087      	sub	sp, #28
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007058:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	fa22 f303 	lsr.w	r3, r2, r3
 8007066:	01db      	lsls	r3, r3, #7
 8007068:	b2db      	uxtb	r3, r3
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4313      	orrs	r3, r2
 800706e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4013      	ands	r3, r2
 8007082:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007084:	68bb      	ldr	r3, [r7, #8]
}
 8007086:	4618      	mov	r0, r3
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f003 0301 	and.w	r3, r3, #1
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80070cc:	f023 0307 	bic.w	r3, r3, #7
 80070d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	460b      	mov	r3, r1
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	333c      	adds	r3, #60	; 0x3c
 800710a:	3304      	adds	r3, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4a26      	ldr	r2, [pc, #152]	; (80071ac <USB_EP0_OutStart+0xb8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d90a      	bls.n	800712e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007128:	d101      	bne.n	800712e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e037      	b.n	800719e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007134:	461a      	mov	r2, r3
 8007136:	2300      	movs	r3, #0
 8007138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800714c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715c:	f043 0318 	orr.w	r3, r3, #24
 8007160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007170:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007174:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007176:	7afb      	ldrb	r3, [r7, #11]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d10f      	bne.n	800719c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007196:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800719a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	4f54300a 	.word	0x4f54300a

080071b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4a13      	ldr	r2, [pc, #76]	; (8007214 <USB_CoreReset+0x64>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d901      	bls.n	80071ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e01b      	b.n	8007206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	daf2      	bge.n	80071bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f043 0201 	orr.w	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a09      	ldr	r2, [pc, #36]	; (8007214 <USB_CoreReset+0x64>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d901      	bls.n	80071f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e006      	b.n	8007206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b01      	cmp	r3, #1
 8007202:	d0f0      	beq.n	80071e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	00030d40 	.word	0x00030d40

08007218 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007224:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007228:	f002 fc8a 	bl	8009b40 <USBD_static_malloc>
 800722c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	32b0      	adds	r2, #176	; 0xb0
 800723e:	2100      	movs	r1, #0
 8007240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007244:	2302      	movs	r3, #2
 8007246:	e0d4      	b.n	80073f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007248:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800724c:	2100      	movs	r1, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f002 fcec 	bl	8009c2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	32b0      	adds	r2, #176	; 0xb0
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	32b0      	adds	r2, #176	; 0xb0
 800726e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7c1b      	ldrb	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d138      	bne.n	80072f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007280:	4b5e      	ldr	r3, [pc, #376]	; (80073fc <USBD_CDC_Init+0x1e4>)
 8007282:	7819      	ldrb	r1, [r3, #0]
 8007284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007288:	2202      	movs	r2, #2
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f002 fb35 	bl	80098fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007290:	4b5a      	ldr	r3, [pc, #360]	; (80073fc <USBD_CDC_Init+0x1e4>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f003 020f 	and.w	r2, r3, #15
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	3324      	adds	r3, #36	; 0x24
 80072a6:	2201      	movs	r2, #1
 80072a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072aa:	4b55      	ldr	r3, [pc, #340]	; (8007400 <USBD_CDC_Init+0x1e8>)
 80072ac:	7819      	ldrb	r1, [r3, #0]
 80072ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072b2:	2202      	movs	r2, #2
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f002 fb20 	bl	80098fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072ba:	4b51      	ldr	r3, [pc, #324]	; (8007400 <USBD_CDC_Init+0x1e8>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	f003 020f 	and.w	r2, r3, #15
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072d2:	2201      	movs	r2, #1
 80072d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072d6:	4b4b      	ldr	r3, [pc, #300]	; (8007404 <USBD_CDC_Init+0x1ec>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	f003 020f 	and.w	r2, r3, #15
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	3326      	adds	r3, #38	; 0x26
 80072ec:	2210      	movs	r2, #16
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e035      	b.n	800735e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072f2:	4b42      	ldr	r3, [pc, #264]	; (80073fc <USBD_CDC_Init+0x1e4>)
 80072f4:	7819      	ldrb	r1, [r3, #0]
 80072f6:	2340      	movs	r3, #64	; 0x40
 80072f8:	2202      	movs	r2, #2
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f002 fafd 	bl	80098fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007300:	4b3e      	ldr	r3, [pc, #248]	; (80073fc <USBD_CDC_Init+0x1e4>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 020f 	and.w	r2, r3, #15
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	3324      	adds	r3, #36	; 0x24
 8007316:	2201      	movs	r2, #1
 8007318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800731a:	4b39      	ldr	r3, [pc, #228]	; (8007400 <USBD_CDC_Init+0x1e8>)
 800731c:	7819      	ldrb	r1, [r3, #0]
 800731e:	2340      	movs	r3, #64	; 0x40
 8007320:	2202      	movs	r2, #2
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f002 fae9 	bl	80098fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007328:	4b35      	ldr	r3, [pc, #212]	; (8007400 <USBD_CDC_Init+0x1e8>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f003 020f 	and.w	r2, r3, #15
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007340:	2201      	movs	r2, #1
 8007342:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007344:	4b2f      	ldr	r3, [pc, #188]	; (8007404 <USBD_CDC_Init+0x1ec>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 020f 	and.w	r2, r3, #15
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	3326      	adds	r3, #38	; 0x26
 800735a:	2210      	movs	r2, #16
 800735c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800735e:	4b29      	ldr	r3, [pc, #164]	; (8007404 <USBD_CDC_Init+0x1ec>)
 8007360:	7819      	ldrb	r1, [r3, #0]
 8007362:	2308      	movs	r3, #8
 8007364:	2203      	movs	r2, #3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f002 fac7 	bl	80098fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800736c:	4b25      	ldr	r3, [pc, #148]	; (8007404 <USBD_CDC_Init+0x1ec>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 020f 	and.w	r2, r3, #15
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	440b      	add	r3, r1
 8007380:	3324      	adds	r3, #36	; 0x24
 8007382:	2201      	movs	r2, #1
 8007384:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	33b0      	adds	r3, #176	; 0xb0
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80073bc:	2302      	movs	r3, #2
 80073be:	e018      	b.n	80073f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	7c1b      	ldrb	r3, [r3, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073c8:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <USBD_CDC_Init+0x1e8>)
 80073ca:	7819      	ldrb	r1, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f002 fb7e 	bl	8009ad8 <USBD_LL_PrepareReceive>
 80073dc:	e008      	b.n	80073f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073de:	4b08      	ldr	r3, [pc, #32]	; (8007400 <USBD_CDC_Init+0x1e8>)
 80073e0:	7819      	ldrb	r1, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073e8:	2340      	movs	r3, #64	; 0x40
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f002 fb74 	bl	8009ad8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000093 	.word	0x20000093
 8007400:	20000094 	.word	0x20000094
 8007404:	20000095 	.word	0x20000095

08007408 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007414:	4b3a      	ldr	r3, [pc, #232]	; (8007500 <USBD_CDC_DeInit+0xf8>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f002 fa93 	bl	8009946 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007420:	4b37      	ldr	r3, [pc, #220]	; (8007500 <USBD_CDC_DeInit+0xf8>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	f003 020f 	and.w	r2, r3, #15
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	3324      	adds	r3, #36	; 0x24
 8007436:	2200      	movs	r2, #0
 8007438:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800743a:	4b32      	ldr	r3, [pc, #200]	; (8007504 <USBD_CDC_DeInit+0xfc>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 fa80 	bl	8009946 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007446:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <USBD_CDC_DeInit+0xfc>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f003 020f 	and.w	r2, r3, #15
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800745e:	2200      	movs	r2, #0
 8007460:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007462:	4b29      	ldr	r3, [pc, #164]	; (8007508 <USBD_CDC_DeInit+0x100>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f002 fa6c 	bl	8009946 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800746e:	4b26      	ldr	r3, [pc, #152]	; (8007508 <USBD_CDC_DeInit+0x100>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	f003 020f 	and.w	r2, r3, #15
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	4613      	mov	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	3324      	adds	r3, #36	; 0x24
 8007484:	2200      	movs	r2, #0
 8007486:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007488:	4b1f      	ldr	r3, [pc, #124]	; (8007508 <USBD_CDC_DeInit+0x100>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	f003 020f 	and.w	r2, r3, #15
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	3326      	adds	r3, #38	; 0x26
 800749e:	2200      	movs	r2, #0
 80074a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	32b0      	adds	r2, #176	; 0xb0
 80074ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01f      	beq.n	80074f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	33b0      	adds	r3, #176	; 0xb0
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	32b0      	adds	r2, #176	; 0xb0
 80074d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f002 fb40 	bl	8009b5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	32b0      	adds	r2, #176	; 0xb0
 80074e6:	2100      	movs	r1, #0
 80074e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000093 	.word	0x20000093
 8007504:	20000094 	.word	0x20000094
 8007508:	20000095 	.word	0x20000095

0800750c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	32b0      	adds	r2, #176	; 0xb0
 8007520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007524:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	e0bf      	b.n	80076bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007544:	2b00      	cmp	r3, #0
 8007546:	d050      	beq.n	80075ea <USBD_CDC_Setup+0xde>
 8007548:	2b20      	cmp	r3, #32
 800754a:	f040 80af 	bne.w	80076ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	88db      	ldrh	r3, [r3, #6]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d03a      	beq.n	80075cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	b25b      	sxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	da1b      	bge.n	8007598 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	33b0      	adds	r3, #176	; 0xb0
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007576:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	88d2      	ldrh	r2, [r2, #6]
 800757c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	88db      	ldrh	r3, [r3, #6]
 8007582:	2b07      	cmp	r3, #7
 8007584:	bf28      	it	cs
 8007586:	2307      	movcs	r3, #7
 8007588:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	89fa      	ldrh	r2, [r7, #14]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fd89 	bl	80090a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007596:	e090      	b.n	80076ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	785a      	ldrb	r2, [r3, #1]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	88db      	ldrh	r3, [r3, #6]
 80075a6:	2b3f      	cmp	r3, #63	; 0x3f
 80075a8:	d803      	bhi.n	80075b2 <USBD_CDC_Setup+0xa6>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	e000      	b.n	80075b4 <USBD_CDC_Setup+0xa8>
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80075ba:	6939      	ldr	r1, [r7, #16]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80075c2:	461a      	mov	r2, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 fd9b 	bl	8009100 <USBD_CtlPrepareRx>
      break;
 80075ca:	e076      	b.n	80076ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	33b0      	adds	r3, #176	; 0xb0
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	7850      	ldrb	r0, [r2, #1]
 80075e2:	2200      	movs	r2, #0
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	4798      	blx	r3
      break;
 80075e8:	e067      	b.n	80076ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	2b0b      	cmp	r3, #11
 80075f0:	d851      	bhi.n	8007696 <USBD_CDC_Setup+0x18a>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <USBD_CDC_Setup+0xec>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007629 	.word	0x08007629
 80075fc:	080076a5 	.word	0x080076a5
 8007600:	08007697 	.word	0x08007697
 8007604:	08007697 	.word	0x08007697
 8007608:	08007697 	.word	0x08007697
 800760c:	08007697 	.word	0x08007697
 8007610:	08007697 	.word	0x08007697
 8007614:	08007697 	.word	0x08007697
 8007618:	08007697 	.word	0x08007697
 800761c:	08007697 	.word	0x08007697
 8007620:	08007653 	.word	0x08007653
 8007624:	0800767d 	.word	0x0800767d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b03      	cmp	r3, #3
 8007632:	d107      	bne.n	8007644 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007634:	f107 030a 	add.w	r3, r7, #10
 8007638:	2202      	movs	r2, #2
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fd33 	bl	80090a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007642:	e032      	b.n	80076aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 fcbd 	bl	8008fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800764c:	2303      	movs	r3, #3
 800764e:	75fb      	strb	r3, [r7, #23]
          break;
 8007650:	e02b      	b.n	80076aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b03      	cmp	r3, #3
 800765c:	d107      	bne.n	800766e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800765e:	f107 030d 	add.w	r3, r7, #13
 8007662:	2201      	movs	r2, #1
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 fd1e 	bl	80090a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800766c:	e01d      	b.n	80076aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fca8 	bl	8008fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007676:	2303      	movs	r3, #3
 8007678:	75fb      	strb	r3, [r7, #23]
          break;
 800767a:	e016      	b.n	80076aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b03      	cmp	r3, #3
 8007686:	d00f      	beq.n	80076a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fc9b 	bl	8008fc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007690:	2303      	movs	r3, #3
 8007692:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007694:	e008      	b.n	80076a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 fc94 	bl	8008fc6 <USBD_CtlError>
          ret = USBD_FAIL;
 800769e:	2303      	movs	r3, #3
 80076a0:	75fb      	strb	r3, [r7, #23]
          break;
 80076a2:	e002      	b.n	80076aa <USBD_CDC_Setup+0x19e>
          break;
 80076a4:	bf00      	nop
 80076a6:	e008      	b.n	80076ba <USBD_CDC_Setup+0x1ae>
          break;
 80076a8:	bf00      	nop
      }
      break;
 80076aa:	e006      	b.n	80076ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fc89 	bl	8008fc6 <USBD_CtlError>
      ret = USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	75fb      	strb	r3, [r7, #23]
      break;
 80076b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32b0      	adds	r2, #176	; 0xb0
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e065      	b.n	80077ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	32b0      	adds	r2, #176	; 0xb0
 80076f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076fe:	78fb      	ldrb	r3, [r7, #3]
 8007700:	f003 020f 	and.w	r2, r3, #15
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	3318      	adds	r3, #24
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02f      	beq.n	8007778 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	f003 020f 	and.w	r2, r3, #15
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	3318      	adds	r3, #24
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	f003 010f 	and.w	r1, r3, #15
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	460b      	mov	r3, r1
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	440b      	add	r3, r1
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4403      	add	r3, r0
 8007740:	3348      	adds	r3, #72	; 0x48
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	fbb2 f1f3 	udiv	r1, r2, r3
 8007748:	fb01 f303 	mul.w	r3, r1, r3
 800774c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800774e:	2b00      	cmp	r3, #0
 8007750:	d112      	bne.n	8007778 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	f003 020f 	and.w	r2, r3, #15
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	440b      	add	r3, r1
 8007764:	3318      	adds	r3, #24
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800776a:	78f9      	ldrb	r1, [r7, #3]
 800776c:	2300      	movs	r3, #0
 800776e:	2200      	movs	r2, #0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f002 f990 	bl	8009a96 <USBD_LL_Transmit>
 8007776:	e01f      	b.n	80077b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	33b0      	adds	r3, #176	; 0xb0
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d010      	beq.n	80077b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	33b0      	adds	r3, #176	; 0xb0
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	32b0      	adds	r2, #176	; 0xb0
 80077d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	32b0      	adds	r2, #176	; 0xb0
 80077e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e01a      	b.n	800782a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f002 f98e 	bl	8009b1a <USBD_LL_GetRxDataSize>
 80077fe:	4602      	mov	r2, r0
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	33b0      	adds	r3, #176	; 0xb0
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007824:	4611      	mov	r1, r2
 8007826:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	32b0      	adds	r2, #176	; 0xb0
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	e025      	b.n	80078a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	33b0      	adds	r3, #176	; 0xb0
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01a      	beq.n	800789e <USBD_CDC_EP0_RxReady+0x6c>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800786e:	2bff      	cmp	r3, #255	; 0xff
 8007870:	d015      	beq.n	800789e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	33b0      	adds	r3, #176	; 0xb0
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800788a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007892:	b292      	uxth	r2, r2
 8007894:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	22ff      	movs	r2, #255	; 0xff
 800789a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078b0:	2182      	movs	r1, #130	; 0x82
 80078b2:	4818      	ldr	r0, [pc, #96]	; (8007914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078b4:	f000 fd4f 	bl	8008356 <USBD_GetEpDesc>
 80078b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078ba:	2101      	movs	r1, #1
 80078bc:	4815      	ldr	r0, [pc, #84]	; (8007914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078be:	f000 fd4a 	bl	8008356 <USBD_GetEpDesc>
 80078c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078c4:	2181      	movs	r1, #129	; 0x81
 80078c6:	4813      	ldr	r0, [pc, #76]	; (8007914 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078c8:	f000 fd45 	bl	8008356 <USBD_GetEpDesc>
 80078cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2210      	movs	r2, #16
 80078d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d006      	beq.n	80078ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e8:	711a      	strb	r2, [r3, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078fc:	711a      	strb	r2, [r3, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2243      	movs	r2, #67	; 0x43
 8007906:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007908:	4b02      	ldr	r3, [pc, #8]	; (8007914 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20000050 	.word	0x20000050

08007918 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007920:	2182      	movs	r1, #130	; 0x82
 8007922:	4818      	ldr	r0, [pc, #96]	; (8007984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007924:	f000 fd17 	bl	8008356 <USBD_GetEpDesc>
 8007928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800792a:	2101      	movs	r1, #1
 800792c:	4815      	ldr	r0, [pc, #84]	; (8007984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800792e:	f000 fd12 	bl	8008356 <USBD_GetEpDesc>
 8007932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007934:	2181      	movs	r1, #129	; 0x81
 8007936:	4813      	ldr	r0, [pc, #76]	; (8007984 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007938:	f000 fd0d 	bl	8008356 <USBD_GetEpDesc>
 800793c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2210      	movs	r2, #16
 8007948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2200      	movs	r2, #0
 8007954:	711a      	strb	r2, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f042 0202 	orr.w	r2, r2, #2
 800795c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d006      	beq.n	8007972 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	711a      	strb	r2, [r3, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f042 0202 	orr.w	r2, r2, #2
 8007970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2243      	movs	r2, #67	; 0x43
 8007976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007978:	4b02      	ldr	r3, [pc, #8]	; (8007984 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800797a:	4618      	mov	r0, r3
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000050 	.word	0x20000050

08007988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007990:	2182      	movs	r1, #130	; 0x82
 8007992:	4818      	ldr	r0, [pc, #96]	; (80079f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007994:	f000 fcdf 	bl	8008356 <USBD_GetEpDesc>
 8007998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800799a:	2101      	movs	r1, #1
 800799c:	4815      	ldr	r0, [pc, #84]	; (80079f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800799e:	f000 fcda 	bl	8008356 <USBD_GetEpDesc>
 80079a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079a4:	2181      	movs	r1, #129	; 0x81
 80079a6:	4813      	ldr	r0, [pc, #76]	; (80079f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079a8:	f000 fcd5 	bl	8008356 <USBD_GetEpDesc>
 80079ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2210      	movs	r2, #16
 80079b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c8:	711a      	strb	r2, [r3, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079dc:	711a      	strb	r2, [r3, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2243      	movs	r2, #67	; 0x43
 80079e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079e8:	4b02      	ldr	r3, [pc, #8]	; (80079f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20000050 	.word	0x20000050

080079f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	220a      	movs	r2, #10
 8007a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a06:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	2000000c 	.word	0x2000000c

08007a18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e009      	b.n	8007a40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	33b0      	adds	r3, #176	; 0xb0
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	32b0      	adds	r2, #176	; 0xb0
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e008      	b.n	8007a84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32b0      	adds	r2, #176	; 0xb0
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e004      	b.n	8007abe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	32b0      	adds	r2, #176	; 0xb0
 8007ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32b0      	adds	r2, #176	; 0xb0
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e025      	b.n	8007b4a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11f      	bne.n	8007b48 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007b10:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <USBD_CDC_TransmitPacket+0x88>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f003 020f 	and.w	r2, r3, #15
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4403      	add	r3, r0
 8007b2a:	3318      	adds	r3, #24
 8007b2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007b2e:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <USBD_CDC_TransmitPacket+0x88>)
 8007b30:	7819      	ldrb	r1, [r3, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 ffa9 	bl	8009a96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000093 	.word	0x20000093

08007b58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32b0      	adds	r2, #176	; 0xb0
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	32b0      	adds	r2, #176	; 0xb0
 8007b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e018      	b.n	8007bb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7c1b      	ldrb	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <USBD_CDC_ReceivePacket+0x68>)
 8007b90:	7819      	ldrb	r1, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 ff9b 	bl	8009ad8 <USBD_LL_PrepareReceive>
 8007ba2:	e008      	b.n	8007bb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <USBD_CDC_ReceivePacket+0x68>)
 8007ba6:	7819      	ldrb	r1, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bae:	2340      	movs	r3, #64	; 0x40
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 ff91 	bl	8009ad8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20000094 	.word	0x20000094

08007bc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e01f      	b.n	8007c1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	79fa      	ldrb	r2, [r7, #7]
 8007c0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f001 fe0b 	bl	800982c <USBD_LL_Init>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e025      	b.n	8007c88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	32ae      	adds	r2, #174	; 0xae
 8007c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00f      	beq.n	8007c78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	32ae      	adds	r2, #174	; 0xae
 8007c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	f107 020e 	add.w	r2, r7, #14
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	4602      	mov	r2, r0
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fe13 	bl	80098c4 <USBD_LL_Start>
 8007c9e:	4603      	mov	r3, r0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	78fa      	ldrb	r2, [r7, #3]
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	4798      	blx	r3
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	4611      	mov	r1, r2
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 f908 	bl	8008f52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d50:	461a      	mov	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d5e:	f003 031f 	and.w	r3, r3, #31
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d01a      	beq.n	8007d9c <USBD_LL_SetupStage+0x72>
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d822      	bhi.n	8007db0 <USBD_LL_SetupStage+0x86>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <USBD_LL_SetupStage+0x4a>
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d00a      	beq.n	8007d88 <USBD_LL_SetupStage+0x5e>
 8007d72:	e01d      	b.n	8007db0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fb5f 	bl	8008440 <USBD_StdDevReq>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
      break;
 8007d86:	e020      	b.n	8007dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fbc7 	bl	8008524 <USBD_StdItfReq>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73fb      	strb	r3, [r7, #15]
      break;
 8007d9a:	e016      	b.n	8007dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fc29 	bl	80085fc <USBD_StdEPReq>
 8007daa:	4603      	mov	r3, r0
 8007dac:	73fb      	strb	r3, [r7, #15]
      break;
 8007dae:	e00c      	b.n	8007dca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007db6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 fde0 	bl	8009984 <USBD_LL_StallEP>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc8:	bf00      	nop
  }

  return ret;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d16e      	bne.n	8007eca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007df2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	f040 8098 	bne.w	8007f30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d913      	bls.n	8007e34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	1ad2      	subs	r2, r2, r3
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	4293      	cmp	r3, r2
 8007e24:	bf28      	it	cs
 8007e26:	4613      	movcs	r3, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f001 f984 	bl	800913a <USBD_CtlContinueRx>
 8007e32:	e07d      	b.n	8007f30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e3a:	f003 031f 	and.w	r3, r3, #31
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d014      	beq.n	8007e6c <USBD_LL_DataOutStage+0x98>
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d81d      	bhi.n	8007e82 <USBD_LL_DataOutStage+0xae>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <USBD_LL_DataOutStage+0x7c>
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d003      	beq.n	8007e56 <USBD_LL_DataOutStage+0x82>
 8007e4e:	e018      	b.n	8007e82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	75bb      	strb	r3, [r7, #22]
            break;
 8007e54:	e018      	b.n	8007e88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	4619      	mov	r1, r3
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fa5e 	bl	8008322 <USBD_CoreFindIF>
 8007e66:	4603      	mov	r3, r0
 8007e68:	75bb      	strb	r3, [r7, #22]
            break;
 8007e6a:	e00d      	b.n	8007e88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	4619      	mov	r1, r3
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 fa60 	bl	800833c <USBD_CoreFindEP>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75bb      	strb	r3, [r7, #22]
            break;
 8007e80:	e002      	b.n	8007e88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75bb      	strb	r3, [r7, #22]
            break;
 8007e86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e88:	7dbb      	ldrb	r3, [r7, #22]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d119      	bne.n	8007ec2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d113      	bne.n	8007ec2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e9a:	7dba      	ldrb	r2, [r7, #22]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	32ae      	adds	r2, #174	; 0xae
 8007ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00b      	beq.n	8007ec2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007eaa:	7dba      	ldrb	r2, [r7, #22]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007eb2:	7dba      	ldrb	r2, [r7, #22]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	32ae      	adds	r2, #174	; 0xae
 8007eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f001 f94a 	bl	800915c <USBD_CtlSendStatus>
 8007ec8:	e032      	b.n	8007f30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 fa31 	bl	800833c <USBD_CoreFindEP>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ede:	7dbb      	ldrb	r3, [r7, #22]
 8007ee0:	2bff      	cmp	r3, #255	; 0xff
 8007ee2:	d025      	beq.n	8007f30 <USBD_LL_DataOutStage+0x15c>
 8007ee4:	7dbb      	ldrb	r3, [r7, #22]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d122      	bne.n	8007f30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d117      	bne.n	8007f26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ef6:	7dba      	ldrb	r2, [r7, #22]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	32ae      	adds	r2, #174	; 0xae
 8007efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00f      	beq.n	8007f26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007f06:	7dba      	ldrb	r2, [r7, #22]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007f0e:	7dba      	ldrb	r2, [r7, #22]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	32ae      	adds	r2, #174	; 0xae
 8007f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	7afa      	ldrb	r2, [r7, #11]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	e000      	b.n	8007f32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b086      	sub	sp, #24
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	460b      	mov	r3, r1
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f48:	7afb      	ldrb	r3, [r7, #11]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d16f      	bne.n	800802e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3314      	adds	r3, #20
 8007f52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d15a      	bne.n	8008014 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d914      	bls.n	8007f94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	1ad2      	subs	r2, r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f001 f8ac 	bl	80090de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f86:	2300      	movs	r3, #0
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f001 fda3 	bl	8009ad8 <USBD_LL_PrepareReceive>
 8007f92:	e03f      	b.n	8008014 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d11c      	bne.n	8007fda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d316      	bcc.n	8007fda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d20f      	bcs.n	8007fda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f001 f88d 	bl	80090de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fcc:	2300      	movs	r3, #0
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f001 fd80 	bl	8009ad8 <USBD_LL_PrepareReceive>
 8007fd8:	e01c      	b.n	8008014 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d10f      	bne.n	8008006 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008006:	2180      	movs	r1, #128	; 0x80
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f001 fcbb 	bl	8009984 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f001 f8b7 	bl	8009182 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d03a      	beq.n	8008094 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff fe42 	bl	8007ca8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800802c:	e032      	b.n	8008094 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008034:	b2db      	uxtb	r3, r3
 8008036:	4619      	mov	r1, r3
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 f97f 	bl	800833c <USBD_CoreFindEP>
 800803e:	4603      	mov	r3, r0
 8008040:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	2bff      	cmp	r3, #255	; 0xff
 8008046:	d025      	beq.n	8008094 <USBD_LL_DataInStage+0x15a>
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d122      	bne.n	8008094 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b03      	cmp	r3, #3
 8008058:	d11c      	bne.n	8008094 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800805a:	7dfa      	ldrb	r2, [r7, #23]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	32ae      	adds	r2, #174	; 0xae
 8008060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d014      	beq.n	8008094 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800806a:	7dfa      	ldrb	r2, [r7, #23]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008072:	7dfa      	ldrb	r2, [r7, #23]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	32ae      	adds	r2, #174	; 0xae
 8008078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	7afa      	ldrb	r2, [r7, #11]
 8008080:	4611      	mov	r1, r2
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	4798      	blx	r3
 8008086:	4603      	mov	r3, r0
 8008088:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800808a:	7dbb      	ldrb	r3, [r7, #22]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008090:	7dbb      	ldrb	r3, [r7, #22]
 8008092:	e000      	b.n	8008096 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d014      	beq.n	8008104 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00e      	beq.n	8008104 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6852      	ldr	r2, [r2, #4]
 80080f2:	b2d2      	uxtb	r2, r2
 80080f4:	4611      	mov	r1, r2
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008100:	2303      	movs	r3, #3
 8008102:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008104:	2340      	movs	r3, #64	; 0x40
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fbf5 	bl	80098fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2240      	movs	r2, #64	; 0x40
 800811c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008120:	2340      	movs	r3, #64	; 0x40
 8008122:	2200      	movs	r2, #0
 8008124:	2180      	movs	r1, #128	; 0x80
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fbe7 	bl	80098fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2240      	movs	r2, #64	; 0x40
 8008136:	621a      	str	r2, [r3, #32]

  return ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008170:	b2da      	uxtb	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2204      	movs	r2, #4
 800817c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d106      	bne.n	80081b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d110      	bne.n	80081f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	460b      	mov	r3, r1
 8008208:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	32ae      	adds	r2, #174	; 0xae
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800821c:	2303      	movs	r3, #3
 800821e:	e01c      	b.n	800825a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b03      	cmp	r3, #3
 800822a:	d115      	bne.n	8008258 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	32ae      	adds	r2, #174	; 0xae
 8008236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	32ae      	adds	r2, #174	; 0xae
 800824a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	78fa      	ldrb	r2, [r7, #3]
 8008252:	4611      	mov	r1, r2
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	32ae      	adds	r2, #174	; 0xae
 8008278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008280:	2303      	movs	r3, #3
 8008282:	e01c      	b.n	80082be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b03      	cmp	r3, #3
 800828e:	d115      	bne.n	80082bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	32ae      	adds	r2, #174	; 0xae
 800829a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32ae      	adds	r2, #174	; 0xae
 80082ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	4611      	mov	r1, r2
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00e      	beq.n	8008318 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6852      	ldr	r2, [r2, #4]
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	4611      	mov	r1, r2
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008314:	2303      	movs	r3, #3
 8008316:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008318:	7bfb      	ldrb	r3, [r7, #15]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800832e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008348:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	b29a      	uxth	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	429a      	cmp	r2, r3
 800837c:	d920      	bls.n	80083c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008386:	e013      	b.n	80083b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008388:	f107 030a 	add.w	r3, r7, #10
 800838c:	4619      	mov	r1, r3
 800838e:	6978      	ldr	r0, [r7, #20]
 8008390:	f000 f81b 	bl	80083ca <USBD_GetNextDesc>
 8008394:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b05      	cmp	r3, #5
 800839c:	d108      	bne.n	80083b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	789b      	ldrb	r3, [r3, #2]
 80083a6:	78fa      	ldrb	r2, [r7, #3]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d008      	beq.n	80083be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	885b      	ldrh	r3, [r3, #2]
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	897b      	ldrh	r3, [r7, #10]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d8e5      	bhi.n	8008388 <USBD_GetEpDesc+0x32>
 80083bc:	e000      	b.n	80083c0 <USBD_GetEpDesc+0x6a>
          break;
 80083be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80083c0:	693b      	ldr	r3, [r7, #16]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	881a      	ldrh	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4413      	add	r3, r2
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083f6:	68fb      	ldr	r3, [r7, #12]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	3301      	adds	r3, #1
 800841a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008422:	8a3b      	ldrh	r3, [r7, #16]
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	b21a      	sxth	r2, r3
 8008428:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800842c:	4313      	orrs	r3, r2
 800842e:	b21b      	sxth	r3, r3
 8008430:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008432:	89fb      	ldrh	r3, [r7, #14]
}
 8008434:	4618      	mov	r0, r3
 8008436:	371c      	adds	r7, #28
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d005      	beq.n	8008466 <USBD_StdDevReq+0x26>
 800845a:	2b40      	cmp	r3, #64	; 0x40
 800845c:	d857      	bhi.n	800850e <USBD_StdDevReq+0xce>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00f      	beq.n	8008482 <USBD_StdDevReq+0x42>
 8008462:	2b20      	cmp	r3, #32
 8008464:	d153      	bne.n	800850e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	32ae      	adds	r2, #174	; 0xae
 8008470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
      break;
 8008480:	e04a      	b.n	8008518 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	2b09      	cmp	r3, #9
 8008488:	d83b      	bhi.n	8008502 <USBD_StdDevReq+0xc2>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <USBD_StdDevReq+0x50>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084e5 	.word	0x080084e5
 8008494:	080084f9 	.word	0x080084f9
 8008498:	08008503 	.word	0x08008503
 800849c:	080084ef 	.word	0x080084ef
 80084a0:	08008503 	.word	0x08008503
 80084a4:	080084c3 	.word	0x080084c3
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	08008503 	.word	0x08008503
 80084b0:	080084db 	.word	0x080084db
 80084b4:	080084cd 	.word	0x080084cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa3c 	bl	8008938 <USBD_GetDescriptor>
          break;
 80084c0:	e024      	b.n	800850c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fba1 	bl	8008c0c <USBD_SetAddress>
          break;
 80084ca:	e01f      	b.n	800850c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fbe0 	bl	8008c94 <USBD_SetConfig>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]
          break;
 80084d8:	e018      	b.n	800850c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc83 	bl	8008de8 <USBD_GetConfig>
          break;
 80084e2:	e013      	b.n	800850c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fcb4 	bl	8008e54 <USBD_GetStatus>
          break;
 80084ec:	e00e      	b.n	800850c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fce3 	bl	8008ebc <USBD_SetFeature>
          break;
 80084f6:	e009      	b.n	800850c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fd07 	bl	8008f0e <USBD_ClrFeature>
          break;
 8008500:	e004      	b.n	800850c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fd5e 	bl	8008fc6 <USBD_CtlError>
          break;
 800850a:	bf00      	nop
      }
      break;
 800850c:	e004      	b.n	8008518 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fd58 	bl	8008fc6 <USBD_CtlError>
      break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop

08008524 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d005      	beq.n	800854a <USBD_StdItfReq+0x26>
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	d852      	bhi.n	80085e8 <USBD_StdItfReq+0xc4>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <USBD_StdItfReq+0x26>
 8008546:	2b20      	cmp	r3, #32
 8008548:	d14e      	bne.n	80085e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	b2db      	uxtb	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	2b02      	cmp	r3, #2
 8008556:	d840      	bhi.n	80085da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	889b      	ldrh	r3, [r3, #4]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b01      	cmp	r3, #1
 8008560:	d836      	bhi.n	80085d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	889b      	ldrh	r3, [r3, #4]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fed9 	bl	8008322 <USBD_CoreFindIF>
 8008570:	4603      	mov	r3, r0
 8008572:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2bff      	cmp	r3, #255	; 0xff
 8008578:	d01d      	beq.n	80085b6 <USBD_StdItfReq+0x92>
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d11a      	bne.n	80085b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008580:	7bba      	ldrb	r2, [r7, #14]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	32ae      	adds	r2, #174	; 0xae
 8008586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00f      	beq.n	80085b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008590:	7bba      	ldrb	r2, [r7, #14]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008598:	7bba      	ldrb	r2, [r7, #14]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	32ae      	adds	r2, #174	; 0xae
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085ae:	e004      	b.n	80085ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085b4:	e001      	b.n	80085ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085b6:	2303      	movs	r3, #3
 80085b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	88db      	ldrh	r3, [r3, #6]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d110      	bne.n	80085e4 <USBD_StdItfReq+0xc0>
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10d      	bne.n	80085e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fdc7 	bl	800915c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085ce:	e009      	b.n	80085e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fcf7 	bl	8008fc6 <USBD_CtlError>
          break;
 80085d8:	e004      	b.n	80085e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fcf2 	bl	8008fc6 <USBD_CtlError>
          break;
 80085e2:	e000      	b.n	80085e6 <USBD_StdItfReq+0xc2>
          break;
 80085e4:	bf00      	nop
      }
      break;
 80085e6:	e004      	b.n	80085f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fceb 	bl	8008fc6 <USBD_CtlError>
      break;
 80085f0:	bf00      	nop
  }

  return ret;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	889b      	ldrh	r3, [r3, #4]
 800860e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008618:	2b40      	cmp	r3, #64	; 0x40
 800861a:	d007      	beq.n	800862c <USBD_StdEPReq+0x30>
 800861c:	2b40      	cmp	r3, #64	; 0x40
 800861e:	f200 817f 	bhi.w	8008920 <USBD_StdEPReq+0x324>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d02a      	beq.n	800867c <USBD_StdEPReq+0x80>
 8008626:	2b20      	cmp	r3, #32
 8008628:	f040 817a 	bne.w	8008920 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff fe83 	bl	800833c <USBD_CoreFindEP>
 8008636:	4603      	mov	r3, r0
 8008638:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800863a:	7b7b      	ldrb	r3, [r7, #13]
 800863c:	2bff      	cmp	r3, #255	; 0xff
 800863e:	f000 8174 	beq.w	800892a <USBD_StdEPReq+0x32e>
 8008642:	7b7b      	ldrb	r3, [r7, #13]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 8170 	bne.w	800892a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800864a:	7b7a      	ldrb	r2, [r7, #13]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008652:	7b7a      	ldrb	r2, [r7, #13]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	32ae      	adds	r2, #174	; 0xae
 8008658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8163 	beq.w	800892a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008664:	7b7a      	ldrb	r2, [r7, #13]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	32ae      	adds	r2, #174	; 0xae
 800866a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800867a:	e156      	b.n	800892a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	785b      	ldrb	r3, [r3, #1]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d008      	beq.n	8008696 <USBD_StdEPReq+0x9a>
 8008684:	2b03      	cmp	r3, #3
 8008686:	f300 8145 	bgt.w	8008914 <USBD_StdEPReq+0x318>
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 809b 	beq.w	80087c6 <USBD_StdEPReq+0x1ca>
 8008690:	2b01      	cmp	r3, #1
 8008692:	d03c      	beq.n	800870e <USBD_StdEPReq+0x112>
 8008694:	e13e      	b.n	8008914 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d002      	beq.n	80086a8 <USBD_StdEPReq+0xac>
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d016      	beq.n	80086d4 <USBD_StdEPReq+0xd8>
 80086a6:	e02c      	b.n	8008702 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00d      	beq.n	80086ca <USBD_StdEPReq+0xce>
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b80      	cmp	r3, #128	; 0x80
 80086b2:	d00a      	beq.n	80086ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 f963 	bl	8009984 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086be:	2180      	movs	r1, #128	; 0x80
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 f95f 	bl	8009984 <USBD_LL_StallEP>
 80086c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086c8:	e020      	b.n	800870c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fc7a 	bl	8008fc6 <USBD_CtlError>
              break;
 80086d2:	e01b      	b.n	800870c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	885b      	ldrh	r3, [r3, #2]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10e      	bne.n	80086fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <USBD_StdEPReq+0xfe>
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	2b80      	cmp	r3, #128	; 0x80
 80086e6:	d008      	beq.n	80086fa <USBD_StdEPReq+0xfe>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	88db      	ldrh	r3, [r3, #6]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d104      	bne.n	80086fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f945 	bl	8009984 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fd2e 	bl	800915c <USBD_CtlSendStatus>

              break;
 8008700:	e004      	b.n	800870c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fc5e 	bl	8008fc6 <USBD_CtlError>
              break;
 800870a:	bf00      	nop
          }
          break;
 800870c:	e107      	b.n	800891e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d002      	beq.n	8008720 <USBD_StdEPReq+0x124>
 800871a:	2b03      	cmp	r3, #3
 800871c:	d016      	beq.n	800874c <USBD_StdEPReq+0x150>
 800871e:	e04b      	b.n	80087b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00d      	beq.n	8008742 <USBD_StdEPReq+0x146>
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b80      	cmp	r3, #128	; 0x80
 800872a:	d00a      	beq.n	8008742 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 f927 	bl	8009984 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008736:	2180      	movs	r1, #128	; 0x80
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 f923 	bl	8009984 <USBD_LL_StallEP>
 800873e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008740:	e040      	b.n	80087c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fc3e 	bl	8008fc6 <USBD_CtlError>
              break;
 800874a:	e03b      	b.n	80087c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	885b      	ldrh	r3, [r3, #2]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d136      	bne.n	80087c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875a:	2b00      	cmp	r3, #0
 800875c:	d004      	beq.n	8008768 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 f92d 	bl	80099c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fcf7 	bl	800915c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff fde2 	bl	800833c <USBD_CoreFindEP>
 8008778:	4603      	mov	r3, r0
 800877a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800877c:	7b7b      	ldrb	r3, [r7, #13]
 800877e:	2bff      	cmp	r3, #255	; 0xff
 8008780:	d01f      	beq.n	80087c2 <USBD_StdEPReq+0x1c6>
 8008782:	7b7b      	ldrb	r3, [r7, #13]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d11c      	bne.n	80087c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008788:	7b7a      	ldrb	r2, [r7, #13]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008790:	7b7a      	ldrb	r2, [r7, #13]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	32ae      	adds	r2, #174	; 0xae
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d010      	beq.n	80087c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80087a0:	7b7a      	ldrb	r2, [r7, #13]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	32ae      	adds	r2, #174	; 0xae
 80087a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	4798      	blx	r3
 80087b2:	4603      	mov	r3, r0
 80087b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087b6:	e004      	b.n	80087c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fc03 	bl	8008fc6 <USBD_CtlError>
              break;
 80087c0:	e000      	b.n	80087c4 <USBD_StdEPReq+0x1c8>
              break;
 80087c2:	bf00      	nop
          }
          break;
 80087c4:	e0ab      	b.n	800891e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d002      	beq.n	80087d8 <USBD_StdEPReq+0x1dc>
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d032      	beq.n	800883c <USBD_StdEPReq+0x240>
 80087d6:	e097      	b.n	8008908 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d007      	beq.n	80087ee <USBD_StdEPReq+0x1f2>
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b80      	cmp	r3, #128	; 0x80
 80087e2:	d004      	beq.n	80087ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fbed 	bl	8008fc6 <USBD_CtlError>
                break;
 80087ec:	e091      	b.n	8008912 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da0b      	bge.n	800880e <USBD_StdEPReq+0x212>
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	3310      	adds	r3, #16
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	4413      	add	r3, r2
 800880a:	3304      	adds	r3, #4
 800880c:	e00b      	b.n	8008826 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	4413      	add	r3, r2
 8008824:	3304      	adds	r3, #4
 8008826:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2202      	movs	r2, #2
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fc37 	bl	80090a8 <USBD_CtlSendData>
              break;
 800883a:	e06a      	b.n	8008912 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800883c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008840:	2b00      	cmp	r3, #0
 8008842:	da11      	bge.n	8008868 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	f003 020f 	and.w	r2, r3, #15
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	3324      	adds	r3, #36	; 0x24
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d117      	bne.n	800888e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fbb0 	bl	8008fc6 <USBD_CtlError>
                  break;
 8008866:	e054      	b.n	8008912 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	f003 020f 	and.w	r2, r3, #15
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d104      	bne.n	800888e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fb9d 	bl	8008fc6 <USBD_CtlError>
                  break;
 800888c:	e041      	b.n	8008912 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800888e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008892:	2b00      	cmp	r3, #0
 8008894:	da0b      	bge.n	80088ae <USBD_StdEPReq+0x2b2>
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800889c:	4613      	mov	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	3310      	adds	r3, #16
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	4413      	add	r3, r2
 80088aa:	3304      	adds	r3, #4
 80088ac:	e00b      	b.n	80088c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	4413      	add	r3, r2
 80088c4:	3304      	adds	r3, #4
 80088c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <USBD_StdEPReq+0x2d8>
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	2b80      	cmp	r3, #128	; 0x80
 80088d2:	d103      	bne.n	80088dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e00e      	b.n	80088fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 f88d 	bl	8009a00 <USBD_LL_IsStallEP>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2201      	movs	r2, #1
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	e002      	b.n	80088fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2202      	movs	r2, #2
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fbd1 	bl	80090a8 <USBD_CtlSendData>
              break;
 8008906:	e004      	b.n	8008912 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fb5b 	bl	8008fc6 <USBD_CtlError>
              break;
 8008910:	bf00      	nop
          }
          break;
 8008912:	e004      	b.n	800891e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fb55 	bl	8008fc6 <USBD_CtlError>
          break;
 800891c:	bf00      	nop
      }
      break;
 800891e:	e005      	b.n	800892c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fb4f 	bl	8008fc6 <USBD_CtlError>
      break;
 8008928:	e000      	b.n	800892c <USBD_StdEPReq+0x330>
      break;
 800892a:	bf00      	nop
  }

  return ret;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	885b      	ldrh	r3, [r3, #2]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	2b06      	cmp	r3, #6
 800895a:	f200 8128 	bhi.w	8008bae <USBD_GetDescriptor+0x276>
 800895e:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <USBD_GetDescriptor+0x2c>)
 8008960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008964:	08008981 	.word	0x08008981
 8008968:	08008999 	.word	0x08008999
 800896c:	080089d9 	.word	0x080089d9
 8008970:	08008baf 	.word	0x08008baf
 8008974:	08008baf 	.word	0x08008baf
 8008978:	08008b4f 	.word	0x08008b4f
 800897c:	08008b7b 	.word	0x08008b7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7c12      	ldrb	r2, [r2, #16]
 800898c:	f107 0108 	add.w	r1, r7, #8
 8008990:	4610      	mov	r0, r2
 8008992:	4798      	blx	r3
 8008994:	60f8      	str	r0, [r7, #12]
      break;
 8008996:	e112      	b.n	8008bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7c1b      	ldrb	r3, [r3, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10d      	bne.n	80089bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	f107 0208 	add.w	r2, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3301      	adds	r3, #1
 80089b6:	2202      	movs	r2, #2
 80089b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089ba:	e100      	b.n	8008bbe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	f107 0208 	add.w	r2, r7, #8
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
 80089cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3301      	adds	r3, #1
 80089d2:	2202      	movs	r2, #2
 80089d4:	701a      	strb	r2, [r3, #0]
      break;
 80089d6:	e0f2      	b.n	8008bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b05      	cmp	r3, #5
 80089e0:	f200 80ac 	bhi.w	8008b3c <USBD_GetDescriptor+0x204>
 80089e4:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <USBD_GetDescriptor+0xb4>)
 80089e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ea:	bf00      	nop
 80089ec:	08008a05 	.word	0x08008a05
 80089f0:	08008a39 	.word	0x08008a39
 80089f4:	08008a6d 	.word	0x08008a6d
 80089f8:	08008aa1 	.word	0x08008aa1
 80089fc:	08008ad5 	.word	0x08008ad5
 8008a00:	08008b09 	.word	0x08008b09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e091      	b.n	8008b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 facb 	bl	8008fc6 <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e089      	b.n	8008b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5a:	e077      	b.n	8008b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fab1 	bl	8008fc6 <USBD_CtlError>
            err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6a:	e06f      	b.n	8008b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	7c12      	ldrb	r2, [r2, #16]
 8008a84:	f107 0108 	add.w	r1, r7, #8
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8e:	e05d      	b.n	8008b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa97 	bl	8008fc6 <USBD_CtlError>
            err++;
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9e:	e055      	b.n	8008b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7c12      	ldrb	r2, [r2, #16]
 8008ab8:	f107 0108 	add.w	r1, r7, #8
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac2:	e043      	b.n	8008b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa7d 	bl	8008fc6 <USBD_CtlError>
            err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ad2:	e03b      	b.n	8008b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008af6:	e029      	b.n	8008b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa63 	bl	8008fc6 <USBD_CtlError>
            err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
          break;
 8008b06:	e021      	b.n	8008b4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 0108 	add.w	r1, r7, #8
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b2a:	e00f      	b.n	8008b4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa49 	bl	8008fc6 <USBD_CtlError>
            err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
          break;
 8008b3a:	e007      	b.n	8008b4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa41 	bl	8008fc6 <USBD_CtlError>
          err++;
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	3301      	adds	r3, #1
 8008b48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b4a:	bf00      	nop
      }
      break;
 8008b4c:	e037      	b.n	8008bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	7c1b      	ldrb	r3, [r3, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	f107 0208 	add.w	r2, r7, #8
 8008b62:	4610      	mov	r0, r2
 8008b64:	4798      	blx	r3
 8008b66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b68:	e029      	b.n	8008bbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa2a 	bl	8008fc6 <USBD_CtlError>
        err++;
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	3301      	adds	r3, #1
 8008b76:	72fb      	strb	r3, [r7, #11]
      break;
 8008b78:	e021      	b.n	8008bbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	7c1b      	ldrb	r3, [r3, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10d      	bne.n	8008b9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	f107 0208 	add.w	r2, r7, #8
 8008b8e:	4610      	mov	r0, r2
 8008b90:	4798      	blx	r3
 8008b92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	2207      	movs	r2, #7
 8008b9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b9c:	e00f      	b.n	8008bbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fa10 	bl	8008fc6 <USBD_CtlError>
        err++;
 8008ba6:	7afb      	ldrb	r3, [r7, #11]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	72fb      	strb	r3, [r7, #11]
      break;
 8008bac:	e007      	b.n	8008bbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fa08 	bl	8008fc6 <USBD_CtlError>
      err++;
 8008bb6:	7afb      	ldrb	r3, [r7, #11]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	72fb      	strb	r3, [r7, #11]
      break;
 8008bbc:	bf00      	nop
  }

  if (err != 0U)
 8008bbe:	7afb      	ldrb	r3, [r7, #11]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11e      	bne.n	8008c02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	88db      	ldrh	r3, [r3, #6]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d016      	beq.n	8008bfa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008bcc:	893b      	ldrh	r3, [r7, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00e      	beq.n	8008bf0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	88da      	ldrh	r2, [r3, #6]
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	bf28      	it	cs
 8008bdc:	4613      	movcs	r3, r2
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008be2:	893b      	ldrh	r3, [r7, #8]
 8008be4:	461a      	mov	r2, r3
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa5d 	bl	80090a8 <USBD_CtlSendData>
 8008bee:	e009      	b.n	8008c04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f9e7 	bl	8008fc6 <USBD_CtlError>
 8008bf8:	e004      	b.n	8008c04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 faae 	bl	800915c <USBD_CtlSendStatus>
 8008c00:	e000      	b.n	8008c04 <USBD_GetDescriptor+0x2cc>
    return;
 8008c02:	bf00      	nop
  }
}
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop

08008c0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	889b      	ldrh	r3, [r3, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d131      	bne.n	8008c82 <USBD_SetAddress+0x76>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d12d      	bne.n	8008c82 <USBD_SetAddress+0x76>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	885b      	ldrh	r3, [r3, #2]
 8008c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c2c:	d829      	bhi.n	8008c82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	885b      	ldrh	r3, [r3, #2]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d104      	bne.n	8008c50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f9bc 	bl	8008fc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4e:	e01d      	b.n	8008c8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	7bfa      	ldrb	r2, [r7, #15]
 8008c54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fefb 	bl	8009a58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fa7a 	bl	800915c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d004      	beq.n	8008c78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2202      	movs	r2, #2
 8008c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c76:	e009      	b.n	8008c8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c80:	e004      	b.n	8008c8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f99e 	bl	8008fc6 <USBD_CtlError>
  }
}
 8008c8a:	bf00      	nop
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	885b      	ldrh	r3, [r3, #2]
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	4b4e      	ldr	r3, [pc, #312]	; (8008de4 <USBD_SetConfig+0x150>)
 8008caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cac:	4b4d      	ldr	r3, [pc, #308]	; (8008de4 <USBD_SetConfig+0x150>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d905      	bls.n	8008cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f985 	bl	8008fc6 <USBD_CtlError>
    return USBD_FAIL;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e08c      	b.n	8008dda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d002      	beq.n	8008cd2 <USBD_SetConfig+0x3e>
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d029      	beq.n	8008d24 <USBD_SetConfig+0x90>
 8008cd0:	e075      	b.n	8008dbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008cd2:	4b44      	ldr	r3, [pc, #272]	; (8008de4 <USBD_SetConfig+0x150>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d020      	beq.n	8008d1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008cda:	4b42      	ldr	r3, [pc, #264]	; (8008de4 <USBD_SetConfig+0x150>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ce4:	4b3f      	ldr	r3, [pc, #252]	; (8008de4 <USBD_SetConfig+0x150>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fe ffe7 	bl	8007cbe <USBD_SetClassConfig>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d008      	beq.n	8008d0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f962 	bl	8008fc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2202      	movs	r2, #2
 8008d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d0a:	e065      	b.n	8008dd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fa25 	bl	800915c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2203      	movs	r2, #3
 8008d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d1a:	e05d      	b.n	8008dd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fa1d 	bl	800915c <USBD_CtlSendStatus>
      break;
 8008d22:	e059      	b.n	8008dd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d24:	4b2f      	ldr	r3, [pc, #188]	; (8008de4 <USBD_SetConfig+0x150>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d112      	bne.n	8008d52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d34:	4b2b      	ldr	r3, [pc, #172]	; (8008de4 <USBD_SetConfig+0x150>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d3e:	4b29      	ldr	r3, [pc, #164]	; (8008de4 <USBD_SetConfig+0x150>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7fe ffd6 	bl	8007cf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa06 	bl	800915c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d50:	e042      	b.n	8008dd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d52:	4b24      	ldr	r3, [pc, #144]	; (8008de4 <USBD_SetConfig+0x150>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d02a      	beq.n	8008db6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7fe ffc4 	bl	8007cf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d6e:	4b1d      	ldr	r3, [pc, #116]	; (8008de4 <USBD_SetConfig+0x150>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d78:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <USBD_SetConfig+0x150>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7fe ff9d 	bl	8007cbe <USBD_SetClassConfig>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00f      	beq.n	8008dae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f918 	bl	8008fc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7fe ffa9 	bl	8007cf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008dac:	e014      	b.n	8008dd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f9d4 	bl	800915c <USBD_CtlSendStatus>
      break;
 8008db4:	e010      	b.n	8008dd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f9d0 	bl	800915c <USBD_CtlSendStatus>
      break;
 8008dbc:	e00c      	b.n	8008dd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f900 	bl	8008fc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dc6:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <USBD_SetConfig+0x150>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7fe ff92 	bl	8007cf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd6:	bf00      	nop
  }

  return ret;
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	20000604 	.word	0x20000604

08008de8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	88db      	ldrh	r3, [r3, #6]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d004      	beq.n	8008e04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f8e2 	bl	8008fc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e02:	e023      	b.n	8008e4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	dc02      	bgt.n	8008e16 <USBD_GetConfig+0x2e>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dc03      	bgt.n	8008e1c <USBD_GetConfig+0x34>
 8008e14:	e015      	b.n	8008e42 <USBD_GetConfig+0x5a>
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d00b      	beq.n	8008e32 <USBD_GetConfig+0x4a>
 8008e1a:	e012      	b.n	8008e42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3308      	adds	r3, #8
 8008e26:	2201      	movs	r2, #1
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f93c 	bl	80090a8 <USBD_CtlSendData>
        break;
 8008e30:	e00c      	b.n	8008e4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3304      	adds	r3, #4
 8008e36:	2201      	movs	r2, #1
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f934 	bl	80090a8 <USBD_CtlSendData>
        break;
 8008e40:	e004      	b.n	8008e4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f8be 	bl	8008fc6 <USBD_CtlError>
        break;
 8008e4a:	bf00      	nop
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d81e      	bhi.n	8008eaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	88db      	ldrh	r3, [r3, #6]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d004      	beq.n	8008e7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f8a5 	bl	8008fc6 <USBD_CtlError>
        break;
 8008e7c:	e01a      	b.n	8008eb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f043 0202 	orr.w	r2, r3, #2
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	330c      	adds	r3, #12
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f900 	bl	80090a8 <USBD_CtlSendData>
      break;
 8008ea8:	e004      	b.n	8008eb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f88a 	bl	8008fc6 <USBD_CtlError>
      break;
 8008eb2:	bf00      	nop
  }
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	885b      	ldrh	r3, [r3, #2]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d107      	bne.n	8008ede <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f940 	bl	800915c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008edc:	e013      	b.n	8008f06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	885b      	ldrh	r3, [r3, #2]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d10b      	bne.n	8008efe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	889b      	ldrh	r3, [r3, #4]
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f930 	bl	800915c <USBD_CtlSendStatus>
}
 8008efc:	e003      	b.n	8008f06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f860 	bl	8008fc6 <USBD_CtlError>
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	3b01      	subs	r3, #1
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d80b      	bhi.n	8008f3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	885b      	ldrh	r3, [r3, #2]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d10c      	bne.n	8008f48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f910 	bl	800915c <USBD_CtlSendStatus>
      }
      break;
 8008f3c:	e004      	b.n	8008f48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f840 	bl	8008fc6 <USBD_CtlError>
      break;
 8008f46:	e000      	b.n	8008f4a <USBD_ClrFeature+0x3c>
      break;
 8008f48:	bf00      	nop
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	781a      	ldrb	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	781a      	ldrb	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fa41 	bl	8008404 <SWAPBYTE>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fa34 	bl	8008404 <SWAPBYTE>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff fa27 	bl	8008404 <SWAPBYTE>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	461a      	mov	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	80da      	strh	r2, [r3, #6]
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fd0:	2180      	movs	r1, #128	; 0x80
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fcd6 	bl	8009984 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fcd2 	bl	8009984 <USBD_LL_StallEP>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d036      	beq.n	800906c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009002:	6938      	ldr	r0, [r7, #16]
 8009004:	f000 f836 	bl	8009074 <USBD_GetLen>
 8009008:	4603      	mov	r3, r0
 800900a:	3301      	adds	r3, #1
 800900c:	b29b      	uxth	r3, r3
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	4413      	add	r3, r2
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	7812      	ldrb	r2, [r2, #0]
 8009020:	701a      	strb	r2, [r3, #0]
  idx++;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	3301      	adds	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	4413      	add	r3, r2
 800902e:	2203      	movs	r2, #3
 8009030:	701a      	strb	r2, [r3, #0]
  idx++;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	3301      	adds	r3, #1
 8009036:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009038:	e013      	b.n	8009062 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	4413      	add	r3, r2
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	7812      	ldrb	r2, [r2, #0]
 8009044:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	3301      	adds	r3, #1
 800904a:	613b      	str	r3, [r7, #16]
    idx++;
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	3301      	adds	r3, #1
 8009050:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	4413      	add	r3, r2
 8009058:	2200      	movs	r2, #0
 800905a:	701a      	strb	r2, [r3, #0]
    idx++;
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	3301      	adds	r3, #1
 8009060:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e7      	bne.n	800903a <USBD_GetString+0x52>
 800906a:	e000      	b.n	800906e <USBD_GetString+0x86>
    return;
 800906c:	bf00      	nop
  }
}
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009084:	e005      	b.n	8009092 <USBD_GetLen+0x1e>
  {
    len++;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	3301      	adds	r3, #1
 800908a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3301      	adds	r3, #1
 8009090:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1f5      	bne.n	8009086 <USBD_GetLen+0x12>
  }

  return len;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	2100      	movs	r1, #0
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fce1 	bl	8009a96 <USBD_LL_Transmit>

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	2100      	movs	r1, #0
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 fcd0 	bl	8009a96 <USBD_LL_Transmit>

  return USBD_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2203      	movs	r2, #3
 8009110:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	2100      	movs	r1, #0
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fcd4 	bl	8009ad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	2100      	movs	r1, #0
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fcc3 	bl	8009ad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2204      	movs	r2, #4
 8009168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800916c:	2300      	movs	r3, #0
 800916e:	2200      	movs	r2, #0
 8009170:	2100      	movs	r1, #0
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fc8f 	bl	8009a96 <USBD_LL_Transmit>

  return USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2205      	movs	r2, #5
 800918e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009192:	2300      	movs	r3, #0
 8009194:	2200      	movs	r2, #0
 8009196:	2100      	movs	r1, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fc9d 	bl	8009ad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091ac:	2200      	movs	r2, #0
 80091ae:	4912      	ldr	r1, [pc, #72]	; (80091f8 <MX_USB_DEVICE_Init+0x50>)
 80091b0:	4812      	ldr	r0, [pc, #72]	; (80091fc <MX_USB_DEVICE_Init+0x54>)
 80091b2:	f7fe fd07 	bl	8007bc4 <USBD_Init>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091bc:	f7f7 fd5e 	bl	8000c7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80091c0:	490f      	ldr	r1, [pc, #60]	; (8009200 <MX_USB_DEVICE_Init+0x58>)
 80091c2:	480e      	ldr	r0, [pc, #56]	; (80091fc <MX_USB_DEVICE_Init+0x54>)
 80091c4:	f7fe fd2e 	bl	8007c24 <USBD_RegisterClass>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091ce:	f7f7 fd55 	bl	8000c7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80091d2:	490c      	ldr	r1, [pc, #48]	; (8009204 <MX_USB_DEVICE_Init+0x5c>)
 80091d4:	4809      	ldr	r0, [pc, #36]	; (80091fc <MX_USB_DEVICE_Init+0x54>)
 80091d6:	f7fe fc1f 	bl	8007a18 <USBD_CDC_RegisterInterface>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091e0:	f7f7 fd4c 	bl	8000c7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091e4:	4805      	ldr	r0, [pc, #20]	; (80091fc <MX_USB_DEVICE_Init+0x54>)
 80091e6:	f7fe fd53 	bl	8007c90 <USBD_Start>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091f0:	f7f7 fd44 	bl	8000c7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091f4:	bf00      	nop
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	200000ac 	.word	0x200000ac
 80091fc:	20000608 	.word	0x20000608
 8009200:	20000018 	.word	0x20000018
 8009204:	20000098 	.word	0x20000098

08009208 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800920c:	2200      	movs	r2, #0
 800920e:	4905      	ldr	r1, [pc, #20]	; (8009224 <CDC_Init_FS+0x1c>)
 8009210:	4805      	ldr	r0, [pc, #20]	; (8009228 <CDC_Init_FS+0x20>)
 8009212:	f7fe fc1b 	bl	8007a4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009216:	4905      	ldr	r1, [pc, #20]	; (800922c <CDC_Init_FS+0x24>)
 8009218:	4803      	ldr	r0, [pc, #12]	; (8009228 <CDC_Init_FS+0x20>)
 800921a:	f7fe fc39 	bl	8007a90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800921e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009220:	4618      	mov	r0, r3
 8009222:	bd80      	pop	{r7, pc}
 8009224:	200010e4 	.word	0x200010e4
 8009228:	20000608 	.word	0x20000608
 800922c:	200008e4 	.word	0x200008e4

08009230 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009234:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009236:	4618      	mov	r0, r3
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
 800924c:	4613      	mov	r3, r2
 800924e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	2b23      	cmp	r3, #35	; 0x23
 8009254:	d84a      	bhi.n	80092ec <CDC_Control_FS+0xac>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <CDC_Control_FS+0x1c>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	080092ed 	.word	0x080092ed
 8009260:	080092ed 	.word	0x080092ed
 8009264:	080092ed 	.word	0x080092ed
 8009268:	080092ed 	.word	0x080092ed
 800926c:	080092ed 	.word	0x080092ed
 8009270:	080092ed 	.word	0x080092ed
 8009274:	080092ed 	.word	0x080092ed
 8009278:	080092ed 	.word	0x080092ed
 800927c:	080092ed 	.word	0x080092ed
 8009280:	080092ed 	.word	0x080092ed
 8009284:	080092ed 	.word	0x080092ed
 8009288:	080092ed 	.word	0x080092ed
 800928c:	080092ed 	.word	0x080092ed
 8009290:	080092ed 	.word	0x080092ed
 8009294:	080092ed 	.word	0x080092ed
 8009298:	080092ed 	.word	0x080092ed
 800929c:	080092ed 	.word	0x080092ed
 80092a0:	080092ed 	.word	0x080092ed
 80092a4:	080092ed 	.word	0x080092ed
 80092a8:	080092ed 	.word	0x080092ed
 80092ac:	080092ed 	.word	0x080092ed
 80092b0:	080092ed 	.word	0x080092ed
 80092b4:	080092ed 	.word	0x080092ed
 80092b8:	080092ed 	.word	0x080092ed
 80092bc:	080092ed 	.word	0x080092ed
 80092c0:	080092ed 	.word	0x080092ed
 80092c4:	080092ed 	.word	0x080092ed
 80092c8:	080092ed 	.word	0x080092ed
 80092cc:	080092ed 	.word	0x080092ed
 80092d0:	080092ed 	.word	0x080092ed
 80092d4:	080092ed 	.word	0x080092ed
 80092d8:	080092ed 	.word	0x080092ed
 80092dc:	080092ed 	.word	0x080092ed
 80092e0:	080092ed 	.word	0x080092ed
 80092e4:	080092ed 	.word	0x080092ed
 80092e8:	080092ed 	.word	0x080092ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092ec:	bf00      	nop
  }

  return (USBD_OK);
 80092ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4805      	ldr	r0, [pc, #20]	; (8009320 <CDC_Receive_FS+0x24>)
 800930a:	f7fe fbc1 	bl	8007a90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800930e:	4804      	ldr	r0, [pc, #16]	; (8009320 <CDC_Receive_FS+0x24>)
 8009310:	f7fe fc22 	bl	8007b58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009314:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20000608 	.word	0x20000608

08009324 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009334:	4b0d      	ldr	r3, [pc, #52]	; (800936c <CDC_Transmit_FS+0x48>)
 8009336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800933a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009346:	2301      	movs	r3, #1
 8009348:	e00b      	b.n	8009362 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800934a:	887b      	ldrh	r3, [r7, #2]
 800934c:	461a      	mov	r2, r3
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	4806      	ldr	r0, [pc, #24]	; (800936c <CDC_Transmit_FS+0x48>)
 8009352:	f7fe fb7b 	bl	8007a4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009356:	4805      	ldr	r0, [pc, #20]	; (800936c <CDC_Transmit_FS+0x48>)
 8009358:	f7fe fbb8 	bl	8007acc <USBD_CDC_TransmitPacket>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009360:	7bfb      	ldrb	r3, [r7, #15]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000608 	.word	0x20000608

08009370 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009386:	4618      	mov	r0, r3
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
	...

08009394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2212      	movs	r2, #18
 80093a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093a6:	4b03      	ldr	r3, [pc, #12]	; (80093b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	200000c8 	.word	0x200000c8

080093b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2204      	movs	r2, #4
 80093c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093ca:	4b03      	ldr	r3, [pc, #12]	; (80093d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	200000dc 	.word	0x200000dc

080093dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d105      	bne.n	80093fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	4907      	ldr	r1, [pc, #28]	; (8009410 <USBD_FS_ProductStrDescriptor+0x34>)
 80093f2:	4808      	ldr	r0, [pc, #32]	; (8009414 <USBD_FS_ProductStrDescriptor+0x38>)
 80093f4:	f7ff fdf8 	bl	8008fe8 <USBD_GetString>
 80093f8:	e004      	b.n	8009404 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	4904      	ldr	r1, [pc, #16]	; (8009410 <USBD_FS_ProductStrDescriptor+0x34>)
 80093fe:	4805      	ldr	r0, [pc, #20]	; (8009414 <USBD_FS_ProductStrDescriptor+0x38>)
 8009400:	f7ff fdf2 	bl	8008fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009404:	4b02      	ldr	r3, [pc, #8]	; (8009410 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200018e4 	.word	0x200018e4
 8009414:	08009cac 	.word	0x08009cac

08009418 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	6039      	str	r1, [r7, #0]
 8009422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	4904      	ldr	r1, [pc, #16]	; (8009438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009428:	4804      	ldr	r0, [pc, #16]	; (800943c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800942a:	f7ff fddd 	bl	8008fe8 <USBD_GetString>
  return USBD_StrDesc;
 800942e:	4b02      	ldr	r3, [pc, #8]	; (8009438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009430:	4618      	mov	r0, r3
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	200018e4 	.word	0x200018e4
 800943c:	08009cb8 	.word	0x08009cb8

08009440 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	6039      	str	r1, [r7, #0]
 800944a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	221a      	movs	r2, #26
 8009450:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009452:	f000 f843 	bl	80094dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009456:	4b02      	ldr	r3, [pc, #8]	; (8009460 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	200000e0 	.word	0x200000e0

08009464 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d105      	bne.n	8009482 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	4907      	ldr	r1, [pc, #28]	; (8009498 <USBD_FS_ConfigStrDescriptor+0x34>)
 800947a:	4808      	ldr	r0, [pc, #32]	; (800949c <USBD_FS_ConfigStrDescriptor+0x38>)
 800947c:	f7ff fdb4 	bl	8008fe8 <USBD_GetString>
 8009480:	e004      	b.n	800948c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4904      	ldr	r1, [pc, #16]	; (8009498 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009486:	4805      	ldr	r0, [pc, #20]	; (800949c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009488:	f7ff fdae 	bl	8008fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800948c:	4b02      	ldr	r3, [pc, #8]	; (8009498 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	200018e4 	.word	0x200018e4
 800949c:	08009ccc 	.word	0x08009ccc

080094a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	6039      	str	r1, [r7, #0]
 80094aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d105      	bne.n	80094be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	4907      	ldr	r1, [pc, #28]	; (80094d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094b6:	4808      	ldr	r0, [pc, #32]	; (80094d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094b8:	f7ff fd96 	bl	8008fe8 <USBD_GetString>
 80094bc:	e004      	b.n	80094c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	4904      	ldr	r1, [pc, #16]	; (80094d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094c2:	4805      	ldr	r0, [pc, #20]	; (80094d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094c4:	f7ff fd90 	bl	8008fe8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094c8:	4b02      	ldr	r3, [pc, #8]	; (80094d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200018e4 	.word	0x200018e4
 80094d8:	08009cd8 	.word	0x08009cd8

080094dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094e2:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <Get_SerialNum+0x44>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094e8:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <Get_SerialNum+0x48>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094ee:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <Get_SerialNum+0x4c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4413      	add	r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009502:	2208      	movs	r2, #8
 8009504:	4909      	ldr	r1, [pc, #36]	; (800952c <Get_SerialNum+0x50>)
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 f814 	bl	8009534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800950c:	2204      	movs	r2, #4
 800950e:	4908      	ldr	r1, [pc, #32]	; (8009530 <Get_SerialNum+0x54>)
 8009510:	68b8      	ldr	r0, [r7, #8]
 8009512:	f000 f80f 	bl	8009534 <IntToUnicode>
  }
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	1fff7a10 	.word	0x1fff7a10
 8009524:	1fff7a14 	.word	0x1fff7a14
 8009528:	1fff7a18 	.word	0x1fff7a18
 800952c:	200000e2 	.word	0x200000e2
 8009530:	200000f2 	.word	0x200000f2

08009534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	4613      	mov	r3, r2
 8009540:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009546:	2300      	movs	r3, #0
 8009548:	75fb      	strb	r3, [r7, #23]
 800954a:	e027      	b.n	800959c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	0f1b      	lsrs	r3, r3, #28
 8009550:	2b09      	cmp	r3, #9
 8009552:	d80b      	bhi.n	800956c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	0f1b      	lsrs	r3, r3, #28
 8009558:	b2da      	uxtb	r2, r3
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	4619      	mov	r1, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	440b      	add	r3, r1
 8009564:	3230      	adds	r2, #48	; 0x30
 8009566:	b2d2      	uxtb	r2, r2
 8009568:	701a      	strb	r2, [r3, #0]
 800956a:	e00a      	b.n	8009582 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	0f1b      	lsrs	r3, r3, #28
 8009570:	b2da      	uxtb	r2, r3
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	4619      	mov	r1, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	440b      	add	r3, r1
 800957c:	3237      	adds	r2, #55	; 0x37
 800957e:	b2d2      	uxtb	r2, r2
 8009580:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	011b      	lsls	r3, r3, #4
 8009586:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	3301      	adds	r3, #1
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	4413      	add	r3, r2
 8009592:	2200      	movs	r2, #0
 8009594:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	3301      	adds	r3, #1
 800959a:	75fb      	strb	r3, [r7, #23]
 800959c:	7dfa      	ldrb	r2, [r7, #23]
 800959e:	79fb      	ldrb	r3, [r7, #7]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d3d3      	bcc.n	800954c <IntToUnicode+0x18>
  }
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
	...

080095b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08a      	sub	sp, #40	; 0x28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095bc:	f107 0314 	add.w	r3, r7, #20
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	609a      	str	r2, [r3, #8]
 80095c8:	60da      	str	r2, [r3, #12]
 80095ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095d4:	d13a      	bne.n	800964c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095d6:	2300      	movs	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <HAL_PCD_MspInit+0xa0>)
 80095dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095de:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <HAL_PCD_MspInit+0xa0>)
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	6313      	str	r3, [r2, #48]	; 0x30
 80095e6:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <HAL_PCD_MspInit+0xa0>)
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80095f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80095f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095f8:	2302      	movs	r3, #2
 80095fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095fc:	2300      	movs	r3, #0
 80095fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009600:	2303      	movs	r3, #3
 8009602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009604:	230a      	movs	r3, #10
 8009606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009608:	f107 0314 	add.w	r3, r7, #20
 800960c:	4619      	mov	r1, r3
 800960e:	4812      	ldr	r0, [pc, #72]	; (8009658 <HAL_PCD_MspInit+0xa4>)
 8009610:	f7f8 fac8 	bl	8001ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009614:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <HAL_PCD_MspInit+0xa0>)
 8009616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009618:	4a0e      	ldr	r2, [pc, #56]	; (8009654 <HAL_PCD_MspInit+0xa0>)
 800961a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961e:	6353      	str	r3, [r2, #52]	; 0x34
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <HAL_PCD_MspInit+0xa0>)
 8009626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009628:	4a0a      	ldr	r2, [pc, #40]	; (8009654 <HAL_PCD_MspInit+0xa0>)
 800962a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800962e:	6453      	str	r3, [r2, #68]	; 0x44
 8009630:	4b08      	ldr	r3, [pc, #32]	; (8009654 <HAL_PCD_MspInit+0xa0>)
 8009632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	2043      	movs	r0, #67	; 0x43
 8009642:	f7f7 fe76 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009646:	2043      	movs	r0, #67	; 0x43
 8009648:	f7f7 fe8f 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800964c:	bf00      	nop
 800964e:	3728      	adds	r7, #40	; 0x28
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	40023800 	.word	0x40023800
 8009658:	40020000 	.word	0x40020000

0800965c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009670:	4619      	mov	r1, r3
 8009672:	4610      	mov	r0, r2
 8009674:	f7fe fb59 	bl	8007d2a <USBD_LL_SetupStage>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7fe fb93 	bl	8007dd4 <USBD_LL_DataOutStage>
}
 80096ae:	bf00      	nop
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	460b      	mov	r3, r1
 80096c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80096c8:	78fa      	ldrb	r2, [r7, #3]
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4613      	mov	r3, r2
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	4413      	add	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	334c      	adds	r3, #76	; 0x4c
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	4619      	mov	r1, r3
 80096de:	f7fe fc2c 	bl	8007f3a <USBD_LL_DataInStage>
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe fd60 	bl	80081be <USBD_LL_SOF>
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800970e:	2301      	movs	r3, #1
 8009710:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d001      	beq.n	800971e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800971a:	f7f7 faaf 	bl	8000c7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009724:	7bfa      	ldrb	r2, [r7, #15]
 8009726:	4611      	mov	r1, r2
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe fd0a 	bl	8008142 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe fcb2 	bl	800809e <USBD_LL_Reset>
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fd05 	bl	8008162 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800976a:	f043 0301 	orr.w	r3, r3, #1
 800976e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d005      	beq.n	8009784 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <HAL_PCD_SuspendCallback+0x48>)
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	4a03      	ldr	r2, [pc, #12]	; (800978c <HAL_PCD_SuspendCallback+0x48>)
 800977e:	f043 0306 	orr.w	r3, r3, #6
 8009782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	e000ed00 	.word	0xe000ed00

08009790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fcf5 	bl	800818e <USBD_LL_Resume>
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fe fd4d 	bl	8008262 <USBD_LL_IsoOUTIncomplete>
}
 80097c8:	bf00      	nop
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097e2:	78fa      	ldrb	r2, [r7, #3]
 80097e4:	4611      	mov	r1, r2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fd09 	bl	80081fe <USBD_LL_IsoINIncomplete>
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fd5f 	bl	80082c6 <USBD_LL_DevConnected>
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fd5c 	bl	80082dc <USBD_LL_DevDisconnected>
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d13c      	bne.n	80098b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800983c:	4a20      	ldr	r2, [pc, #128]	; (80098c0 <USBD_LL_Init+0x94>)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a1e      	ldr	r2, [pc, #120]	; (80098c0 <USBD_LL_Init+0x94>)
 8009848:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800984c:	4b1c      	ldr	r3, [pc, #112]	; (80098c0 <USBD_LL_Init+0x94>)
 800984e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009852:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009854:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <USBD_LL_Init+0x94>)
 8009856:	2204      	movs	r2, #4
 8009858:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800985a:	4b19      	ldr	r3, [pc, #100]	; (80098c0 <USBD_LL_Init+0x94>)
 800985c:	2202      	movs	r2, #2
 800985e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009860:	4b17      	ldr	r3, [pc, #92]	; (80098c0 <USBD_LL_Init+0x94>)
 8009862:	2200      	movs	r2, #0
 8009864:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009866:	4b16      	ldr	r3, [pc, #88]	; (80098c0 <USBD_LL_Init+0x94>)
 8009868:	2202      	movs	r2, #2
 800986a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800986c:	4b14      	ldr	r3, [pc, #80]	; (80098c0 <USBD_LL_Init+0x94>)
 800986e:	2200      	movs	r2, #0
 8009870:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009872:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <USBD_LL_Init+0x94>)
 8009874:	2200      	movs	r2, #0
 8009876:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009878:	4b11      	ldr	r3, [pc, #68]	; (80098c0 <USBD_LL_Init+0x94>)
 800987a:	2200      	movs	r2, #0
 800987c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800987e:	4b10      	ldr	r3, [pc, #64]	; (80098c0 <USBD_LL_Init+0x94>)
 8009880:	2200      	movs	r2, #0
 8009882:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009884:	4b0e      	ldr	r3, [pc, #56]	; (80098c0 <USBD_LL_Init+0x94>)
 8009886:	2200      	movs	r2, #0
 8009888:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800988a:	480d      	ldr	r0, [pc, #52]	; (80098c0 <USBD_LL_Init+0x94>)
 800988c:	f7f8 fb27 	bl	8001ede <HAL_PCD_Init>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009896:	f7f7 f9f1 	bl	8000c7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800989a:	2180      	movs	r1, #128	; 0x80
 800989c:	4808      	ldr	r0, [pc, #32]	; (80098c0 <USBD_LL_Init+0x94>)
 800989e:	f7f9 fd7e 	bl	800339e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80098a2:	2240      	movs	r2, #64	; 0x40
 80098a4:	2100      	movs	r1, #0
 80098a6:	4806      	ldr	r0, [pc, #24]	; (80098c0 <USBD_LL_Init+0x94>)
 80098a8:	f7f9 fd32 	bl	8003310 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80098ac:	2280      	movs	r2, #128	; 0x80
 80098ae:	2101      	movs	r1, #1
 80098b0:	4803      	ldr	r0, [pc, #12]	; (80098c0 <USBD_LL_Init+0x94>)
 80098b2:	f7f9 fd2d 	bl	8003310 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20001ae4 	.word	0x20001ae4

080098c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098da:	4618      	mov	r0, r3
 80098dc:	f7f8 fc1c 	bl	8002118 <HAL_PCD_Start>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 f942 	bl	8009b70 <USBD_Get_USB_Status>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	4608      	mov	r0, r1
 8009904:	4611      	mov	r1, r2
 8009906:	461a      	mov	r2, r3
 8009908:	4603      	mov	r3, r0
 800990a:	70fb      	strb	r3, [r7, #3]
 800990c:	460b      	mov	r3, r1
 800990e:	70bb      	strb	r3, [r7, #2]
 8009910:	4613      	mov	r3, r2
 8009912:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009922:	78bb      	ldrb	r3, [r7, #2]
 8009924:	883a      	ldrh	r2, [r7, #0]
 8009926:	78f9      	ldrb	r1, [r7, #3]
 8009928:	f7f9 f8ed 	bl	8002b06 <HAL_PCD_EP_Open>
 800992c:	4603      	mov	r3, r0
 800992e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f91c 	bl	8009b70 <USBD_Get_USB_Status>
 8009938:	4603      	mov	r3, r0
 800993a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800993c:	7bbb      	ldrb	r3, [r7, #14]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009960:	78fa      	ldrb	r2, [r7, #3]
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f7f9 f936 	bl	8002bd6 <HAL_PCD_EP_Close>
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 f8fd 	bl	8009b70 <USBD_Get_USB_Status>
 8009976:	4603      	mov	r3, r0
 8009978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997a:	7bbb      	ldrb	r3, [r7, #14]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	4611      	mov	r1, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f9 fa0e 	bl	8002dc4 <HAL_PCD_EP_SetStall>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 f8de 	bl	8009b70 <USBD_Get_USB_Status>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099dc:	78fa      	ldrb	r2, [r7, #3]
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7f9 fa53 	bl	8002e8c <HAL_PCD_EP_ClrStall>
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f8bf 	bl	8009b70 <USBD_Get_USB_Status>
 80099f2:	4603      	mov	r3, r0
 80099f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	da0b      	bge.n	8009a34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a1c:	78fb      	ldrb	r3, [r7, #3]
 8009a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a22:	68f9      	ldr	r1, [r7, #12]
 8009a24:	4613      	mov	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	333e      	adds	r3, #62	; 0x3e
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	e00b      	b.n	8009a4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	440b      	add	r3, r1
 8009a46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009a4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a72:	78fa      	ldrb	r2, [r7, #3]
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f9 f820 	bl	8002abc <HAL_PCD_SetAddress>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 f874 	bl	8009b70 <USBD_Get_USB_Status>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b086      	sub	sp, #24
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ab4:	7af9      	ldrb	r1, [r7, #11]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	f7f9 f939 	bl	8002d30 <HAL_PCD_EP_Transmit>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 f853 	bl	8009b70 <USBD_Get_USB_Status>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ace:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009af6:	7af9      	ldrb	r1, [r7, #11]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	f7f9 f8b5 	bl	8002c6a <HAL_PCD_EP_Receive>
 8009b00:	4603      	mov	r3, r0
 8009b02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 f832 	bl	8009b70 <USBD_Get_USB_Status>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b10:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	460b      	mov	r3, r1
 8009b24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b2c:	78fa      	ldrb	r2, [r7, #3]
 8009b2e:	4611      	mov	r1, r2
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7f9 f8e5 	bl	8002d00 <HAL_PCD_EP_GetRxCount>
 8009b36:	4603      	mov	r3, r0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b48:	4b03      	ldr	r3, [pc, #12]	; (8009b58 <USBD_static_malloc+0x18>)
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	20001ff0 	.word	0x20001ff0

08009b5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]

}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d817      	bhi.n	8009bb4 <USBD_Get_USB_Status+0x44>
 8009b84:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <USBD_Get_USB_Status+0x1c>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009b9d 	.word	0x08009b9d
 8009b90:	08009ba3 	.word	0x08009ba3
 8009b94:	08009ba9 	.word	0x08009ba9
 8009b98:	08009baf 	.word	0x08009baf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba0:	e00b      	b.n	8009bba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba6:	e008      	b.n	8009bba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	73fb      	strb	r3, [r7, #15]
    break;
 8009bac:	e005      	b.n	8009bba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb2:	e002      	b.n	8009bba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb8:	bf00      	nop
  }
  return usb_status;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <__libc_init_array>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	4d0d      	ldr	r5, [pc, #52]	; (8009c00 <__libc_init_array+0x38>)
 8009bcc:	4c0d      	ldr	r4, [pc, #52]	; (8009c04 <__libc_init_array+0x3c>)
 8009bce:	1b64      	subs	r4, r4, r5
 8009bd0:	10a4      	asrs	r4, r4, #2
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	42a6      	cmp	r6, r4
 8009bd6:	d109      	bne.n	8009bec <__libc_init_array+0x24>
 8009bd8:	4d0b      	ldr	r5, [pc, #44]	; (8009c08 <__libc_init_array+0x40>)
 8009bda:	4c0c      	ldr	r4, [pc, #48]	; (8009c0c <__libc_init_array+0x44>)
 8009bdc:	f000 f82e 	bl	8009c3c <_init>
 8009be0:	1b64      	subs	r4, r4, r5
 8009be2:	10a4      	asrs	r4, r4, #2
 8009be4:	2600      	movs	r6, #0
 8009be6:	42a6      	cmp	r6, r4
 8009be8:	d105      	bne.n	8009bf6 <__libc_init_array+0x2e>
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf0:	4798      	blx	r3
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7ee      	b.n	8009bd4 <__libc_init_array+0xc>
 8009bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfa:	4798      	blx	r3
 8009bfc:	3601      	adds	r6, #1
 8009bfe:	e7f2      	b.n	8009be6 <__libc_init_array+0x1e>
 8009c00:	08009d10 	.word	0x08009d10
 8009c04:	08009d10 	.word	0x08009d10
 8009c08:	08009d10 	.word	0x08009d10
 8009c0c:	08009d14 	.word	0x08009d14

08009c10 <memcpy>:
 8009c10:	440a      	add	r2, r1
 8009c12:	4291      	cmp	r1, r2
 8009c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c18:	d100      	bne.n	8009c1c <memcpy+0xc>
 8009c1a:	4770      	bx	lr
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c26:	4291      	cmp	r1, r2
 8009c28:	d1f9      	bne.n	8009c1e <memcpy+0xe>
 8009c2a:	bd10      	pop	{r4, pc}

08009c2c <memset>:
 8009c2c:	4402      	add	r2, r0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d100      	bne.n	8009c36 <memset+0xa>
 8009c34:	4770      	bx	lr
 8009c36:	f803 1b01 	strb.w	r1, [r3], #1
 8009c3a:	e7f9      	b.n	8009c30 <memset+0x4>

08009c3c <_init>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr

08009c48 <_fini>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr
