
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a684  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800a824  0800a824  0001a824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa88  0800aa88  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa90  0800aa90  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa90  0800aa90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa94  0800aa94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800aa98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002260  20000160  0800abf8  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023c0  0800abf8  000223c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018107  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368e  00000000  00000000  00038297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003b928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005732  00000000  00000000  0003df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018470  00000000  00000000  000436b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926ad  00000000  00000000  0005bb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee1cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005710  00000000  00000000  000ee220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a80c 	.word	0x0800a80c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800a80c 	.word	0x0800a80c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  sysValinit();
 8000598:	f000 f8d4 	bl	8000744 <sysValinit>

  HAL_Init();
 800059c:	f000 fec0 	bl	8001320 <HAL_Init>
  SystemClock_Config();
 80005a0:	f000 fb02 	bl	8000ba8 <SystemClock_Config>
  MX_GPIO_Init();
 80005a4:	f000 fc40 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 fc08 	bl	8000dbc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 fbb2 	bl	8000d14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 fbda 	bl	8000d68 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f008 ff7a 	bl	80094ac <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80005b8:	f000 fb5e 	bl	8000c78 <MX_TIM4_Init>



  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 80005bc:	4850      	ldr	r0, [pc, #320]	; (8000700 <main+0x16c>)
 80005be:	f003 fd35 	bl	800402c <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 80005c2:	22ff      	movs	r2, #255	; 0xff
 80005c4:	494f      	ldr	r1, [pc, #316]	; (8000704 <main+0x170>)
 80005c6:	4850      	ldr	r0, [pc, #320]	; (8000708 <main+0x174>)
 80005c8:	f004 fa05 	bl	80049d6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80005cc:	4b4f      	ldr	r3, [pc, #316]	; (800070c <main+0x178>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b4e      	ldr	r3, [pc, #312]	; (800070c <main+0x178>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f022 0208 	bic.w	r2, r2, #8
 80005da:	601a      	str	r2, [r3, #0]

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 80005dc:	22ff      	movs	r2, #255	; 0xff
 80005de:	494c      	ldr	r1, [pc, #304]	; (8000710 <main+0x17c>)
 80005e0:	484c      	ldr	r0, [pc, #304]	; (8000714 <main+0x180>)
 80005e2:	f004 f9f8 	bl	80049d6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005e6:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <main+0x184>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b4a      	ldr	r3, [pc, #296]	; (8000718 <main+0x184>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f022 0208 	bic.w	r2, r2, #8
 80005f4:	601a      	str	r2, [r3, #0]
   *			MAIN CODE
   * */

  // Wait LTE module boot
INIT_LTE :
  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);			// BUSY 1
 80005f6:	2201      	movs	r2, #1
 80005f8:	2120      	movs	r1, #32
 80005fa:	4848      	ldr	r0, [pc, #288]	; (800071c <main+0x188>)
 80005fc:	f001 fdbe 	bl	800217c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ONLINE, GPIO_PIN_RESET);		// ONLINE 0
 8000600:	2200      	movs	r2, #0
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	4845      	ldr	r0, [pc, #276]	; (800071c <main+0x188>)
 8000606:	f001 fdb9 	bl	800217c <HAL_GPIO_WritePin>
  while(sysCounter.main_ms_counter < 500);				// Wait MCU boot
 800060a:	bf00      	nop
 800060c:	4b44      	ldr	r3, [pc, #272]	; (8000720 <main+0x18c>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000614:	d3fa      	bcc.n	800060c <main+0x78>
  SerialDebug("[MCU] -> Wait system boot 30sec.\r\n");
 8000616:	4843      	ldr	r0, [pc, #268]	; (8000724 <main+0x190>)
 8000618:	f000 f8b6 	bl	8000788 <SerialDebug>

  while(sysCounter.main_ms_counter < LTEbootTime);		// Wait LTE module boot
 800061c:	bf00      	nop
 800061e:	4b40      	ldr	r3, [pc, #256]	; (8000720 <main+0x18c>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	f247 522f 	movw	r2, #29999	; 0x752f
 8000626:	4293      	cmp	r3, r2
 8000628:	d9f9      	bls.n	800061e <main+0x8a>
  initLTE();											// Start init LTE module
 800062a:	f000 f953 	bl	80008d4 <initLTE>


  // Wait network register
  SerialDebug("[MCU] -> Wait network register");
 800062e:	483e      	ldr	r0, [pc, #248]	; (8000728 <main+0x194>)
 8000630:	f000 f8aa 	bl	8000788 <SerialDebug>

  while(networkRegStatus() != 1) {
 8000634:	e016      	b.n	8000664 <main+0xd0>
	  if(sysCounter.rebootCount == 120) {
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <main+0x18c>)
 8000638:	799b      	ldrb	r3, [r3, #6]
 800063a:	2b78      	cmp	r3, #120	; 0x78
 800063c:	d105      	bne.n	800064a <main+0xb6>
		  sysCounter.rebootCount = 0;
 800063e:	4b38      	ldr	r3, [pc, #224]	; (8000720 <main+0x18c>)
 8000640:	2200      	movs	r2, #0
 8000642:	719a      	strb	r2, [r3, #6]
		  RebootLTE();
 8000644:	f000 fa5a 	bl	8000afc <RebootLTE>
		  goto INIT_LTE;
 8000648:	e7d5      	b.n	80005f6 <main+0x62>
	  }

	  SerialDebug(".");
 800064a:	4838      	ldr	r0, [pc, #224]	; (800072c <main+0x198>)
 800064c:	f000 f89c 	bl	8000788 <SerialDebug>
	  sysCounter.rebootCount++;
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <main+0x18c>)
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	3301      	adds	r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b31      	ldr	r3, [pc, #196]	; (8000720 <main+0x18c>)
 800065a:	719a      	strb	r2, [r3, #6]
	  HAL_Delay(500);
 800065c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000660:	f000 fed0 	bl	8001404 <HAL_Delay>
  while(networkRegStatus() != 1) {
 8000664:	f000 fa28 	bl	8000ab8 <networkRegStatus>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d1e3      	bne.n	8000636 <main+0xa2>
  }
  sysCounter.rebootCount = 0;
 800066e:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <main+0x18c>)
 8000670:	2200      	movs	r2, #0
 8000672:	719a      	strb	r2, [r3, #6]
  SerialDebug("\r\n");
 8000674:	482e      	ldr	r0, [pc, #184]	; (8000730 <main+0x19c>)
 8000676:	f000 f887 	bl	8000788 <SerialDebug>


  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);		// BUSY 0
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	4827      	ldr	r0, [pc, #156]	; (800071c <main+0x188>)
 8000680:	f001 fd7c 	bl	800217c <HAL_GPIO_WritePin>
  SerialDebug("[MCU] -> System init done\r\n");
 8000684:	482b      	ldr	r0, [pc, #172]	; (8000734 <main+0x1a0>)
 8000686:	f000 f87f 	bl	8000788 <SerialDebug>

  SendCMD_LTE("AT+QGPS=1\r\n");							// Enable GNSS
 800068a:	482b      	ldr	r0, [pc, #172]	; (8000738 <main+0x1a4>)
 800068c:	f000 f892 	bl	80007b4 <SendCMD_LTE>
  SerialDebug("[MCU] -> Enable GNSS done\r\n");
 8000690:	482a      	ldr	r0, [pc, #168]	; (800073c <main+0x1a8>)
 8000692:	f000 f879 	bl	8000788 <SerialDebug>



  while(1) {
	  // if LTE ERROR
	  while(sysFlag.LTE_ERROR == 1) {
 8000696:	e02d      	b.n	80006f4 <main+0x160>
		  if(sysCounter.main_ms_counter == 0) {
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <main+0x18c>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d120      	bne.n	80006e2 <main+0x14e>
			  sysCounter.prev_ERRORtime = 0;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <main+0x18c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	809a      	strh	r2, [r3, #4]
		  }


		  while((sysCounter.main_ms_counter - sysCounter.prev_ERRORtime) >= 500) {
 80006a6:	e01c      	b.n	80006e2 <main+0x14e>
			  HAL_GPIO_TogglePin(GPIOB, ERROR);
 80006a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ac:	481b      	ldr	r0, [pc, #108]	; (800071c <main+0x188>)
 80006ae:	f001 fd7e 	bl	80021ae <HAL_GPIO_TogglePin>
			  sysCounter.rebootCount++;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <main+0x18c>)
 80006b4:	799b      	ldrb	r3, [r3, #6]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <main+0x18c>)
 80006bc:	719a      	strb	r2, [r3, #6]

			  // restart after 10 sec. -> 20 tick.
			  if(sysCounter.rebootCount == 20) {
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <main+0x18c>)
 80006c0:	799b      	ldrb	r3, [r3, #6]
 80006c2:	2b14      	cmp	r3, #20
 80006c4:	d109      	bne.n	80006da <main+0x146>
				  sysCounter.rebootCount = 0;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <main+0x18c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	719a      	strb	r2, [r3, #6]
				  RebootLTE();
 80006cc:	f000 fa16 	bl	8000afc <RebootLTE>
				  sysCounter.prev_ERRORtime = sysCounter.main_ms_counter;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <main+0x18c>)
 80006d2:	881a      	ldrh	r2, [r3, #0]
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <main+0x18c>)
 80006d6:	809a      	strh	r2, [r3, #4]
				  goto INIT_LTE;
 80006d8:	e78d      	b.n	80005f6 <main+0x62>
			  }

			  sysCounter.prev_ERRORtime = sysCounter.main_ms_counter;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <main+0x18c>)
 80006dc:	881a      	ldrh	r2, [r3, #0]
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <main+0x18c>)
 80006e0:	809a      	strh	r2, [r3, #4]
		  while((sysCounter.main_ms_counter - sysCounter.prev_ERRORtime) >= 500) {
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <main+0x18c>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <main+0x18c>)
 80006ea:	889b      	ldrh	r3, [r3, #4]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006f2:	dad9      	bge.n	80006a8 <main+0x114>
	  while(sysFlag.LTE_ERROR == 1) {
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <main+0x1ac>)
 80006f6:	785b      	ldrb	r3, [r3, #1]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d0cd      	beq.n	8000698 <main+0x104>
 80006fc:	e7fa      	b.n	80006f4 <main+0x160>
 80006fe:	bf00      	nop
 8000700:	200005fc 	.word	0x200005fc
 8000704:	200002fc 	.word	0x200002fc
 8000708:	20000688 	.word	0x20000688
 800070c:	2000072c 	.word	0x2000072c
 8000710:	200001fc 	.word	0x200001fc
 8000714:	20000644 	.word	0x20000644
 8000718:	200006cc 	.word	0x200006cc
 800071c:	40020400 	.word	0x40020400
 8000720:	2000078c 	.word	0x2000078c
 8000724:	0800a824 	.word	0x0800a824
 8000728:	0800a848 	.word	0x0800a848
 800072c:	0800a868 	.word	0x0800a868
 8000730:	0800a86c 	.word	0x0800a86c
 8000734:	0800a870 	.word	0x0800a870
 8000738:	0800a88c 	.word	0x0800a88c
 800073c:	0800a898 	.word	0x0800a898
 8000740:	20000798 	.word	0x20000798

08000744 <sysValinit>:


// user custom functions

// init startup value at boot
void sysValinit(void) {
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <sysValinit+0x3c>)
 800074a:	2200      	movs	r2, #0
 800074c:	801a      	strh	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <sysValinit+0x3c>)
 8000750:	2200      	movs	r2, #0
 8000752:	805a      	strh	r2, [r3, #2]
	sysCounter.prev_ERRORtime = 0;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <sysValinit+0x3c>)
 8000756:	2200      	movs	r2, #0
 8000758:	809a      	strh	r2, [r3, #4]
	sysCounter.rebootCount = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <sysValinit+0x3c>)
 800075c:	2200      	movs	r2, #0
 800075e:	719a      	strb	r2, [r3, #6]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <sysValinit+0x3c>)
 8000762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000766:	811a      	strh	r2, [r3, #8]

	sysFlag.LTE_CMD_Send = 0;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <sysValinit+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_ERROR = 0;
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <sysValinit+0x40>)
 8000770:	2200      	movs	r2, #0
 8000772:	705a      	strb	r2, [r3, #1]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	2000078c 	.word	0x2000078c
 8000784:	20000798 	.word	0x20000798

08000788 <SerialDebug>:


// Send text via USB VCOM port
void SerialDebug(char *msgDebug) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	while(CDC_Transmit_FS((uint8_t *) msgDebug, strlen(msgDebug)) != USBD_OK);
 8000790:	bf00      	nop
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fd24 	bl	80001e0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29b      	uxth	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f008 ff42 	bl	8009628 <CDC_Transmit_FS>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f3      	bne.n	8000792 <SerialDebug+0xa>
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SendCMD_LTE>:
// UART Tx [Polling method]
void SendData(char *msg) {
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 10);
}

void SendCMD_LTE(char *msg) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 10);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fd0f 	bl	80001e0 <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	230a      	movs	r3, #10
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <SendCMD_LTE+0x24>)
 80007cc:	f004 f871 	bl	80048b2 <HAL_UART_Transmit>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000688 	.word	0x20000688

080007dc <HAL_UARTEx_RxEventCallback>:


// UART Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a22      	ldr	r2, [pc, #136]	; (8000878 <HAL_UARTEx_RxEventCallback+0x9c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d11c      	bne.n	800082c <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 80007f2:	22ff      	movs	r2, #255	; 0xff
 80007f4:	4921      	ldr	r1, [pc, #132]	; (800087c <HAL_UARTEx_RxEventCallback+0xa0>)
 80007f6:	4822      	ldr	r0, [pc, #136]	; (8000880 <HAL_UARTEx_RxEventCallback+0xa4>)
 80007f8:	f004 f8ed 	bl	80049d6 <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	2100      	movs	r1, #0
 8000800:	4820      	ldr	r0, [pc, #128]	; (8000884 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000802:	f009 fb9b 	bl	8009f3c <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	461a      	mov	r2, r3
 800080a:	491c      	ldr	r1, [pc, #112]	; (800087c <HAL_UARTEx_RxEventCallback+0xa0>)
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <HAL_UARTEx_RxEventCallback+0xa8>)
 800080e:	f009 fb87 	bl	8009f20 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 8000812:	22ff      	movs	r2, #255	; 0xff
 8000814:	2100      	movs	r1, #0
 8000816:	4819      	ldr	r0, [pc, #100]	; (800087c <HAL_UARTEx_RxEventCallback+0xa0>)
 8000818:	f009 fb90 	bl	8009f3c <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <HAL_UARTEx_RxEventCallback+0xac>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_UARTEx_RxEventCallback+0xac>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f022 0208 	bic.w	r2, r2, #8
 800082a:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <HAL_UARTEx_RxEventCallback+0xb0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d11c      	bne.n	8000870 <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	4915      	ldr	r1, [pc, #84]	; (8000890 <HAL_UARTEx_RxEventCallback+0xb4>)
 800083a:	4816      	ldr	r0, [pc, #88]	; (8000894 <HAL_UARTEx_RxEventCallback+0xb8>)
 800083c:	f004 f8cb 	bl	80049d6 <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 8000840:	22ff      	movs	r2, #255	; 0xff
 8000842:	2100      	movs	r1, #0
 8000844:	4814      	ldr	r0, [pc, #80]	; (8000898 <HAL_UARTEx_RxEventCallback+0xbc>)
 8000846:	f009 fb79 	bl	8009f3c <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 800084a:	887b      	ldrh	r3, [r7, #2]
 800084c:	461a      	mov	r2, r3
 800084e:	4910      	ldr	r1, [pc, #64]	; (8000890 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <HAL_UARTEx_RxEventCallback+0xbc>)
 8000852:	f009 fb65 	bl	8009f20 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	2100      	movs	r1, #0
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <HAL_UARTEx_RxEventCallback+0xb4>)
 800085c:	f009 fb6e 	bl	8009f3c <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_UARTEx_RxEventCallback+0xc0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_UARTEx_RxEventCallback+0xc0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 0208 	bic.w	r2, r2, #8
 800086e:	601a      	str	r2, [r3, #0]
	}
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40004400 	.word	0x40004400
 800087c:	200002fc 	.word	0x200002fc
 8000880:	20000688 	.word	0x20000688
 8000884:	200004fc 	.word	0x200004fc
 8000888:	2000072c 	.word	0x2000072c
 800088c:	40011000 	.word	0x40011000
 8000890:	200001fc 	.word	0x200001fc
 8000894:	20000644 	.word	0x20000644
 8000898:	200003fc 	.word	0x200003fc
 800089c:	200006cc 	.word	0x200006cc

080008a0 <HAL_TIM_PeriodElapsedCallback>:


// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d105      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x1e>
		sysCounter.main_ms_counter++;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008bc:	801a      	strh	r2, [r3, #0]
	}
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40000800 	.word	0x40000800
 80008d0:	2000078c 	.word	0x2000078c

080008d4 <initLTE>:



// EC25 functions
// init sequence
void initLTE(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	SerialDebug("[MCU] -> start initialize LTE module\r\n");
 80008da:	4862      	ldr	r0, [pc, #392]	; (8000a64 <initLTE+0x190>)
 80008dc:	f7ff ff54 	bl	8000788 <SerialDebug>

	for(unsigned char countSeq = 0; countSeq < 9; countSeq++) {
 80008e0:	2300      	movs	r3, #0
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	e0b5      	b.n	8000a52 <initLTE+0x17e>


		switch(countSeq) {
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b08      	cmp	r3, #8
 80008ea:	d842      	bhi.n	8000972 <initLTE+0x9e>
 80008ec:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <initLTE+0x20>)
 80008ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	08000919 	.word	0x08000919
 80008f8:	08000923 	.word	0x08000923
 80008fc:	0800092d 	.word	0x0800092d
 8000900:	08000937 	.word	0x08000937
 8000904:	08000941 	.word	0x08000941
 8000908:	0800094b 	.word	0x0800094b
 800090c:	08000955 	.word	0x08000955
 8000910:	0800095f 	.word	0x0800095f
 8000914:	08000969 	.word	0x08000969
			// Turn off echo
			case 0 :
				sprintf(textBuffer, "ATE0\r\n");
 8000918:	4953      	ldr	r1, [pc, #332]	; (8000a68 <initLTE+0x194>)
 800091a:	4854      	ldr	r0, [pc, #336]	; (8000a6c <initLTE+0x198>)
 800091c:	f009 fb16 	bl	8009f4c <siprintf>
				break;
 8000920:	e027      	b.n	8000972 <initLTE+0x9e>

			// Low -> High on DTR: Change to command mode while remaining the connected call
			case 1 :
				sprintf(textBuffer, "AT&D1\r\n");
 8000922:	4953      	ldr	r1, [pc, #332]	; (8000a70 <initLTE+0x19c>)
 8000924:	4851      	ldr	r0, [pc, #324]	; (8000a6c <initLTE+0x198>)
 8000926:	f009 fb11 	bl	8009f4c <siprintf>
				break;
 800092a:	e022      	b.n	8000972 <initLTE+0x9e>

			// Set frequency band
			case 2 :
				sprintf(textBuffer, "AT+QCFG=\"Band\",511,1\r\n");
 800092c:	4951      	ldr	r1, [pc, #324]	; (8000a74 <initLTE+0x1a0>)
 800092e:	484f      	ldr	r0, [pc, #316]	; (8000a6c <initLTE+0x198>)
 8000930:	f009 fb0c 	bl	8009f4c <siprintf>
				break;
 8000934:	e01d      	b.n	8000972 <initLTE+0x9e>

			// Disable GNSS
			case 3 :
				sprintf(textBuffer, "AT+QGPSEND\r\n");
 8000936:	4950      	ldr	r1, [pc, #320]	; (8000a78 <initLTE+0x1a4>)
 8000938:	484c      	ldr	r0, [pc, #304]	; (8000a6c <initLTE+0x198>)
 800093a:	f009 fb07 	bl	8009f4c <siprintf>
				break;
 800093e:	e018      	b.n	8000972 <initLTE+0x9e>

			// Output via debug UART port
			case 4 :
				sprintf(textBuffer, "AT+QGPSCFG=\"outport\",\"uartdebug\"\r\n");
 8000940:	494e      	ldr	r1, [pc, #312]	; (8000a7c <initLTE+0x1a8>)
 8000942:	484a      	ldr	r0, [pc, #296]	; (8000a6c <initLTE+0x198>)
 8000944:	f009 fb02 	bl	8009f4c <siprintf>
				break;
 8000948:	e013      	b.n	8000972 <initLTE+0x9e>

			// Enable NMEA
			case 5 :
				sprintf(textBuffer, "AT+QGPSCFG=\"nmeasrc\",1\r\n");
 800094a:	494d      	ldr	r1, [pc, #308]	; (8000a80 <initLTE+0x1ac>)
 800094c:	4847      	ldr	r0, [pc, #284]	; (8000a6c <initLTE+0x198>)
 800094e:	f009 fafd 	bl	8009f4c <siprintf>
				break;
 8000952:	e00e      	b.n	8000972 <initLTE+0x9e>

			// NMEA type output GPRMC only
			case 6:
				sprintf(textBuffer, "AT+QGPSCFG=\"gpsnmeatype\",2\r\n");
 8000954:	494b      	ldr	r1, [pc, #300]	; (8000a84 <initLTE+0x1b0>)
 8000956:	4845      	ldr	r0, [pc, #276]	; (8000a6c <initLTE+0x198>)
 8000958:	f009 faf8 	bl	8009f4c <siprintf>
				break;
 800095c:	e009      	b.n	8000972 <initLTE+0x9e>

			// Set status network registration
			case 7:
				sprintf(textBuffer, "AT+CREG=1\r\n");
 800095e:	494a      	ldr	r1, [pc, #296]	; (8000a88 <initLTE+0x1b4>)
 8000960:	4842      	ldr	r0, [pc, #264]	; (8000a6c <initLTE+0x198>)
 8000962:	f009 faf3 	bl	8009f4c <siprintf>
				break;
 8000966:	e004      	b.n	8000972 <initLTE+0x9e>

			// // Turn on GNSS mode 1 : Stand-alone
			case 8 :
				sprintf(textBuffer, "AT+QGPS=1\r\n");
 8000968:	4948      	ldr	r1, [pc, #288]	; (8000a8c <initLTE+0x1b8>)
 800096a:	4840      	ldr	r0, [pc, #256]	; (8000a6c <initLTE+0x198>)
 800096c:	f009 faee 	bl	8009f4c <siprintf>
				break;
 8000970:	bf00      	nop

		}



		SendCMD_LTE((char *)textBuffer);						// Send CMD
 8000972:	483e      	ldr	r0, [pc, #248]	; (8000a6c <initLTE+0x198>)
 8000974:	f7ff ff1e 	bl	80007b4 <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 8000978:	4b45      	ldr	r3, [pc, #276]	; (8000a90 <initLTE+0x1bc>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <initLTE+0x1c0>)
 8000980:	881a      	ldrh	r2, [r3, #0]
 8000982:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <initLTE+0x1c0>)
 8000984:	805a      	strh	r2, [r3, #2]


		while(sysFlag.LTE_CMD_Send == 1) {
 8000986:	e052      	b.n	8000a2e <initLTE+0x15a>
			// OK Conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8000988:	4943      	ldr	r1, [pc, #268]	; (8000a98 <initLTE+0x1c4>)
 800098a:	4844      	ldr	r0, [pc, #272]	; (8000a9c <initLTE+0x1c8>)
 800098c:	f000 f8d2 	bl	8000b34 <findTarget>
 8000990:	4603      	mov	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d10a      	bne.n	80009ac <initLTE+0xd8>
				SerialDebug("[LTE] -> OK\r\n");
 8000996:	4842      	ldr	r0, [pc, #264]	; (8000aa0 <initLTE+0x1cc>)
 8000998:	f7ff fef6 	bl	8000788 <SerialDebug>


				sysFlag.LTE_CMD_Send = 0;
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <initLTE+0x1bc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80009a2:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <initLTE+0x1c0>)
 80009a4:	881a      	ldrh	r2, [r3, #0]
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <initLTE+0x1c0>)
 80009a8:	805a      	strh	r2, [r3, #2]
				goto CLEARMAINBUFF;
 80009aa:	e045      	b.n	8000a38 <initLTE+0x164>
			}

			// ERROR Conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80009ac:	493d      	ldr	r1, [pc, #244]	; (8000aa4 <initLTE+0x1d0>)
 80009ae:	483b      	ldr	r0, [pc, #236]	; (8000a9c <initLTE+0x1c8>)
 80009b0:	f000 f8c0 	bl	8000b34 <findTarget>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d121      	bne.n	80009fe <initLTE+0x12a>
				SerialDebug("[LTE] -> ");
 80009ba:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <initLTE+0x1d4>)
 80009bc:	f7ff fee4 	bl	8000788 <SerialDebug>
				SerialDebug((char *)lteComm_MainBuff);
 80009c0:	4836      	ldr	r0, [pc, #216]	; (8000a9c <initLTE+0x1c8>)
 80009c2:	f7ff fee1 	bl	8000788 <SerialDebug>
				SerialDebug("\r\n");
 80009c6:	4839      	ldr	r0, [pc, #228]	; (8000aac <initLTE+0x1d8>)
 80009c8:	f7ff fede 	bl	8000788 <SerialDebug>

				// Case 3 : Disable GNSS fail -> ignore error 505
				if(countSeq == 3 && findTarget(lteComm_MainBuff, "505") == 1) {
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d10a      	bne.n	80009e8 <initLTE+0x114>
 80009d2:	4937      	ldr	r1, [pc, #220]	; (8000ab0 <initLTE+0x1dc>)
 80009d4:	4831      	ldr	r0, [pc, #196]	; (8000a9c <initLTE+0x1c8>)
 80009d6:	f000 f8ad 	bl	8000b34 <findTarget>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d103      	bne.n	80009e8 <initLTE+0x114>
					sysFlag.LTE_ERROR = 0;
 80009e0:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <initLTE+0x1bc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	705a      	strb	r2, [r3, #1]
 80009e6:	e002      	b.n	80009ee <initLTE+0x11a>
				}
				else {
					sysFlag.LTE_ERROR = 1;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <initLTE+0x1bc>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	705a      	strb	r2, [r3, #1]
				}

				sysFlag.LTE_CMD_Send = 0;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <initLTE+0x1bc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <initLTE+0x1c0>)
 80009f6:	881a      	ldrh	r2, [r3, #0]
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <initLTE+0x1c0>)
 80009fa:	805a      	strh	r2, [r3, #2]
				goto CLEARMAINBUFF;
 80009fc:	e01c      	b.n	8000a38 <initLTE+0x164>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <initLTE+0x1c0>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <initLTE+0x1c0>)
 8000a06:	885b      	ldrh	r3, [r3, #2]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <initLTE+0x1c0>)
 8000a0c:	8912      	ldrh	r2, [r2, #8]
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	db0d      	blt.n	8000a2e <initLTE+0x15a>
				SerialDebug("[MCU] -> LTE TIME OUT\r\n");
 8000a12:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <initLTE+0x1e0>)
 8000a14:	f7ff feb8 	bl	8000788 <SerialDebug>

				sysFlag.LTE_ERROR = 1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <initLTE+0x1bc>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	705a      	strb	r2, [r3, #1]
				sysFlag.LTE_CMD_Send = 0;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <initLTE+0x1bc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <initLTE+0x1c0>)
 8000a26:	881a      	ldrh	r2, [r3, #0]
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <initLTE+0x1c0>)
 8000a2a:	805a      	strh	r2, [r3, #2]
				goto CLEARMAINBUFF;
 8000a2c:	e004      	b.n	8000a38 <initLTE+0x164>
		while(sysFlag.LTE_CMD_Send == 1) {
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <initLTE+0x1bc>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d0a8      	beq.n	8000988 <initLTE+0xb4>
			}


		}

		CLEARMAINBUFF:
 8000a36:	bf00      	nop
			memset(textBuffer, 0x00, sizeof(textBuffer));
 8000a38:	227d      	movs	r2, #125	; 0x7d
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <initLTE+0x198>)
 8000a3e:	f009 fa7d 	bl	8009f3c <memset>
			memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	2100      	movs	r1, #0
 8000a46:	4815      	ldr	r0, [pc, #84]	; (8000a9c <initLTE+0x1c8>)
 8000a48:	f009 fa78 	bl	8009f3c <memset>
	for(unsigned char countSeq = 0; countSeq < 9; countSeq++) {
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	f67f af46 	bls.w	80008e6 <initLTE+0x12>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	0800a8b4 	.word	0x0800a8b4
 8000a68:	0800a8dc 	.word	0x0800a8dc
 8000a6c:	2000017c 	.word	0x2000017c
 8000a70:	0800a8e4 	.word	0x0800a8e4
 8000a74:	0800a8ec 	.word	0x0800a8ec
 8000a78:	0800a904 	.word	0x0800a904
 8000a7c:	0800a914 	.word	0x0800a914
 8000a80:	0800a938 	.word	0x0800a938
 8000a84:	0800a954 	.word	0x0800a954
 8000a88:	0800a974 	.word	0x0800a974
 8000a8c:	0800a88c 	.word	0x0800a88c
 8000a90:	20000798 	.word	0x20000798
 8000a94:	2000078c 	.word	0x2000078c
 8000a98:	0800a980 	.word	0x0800a980
 8000a9c:	200004fc 	.word	0x200004fc
 8000aa0:	0800a984 	.word	0x0800a984
 8000aa4:	0800a994 	.word	0x0800a994
 8000aa8:	0800a99c 	.word	0x0800a99c
 8000aac:	0800a86c 	.word	0x0800a86c
 8000ab0:	0800a9a8 	.word	0x0800a9a8
 8000ab4:	0800a9ac 	.word	0x0800a9ac

08000ab8 <networkRegStatus>:


int networkRegStatus(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	SendCMD_LTE("AT+CREG?\r\n");
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <networkRegStatus+0x38>)
 8000abe:	f7ff fe79 	bl	80007b4 <SendCMD_LTE>

	if(findTarget(lteComm_MainBuff, "+CREG: 1") == 1) {
 8000ac2:	490c      	ldr	r1, [pc, #48]	; (8000af4 <networkRegStatus+0x3c>)
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <networkRegStatus+0x40>)
 8000ac6:	f000 f835 	bl	8000b34 <findTarget>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d106      	bne.n	8000ade <networkRegStatus+0x26>
		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8000ad0:	22ff      	movs	r2, #255	; 0xff
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	; (8000af8 <networkRegStatus+0x40>)
 8000ad6:	f009 fa31 	bl	8009f3c <memset>
		return 1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e005      	b.n	8000aea <networkRegStatus+0x32>
	}

	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <networkRegStatus+0x40>)
 8000ae4:	f009 fa2a 	bl	8009f3c <memset>
	return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	0800a9c4 	.word	0x0800a9c4
 8000af4:	0800a9d0 	.word	0x0800a9d0
 8000af8:	200004fc 	.word	0x200004fc

08000afc <RebootLTE>:
/*
 * @brief Reboot LTE module
 * @retval 0 - wait
 * @retval 1 - done
 */
int RebootLTE(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	SendCMD_LTE("AT+QPOWD\r\n");
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <RebootLTE+0x2c>)
 8000b02:	f7ff fe57 	bl	80007b4 <SendCMD_LTE>

	while(findTarget(lteComm_MainBuff, "POWERED DOWN") != 1) {
 8000b06:	bf00      	nop
 8000b08:	4908      	ldr	r1, [pc, #32]	; (8000b2c <RebootLTE+0x30>)
 8000b0a:	4809      	ldr	r0, [pc, #36]	; (8000b30 <RebootLTE+0x34>)
 8000b0c:	f000 f812 	bl	8000b34 <findTarget>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d001      	beq.n	8000b1a <RebootLTE+0x1e>
		return 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e004      	b.n	8000b24 <RebootLTE+0x28>
	}
	HAL_Delay(10000);
 8000b1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b1e:	f000 fc71 	bl	8001404 <HAL_Delay>
	return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	0800a9dc 	.word	0x0800a9dc
 8000b2c:	0800a9e8 	.word	0x0800a9e8
 8000b30:	200004fc 	.word	0x200004fc

08000b34 <findTarget>:
/*
 * @brief find string if match it return
 * @retval 0 - Not found
 * @retval 1 - found
 */
int findTarget(const char *inStr, const char *target) {
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
    int i, j;
    for (i = 0; inStr[i] != '\0'; i++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e023      	b.n	8000b8c <findTarget+0x58>
        j = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8000b48:	e002      	b.n	8000b50 <findTarget+0x1c>
            j++;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00c      	beq.n	8000b76 <findTarget+0x42>
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	4413      	add	r3, r2
 8000b62:	461a      	mov	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	6839      	ldr	r1, [r7, #0]
 8000b6e:	440b      	add	r3, r1
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d0e9      	beq.n	8000b4a <findTarget+0x16>
        }
        if (target[j] == '\0') {
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <findTarget+0x52>
            return 1; // Return 1 if found
 8000b82:	2301      	movs	r3, #1
 8000b84:	e009      	b.n	8000b9a <findTarget+0x66>
    for (i = 0; inStr[i] != '\0'; i++) {
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1d5      	bne.n	8000b44 <findTarget+0x10>
        }
    }
    return 0; // Return 0 if not found
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2230      	movs	r2, #48	; 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f009 f9c0 	bl	8009f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c18:	2319      	movs	r3, #25
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c1c:	2390      	movs	r3, #144	; 0x90
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c24:	2303      	movs	r3, #3
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0320 	add.w	r3, r7, #32
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fd55 	bl	80036dc <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c38:	f000 f954 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2302      	movs	r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2102      	movs	r1, #2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 ffb7 	bl	8003bcc <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c64:	f000 f93e 	bl	8000ee4 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000c96:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <MX_TIM4_Init+0x98>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000c9c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000ca0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cba:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cbc:	f003 f966 	bl	8003f8c <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000cc6:	f000 f90d 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cd8:	f003 fb12 	bl	8004300 <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 f8ff 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cf4:	f003 fd0e 	bl	8004714 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000cfe:	f000 f8f1 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200005fc 	.word	0x200005fc
 8000d10:	40000800 	.word	0x40000800

08000d14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_USART1_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f003 fd64 	bl	8004818 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f000 f8c5 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000644 	.word	0x20000644
 8000d64:	40011000 	.word	0x40011000

08000d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <MX_USART2_UART_Init+0x50>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000da0:	f003 fd3a 	bl	8004818 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000daa:	f000 f89b 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000688 	.word	0x20000688
 8000db8:	40004400 	.word	0x40004400

08000dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_DMA_Init+0x68>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <MX_DMA_Init+0x68>)
 8000dcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_DMA_Init+0x68>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_DMA_Init+0x68>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <MX_DMA_Init+0x68>)
 8000de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <MX_DMA_Init+0x68>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2010      	movs	r0, #16
 8000e00:	f000 fbff 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e04:	2010      	movs	r0, #16
 8000e06:	f000 fc18 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	203a      	movs	r0, #58	; 0x3a
 8000e10:	f000 fbf7 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e14:	203a      	movs	r0, #58	; 0x3a
 8000e16:	f000 fc10 	bl	800163a <HAL_NVIC_EnableIRQ>

}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a25      	ldr	r2, [pc, #148]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_GPIO_Init+0xb4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	21e2      	movs	r1, #226	; 0xe2
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_GPIO_Init+0xb8>)
 8000e98:	f001 f970 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB5 PB6 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000e9c:	f240 23e2 	movw	r3, #738	; 0x2e2
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <MX_GPIO_Init+0xb8>)
 8000eb6:	f000 ffdd 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_GPIO_Init+0xb8>)
 8000ed0:	f000 ffd0 	bl	8001e74 <HAL_GPIO_Init>

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_TIM_Base_MspInit+0x48>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d115      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_TIM_Base_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_TIM_Base_MspInit+0x4c>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_TIM_Base_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201e      	movs	r0, #30
 8000f74:	f000 fb45 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f78:	201e      	movs	r0, #30
 8000f7a:	f000 fb5e 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40000800 	.word	0x40000800
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a68      	ldr	r2, [pc, #416]	; (8001150 <HAL_UART_MspInit+0x1c0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d163      	bne.n	800107a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	4b67      	ldr	r3, [pc, #412]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a66      	ldr	r2, [pc, #408]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b64      	ldr	r3, [pc, #400]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b60      	ldr	r3, [pc, #384]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a5f      	ldr	r2, [pc, #380]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b5d      	ldr	r3, [pc, #372]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4854      	ldr	r0, [pc, #336]	; (8001158 <HAL_UART_MspInit+0x1c8>)
 8001008:	f000 ff34 	bl	8001e74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800100c:	4b53      	ldr	r3, [pc, #332]	; (800115c <HAL_UART_MspInit+0x1cc>)
 800100e:	4a54      	ldr	r2, [pc, #336]	; (8001160 <HAL_UART_MspInit+0x1d0>)
 8001010:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001012:	4b52      	ldr	r3, [pc, #328]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001014:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001018:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101a:	4b50      	ldr	r3, [pc, #320]	; (800115c <HAL_UART_MspInit+0x1cc>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	4b4e      	ldr	r3, [pc, #312]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	4b4d      	ldr	r3, [pc, #308]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001028:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800102e:	4b4b      	ldr	r3, [pc, #300]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001034:	4b49      	ldr	r3, [pc, #292]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800103a:	4b48      	ldr	r3, [pc, #288]	; (800115c <HAL_UART_MspInit+0x1cc>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001040:	4b46      	ldr	r3, [pc, #280]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001046:	4b45      	ldr	r3, [pc, #276]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800104c:	4843      	ldr	r0, [pc, #268]	; (800115c <HAL_UART_MspInit+0x1cc>)
 800104e:	f000 fb0f 	bl	8001670 <HAL_DMA_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001058:	f7ff ff44 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a3f      	ldr	r2, [pc, #252]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
 8001062:	4a3e      	ldr	r2, [pc, #248]	; (800115c <HAL_UART_MspInit+0x1cc>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2025      	movs	r0, #37	; 0x25
 800106e:	f000 fac8 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001072:	2025      	movs	r0, #37	; 0x25
 8001074:	f000 fae1 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001078:	e066      	b.n	8001148 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a39      	ldr	r2, [pc, #228]	; (8001164 <HAL_UART_MspInit+0x1d4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d161      	bne.n	8001148 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 800108e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a2a      	ldr	r2, [pc, #168]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_UART_MspInit+0x1c4>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010bc:	230c      	movs	r3, #12
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010cc:	2307      	movs	r3, #7
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4820      	ldr	r0, [pc, #128]	; (8001158 <HAL_UART_MspInit+0x1c8>)
 80010d8:	f000 fecc 	bl	8001e74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <HAL_UART_MspInit+0x1dc>)
 80010e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 80010e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 80010f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 800111e:	f000 faa7 	bl	8001670 <HAL_DMA_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001128:	f7ff fedc 	bl	8000ee4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 8001130:	639a      	str	r2, [r3, #56]	; 0x38
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_UART_MspInit+0x1d8>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2026      	movs	r0, #38	; 0x26
 800113e:	f000 fa60 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f000 fa79 	bl	800163a <HAL_NVIC_EnableIRQ>
}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40011000 	.word	0x40011000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000
 800115c:	200006cc 	.word	0x200006cc
 8001160:	40026440 	.word	0x40026440
 8001164:	40004400 	.word	0x40004400
 8001168:	2000072c 	.word	0x2000072c
 800116c:	40026088 	.word	0x40026088

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f902 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <DMA1_Stream5_IRQHandler+0x10>)
 80011ca:	f000 fbe9 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000072c 	.word	0x2000072c

080011d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <TIM4_IRQHandler+0x10>)
 80011de:	f002 ff87 	bl	80040f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200005fc 	.word	0x200005fc

080011ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <USART1_IRQHandler+0x10>)
 80011f2:	f003 fc55 	bl	8004aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000644 	.word	0x20000644

08001200 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART2_IRQHandler+0x10>)
 8001206:	f003 fc4b 	bl	8004aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000688 	.word	0x20000688

08001214 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <DMA2_Stream2_IRQHandler+0x10>)
 800121a:	f000 fbc1 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200006cc 	.word	0x200006cc

08001228 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <OTG_FS_IRQHandler+0x10>)
 800122e:	f001 f928 	bl	8002482 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20001c84 	.word	0x20001c84

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f008 fe2e 	bl	8009ecc <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20020000 	.word	0x20020000
 800129c:	00000400 	.word	0x00000400
 80012a0:	2000079c 	.word	0x2000079c
 80012a4:	200023c0 	.word	0x200023c0

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e8:	4c0b      	ldr	r4, [pc, #44]	; (8001318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012f6:	f7ff ffd7 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f008 fded 	bl	8009ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff f949 	bl	8000594 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001310:	0800aa98 	.word	0x0800aa98
  ldr r2, =_sbss
 8001314:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001318:	200023c0 	.word	0x200023c0

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f94f 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	200f      	movs	r0, #15
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fdcc 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f967 	bl	8001656 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f92f 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	200007a0 	.word	0x200007a0

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200007a0 	.word	0x200007a0

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff29 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff3e 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff31 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff feb6 	bl	80013ec <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e099      	b.n	80017c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ac:	e00f      	b.n	80016ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ae:	f7ff fe9d 	bl	80013ec <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d908      	bls.n	80016ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e078      	b.n	80017c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e8      	bne.n	80016ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_DMA_Init+0x158>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2b04      	cmp	r3, #4
 8001726:	d107      	bne.n	8001738 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4313      	orrs	r3, r2
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f023 0307 	bic.w	r3, r3, #7
 800174e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	2b04      	cmp	r3, #4
 8001760:	d117      	bne.n	8001792 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fb01 	bl	8001d7c <DMA_CheckFifoParam>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800178e:	2301      	movs	r3, #1
 8001790:	e016      	b.n	80017c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fab8 	bl	8001d10 <DMA_CalcBaseAndBitshift>
 80017a0:	4603      	mov	r3, r0
 80017a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a8:	223f      	movs	r2, #63	; 0x3f
 80017aa:	409a      	lsls	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	f010803f 	.word	0xf010803f

080017cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_DMA_Start_IT+0x26>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e040      	b.n	8001874 <HAL_DMA_Start_IT+0xa8>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d12f      	bne.n	8001866 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa4a 	bl	8001cb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	223f      	movs	r2, #63	; 0x3f
 8001826:	409a      	lsls	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0216 	orr.w	r2, r2, #22
 800183a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0208 	orr.w	r2, r2, #8
 8001852:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e005      	b.n	8001872 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800186e:	2302      	movs	r3, #2
 8001870:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001872:	7dfb      	ldrb	r3, [r7, #23]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800188a:	f7ff fdaf 	bl	80013ec <HAL_GetTick>
 800188e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e052      	b.n	8001954 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0216 	bic.w	r2, r2, #22
 80018bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d103      	bne.n	80018de <HAL_DMA_Abort+0x62>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0208 	bic.w	r2, r2, #8
 80018ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fe:	e013      	b.n	8001928 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001900:	f7ff fd74 	bl	80013ec <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d90c      	bls.n	8001928 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2203      	movs	r2, #3
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e015      	b.n	8001954 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1e4      	bne.n	8001900 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	223f      	movs	r2, #63	; 0x3f
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d004      	beq.n	800197a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00c      	b.n	8001994 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2205      	movs	r2, #5
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0201 	bic.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019ac:	4b8e      	ldr	r3, [pc, #568]	; (8001be8 <HAL_DMA_IRQHandler+0x248>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a8e      	ldr	r2, [pc, #568]	; (8001bec <HAL_DMA_IRQHandler+0x24c>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0a9b      	lsrs	r3, r3, #10
 80019b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2208      	movs	r2, #8
 80019cc:	409a      	lsls	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01a      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0204 	bic.w	r2, r2, #4
 80019f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2208      	movs	r2, #8
 80019fa:	409a      	lsls	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d012      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2201      	movs	r2, #1
 8001a30:	409a      	lsls	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	f043 0202 	orr.w	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2204      	movs	r2, #4
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d012      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2204      	movs	r2, #4
 8001a66:	409a      	lsls	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d043      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03c      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d018      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d024      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
 8001ace:	e01f      	b.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
 8001ae0:	e016      	b.n	8001b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0208 	bic.w	r2, r2, #8
 8001afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2220      	movs	r2, #32
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 808f 	beq.w	8001c40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8087 	beq.w	8001c40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2220      	movs	r2, #32
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d136      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0216 	bic.w	r2, r2, #22
 8001b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <HAL_DMA_IRQHandler+0x1da>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0208 	bic.w	r2, r2, #8
 8001b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	223f      	movs	r2, #63	; 0x3f
 8001b90:	409a      	lsls	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d07e      	beq.n	8001cac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
        }
        return;
 8001bb6:	e079      	b.n	8001cac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01d      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d031      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
 8001be4:	e02c      	b.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000
 8001bec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e01e      	b.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10f      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0210 	bic.w	r2, r2, #16
 8001c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d032      	beq.n	8001cae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d022      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2205      	movs	r2, #5
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d307      	bcc.n	8001c88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f2      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x2cc>
 8001c86:	e000      	b.n	8001c8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
 8001caa:	e000      	b.n	8001cae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cac:	bf00      	nop
    }
  }
}
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	d108      	bne.n	8001cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cf2:	e007      	b.n	8001d04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	3b10      	subs	r3, #16
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <DMA_CalcBaseAndBitshift+0x64>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <DMA_CalcBaseAndBitshift+0x68>)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d909      	bls.n	8001d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	1d1a      	adds	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d50:	e007      	b.n	8001d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d5a:	f023 0303 	bic.w	r3, r3, #3
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	aaaaaaab 	.word	0xaaaaaaab
 8001d78:	0800aa4c 	.word	0x0800aa4c

08001d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d11f      	bne.n	8001dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d856      	bhi.n	8001e4a <DMA_CheckFifoParam+0xce>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <DMA_CheckFifoParam+0x28>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001db5 	.word	0x08001db5
 8001da8:	08001dc7 	.word	0x08001dc7
 8001dac:	08001db5 	.word	0x08001db5
 8001db0:	08001e4b 	.word	0x08001e4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d046      	beq.n	8001e4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dc4:	e043      	b.n	8001e4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dce:	d140      	bne.n	8001e52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd4:	e03d      	b.n	8001e52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dde:	d121      	bne.n	8001e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d837      	bhi.n	8001e56 <DMA_CheckFifoParam+0xda>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <DMA_CheckFifoParam+0x70>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	08001e03 	.word	0x08001e03
 8001df4:	08001dfd 	.word	0x08001dfd
 8001df8:	08001e15 	.word	0x08001e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001e00:	e030      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d025      	beq.n	8001e5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e12:	e022      	b.n	8001e5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e1c:	d11f      	bne.n	8001e5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e22:	e01c      	b.n	8001e5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d903      	bls.n	8001e32 <DMA_CheckFifoParam+0xb6>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d003      	beq.n	8001e38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e30:	e018      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
      break;
 8001e36:	e015      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
      break;
 8001e48:	e00b      	b.n	8001e62 <DMA_CheckFifoParam+0xe6>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e00a      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e008      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
 8001e54:	e006      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e56:	bf00      	nop
 8001e58:	e004      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e002      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e5e:	bf00      	nop
 8001e60:	e000      	b.n	8001e64 <DMA_CheckFifoParam+0xe8>
      break;
 8001e62:	bf00      	nop
    }
  } 
  
  return status; 
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e159      	b.n	8002144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8148 	bne.w	800213e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d130      	bne.n	8001f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0201 	and.w	r2, r3, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d017      	beq.n	8001f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a2 	beq.w	800213e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b57      	ldr	r3, [pc, #348]	; (800215c <HAL_GPIO_Init+0x2e8>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a56      	ldr	r2, [pc, #344]	; (800215c <HAL_GPIO_Init+0x2e8>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b54      	ldr	r3, [pc, #336]	; (800215c <HAL_GPIO_Init+0x2e8>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_GPIO_Init+0x2ec>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a49      	ldr	r2, [pc, #292]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x202>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_GPIO_Init+0x2f4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x1fe>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a47      	ldr	r2, [pc, #284]	; (800216c <HAL_GPIO_Init+0x2f8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x1fa>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a46      	ldr	r2, [pc, #280]	; (8002170 <HAL_GPIO_Init+0x2fc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x1f6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a45      	ldr	r2, [pc, #276]	; (8002174 <HAL_GPIO_Init+0x300>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x1f2>
 8002062:	2304      	movs	r3, #4
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002066:	2307      	movs	r3, #7
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x204>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x204>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002076:	2300      	movs	r3, #0
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002088:	4935      	ldr	r1, [pc, #212]	; (8002160 <HAL_GPIO_Init+0x2ec>)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <HAL_GPIO_Init+0x304>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ba:	4a2f      	ldr	r2, [pc, #188]	; (8002178 <HAL_GPIO_Init+0x304>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_GPIO_Init+0x304>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <HAL_GPIO_Init+0x304>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <HAL_GPIO_Init+0x304>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210e:	4a1a      	ldr	r2, [pc, #104]	; (8002178 <HAL_GPIO_Init+0x304>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_GPIO_Init+0x304>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002138:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <HAL_GPIO_Init+0x304>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	f67f aea2 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40013800 	.word	0x40013800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40013c00 	.word	0x40013c00

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002198:	e003      	b.n	80021a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	041a      	lsls	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021c0:	887a      	ldrh	r2, [r7, #2]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4013      	ands	r3, r2
 80021c6:	041a      	lsls	r2, r3, #16
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	400b      	ands	r3, r1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e4:	b08f      	sub	sp, #60	; 0x3c
 80021e6:	af0a      	add	r7, sp, #40	; 0x28
 80021e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e10f      	b.n	8002414 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f007 fb52 	bl	80098b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fe39 	bl	8005eaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	687e      	ldr	r6, [r7, #4]
 8002240:	466d      	mov	r5, sp
 8002242:	f106 0410 	add.w	r4, r6, #16
 8002246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002252:	e885 0003 	stmia.w	r5, {r0, r1}
 8002256:	1d33      	adds	r3, r6, #4
 8002258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800225a:	6838      	ldr	r0, [r7, #0]
 800225c:	f003 fd10 	bl	8005c80 <USB_CoreInit>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0d0      	b.n	8002414 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f003 fe27 	bl	8005ecc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	e04a      	b.n	800231a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	333d      	adds	r3, #61	; 0x3d
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	333c      	adds	r3, #60	; 0x3c
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	b298      	uxth	r0, r3
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	3344      	adds	r3, #68	; 0x44
 80022c0:	4602      	mov	r2, r0
 80022c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	3340      	adds	r3, #64	; 0x40
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3348      	adds	r3, #72	; 0x48
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	334c      	adds	r3, #76	; 0x4c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3354      	adds	r3, #84	; 0x54
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	3301      	adds	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d3af      	bcc.n	8002284 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e044      	b.n	80023b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	3301      	adds	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d3b5      	bcc.n	800232a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	687e      	ldr	r6, [r7, #4]
 80023c6:	466d      	mov	r5, sp
 80023c8:	f106 0410 	add.w	r4, r6, #16
 80023cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80023dc:	1d33      	adds	r3, r6, #4
 80023de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e0:	6838      	ldr	r0, [r7, #0]
 80023e2:	f003 fdbf 	bl	8005f64 <USB_DevInit>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e00d      	b.n	8002414 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f004 ff0e 	bl	800722e <USB_DevDisconnect>

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800241c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_PCD_Start+0x1c>
 8002434:	2302      	movs	r3, #2
 8002436:	e020      	b.n	800247a <HAL_PCD_Start+0x5e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	2b01      	cmp	r3, #1
 8002446:	d109      	bne.n	800245c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002454:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fd11 	bl	8005e88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 febe 	bl	80071ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002482:	b590      	push	{r4, r7, lr}
 8002484:	b08d      	sub	sp, #52	; 0x34
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f004 ff7c 	bl	8007396 <USB_GetMode>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 848a 	bne.w	8002dba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 fee0 	bl	8007270 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8480 	beq.w	8002db8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fecd 	bl	8007270 <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d107      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f002 0202 	and.w	r2, r2, #2
 80024ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f004 febb 	bl	8007270 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b10      	cmp	r3, #16
 8002502:	d161      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0210 	bic.w	r2, r2, #16
 8002512:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 020f 	and.w	r2, r3, #15
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	0c5b      	lsrs	r3, r3, #17
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	2b02      	cmp	r3, #2
 800253e:	d124      	bne.n	800258a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d035      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	6a38      	ldr	r0, [r7, #32]
 8002560:	f004 fcf2 	bl	8006f48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002570:	441a      	add	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	6a1a      	ldr	r2, [r3, #32]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002582:	441a      	add	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	621a      	str	r2, [r3, #32]
 8002588:	e016      	b.n	80025b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	0c5b      	lsrs	r3, r3, #17
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	2b06      	cmp	r3, #6
 8002594:	d110      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800259c:	2208      	movs	r2, #8
 800259e:	4619      	mov	r1, r3
 80025a0:	6a38      	ldr	r0, [r7, #32]
 80025a2:	f004 fcd1 	bl	8006f48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b2:	441a      	add	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0210 	orr.w	r2, r2, #16
 80025c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f004 fe4f 	bl	8007270 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025dc:	f040 80a7 	bne.w	800272e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f004 fe54 	bl	8007296 <USB_ReadDevAllOutEpInterrupt>
 80025ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025f0:	e099      	b.n	8002726 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 808e 	beq.w	800271a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f004 fe78 	bl	80072fe <USB_ReadDevOutEPInterrupt>
 800260e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002626:	461a      	mov	r2, r3
 8002628:	2301      	movs	r3, #1
 800262a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800262c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fec2 	bl	80033b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264a:	461a      	mov	r2, r3
 800264c:	2308      	movs	r3, #8
 800264e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 ff98 	bl	8003588 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266e:	461a      	mov	r2, r3
 8002670:	2310      	movs	r3, #16
 8002672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d030      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d109      	bne.n	800269e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	3304      	adds	r3, #4
 80026b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	78db      	ldrb	r3, [r3, #3]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d108      	bne.n	80026ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2200      	movs	r2, #0
 80026c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f007 f9f1 	bl	8009ab0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026da:	461a      	mov	r2, r3
 80026dc:	2302      	movs	r3, #2
 80026de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f6:	461a      	mov	r2, r3
 80026f8:	2320      	movs	r3, #32
 80026fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002712:	461a      	mov	r2, r3
 8002714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002718:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	3301      	adds	r3, #1
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f af62 	bne.w	80025f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f004 fd9c 	bl	8007270 <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002742:	f040 80db 	bne.w	80028fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f004 fdbd 	bl	80072ca <USB_ReadDevAllInEpInterrupt>
 8002750:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002756:	e0cd      	b.n	80028f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80c2 	beq.w	80028e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fde3 	bl	800733a <USB_ReadDevInEPInterrupt>
 8002774:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d057      	beq.n	8002830 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	2201      	movs	r2, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43db      	mvns	r3, r3
 800279a:	69f9      	ldr	r1, [r7, #28]
 800279c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027a0:	4013      	ands	r3, r2
 80027a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b0:	461a      	mov	r2, r3
 80027b2:	2301      	movs	r3, #1
 80027b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d132      	bne.n	8002824 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	334c      	adds	r3, #76	; 0x4c
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4403      	add	r3, r0
 80027de:	3348      	adds	r3, #72	; 0x48
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4419      	add	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4403      	add	r3, r0
 80027f2:	334c      	adds	r3, #76	; 0x4c
 80027f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d113      	bne.n	8002824 <HAL_PCD_IRQHandler+0x3a2>
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3354      	adds	r3, #84	; 0x54
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800281c:	461a      	mov	r2, r3
 800281e:	2101      	movs	r1, #1
 8002820:	f004 fdea 	bl	80073f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f007 f8c5 	bl	80099ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002846:	461a      	mov	r2, r3
 8002848:	2308      	movs	r3, #8
 800284a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002862:	461a      	mov	r2, r3
 8002864:	2310      	movs	r3, #16
 8002866:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287e:	461a      	mov	r2, r3
 8002880:	2340      	movs	r3, #64	; 0x40
 8002882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d023      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800288e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002890:	6a38      	ldr	r0, [r7, #32]
 8002892:	f003 fccb 	bl	800622c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	3338      	adds	r3, #56	; 0x38
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	3304      	adds	r3, #4
 80028a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	78db      	ldrb	r3, [r3, #3]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d108      	bne.n	80028c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4619      	mov	r1, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f007 f908 	bl	8009ad4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d0:	461a      	mov	r2, r3
 80028d2:	2302      	movs	r3, #2
 80028d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fcdb 	bl	800329e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	3301      	adds	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f47f af2e 	bne.w	8002758 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f004 fcb5 	bl	8007270 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800290c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002910:	d122      	bne.n	8002958 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800292c:	2b01      	cmp	r3, #1
 800292e:	d108      	bne.n	8002942 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002938:	2100      	movs	r1, #0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fec2 	bl	80036c4 <HAL_PCDEx_LPM_Callback>
 8002940:	e002      	b.n	8002948 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f007 f8a6 	bl	8009a94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f004 fc87 	bl	8007270 <USB_ReadInterrupts>
 8002962:	4603      	mov	r3, r0
 8002964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800296c:	d112      	bne.n	8002994 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f007 f862 	bl	8009a48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002992:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fc69 	bl	8007270 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a8:	f040 80b7 	bne.w	8002b1a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2110      	movs	r1, #16
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 fc30 	bl	800622c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d0:	e046      	b.n	8002a60 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029de:	461a      	mov	r2, r3
 80029e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f6:	0151      	lsls	r1, r2, #5
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	440a      	add	r2, r1
 80029fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a12:	461a      	mov	r2, r3
 8002a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2a:	0151      	lsls	r1, r2, #5
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	440a      	add	r2, r1
 8002a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4a:	0151      	lsls	r1, r2, #5
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	440a      	add	r2, r1
 8002a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d3b3      	bcc.n	80029d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a96:	f043 030b 	orr.w	r3, r3, #11
 8002a9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aac:	f043 030b 	orr.w	r3, r3, #11
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab2:	e015      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ac6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002aca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ada:	f043 030b 	orr.w	r3, r3, #11
 8002ade:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002af2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b04:	461a      	mov	r2, r3
 8002b06:	f004 fc77 	bl	80073f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 fba6 	bl	8007270 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2e:	d124      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fc3c 	bl	80073b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fbf1 	bl	8006326 <USB_GetDevSpeed>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681c      	ldr	r4, [r3, #0]
 8002b50:	f001 f9e8 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8002b54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f003 f8f0 	bl	8005d44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f006 ff50 	bl	8009a0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 fb76 	bl	8007270 <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f006 ff2d 	bl	80099ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f002 0208 	and.w	r2, r2, #8
 8002ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 fb61 	bl	8007270 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d122      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc8:	e014      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fb27 	bl	800323c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3e5      	bcc.n	8002bca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 fb34 	bl	8007270 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c12:	d13b      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c14:	2301      	movs	r3, #1
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	e02b      	b.n	8002c72 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3340      	adds	r3, #64	; 0x40
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d115      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da12      	bge.n	8002c6c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	333f      	adds	r3, #63	; 0x3f
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fae8 	bl	800323c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	3301      	adds	r3, #1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3ce      	bcc.n	8002c1a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 faed 	bl	8007270 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ca0:	d155      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	e045      	b.n	8002d34 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d12e      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da2b      	bge.n	8002d2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ce2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d121      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2a:	6053      	str	r3, [r2, #4]
            break;
 8002d2c:	e007      	b.n	8002d3e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3b4      	bcc.n	8002ca8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 fa8c 	bl	8007270 <USB_ReadInterrupts>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d62:	d10a      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f006 fec7 	bl	8009af8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 fa76 	bl	8007270 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d115      	bne.n	8002dba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f006 feb7 	bl	8009b14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e000      	b.n	8002dba <HAL_PCD_IRQHandler+0x938>
      return;
 8002db8:	bf00      	nop
    }
  }
}
 8002dba:	3734      	adds	r7, #52	; 0x34
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}

08002dc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_PCD_SetAddress+0x1a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e013      	b.n	8002e02 <HAL_PCD_SetAddress+0x42>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 f9d4 	bl	80071a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	4608      	mov	r0, r1
 8002e14:	4611      	mov	r1, r2
 8002e16:	461a      	mov	r2, r3
 8002e18:	4603      	mov	r3, r0
 8002e1a:	70fb      	strb	r3, [r7, #3]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	803b      	strh	r3, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da0f      	bge.n	8002e50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	3338      	adds	r3, #56	; 0x38
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	3304      	adds	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	705a      	strb	r2, [r3, #1]
 8002e4e:	e00f      	b.n	8002e70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e7c:	883a      	ldrh	r2, [r7, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	78ba      	ldrb	r2, [r7, #2]
 8002e86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e9a:	78bb      	ldrb	r3, [r7, #2]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_PCD_EP_Open+0xaa>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e00e      	b.n	8002ed2 <HAL_PCD_EP_Open+0xc8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68f9      	ldr	r1, [r7, #12]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 fa54 	bl	8006370 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ed0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	da0f      	bge.n	8002f0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	3338      	adds	r3, #56	; 0x38
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	3304      	adds	r3, #4
 8002f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	705a      	strb	r2, [r3, #1]
 8002f0c:	e00f      	b.n	8002f2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_PCD_EP_Close+0x6e>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e00e      	b.n	8002f66 <HAL_PCD_EP_Close+0x8c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68f9      	ldr	r1, [r7, #12]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fa92 	bl	8006480 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7e:	7afb      	ldrb	r3, [r7, #11]
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	3304      	adds	r3, #4
 8002f96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d102      	bne.n	8002fca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6979      	ldr	r1, [r7, #20]
 8002fe2:	f003 fd71 	bl	8006ac8 <USB_EP0StartXfer>
 8002fe6:	e008      	b.n	8002ffa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	6979      	ldr	r1, [r7, #20]
 8002ff6:	f003 fb1f 	bl	8006638 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	460b      	mov	r3, r1
 8003042:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	f003 020f 	and.w	r2, r3, #15
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	3338      	adds	r3, #56	; 0x38
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	3304      	adds	r3, #4
 800305a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2200      	movs	r2, #0
 800306c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2201      	movs	r2, #1
 8003072:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	b2da      	uxtb	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d102      	bne.n	800308e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800308e:	7afb      	ldrb	r3, [r7, #11]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	6979      	ldr	r1, [r7, #20]
 80030a6:	f003 fd0f 	bl	8006ac8 <USB_EP0StartXfer>
 80030aa:	e008      	b.n	80030be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	6979      	ldr	r1, [r7, #20]
 80030ba:	f003 fabd 	bl	8006638 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d901      	bls.n	80030e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e050      	b.n	8003188 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da0f      	bge.n	800310e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	3338      	adds	r3, #56	; 0x38
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	3304      	adds	r3, #4
 8003104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	705a      	strb	r2, [r3, #1]
 800310c:	e00d      	b.n	800312a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_PCD_EP_SetStall+0x82>
 8003146:	2302      	movs	r3, #2
 8003148:	e01e      	b.n	8003188 <HAL_PCD_EP_SetStall+0xc0>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	f003 ff4d 	bl	8006ff8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	b2d9      	uxtb	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003178:	461a      	mov	r2, r3
 800317a:	f004 f93d 	bl	80073f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 020f 	and.w	r2, r3, #15
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d901      	bls.n	80031ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e042      	b.n	8003234 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da0f      	bge.n	80031d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 020f 	and.w	r2, r3, #15
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	3338      	adds	r3, #56	; 0x38
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	705a      	strb	r2, [r3, #1]
 80031d4:	e00f      	b.n	80031f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	f003 020f 	and.w	r2, r3, #15
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_PCD_EP_ClrStall+0x86>
 8003212:	2302      	movs	r3, #2
 8003214:	e00e      	b.n	8003234 <HAL_PCD_EP_ClrStall+0xa4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68f9      	ldr	r1, [r7, #12]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 ff55 	bl	80070d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324c:	2b00      	cmp	r3, #0
 800324e:	da0c      	bge.n	800326a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	3338      	adds	r3, #56	; 0x38
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e00c      	b.n	8003284 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fd74 	bl	8006d78 <USB_EPStopXfer>
 8003290:	4603      	mov	r3, r0
 8003292:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003294:	7afb      	ldrb	r3, [r7, #11]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08a      	sub	sp, #40	; 0x28
 80032a2:	af02      	add	r7, sp, #8
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	3338      	adds	r3, #56	; 0x38
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	3304      	adds	r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d901      	bls.n	80032d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06c      	b.n	80033b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d902      	bls.n	80032f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3303      	adds	r3, #3
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032fa:	e02b      	b.n	8003354 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	429a      	cmp	r2, r3
 8003310:	d902      	bls.n	8003318 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3303      	adds	r3, #3
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6919      	ldr	r1, [r3, #16]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003330:	b2db      	uxtb	r3, r3
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	4603      	mov	r3, r0
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f003 fdc8 	bl	8006ecc <USB_WritePacket>

    ep->xfer_buff  += len;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	441a      	add	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	441a      	add	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	b29b      	uxth	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	429a      	cmp	r2, r3
 8003368:	d809      	bhi.n	800337e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003372:	429a      	cmp	r2, r3
 8003374:	d203      	bcs.n	800337e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1be      	bne.n	80032fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	429a      	cmp	r2, r3
 8003388:	d811      	bhi.n	80033ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	2201      	movs	r2, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	6939      	ldr	r1, [r7, #16]
 80033a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033aa:	4013      	ands	r3, r2
 80033ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	333c      	adds	r3, #60	; 0x3c
 80033d0:	3304      	adds	r3, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d17b      	bne.n	80034e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	4a61      	ldr	r2, [pc, #388]	; (8003580 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	f240 80b9 	bls.w	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80b3 	beq.w	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003420:	6093      	str	r3, [r2, #8]
 8003422:	e0a7      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	2320      	movs	r3, #32
 800343e:	6093      	str	r3, [r2, #8]
 8003440:	e098      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 8093 	bne.w	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d90f      	bls.n	8003476 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346c:	461a      	mov	r2, r3
 800346e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003472:	6093      	str	r3, [r2, #8]
 8003474:	e07e      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	440b      	add	r3, r1
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a2:	1ad2      	subs	r2, r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d114      	bne.n	80034d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034c0:	461a      	mov	r2, r3
 80034c2:	2101      	movs	r1, #1
 80034c4:	f003 ff98 	bl	80073f8 <USB_EP0_OutStart>
 80034c8:	e006      	b.n	80034d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	441a      	add	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f006 fa50 	bl	8009984 <HAL_PCD_DataOutStageCallback>
 80034e4:	e046      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d124      	bne.n	8003538 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003504:	461a      	mov	r2, r3
 8003506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	e032      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	2320      	movs	r3, #32
 8003528:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f006 fa27 	bl	8009984 <HAL_PCD_DataOutStageCallback>
 8003536:	e01d      	b.n	8003574 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d114      	bne.n	8003568 <PCD_EP_OutXfrComplete_int+0x1b0>
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003560:	461a      	mov	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	f003 ff48 	bl	80073f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f006 fa08 	bl	8009984 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	4f54300a 	.word	0x4f54300a
 8003584:	4f54310a 	.word	0x4f54310a

08003588 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	333c      	adds	r3, #60	; 0x3c
 80035a0:	3304      	adds	r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a15      	ldr	r2, [pc, #84]	; (8003610 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d90e      	bls.n	80035dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d4:	461a      	mov	r2, r3
 80035d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f006 f9bf 	bl	8009960 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <PCD_EP_OutSetupPacket_int+0x88>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d90c      	bls.n	8003604 <PCD_EP_OutSetupPacket_int+0x7c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035fc:	461a      	mov	r2, r3
 80035fe:	2101      	movs	r1, #1
 8003600:	f003 fefa 	bl	80073f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	4f54300a 	.word	0x4f54300a

08003614 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
 8003620:	4613      	mov	r3, r2
 8003622:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003632:	883b      	ldrh	r3, [r7, #0]
 8003634:	0419      	lsls	r1, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	430a      	orrs	r2, r1
 800363e:	629a      	str	r2, [r3, #40]	; 0x28
 8003640:	e028      	b.n	8003694 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4413      	add	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e00d      	b.n	8003672 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	3340      	adds	r3, #64	; 0x40
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4413      	add	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	3301      	adds	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	3b01      	subs	r3, #1
 8003678:	429a      	cmp	r2, r3
 800367a:	d3ec      	bcc.n	8003656 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800367c:	883b      	ldrh	r3, [r7, #0]
 800367e:	0418      	lsls	r0, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6819      	ldr	r1, [r3, #0]
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	3b01      	subs	r3, #1
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	4302      	orrs	r2, r0
 800368c:	3340      	adds	r3, #64	; 0x40
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e267      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d075      	beq.n	80037e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0x240>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d00c      	beq.n	8003720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003706:	4b85      	ldr	r3, [pc, #532]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800370e:	2b08      	cmp	r3, #8
 8003710:	d112      	bne.n	8003738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003712:	4b82      	ldr	r3, [pc, #520]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371e:	d10b      	bne.n	8003738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003720:	4b7e      	ldr	r3, [pc, #504]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d05b      	beq.n	80037e4 <HAL_RCC_OscConfig+0x108>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d157      	bne.n	80037e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e242      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003740:	d106      	bne.n	8003750 <HAL_RCC_OscConfig+0x74>
 8003742:	4b76      	ldr	r3, [pc, #472]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a75      	ldr	r2, [pc, #468]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e01d      	b.n	800378c <HAL_RCC_OscConfig+0xb0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x98>
 800375a:	4b70      	ldr	r3, [pc, #448]	; (800391c <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a6f      	ldr	r2, [pc, #444]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b6d      	ldr	r3, [pc, #436]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6c      	ldr	r2, [pc, #432]	; (800391c <HAL_RCC_OscConfig+0x240>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0xb0>
 8003774:	4b69      	ldr	r3, [pc, #420]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a68      	ldr	r2, [pc, #416]	; (800391c <HAL_RCC_OscConfig+0x240>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b66      	ldr	r3, [pc, #408]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a65      	ldr	r2, [pc, #404]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fd fe2a 	bl	80013ec <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800379c:	f7fd fe26 	bl	80013ec <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	; 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e207      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b5b      	ldr	r3, [pc, #364]	; (800391c <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0xc0>
 80037ba:	e014      	b.n	80037e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fe16 	bl	80013ec <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fe12 	bl	80013ec <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1f3      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	4b51      	ldr	r3, [pc, #324]	; (800391c <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0xe8>
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d063      	beq.n	80038ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_RCC_OscConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fe:	4b47      	ldr	r3, [pc, #284]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003806:	2b08      	cmp	r3, #8
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b44      	ldr	r3, [pc, #272]	; (800391c <HAL_RCC_OscConfig+0x240>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b41      	ldr	r3, [pc, #260]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x152>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1c7      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4937      	ldr	r1, [pc, #220]	; (800391c <HAL_RCC_OscConfig+0x240>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e03a      	b.n	80038ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b34      	ldr	r3, [pc, #208]	; (8003920 <HAL_RCC_OscConfig+0x244>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fd fdcb 	bl	80013ec <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385a:	f7fd fdc7 	bl	80013ec <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1a8      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b28      	ldr	r3, [pc, #160]	; (800391c <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4925      	ldr	r1, [pc, #148]	; (800391c <HAL_RCC_OscConfig+0x240>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x244>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd fdaa 	bl	80013ec <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389c:	f7fd fda6 	bl	80013ec <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e187      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d036      	beq.n	8003934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_RCC_OscConfig+0x248>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fd fd8a 	bl	80013ec <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fd fd86 	bl	80013ec <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e167      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_OscConfig+0x240>)
 80038f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x200>
 80038fa:	e01b      	b.n	8003934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_OscConfig+0x248>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003902:	f7fd fd73 	bl	80013ec <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	e00e      	b.n	8003928 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390a:	f7fd fd6f 	bl	80013ec <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d907      	bls.n	8003928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e150      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
 800391c:	40023800 	.word	0x40023800
 8003920:	42470000 	.word	0x42470000
 8003924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 800392a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ea      	bne.n	800390a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8097 	beq.w	8003a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003946:	4b81      	ldr	r3, [pc, #516]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b7d      	ldr	r3, [pc, #500]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a7c      	ldr	r2, [pc, #496]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b7a      	ldr	r3, [pc, #488]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b77      	ldr	r3, [pc, #476]	; (8003b50 <HAL_RCC_OscConfig+0x474>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	4b74      	ldr	r3, [pc, #464]	; (8003b50 <HAL_RCC_OscConfig+0x474>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a73      	ldr	r2, [pc, #460]	; (8003b50 <HAL_RCC_OscConfig+0x474>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7fd fd2f 	bl	80013ec <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fd fd2b 	bl	80013ec <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e10c      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <HAL_RCC_OscConfig+0x474>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x2ea>
 80039b8:	4b64      	ldr	r3, [pc, #400]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	4a63      	ldr	r2, [pc, #396]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6713      	str	r3, [r2, #112]	; 0x70
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x324>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x30c>
 80039ce:	4b5f      	ldr	r3, [pc, #380]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a5e      	ldr	r2, [pc, #376]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
 80039da:	4b5c      	ldr	r3, [pc, #368]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a5b      	ldr	r2, [pc, #364]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0x324>
 80039e8:	4b58      	ldr	r3, [pc, #352]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a57      	ldr	r2, [pc, #348]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	4b55      	ldr	r3, [pc, #340]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a54      	ldr	r2, [pc, #336]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 80039fa:	f023 0304 	bic.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fd fcf0 	bl	80013ec <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fd fcec 	bl	80013ec <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0cb      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ee      	beq.n	8003a10 <HAL_RCC_OscConfig+0x334>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a34:	f7fd fcda 	bl	80013ec <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fcd6 	bl	80013ec <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e0b5      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a1 	beq.w	8003bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7a:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d05c      	beq.n	8003b40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d141      	bne.n	8003b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b31      	ldr	r3, [pc, #196]	; (8003b54 <HAL_RCC_OscConfig+0x478>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fd fcaa 	bl	80013ec <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd fca6 	bl	80013ec <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e087      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	491b      	ldr	r1, [pc, #108]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x478>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fd fc7f 	bl	80013ec <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fd fc7b 	bl	80013ec <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e05c      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x416>
 8003b10:	e054      	b.n	8003bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <HAL_RCC_OscConfig+0x478>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fd fc68 	bl	80013ec <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd fc64 	bl	80013ec <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e045      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_RCC_OscConfig+0x470>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x444>
 8003b3e:	e03d      	b.n	8003bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e038      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b58:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <HAL_RCC_OscConfig+0x4ec>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d028      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d121      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d11a      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b88:	4013      	ands	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d111      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800

08003bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0cc      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b68      	ldr	r3, [pc, #416]	; (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d90c      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b65      	ldr	r3, [pc, #404]	; (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b63      	ldr	r3, [pc, #396]	; (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0b8      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c20:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a58      	ldr	r2, [pc, #352]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4a52      	ldr	r2, [pc, #328]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	4b50      	ldr	r3, [pc, #320]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	494d      	ldr	r1, [pc, #308]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d044      	beq.n	8003cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b47      	ldr	r3, [pc, #284]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d119      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e07f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b3f      	ldr	r3, [pc, #252]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e067      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4934      	ldr	r1, [pc, #208]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7fd fb96 	bl	80013ec <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fd fb92 	bl	80013ec <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e04f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d20c      	bcs.n	8003d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e032      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d20:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4916      	ldr	r1, [pc, #88]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	490e      	ldr	r1, [pc, #56]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d52:	f000 f821 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003d56:	4602      	mov	r2, r0
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	490a      	ldr	r1, [pc, #40]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	5ccb      	ldrb	r3, [r1, r3]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd faf6 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023c00 	.word	0x40023c00
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	0800aa34 	.word	0x0800aa34
 8003d90:	20000000 	.word	0x20000000
 8003d94:	20000004 	.word	0x20000004

08003d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d9c:	b090      	sub	sp, #64	; 0x40
 8003d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
 8003da4:	2300      	movs	r3, #0
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da8:	2300      	movs	r3, #0
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db0:	4b59      	ldr	r3, [pc, #356]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d00d      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	f200 80a1 	bhi.w	8003f04 <HAL_RCC_GetSysClockFreq+0x16c>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x34>
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dca:	e09b      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dcc:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003dce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003dd0:	e09b      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dd2:	4b53      	ldr	r3, [pc, #332]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dd6:	e098      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd8:	4b4f      	ldr	r3, [pc, #316]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de2:	4b4d      	ldr	r3, [pc, #308]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d028      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dee:	4b4a      	ldr	r3, [pc, #296]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	2200      	movs	r2, #0
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	627a      	str	r2, [r7, #36]	; 0x24
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e00:	2100      	movs	r1, #0
 8003e02:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e04:	fb03 f201 	mul.w	r2, r3, r1
 8003e08:	2300      	movs	r3, #0
 8003e0a:	fb00 f303 	mul.w	r3, r0, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	4a43      	ldr	r2, [pc, #268]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e12:	fba0 1202 	umull	r1, r2, r0, r2
 8003e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e18:	460a      	mov	r2, r1
 8003e1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e1e:	4413      	add	r3, r2
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	2200      	movs	r2, #0
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	61fa      	str	r2, [r7, #28]
 8003e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e32:	f7fc fa2d 	bl	8000290 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3e:	e053      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e40:	4b35      	ldr	r3, [pc, #212]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	2200      	movs	r2, #0
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	617a      	str	r2, [r7, #20]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e52:	f04f 0b00 	mov.w	fp, #0
 8003e56:	4652      	mov	r2, sl
 8003e58:	465b      	mov	r3, fp
 8003e5a:	f04f 0000 	mov.w	r0, #0
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	0159      	lsls	r1, r3, #5
 8003e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e68:	0150      	lsls	r0, r2, #5
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e72:	eb63 090b 	sbc.w	r9, r3, fp
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e8a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e8e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	00eb      	lsls	r3, r5, #3
 8003e9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea0:	00e2      	lsls	r2, r4, #3
 8003ea2:	4614      	mov	r4, r2
 8003ea4:	461d      	mov	r5, r3
 8003ea6:	eb14 030a 	adds.w	r3, r4, sl
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	eb45 030b 	adc.w	r3, r5, fp
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	028b      	lsls	r3, r1, #10
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec8:	4621      	mov	r1, r4
 8003eca:	028a      	lsls	r2, r1, #10
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003edc:	f7fc f9d8 	bl	8000290 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3740      	adds	r7, #64	; 0x40
 8003f10:	46bd      	mov	sp, r7
 8003f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	00f42400 	.word	0x00f42400
 8003f20:	017d7840 	.word	0x017d7840

08003f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000000 	.word	0x20000000

08003f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f40:	f7ff fff0 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	0a9b      	lsrs	r3, r3, #10
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4903      	ldr	r1, [pc, #12]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	0800aa44 	.word	0x0800aa44

08003f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f68:	f7ff ffdc 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0b5b      	lsrs	r3, r3, #13
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	0800aa44 	.word	0x0800aa44

08003f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e041      	b.n	8004022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fc ffc4 	bl	8000f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f000 fa88 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d001      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e044      	b.n	80040ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <HAL_TIM_Base_Start_IT+0xb0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d018      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x6c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406e:	d013      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x6c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x6c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x6c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x6c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <HAL_TIM_Base_Start_IT+0xc0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d111      	bne.n	80040bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d010      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	e007      	b.n	80040cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40014000 	.word	0x40014000

080040f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b02      	cmp	r3, #2
 8004104:	d122      	bne.n	800414c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d11b      	bne.n	800414c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0202 	mvn.w	r2, #2
 800411c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9b5 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8004138:	e005      	b.n	8004146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9a7 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f9b8 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b04      	cmp	r3, #4
 8004158:	d122      	bne.n	80041a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d11b      	bne.n	80041a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0204 	mvn.w	r2, #4
 8004170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f98b 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f97d 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f98e 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d122      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d11b      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0208 	mvn.w	r2, #8
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2204      	movs	r2, #4
 80041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f961 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f953 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f964 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d122      	bne.n	8004248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d11b      	bne.n	8004248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0210 	mvn.w	r2, #16
 8004218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2208      	movs	r2, #8
 800421e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f937 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8004234:	e005      	b.n	8004242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f929 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f93a 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10e      	bne.n	8004274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d107      	bne.n	8004274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0201 	mvn.w	r2, #1
 800426c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fb16 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fab2 	bl	8004804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f8ff 	bl	80044ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d10e      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d107      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0220 	mvn.w	r2, #32
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa7c 	bl	80047f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIM_ConfigClockSource+0x1c>
 8004318:	2302      	movs	r3, #2
 800431a:	e0b4      	b.n	8004486 <HAL_TIM_ConfigClockSource+0x186>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800433a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004354:	d03e      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435a:	f200 8087 	bhi.w	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800435e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004362:	f000 8086 	beq.w	8004472 <HAL_TIM_ConfigClockSource+0x172>
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436a:	d87f      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b70      	cmp	r3, #112	; 0x70
 800436e:	d01a      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004370:	2b70      	cmp	r3, #112	; 0x70
 8004372:	d87b      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b60      	cmp	r3, #96	; 0x60
 8004376:	d050      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x11a>
 8004378:	2b60      	cmp	r3, #96	; 0x60
 800437a:	d877      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b50      	cmp	r3, #80	; 0x50
 800437e:	d03c      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xfa>
 8004380:	2b50      	cmp	r3, #80	; 0x50
 8004382:	d873      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d058      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x13a>
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d86f      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b30      	cmp	r3, #48	; 0x30
 800438e:	d064      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 8004390:	2b30      	cmp	r3, #48	; 0x30
 8004392:	d86b      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d060      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 8004398:	2b20      	cmp	r3, #32
 800439a:	d867      	bhi.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d05c      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d05a      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x15a>
 80043a4:	e062      	b.n	800446c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f000 f98d 	bl	80046d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	609a      	str	r2, [r3, #8]
      break;
 80043d2:	e04f      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6899      	ldr	r1, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f000 f976 	bl	80046d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f6:	609a      	str	r2, [r3, #8]
      break;
 80043f8:	e03c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	461a      	mov	r2, r3
 8004408:	f000 f8ea 	bl	80045e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2150      	movs	r1, #80	; 0x50
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f943 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 8004418:	e02c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	461a      	mov	r2, r3
 8004428:	f000 f909 	bl	800463e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2160      	movs	r1, #96	; 0x60
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f933 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 8004438:	e01c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	461a      	mov	r2, r3
 8004448:	f000 f8ca 	bl	80045e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	4618      	mov	r0, r3
 8004454:	f000 f923 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 8004458:	e00c      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f000 f91a 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 800446a:	e003      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
      break;
 8004470:	e000      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a34      	ldr	r2, [pc, #208]	; (80045c4 <TIM_Base_SetConfig+0xe4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00f      	beq.n	8004518 <TIM_Base_SetConfig+0x38>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d00b      	beq.n	8004518 <TIM_Base_SetConfig+0x38>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a31      	ldr	r2, [pc, #196]	; (80045c8 <TIM_Base_SetConfig+0xe8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <TIM_Base_SetConfig+0x38>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a30      	ldr	r2, [pc, #192]	; (80045cc <TIM_Base_SetConfig+0xec>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_Base_SetConfig+0x38>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <TIM_Base_SetConfig+0xf0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <TIM_Base_SetConfig+0xe4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01b      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	d017      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <TIM_Base_SetConfig+0xe8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a21      	ldr	r2, [pc, #132]	; (80045cc <TIM_Base_SetConfig+0xec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00f      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a20      	ldr	r2, [pc, #128]	; (80045d0 <TIM_Base_SetConfig+0xf0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00b      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <TIM_Base_SetConfig+0xf4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <TIM_Base_SetConfig+0xf8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <TIM_Base_SetConfig+0xfc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d108      	bne.n	800457c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <TIM_Base_SetConfig+0xe4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800

080045e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0201 	bic.w	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 030a 	bic.w	r3, r3, #10
 800461c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463e:	b480      	push	{r7}
 8004640:	b087      	sub	sp, #28
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0210 	bic.w	r2, r3, #16
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	031b      	lsls	r3, r3, #12
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800467a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f043 0307 	orr.w	r3, r3, #7
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	609a      	str	r2, [r3, #8]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004728:	2302      	movs	r3, #2
 800472a:	e050      	b.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d013      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a13      	ldr	r2, [pc, #76]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10c      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40014000 	.word	0x40014000

080047f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e03f      	b.n	80048aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fc fba6 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800485a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 ff9b 	bl	8005798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b08a      	sub	sp, #40	; 0x28
 80048b6:	af02      	add	r7, sp, #8
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d17c      	bne.n	80049cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_UART_Transmit+0x2c>
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e075      	b.n	80049ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_UART_Transmit+0x3e>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e06e      	b.n	80049ce <HAL_UART_Transmit+0x11c>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2221      	movs	r2, #33	; 0x21
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004906:	f7fc fd71 	bl	80013ec <HAL_GetTick>
 800490a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d108      	bne.n	8004934 <HAL_UART_Transmit+0x82>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e003      	b.n	800493c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004944:	e02a      	b.n	800499c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fc53 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e036      	b.n	80049ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	3302      	adds	r3, #2
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e007      	b.n	800498e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3301      	adds	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1cf      	bne.n	8004946 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2140      	movs	r1, #64	; 0x40
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fc23 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e006      	b.n	80049ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b08c      	sub	sp, #48	; 0x30
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d152      	bne.n	8004a96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e04b      	b.n	8004a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e044      	b.n	8004a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fc58 	bl	80052d8 <UART_Start_Receive_DMA>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d12c      	bne.n	8004a90 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d125      	bne.n	8004a8a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	617b      	str	r3, [r7, #20]
   return(result);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f043 0310 	orr.w	r3, r3, #16
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a74:	627a      	str	r2, [r7, #36]	; 0x24
 8004a76:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6a39      	ldr	r1, [r7, #32]
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e5      	bne.n	8004a54 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004a88:	e002      	b.n	8004a90 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a94:	e000      	b.n	8004a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3730      	adds	r7, #48	; 0x30
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b0ba      	sub	sp, #232	; 0xe8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_UART_IRQHandler+0x66>
 8004af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fd8f 	bl	8005622 <UART_Receive_IT>
      return;
 8004b04:	e256      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80de 	beq.w	8004ccc <HAL_UART_IRQHandler+0x22c>
 8004b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80d1 	beq.w	8004ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_UART_IRQHandler+0xae>
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0201 	orr.w	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_UART_IRQHandler+0xd2>
 8004b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_UART_IRQHandler+0xf6>
 8004b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f043 0204 	orr.w	r2, r3, #4
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x126>
 8004ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d105      	bne.n	8004bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0208 	orr.w	r2, r3, #8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 81ed 	beq.w	8004faa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_UART_IRQHandler+0x14e>
 8004bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fd1a 	bl	8005622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2301      	moveq	r3, #1
 8004bfe:	2300      	movne	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_UART_IRQHandler+0x17a>
 8004c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d04f      	beq.n	8004cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fc22 	bl	8005464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d141      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3314      	adds	r3, #20
 8004c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3314      	adds	r3, #20
 8004c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1d9      	bne.n	8004c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d013      	beq.n	8004caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	4a7d      	ldr	r2, [pc, #500]	; (8004e7c <HAL_UART_IRQHandler+0x3dc>)
 8004c88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fc fe64 	bl	800195c <HAL_DMA_Abort_IT>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e00e      	b.n	8004cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9a4 	bl	8004ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	e00a      	b.n	8004cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9a0 	bl	8004ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e006      	b.n	8004cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f99c 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cc6:	e170      	b.n	8004faa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	bf00      	nop
    return;
 8004cca:	e16e      	b.n	8004faa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	f040 814a 	bne.w	8004f6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8143 	beq.w	8004f6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 813c 	beq.w	8004f6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	f040 80b4 	bne.w	8004e80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8140 	beq.w	8004fae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d36:	429a      	cmp	r2, r3
 8004d38:	f080 8139 	bcs.w	8004fae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4e:	f000 8088 	beq.w	8004e62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1d9      	bne.n	8004d52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e1      	bne.n	8004d9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e44:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e3      	bne.n	8004e20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fc fd0d 	bl	800187c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fb fcb2 	bl	80007dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e78:	e099      	b.n	8004fae <HAL_UART_IRQHandler+0x50e>
 8004e7a:	bf00      	nop
 8004e7c:	0800552b 	.word	0x0800552b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 808b 	beq.w	8004fb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8086 	beq.w	8004fb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	330c      	adds	r3, #12
 8004ec6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004eca:	647a      	str	r2, [r7, #68]	; 0x44
 8004ecc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e3      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	623b      	str	r3, [r7, #32]
   return(result);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3314      	adds	r3, #20
 8004efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f02:	633a      	str	r2, [r7, #48]	; 0x30
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0310 	bic.w	r3, r3, #16
 8004f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f48:	61fa      	str	r2, [r7, #28]
 8004f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	69b9      	ldr	r1, [r7, #24]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	617b      	str	r3, [r7, #20]
   return(result);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e3      	bne.n	8004f24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fb fc3a 	bl	80007dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f68:	e023      	b.n	8004fb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_UART_IRQHandler+0x4ea>
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fae5 	bl	8005552 <UART_Transmit_IT>
    return;
 8004f88:	e014      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x514>
 8004f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fb25 	bl	80055f2 <UART_EndTransmit_IT>
    return;
 8004fa8:	e004      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
    return;
 8004faa:	bf00      	nop
 8004fac:	e002      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
      return;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
      return;
 8004fb2:	bf00      	nop
  }
}
 8004fb4:	37e8      	adds	r7, #232	; 0xe8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop

08004fbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b09c      	sub	sp, #112	; 0x70
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d172      	bne.n	800510e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502a:	2200      	movs	r2, #0
 800502c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	e853 3f00 	ldrex	r3, [r3]
 800503c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800503e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005044:	66bb      	str	r3, [r7, #104]	; 0x68
 8005046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800504e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005050:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800505c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e5      	bne.n	800502e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3314      	adds	r3, #20
 8005068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	667b      	str	r3, [r7, #100]	; 0x64
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3314      	adds	r3, #20
 8005080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005082:	647a      	str	r2, [r7, #68]	; 0x44
 8005084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e5      	bne.n	8005062 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	623b      	str	r3, [r7, #32]
   return(result);
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ac:	663b      	str	r3, [r7, #96]	; 0x60
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050b6:	633a      	str	r2, [r7, #48]	; 0x30
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e5      	bne.n	8005096 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d119      	bne.n	800510e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f023 0310 	bic.w	r3, r3, #16
 80050f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fa:	61fa      	str	r2, [r7, #28]
 80050fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	69b9      	ldr	r1, [r7, #24]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	617b      	str	r3, [r7, #20]
   return(result);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e5      	bne.n	80050da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	2b01      	cmp	r3, #1
 8005114:	d106      	bne.n	8005124 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800511a:	4619      	mov	r1, r3
 800511c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800511e:	f7fb fb5d 	bl	80007dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005122:	e002      	b.n	800512a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005124:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005126:	f7ff ff53 	bl	8004fd0 <HAL_UART_RxCpltCallback>
}
 800512a:	bf00      	nop
 800512c:	3770      	adds	r7, #112	; 0x70
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	2b01      	cmp	r3, #1
 8005146:	d108      	bne.n	800515a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	b29b      	uxth	r3, r3
 8005150:	4619      	mov	r1, r3
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7fb fb42 	bl	80007dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005158:	e002      	b.n	8005160 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff ff42 	bl	8004fe4 <HAL_UART_RxHalfCpltCallback>
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b21      	cmp	r3, #33	; 0x21
 800519a:	d108      	bne.n	80051ae <UART_DMAError+0x46>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051a8:	68b8      	ldr	r0, [r7, #8]
 80051aa:	f000 f933 	bl	8005414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b22      	cmp	r3, #34	; 0x22
 80051ce:	d108      	bne.n	80051e2 <UART_DMAError+0x7a>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051dc:	68b8      	ldr	r0, [r7, #8]
 80051de:	f000 f941 	bl	8005464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f043 0210 	orr.w	r2, r3, #16
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ee:	68b8      	ldr	r0, [r7, #8]
 80051f0:	f7ff ff02 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b090      	sub	sp, #64	; 0x40
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520c:	e050      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d04c      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <UART_WaitOnFlagUntilTimeout+0x30>
 800521c:	f7fc f8e6 	bl	80013ec <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005228:	429a      	cmp	r2, r3
 800522a:	d241      	bcs.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800524c:	637a      	str	r2, [r7, #52]	; 0x34
 800524e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3314      	adds	r3, #20
 8005266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	613b      	str	r3, [r7, #16]
   return(result);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	63bb      	str	r3, [r7, #56]	; 0x38
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005280:	623a      	str	r2, [r7, #32]
 8005282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	69f9      	ldr	r1, [r7, #28]
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	61bb      	str	r3, [r7, #24]
   return(result);
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e00f      	b.n	80052d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d09f      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3740      	adds	r7, #64	; 0x40
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b098      	sub	sp, #96	; 0x60
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2222      	movs	r2, #34	; 0x22
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	4a40      	ldr	r2, [pc, #256]	; (8005408 <UART_Start_Receive_DMA+0x130>)
 8005306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	4a3f      	ldr	r2, [pc, #252]	; (800540c <UART_Start_Receive_DMA+0x134>)
 800530e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <UART_Start_Receive_DMA+0x138>)
 8005316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	2200      	movs	r2, #0
 800531e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	f7fc fa48 	bl	80017cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d019      	beq.n	8005396 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005378:	65bb      	str	r3, [r7, #88]	; 0x58
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005382:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005384:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	657b      	str	r3, [r7, #84]	; 0x54
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e5      	bne.n	8005396 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	617b      	str	r3, [r7, #20]
   return(result);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e0:	653b      	str	r3, [r7, #80]	; 0x50
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053ea:	627a      	str	r2, [r7, #36]	; 0x24
 80053ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6a39      	ldr	r1, [r7, #32]
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3760      	adds	r7, #96	; 0x60
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	0800500d 	.word	0x0800500d
 800540c:	08005133 	.word	0x08005133
 8005410:	08005169 	.word	0x08005169

08005414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	60bb      	str	r3, [r7, #8]
   return(result);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	61ba      	str	r2, [r7, #24]
 800543e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6979      	ldr	r1, [r7, #20]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	613b      	str	r3, [r7, #16]
   return(result);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e5      	bne.n	800541c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005458:	bf00      	nop
 800545a:	3724      	adds	r7, #36	; 0x24
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005464:	b480      	push	{r7}
 8005466:	b095      	sub	sp, #84	; 0x54
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800548c:	643a      	str	r2, [r7, #64]	; 0x40
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3314      	adds	r3, #20
 80054a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3314      	adds	r3, #20
 80054be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e5      	bne.n	80054a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d119      	bne.n	8005510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f023 0310 	bic.w	r3, r3, #16
 80054f2:	647b      	str	r3, [r7, #68]	; 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054fc:	61ba      	str	r2, [r7, #24]
 80054fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6979      	ldr	r1, [r7, #20]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	613b      	str	r3, [r7, #16]
   return(result);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e5      	bne.n	80054dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800551e:	bf00      	nop
 8005520:	3754      	adds	r7, #84	; 0x54
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff fd57 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b21      	cmp	r3, #33	; 0x21
 8005564:	d13e      	bne.n	80055e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556e:	d114      	bne.n	800559a <UART_Transmit_IT+0x48>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d110      	bne.n	800559a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800558c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	1c9a      	adds	r2, r3, #2
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	621a      	str	r2, [r3, #32]
 8005598:	e008      	b.n	80055ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	1c59      	adds	r1, r3, #1
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6211      	str	r1, [r2, #32]
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	4619      	mov	r1, r3
 80055ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10f      	bne.n	80055e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e000      	b.n	80055e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055e4:	2302      	movs	r3, #2
  }
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fcd2 	bl	8004fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b08c      	sub	sp, #48	; 0x30
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b22      	cmp	r3, #34	; 0x22
 8005634:	f040 80ab 	bne.w	800578e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d117      	bne.n	8005672 <UART_Receive_IT+0x50>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d113      	bne.n	8005672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005660:	b29a      	uxth	r2, r3
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	1c9a      	adds	r2, r3, #2
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	; 0x28
 8005670:	e026      	b.n	80056c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005678:	2300      	movs	r3, #0
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d007      	beq.n	8005696 <UART_Receive_IT+0x74>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <UART_Receive_IT+0x82>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e008      	b.n	80056b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4619      	mov	r1, r3
 80056ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d15a      	bne.n	800578a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0220 	bic.w	r2, r2, #32
 80056e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	2b01      	cmp	r3, #1
 8005712:	d135      	bne.n	8005780 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	613b      	str	r3, [r7, #16]
   return(result);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	623a      	str	r2, [r7, #32]
 800573c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	69f9      	ldr	r1, [r7, #28]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	61bb      	str	r3, [r7, #24]
   return(result);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b10      	cmp	r3, #16
 800575a:	d10a      	bne.n	8005772 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fb f82f 	bl	80007dc <HAL_UARTEx_RxEventCallback>
 800577e:	e002      	b.n	8005786 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fc25 	bl	8004fd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	e002      	b.n	8005790 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3730      	adds	r7, #48	; 0x30
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800579c:	b0c0      	sub	sp, #256	; 0x100
 800579e:	af00      	add	r7, sp, #0
 80057a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	ea40 0301 	orr.w	r3, r0, r1
 80057c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057f0:	f021 010c 	bic.w	r1, r1, #12
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057fe:	430b      	orrs	r3, r1
 8005800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	6999      	ldr	r1, [r3, #24]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	ea40 0301 	orr.w	r3, r0, r1
 800581e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b8f      	ldr	r3, [pc, #572]	; (8005a64 <UART_SetConfig+0x2cc>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d005      	beq.n	8005838 <UART_SetConfig+0xa0>
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <UART_SetConfig+0x2d0>)
 8005834:	429a      	cmp	r2, r3
 8005836:	d104      	bne.n	8005842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fe fb94 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 800583c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005840:	e003      	b.n	800584a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fe fb7b 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8005846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005854:	f040 810c 	bne.w	8005a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585c:	2200      	movs	r2, #0
 800585e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	1891      	adds	r1, r2, r2
 8005870:	65b9      	str	r1, [r7, #88]	; 0x58
 8005872:	415b      	adcs	r3, r3
 8005874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800587a:	4621      	mov	r1, r4
 800587c:	eb12 0801 	adds.w	r8, r2, r1
 8005880:	4629      	mov	r1, r5
 8005882:	eb43 0901 	adc.w	r9, r3, r1
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589a:	4690      	mov	r8, r2
 800589c:	4699      	mov	r9, r3
 800589e:	4623      	mov	r3, r4
 80058a0:	eb18 0303 	adds.w	r3, r8, r3
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058a8:	462b      	mov	r3, r5
 80058aa:	eb49 0303 	adc.w	r3, r9, r3
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058c6:	460b      	mov	r3, r1
 80058c8:	18db      	adds	r3, r3, r3
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
 80058cc:	4613      	mov	r3, r2
 80058ce:	eb42 0303 	adc.w	r3, r2, r3
 80058d2:	657b      	str	r3, [r7, #84]	; 0x54
 80058d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058dc:	f7fa fcd8 	bl	8000290 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4b61      	ldr	r3, [pc, #388]	; (8005a6c <UART_SetConfig+0x2d4>)
 80058e6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	011c      	lsls	r4, r3, #4
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	64b9      	str	r1, [r7, #72]	; 0x48
 8005908:	415b      	adcs	r3, r3
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005910:	4641      	mov	r1, r8
 8005912:	eb12 0a01 	adds.w	sl, r2, r1
 8005916:	4649      	mov	r1, r9
 8005918:	eb43 0b01 	adc.w	fp, r3, r1
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800592c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005930:	4692      	mov	sl, r2
 8005932:	469b      	mov	fp, r3
 8005934:	4643      	mov	r3, r8
 8005936:	eb1a 0303 	adds.w	r3, sl, r3
 800593a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800593e:	464b      	mov	r3, r9
 8005940:	eb4b 0303 	adc.w	r3, fp, r3
 8005944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800595c:	460b      	mov	r3, r1
 800595e:	18db      	adds	r3, r3, r3
 8005960:	643b      	str	r3, [r7, #64]	; 0x40
 8005962:	4613      	mov	r3, r2
 8005964:	eb42 0303 	adc.w	r3, r2, r3
 8005968:	647b      	str	r3, [r7, #68]	; 0x44
 800596a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800596e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005972:	f7fa fc8d 	bl	8000290 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4611      	mov	r1, r2
 800597c:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <UART_SetConfig+0x2d4>)
 800597e:	fba3 2301 	umull	r2, r3, r3, r1
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2264      	movs	r2, #100	; 0x64
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005994:	fba3 2302 	umull	r2, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059a0:	441c      	add	r4, r3
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80059bc:	415b      	adcs	r3, r3
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6339      	str	r1, [r7, #48]	; 0x30
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	637b      	str	r3, [r7, #52]	; 0x34
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f8:	464b      	mov	r3, r9
 80059fa:	460a      	mov	r2, r1
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a2e:	f7fa fc2f 	bl	8000290 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005a38:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	2164      	movs	r1, #100	; 0x64
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	3332      	adds	r3, #50	; 0x32
 8005a4a:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	f003 0207 	and.w	r2, r3, #7
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4422      	add	r2, r4
 8005a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a60:	e105      	b.n	8005c6e <UART_SetConfig+0x4d6>
 8005a62:	bf00      	nop
 8005a64:	40011000 	.word	0x40011000
 8005a68:	40011400 	.word	0x40011400
 8005a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a82:	4642      	mov	r2, r8
 8005a84:	464b      	mov	r3, r9
 8005a86:	1891      	adds	r1, r2, r2
 8005a88:	6239      	str	r1, [r7, #32]
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a92:	4641      	mov	r1, r8
 8005a94:	1854      	adds	r4, r2, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	eb43 0501 	adc.w	r5, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	00eb      	lsls	r3, r5, #3
 8005aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aaa:	00e2      	lsls	r2, r4, #3
 8005aac:	4614      	mov	r4, r2
 8005aae:	461d      	mov	r5, r3
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	18e3      	adds	r3, r4, r3
 8005ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ab8:	464b      	mov	r3, r9
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ade:	4629      	mov	r1, r5
 8005ae0:	008b      	lsls	r3, r1, #2
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae8:	4621      	mov	r1, r4
 8005aea:	008a      	lsls	r2, r1, #2
 8005aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005af0:	f7fa fbce 	bl	8000290 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4b60      	ldr	r3, [pc, #384]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005afa:	fba3 2302 	umull	r2, r3, r3, r2
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	011c      	lsls	r4, r3, #4
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	61b9      	str	r1, [r7, #24]
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b24:	4641      	mov	r1, r8
 8005b26:	1851      	adds	r1, r2, r1
 8005b28:	6139      	str	r1, [r7, #16]
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	414b      	adcs	r3, r1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	00cb      	lsls	r3, r1, #3
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b46:	4651      	mov	r1, sl
 8005b48:	00ca      	lsls	r2, r1, #3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4642      	mov	r2, r8
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b58:	464b      	mov	r3, r9
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	008b      	lsls	r3, r1, #2
 8005b80:	4641      	mov	r1, r8
 8005b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b86:	4641      	mov	r1, r8
 8005b88:	008a      	lsls	r2, r1, #2
 8005b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b8e:	f7fa fb7f 	bl	8000290 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005b98:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	2164      	movs	r1, #100	; 0x64
 8005ba0:	fb01 f303 	mul.w	r3, r1, r3
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	3332      	adds	r3, #50	; 0x32
 8005baa:	4a34      	ldr	r2, [pc, #208]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb6:	441c      	add	r4, r3
 8005bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8005bc0:	677a      	str	r2, [r7, #116]	; 0x74
 8005bc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	1851      	adds	r1, r2, r1
 8005bda:	6039      	str	r1, [r7, #0]
 8005bdc:	4649      	mov	r1, r9
 8005bde:	414b      	adcs	r3, r1
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bee:	4659      	mov	r1, fp
 8005bf0:	00cb      	lsls	r3, r1, #3
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf8:	4651      	mov	r1, sl
 8005bfa:	00ca      	lsls	r2, r1, #3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	4642      	mov	r2, r8
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c08:	464b      	mov	r3, r9
 8005c0a:	460a      	mov	r2, r1
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1c:	667a      	str	r2, [r7, #100]	; 0x64
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	008b      	lsls	r3, r1, #2
 8005c2e:	4641      	mov	r1, r8
 8005c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c34:	4641      	mov	r1, r8
 8005c36:	008a      	lsls	r2, r1, #2
 8005c38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c3c:	f7fa fb28 	bl	8000290 <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005c46:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2164      	movs	r1, #100	; 0x64
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	3332      	adds	r3, #50	; 0x32
 8005c58:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4422      	add	r2, r4
 8005c6c:	609a      	str	r2, [r3, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c74:	46bd      	mov	sp, r7
 8005c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7a:	bf00      	nop
 8005c7c:	51eb851f 	.word	0x51eb851f

08005c80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c80:	b084      	sub	sp, #16
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	f107 001c 	add.w	r0, r7, #28
 8005c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d122      	bne.n	8005cde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d105      	bne.n	8005cd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fbee 	bl	80074b4 <USB_CoreReset>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
 8005cdc:	e01a      	b.n	8005d14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fbe2 	bl	80074b4 <USB_CoreReset>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
 8005d06:	e005      	b.n	8005d14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10b      	bne.n	8005d32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f043 0206 	orr.w	r2, r3, #6
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d3e:	b004      	add	sp, #16
 8005d40:	4770      	bx	lr
	...

08005d44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d165      	bne.n	8005e24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4a41      	ldr	r2, [pc, #260]	; (8005e60 <USB_SetTurnaroundTime+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d906      	bls.n	8005d6e <USB_SetTurnaroundTime+0x2a>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4a40      	ldr	r2, [pc, #256]	; (8005e64 <USB_SetTurnaroundTime+0x120>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d202      	bcs.n	8005d6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d68:	230f      	movs	r3, #15
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e062      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4a3c      	ldr	r2, [pc, #240]	; (8005e64 <USB_SetTurnaroundTime+0x120>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d306      	bcc.n	8005d84 <USB_SetTurnaroundTime+0x40>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4a3b      	ldr	r2, [pc, #236]	; (8005e68 <USB_SetTurnaroundTime+0x124>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d202      	bcs.n	8005d84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d7e:	230e      	movs	r3, #14
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e057      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4a38      	ldr	r2, [pc, #224]	; (8005e68 <USB_SetTurnaroundTime+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d306      	bcc.n	8005d9a <USB_SetTurnaroundTime+0x56>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4a37      	ldr	r2, [pc, #220]	; (8005e6c <USB_SetTurnaroundTime+0x128>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d202      	bcs.n	8005d9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d94:	230d      	movs	r3, #13
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e04c      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4a33      	ldr	r2, [pc, #204]	; (8005e6c <USB_SetTurnaroundTime+0x128>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d306      	bcc.n	8005db0 <USB_SetTurnaroundTime+0x6c>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4a32      	ldr	r2, [pc, #200]	; (8005e70 <USB_SetTurnaroundTime+0x12c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d802      	bhi.n	8005db0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005daa:	230c      	movs	r3, #12
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	e041      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4a2f      	ldr	r2, [pc, #188]	; (8005e70 <USB_SetTurnaroundTime+0x12c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d906      	bls.n	8005dc6 <USB_SetTurnaroundTime+0x82>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <USB_SetTurnaroundTime+0x130>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d802      	bhi.n	8005dc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005dc0:	230b      	movs	r3, #11
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e036      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <USB_SetTurnaroundTime+0x130>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d906      	bls.n	8005ddc <USB_SetTurnaroundTime+0x98>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4a29      	ldr	r2, [pc, #164]	; (8005e78 <USB_SetTurnaroundTime+0x134>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d802      	bhi.n	8005ddc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005dd6:	230a      	movs	r3, #10
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e02b      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4a26      	ldr	r2, [pc, #152]	; (8005e78 <USB_SetTurnaroundTime+0x134>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d906      	bls.n	8005df2 <USB_SetTurnaroundTime+0xae>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4a25      	ldr	r2, [pc, #148]	; (8005e7c <USB_SetTurnaroundTime+0x138>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d202      	bcs.n	8005df2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005dec:	2309      	movs	r3, #9
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	e020      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <USB_SetTurnaroundTime+0x138>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d306      	bcc.n	8005e08 <USB_SetTurnaroundTime+0xc4>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4a20      	ldr	r2, [pc, #128]	; (8005e80 <USB_SetTurnaroundTime+0x13c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d802      	bhi.n	8005e08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e02:	2308      	movs	r3, #8
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e015      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <USB_SetTurnaroundTime+0x13c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d906      	bls.n	8005e1e <USB_SetTurnaroundTime+0xda>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <USB_SetTurnaroundTime+0x140>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d202      	bcs.n	8005e1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e18:	2307      	movs	r3, #7
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e00a      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e1e:	2306      	movs	r3, #6
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e007      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e2a:	2309      	movs	r3, #9
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e001      	b.n	8005e34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e30:	2309      	movs	r3, #9
 8005e32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	029b      	lsls	r3, r3, #10
 8005e48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	00d8acbf 	.word	0x00d8acbf
 8005e64:	00e4e1c0 	.word	0x00e4e1c0
 8005e68:	00f42400 	.word	0x00f42400
 8005e6c:	01067380 	.word	0x01067380
 8005e70:	011a499f 	.word	0x011a499f
 8005e74:	01312cff 	.word	0x01312cff
 8005e78:	014ca43f 	.word	0x014ca43f
 8005e7c:	016e3600 	.word	0x016e3600
 8005e80:	01a6ab1f 	.word	0x01a6ab1f
 8005e84:	01e84800 	.word	0x01e84800

08005e88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d115      	bne.n	8005f1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005efa:	2001      	movs	r0, #1
 8005efc:	f7fb fa82 	bl	8001404 <HAL_Delay>
      ms++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 fa45 	bl	8007396 <USB_GetMode>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d01e      	beq.n	8005f50 <USB_SetCurrentMode+0x84>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b31      	cmp	r3, #49	; 0x31
 8005f16:	d9f0      	bls.n	8005efa <USB_SetCurrentMode+0x2e>
 8005f18:	e01a      	b.n	8005f50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d115      	bne.n	8005f4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	f7fb fa69 	bl	8001404 <HAL_Delay>
      ms++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fa2c 	bl	8007396 <USB_GetMode>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <USB_SetCurrentMode+0x84>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b31      	cmp	r3, #49	; 0x31
 8005f48:	d9f0      	bls.n	8005f2c <USB_SetCurrentMode+0x60>
 8005f4a:	e001      	b.n	8005f50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e005      	b.n	8005f5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b32      	cmp	r3, #50	; 0x32
 8005f54:	d101      	bne.n	8005f5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f64:	b084      	sub	sp, #16
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	e009      	b.n	8005f98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3340      	adds	r3, #64	; 0x40
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3301      	adds	r3, #1
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b0e      	cmp	r3, #14
 8005f9c:	d9f2      	bls.n	8005f84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d11c      	bne.n	8005fde <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb2:	f043 0302 	orr.w	r3, r3, #2
 8005fb6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
 8005fdc:	e00b      	b.n	8005ff6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2300      	movs	r3, #0
 8006000:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006008:	4619      	mov	r1, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	461a      	mov	r2, r3
 8006012:	680b      	ldr	r3, [r1, #0]
 8006014:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10c      	bne.n	8006036 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006022:	2100      	movs	r1, #0
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f965 	bl	80062f4 <USB_SetDevSpeed>
 800602a:	e008      	b.n	800603e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800602c:	2101      	movs	r1, #1
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f960 	bl	80062f4 <USB_SetDevSpeed>
 8006034:	e003      	b.n	800603e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006036:	2103      	movs	r1, #3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f95b 	bl	80062f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800603e:	2110      	movs	r1, #16
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f8f3 	bl	800622c <USB_FlushTxFifo>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f91f 	bl	8006294 <USB_FlushRxFifo>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	461a      	mov	r2, r3
 8006068:	2300      	movs	r3, #0
 800606a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	461a      	mov	r2, r3
 8006074:	2300      	movs	r3, #0
 8006076:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	461a      	mov	r2, r3
 8006080:	2300      	movs	r3, #0
 8006082:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006084:	2300      	movs	r3, #0
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e043      	b.n	8006112 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800609c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a0:	d118      	bne.n	80060d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	461a      	mov	r2, r3
 80060b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e013      	b.n	80060e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	461a      	mov	r2, r3
 80060cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e008      	b.n	80060e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f2:	461a      	mov	r2, r3
 80060f4:	2300      	movs	r3, #0
 80060f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	461a      	mov	r2, r3
 8006106:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800610a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	3301      	adds	r3, #1
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d3b7      	bcc.n	800608a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	e043      	b.n	80061a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006136:	d118      	bne.n	800616a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	461a      	mov	r2, r3
 800614c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	e013      	b.n	800617c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	461a      	mov	r2, r3
 8006162:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e008      	b.n	800617c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	461a      	mov	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006188:	461a      	mov	r2, r3
 800618a:	2300      	movs	r3, #0
 800618c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	461a      	mov	r2, r3
 800619c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3301      	adds	r3, #1
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d3b7      	bcc.n	8006120 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f043 0210 	orr.w	r2, r3, #16
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <USB_DevInit+0x2c4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f043 0208 	orr.w	r2, r3, #8
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d107      	bne.n	8006218 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006210:	f043 0304 	orr.w	r3, r3, #4
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006224:	b004      	add	sp, #16
 8006226:	4770      	bx	lr
 8006228:	803c3800 	.word	0x803c3800

0800622c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a13      	ldr	r2, [pc, #76]	; (8006290 <USB_FlushTxFifo+0x64>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e01b      	b.n	8006284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	daf2      	bge.n	800623a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	019b      	lsls	r3, r3, #6
 800625c:	f043 0220 	orr.w	r2, r3, #32
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a08      	ldr	r2, [pc, #32]	; (8006290 <USB_FlushTxFifo+0x64>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e006      	b.n	8006284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b20      	cmp	r3, #32
 8006280:	d0f0      	beq.n	8006264 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	00030d40 	.word	0x00030d40

08006294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3301      	adds	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4a11      	ldr	r2, [pc, #68]	; (80062f0 <USB_FlushRxFifo+0x5c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d901      	bls.n	80062b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e018      	b.n	80062e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	daf2      	bge.n	80062a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2210      	movs	r2, #16
 80062c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <USB_FlushRxFifo+0x5c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e006      	b.n	80062e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d0f0      	beq.n	80062c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	00030d40 	.word	0x00030d40

080062f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	68f9      	ldr	r1, [r7, #12]
 8006310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006314:	4313      	orrs	r3, r2
 8006316:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006326:	b480      	push	{r7}
 8006328:	b087      	sub	sp, #28
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 0306 	and.w	r3, r3, #6
 800633e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]
 800634a:	e00a      	b.n	8006362 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d002      	beq.n	8006358 <USB_GetDevSpeed+0x32>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b06      	cmp	r3, #6
 8006356:	d102      	bne.n	800635e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006358:	2302      	movs	r3, #2
 800635a:	75fb      	strb	r3, [r7, #23]
 800635c:	e001      	b.n	8006362 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800635e:	230f      	movs	r3, #15
 8006360:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006362:	7dfb      	ldrb	r3, [r7, #23]
}
 8006364:	4618      	mov	r0, r3
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d13a      	bne.n	8006402 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	2101      	movs	r1, #1
 800639e:	fa01 f303 	lsl.w	r3, r1, r3
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	68f9      	ldr	r1, [r7, #12]
 80063a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d155      	bne.n	8006470 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	791b      	ldrb	r3, [r3, #4]
 80063de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	059b      	lsls	r3, r3, #22
 80063e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063e8:	4313      	orrs	r3, r2
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e036      	b.n	8006470 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	69da      	ldr	r2, [r3, #28]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	2101      	movs	r1, #1
 8006414:	fa01 f303 	lsl.w	r3, r1, r3
 8006418:	041b      	lsls	r3, r3, #16
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006420:	4313      	orrs	r3, r2
 8006422:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11a      	bne.n	8006470 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	791b      	ldrb	r3, [r3, #4]
 8006454:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006456:	430b      	orrs	r3, r1
 8006458:	4313      	orrs	r3, r2
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	440a      	add	r2, r1
 8006462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800646a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d161      	bne.n	8006560 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b2:	d11f      	bne.n	80064f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	2101      	movs	r1, #1
 8006506:	fa01 f303 	lsl.w	r3, r1, r3
 800650a:	b29b      	uxth	r3, r3
 800650c:	43db      	mvns	r3, r3
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006514:	4013      	ands	r3, r2
 8006516:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	2101      	movs	r1, #1
 800652a:	fa01 f303 	lsl.w	r3, r1, r3
 800652e:	b29b      	uxth	r3, r3
 8006530:	43db      	mvns	r3, r3
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006538:	4013      	ands	r3, r2
 800653a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	0159      	lsls	r1, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	440b      	add	r3, r1
 8006552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006556:	4619      	mov	r1, r3
 8006558:	4b35      	ldr	r3, [pc, #212]	; (8006630 <USB_DeactivateEndpoint+0x1b0>)
 800655a:	4013      	ands	r3, r2
 800655c:	600b      	str	r3, [r1, #0]
 800655e:	e060      	b.n	8006622 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006576:	d11f      	bne.n	80065b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006592:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006596:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	2101      	movs	r1, #1
 80065ca:	fa01 f303 	lsl.w	r3, r1, r3
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	43db      	mvns	r3, r3
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065d8:	4013      	ands	r3, r2
 80065da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	2101      	movs	r1, #1
 80065ee:	fa01 f303 	lsl.w	r3, r1, r3
 80065f2:	041b      	lsls	r3, r3, #16
 80065f4:	43db      	mvns	r3, r3
 80065f6:	68f9      	ldr	r1, [r7, #12]
 80065f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065fc:	4013      	ands	r3, r2
 80065fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	0159      	lsls	r1, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	440b      	add	r3, r1
 8006616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661a:	4619      	mov	r1, r3
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <USB_DeactivateEndpoint+0x1b4>)
 800661e:	4013      	ands	r3, r2
 8006620:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	ec337800 	.word	0xec337800
 8006634:	eff37800 	.word	0xeff37800

08006638 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	4613      	mov	r3, r2
 8006644:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b01      	cmp	r3, #1
 8006656:	f040 815c 	bne.w	8006912 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d132      	bne.n	80066c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006680:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006684:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c0:	0cdb      	lsrs	r3, r3, #19
 80066c2:	04db      	lsls	r3, r3, #19
 80066c4:	6113      	str	r3, [r2, #16]
 80066c6:	e074      	b.n	80067b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e2:	0cdb      	lsrs	r3, r3, #19
 80066e4:	04db      	lsls	r3, r3, #19
 80066e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006702:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006706:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800670a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6999      	ldr	r1, [r3, #24]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	440b      	add	r3, r1
 8006724:	1e59      	subs	r1, r3, #1
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	fbb1 f3f3 	udiv	r3, r1, r3
 800672e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006730:	4b9d      	ldr	r3, [pc, #628]	; (80069a8 <USB_EPStartXfer+0x370>)
 8006732:	400b      	ands	r3, r1
 8006734:	69b9      	ldr	r1, [r7, #24]
 8006736:	0148      	lsls	r0, r1, #5
 8006738:	69f9      	ldr	r1, [r7, #28]
 800673a:	4401      	add	r1, r0
 800673c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006740:	4313      	orrs	r3, r2
 8006742:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800675a:	69b9      	ldr	r1, [r7, #24]
 800675c:	0148      	lsls	r0, r1, #5
 800675e:	69f9      	ldr	r1, [r7, #28]
 8006760:	4401      	add	r1, r0
 8006762:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006766:	4313      	orrs	r3, r2
 8006768:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	791b      	ldrb	r3, [r3, #4]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d11f      	bne.n	80067b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006790:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d14b      	bne.n	8006850 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	461a      	mov	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	791b      	ldrb	r3, [r3, #4]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d128      	bne.n	800682e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d110      	bne.n	800680e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006806:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	e00f      	b.n	800682e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006848:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	e133      	b.n	8006ab8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800686e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	791b      	ldrb	r3, [r3, #4]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d015      	beq.n	80068a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 811b 	beq.w	8006ab8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	2101      	movs	r1, #1
 8006894:	fa01 f303 	lsl.w	r3, r1, r3
 8006898:	69f9      	ldr	r1, [r7, #28]
 800689a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800689e:	4313      	orrs	r3, r2
 80068a0:	634b      	str	r3, [r1, #52]	; 0x34
 80068a2:	e109      	b.n	8006ab8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d110      	bne.n	80068d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e00f      	b.n	80068f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6919      	ldr	r1, [r3, #16]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	b298      	uxth	r0, r3
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	4603      	mov	r3, r0
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fade 	bl	8006ecc <USB_WritePacket>
 8006910:	e0d2      	b.n	8006ab8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692c:	0cdb      	lsrs	r3, r3, #19
 800692e:	04db      	lsls	r3, r3, #19
 8006930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006950:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006954:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d126      	bne.n	80069ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006974:	69b9      	ldr	r1, [r7, #24]
 8006976:	0148      	lsls	r0, r1, #5
 8006978:	69f9      	ldr	r1, [r7, #28]
 800697a:	4401      	add	r1, r0
 800697c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006980:	4313      	orrs	r3, r2
 8006982:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069a2:	6113      	str	r3, [r2, #16]
 80069a4:	e03a      	b.n	8006a1c <USB_EPStartXfer+0x3e4>
 80069a6:	bf00      	nop
 80069a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	1e5a      	subs	r2, r3, #1
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	8afa      	ldrh	r2, [r7, #22]
 80069c8:	fb03 f202 	mul.w	r2, r3, r2
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	8afb      	ldrh	r3, [r7, #22]
 80069e0:	04d9      	lsls	r1, r3, #19
 80069e2:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <USB_EPStartXfer+0x48c>)
 80069e4:	400b      	ands	r3, r1
 80069e6:	69b9      	ldr	r1, [r7, #24]
 80069e8:	0148      	lsls	r0, r1, #5
 80069ea:	69f9      	ldr	r1, [r7, #28]
 80069ec:	4401      	add	r1, r0
 80069ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069f2:	4313      	orrs	r3, r2
 80069f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0c:	69b9      	ldr	r1, [r7, #24]
 8006a0e:	0148      	lsls	r0, r1, #5
 8006a10:	69f9      	ldr	r1, [r7, #28]
 8006a12:	4401      	add	r1, r0
 8006a14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d10d      	bne.n	8006a3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6919      	ldr	r1, [r3, #16]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	791b      	ldrb	r3, [r3, #4]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d128      	bne.n	8006a98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d110      	bne.n	8006a78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	0151      	lsls	r1, r2, #5
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e00f      	b.n	8006a98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3720      	adds	r7, #32
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	1ff80000 	.word	0x1ff80000

08006ac8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	785b      	ldrb	r3, [r3, #1]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	f040 80ce 	bne.w	8006c86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d132      	bne.n	8006b58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b50:	0cdb      	lsrs	r3, r3, #19
 8006b52:	04db      	lsls	r3, r3, #19
 8006b54:	6113      	str	r3, [r2, #16]
 8006b56:	e04e      	b.n	8006bf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b72:	0cdb      	lsrs	r3, r3, #19
 8006b74:	04db      	lsls	r3, r3, #19
 8006b76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	699a      	ldr	r2, [r3, #24]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d903      	bls.n	8006bb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be6:	6939      	ldr	r1, [r7, #16]
 8006be8:	0148      	lsls	r0, r1, #5
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	4401      	add	r1, r0
 8006bee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d11e      	bne.n	8006c3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	461a      	mov	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	e097      	b.n	8006d6a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8083 	beq.w	8006d6a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	2101      	movs	r1, #1
 8006c76:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7a:	6979      	ldr	r1, [r7, #20]
 8006c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c80:	4313      	orrs	r3, r2
 8006c82:	634b      	str	r3, [r1, #52]	; 0x34
 8006c84:	e071      	b.n	8006d6a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	0151      	lsls	r1, r2, #5
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	440a      	add	r2, r1
 8006c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca0:	0cdb      	lsrs	r3, r3, #19
 8006ca2:	04db      	lsls	r3, r3, #19
 8006ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d18:	6939      	ldr	r1, [r7, #16]
 8006d1a:	0148      	lsls	r0, r1, #5
 8006d1c:	6979      	ldr	r1, [r7, #20]
 8006d1e:	4401      	add	r1, r0
 8006d20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d24:	4313      	orrs	r3, r2
 8006d26:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d10d      	bne.n	8006d4a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6919      	ldr	r1, [r3, #16]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d46:	460a      	mov	r2, r1
 8006d48:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d14a      	bne.n	8006e2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dae:	f040 8086 	bne.w	8006ebe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d902      	bls.n	8006e10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e0e:	e056      	b.n	8006ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e28:	d0e7      	beq.n	8006dfa <USB_EPStopXfer+0x82>
 8006e2a:	e048      	b.n	8006ebe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e44:	d13b      	bne.n	8006ebe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	7812      	ldrb	r2, [r2, #0]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d902      	bls.n	8006ea4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea2:	e00c      	b.n	8006ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ebc:	d0e7      	beq.n	8006e8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	; 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	71fb      	strb	r3, [r7, #7]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d123      	bne.n	8006f3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ef2:	88bb      	ldrh	r3, [r7, #4]
 8006ef4:	3303      	adds	r3, #3
 8006ef6:	089b      	lsrs	r3, r3, #2
 8006ef8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	e018      	b.n	8006f32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	031a      	lsls	r2, r3, #12
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	3301      	adds	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d3e2      	bcc.n	8006f00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3724      	adds	r7, #36	; 0x24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b08b      	sub	sp, #44	; 0x2c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	089b      	lsrs	r3, r3, #2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	623b      	str	r3, [r7, #32]
 8006f72:	e014      	b.n	8006f9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	3301      	adds	r3, #1
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	3301      	adds	r3, #1
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	3301      	adds	r3, #1
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	3301      	adds	r3, #1
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	623b      	str	r3, [r7, #32]
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3e6      	bcc.n	8006f74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fa6:	8bfb      	ldrh	r3, [r7, #30]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01e      	beq.n	8006fea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	701a      	strb	r2, [r3, #0]
      i++;
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	3301      	adds	r3, #1
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006fde:	8bfb      	ldrh	r3, [r7, #30]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fe4:	8bfb      	ldrh	r3, [r7, #30]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1ea      	bne.n	8006fc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	372c      	adds	r7, #44	; 0x2c
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d12c      	bne.n	800706e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	db12      	blt.n	800704c <USB_EPSetStall+0x54>
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00f      	beq.n	800704c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007046:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800704a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e02b      	b.n	80070c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	db12      	blt.n	80070a6 <USB_EPSetStall+0xae>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00f      	beq.n	80070a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d128      	bne.n	8007142 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800710e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d003      	beq.n	8007120 <USB_EPClearStall+0x4c>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	791b      	ldrb	r3, [r3, #4]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d138      	bne.n	8007192 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	e027      	b.n	8007192 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007160:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	791b      	ldrb	r3, [r3, #4]
 8007166:	2b03      	cmp	r3, #3
 8007168:	d003      	beq.n	8007172 <USB_EPClearStall+0x9e>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d10f      	bne.n	8007192 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007190:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071da:	4313      	orrs	r3, r2
 80071dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800721a:	f023 0302 	bic.w	r3, r3, #2
 800721e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007248:	f023 0303 	bic.w	r3, r3, #3
 800724c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4013      	ands	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	4013      	ands	r3, r2
 80072b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	0c1b      	lsrs	r3, r3, #16
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	b29b      	uxth	r3, r3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4013      	ands	r3, r2
 800732a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800732c:	68bb      	ldr	r3, [r7, #8]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800733a:	b480      	push	{r7}
 800733c:	b087      	sub	sp, #28
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	b2db      	uxtb	r3, r3
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4013      	ands	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007388:	68bb      	ldr	r3, [r7, #8]
}
 800738a:	4618      	mov	r0, r3
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f003 0301 	and.w	r3, r3, #1
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073d0:	f023 0307 	bic.w	r3, r3, #7
 80073d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	460b      	mov	r3, r1
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	333c      	adds	r3, #60	; 0x3c
 800740e:	3304      	adds	r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	4a26      	ldr	r2, [pc, #152]	; (80074b0 <USB_EP0_OutStart+0xb8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d90a      	bls.n	8007432 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800742c:	d101      	bne.n	8007432 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	e037      	b.n	80074a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007438:	461a      	mov	r2, r3
 800743a:	2300      	movs	r3, #0
 800743c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007460:	f043 0318 	orr.w	r3, r3, #24
 8007464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007474:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007478:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d10f      	bne.n	80074a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800749e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	4f54300a 	.word	0x4f54300a

080074b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a13      	ldr	r2, [pc, #76]	; (8007518 <USB_CoreReset+0x64>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e01b      	b.n	800750a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	daf2      	bge.n	80074c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f043 0201 	orr.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4a09      	ldr	r2, [pc, #36]	; (8007518 <USB_CoreReset+0x64>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e006      	b.n	800750a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d0f0      	beq.n	80074ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	00030d40 	.word	0x00030d40

0800751c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007528:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800752c:	f002 fc8a 	bl	8009e44 <USBD_static_malloc>
 8007530:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	32b0      	adds	r2, #176	; 0xb0
 8007542:	2100      	movs	r1, #0
 8007544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007548:	2302      	movs	r3, #2
 800754a:	e0d4      	b.n	80076f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800754c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007550:	2100      	movs	r1, #0
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f002 fcf2 	bl	8009f3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32b0      	adds	r2, #176	; 0xb0
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	32b0      	adds	r2, #176	; 0xb0
 8007572:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7c1b      	ldrb	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d138      	bne.n	80075f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007584:	4b5e      	ldr	r3, [pc, #376]	; (8007700 <USBD_CDC_Init+0x1e4>)
 8007586:	7819      	ldrb	r1, [r3, #0]
 8007588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800758c:	2202      	movs	r2, #2
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f002 fb35 	bl	8009bfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007594:	4b5a      	ldr	r3, [pc, #360]	; (8007700 <USBD_CDC_Init+0x1e4>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	f003 020f 	and.w	r2, r3, #15
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	3324      	adds	r3, #36	; 0x24
 80075aa:	2201      	movs	r2, #1
 80075ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80075ae:	4b55      	ldr	r3, [pc, #340]	; (8007704 <USBD_CDC_Init+0x1e8>)
 80075b0:	7819      	ldrb	r1, [r3, #0]
 80075b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075b6:	2202      	movs	r2, #2
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f002 fb20 	bl	8009bfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80075be:	4b51      	ldr	r3, [pc, #324]	; (8007704 <USBD_CDC_Init+0x1e8>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	f003 020f 	and.w	r2, r3, #15
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075d6:	2201      	movs	r2, #1
 80075d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80075da:	4b4b      	ldr	r3, [pc, #300]	; (8007708 <USBD_CDC_Init+0x1ec>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f003 020f 	and.w	r2, r3, #15
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	3326      	adds	r3, #38	; 0x26
 80075f0:	2210      	movs	r2, #16
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e035      	b.n	8007662 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80075f6:	4b42      	ldr	r3, [pc, #264]	; (8007700 <USBD_CDC_Init+0x1e4>)
 80075f8:	7819      	ldrb	r1, [r3, #0]
 80075fa:	2340      	movs	r3, #64	; 0x40
 80075fc:	2202      	movs	r2, #2
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f002 fafd 	bl	8009bfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007604:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <USBD_CDC_Init+0x1e4>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f003 020f 	and.w	r2, r3, #15
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	3324      	adds	r3, #36	; 0x24
 800761a:	2201      	movs	r2, #1
 800761c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800761e:	4b39      	ldr	r3, [pc, #228]	; (8007704 <USBD_CDC_Init+0x1e8>)
 8007620:	7819      	ldrb	r1, [r3, #0]
 8007622:	2340      	movs	r3, #64	; 0x40
 8007624:	2202      	movs	r2, #2
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f002 fae9 	bl	8009bfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800762c:	4b35      	ldr	r3, [pc, #212]	; (8007704 <USBD_CDC_Init+0x1e8>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	f003 020f 	and.w	r2, r3, #15
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007644:	2201      	movs	r2, #1
 8007646:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007648:	4b2f      	ldr	r3, [pc, #188]	; (8007708 <USBD_CDC_Init+0x1ec>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	f003 020f 	and.w	r2, r3, #15
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	3326      	adds	r3, #38	; 0x26
 800765e:	2210      	movs	r2, #16
 8007660:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007662:	4b29      	ldr	r3, [pc, #164]	; (8007708 <USBD_CDC_Init+0x1ec>)
 8007664:	7819      	ldrb	r1, [r3, #0]
 8007666:	2308      	movs	r3, #8
 8007668:	2203      	movs	r2, #3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f002 fac7 	bl	8009bfe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007670:	4b25      	ldr	r3, [pc, #148]	; (8007708 <USBD_CDC_Init+0x1ec>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	f003 020f 	and.w	r2, r3, #15
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	440b      	add	r3, r1
 8007684:	3324      	adds	r3, #36	; 0x24
 8007686:	2201      	movs	r2, #1
 8007688:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	33b0      	adds	r3, #176	; 0xb0
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80076c0:	2302      	movs	r3, #2
 80076c2:	e018      	b.n	80076f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7c1b      	ldrb	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076cc:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <USBD_CDC_Init+0x1e8>)
 80076ce:	7819      	ldrb	r1, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f002 fb7e 	bl	8009ddc <USBD_LL_PrepareReceive>
 80076e0:	e008      	b.n	80076f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <USBD_CDC_Init+0x1e8>)
 80076e4:	7819      	ldrb	r1, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076ec:	2340      	movs	r3, #64	; 0x40
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f002 fb74 	bl	8009ddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000093 	.word	0x20000093
 8007704:	20000094 	.word	0x20000094
 8007708:	20000095 	.word	0x20000095

0800770c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007718:	4b3a      	ldr	r3, [pc, #232]	; (8007804 <USBD_CDC_DeInit+0xf8>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f002 fa93 	bl	8009c4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007724:	4b37      	ldr	r3, [pc, #220]	; (8007804 <USBD_CDC_DeInit+0xf8>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 020f 	and.w	r2, r3, #15
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	3324      	adds	r3, #36	; 0x24
 800773a:	2200      	movs	r2, #0
 800773c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800773e:	4b32      	ldr	r3, [pc, #200]	; (8007808 <USBD_CDC_DeInit+0xfc>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f002 fa80 	bl	8009c4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800774a:	4b2f      	ldr	r3, [pc, #188]	; (8007808 <USBD_CDC_DeInit+0xfc>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	f003 020f 	and.w	r2, r3, #15
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007762:	2200      	movs	r2, #0
 8007764:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007766:	4b29      	ldr	r3, [pc, #164]	; (800780c <USBD_CDC_DeInit+0x100>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f002 fa6c 	bl	8009c4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007772:	4b26      	ldr	r3, [pc, #152]	; (800780c <USBD_CDC_DeInit+0x100>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	3324      	adds	r3, #36	; 0x24
 8007788:	2200      	movs	r2, #0
 800778a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800778c:	4b1f      	ldr	r3, [pc, #124]	; (800780c <USBD_CDC_DeInit+0x100>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 020f 	and.w	r2, r3, #15
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	3326      	adds	r3, #38	; 0x26
 80077a2:	2200      	movs	r2, #0
 80077a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	32b0      	adds	r2, #176	; 0xb0
 80077b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01f      	beq.n	80077f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	33b0      	adds	r3, #176	; 0xb0
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32b0      	adds	r2, #176	; 0xb0
 80077d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077da:	4618      	mov	r0, r3
 80077dc:	f002 fb40 	bl	8009e60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	32b0      	adds	r2, #176	; 0xb0
 80077ea:	2100      	movs	r1, #0
 80077ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000093 	.word	0x20000093
 8007808:	20000094 	.word	0x20000094
 800780c:	20000095 	.word	0x20000095

08007810 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	32b0      	adds	r2, #176	; 0xb0
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	e0bf      	b.n	80079c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007848:	2b00      	cmp	r3, #0
 800784a:	d050      	beq.n	80078ee <USBD_CDC_Setup+0xde>
 800784c:	2b20      	cmp	r3, #32
 800784e:	f040 80af 	bne.w	80079b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	88db      	ldrh	r3, [r3, #6]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d03a      	beq.n	80078d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b25b      	sxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	da1b      	bge.n	800789c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	33b0      	adds	r3, #176	; 0xb0
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800787a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	88d2      	ldrh	r2, [r2, #6]
 8007880:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88db      	ldrh	r3, [r3, #6]
 8007886:	2b07      	cmp	r3, #7
 8007888:	bf28      	it	cs
 800788a:	2307      	movcs	r3, #7
 800788c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	89fa      	ldrh	r2, [r7, #14]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 fd89 	bl	80093ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800789a:	e090      	b.n	80079be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	785a      	ldrb	r2, [r3, #1]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	88db      	ldrh	r3, [r3, #6]
 80078aa:	2b3f      	cmp	r3, #63	; 0x3f
 80078ac:	d803      	bhi.n	80078b6 <USBD_CDC_Setup+0xa6>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	88db      	ldrh	r3, [r3, #6]
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	e000      	b.n	80078b8 <USBD_CDC_Setup+0xa8>
 80078b6:	2240      	movs	r2, #64	; 0x40
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80078be:	6939      	ldr	r1, [r7, #16]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80078c6:	461a      	mov	r2, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fd9b 	bl	8009404 <USBD_CtlPrepareRx>
      break;
 80078ce:	e076      	b.n	80079be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	33b0      	adds	r3, #176	; 0xb0
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	7850      	ldrb	r0, [r2, #1]
 80078e6:	2200      	movs	r2, #0
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	4798      	blx	r3
      break;
 80078ec:	e067      	b.n	80079be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b0b      	cmp	r3, #11
 80078f4:	d851      	bhi.n	800799a <USBD_CDC_Setup+0x18a>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <USBD_CDC_Setup+0xec>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	0800792d 	.word	0x0800792d
 8007900:	080079a9 	.word	0x080079a9
 8007904:	0800799b 	.word	0x0800799b
 8007908:	0800799b 	.word	0x0800799b
 800790c:	0800799b 	.word	0x0800799b
 8007910:	0800799b 	.word	0x0800799b
 8007914:	0800799b 	.word	0x0800799b
 8007918:	0800799b 	.word	0x0800799b
 800791c:	0800799b 	.word	0x0800799b
 8007920:	0800799b 	.word	0x0800799b
 8007924:	08007957 	.word	0x08007957
 8007928:	08007981 	.word	0x08007981
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b03      	cmp	r3, #3
 8007936:	d107      	bne.n	8007948 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007938:	f107 030a 	add.w	r3, r7, #10
 800793c:	2202      	movs	r2, #2
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 fd33 	bl	80093ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007946:	e032      	b.n	80079ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fcbd 	bl	80092ca <USBD_CtlError>
            ret = USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	75fb      	strb	r3, [r7, #23]
          break;
 8007954:	e02b      	b.n	80079ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b03      	cmp	r3, #3
 8007960:	d107      	bne.n	8007972 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007962:	f107 030d 	add.w	r3, r7, #13
 8007966:	2201      	movs	r2, #1
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fd1e 	bl	80093ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007970:	e01d      	b.n	80079ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fca8 	bl	80092ca <USBD_CtlError>
            ret = USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	75fb      	strb	r3, [r7, #23]
          break;
 800797e:	e016      	b.n	80079ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b03      	cmp	r3, #3
 800798a:	d00f      	beq.n	80079ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 fc9b 	bl	80092ca <USBD_CtlError>
            ret = USBD_FAIL;
 8007994:	2303      	movs	r3, #3
 8007996:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007998:	e008      	b.n	80079ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 fc94 	bl	80092ca <USBD_CtlError>
          ret = USBD_FAIL;
 80079a2:	2303      	movs	r3, #3
 80079a4:	75fb      	strb	r3, [r7, #23]
          break;
 80079a6:	e002      	b.n	80079ae <USBD_CDC_Setup+0x19e>
          break;
 80079a8:	bf00      	nop
 80079aa:	e008      	b.n	80079be <USBD_CDC_Setup+0x1ae>
          break;
 80079ac:	bf00      	nop
      }
      break;
 80079ae:	e006      	b.n	80079be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 fc89 	bl	80092ca <USBD_CtlError>
      ret = USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	75fb      	strb	r3, [r7, #23]
      break;
 80079bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	32b0      	adds	r2, #176	; 0xb0
 80079e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e065      	b.n	8007abe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	32b0      	adds	r2, #176	; 0xb0
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a02:	78fb      	ldrb	r3, [r7, #3]
 8007a04:	f003 020f 	and.w	r2, r3, #15
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	3318      	adds	r3, #24
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d02f      	beq.n	8007a7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	f003 020f 	and.w	r2, r3, #15
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	3318      	adds	r3, #24
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	78fb      	ldrb	r3, [r7, #3]
 8007a34:	f003 010f 	and.w	r1, r3, #15
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	440b      	add	r3, r1
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4403      	add	r3, r0
 8007a44:	3348      	adds	r3, #72	; 0x48
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a4c:	fb01 f303 	mul.w	r3, r1, r3
 8007a50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d112      	bne.n	8007a7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	f003 020f 	and.w	r2, r3, #15
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	3318      	adds	r3, #24
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a6e:	78f9      	ldrb	r1, [r7, #3]
 8007a70:	2300      	movs	r3, #0
 8007a72:	2200      	movs	r2, #0
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f002 f990 	bl	8009d9a <USBD_LL_Transmit>
 8007a7a:	e01f      	b.n	8007abc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	33b0      	adds	r3, #176	; 0xb0
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d010      	beq.n	8007abc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	33b0      	adds	r3, #176	; 0xb0
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	32b0      	adds	r2, #176	; 0xb0
 8007adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	32b0      	adds	r2, #176	; 0xb0
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e01a      	b.n	8007b2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f002 f98e 	bl	8009e1e <USBD_LL_GetRxDataSize>
 8007b02:	4602      	mov	r2, r0
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	33b0      	adds	r3, #176	; 0xb0
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	32b0      	adds	r2, #176	; 0xb0
 8007b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e025      	b.n	8007ba4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	33b0      	adds	r3, #176	; 0xb0
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01a      	beq.n	8007ba2 <USBD_CDC_EP0_RxReady+0x6c>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b72:	2bff      	cmp	r3, #255	; 0xff
 8007b74:	d015      	beq.n	8007ba2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	33b0      	adds	r3, #176	; 0xb0
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007b8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b96:	b292      	uxth	r2, r2
 8007b98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	; 0xff
 8007b9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bb4:	2182      	movs	r1, #130	; 0x82
 8007bb6:	4818      	ldr	r0, [pc, #96]	; (8007c18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bb8:	f000 fd4f 	bl	800865a <USBD_GetEpDesc>
 8007bbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4815      	ldr	r0, [pc, #84]	; (8007c18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bc2:	f000 fd4a 	bl	800865a <USBD_GetEpDesc>
 8007bc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bc8:	2181      	movs	r1, #129	; 0x81
 8007bca:	4813      	ldr	r0, [pc, #76]	; (8007c18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bcc:	f000 fd45 	bl	800865a <USBD_GetEpDesc>
 8007bd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2210      	movs	r2, #16
 8007bdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bec:	711a      	strb	r2, [r3, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d006      	beq.n	8007c06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c00:	711a      	strb	r2, [r3, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2243      	movs	r2, #67	; 0x43
 8007c0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c0c:	4b02      	ldr	r3, [pc, #8]	; (8007c18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000050 	.word	0x20000050

08007c1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c24:	2182      	movs	r1, #130	; 0x82
 8007c26:	4818      	ldr	r0, [pc, #96]	; (8007c88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c28:	f000 fd17 	bl	800865a <USBD_GetEpDesc>
 8007c2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4815      	ldr	r0, [pc, #84]	; (8007c88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c32:	f000 fd12 	bl	800865a <USBD_GetEpDesc>
 8007c36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c38:	2181      	movs	r1, #129	; 0x81
 8007c3a:	4813      	ldr	r0, [pc, #76]	; (8007c88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c3c:	f000 fd0d 	bl	800865a <USBD_GetEpDesc>
 8007c40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d006      	beq.n	8007c62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2200      	movs	r2, #0
 8007c58:	711a      	strb	r2, [r3, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f042 0202 	orr.w	r2, r2, #2
 8007c60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d006      	beq.n	8007c76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	711a      	strb	r2, [r3, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f042 0202 	orr.w	r2, r2, #2
 8007c74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2243      	movs	r2, #67	; 0x43
 8007c7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c7c:	4b02      	ldr	r3, [pc, #8]	; (8007c88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20000050 	.word	0x20000050

08007c8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c94:	2182      	movs	r1, #130	; 0x82
 8007c96:	4818      	ldr	r0, [pc, #96]	; (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c98:	f000 fcdf 	bl	800865a <USBD_GetEpDesc>
 8007c9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4815      	ldr	r0, [pc, #84]	; (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ca2:	f000 fcda 	bl	800865a <USBD_GetEpDesc>
 8007ca6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ca8:	2181      	movs	r1, #129	; 0x81
 8007caa:	4813      	ldr	r0, [pc, #76]	; (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007cac:	f000 fcd5 	bl	800865a <USBD_GetEpDesc>
 8007cb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2210      	movs	r2, #16
 8007cbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ccc:	711a      	strb	r2, [r3, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d006      	beq.n	8007ce6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce0:	711a      	strb	r2, [r3, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2243      	movs	r2, #67	; 0x43
 8007cea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000050 	.word	0x20000050

08007cfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	220a      	movs	r2, #10
 8007d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d0a:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	2000000c 	.word	0x2000000c

08007d1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e009      	b.n	8007d44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	33b0      	adds	r3, #176	; 0xb0
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	32b0      	adds	r2, #176	; 0xb0
 8007d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e008      	b.n	8007d88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	32b0      	adds	r2, #176	; 0xb0
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e004      	b.n	8007dc2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	32b0      	adds	r2, #176	; 0xb0
 8007de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32b0      	adds	r2, #176	; 0xb0
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e025      	b.n	8007e4e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d11f      	bne.n	8007e4c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007e14:	4b10      	ldr	r3, [pc, #64]	; (8007e58 <USBD_CDC_TransmitPacket+0x88>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 020f 	and.w	r2, r3, #15
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4403      	add	r3, r0
 8007e2e:	3318      	adds	r3, #24
 8007e30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007e32:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <USBD_CDC_TransmitPacket+0x88>)
 8007e34:	7819      	ldrb	r1, [r3, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 ffa9 	bl	8009d9a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20000093 	.word	0x20000093

08007e5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32b0      	adds	r2, #176	; 0xb0
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	32b0      	adds	r2, #176	; 0xb0
 8007e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e018      	b.n	8007ebc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7c1b      	ldrb	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <USBD_CDC_ReceivePacket+0x68>)
 8007e94:	7819      	ldrb	r1, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 ff9b 	bl	8009ddc <USBD_LL_PrepareReceive>
 8007ea6:	e008      	b.n	8007eba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ea8:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <USBD_CDC_ReceivePacket+0x68>)
 8007eaa:	7819      	ldrb	r1, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007eb2:	2340      	movs	r3, #64	; 0x40
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 ff91 	bl	8009ddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20000094 	.word	0x20000094

08007ec8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e01f      	b.n	8007f20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	79fa      	ldrb	r2, [r7, #7]
 8007f12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f001 fe0b 	bl	8009b30 <USBD_LL_Init>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e025      	b.n	8007f8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	32ae      	adds	r2, #174	; 0xae
 8007f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00f      	beq.n	8007f7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	32ae      	adds	r2, #174	; 0xae
 8007f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	f107 020e 	add.w	r2, r7, #14
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	4602      	mov	r2, r0
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 fe13 	bl	8009bc8 <USBD_LL_Start>
 8007fa2:	4603      	mov	r3, r0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fb4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d009      	beq.n	8007ff0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	4611      	mov	r1, r2
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f001 f908 	bl	8009256 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008054:	461a      	mov	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008062:	f003 031f 	and.w	r3, r3, #31
 8008066:	2b02      	cmp	r3, #2
 8008068:	d01a      	beq.n	80080a0 <USBD_LL_SetupStage+0x72>
 800806a:	2b02      	cmp	r3, #2
 800806c:	d822      	bhi.n	80080b4 <USBD_LL_SetupStage+0x86>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <USBD_LL_SetupStage+0x4a>
 8008072:	2b01      	cmp	r3, #1
 8008074:	d00a      	beq.n	800808c <USBD_LL_SetupStage+0x5e>
 8008076:	e01d      	b.n	80080b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb5f 	bl	8008744 <USBD_StdDevReq>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]
      break;
 800808a:	e020      	b.n	80080ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fbc7 	bl	8008828 <USBD_StdItfReq>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
      break;
 800809e:	e016      	b.n	80080ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fc29 	bl	8008900 <USBD_StdEPReq>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
      break;
 80080b2:	e00c      	b.n	80080ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fde0 	bl	8009c88 <USBD_LL_StallEP>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]
      break;
 80080cc:	bf00      	nop
  }

  return ret;
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	460b      	mov	r3, r1
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080ea:	7afb      	ldrb	r3, [r7, #11]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d16e      	bne.n	80081ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080fe:	2b03      	cmp	r3, #3
 8008100:	f040 8098 	bne.w	8008234 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	429a      	cmp	r2, r3
 800810e:	d913      	bls.n	8008138 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	1ad2      	subs	r2, r2, r3
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	4293      	cmp	r3, r2
 8008128:	bf28      	it	cs
 800812a:	4613      	movcs	r3, r2
 800812c:	461a      	mov	r2, r3
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f001 f984 	bl	800943e <USBD_CtlContinueRx>
 8008136:	e07d      	b.n	8008234 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800813e:	f003 031f 	and.w	r3, r3, #31
 8008142:	2b02      	cmp	r3, #2
 8008144:	d014      	beq.n	8008170 <USBD_LL_DataOutStage+0x98>
 8008146:	2b02      	cmp	r3, #2
 8008148:	d81d      	bhi.n	8008186 <USBD_LL_DataOutStage+0xae>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <USBD_LL_DataOutStage+0x7c>
 800814e:	2b01      	cmp	r3, #1
 8008150:	d003      	beq.n	800815a <USBD_LL_DataOutStage+0x82>
 8008152:	e018      	b.n	8008186 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	75bb      	strb	r3, [r7, #22]
            break;
 8008158:	e018      	b.n	800818c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008160:	b2db      	uxtb	r3, r3
 8008162:	4619      	mov	r1, r3
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fa5e 	bl	8008626 <USBD_CoreFindIF>
 800816a:	4603      	mov	r3, r0
 800816c:	75bb      	strb	r3, [r7, #22]
            break;
 800816e:	e00d      	b.n	800818c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008176:	b2db      	uxtb	r3, r3
 8008178:	4619      	mov	r1, r3
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 fa60 	bl	8008640 <USBD_CoreFindEP>
 8008180:	4603      	mov	r3, r0
 8008182:	75bb      	strb	r3, [r7, #22]
            break;
 8008184:	e002      	b.n	800818c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	75bb      	strb	r3, [r7, #22]
            break;
 800818a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800818c:	7dbb      	ldrb	r3, [r7, #22]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d119      	bne.n	80081c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b03      	cmp	r3, #3
 800819c:	d113      	bne.n	80081c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800819e:	7dba      	ldrb	r2, [r7, #22]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	32ae      	adds	r2, #174	; 0xae
 80081a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80081ae:	7dba      	ldrb	r2, [r7, #22]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081b6:	7dba      	ldrb	r2, [r7, #22]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	32ae      	adds	r2, #174	; 0xae
 80081bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f001 f94a 	bl	8009460 <USBD_CtlSendStatus>
 80081cc:	e032      	b.n	8008234 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081ce:	7afb      	ldrb	r3, [r7, #11]
 80081d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 fa31 	bl	8008640 <USBD_CoreFindEP>
 80081de:	4603      	mov	r3, r0
 80081e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081e2:	7dbb      	ldrb	r3, [r7, #22]
 80081e4:	2bff      	cmp	r3, #255	; 0xff
 80081e6:	d025      	beq.n	8008234 <USBD_LL_DataOutStage+0x15c>
 80081e8:	7dbb      	ldrb	r3, [r7, #22]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d122      	bne.n	8008234 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d117      	bne.n	800822a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80081fa:	7dba      	ldrb	r2, [r7, #22]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	32ae      	adds	r2, #174	; 0xae
 8008200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00f      	beq.n	800822a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800820a:	7dba      	ldrb	r2, [r7, #22]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008212:	7dba      	ldrb	r2, [r7, #22]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	32ae      	adds	r2, #174	; 0xae
 8008218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	7afa      	ldrb	r2, [r7, #11]
 8008220:	4611      	mov	r1, r2
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	4798      	blx	r3
 8008226:	4603      	mov	r3, r0
 8008228:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	e000      	b.n	8008236 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b086      	sub	sp, #24
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	460b      	mov	r3, r1
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d16f      	bne.n	8008332 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3314      	adds	r3, #20
 8008256:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800825e:	2b02      	cmp	r3, #2
 8008260:	d15a      	bne.n	8008318 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	429a      	cmp	r2, r3
 800826c:	d914      	bls.n	8008298 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	1ad2      	subs	r2, r2, r3
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	461a      	mov	r2, r3
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f001 f8ac 	bl	80093e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800828a:	2300      	movs	r3, #0
 800828c:	2200      	movs	r2, #0
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f001 fda3 	bl	8009ddc <USBD_LL_PrepareReceive>
 8008296:	e03f      	b.n	8008318 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d11c      	bne.n	80082de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d316      	bcc.n	80082de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d20f      	bcs.n	80082de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082be:	2200      	movs	r2, #0
 80082c0:	2100      	movs	r1, #0
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f001 f88d 	bl	80093e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082d0:	2300      	movs	r3, #0
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f001 fd80 	bl	8009ddc <USBD_LL_PrepareReceive>
 80082dc:	e01c      	b.n	8008318 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d10f      	bne.n	800830a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800830a:	2180      	movs	r1, #128	; 0x80
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f001 fcbb 	bl	8009c88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f001 f8b7 	bl	8009486 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d03a      	beq.n	8008398 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff fe42 	bl	8007fac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008330:	e032      	b.n	8008398 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008332:	7afb      	ldrb	r3, [r7, #11]
 8008334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008338:	b2db      	uxtb	r3, r3
 800833a:	4619      	mov	r1, r3
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f97f 	bl	8008640 <USBD_CoreFindEP>
 8008342:	4603      	mov	r3, r0
 8008344:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	2bff      	cmp	r3, #255	; 0xff
 800834a:	d025      	beq.n	8008398 <USBD_LL_DataInStage+0x15a>
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d122      	bne.n	8008398 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b03      	cmp	r3, #3
 800835c:	d11c      	bne.n	8008398 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800835e:	7dfa      	ldrb	r2, [r7, #23]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	32ae      	adds	r2, #174	; 0xae
 8008364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d014      	beq.n	8008398 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800836e:	7dfa      	ldrb	r2, [r7, #23]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008376:	7dfa      	ldrb	r2, [r7, #23]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	32ae      	adds	r2, #174	; 0xae
 800837c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	7afa      	ldrb	r2, [r7, #11]
 8008384:	4611      	mov	r1, r2
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	4798      	blx	r3
 800838a:	4603      	mov	r3, r0
 800838c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800838e:	7dbb      	ldrb	r3, [r7, #22]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008394:	7dbb      	ldrb	r3, [r7, #22]
 8008396:	e000      	b.n	800839a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d014      	beq.n	8008408 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00e      	beq.n	8008408 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6852      	ldr	r2, [r2, #4]
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	4611      	mov	r1, r2
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008404:	2303      	movs	r3, #3
 8008406:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008408:	2340      	movs	r3, #64	; 0x40
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 fbf5 	bl	8009bfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	2200      	movs	r2, #0
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fbe7 	bl	8009bfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2240      	movs	r2, #64	; 0x40
 800843a:	621a      	str	r2, [r3, #32]

  return ret;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	78fa      	ldrb	r2, [r7, #3]
 8008456:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	b2da      	uxtb	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2204      	movs	r2, #4
 8008480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d106      	bne.n	80084b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b082      	sub	sp, #8
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d110      	bne.n	80084f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	32ae      	adds	r2, #174	; 0xae
 8008518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008520:	2303      	movs	r3, #3
 8008522:	e01c      	b.n	800855e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b03      	cmp	r3, #3
 800852e:	d115      	bne.n	800855c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	32ae      	adds	r2, #174	; 0xae
 800853a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	32ae      	adds	r2, #174	; 0xae
 800854e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	4611      	mov	r1, r2
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32ae      	adds	r2, #174	; 0xae
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e01c      	b.n	80085c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b03      	cmp	r3, #3
 8008592:	d115      	bne.n	80085c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	32ae      	adds	r2, #174	; 0xae
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	32ae      	adds	r2, #174	; 0xae
 80085b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	4611      	mov	r1, r2
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00e      	beq.n	800861c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6852      	ldr	r2, [r2, #4]
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	4611      	mov	r1, r2
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4798      	blx	r3
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008618:	2303      	movs	r3, #3
 800861a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008632:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800864c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b086      	sub	sp, #24
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	885b      	ldrh	r3, [r3, #2]
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	b29b      	uxth	r3, r3
 800867e:	429a      	cmp	r2, r3
 8008680:	d920      	bls.n	80086c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800868a:	e013      	b.n	80086b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800868c:	f107 030a 	add.w	r3, r7, #10
 8008690:	4619      	mov	r1, r3
 8008692:	6978      	ldr	r0, [r7, #20]
 8008694:	f000 f81b 	bl	80086ce <USBD_GetNextDesc>
 8008698:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	785b      	ldrb	r3, [r3, #1]
 800869e:	2b05      	cmp	r3, #5
 80086a0:	d108      	bne.n	80086b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	789b      	ldrb	r3, [r3, #2]
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d008      	beq.n	80086c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	885b      	ldrh	r3, [r3, #2]
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	897b      	ldrh	r3, [r7, #10]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d8e5      	bhi.n	800868c <USBD_GetEpDesc+0x32>
 80086c0:	e000      	b.n	80086c4 <USBD_GetEpDesc+0x6a>
          break;
 80086c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086c4:	693b      	ldr	r3, [r7, #16]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	881a      	ldrh	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4413      	add	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086fa:	68fb      	ldr	r3, [r7, #12]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	3301      	adds	r3, #1
 800871e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008726:	8a3b      	ldrh	r3, [r7, #16]
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	b21a      	sxth	r2, r3
 800872c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008730:	4313      	orrs	r3, r2
 8008732:	b21b      	sxth	r3, r3
 8008734:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008736:	89fb      	ldrh	r3, [r7, #14]
}
 8008738:	4618      	mov	r0, r3
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800875a:	2b40      	cmp	r3, #64	; 0x40
 800875c:	d005      	beq.n	800876a <USBD_StdDevReq+0x26>
 800875e:	2b40      	cmp	r3, #64	; 0x40
 8008760:	d857      	bhi.n	8008812 <USBD_StdDevReq+0xce>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00f      	beq.n	8008786 <USBD_StdDevReq+0x42>
 8008766:	2b20      	cmp	r3, #32
 8008768:	d153      	bne.n	8008812 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	32ae      	adds	r2, #174	; 0xae
 8008774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	4798      	blx	r3
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
      break;
 8008784:	e04a      	b.n	800881c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	785b      	ldrb	r3, [r3, #1]
 800878a:	2b09      	cmp	r3, #9
 800878c:	d83b      	bhi.n	8008806 <USBD_StdDevReq+0xc2>
 800878e:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <USBD_StdDevReq+0x50>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	080087e9 	.word	0x080087e9
 8008798:	080087fd 	.word	0x080087fd
 800879c:	08008807 	.word	0x08008807
 80087a0:	080087f3 	.word	0x080087f3
 80087a4:	08008807 	.word	0x08008807
 80087a8:	080087c7 	.word	0x080087c7
 80087ac:	080087bd 	.word	0x080087bd
 80087b0:	08008807 	.word	0x08008807
 80087b4:	080087df 	.word	0x080087df
 80087b8:	080087d1 	.word	0x080087d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa3c 	bl	8008c3c <USBD_GetDescriptor>
          break;
 80087c4:	e024      	b.n	8008810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fba1 	bl	8008f10 <USBD_SetAddress>
          break;
 80087ce:	e01f      	b.n	8008810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fbe0 	bl	8008f98 <USBD_SetConfig>
 80087d8:	4603      	mov	r3, r0
 80087da:	73fb      	strb	r3, [r7, #15]
          break;
 80087dc:	e018      	b.n	8008810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fc83 	bl	80090ec <USBD_GetConfig>
          break;
 80087e6:	e013      	b.n	8008810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fcb4 	bl	8009158 <USBD_GetStatus>
          break;
 80087f0:	e00e      	b.n	8008810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fce3 	bl	80091c0 <USBD_SetFeature>
          break;
 80087fa:	e009      	b.n	8008810 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fd07 	bl	8009212 <USBD_ClrFeature>
          break;
 8008804:	e004      	b.n	8008810 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fd5e 	bl	80092ca <USBD_CtlError>
          break;
 800880e:	bf00      	nop
      }
      break;
 8008810:	e004      	b.n	800881c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fd58 	bl	80092ca <USBD_CtlError>
      break;
 800881a:	bf00      	nop
  }

  return ret;
 800881c:	7bfb      	ldrb	r3, [r7, #15]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop

08008828 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800883e:	2b40      	cmp	r3, #64	; 0x40
 8008840:	d005      	beq.n	800884e <USBD_StdItfReq+0x26>
 8008842:	2b40      	cmp	r3, #64	; 0x40
 8008844:	d852      	bhi.n	80088ec <USBD_StdItfReq+0xc4>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <USBD_StdItfReq+0x26>
 800884a:	2b20      	cmp	r3, #32
 800884c:	d14e      	bne.n	80088ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008854:	b2db      	uxtb	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	2b02      	cmp	r3, #2
 800885a:	d840      	bhi.n	80088de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	889b      	ldrh	r3, [r3, #4]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b01      	cmp	r3, #1
 8008864:	d836      	bhi.n	80088d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	889b      	ldrh	r3, [r3, #4]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff fed9 	bl	8008626 <USBD_CoreFindIF>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2bff      	cmp	r3, #255	; 0xff
 800887c:	d01d      	beq.n	80088ba <USBD_StdItfReq+0x92>
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11a      	bne.n	80088ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008884:	7bba      	ldrb	r2, [r7, #14]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	32ae      	adds	r2, #174	; 0xae
 800888a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00f      	beq.n	80088b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008894:	7bba      	ldrb	r2, [r7, #14]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800889c:	7bba      	ldrb	r2, [r7, #14]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	32ae      	adds	r2, #174	; 0xae
 80088a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088b2:	e004      	b.n	80088be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088b8:	e001      	b.n	80088be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088ba:	2303      	movs	r3, #3
 80088bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	88db      	ldrh	r3, [r3, #6]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d110      	bne.n	80088e8 <USBD_StdItfReq+0xc0>
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10d      	bne.n	80088e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fdc7 	bl	8009460 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088d2:	e009      	b.n	80088e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fcf7 	bl	80092ca <USBD_CtlError>
          break;
 80088dc:	e004      	b.n	80088e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fcf2 	bl	80092ca <USBD_CtlError>
          break;
 80088e6:	e000      	b.n	80088ea <USBD_StdItfReq+0xc2>
          break;
 80088e8:	bf00      	nop
      }
      break;
 80088ea:	e004      	b.n	80088f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fceb 	bl	80092ca <USBD_CtlError>
      break;
 80088f4:	bf00      	nop
  }

  return ret;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	889b      	ldrh	r3, [r3, #4]
 8008912:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800891c:	2b40      	cmp	r3, #64	; 0x40
 800891e:	d007      	beq.n	8008930 <USBD_StdEPReq+0x30>
 8008920:	2b40      	cmp	r3, #64	; 0x40
 8008922:	f200 817f 	bhi.w	8008c24 <USBD_StdEPReq+0x324>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d02a      	beq.n	8008980 <USBD_StdEPReq+0x80>
 800892a:	2b20      	cmp	r3, #32
 800892c:	f040 817a 	bne.w	8008c24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fe83 	bl	8008640 <USBD_CoreFindEP>
 800893a:	4603      	mov	r3, r0
 800893c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800893e:	7b7b      	ldrb	r3, [r7, #13]
 8008940:	2bff      	cmp	r3, #255	; 0xff
 8008942:	f000 8174 	beq.w	8008c2e <USBD_StdEPReq+0x32e>
 8008946:	7b7b      	ldrb	r3, [r7, #13]
 8008948:	2b00      	cmp	r3, #0
 800894a:	f040 8170 	bne.w	8008c2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800894e:	7b7a      	ldrb	r2, [r7, #13]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008956:	7b7a      	ldrb	r2, [r7, #13]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	32ae      	adds	r2, #174	; 0xae
 800895c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8163 	beq.w	8008c2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008968:	7b7a      	ldrb	r2, [r7, #13]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	32ae      	adds	r2, #174	; 0xae
 800896e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	4798      	blx	r3
 800897a:	4603      	mov	r3, r0
 800897c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800897e:	e156      	b.n	8008c2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	2b03      	cmp	r3, #3
 8008986:	d008      	beq.n	800899a <USBD_StdEPReq+0x9a>
 8008988:	2b03      	cmp	r3, #3
 800898a:	f300 8145 	bgt.w	8008c18 <USBD_StdEPReq+0x318>
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 809b 	beq.w	8008aca <USBD_StdEPReq+0x1ca>
 8008994:	2b01      	cmp	r3, #1
 8008996:	d03c      	beq.n	8008a12 <USBD_StdEPReq+0x112>
 8008998:	e13e      	b.n	8008c18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d002      	beq.n	80089ac <USBD_StdEPReq+0xac>
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d016      	beq.n	80089d8 <USBD_StdEPReq+0xd8>
 80089aa:	e02c      	b.n	8008a06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00d      	beq.n	80089ce <USBD_StdEPReq+0xce>
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b80      	cmp	r3, #128	; 0x80
 80089b6:	d00a      	beq.n	80089ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f963 	bl	8009c88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c2:	2180      	movs	r1, #128	; 0x80
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f95f 	bl	8009c88 <USBD_LL_StallEP>
 80089ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089cc:	e020      	b.n	8008a10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fc7a 	bl	80092ca <USBD_CtlError>
              break;
 80089d6:	e01b      	b.n	8008a10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10e      	bne.n	80089fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <USBD_StdEPReq+0xfe>
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b80      	cmp	r3, #128	; 0x80
 80089ea:	d008      	beq.n	80089fe <USBD_StdEPReq+0xfe>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	88db      	ldrh	r3, [r3, #6]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d104      	bne.n	80089fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f945 	bl	8009c88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fd2e 	bl	8009460 <USBD_CtlSendStatus>

              break;
 8008a04:	e004      	b.n	8008a10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fc5e 	bl	80092ca <USBD_CtlError>
              break;
 8008a0e:	bf00      	nop
          }
          break;
 8008a10:	e107      	b.n	8008c22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d002      	beq.n	8008a24 <USBD_StdEPReq+0x124>
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d016      	beq.n	8008a50 <USBD_StdEPReq+0x150>
 8008a22:	e04b      	b.n	8008abc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00d      	beq.n	8008a46 <USBD_StdEPReq+0x146>
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b80      	cmp	r3, #128	; 0x80
 8008a2e:	d00a      	beq.n	8008a46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f927 	bl	8009c88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a3a:	2180      	movs	r1, #128	; 0x80
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 f923 	bl	8009c88 <USBD_LL_StallEP>
 8008a42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a44:	e040      	b.n	8008ac8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fc3e 	bl	80092ca <USBD_CtlError>
              break;
 8008a4e:	e03b      	b.n	8008ac8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	885b      	ldrh	r3, [r3, #2]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d136      	bne.n	8008ac6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d004      	beq.n	8008a6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 f92d 	bl	8009cc6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fcf7 	bl	8009460 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff fde2 	bl	8008640 <USBD_CoreFindEP>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a80:	7b7b      	ldrb	r3, [r7, #13]
 8008a82:	2bff      	cmp	r3, #255	; 0xff
 8008a84:	d01f      	beq.n	8008ac6 <USBD_StdEPReq+0x1c6>
 8008a86:	7b7b      	ldrb	r3, [r7, #13]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d11c      	bne.n	8008ac6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a8c:	7b7a      	ldrb	r2, [r7, #13]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a94:	7b7a      	ldrb	r2, [r7, #13]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	32ae      	adds	r2, #174	; 0xae
 8008a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d010      	beq.n	8008ac6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008aa4:	7b7a      	ldrb	r2, [r7, #13]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32ae      	adds	r2, #174	; 0xae
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008aba:	e004      	b.n	8008ac6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fc03 	bl	80092ca <USBD_CtlError>
              break;
 8008ac4:	e000      	b.n	8008ac8 <USBD_StdEPReq+0x1c8>
              break;
 8008ac6:	bf00      	nop
          }
          break;
 8008ac8:	e0ab      	b.n	8008c22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d002      	beq.n	8008adc <USBD_StdEPReq+0x1dc>
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d032      	beq.n	8008b40 <USBD_StdEPReq+0x240>
 8008ada:	e097      	b.n	8008c0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d007      	beq.n	8008af2 <USBD_StdEPReq+0x1f2>
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b80      	cmp	r3, #128	; 0x80
 8008ae6:	d004      	beq.n	8008af2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fbed 	bl	80092ca <USBD_CtlError>
                break;
 8008af0:	e091      	b.n	8008c16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008af2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	da0b      	bge.n	8008b12 <USBD_StdEPReq+0x212>
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	3310      	adds	r3, #16
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	3304      	adds	r3, #4
 8008b10:	e00b      	b.n	8008b2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b18:	4613      	mov	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4413      	add	r3, r2
 8008b28:	3304      	adds	r3, #4
 8008b2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2202      	movs	r2, #2
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fc37 	bl	80093ac <USBD_CtlSendData>
              break;
 8008b3e:	e06a      	b.n	8008c16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	da11      	bge.n	8008b6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
 8008b4a:	f003 020f 	and.w	r2, r3, #15
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	3324      	adds	r3, #36	; 0x24
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d117      	bne.n	8008b92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fbb0 	bl	80092ca <USBD_CtlError>
                  break;
 8008b6a:	e054      	b.n	8008c16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	f003 020f 	and.w	r2, r3, #15
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d104      	bne.n	8008b92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fb9d 	bl	80092ca <USBD_CtlError>
                  break;
 8008b90:	e041      	b.n	8008c16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	da0b      	bge.n	8008bb2 <USBD_StdEPReq+0x2b2>
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	3310      	adds	r3, #16
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	4413      	add	r3, r2
 8008bae:	3304      	adds	r3, #4
 8008bb0:	e00b      	b.n	8008bca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3304      	adds	r3, #4
 8008bca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <USBD_StdEPReq+0x2d8>
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b80      	cmp	r3, #128	; 0x80
 8008bd6:	d103      	bne.n	8008be0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	e00e      	b.n	8008bfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f88d 	bl	8009d04 <USBD_LL_IsStallEP>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	e002      	b.n	8008bfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2202      	movs	r2, #2
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fbd1 	bl	80093ac <USBD_CtlSendData>
              break;
 8008c0a:	e004      	b.n	8008c16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb5b 	bl	80092ca <USBD_CtlError>
              break;
 8008c14:	bf00      	nop
          }
          break;
 8008c16:	e004      	b.n	8008c22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fb55 	bl	80092ca <USBD_CtlError>
          break;
 8008c20:	bf00      	nop
      }
      break;
 8008c22:	e005      	b.n	8008c30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fb4f 	bl	80092ca <USBD_CtlError>
      break;
 8008c2c:	e000      	b.n	8008c30 <USBD_StdEPReq+0x330>
      break;
 8008c2e:	bf00      	nop
  }

  return ret;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	885b      	ldrh	r3, [r3, #2]
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	2b06      	cmp	r3, #6
 8008c5e:	f200 8128 	bhi.w	8008eb2 <USBD_GetDescriptor+0x276>
 8008c62:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <USBD_GetDescriptor+0x2c>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	08008c9d 	.word	0x08008c9d
 8008c70:	08008cdd 	.word	0x08008cdd
 8008c74:	08008eb3 	.word	0x08008eb3
 8008c78:	08008eb3 	.word	0x08008eb3
 8008c7c:	08008e53 	.word	0x08008e53
 8008c80:	08008e7f 	.word	0x08008e7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7c12      	ldrb	r2, [r2, #16]
 8008c90:	f107 0108 	add.w	r1, r7, #8
 8008c94:	4610      	mov	r0, r2
 8008c96:	4798      	blx	r3
 8008c98:	60f8      	str	r0, [r7, #12]
      break;
 8008c9a:	e112      	b.n	8008ec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7c1b      	ldrb	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10d      	bne.n	8008cc0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	f107 0208 	add.w	r2, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	2202      	movs	r2, #2
 8008cbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cbe:	e100      	b.n	8008ec2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	f107 0208 	add.w	r2, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	701a      	strb	r2, [r3, #0]
      break;
 8008cda:	e0f2      	b.n	8008ec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	885b      	ldrh	r3, [r3, #2]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	f200 80ac 	bhi.w	8008e40 <USBD_GetDescriptor+0x204>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <USBD_GetDescriptor+0xb4>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d09 	.word	0x08008d09
 8008cf4:	08008d3d 	.word	0x08008d3d
 8008cf8:	08008d71 	.word	0x08008d71
 8008cfc:	08008da5 	.word	0x08008da5
 8008d00:	08008dd9 	.word	0x08008dd9
 8008d04:	08008e0d 	.word	0x08008e0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	7c12      	ldrb	r2, [r2, #16]
 8008d20:	f107 0108 	add.w	r1, r7, #8
 8008d24:	4610      	mov	r0, r2
 8008d26:	4798      	blx	r3
 8008d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d2a:	e091      	b.n	8008e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 facb 	bl	80092ca <USBD_CtlError>
            err++;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	3301      	adds	r3, #1
 8008d38:	72fb      	strb	r3, [r7, #11]
          break;
 8008d3a:	e089      	b.n	8008e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	7c12      	ldrb	r2, [r2, #16]
 8008d54:	f107 0108 	add.w	r1, r7, #8
 8008d58:	4610      	mov	r0, r2
 8008d5a:	4798      	blx	r3
 8008d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d5e:	e077      	b.n	8008e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fab1 	bl	80092ca <USBD_CtlError>
            err++;
 8008d68:	7afb      	ldrb	r3, [r7, #11]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d6e:	e06f      	b.n	8008e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	7c12      	ldrb	r2, [r2, #16]
 8008d88:	f107 0108 	add.w	r1, r7, #8
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4798      	blx	r3
 8008d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d92:	e05d      	b.n	8008e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fa97 	bl	80092ca <USBD_CtlError>
            err++;
 8008d9c:	7afb      	ldrb	r3, [r7, #11]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	72fb      	strb	r3, [r7, #11]
          break;
 8008da2:	e055      	b.n	8008e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00b      	beq.n	8008dc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	7c12      	ldrb	r2, [r2, #16]
 8008dbc:	f107 0108 	add.w	r1, r7, #8
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	4798      	blx	r3
 8008dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dc6:	e043      	b.n	8008e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fa7d 	bl	80092ca <USBD_CtlError>
            err++;
 8008dd0:	7afb      	ldrb	r3, [r7, #11]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008dd6:	e03b      	b.n	8008e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	7c12      	ldrb	r2, [r2, #16]
 8008df0:	f107 0108 	add.w	r1, r7, #8
 8008df4:	4610      	mov	r0, r2
 8008df6:	4798      	blx	r3
 8008df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dfa:	e029      	b.n	8008e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fa63 	bl	80092ca <USBD_CtlError>
            err++;
 8008e04:	7afb      	ldrb	r3, [r7, #11]
 8008e06:	3301      	adds	r3, #1
 8008e08:	72fb      	strb	r3, [r7, #11]
          break;
 8008e0a:	e021      	b.n	8008e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	7c12      	ldrb	r2, [r2, #16]
 8008e24:	f107 0108 	add.w	r1, r7, #8
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4798      	blx	r3
 8008e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e2e:	e00f      	b.n	8008e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa49 	bl	80092ca <USBD_CtlError>
            err++;
 8008e38:	7afb      	ldrb	r3, [r7, #11]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e3e:	e007      	b.n	8008e50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa41 	bl	80092ca <USBD_CtlError>
          err++;
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e4e:	bf00      	nop
      }
      break;
 8008e50:	e037      	b.n	8008ec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	7c1b      	ldrb	r3, [r3, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e62:	f107 0208 	add.w	r2, r7, #8
 8008e66:	4610      	mov	r0, r2
 8008e68:	4798      	blx	r3
 8008e6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e6c:	e029      	b.n	8008ec2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa2a 	bl	80092ca <USBD_CtlError>
        err++;
 8008e76:	7afb      	ldrb	r3, [r7, #11]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e7c:	e021      	b.n	8008ec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7c1b      	ldrb	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10d      	bne.n	8008ea2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	f107 0208 	add.w	r2, r7, #8
 8008e92:	4610      	mov	r0, r2
 8008e94:	4798      	blx	r3
 8008e96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	2207      	movs	r2, #7
 8008e9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ea0:	e00f      	b.n	8008ec2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fa10 	bl	80092ca <USBD_CtlError>
        err++;
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	3301      	adds	r3, #1
 8008eae:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb0:	e007      	b.n	8008ec2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fa08 	bl	80092ca <USBD_CtlError>
      err++;
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8008ec0:	bf00      	nop
  }

  if (err != 0U)
 8008ec2:	7afb      	ldrb	r3, [r7, #11]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d11e      	bne.n	8008f06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	88db      	ldrh	r3, [r3, #6]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d016      	beq.n	8008efe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ed0:	893b      	ldrh	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00e      	beq.n	8008ef4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	88da      	ldrh	r2, [r3, #6]
 8008eda:	893b      	ldrh	r3, [r7, #8]
 8008edc:	4293      	cmp	r3, r2
 8008ede:	bf28      	it	cs
 8008ee0:	4613      	movcs	r3, r2
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ee6:	893b      	ldrh	r3, [r7, #8]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	68f9      	ldr	r1, [r7, #12]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fa5d 	bl	80093ac <USBD_CtlSendData>
 8008ef2:	e009      	b.n	8008f08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f9e7 	bl	80092ca <USBD_CtlError>
 8008efc:	e004      	b.n	8008f08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 faae 	bl	8009460 <USBD_CtlSendStatus>
 8008f04:	e000      	b.n	8008f08 <USBD_GetDescriptor+0x2cc>
    return;
 8008f06:	bf00      	nop
  }
}
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop

08008f10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	889b      	ldrh	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d131      	bne.n	8008f86 <USBD_SetAddress+0x76>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	88db      	ldrh	r3, [r3, #6]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d12d      	bne.n	8008f86 <USBD_SetAddress+0x76>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f30:	d829      	bhi.n	8008f86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	885b      	ldrh	r3, [r3, #2]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d104      	bne.n	8008f54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f9bc 	bl	80092ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f52:	e01d      	b.n	8008f90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	7bfa      	ldrb	r2, [r7, #15]
 8008f58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fefb 	bl	8009d5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa7a 	bl	8009460 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d004      	beq.n	8008f7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2202      	movs	r2, #2
 8008f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7a:	e009      	b.n	8008f90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f84:	e004      	b.n	8008f90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f99e 	bl	80092ca <USBD_CtlError>
  }
}
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	885b      	ldrh	r3, [r3, #2]
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	4b4e      	ldr	r3, [pc, #312]	; (80090e8 <USBD_SetConfig+0x150>)
 8008fae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fb0:	4b4d      	ldr	r3, [pc, #308]	; (80090e8 <USBD_SetConfig+0x150>)
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d905      	bls.n	8008fc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f985 	bl	80092ca <USBD_CtlError>
    return USBD_FAIL;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e08c      	b.n	80090de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d002      	beq.n	8008fd6 <USBD_SetConfig+0x3e>
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d029      	beq.n	8009028 <USBD_SetConfig+0x90>
 8008fd4:	e075      	b.n	80090c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008fd6:	4b44      	ldr	r3, [pc, #272]	; (80090e8 <USBD_SetConfig+0x150>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d020      	beq.n	8009020 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008fde:	4b42      	ldr	r3, [pc, #264]	; (80090e8 <USBD_SetConfig+0x150>)
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fe8:	4b3f      	ldr	r3, [pc, #252]	; (80090e8 <USBD_SetConfig+0x150>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fe ffe7 	bl	8007fc2 <USBD_SetClassConfig>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d008      	beq.n	8009010 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f962 	bl	80092ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2202      	movs	r2, #2
 800900a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800900e:	e065      	b.n	80090dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa25 	bl	8009460 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2203      	movs	r2, #3
 800901a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800901e:	e05d      	b.n	80090dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fa1d 	bl	8009460 <USBD_CtlSendStatus>
      break;
 8009026:	e059      	b.n	80090dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009028:	4b2f      	ldr	r3, [pc, #188]	; (80090e8 <USBD_SetConfig+0x150>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d112      	bne.n	8009056 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009038:	4b2b      	ldr	r3, [pc, #172]	; (80090e8 <USBD_SetConfig+0x150>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009042:	4b29      	ldr	r3, [pc, #164]	; (80090e8 <USBD_SetConfig+0x150>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7fe ffd6 	bl	8007ffa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa06 	bl	8009460 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009054:	e042      	b.n	80090dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009056:	4b24      	ldr	r3, [pc, #144]	; (80090e8 <USBD_SetConfig+0x150>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d02a      	beq.n	80090ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7fe ffc4 	bl	8007ffa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009072:	4b1d      	ldr	r3, [pc, #116]	; (80090e8 <USBD_SetConfig+0x150>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800907c:	4b1a      	ldr	r3, [pc, #104]	; (80090e8 <USBD_SetConfig+0x150>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7fe ff9d 	bl	8007fc2 <USBD_SetClassConfig>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00f      	beq.n	80090b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f918 	bl	80092ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7fe ffa9 	bl	8007ffa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2202      	movs	r2, #2
 80090ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090b0:	e014      	b.n	80090dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9d4 	bl	8009460 <USBD_CtlSendStatus>
      break;
 80090b8:	e010      	b.n	80090dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f9d0 	bl	8009460 <USBD_CtlSendStatus>
      break;
 80090c0:	e00c      	b.n	80090dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f900 	bl	80092ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090ca:	4b07      	ldr	r3, [pc, #28]	; (80090e8 <USBD_SetConfig+0x150>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7fe ff92 	bl	8007ffa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090d6:	2303      	movs	r3, #3
 80090d8:	73fb      	strb	r3, [r7, #15]
      break;
 80090da:	bf00      	nop
  }

  return ret;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	200007a4 	.word	0x200007a4

080090ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	88db      	ldrh	r3, [r3, #6]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d004      	beq.n	8009108 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f8e2 	bl	80092ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009106:	e023      	b.n	8009150 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	dc02      	bgt.n	800911a <USBD_GetConfig+0x2e>
 8009114:	2b00      	cmp	r3, #0
 8009116:	dc03      	bgt.n	8009120 <USBD_GetConfig+0x34>
 8009118:	e015      	b.n	8009146 <USBD_GetConfig+0x5a>
 800911a:	2b03      	cmp	r3, #3
 800911c:	d00b      	beq.n	8009136 <USBD_GetConfig+0x4a>
 800911e:	e012      	b.n	8009146 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	3308      	adds	r3, #8
 800912a:	2201      	movs	r2, #1
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f93c 	bl	80093ac <USBD_CtlSendData>
        break;
 8009134:	e00c      	b.n	8009150 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3304      	adds	r3, #4
 800913a:	2201      	movs	r2, #1
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f934 	bl	80093ac <USBD_CtlSendData>
        break;
 8009144:	e004      	b.n	8009150 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f8be 	bl	80092ca <USBD_CtlError>
        break;
 800914e:	bf00      	nop
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009168:	b2db      	uxtb	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	2b02      	cmp	r3, #2
 800916e:	d81e      	bhi.n	80091ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	88db      	ldrh	r3, [r3, #6]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d004      	beq.n	8009182 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f8a5 	bl	80092ca <USBD_CtlError>
        break;
 8009180:	e01a      	b.n	80091b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	f043 0202 	orr.w	r2, r3, #2
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	330c      	adds	r3, #12
 80091a2:	2202      	movs	r2, #2
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f900 	bl	80093ac <USBD_CtlSendData>
      break;
 80091ac:	e004      	b.n	80091b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f88a 	bl	80092ca <USBD_CtlError>
      break;
 80091b6:	bf00      	nop
  }
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	885b      	ldrh	r3, [r3, #2]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d107      	bne.n	80091e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f940 	bl	8009460 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091e0:	e013      	b.n	800920a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	885b      	ldrh	r3, [r3, #2]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d10b      	bne.n	8009202 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	889b      	ldrh	r3, [r3, #4]
 80091ee:	0a1b      	lsrs	r3, r3, #8
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f930 	bl	8009460 <USBD_CtlSendStatus>
}
 8009200:	e003      	b.n	800920a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f860 	bl	80092ca <USBD_CtlError>
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009222:	b2db      	uxtb	r3, r3
 8009224:	3b01      	subs	r3, #1
 8009226:	2b02      	cmp	r3, #2
 8009228:	d80b      	bhi.n	8009242 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	885b      	ldrh	r3, [r3, #2]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d10c      	bne.n	800924c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f910 	bl	8009460 <USBD_CtlSendStatus>
      }
      break;
 8009240:	e004      	b.n	800924c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f840 	bl	80092ca <USBD_CtlError>
      break;
 800924a:	e000      	b.n	800924e <USBD_ClrFeature+0x3c>
      break;
 800924c:	bf00      	nop
  }
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	781a      	ldrb	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3301      	adds	r3, #1
 8009270:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3301      	adds	r3, #1
 800927e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f7ff fa41 	bl	8008708 <SWAPBYTE>
 8009286:	4603      	mov	r3, r0
 8009288:	461a      	mov	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3301      	adds	r3, #1
 8009292:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	3301      	adds	r3, #1
 8009298:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f7ff fa34 	bl	8008708 <SWAPBYTE>
 80092a0:	4603      	mov	r3, r0
 80092a2:	461a      	mov	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff fa27 	bl	8008708 <SWAPBYTE>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	80da      	strh	r2, [r3, #6]
}
 80092c2:	bf00      	nop
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092d4:	2180      	movs	r1, #128	; 0x80
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fcd6 	bl	8009c88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092dc:	2100      	movs	r1, #0
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fcd2 	bl	8009c88 <USBD_LL_StallEP>
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d036      	beq.n	8009370 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009306:	6938      	ldr	r0, [r7, #16]
 8009308:	f000 f836 	bl	8009378 <USBD_GetLen>
 800930c:	4603      	mov	r3, r0
 800930e:	3301      	adds	r3, #1
 8009310:	b29b      	uxth	r3, r3
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	4413      	add	r3, r2
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	7812      	ldrb	r2, [r2, #0]
 8009324:	701a      	strb	r2, [r3, #0]
  idx++;
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	3301      	adds	r3, #1
 800932a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	4413      	add	r3, r2
 8009332:	2203      	movs	r2, #3
 8009334:	701a      	strb	r2, [r3, #0]
  idx++;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	3301      	adds	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800933c:	e013      	b.n	8009366 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	4413      	add	r3, r2
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	7812      	ldrb	r2, [r2, #0]
 8009348:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	3301      	adds	r3, #1
 800934e:	613b      	str	r3, [r7, #16]
    idx++;
 8009350:	7dfb      	ldrb	r3, [r7, #23]
 8009352:	3301      	adds	r3, #1
 8009354:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	4413      	add	r3, r2
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	3301      	adds	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e7      	bne.n	800933e <USBD_GetString+0x52>
 800936e:	e000      	b.n	8009372 <USBD_GetString+0x86>
    return;
 8009370:	bf00      	nop
  }
}
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009388:	e005      	b.n	8009396 <USBD_GetLen+0x1e>
  {
    len++;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
 800938c:	3301      	adds	r3, #1
 800938e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	3301      	adds	r3, #1
 8009394:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1f5      	bne.n	800938a <USBD_GetLen+0x12>
  }

  return len;
 800939e:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	2100      	movs	r1, #0
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fce1 	bl	8009d9a <USBD_LL_Transmit>

  return USBD_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	2100      	movs	r1, #0
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 fcd0 	bl	8009d9a <USBD_LL_Transmit>

  return USBD_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2203      	movs	r2, #3
 8009414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	2100      	movs	r1, #0
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fcd4 	bl	8009ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	2100      	movs	r1, #0
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fcc3 	bl	8009ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2204      	movs	r2, #4
 800946c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009470:	2300      	movs	r3, #0
 8009472:	2200      	movs	r2, #0
 8009474:	2100      	movs	r1, #0
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fc8f 	bl	8009d9a <USBD_LL_Transmit>

  return USBD_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2205      	movs	r2, #5
 8009492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009496:	2300      	movs	r3, #0
 8009498:	2200      	movs	r2, #0
 800949a:	2100      	movs	r1, #0
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fc9d 	bl	8009ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094b0:	2200      	movs	r2, #0
 80094b2:	4912      	ldr	r1, [pc, #72]	; (80094fc <MX_USB_DEVICE_Init+0x50>)
 80094b4:	4812      	ldr	r0, [pc, #72]	; (8009500 <MX_USB_DEVICE_Init+0x54>)
 80094b6:	f7fe fd07 	bl	8007ec8 <USBD_Init>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094c0:	f7f7 fd10 	bl	8000ee4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094c4:	490f      	ldr	r1, [pc, #60]	; (8009504 <MX_USB_DEVICE_Init+0x58>)
 80094c6:	480e      	ldr	r0, [pc, #56]	; (8009500 <MX_USB_DEVICE_Init+0x54>)
 80094c8:	f7fe fd2e 	bl	8007f28 <USBD_RegisterClass>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094d2:	f7f7 fd07 	bl	8000ee4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80094d6:	490c      	ldr	r1, [pc, #48]	; (8009508 <MX_USB_DEVICE_Init+0x5c>)
 80094d8:	4809      	ldr	r0, [pc, #36]	; (8009500 <MX_USB_DEVICE_Init+0x54>)
 80094da:	f7fe fc1f 	bl	8007d1c <USBD_CDC_RegisterInterface>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094e4:	f7f7 fcfe 	bl	8000ee4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094e8:	4805      	ldr	r0, [pc, #20]	; (8009500 <MX_USB_DEVICE_Init+0x54>)
 80094ea:	f7fe fd53 	bl	8007f94 <USBD_Start>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094f4:	f7f7 fcf6 	bl	8000ee4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094f8:	bf00      	nop
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200000ac 	.word	0x200000ac
 8009500:	200007a8 	.word	0x200007a8
 8009504:	20000018 	.word	0x20000018
 8009508:	20000098 	.word	0x20000098

0800950c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009510:	2200      	movs	r2, #0
 8009512:	4905      	ldr	r1, [pc, #20]	; (8009528 <CDC_Init_FS+0x1c>)
 8009514:	4805      	ldr	r0, [pc, #20]	; (800952c <CDC_Init_FS+0x20>)
 8009516:	f7fe fc1b 	bl	8007d50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800951a:	4905      	ldr	r1, [pc, #20]	; (8009530 <CDC_Init_FS+0x24>)
 800951c:	4803      	ldr	r0, [pc, #12]	; (800952c <CDC_Init_FS+0x20>)
 800951e:	f7fe fc39 	bl	8007d94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009522:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009524:	4618      	mov	r0, r3
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20001284 	.word	0x20001284
 800952c:	200007a8 	.word	0x200007a8
 8009530:	20000a84 	.word	0x20000a84

08009534 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009534:	b480      	push	{r7}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009538:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800953a:	4618      	mov	r0, r3
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	6039      	str	r1, [r7, #0]
 800954e:	71fb      	strb	r3, [r7, #7]
 8009550:	4613      	mov	r3, r2
 8009552:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	2b23      	cmp	r3, #35	; 0x23
 8009558:	d84a      	bhi.n	80095f0 <CDC_Control_FS+0xac>
 800955a:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <CDC_Control_FS+0x1c>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	080095f1 	.word	0x080095f1
 8009564:	080095f1 	.word	0x080095f1
 8009568:	080095f1 	.word	0x080095f1
 800956c:	080095f1 	.word	0x080095f1
 8009570:	080095f1 	.word	0x080095f1
 8009574:	080095f1 	.word	0x080095f1
 8009578:	080095f1 	.word	0x080095f1
 800957c:	080095f1 	.word	0x080095f1
 8009580:	080095f1 	.word	0x080095f1
 8009584:	080095f1 	.word	0x080095f1
 8009588:	080095f1 	.word	0x080095f1
 800958c:	080095f1 	.word	0x080095f1
 8009590:	080095f1 	.word	0x080095f1
 8009594:	080095f1 	.word	0x080095f1
 8009598:	080095f1 	.word	0x080095f1
 800959c:	080095f1 	.word	0x080095f1
 80095a0:	080095f1 	.word	0x080095f1
 80095a4:	080095f1 	.word	0x080095f1
 80095a8:	080095f1 	.word	0x080095f1
 80095ac:	080095f1 	.word	0x080095f1
 80095b0:	080095f1 	.word	0x080095f1
 80095b4:	080095f1 	.word	0x080095f1
 80095b8:	080095f1 	.word	0x080095f1
 80095bc:	080095f1 	.word	0x080095f1
 80095c0:	080095f1 	.word	0x080095f1
 80095c4:	080095f1 	.word	0x080095f1
 80095c8:	080095f1 	.word	0x080095f1
 80095cc:	080095f1 	.word	0x080095f1
 80095d0:	080095f1 	.word	0x080095f1
 80095d4:	080095f1 	.word	0x080095f1
 80095d8:	080095f1 	.word	0x080095f1
 80095dc:	080095f1 	.word	0x080095f1
 80095e0:	080095f1 	.word	0x080095f1
 80095e4:	080095f1 	.word	0x080095f1
 80095e8:	080095f1 	.word	0x080095f1
 80095ec:	080095f1 	.word	0x080095f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095f0:	bf00      	nop
  }

  return (USBD_OK);
 80095f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4805      	ldr	r0, [pc, #20]	; (8009624 <CDC_Receive_FS+0x24>)
 800960e:	f7fe fbc1 	bl	8007d94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009612:	4804      	ldr	r0, [pc, #16]	; (8009624 <CDC_Receive_FS+0x24>)
 8009614:	f7fe fc22 	bl	8007e5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009618:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200007a8 	.word	0x200007a8

08009628 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009638:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <CDC_Transmit_FS+0x48>)
 800963a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800963e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800964a:	2301      	movs	r3, #1
 800964c:	e00b      	b.n	8009666 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800964e:	887b      	ldrh	r3, [r7, #2]
 8009650:	461a      	mov	r2, r3
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4806      	ldr	r0, [pc, #24]	; (8009670 <CDC_Transmit_FS+0x48>)
 8009656:	f7fe fb7b 	bl	8007d50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800965a:	4805      	ldr	r0, [pc, #20]	; (8009670 <CDC_Transmit_FS+0x48>)
 800965c:	f7fe fbb8 	bl	8007dd0 <USBD_CDC_TransmitPacket>
 8009660:	4603      	mov	r3, r0
 8009662:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	200007a8 	.word	0x200007a8

08009674 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009686:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800968a:	4618      	mov	r0, r3
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
	...

08009698 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2212      	movs	r2, #18
 80096a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096aa:	4b03      	ldr	r3, [pc, #12]	; (80096b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	200000c8 	.word	0x200000c8

080096bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2204      	movs	r2, #4
 80096cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096ce:	4b03      	ldr	r3, [pc, #12]	; (80096dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	200000dc 	.word	0x200000dc

080096e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	6039      	str	r1, [r7, #0]
 80096ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d105      	bne.n	80096fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	4907      	ldr	r1, [pc, #28]	; (8009714 <USBD_FS_ProductStrDescriptor+0x34>)
 80096f6:	4808      	ldr	r0, [pc, #32]	; (8009718 <USBD_FS_ProductStrDescriptor+0x38>)
 80096f8:	f7ff fdf8 	bl	80092ec <USBD_GetString>
 80096fc:	e004      	b.n	8009708 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	4904      	ldr	r1, [pc, #16]	; (8009714 <USBD_FS_ProductStrDescriptor+0x34>)
 8009702:	4805      	ldr	r0, [pc, #20]	; (8009718 <USBD_FS_ProductStrDescriptor+0x38>)
 8009704:	f7ff fdf2 	bl	80092ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009708:	4b02      	ldr	r3, [pc, #8]	; (8009714 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20001a84 	.word	0x20001a84
 8009718:	0800a9f8 	.word	0x0800a9f8

0800971c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	6039      	str	r1, [r7, #0]
 8009726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	4904      	ldr	r1, [pc, #16]	; (800973c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800972c:	4804      	ldr	r0, [pc, #16]	; (8009740 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800972e:	f7ff fddd 	bl	80092ec <USBD_GetString>
  return USBD_StrDesc;
 8009732:	4b02      	ldr	r3, [pc, #8]	; (800973c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20001a84 	.word	0x20001a84
 8009740:	0800aa04 	.word	0x0800aa04

08009744 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	221a      	movs	r2, #26
 8009754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009756:	f000 f843 	bl	80097e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800975a:	4b02      	ldr	r3, [pc, #8]	; (8009764 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	200000e0 	.word	0x200000e0

08009768 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4907      	ldr	r1, [pc, #28]	; (800979c <USBD_FS_ConfigStrDescriptor+0x34>)
 800977e:	4808      	ldr	r0, [pc, #32]	; (80097a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009780:	f7ff fdb4 	bl	80092ec <USBD_GetString>
 8009784:	e004      	b.n	8009790 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	4904      	ldr	r1, [pc, #16]	; (800979c <USBD_FS_ConfigStrDescriptor+0x34>)
 800978a:	4805      	ldr	r0, [pc, #20]	; (80097a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800978c:	f7ff fdae 	bl	80092ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20001a84 	.word	0x20001a84
 80097a0:	0800aa18 	.word	0x0800aa18

080097a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d105      	bne.n	80097c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	4907      	ldr	r1, [pc, #28]	; (80097d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097ba:	4808      	ldr	r0, [pc, #32]	; (80097dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097bc:	f7ff fd96 	bl	80092ec <USBD_GetString>
 80097c0:	e004      	b.n	80097cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	4904      	ldr	r1, [pc, #16]	; (80097d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097c6:	4805      	ldr	r0, [pc, #20]	; (80097dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097c8:	f7ff fd90 	bl	80092ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20001a84 	.word	0x20001a84
 80097dc:	0800aa24 	.word	0x0800aa24

080097e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <Get_SerialNum+0x44>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <Get_SerialNum+0x48>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097f2:	4b0e      	ldr	r3, [pc, #56]	; (800982c <Get_SerialNum+0x4c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4413      	add	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009806:	2208      	movs	r2, #8
 8009808:	4909      	ldr	r1, [pc, #36]	; (8009830 <Get_SerialNum+0x50>)
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 f814 	bl	8009838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009810:	2204      	movs	r2, #4
 8009812:	4908      	ldr	r1, [pc, #32]	; (8009834 <Get_SerialNum+0x54>)
 8009814:	68b8      	ldr	r0, [r7, #8]
 8009816:	f000 f80f 	bl	8009838 <IntToUnicode>
  }
}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	1fff7a10 	.word	0x1fff7a10
 8009828:	1fff7a14 	.word	0x1fff7a14
 800982c:	1fff7a18 	.word	0x1fff7a18
 8009830:	200000e2 	.word	0x200000e2
 8009834:	200000f2 	.word	0x200000f2

08009838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800984a:	2300      	movs	r3, #0
 800984c:	75fb      	strb	r3, [r7, #23]
 800984e:	e027      	b.n	80098a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	0f1b      	lsrs	r3, r3, #28
 8009854:	2b09      	cmp	r3, #9
 8009856:	d80b      	bhi.n	8009870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	0f1b      	lsrs	r3, r3, #28
 800985c:	b2da      	uxtb	r2, r3
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	4619      	mov	r1, r3
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	440b      	add	r3, r1
 8009868:	3230      	adds	r2, #48	; 0x30
 800986a:	b2d2      	uxtb	r2, r2
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	e00a      	b.n	8009886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	0f1b      	lsrs	r3, r3, #28
 8009874:	b2da      	uxtb	r2, r3
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	4619      	mov	r1, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	440b      	add	r3, r1
 8009880:	3237      	adds	r2, #55	; 0x37
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	011b      	lsls	r3, r3, #4
 800988a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	3301      	adds	r3, #1
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	4413      	add	r3, r2
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	3301      	adds	r3, #1
 800989e:	75fb      	strb	r3, [r7, #23]
 80098a0:	7dfa      	ldrb	r2, [r7, #23]
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d3d3      	bcc.n	8009850 <IntToUnicode+0x18>
  }
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
	...

080098b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	609a      	str	r2, [r3, #8]
 80098cc:	60da      	str	r2, [r3, #12]
 80098ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098d8:	d13a      	bne.n	8009950 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098da:	2300      	movs	r3, #0
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	4b1e      	ldr	r3, [pc, #120]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	4a1d      	ldr	r2, [pc, #116]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 80098e4:	f043 0301 	orr.w	r3, r3, #1
 80098e8:	6313      	str	r3, [r2, #48]	; 0x30
 80098ea:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	613b      	str	r3, [r7, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80098f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80098fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098fc:	2302      	movs	r3, #2
 80098fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009900:	2300      	movs	r3, #0
 8009902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009904:	2303      	movs	r3, #3
 8009906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009908:	230a      	movs	r3, #10
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	4619      	mov	r1, r3
 8009912:	4812      	ldr	r0, [pc, #72]	; (800995c <HAL_PCD_MspInit+0xa4>)
 8009914:	f7f8 faae 	bl	8001e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009918:	4b0f      	ldr	r3, [pc, #60]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 800991a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991c:	4a0e      	ldr	r2, [pc, #56]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 800991e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009922:	6353      	str	r3, [r2, #52]	; 0x34
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	4b0b      	ldr	r3, [pc, #44]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 800992a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992c:	4a0a      	ldr	r2, [pc, #40]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 800992e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009932:	6453      	str	r3, [r2, #68]	; 0x44
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 8009936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009940:	2200      	movs	r2, #0
 8009942:	2100      	movs	r1, #0
 8009944:	2043      	movs	r0, #67	; 0x43
 8009946:	f7f7 fe5c 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800994a:	2043      	movs	r0, #67	; 0x43
 800994c:	f7f7 fe75 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009950:	bf00      	nop
 8009952:	3728      	adds	r7, #40	; 0x28
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40023800 	.word	0x40023800
 800995c:	40020000 	.word	0x40020000

08009960 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fe fb59 	bl	800802e <USBD_LL_SetupStage>
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	78fb      	ldrb	r3, [r7, #3]
 80099ac:	4619      	mov	r1, r3
 80099ae:	f7fe fb93 	bl	80080d8 <USBD_LL_DataOutStage>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80099cc:	78fa      	ldrb	r2, [r7, #3]
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	334c      	adds	r3, #76	; 0x4c
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	78fb      	ldrb	r3, [r7, #3]
 80099e0:	4619      	mov	r1, r3
 80099e2:	f7fe fc2c 	bl	800823e <USBD_LL_DataInStage>
}
 80099e6:	bf00      	nop
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fd60 	bl	80084c2 <USBD_LL_SOF>
}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a12:	2301      	movs	r3, #1
 8009a14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d001      	beq.n	8009a22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a1e:	f7f7 fa61 	bl	8000ee4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a28:	7bfa      	ldrb	r2, [r7, #15]
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fd0a 	bl	8008446 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fcb2 	bl	80083a2 <USBD_LL_Reset>
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe fd05 	bl	8008466 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	6812      	ldr	r2, [r2, #0]
 8009a6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d005      	beq.n	8009a88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a7c:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <HAL_PCD_SuspendCallback+0x48>)
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	4a03      	ldr	r2, [pc, #12]	; (8009a90 <HAL_PCD_SuspendCallback+0x48>)
 8009a82:	f043 0306 	orr.w	r3, r3, #6
 8009a86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	e000ed00 	.word	0xe000ed00

08009a94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fcf5 	bl	8008492 <USBD_LL_Resume>
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ac2:	78fa      	ldrb	r2, [r7, #3]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe fd4d 	bl	8008566 <USBD_LL_IsoOUTIncomplete>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ae6:	78fa      	ldrb	r2, [r7, #3]
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fd09 	bl	8008502 <USBD_LL_IsoINIncomplete>
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fd5f 	bl	80085ca <USBD_LL_DevConnected>
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fd5c 	bl	80085e0 <USBD_LL_DevDisconnected>
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d13c      	bne.n	8009bba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b40:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a1e      	ldr	r2, [pc, #120]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b4c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b50:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b58:	4b1a      	ldr	r3, [pc, #104]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b5a:	2204      	movs	r2, #4
 8009b5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b5e:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b60:	2202      	movs	r2, #2
 8009b62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b64:	4b17      	ldr	r3, [pc, #92]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b6a:	4b16      	ldr	r3, [pc, #88]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b70:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b76:	4b13      	ldr	r3, [pc, #76]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b7c:	4b11      	ldr	r3, [pc, #68]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b82:	4b10      	ldr	r3, [pc, #64]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b88:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b8e:	480d      	ldr	r0, [pc, #52]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b90:	f7f8 fb27 	bl	80021e2 <HAL_PCD_Init>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b9a:	f7f7 f9a3 	bl	8000ee4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b9e:	2180      	movs	r1, #128	; 0x80
 8009ba0:	4808      	ldr	r0, [pc, #32]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009ba2:	f7f9 fd7e 	bl	80036a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ba6:	2240      	movs	r2, #64	; 0x40
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4806      	ldr	r0, [pc, #24]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009bac:	f7f9 fd32 	bl	8003614 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009bb0:	2280      	movs	r2, #128	; 0x80
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	4803      	ldr	r0, [pc, #12]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009bb6:	f7f9 fd2d 	bl	8003614 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20001c84 	.word	0x20001c84

08009bc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f8 fc1c 	bl	800241c <HAL_PCD_Start>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 f942 	bl	8009e74 <USBD_Get_USB_Status>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	70fb      	strb	r3, [r7, #3]
 8009c10:	460b      	mov	r3, r1
 8009c12:	70bb      	strb	r3, [r7, #2]
 8009c14:	4613      	mov	r3, r2
 8009c16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c26:	78bb      	ldrb	r3, [r7, #2]
 8009c28:	883a      	ldrh	r2, [r7, #0]
 8009c2a:	78f9      	ldrb	r1, [r7, #3]
 8009c2c:	f7f9 f8ed 	bl	8002e0a <HAL_PCD_EP_Open>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f91c 	bl	8009e74 <USBD_Get_USB_Status>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	460b      	mov	r3, r1
 8009c54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c64:	78fa      	ldrb	r2, [r7, #3]
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f9 f936 	bl	8002eda <HAL_PCD_EP_Close>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 f8fd 	bl	8009e74 <USBD_Get_USB_Status>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ca2:	78fa      	ldrb	r2, [r7, #3]
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7f9 fa0e 	bl	80030c8 <HAL_PCD_EP_SetStall>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 f8de 	bl	8009e74 <USBD_Get_USB_Status>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7f9 fa53 	bl	8003190 <HAL_PCD_EP_ClrStall>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f8bf 	bl	8009e74 <USBD_Get_USB_Status>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	da0b      	bge.n	8009d38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d26:	68f9      	ldr	r1, [r7, #12]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	440b      	add	r3, r1
 8009d32:	333e      	adds	r3, #62	; 0x3e
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	e00b      	b.n	8009d50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d38:	78fb      	ldrb	r3, [r7, #3]
 8009d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d3e:	68f9      	ldr	r1, [r7, #12]
 8009d40:	4613      	mov	r3, r2
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009d4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d76:	78fa      	ldrb	r2, [r7, #3]
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7f9 f820 	bl	8002dc0 <HAL_PCD_SetAddress>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f874 	bl	8009e74 <USBD_Get_USB_Status>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b086      	sub	sp, #24
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
 8009da6:	460b      	mov	r3, r1
 8009da8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009db8:	7af9      	ldrb	r1, [r7, #11]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	f7f9 f939 	bl	8003034 <HAL_PCD_EP_Transmit>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f853 	bl	8009e74 <USBD_Get_USB_Status>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	460b      	mov	r3, r1
 8009dea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009dfa:	7af9      	ldrb	r1, [r7, #11]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	f7f9 f8b5 	bl	8002f6e <HAL_PCD_EP_Receive>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 f832 	bl	8009e74 <USBD_Get_USB_Status>
 8009e10:	4603      	mov	r3, r0
 8009e12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e14:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e30:	78fa      	ldrb	r2, [r7, #3]
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7f9 f8e5 	bl	8003004 <HAL_PCD_EP_GetRxCount>
 8009e3a:	4603      	mov	r3, r0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e4c:	4b03      	ldr	r3, [pc, #12]	; (8009e5c <USBD_static_malloc+0x18>)
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	20002190 	.word	0x20002190

08009e60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]

}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d817      	bhi.n	8009eb8 <USBD_Get_USB_Status+0x44>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <USBD_Get_USB_Status+0x1c>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ea7 	.word	0x08009ea7
 8009e98:	08009ead 	.word	0x08009ead
 8009e9c:	08009eb3 	.word	0x08009eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	e00b      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eaa:	e008      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eac:	2301      	movs	r3, #1
 8009eae:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb0:	e005      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb6:	e002      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebc:	bf00      	nop
  }
  return usb_status;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <__errno>:
 8009ecc:	4b01      	ldr	r3, [pc, #4]	; (8009ed4 <__errno+0x8>)
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	200000fc 	.word	0x200000fc

08009ed8 <__libc_init_array>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	4d0d      	ldr	r5, [pc, #52]	; (8009f10 <__libc_init_array+0x38>)
 8009edc:	4c0d      	ldr	r4, [pc, #52]	; (8009f14 <__libc_init_array+0x3c>)
 8009ede:	1b64      	subs	r4, r4, r5
 8009ee0:	10a4      	asrs	r4, r4, #2
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	42a6      	cmp	r6, r4
 8009ee6:	d109      	bne.n	8009efc <__libc_init_array+0x24>
 8009ee8:	4d0b      	ldr	r5, [pc, #44]	; (8009f18 <__libc_init_array+0x40>)
 8009eea:	4c0c      	ldr	r4, [pc, #48]	; (8009f1c <__libc_init_array+0x44>)
 8009eec:	f000 fc8e 	bl	800a80c <_init>
 8009ef0:	1b64      	subs	r4, r4, r5
 8009ef2:	10a4      	asrs	r4, r4, #2
 8009ef4:	2600      	movs	r6, #0
 8009ef6:	42a6      	cmp	r6, r4
 8009ef8:	d105      	bne.n	8009f06 <__libc_init_array+0x2e>
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f00:	4798      	blx	r3
 8009f02:	3601      	adds	r6, #1
 8009f04:	e7ee      	b.n	8009ee4 <__libc_init_array+0xc>
 8009f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0a:	4798      	blx	r3
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	e7f2      	b.n	8009ef6 <__libc_init_array+0x1e>
 8009f10:	0800aa90 	.word	0x0800aa90
 8009f14:	0800aa90 	.word	0x0800aa90
 8009f18:	0800aa90 	.word	0x0800aa90
 8009f1c:	0800aa94 	.word	0x0800aa94

08009f20 <memcpy>:
 8009f20:	440a      	add	r2, r1
 8009f22:	4291      	cmp	r1, r2
 8009f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f28:	d100      	bne.n	8009f2c <memcpy+0xc>
 8009f2a:	4770      	bx	lr
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f36:	4291      	cmp	r1, r2
 8009f38:	d1f9      	bne.n	8009f2e <memcpy+0xe>
 8009f3a:	bd10      	pop	{r4, pc}

08009f3c <memset>:
 8009f3c:	4402      	add	r2, r0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d100      	bne.n	8009f46 <memset+0xa>
 8009f44:	4770      	bx	lr
 8009f46:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4a:	e7f9      	b.n	8009f40 <memset+0x4>

08009f4c <siprintf>:
 8009f4c:	b40e      	push	{r1, r2, r3}
 8009f4e:	b500      	push	{lr}
 8009f50:	b09c      	sub	sp, #112	; 0x70
 8009f52:	ab1d      	add	r3, sp, #116	; 0x74
 8009f54:	9002      	str	r0, [sp, #8]
 8009f56:	9006      	str	r0, [sp, #24]
 8009f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f5c:	4809      	ldr	r0, [pc, #36]	; (8009f84 <siprintf+0x38>)
 8009f5e:	9107      	str	r1, [sp, #28]
 8009f60:	9104      	str	r1, [sp, #16]
 8009f62:	4909      	ldr	r1, [pc, #36]	; (8009f88 <siprintf+0x3c>)
 8009f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f68:	9105      	str	r1, [sp, #20]
 8009f6a:	6800      	ldr	r0, [r0, #0]
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	a902      	add	r1, sp, #8
 8009f70:	f000 f868 	bl	800a044 <_svfiprintf_r>
 8009f74:	9b02      	ldr	r3, [sp, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	b01c      	add	sp, #112	; 0x70
 8009f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f80:	b003      	add	sp, #12
 8009f82:	4770      	bx	lr
 8009f84:	200000fc 	.word	0x200000fc
 8009f88:	ffff0208 	.word	0xffff0208

08009f8c <__ssputs_r>:
 8009f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f90:	688e      	ldr	r6, [r1, #8]
 8009f92:	429e      	cmp	r6, r3
 8009f94:	4682      	mov	sl, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	4690      	mov	r8, r2
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	d838      	bhi.n	800a010 <__ssputs_r+0x84>
 8009f9e:	898a      	ldrh	r2, [r1, #12]
 8009fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fa4:	d032      	beq.n	800a00c <__ssputs_r+0x80>
 8009fa6:	6825      	ldr	r5, [r4, #0]
 8009fa8:	6909      	ldr	r1, [r1, #16]
 8009faa:	eba5 0901 	sub.w	r9, r5, r1
 8009fae:	6965      	ldr	r5, [r4, #20]
 8009fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fb8:	3301      	adds	r3, #1
 8009fba:	444b      	add	r3, r9
 8009fbc:	106d      	asrs	r5, r5, #1
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	bf38      	it	cc
 8009fc2:	461d      	movcc	r5, r3
 8009fc4:	0553      	lsls	r3, r2, #21
 8009fc6:	d531      	bpl.n	800a02c <__ssputs_r+0xa0>
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f000 fb55 	bl	800a678 <_malloc_r>
 8009fce:	4606      	mov	r6, r0
 8009fd0:	b950      	cbnz	r0, 8009fe8 <__ssputs_r+0x5c>
 8009fd2:	230c      	movs	r3, #12
 8009fd4:	f8ca 3000 	str.w	r3, [sl]
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe8:	6921      	ldr	r1, [r4, #16]
 8009fea:	464a      	mov	r2, r9
 8009fec:	f7ff ff98 	bl	8009f20 <memcpy>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	6126      	str	r6, [r4, #16]
 8009ffe:	6165      	str	r5, [r4, #20]
 800a000:	444e      	add	r6, r9
 800a002:	eba5 0509 	sub.w	r5, r5, r9
 800a006:	6026      	str	r6, [r4, #0]
 800a008:	60a5      	str	r5, [r4, #8]
 800a00a:	463e      	mov	r6, r7
 800a00c:	42be      	cmp	r6, r7
 800a00e:	d900      	bls.n	800a012 <__ssputs_r+0x86>
 800a010:	463e      	mov	r6, r7
 800a012:	6820      	ldr	r0, [r4, #0]
 800a014:	4632      	mov	r2, r6
 800a016:	4641      	mov	r1, r8
 800a018:	f000 faa8 	bl	800a56c <memmove>
 800a01c:	68a3      	ldr	r3, [r4, #8]
 800a01e:	1b9b      	subs	r3, r3, r6
 800a020:	60a3      	str	r3, [r4, #8]
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4433      	add	r3, r6
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	2000      	movs	r0, #0
 800a02a:	e7db      	b.n	8009fe4 <__ssputs_r+0x58>
 800a02c:	462a      	mov	r2, r5
 800a02e:	f000 fb97 	bl	800a760 <_realloc_r>
 800a032:	4606      	mov	r6, r0
 800a034:	2800      	cmp	r0, #0
 800a036:	d1e1      	bne.n	8009ffc <__ssputs_r+0x70>
 800a038:	6921      	ldr	r1, [r4, #16]
 800a03a:	4650      	mov	r0, sl
 800a03c:	f000 fab0 	bl	800a5a0 <_free_r>
 800a040:	e7c7      	b.n	8009fd2 <__ssputs_r+0x46>
	...

0800a044 <_svfiprintf_r>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	4698      	mov	r8, r3
 800a04a:	898b      	ldrh	r3, [r1, #12]
 800a04c:	061b      	lsls	r3, r3, #24
 800a04e:	b09d      	sub	sp, #116	; 0x74
 800a050:	4607      	mov	r7, r0
 800a052:	460d      	mov	r5, r1
 800a054:	4614      	mov	r4, r2
 800a056:	d50e      	bpl.n	800a076 <_svfiprintf_r+0x32>
 800a058:	690b      	ldr	r3, [r1, #16]
 800a05a:	b963      	cbnz	r3, 800a076 <_svfiprintf_r+0x32>
 800a05c:	2140      	movs	r1, #64	; 0x40
 800a05e:	f000 fb0b 	bl	800a678 <_malloc_r>
 800a062:	6028      	str	r0, [r5, #0]
 800a064:	6128      	str	r0, [r5, #16]
 800a066:	b920      	cbnz	r0, 800a072 <_svfiprintf_r+0x2e>
 800a068:	230c      	movs	r3, #12
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	f04f 30ff 	mov.w	r0, #4294967295
 800a070:	e0d1      	b.n	800a216 <_svfiprintf_r+0x1d2>
 800a072:	2340      	movs	r3, #64	; 0x40
 800a074:	616b      	str	r3, [r5, #20]
 800a076:	2300      	movs	r3, #0
 800a078:	9309      	str	r3, [sp, #36]	; 0x24
 800a07a:	2320      	movs	r3, #32
 800a07c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a080:	f8cd 800c 	str.w	r8, [sp, #12]
 800a084:	2330      	movs	r3, #48	; 0x30
 800a086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a230 <_svfiprintf_r+0x1ec>
 800a08a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a08e:	f04f 0901 	mov.w	r9, #1
 800a092:	4623      	mov	r3, r4
 800a094:	469a      	mov	sl, r3
 800a096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a09a:	b10a      	cbz	r2, 800a0a0 <_svfiprintf_r+0x5c>
 800a09c:	2a25      	cmp	r2, #37	; 0x25
 800a09e:	d1f9      	bne.n	800a094 <_svfiprintf_r+0x50>
 800a0a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0a4:	d00b      	beq.n	800a0be <_svfiprintf_r+0x7a>
 800a0a6:	465b      	mov	r3, fp
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f7ff ff6d 	bl	8009f8c <__ssputs_r>
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f000 80aa 	beq.w	800a20c <_svfiprintf_r+0x1c8>
 800a0b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ba:	445a      	add	r2, fp
 800a0bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0be:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 80a2 	beq.w	800a20c <_svfiprintf_r+0x1c8>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d2:	f10a 0a01 	add.w	sl, sl, #1
 800a0d6:	9304      	str	r3, [sp, #16]
 800a0d8:	9307      	str	r3, [sp, #28]
 800a0da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0de:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e0:	4654      	mov	r4, sl
 800a0e2:	2205      	movs	r2, #5
 800a0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e8:	4851      	ldr	r0, [pc, #324]	; (800a230 <_svfiprintf_r+0x1ec>)
 800a0ea:	f7f6 f881 	bl	80001f0 <memchr>
 800a0ee:	9a04      	ldr	r2, [sp, #16]
 800a0f0:	b9d8      	cbnz	r0, 800a12a <_svfiprintf_r+0xe6>
 800a0f2:	06d0      	lsls	r0, r2, #27
 800a0f4:	bf44      	itt	mi
 800a0f6:	2320      	movmi	r3, #32
 800a0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0fc:	0711      	lsls	r1, r2, #28
 800a0fe:	bf44      	itt	mi
 800a100:	232b      	movmi	r3, #43	; 0x2b
 800a102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a106:	f89a 3000 	ldrb.w	r3, [sl]
 800a10a:	2b2a      	cmp	r3, #42	; 0x2a
 800a10c:	d015      	beq.n	800a13a <_svfiprintf_r+0xf6>
 800a10e:	9a07      	ldr	r2, [sp, #28]
 800a110:	4654      	mov	r4, sl
 800a112:	2000      	movs	r0, #0
 800a114:	f04f 0c0a 	mov.w	ip, #10
 800a118:	4621      	mov	r1, r4
 800a11a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a11e:	3b30      	subs	r3, #48	; 0x30
 800a120:	2b09      	cmp	r3, #9
 800a122:	d94e      	bls.n	800a1c2 <_svfiprintf_r+0x17e>
 800a124:	b1b0      	cbz	r0, 800a154 <_svfiprintf_r+0x110>
 800a126:	9207      	str	r2, [sp, #28]
 800a128:	e014      	b.n	800a154 <_svfiprintf_r+0x110>
 800a12a:	eba0 0308 	sub.w	r3, r0, r8
 800a12e:	fa09 f303 	lsl.w	r3, r9, r3
 800a132:	4313      	orrs	r3, r2
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	46a2      	mov	sl, r4
 800a138:	e7d2      	b.n	800a0e0 <_svfiprintf_r+0x9c>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	1d19      	adds	r1, r3, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	9103      	str	r1, [sp, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfbb      	ittet	lt
 800a146:	425b      	neglt	r3, r3
 800a148:	f042 0202 	orrlt.w	r2, r2, #2
 800a14c:	9307      	strge	r3, [sp, #28]
 800a14e:	9307      	strlt	r3, [sp, #28]
 800a150:	bfb8      	it	lt
 800a152:	9204      	strlt	r2, [sp, #16]
 800a154:	7823      	ldrb	r3, [r4, #0]
 800a156:	2b2e      	cmp	r3, #46	; 0x2e
 800a158:	d10c      	bne.n	800a174 <_svfiprintf_r+0x130>
 800a15a:	7863      	ldrb	r3, [r4, #1]
 800a15c:	2b2a      	cmp	r3, #42	; 0x2a
 800a15e:	d135      	bne.n	800a1cc <_svfiprintf_r+0x188>
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	1d1a      	adds	r2, r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	9203      	str	r2, [sp, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bfb8      	it	lt
 800a16c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a170:	3402      	adds	r4, #2
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a240 <_svfiprintf_r+0x1fc>
 800a178:	7821      	ldrb	r1, [r4, #0]
 800a17a:	2203      	movs	r2, #3
 800a17c:	4650      	mov	r0, sl
 800a17e:	f7f6 f837 	bl	80001f0 <memchr>
 800a182:	b140      	cbz	r0, 800a196 <_svfiprintf_r+0x152>
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	eba0 000a 	sub.w	r0, r0, sl
 800a18a:	fa03 f000 	lsl.w	r0, r3, r0
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	4303      	orrs	r3, r0
 800a192:	3401      	adds	r4, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19a:	4826      	ldr	r0, [pc, #152]	; (800a234 <_svfiprintf_r+0x1f0>)
 800a19c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1a0:	2206      	movs	r2, #6
 800a1a2:	f7f6 f825 	bl	80001f0 <memchr>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d038      	beq.n	800a21c <_svfiprintf_r+0x1d8>
 800a1aa:	4b23      	ldr	r3, [pc, #140]	; (800a238 <_svfiprintf_r+0x1f4>)
 800a1ac:	bb1b      	cbnz	r3, 800a1f6 <_svfiprintf_r+0x1b2>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	3307      	adds	r3, #7
 800a1b2:	f023 0307 	bic.w	r3, r3, #7
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	4433      	add	r3, r6
 800a1be:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c0:	e767      	b.n	800a092 <_svfiprintf_r+0x4e>
 800a1c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	e7a5      	b.n	800a118 <_svfiprintf_r+0xd4>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	3401      	adds	r4, #1
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	f04f 0c0a 	mov.w	ip, #10
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1de:	3a30      	subs	r2, #48	; 0x30
 800a1e0:	2a09      	cmp	r2, #9
 800a1e2:	d903      	bls.n	800a1ec <_svfiprintf_r+0x1a8>
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0c5      	beq.n	800a174 <_svfiprintf_r+0x130>
 800a1e8:	9105      	str	r1, [sp, #20]
 800a1ea:	e7c3      	b.n	800a174 <_svfiprintf_r+0x130>
 800a1ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e7f0      	b.n	800a1d8 <_svfiprintf_r+0x194>
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <_svfiprintf_r+0x1f8>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	4638      	mov	r0, r7
 800a202:	f3af 8000 	nop.w
 800a206:	1c42      	adds	r2, r0, #1
 800a208:	4606      	mov	r6, r0
 800a20a:	d1d6      	bne.n	800a1ba <_svfiprintf_r+0x176>
 800a20c:	89ab      	ldrh	r3, [r5, #12]
 800a20e:	065b      	lsls	r3, r3, #25
 800a210:	f53f af2c 	bmi.w	800a06c <_svfiprintf_r+0x28>
 800a214:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a216:	b01d      	add	sp, #116	; 0x74
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	462a      	mov	r2, r5
 800a222:	4b06      	ldr	r3, [pc, #24]	; (800a23c <_svfiprintf_r+0x1f8>)
 800a224:	a904      	add	r1, sp, #16
 800a226:	4638      	mov	r0, r7
 800a228:	f000 f87a 	bl	800a320 <_printf_i>
 800a22c:	e7eb      	b.n	800a206 <_svfiprintf_r+0x1c2>
 800a22e:	bf00      	nop
 800a230:	0800aa54 	.word	0x0800aa54
 800a234:	0800aa5e 	.word	0x0800aa5e
 800a238:	00000000 	.word	0x00000000
 800a23c:	08009f8d 	.word	0x08009f8d
 800a240:	0800aa5a 	.word	0x0800aa5a

0800a244 <_printf_common>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	4616      	mov	r6, r2
 800a24a:	4699      	mov	r9, r3
 800a24c:	688a      	ldr	r2, [r1, #8]
 800a24e:	690b      	ldr	r3, [r1, #16]
 800a250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a254:	4293      	cmp	r3, r2
 800a256:	bfb8      	it	lt
 800a258:	4613      	movlt	r3, r2
 800a25a:	6033      	str	r3, [r6, #0]
 800a25c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a260:	4607      	mov	r7, r0
 800a262:	460c      	mov	r4, r1
 800a264:	b10a      	cbz	r2, 800a26a <_printf_common+0x26>
 800a266:	3301      	adds	r3, #1
 800a268:	6033      	str	r3, [r6, #0]
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	0699      	lsls	r1, r3, #26
 800a26e:	bf42      	ittt	mi
 800a270:	6833      	ldrmi	r3, [r6, #0]
 800a272:	3302      	addmi	r3, #2
 800a274:	6033      	strmi	r3, [r6, #0]
 800a276:	6825      	ldr	r5, [r4, #0]
 800a278:	f015 0506 	ands.w	r5, r5, #6
 800a27c:	d106      	bne.n	800a28c <_printf_common+0x48>
 800a27e:	f104 0a19 	add.w	sl, r4, #25
 800a282:	68e3      	ldr	r3, [r4, #12]
 800a284:	6832      	ldr	r2, [r6, #0]
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	42ab      	cmp	r3, r5
 800a28a:	dc26      	bgt.n	800a2da <_printf_common+0x96>
 800a28c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a290:	1e13      	subs	r3, r2, #0
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	bf18      	it	ne
 800a296:	2301      	movne	r3, #1
 800a298:	0692      	lsls	r2, r2, #26
 800a29a:	d42b      	bmi.n	800a2f4 <_printf_common+0xb0>
 800a29c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	47c0      	blx	r8
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d01e      	beq.n	800a2e8 <_printf_common+0xa4>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	68e5      	ldr	r5, [r4, #12]
 800a2ae:	6832      	ldr	r2, [r6, #0]
 800a2b0:	f003 0306 	and.w	r3, r3, #6
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	bf08      	it	eq
 800a2b8:	1aad      	subeq	r5, r5, r2
 800a2ba:	68a3      	ldr	r3, [r4, #8]
 800a2bc:	6922      	ldr	r2, [r4, #16]
 800a2be:	bf0c      	ite	eq
 800a2c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c4:	2500      	movne	r5, #0
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	bfc4      	itt	gt
 800a2ca:	1a9b      	subgt	r3, r3, r2
 800a2cc:	18ed      	addgt	r5, r5, r3
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	341a      	adds	r4, #26
 800a2d2:	42b5      	cmp	r5, r6
 800a2d4:	d11a      	bne.n	800a30c <_printf_common+0xc8>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e008      	b.n	800a2ec <_printf_common+0xa8>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4652      	mov	r2, sl
 800a2de:	4649      	mov	r1, r9
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	47c0      	blx	r8
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d103      	bne.n	800a2f0 <_printf_common+0xac>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f0:	3501      	adds	r5, #1
 800a2f2:	e7c6      	b.n	800a282 <_printf_common+0x3e>
 800a2f4:	18e1      	adds	r1, r4, r3
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	2030      	movs	r0, #48	; 0x30
 800a2fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2fe:	4422      	add	r2, r4
 800a300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a308:	3302      	adds	r3, #2
 800a30a:	e7c7      	b.n	800a29c <_printf_common+0x58>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4622      	mov	r2, r4
 800a310:	4649      	mov	r1, r9
 800a312:	4638      	mov	r0, r7
 800a314:	47c0      	blx	r8
 800a316:	3001      	adds	r0, #1
 800a318:	d0e6      	beq.n	800a2e8 <_printf_common+0xa4>
 800a31a:	3601      	adds	r6, #1
 800a31c:	e7d9      	b.n	800a2d2 <_printf_common+0x8e>
	...

0800a320 <_printf_i>:
 800a320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a324:	7e0f      	ldrb	r7, [r1, #24]
 800a326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a328:	2f78      	cmp	r7, #120	; 0x78
 800a32a:	4691      	mov	r9, r2
 800a32c:	4680      	mov	r8, r0
 800a32e:	460c      	mov	r4, r1
 800a330:	469a      	mov	sl, r3
 800a332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a336:	d807      	bhi.n	800a348 <_printf_i+0x28>
 800a338:	2f62      	cmp	r7, #98	; 0x62
 800a33a:	d80a      	bhi.n	800a352 <_printf_i+0x32>
 800a33c:	2f00      	cmp	r7, #0
 800a33e:	f000 80d8 	beq.w	800a4f2 <_printf_i+0x1d2>
 800a342:	2f58      	cmp	r7, #88	; 0x58
 800a344:	f000 80a3 	beq.w	800a48e <_printf_i+0x16e>
 800a348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a34c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a350:	e03a      	b.n	800a3c8 <_printf_i+0xa8>
 800a352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a356:	2b15      	cmp	r3, #21
 800a358:	d8f6      	bhi.n	800a348 <_printf_i+0x28>
 800a35a:	a101      	add	r1, pc, #4	; (adr r1, 800a360 <_printf_i+0x40>)
 800a35c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3cd 	.word	0x0800a3cd
 800a368:	0800a349 	.word	0x0800a349
 800a36c:	0800a349 	.word	0x0800a349
 800a370:	0800a349 	.word	0x0800a349
 800a374:	0800a349 	.word	0x0800a349
 800a378:	0800a3cd 	.word	0x0800a3cd
 800a37c:	0800a349 	.word	0x0800a349
 800a380:	0800a349 	.word	0x0800a349
 800a384:	0800a349 	.word	0x0800a349
 800a388:	0800a349 	.word	0x0800a349
 800a38c:	0800a4d9 	.word	0x0800a4d9
 800a390:	0800a3fd 	.word	0x0800a3fd
 800a394:	0800a4bb 	.word	0x0800a4bb
 800a398:	0800a349 	.word	0x0800a349
 800a39c:	0800a349 	.word	0x0800a349
 800a3a0:	0800a4fb 	.word	0x0800a4fb
 800a3a4:	0800a349 	.word	0x0800a349
 800a3a8:	0800a3fd 	.word	0x0800a3fd
 800a3ac:	0800a349 	.word	0x0800a349
 800a3b0:	0800a349 	.word	0x0800a349
 800a3b4:	0800a4c3 	.word	0x0800a4c3
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	1d1a      	adds	r2, r3, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	602a      	str	r2, [r5, #0]
 800a3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e0a3      	b.n	800a514 <_printf_i+0x1f4>
 800a3cc:	6820      	ldr	r0, [r4, #0]
 800a3ce:	6829      	ldr	r1, [r5, #0]
 800a3d0:	0606      	lsls	r6, r0, #24
 800a3d2:	f101 0304 	add.w	r3, r1, #4
 800a3d6:	d50a      	bpl.n	800a3ee <_printf_i+0xce>
 800a3d8:	680e      	ldr	r6, [r1, #0]
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	2e00      	cmp	r6, #0
 800a3de:	da03      	bge.n	800a3e8 <_printf_i+0xc8>
 800a3e0:	232d      	movs	r3, #45	; 0x2d
 800a3e2:	4276      	negs	r6, r6
 800a3e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e8:	485e      	ldr	r0, [pc, #376]	; (800a564 <_printf_i+0x244>)
 800a3ea:	230a      	movs	r3, #10
 800a3ec:	e019      	b.n	800a422 <_printf_i+0x102>
 800a3ee:	680e      	ldr	r6, [r1, #0]
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3f6:	bf18      	it	ne
 800a3f8:	b236      	sxthne	r6, r6
 800a3fa:	e7ef      	b.n	800a3dc <_printf_i+0xbc>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	6820      	ldr	r0, [r4, #0]
 800a400:	1d19      	adds	r1, r3, #4
 800a402:	6029      	str	r1, [r5, #0]
 800a404:	0601      	lsls	r1, r0, #24
 800a406:	d501      	bpl.n	800a40c <_printf_i+0xec>
 800a408:	681e      	ldr	r6, [r3, #0]
 800a40a:	e002      	b.n	800a412 <_printf_i+0xf2>
 800a40c:	0646      	lsls	r6, r0, #25
 800a40e:	d5fb      	bpl.n	800a408 <_printf_i+0xe8>
 800a410:	881e      	ldrh	r6, [r3, #0]
 800a412:	4854      	ldr	r0, [pc, #336]	; (800a564 <_printf_i+0x244>)
 800a414:	2f6f      	cmp	r7, #111	; 0x6f
 800a416:	bf0c      	ite	eq
 800a418:	2308      	moveq	r3, #8
 800a41a:	230a      	movne	r3, #10
 800a41c:	2100      	movs	r1, #0
 800a41e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a422:	6865      	ldr	r5, [r4, #4]
 800a424:	60a5      	str	r5, [r4, #8]
 800a426:	2d00      	cmp	r5, #0
 800a428:	bfa2      	ittt	ge
 800a42a:	6821      	ldrge	r1, [r4, #0]
 800a42c:	f021 0104 	bicge.w	r1, r1, #4
 800a430:	6021      	strge	r1, [r4, #0]
 800a432:	b90e      	cbnz	r6, 800a438 <_printf_i+0x118>
 800a434:	2d00      	cmp	r5, #0
 800a436:	d04d      	beq.n	800a4d4 <_printf_i+0x1b4>
 800a438:	4615      	mov	r5, r2
 800a43a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a43e:	fb03 6711 	mls	r7, r3, r1, r6
 800a442:	5dc7      	ldrb	r7, [r0, r7]
 800a444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a448:	4637      	mov	r7, r6
 800a44a:	42bb      	cmp	r3, r7
 800a44c:	460e      	mov	r6, r1
 800a44e:	d9f4      	bls.n	800a43a <_printf_i+0x11a>
 800a450:	2b08      	cmp	r3, #8
 800a452:	d10b      	bne.n	800a46c <_printf_i+0x14c>
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	07de      	lsls	r6, r3, #31
 800a458:	d508      	bpl.n	800a46c <_printf_i+0x14c>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	6861      	ldr	r1, [r4, #4]
 800a45e:	4299      	cmp	r1, r3
 800a460:	bfde      	ittt	le
 800a462:	2330      	movle	r3, #48	; 0x30
 800a464:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a46c:	1b52      	subs	r2, r2, r5
 800a46e:	6122      	str	r2, [r4, #16]
 800a470:	f8cd a000 	str.w	sl, [sp]
 800a474:	464b      	mov	r3, r9
 800a476:	aa03      	add	r2, sp, #12
 800a478:	4621      	mov	r1, r4
 800a47a:	4640      	mov	r0, r8
 800a47c:	f7ff fee2 	bl	800a244 <_printf_common>
 800a480:	3001      	adds	r0, #1
 800a482:	d14c      	bne.n	800a51e <_printf_i+0x1fe>
 800a484:	f04f 30ff 	mov.w	r0, #4294967295
 800a488:	b004      	add	sp, #16
 800a48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a48e:	4835      	ldr	r0, [pc, #212]	; (800a564 <_printf_i+0x244>)
 800a490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a494:	6829      	ldr	r1, [r5, #0]
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	f851 6b04 	ldr.w	r6, [r1], #4
 800a49c:	6029      	str	r1, [r5, #0]
 800a49e:	061d      	lsls	r5, r3, #24
 800a4a0:	d514      	bpl.n	800a4cc <_printf_i+0x1ac>
 800a4a2:	07df      	lsls	r7, r3, #31
 800a4a4:	bf44      	itt	mi
 800a4a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a4aa:	6023      	strmi	r3, [r4, #0]
 800a4ac:	b91e      	cbnz	r6, 800a4b6 <_printf_i+0x196>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	f023 0320 	bic.w	r3, r3, #32
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	e7b0      	b.n	800a41c <_printf_i+0xfc>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	f043 0320 	orr.w	r3, r3, #32
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	2378      	movs	r3, #120	; 0x78
 800a4c4:	4828      	ldr	r0, [pc, #160]	; (800a568 <_printf_i+0x248>)
 800a4c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4ca:	e7e3      	b.n	800a494 <_printf_i+0x174>
 800a4cc:	0659      	lsls	r1, r3, #25
 800a4ce:	bf48      	it	mi
 800a4d0:	b2b6      	uxthmi	r6, r6
 800a4d2:	e7e6      	b.n	800a4a2 <_printf_i+0x182>
 800a4d4:	4615      	mov	r5, r2
 800a4d6:	e7bb      	b.n	800a450 <_printf_i+0x130>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	6826      	ldr	r6, [r4, #0]
 800a4dc:	6961      	ldr	r1, [r4, #20]
 800a4de:	1d18      	adds	r0, r3, #4
 800a4e0:	6028      	str	r0, [r5, #0]
 800a4e2:	0635      	lsls	r5, r6, #24
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	d501      	bpl.n	800a4ec <_printf_i+0x1cc>
 800a4e8:	6019      	str	r1, [r3, #0]
 800a4ea:	e002      	b.n	800a4f2 <_printf_i+0x1d2>
 800a4ec:	0670      	lsls	r0, r6, #25
 800a4ee:	d5fb      	bpl.n	800a4e8 <_printf_i+0x1c8>
 800a4f0:	8019      	strh	r1, [r3, #0]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	6123      	str	r3, [r4, #16]
 800a4f6:	4615      	mov	r5, r2
 800a4f8:	e7ba      	b.n	800a470 <_printf_i+0x150>
 800a4fa:	682b      	ldr	r3, [r5, #0]
 800a4fc:	1d1a      	adds	r2, r3, #4
 800a4fe:	602a      	str	r2, [r5, #0]
 800a500:	681d      	ldr	r5, [r3, #0]
 800a502:	6862      	ldr	r2, [r4, #4]
 800a504:	2100      	movs	r1, #0
 800a506:	4628      	mov	r0, r5
 800a508:	f7f5 fe72 	bl	80001f0 <memchr>
 800a50c:	b108      	cbz	r0, 800a512 <_printf_i+0x1f2>
 800a50e:	1b40      	subs	r0, r0, r5
 800a510:	6060      	str	r0, [r4, #4]
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	2300      	movs	r3, #0
 800a518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a51c:	e7a8      	b.n	800a470 <_printf_i+0x150>
 800a51e:	6923      	ldr	r3, [r4, #16]
 800a520:	462a      	mov	r2, r5
 800a522:	4649      	mov	r1, r9
 800a524:	4640      	mov	r0, r8
 800a526:	47d0      	blx	sl
 800a528:	3001      	adds	r0, #1
 800a52a:	d0ab      	beq.n	800a484 <_printf_i+0x164>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	079b      	lsls	r3, r3, #30
 800a530:	d413      	bmi.n	800a55a <_printf_i+0x23a>
 800a532:	68e0      	ldr	r0, [r4, #12]
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	4298      	cmp	r0, r3
 800a538:	bfb8      	it	lt
 800a53a:	4618      	movlt	r0, r3
 800a53c:	e7a4      	b.n	800a488 <_printf_i+0x168>
 800a53e:	2301      	movs	r3, #1
 800a540:	4632      	mov	r2, r6
 800a542:	4649      	mov	r1, r9
 800a544:	4640      	mov	r0, r8
 800a546:	47d0      	blx	sl
 800a548:	3001      	adds	r0, #1
 800a54a:	d09b      	beq.n	800a484 <_printf_i+0x164>
 800a54c:	3501      	adds	r5, #1
 800a54e:	68e3      	ldr	r3, [r4, #12]
 800a550:	9903      	ldr	r1, [sp, #12]
 800a552:	1a5b      	subs	r3, r3, r1
 800a554:	42ab      	cmp	r3, r5
 800a556:	dcf2      	bgt.n	800a53e <_printf_i+0x21e>
 800a558:	e7eb      	b.n	800a532 <_printf_i+0x212>
 800a55a:	2500      	movs	r5, #0
 800a55c:	f104 0619 	add.w	r6, r4, #25
 800a560:	e7f5      	b.n	800a54e <_printf_i+0x22e>
 800a562:	bf00      	nop
 800a564:	0800aa65 	.word	0x0800aa65
 800a568:	0800aa76 	.word	0x0800aa76

0800a56c <memmove>:
 800a56c:	4288      	cmp	r0, r1
 800a56e:	b510      	push	{r4, lr}
 800a570:	eb01 0402 	add.w	r4, r1, r2
 800a574:	d902      	bls.n	800a57c <memmove+0x10>
 800a576:	4284      	cmp	r4, r0
 800a578:	4623      	mov	r3, r4
 800a57a:	d807      	bhi.n	800a58c <memmove+0x20>
 800a57c:	1e43      	subs	r3, r0, #1
 800a57e:	42a1      	cmp	r1, r4
 800a580:	d008      	beq.n	800a594 <memmove+0x28>
 800a582:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a58a:	e7f8      	b.n	800a57e <memmove+0x12>
 800a58c:	4402      	add	r2, r0
 800a58e:	4601      	mov	r1, r0
 800a590:	428a      	cmp	r2, r1
 800a592:	d100      	bne.n	800a596 <memmove+0x2a>
 800a594:	bd10      	pop	{r4, pc}
 800a596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a59a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a59e:	e7f7      	b.n	800a590 <memmove+0x24>

0800a5a0 <_free_r>:
 800a5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5a2:	2900      	cmp	r1, #0
 800a5a4:	d044      	beq.n	800a630 <_free_r+0x90>
 800a5a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5aa:	9001      	str	r0, [sp, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a5b2:	bfb8      	it	lt
 800a5b4:	18e4      	addlt	r4, r4, r3
 800a5b6:	f000 f913 	bl	800a7e0 <__malloc_lock>
 800a5ba:	4a1e      	ldr	r2, [pc, #120]	; (800a634 <_free_r+0x94>)
 800a5bc:	9801      	ldr	r0, [sp, #4]
 800a5be:	6813      	ldr	r3, [r2, #0]
 800a5c0:	b933      	cbnz	r3, 800a5d0 <_free_r+0x30>
 800a5c2:	6063      	str	r3, [r4, #4]
 800a5c4:	6014      	str	r4, [r2, #0]
 800a5c6:	b003      	add	sp, #12
 800a5c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5cc:	f000 b90e 	b.w	800a7ec <__malloc_unlock>
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	d908      	bls.n	800a5e6 <_free_r+0x46>
 800a5d4:	6825      	ldr	r5, [r4, #0]
 800a5d6:	1961      	adds	r1, r4, r5
 800a5d8:	428b      	cmp	r3, r1
 800a5da:	bf01      	itttt	eq
 800a5dc:	6819      	ldreq	r1, [r3, #0]
 800a5de:	685b      	ldreq	r3, [r3, #4]
 800a5e0:	1949      	addeq	r1, r1, r5
 800a5e2:	6021      	streq	r1, [r4, #0]
 800a5e4:	e7ed      	b.n	800a5c2 <_free_r+0x22>
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	b10b      	cbz	r3, 800a5f0 <_free_r+0x50>
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	d9fa      	bls.n	800a5e6 <_free_r+0x46>
 800a5f0:	6811      	ldr	r1, [r2, #0]
 800a5f2:	1855      	adds	r5, r2, r1
 800a5f4:	42a5      	cmp	r5, r4
 800a5f6:	d10b      	bne.n	800a610 <_free_r+0x70>
 800a5f8:	6824      	ldr	r4, [r4, #0]
 800a5fa:	4421      	add	r1, r4
 800a5fc:	1854      	adds	r4, r2, r1
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	6011      	str	r1, [r2, #0]
 800a602:	d1e0      	bne.n	800a5c6 <_free_r+0x26>
 800a604:	681c      	ldr	r4, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	6053      	str	r3, [r2, #4]
 800a60a:	4421      	add	r1, r4
 800a60c:	6011      	str	r1, [r2, #0]
 800a60e:	e7da      	b.n	800a5c6 <_free_r+0x26>
 800a610:	d902      	bls.n	800a618 <_free_r+0x78>
 800a612:	230c      	movs	r3, #12
 800a614:	6003      	str	r3, [r0, #0]
 800a616:	e7d6      	b.n	800a5c6 <_free_r+0x26>
 800a618:	6825      	ldr	r5, [r4, #0]
 800a61a:	1961      	adds	r1, r4, r5
 800a61c:	428b      	cmp	r3, r1
 800a61e:	bf04      	itt	eq
 800a620:	6819      	ldreq	r1, [r3, #0]
 800a622:	685b      	ldreq	r3, [r3, #4]
 800a624:	6063      	str	r3, [r4, #4]
 800a626:	bf04      	itt	eq
 800a628:	1949      	addeq	r1, r1, r5
 800a62a:	6021      	streq	r1, [r4, #0]
 800a62c:	6054      	str	r4, [r2, #4]
 800a62e:	e7ca      	b.n	800a5c6 <_free_r+0x26>
 800a630:	b003      	add	sp, #12
 800a632:	bd30      	pop	{r4, r5, pc}
 800a634:	200023b0 	.word	0x200023b0

0800a638 <sbrk_aligned>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	4e0e      	ldr	r6, [pc, #56]	; (800a674 <sbrk_aligned+0x3c>)
 800a63c:	460c      	mov	r4, r1
 800a63e:	6831      	ldr	r1, [r6, #0]
 800a640:	4605      	mov	r5, r0
 800a642:	b911      	cbnz	r1, 800a64a <sbrk_aligned+0x12>
 800a644:	f000 f8bc 	bl	800a7c0 <_sbrk_r>
 800a648:	6030      	str	r0, [r6, #0]
 800a64a:	4621      	mov	r1, r4
 800a64c:	4628      	mov	r0, r5
 800a64e:	f000 f8b7 	bl	800a7c0 <_sbrk_r>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	d00a      	beq.n	800a66c <sbrk_aligned+0x34>
 800a656:	1cc4      	adds	r4, r0, #3
 800a658:	f024 0403 	bic.w	r4, r4, #3
 800a65c:	42a0      	cmp	r0, r4
 800a65e:	d007      	beq.n	800a670 <sbrk_aligned+0x38>
 800a660:	1a21      	subs	r1, r4, r0
 800a662:	4628      	mov	r0, r5
 800a664:	f000 f8ac 	bl	800a7c0 <_sbrk_r>
 800a668:	3001      	adds	r0, #1
 800a66a:	d101      	bne.n	800a670 <sbrk_aligned+0x38>
 800a66c:	f04f 34ff 	mov.w	r4, #4294967295
 800a670:	4620      	mov	r0, r4
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	200023b4 	.word	0x200023b4

0800a678 <_malloc_r>:
 800a678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a67c:	1ccd      	adds	r5, r1, #3
 800a67e:	f025 0503 	bic.w	r5, r5, #3
 800a682:	3508      	adds	r5, #8
 800a684:	2d0c      	cmp	r5, #12
 800a686:	bf38      	it	cc
 800a688:	250c      	movcc	r5, #12
 800a68a:	2d00      	cmp	r5, #0
 800a68c:	4607      	mov	r7, r0
 800a68e:	db01      	blt.n	800a694 <_malloc_r+0x1c>
 800a690:	42a9      	cmp	r1, r5
 800a692:	d905      	bls.n	800a6a0 <_malloc_r+0x28>
 800a694:	230c      	movs	r3, #12
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	2600      	movs	r6, #0
 800a69a:	4630      	mov	r0, r6
 800a69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a0:	4e2e      	ldr	r6, [pc, #184]	; (800a75c <_malloc_r+0xe4>)
 800a6a2:	f000 f89d 	bl	800a7e0 <__malloc_lock>
 800a6a6:	6833      	ldr	r3, [r6, #0]
 800a6a8:	461c      	mov	r4, r3
 800a6aa:	bb34      	cbnz	r4, 800a6fa <_malloc_r+0x82>
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f7ff ffc2 	bl	800a638 <sbrk_aligned>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	d14d      	bne.n	800a756 <_malloc_r+0xde>
 800a6ba:	6834      	ldr	r4, [r6, #0]
 800a6bc:	4626      	mov	r6, r4
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	d140      	bne.n	800a744 <_malloc_r+0xcc>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	4631      	mov	r1, r6
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	eb04 0803 	add.w	r8, r4, r3
 800a6cc:	f000 f878 	bl	800a7c0 <_sbrk_r>
 800a6d0:	4580      	cmp	r8, r0
 800a6d2:	d13a      	bne.n	800a74a <_malloc_r+0xd2>
 800a6d4:	6821      	ldr	r1, [r4, #0]
 800a6d6:	3503      	adds	r5, #3
 800a6d8:	1a6d      	subs	r5, r5, r1
 800a6da:	f025 0503 	bic.w	r5, r5, #3
 800a6de:	3508      	adds	r5, #8
 800a6e0:	2d0c      	cmp	r5, #12
 800a6e2:	bf38      	it	cc
 800a6e4:	250c      	movcc	r5, #12
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	f7ff ffa5 	bl	800a638 <sbrk_aligned>
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	d02b      	beq.n	800a74a <_malloc_r+0xd2>
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	442b      	add	r3, r5
 800a6f6:	6023      	str	r3, [r4, #0]
 800a6f8:	e00e      	b.n	800a718 <_malloc_r+0xa0>
 800a6fa:	6822      	ldr	r2, [r4, #0]
 800a6fc:	1b52      	subs	r2, r2, r5
 800a6fe:	d41e      	bmi.n	800a73e <_malloc_r+0xc6>
 800a700:	2a0b      	cmp	r2, #11
 800a702:	d916      	bls.n	800a732 <_malloc_r+0xba>
 800a704:	1961      	adds	r1, r4, r5
 800a706:	42a3      	cmp	r3, r4
 800a708:	6025      	str	r5, [r4, #0]
 800a70a:	bf18      	it	ne
 800a70c:	6059      	strne	r1, [r3, #4]
 800a70e:	6863      	ldr	r3, [r4, #4]
 800a710:	bf08      	it	eq
 800a712:	6031      	streq	r1, [r6, #0]
 800a714:	5162      	str	r2, [r4, r5]
 800a716:	604b      	str	r3, [r1, #4]
 800a718:	4638      	mov	r0, r7
 800a71a:	f104 060b 	add.w	r6, r4, #11
 800a71e:	f000 f865 	bl	800a7ec <__malloc_unlock>
 800a722:	f026 0607 	bic.w	r6, r6, #7
 800a726:	1d23      	adds	r3, r4, #4
 800a728:	1af2      	subs	r2, r6, r3
 800a72a:	d0b6      	beq.n	800a69a <_malloc_r+0x22>
 800a72c:	1b9b      	subs	r3, r3, r6
 800a72e:	50a3      	str	r3, [r4, r2]
 800a730:	e7b3      	b.n	800a69a <_malloc_r+0x22>
 800a732:	6862      	ldr	r2, [r4, #4]
 800a734:	42a3      	cmp	r3, r4
 800a736:	bf0c      	ite	eq
 800a738:	6032      	streq	r2, [r6, #0]
 800a73a:	605a      	strne	r2, [r3, #4]
 800a73c:	e7ec      	b.n	800a718 <_malloc_r+0xa0>
 800a73e:	4623      	mov	r3, r4
 800a740:	6864      	ldr	r4, [r4, #4]
 800a742:	e7b2      	b.n	800a6aa <_malloc_r+0x32>
 800a744:	4634      	mov	r4, r6
 800a746:	6876      	ldr	r6, [r6, #4]
 800a748:	e7b9      	b.n	800a6be <_malloc_r+0x46>
 800a74a:	230c      	movs	r3, #12
 800a74c:	603b      	str	r3, [r7, #0]
 800a74e:	4638      	mov	r0, r7
 800a750:	f000 f84c 	bl	800a7ec <__malloc_unlock>
 800a754:	e7a1      	b.n	800a69a <_malloc_r+0x22>
 800a756:	6025      	str	r5, [r4, #0]
 800a758:	e7de      	b.n	800a718 <_malloc_r+0xa0>
 800a75a:	bf00      	nop
 800a75c:	200023b0 	.word	0x200023b0

0800a760 <_realloc_r>:
 800a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a764:	4680      	mov	r8, r0
 800a766:	4614      	mov	r4, r2
 800a768:	460e      	mov	r6, r1
 800a76a:	b921      	cbnz	r1, 800a776 <_realloc_r+0x16>
 800a76c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a770:	4611      	mov	r1, r2
 800a772:	f7ff bf81 	b.w	800a678 <_malloc_r>
 800a776:	b92a      	cbnz	r2, 800a784 <_realloc_r+0x24>
 800a778:	f7ff ff12 	bl	800a5a0 <_free_r>
 800a77c:	4625      	mov	r5, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	f000 f838 	bl	800a7f8 <_malloc_usable_size_r>
 800a788:	4284      	cmp	r4, r0
 800a78a:	4607      	mov	r7, r0
 800a78c:	d802      	bhi.n	800a794 <_realloc_r+0x34>
 800a78e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a792:	d812      	bhi.n	800a7ba <_realloc_r+0x5a>
 800a794:	4621      	mov	r1, r4
 800a796:	4640      	mov	r0, r8
 800a798:	f7ff ff6e 	bl	800a678 <_malloc_r>
 800a79c:	4605      	mov	r5, r0
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d0ed      	beq.n	800a77e <_realloc_r+0x1e>
 800a7a2:	42bc      	cmp	r4, r7
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	bf28      	it	cs
 800a7aa:	463a      	movcs	r2, r7
 800a7ac:	f7ff fbb8 	bl	8009f20 <memcpy>
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	f7ff fef4 	bl	800a5a0 <_free_r>
 800a7b8:	e7e1      	b.n	800a77e <_realloc_r+0x1e>
 800a7ba:	4635      	mov	r5, r6
 800a7bc:	e7df      	b.n	800a77e <_realloc_r+0x1e>
	...

0800a7c0 <_sbrk_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d06      	ldr	r5, [pc, #24]	; (800a7dc <_sbrk_r+0x1c>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	f7f6 fd36 	bl	800123c <_sbrk>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_sbrk_r+0x1a>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_sbrk_r+0x1a>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	200023b8 	.word	0x200023b8

0800a7e0 <__malloc_lock>:
 800a7e0:	4801      	ldr	r0, [pc, #4]	; (800a7e8 <__malloc_lock+0x8>)
 800a7e2:	f000 b811 	b.w	800a808 <__retarget_lock_acquire_recursive>
 800a7e6:	bf00      	nop
 800a7e8:	200023bc 	.word	0x200023bc

0800a7ec <__malloc_unlock>:
 800a7ec:	4801      	ldr	r0, [pc, #4]	; (800a7f4 <__malloc_unlock+0x8>)
 800a7ee:	f000 b80c 	b.w	800a80a <__retarget_lock_release_recursive>
 800a7f2:	bf00      	nop
 800a7f4:	200023bc 	.word	0x200023bc

0800a7f8 <_malloc_usable_size_r>:
 800a7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7fc:	1f18      	subs	r0, r3, #4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfbc      	itt	lt
 800a802:	580b      	ldrlt	r3, [r1, r0]
 800a804:	18c0      	addlt	r0, r0, r3
 800a806:	4770      	bx	lr

0800a808 <__retarget_lock_acquire_recursive>:
 800a808:	4770      	bx	lr

0800a80a <__retarget_lock_release_recursive>:
 800a80a:	4770      	bx	lr

0800a80c <_init>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr

0800a818 <_fini>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr
