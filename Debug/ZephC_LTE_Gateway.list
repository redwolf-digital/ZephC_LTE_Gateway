
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a974  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae34  0800ae34  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae34  0800ae34  0001ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae3c  0800ae3c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae3c  0800ae3c  0001ae3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae40  0800ae40  0001ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800ae44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021ac  20000160  0800afa4  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000230c  0800afa4  0002230c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f7a  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a26  00000000  00000000  0003910a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003dfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4c8  00000000  00000000  0003f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0a1  00000000  00000000  00059750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009291a  00000000  00000000  000737f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010610b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005894  00000000  00000000  0010615c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aafc 	.word	0x0800aafc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800aafc 	.word	0x0800aafc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db0b      	blt.n	80005be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 021f 	and.w	r2, r3, #31
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <__NVIC_EnableIRQ+0x38>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	095b      	lsrs	r3, r3, #5
 80005b4:	2001      	movs	r0, #1
 80005b6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <initEXIT>:
#include "stm32f4xx.h"
#include "stm32f4xx_it.h"

unsigned char intterruptEvent_Flag = 0;

void initEXIT(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// Enable GPIO Clock
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <initEXIT+0x7c>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <initEXIT+0x7c>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER &= ~3U << 6;					// GPIO B3 set 00 - INPUT
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <initEXIT+0x80>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1a      	ldr	r2, [pc, #104]	; (8000650 <initEXIT+0x80>)
 80005e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005ea:	6013      	str	r3, [r2, #0]
	GPIOB -> PUPDR &= ~3U << 6;					// No pull-up|pull-down
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <initEXIT+0x80>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <initEXIT+0x80>)
 80005f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005f6:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI3_IRQn);					// Enable interrupt
 80005f8:	2009      	movs	r0, #9
 80005fa:	f7ff ffcb 	bl	8000594 <__NVIC_EnableIRQ>

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <initEXIT+0x7c>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <initEXIT+0x7c>)
 8000604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000608:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG -> EXTICR[0] &= SYSCFG_EXTICR1_EXTI3;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <initEXIT+0x84>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <initEXIT+0x84>)
 8000610:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000614:	6093      	str	r3, [r2, #8]
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <initEXIT+0x84>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <initEXIT+0x84>)
 800061c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000620:	6093      	str	r3, [r2, #8]

	EXTI -> RTSR &= ~EXTI_RTSR_TR3;				// Disable rising trigger
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <initEXIT+0x88>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <initEXIT+0x88>)
 8000628:	f023 0308 	bic.w	r3, r3, #8
 800062c:	6093      	str	r3, [r2, #8]
	EXTI -> RTSR |= EXTI_FTSR_TR3;				// Enable falling trigger
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <initEXIT+0x88>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <initEXIT+0x88>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6093      	str	r3, [r2, #8]

	EXTI -> IMR |= EXTI_IMR_IM3;				// Interrupt Mask 1 = not mask
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <initEXIT+0x88>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <initEXIT+0x88>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400
 8000654:	40013800 	.word	0x40013800
 8000658:	40013c00 	.word	0x40013c00

0800065c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void) {
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR3) != 0) {
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <EXTI3_IRQHandler+0x22>
		intterruptEvent_Flag = 1;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <EXTI3_IRQHandler+0x30>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= EXTI_PR_PR3;
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6153      	str	r3, [r2, #20]
	}
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	40013c00 	.word	0x40013c00
 800068c:	2000017c 	.word	0x2000017c

08000690 <clearText_Temp>:





void clearText_Temp(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	memset(TextTemp, 0x00, sizeof(TextTemp));
 8000694:	227d      	movs	r2, #125	; 0x7d
 8000696:	2100      	movs	r1, #0
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <clearText_Temp+0x14>)
 800069a:	f009 fdc7 	bl	800a22c <memset>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000180 	.word	0x20000180

080006a8 <clearLTE_Temp>:

void clearLTE_Temp(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	2100      	movs	r1, #0
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <clearLTE_Temp+0x14>)
 80006b2:	f009 fdbb 	bl	800a22c <memset>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000400 	.word	0x20000400

080006c0 <initLTE>:





void initLTE(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	SerialDebug("[MCU] -> start initialize LTE module\r\n");
 80006c6:	485d      	ldr	r0, [pc, #372]	; (800083c <initLTE+0x17c>)
 80006c8:	f000 fa64 	bl	8000b94 <SerialDebug>

	for(unsigned char countSeq = 0; countSeq < 8; countSeq++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	e0ab      	b.n	800082a <initLTE+0x16a>

		switch(countSeq) {
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	d83b      	bhi.n	8000750 <initLTE+0x90>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <initLTE+0x20>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	08000701 	.word	0x08000701
 80006e4:	0800070b 	.word	0x0800070b
 80006e8:	08000715 	.word	0x08000715
 80006ec:	0800071f 	.word	0x0800071f
 80006f0:	08000729 	.word	0x08000729
 80006f4:	08000733 	.word	0x08000733
 80006f8:	0800073d 	.word	0x0800073d
 80006fc:	08000747 	.word	0x08000747
			case 0 :	// Turn off echo
				sprintf(TextTemp, "ATE0\r\n");
 8000700:	494f      	ldr	r1, [pc, #316]	; (8000840 <initLTE+0x180>)
 8000702:	4850      	ldr	r0, [pc, #320]	; (8000844 <initLTE+0x184>)
 8000704:	f009 fd9a 	bl	800a23c <siprintf>
				break;
 8000708:	e022      	b.n	8000750 <initLTE+0x90>

			case 1 :	// Low -> High on DTR: Change to command mode while remaining the connected call
				sprintf(TextTemp, "AT&D1\r\n");
 800070a:	494f      	ldr	r1, [pc, #316]	; (8000848 <initLTE+0x188>)
 800070c:	484d      	ldr	r0, [pc, #308]	; (8000844 <initLTE+0x184>)
 800070e:	f009 fd95 	bl	800a23c <siprintf>
				break;
 8000712:	e01d      	b.n	8000750 <initLTE+0x90>

			case 2 :	// Set frequency band
				sprintf(TextTemp, "AT+QCFG=\"Band\",511,1\r\n");
 8000714:	494d      	ldr	r1, [pc, #308]	; (800084c <initLTE+0x18c>)
 8000716:	484b      	ldr	r0, [pc, #300]	; (8000844 <initLTE+0x184>)
 8000718:	f009 fd90 	bl	800a23c <siprintf>
				break;
 800071c:	e018      	b.n	8000750 <initLTE+0x90>

			case 3 :	// Disable GNSS
				sprintf(TextTemp, "AT+QGPSEND\r\n");
 800071e:	494c      	ldr	r1, [pc, #304]	; (8000850 <initLTE+0x190>)
 8000720:	4848      	ldr	r0, [pc, #288]	; (8000844 <initLTE+0x184>)
 8000722:	f009 fd8b 	bl	800a23c <siprintf>
				break;
 8000726:	e013      	b.n	8000750 <initLTE+0x90>

			case 4 :	// Output via debug UART port
				sprintf(TextTemp, "AT+QGPSCFG=\"outport\",\"uartdebug\"\r\n");
 8000728:	494a      	ldr	r1, [pc, #296]	; (8000854 <initLTE+0x194>)
 800072a:	4846      	ldr	r0, [pc, #280]	; (8000844 <initLTE+0x184>)
 800072c:	f009 fd86 	bl	800a23c <siprintf>
				break;
 8000730:	e00e      	b.n	8000750 <initLTE+0x90>

			case 5 :	// Enable NMEA
				sprintf(TextTemp, "AT+QGPSCFG=\"nmeasrc\",1\r\n");
 8000732:	4949      	ldr	r1, [pc, #292]	; (8000858 <initLTE+0x198>)
 8000734:	4843      	ldr	r0, [pc, #268]	; (8000844 <initLTE+0x184>)
 8000736:	f009 fd81 	bl	800a23c <siprintf>
				break;
 800073a:	e009      	b.n	8000750 <initLTE+0x90>

			case 6 :	// NMEA type output GPRMC only
				sprintf(TextTemp, "AT+QGPSCFG=\"gpsnmeatype\",2\r\n");
 800073c:	4947      	ldr	r1, [pc, #284]	; (800085c <initLTE+0x19c>)
 800073e:	4841      	ldr	r0, [pc, #260]	; (8000844 <initLTE+0x184>)
 8000740:	f009 fd7c 	bl	800a23c <siprintf>
				break;
 8000744:	e004      	b.n	8000750 <initLTE+0x90>

			case 7 :	// Set status network registration
				sprintf(TextTemp, "AT+CREG=1\r\n");
 8000746:	4946      	ldr	r1, [pc, #280]	; (8000860 <initLTE+0x1a0>)
 8000748:	483e      	ldr	r0, [pc, #248]	; (8000844 <initLTE+0x184>)
 800074a:	f009 fd77 	bl	800a23c <siprintf>
				break;
 800074e:	bf00      	nop
		}

		SendCMD_LTE((char *)TextTemp);	// Sned CMD
 8000750:	483c      	ldr	r0, [pc, #240]	; (8000844 <initLTE+0x184>)
 8000752:	f000 fa35 	bl	8000bc0 <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 8000756:	4b43      	ldr	r3, [pc, #268]	; (8000864 <initLTE+0x1a4>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 800075c:	4b42      	ldr	r3, [pc, #264]	; (8000868 <initLTE+0x1a8>)
 800075e:	881a      	ldrh	r2, [r3, #0]
 8000760:	4b41      	ldr	r3, [pc, #260]	; (8000868 <initLTE+0x1a8>)
 8000762:	805a      	strh	r2, [r3, #2]

		while(sysFlag.LTE_CMD_Send == 1) {
 8000764:	e05a      	b.n	800081c <initLTE+0x15c>
			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8000766:	4941      	ldr	r1, [pc, #260]	; (800086c <initLTE+0x1ac>)
 8000768:	4841      	ldr	r0, [pc, #260]	; (8000870 <initLTE+0x1b0>)
 800076a:	f000 fa9f 	bl	8000cac <findTarget>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10e      	bne.n	8000792 <initLTE+0xd2>
				SerialDebug("[LTE] -> OK\r\n");
 8000774:	483f      	ldr	r0, [pc, #252]	; (8000874 <initLTE+0x1b4>)
 8000776:	f000 fa0d 	bl	8000b94 <SerialDebug>

				sysFlag.LTE_CMD_Send = 0;
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <initLTE+0x1a4>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000780:	f7ff ff92 	bl	80006a8 <clearLTE_Temp>
				clearText_Temp();
 8000784:	f7ff ff84 	bl	8000690 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <initLTE+0x1a8>)
 800078a:	881a      	ldrh	r2, [r3, #0]
 800078c:	4b36      	ldr	r3, [pc, #216]	; (8000868 <initLTE+0x1a8>)
 800078e:	805a      	strh	r2, [r3, #2]
 8000790:	e044      	b.n	800081c <initLTE+0x15c>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8000792:	4939      	ldr	r1, [pc, #228]	; (8000878 <initLTE+0x1b8>)
 8000794:	4836      	ldr	r0, [pc, #216]	; (8000870 <initLTE+0x1b0>)
 8000796:	f000 fa89 	bl	8000cac <findTarget>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d122      	bne.n	80007e6 <initLTE+0x126>
				SerialDebug("[LTE] -> ");
 80007a0:	4836      	ldr	r0, [pc, #216]	; (800087c <initLTE+0x1bc>)
 80007a2:	f000 f9f7 	bl	8000b94 <SerialDebug>
				SerialDebug((char *)lteComm_MainBuff);
 80007a6:	4832      	ldr	r0, [pc, #200]	; (8000870 <initLTE+0x1b0>)
 80007a8:	f000 f9f4 	bl	8000b94 <SerialDebug>

				// Case 3 : Disable GNSS fail -> ignore error 505
				if(countSeq == 3 && findTarget(lteComm_MainBuff, "505") == 1) {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d10a      	bne.n	80007c8 <initLTE+0x108>
 80007b2:	4933      	ldr	r1, [pc, #204]	; (8000880 <initLTE+0x1c0>)
 80007b4:	482e      	ldr	r0, [pc, #184]	; (8000870 <initLTE+0x1b0>)
 80007b6:	f000 fa79 	bl	8000cac <findTarget>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d103      	bne.n	80007c8 <initLTE+0x108>
					sysFlag.LTE_ERROR = 0;
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <initLTE+0x1a4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	705a      	strb	r2, [r3, #1]
 80007c6:	e002      	b.n	80007ce <initLTE+0x10e>
				}else {
					sysFlag.LTE_ERROR = 1;
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <initLTE+0x1a4>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	705a      	strb	r2, [r3, #1]
				}

				sysFlag.LTE_CMD_Send = 0;
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <initLTE+0x1a4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80007d4:	f7ff ff68 	bl	80006a8 <clearLTE_Temp>
				clearText_Temp();
 80007d8:	f7ff ff5a 	bl	8000690 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <initLTE+0x1a8>)
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <initLTE+0x1a8>)
 80007e2:	805a      	strh	r2, [r3, #2]
 80007e4:	e01a      	b.n	800081c <initLTE+0x15c>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <initLTE+0x1a8>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <initLTE+0x1a8>)
 80007ee:	885b      	ldrh	r3, [r3, #2]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <initLTE+0x1a8>)
 80007f4:	8952      	ldrh	r2, [r2, #10]
 80007f6:	4293      	cmp	r3, r2
 80007f8:	db10      	blt.n	800081c <initLTE+0x15c>
				SerialDebug("[MCU] -> LTE TIME OUT\r\n");
 80007fa:	4822      	ldr	r0, [pc, #136]	; (8000884 <initLTE+0x1c4>)
 80007fc:	f000 f9ca 	bl	8000b94 <SerialDebug>
				sysFlag.LTE_ERROR = 1;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <initLTE+0x1a4>)
 8000802:	2201      	movs	r2, #1
 8000804:	705a      	strb	r2, [r3, #1]
				sysFlag.LTE_CMD_Send = 0;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <initLTE+0x1a4>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 800080c:	f7ff ff4c 	bl	80006a8 <clearLTE_Temp>
				clearText_Temp();
 8000810:	f7ff ff3e 	bl	8000690 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <initLTE+0x1a8>)
 8000816:	881a      	ldrh	r2, [r3, #0]
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <initLTE+0x1a8>)
 800081a:	805a      	strh	r2, [r3, #2]
		while(sysFlag.LTE_CMD_Send == 1) {
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <initLTE+0x1a4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d0a0      	beq.n	8000766 <initLTE+0xa6>
	for(unsigned char countSeq = 0; countSeq < 8; countSeq++) {
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	3301      	adds	r3, #1
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b07      	cmp	r3, #7
 800082e:	f67f af50 	bls.w	80006d2 <initLTE+0x12>
			}
		}
	}
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	0800ab14 	.word	0x0800ab14
 8000840:	0800ab3c 	.word	0x0800ab3c
 8000844:	20000180 	.word	0x20000180
 8000848:	0800ab44 	.word	0x0800ab44
 800084c:	0800ab4c 	.word	0x0800ab4c
 8000850:	0800ab64 	.word	0x0800ab64
 8000854:	0800ab74 	.word	0x0800ab74
 8000858:	0800ab98 	.word	0x0800ab98
 800085c:	0800abb4 	.word	0x0800abb4
 8000860:	0800abd4 	.word	0x0800abd4
 8000864:	200006a4 	.word	0x200006a4
 8000868:	20000698 	.word	0x20000698
 800086c:	0800abe0 	.word	0x0800abe0
 8000870:	20000400 	.word	0x20000400
 8000874:	0800abe4 	.word	0x0800abe4
 8000878:	0800abf4 	.word	0x0800abf4
 800087c:	0800abfc 	.word	0x0800abfc
 8000880:	0800ac08 	.word	0x0800ac08
 8000884:	0800ac0c 	.word	0x0800ac0c

08000888 <main>:
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af02      	add	r7, sp, #8

  sysValinit();
 800088e:	f000 f933 	bl	8000af8 <sysValinit>
  sensorValInit();
 8000892:	f000 f953 	bl	8000b3c <sensorValInit>

  HAL_Init();
 8000896:	f000 fed5 	bl	8001644 <HAL_Init>
  SystemClock_Config();
 800089a:	f000 fa5b 	bl	8000d54 <SystemClock_Config>
  MX_GPIO_Init();
 800089e:	f000 fb99 	bl	8000fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a2:	f000 fb61 	bl	8000f68 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008a6:	f000 fb0b 	bl	8000ec0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008aa:	f000 fb33 	bl	8000f14 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80008ae:	f008 ff75 	bl	800979c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80008b2:	f000 fab7 	bl	8000e24 <MX_TIM4_Init>


  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 80008b6:	4873      	ldr	r0, [pc, #460]	; (8000a84 <main+0x1fc>)
 80008b8:	f003 fd30 	bl	800431c <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 80008bc:	22ff      	movs	r2, #255	; 0xff
 80008be:	4972      	ldr	r1, [pc, #456]	; (8000a88 <main+0x200>)
 80008c0:	4872      	ldr	r0, [pc, #456]	; (8000a8c <main+0x204>)
 80008c2:	f004 fa00 	bl	8004cc6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80008c6:	4b72      	ldr	r3, [pc, #456]	; (8000a90 <main+0x208>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b70      	ldr	r3, [pc, #448]	; (8000a90 <main+0x208>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f022 0208 	bic.w	r2, r2, #8
 80008d4:	601a      	str	r2, [r3, #0]

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	496e      	ldr	r1, [pc, #440]	; (8000a94 <main+0x20c>)
 80008da:	486f      	ldr	r0, [pc, #444]	; (8000a98 <main+0x210>)
 80008dc:	f004 f9f3 	bl	8004cc6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80008e0:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <main+0x214>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b6d      	ldr	r3, [pc, #436]	; (8000a9c <main+0x214>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f022 0208 	bic.w	r2, r2, #8
 80008ee:	601a      	str	r2, [r3, #0]



  // INTERRUPT
  initEXIT();
 80008f0:	f7ff fe6e 	bl	80005d0 <initEXIT>
 *
 *  ===============================================================================
 */

  // Wait LTE module boot
  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);			// BUSY 1
 80008f4:	2201      	movs	r2, #1
 80008f6:	2120      	movs	r1, #32
 80008f8:	4869      	ldr	r0, [pc, #420]	; (8000aa0 <main+0x218>)
 80008fa:	f001 fdd1 	bl	80024a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ONLINE, GPIO_PIN_RESET);		// ONLINE 0
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	4867      	ldr	r0, [pc, #412]	; (8000aa0 <main+0x218>)
 8000904:	f001 fdcc 	bl	80024a0 <HAL_GPIO_WritePin>
  while(sysCounter.main_ms_counter < 500);				// Wait MCU boot
 8000908:	bf00      	nop
 800090a:	4b66      	ldr	r3, [pc, #408]	; (8000aa4 <main+0x21c>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000912:	d3fa      	bcc.n	800090a <main+0x82>
  // Initialize LTE module
  SerialDebug("[MCU] -> Wait LTE boot 30sec.\r\n");
 8000914:	4864      	ldr	r0, [pc, #400]	; (8000aa8 <main+0x220>)
 8000916:	f000 f93d 	bl	8000b94 <SerialDebug>
  while(sysCounter.main_ms_counter < LTEbootTime);		// Wait LTE module boot
 800091a:	bf00      	nop
 800091c:	4b61      	ldr	r3, [pc, #388]	; (8000aa4 <main+0x21c>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	f247 522f 	movw	r2, #29999	; 0x752f
 8000924:	4293      	cmp	r3, r2
 8000926:	d9f9      	bls.n	800091c <main+0x94>
  initLTE();											// Start init LTE module
 8000928:	f7ff feca 	bl	80006c0 <initLTE>
  // Config PDP context
  //initPDP(1);

  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);		// BUSY 0
 800092c:	2200      	movs	r2, #0
 800092e:	2120      	movs	r1, #32
 8000930:	485b      	ldr	r0, [pc, #364]	; (8000aa0 <main+0x218>)
 8000932:	f001 fdb5 	bl	80024a0 <HAL_GPIO_WritePin>

  while(1) {
  // ErrorHandle

  // RS485Handle :
	while(intterruptEvent_Flag == 1) {									// Get RTS Signal
 8000936:	e09f      	b.n	8000a78 <main+0x1f0>
	  SerialDebug("[MCU] -> Get RTS\r\n");
 8000938:	485c      	ldr	r0, [pc, #368]	; (8000aac <main+0x224>)
 800093a:	f000 f92b 	bl	8000b94 <SerialDebug>
	  sensorValInit();													// Clear buffer
 800093e:	f000 f8fd 	bl	8000b3c <sensorValInit>
	  COMPID[1] = '\0';
 8000942:	4b5b      	ldr	r3, [pc, #364]	; (8000ab0 <main+0x228>)
 8000944:	2200      	movs	r2, #0
 8000946:	705a      	strb	r2, [r3, #1]
	  ENDBYTE[1] = '\0';
 8000948:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <main+0x22c>)
 800094a:	2200      	movs	r2, #0
 800094c:	705a      	strb	r2, [r3, #1]
	  // Ping to server



	  // Generate pulse 5ms.
	  SerialDebug("[MCU] -> Send RDY\r\n");
 800094e:	485a      	ldr	r0, [pc, #360]	; (8000ab8 <main+0x230>)
 8000950:	f000 f920 	bl	8000b94 <SerialDebug>
	  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	4851      	ldr	r0, [pc, #324]	; (8000aa0 <main+0x218>)
 800095a:	f001 fda1 	bl	80024a0 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 800095e:	2005      	movs	r0, #5
 8000960:	f000 fee2 	bl	8001728 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	484d      	ldr	r0, [pc, #308]	; (8000aa0 <main+0x218>)
 800096a:	f001 fd99 	bl	80024a0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);						// BUSY !!!!
 800096e:	2201      	movs	r2, #1
 8000970:	2120      	movs	r1, #32
 8000972:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <main+0x218>)
 8000974:	f001 fd94 	bl	80024a0 <HAL_GPIO_WritePin>
	  SerialDebug("[MCU] -> Wait data\r\n");
 8000978:	4850      	ldr	r0, [pc, #320]	; (8000abc <main+0x234>)
 800097a:	f000 f90b 	bl	8000b94 <SerialDebug>

	  // Wait DMA put data to buffer
	  while(*dataComm_mainBuff == '\0');
 800097e:	bf00      	nop
 8000980:	4b4f      	ldr	r3, [pc, #316]	; (8000ac0 <main+0x238>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0fb      	beq.n	8000980 <main+0xf8>
	  Delimiter(dataComm_mainBuff, ',', 3, 80, COMPID[1]);
 8000988:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <main+0x228>)
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2350      	movs	r3, #80	; 0x50
 8000990:	2203      	movs	r2, #3
 8000992:	212c      	movs	r1, #44	; 0x2c
 8000994:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <main+0x238>)
 8000996:	f000 fb8c 	bl	80010b2 <Delimiter>
	  Delimiter(dataComm_mainBuff, ',', 12, 80, ENDBYTE[1]);
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <main+0x22c>)
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2350      	movs	r3, #80	; 0x50
 80009a2:	220c      	movs	r2, #12
 80009a4:	212c      	movs	r1, #44	; 0x2c
 80009a6:	4846      	ldr	r0, [pc, #280]	; (8000ac0 <main+0x238>)
 80009a8:	f000 fb83 	bl	80010b2 <Delimiter>

	  // Check data is valid?
	  // frame 0 = frame 3 && frame 12 = 'Q'
	  if(dataComm_mainBuff[0] == COMPID[1] && ENDBYTE[1] == 'Q') {
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <main+0x238>)
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <main+0x228>)
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d157      	bne.n	8000a68 <main+0x1e0>
 80009b8:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <main+0x22c>)
 80009ba:	785b      	ldrb	r3, [r3, #1]
 80009bc:	2b51      	cmp	r3, #81	; 0x51
 80009be:	d153      	bne.n	8000a68 <main+0x1e0>
		  SerialDebug("[MCU] -> Data is valid\r\n");
 80009c0:	4840      	ldr	r0, [pc, #256]	; (8000ac4 <main+0x23c>)
 80009c2:	f000 f8e7 	bl	8000b94 <SerialDebug>

		  // Delimit data
		  Delimiter(dataComm_mainBuff, ',', 1, 80, SENSOR.timeStemp);
 80009c6:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <main+0x240>)
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2350      	movs	r3, #80	; 0x50
 80009cc:	2201      	movs	r2, #1
 80009ce:	212c      	movs	r1, #44	; 0x2c
 80009d0:	483b      	ldr	r0, [pc, #236]	; (8000ac0 <main+0x238>)
 80009d2:	f000 fb6e 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 2, 80, SENSOR.dateStamp);
 80009d6:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <main+0x244>)
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2350      	movs	r3, #80	; 0x50
 80009dc:	2202      	movs	r2, #2
 80009de:	212c      	movs	r1, #44	; 0x2c
 80009e0:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <main+0x238>)
 80009e2:	f000 fb66 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 4, 80, SENSOR.X);
 80009e6:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <main+0x248>)
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2350      	movs	r3, #80	; 0x50
 80009ec:	2204      	movs	r2, #4
 80009ee:	212c      	movs	r1, #44	; 0x2c
 80009f0:	4833      	ldr	r0, [pc, #204]	; (8000ac0 <main+0x238>)
 80009f2:	f000 fb5e 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 5, 80, SENSOR.Y);
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <main+0x24c>)
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2350      	movs	r3, #80	; 0x50
 80009fc:	2205      	movs	r2, #5
 80009fe:	212c      	movs	r1, #44	; 0x2c
 8000a00:	482f      	ldr	r0, [pc, #188]	; (8000ac0 <main+0x238>)
 8000a02:	f000 fb56 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 6, 80, SENSOR.Z);
 8000a06:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <main+0x250>)
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2350      	movs	r3, #80	; 0x50
 8000a0c:	2206      	movs	r2, #6
 8000a0e:	212c      	movs	r1, #44	; 0x2c
 8000a10:	482b      	ldr	r0, [pc, #172]	; (8000ac0 <main+0x238>)
 8000a12:	f000 fb4e 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 7, 80, SENSOR.Huim);
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <main+0x254>)
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2350      	movs	r3, #80	; 0x50
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	212c      	movs	r1, #44	; 0x2c
 8000a20:	4827      	ldr	r0, [pc, #156]	; (8000ac0 <main+0x238>)
 8000a22:	f000 fb46 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 8, 80, SENSOR.Temp);
 8000a26:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <main+0x258>)
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2350      	movs	r3, #80	; 0x50
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	212c      	movs	r1, #44	; 0x2c
 8000a30:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <main+0x238>)
 8000a32:	f000 fb3e 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 9, 80, SENSOR.Alc);
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <main+0x25c>)
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2350      	movs	r3, #80	; 0x50
 8000a3c:	2209      	movs	r2, #9
 8000a3e:	212c      	movs	r1, #44	; 0x2c
 8000a40:	481f      	ldr	r0, [pc, #124]	; (8000ac0 <main+0x238>)
 8000a42:	f000 fb36 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 10, 80, SENSOR.Carbon);
 8000a46:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <main+0x260>)
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2350      	movs	r3, #80	; 0x50
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	212c      	movs	r1, #44	; 0x2c
 8000a50:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <main+0x238>)
 8000a52:	f000 fb2e 	bl	80010b2 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 11, 80, SENSOR.AirFlow);
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <main+0x264>)
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2350      	movs	r3, #80	; 0x50
 8000a5c:	220b      	movs	r2, #11
 8000a5e:	212c      	movs	r1, #44	; 0x2c
 8000a60:	4817      	ldr	r0, [pc, #92]	; (8000ac0 <main+0x238>)
 8000a62:	f000 fb26 	bl	80010b2 <Delimiter>
 8000a66:	e002      	b.n	8000a6e <main+0x1e6>


	  }else {
		  SerialDebug("[MCU] -> Data is not valid\r\n");
 8000a68:	4821      	ldr	r0, [pc, #132]	; (8000af0 <main+0x268>)
 8000a6a:	f000 f893 	bl	8000b94 <SerialDebug>





	  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);					// End process
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2120      	movs	r1, #32
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <main+0x218>)
 8000a74:	f001 fd14 	bl	80024a0 <HAL_GPIO_WritePin>
	while(intterruptEvent_Flag == 1) {									// Get RTS Signal
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <main+0x26c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	f43f af5b 	beq.w	8000938 <main+0xb0>
 8000a82:	e7f9      	b.n	8000a78 <main+0x1f0>
 8000a84:	20000508 	.word	0x20000508
 8000a88:	20000280 	.word	0x20000280
 8000a8c:	20000594 	.word	0x20000594
 8000a90:	20000638 	.word	0x20000638
 8000a94:	20000200 	.word	0x20000200
 8000a98:	20000550 	.word	0x20000550
 8000a9c:	200005d8 	.word	0x200005d8
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	20000698 	.word	0x20000698
 8000aa8:	0800ad08 	.word	0x0800ad08
 8000aac:	0800ad28 	.word	0x0800ad28
 8000ab0:	20000504 	.word	0x20000504
 8000ab4:	20000500 	.word	0x20000500
 8000ab8:	0800ad3c 	.word	0x0800ad3c
 8000abc:	0800ad50 	.word	0x0800ad50
 8000ac0:	20000380 	.word	0x20000380
 8000ac4:	0800ad68 	.word	0x0800ad68
 8000ac8:	200006b0 	.word	0x200006b0
 8000acc:	200006a8 	.word	0x200006a8
 8000ad0:	200006b8 	.word	0x200006b8
 8000ad4:	200006be 	.word	0x200006be
 8000ad8:	200006c4 	.word	0x200006c4
 8000adc:	200006ca 	.word	0x200006ca
 8000ae0:	200006d0 	.word	0x200006d0
 8000ae4:	200006d6 	.word	0x200006d6
 8000ae8:	200006dc 	.word	0x200006dc
 8000aec:	200006e2 	.word	0x200006e2
 8000af0:	0800ad84 	.word	0x0800ad84
 8000af4:	2000017c 	.word	0x2000017c

08000af8 <sysValinit>:


// user custom functions

// init startup value at boot
void sysValinit(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <sysValinit+0x3c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	801a      	strh	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <sysValinit+0x3c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	805a      	strh	r2, [r3, #2]
	sysCounter.prev_ERRORtime = 0;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <sysValinit+0x3c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	809a      	strh	r2, [r3, #4]
	sysCounter.rebootCount = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <sysValinit+0x3c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	721a      	strb	r2, [r3, #8]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <sysValinit+0x3c>)
 8000b16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b1a:	815a      	strh	r2, [r3, #10]

	sysFlag.LTE_CMD_Send = 0;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <sysValinit+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_ERROR = 0;
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <sysValinit+0x40>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	705a      	strb	r2, [r3, #1]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000698 	.word	0x20000698
 8000b38:	200006a4 	.word	0x200006a4

08000b3c <sensorValInit>:


// init sensor variable handle
// set/clear buffer array
void sensorValInit(void) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	SENSOR.dateStamp[0] = '\0';
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <sensorValInit+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
	SENSOR.dateStamp[0] = '\0';
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <sensorValInit+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
	SENSOR.X[0] = '\0';
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <sensorValInit+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	741a      	strb	r2, [r3, #16]
	SENSOR.Y[0] = '\0';
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <sensorValInit+0x54>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	759a      	strb	r2, [r3, #22]
	SENSOR.Z[0] = '\0';
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <sensorValInit+0x54>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	771a      	strb	r2, [r3, #28]
	SENSOR.Huim[0] = '\0';
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <sensorValInit+0x54>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	SENSOR.Temp[0] = '\0';
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <sensorValInit+0x54>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SENSOR.Alc[0] = '\0';
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <sensorValInit+0x54>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	SENSOR.Carbon[0] = '\0';
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <sensorValInit+0x54>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	SENSOR.AirFlow[0] = '\0';
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <sensorValInit+0x54>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	200006a8 	.word	0x200006a8

08000b94 <SerialDebug>:


// Send text via USB VCOM port
void SerialDebug(char *msgDebug) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	while(CDC_Transmit_FS((uint8_t *) msgDebug, strlen(msgDebug)) != USBD_OK);
 8000b9c:	bf00      	nop
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fb1e 	bl	80001e0 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f008 feb4 	bl	8009918 <CDC_Transmit_FS>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f3      	bne.n	8000b9e <SerialDebug+0xa>
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SendCMD_LTE>:
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 10);
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOA, RS485_TxMode, GPIO_PIN_RESET);
}

void SendCMD_LTE(char *msg) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 10);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fb09 	bl	80001e0 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <SendCMD_LTE+0x24>)
 8000bd8:	f003 ffe3 	bl	8004ba2 <HAL_UART_Transmit>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000594 	.word	0x20000594

08000be8 <HAL_UARTEx_RxEventCallback>:


// UART1/UART2 Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d11c      	bne.n	8000c38 <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	4921      	ldr	r1, [pc, #132]	; (8000c88 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c02:	4822      	ldr	r0, [pc, #136]	; (8000c8c <HAL_UARTEx_RxEventCallback+0xa4>)
 8000c04:	f004 f85f 	bl	8004cc6 <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4820      	ldr	r0, [pc, #128]	; (8000c90 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000c0e:	f009 fb0d 	bl	800a22c <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	461a      	mov	r2, r3
 8000c16:	491c      	ldr	r1, [pc, #112]	; (8000c88 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c18:	481d      	ldr	r0, [pc, #116]	; (8000c90 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000c1a:	f009 faf9 	bl	800a210 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	2100      	movs	r1, #0
 8000c22:	4819      	ldr	r0, [pc, #100]	; (8000c88 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c24:	f009 fb02 	bl	800a22c <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_UARTEx_RxEventCallback+0xac>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_UARTEx_RxEventCallback+0xac>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0208 	bic.w	r2, r2, #8
 8000c36:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d11c      	bne.n	8000c7c <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	4915      	ldr	r1, [pc, #84]	; (8000c9c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000c46:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000c48:	f004 f83d 	bl	8004cc6 <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8000c52:	f009 faeb 	bl	800a22c <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4910      	ldr	r1, [pc, #64]	; (8000c9c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8000c5e:	f009 fad7 	bl	800a210 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	2100      	movs	r1, #0
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000c68:	f009 fae0 	bl	800a22c <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0208 	bic.w	r2, r2, #8
 8000c7a:	601a      	str	r2, [r3, #0]
	}
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40004400 	.word	0x40004400
 8000c88:	20000280 	.word	0x20000280
 8000c8c:	20000594 	.word	0x20000594
 8000c90:	20000400 	.word	0x20000400
 8000c94:	20000638 	.word	0x20000638
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	20000200 	.word	0x20000200
 8000ca0:	20000550 	.word	0x20000550
 8000ca4:	20000380 	.word	0x20000380
 8000ca8:	200005d8 	.word	0x200005d8

08000cac <findTarget>:


// find target in string
int findTarget(const char *inStr, const char *target) {
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    int i, j;
    for (i = 0; inStr[i] != '\0'; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e023      	b.n	8000d04 <findTarget+0x58>
        j = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8000cc0:	e002      	b.n	8000cc8 <findTarget+0x1c>
            j++;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00c      	beq.n	8000cee <findTarget+0x42>
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	4413      	add	r3, r2
 8000cda:	461a      	mov	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4413      	add	r3, r2
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	6839      	ldr	r1, [r7, #0]
 8000ce6:	440b      	add	r3, r1
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d0e9      	beq.n	8000cc2 <findTarget+0x16>
        }
        if (target[j] == '\0') {
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <findTarget+0x52>
            return 1; // Return 1 if found
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e009      	b.n	8000d12 <findTarget+0x66>
    for (i = 0; inStr[i] != '\0'; i++) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1d5      	bne.n	8000cbc <findTarget+0x10>
        }
    }
    return 0; // Return 0 if not found
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <HAL_TIM_PeriodElapsedCallback>:


// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d105      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x1e>
		sysCounter.main_ms_counter++;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d3c:	801a      	strh	r2, [r3, #0]
	}
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40000800 	.word	0x40000800
 8000d50:	20000698 	.word	0x20000698

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b094      	sub	sp, #80	; 0x50
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0320 	add.w	r3, r7, #32
 8000d5e:	2230      	movs	r2, #48	; 0x30
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f009 fa62 	bl	800a22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <SystemClock_Config+0xc8>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a26      	ldr	r2, [pc, #152]	; (8000e1c <SystemClock_Config+0xc8>)
 8000d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <SystemClock_Config+0xc8>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <SystemClock_Config+0xcc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <SystemClock_Config+0xcc>)
 8000d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <SystemClock_Config+0xcc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dc4:	2319      	movs	r3, #25
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000dc8:	2390      	movs	r3, #144	; 0x90
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fdf7 	bl	80039cc <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000de4:	f000 f960 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
 8000dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	2302      	movs	r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2102      	movs	r1, #2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 f859 	bl	8003ebc <HAL_RCC_ClockConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e10:	f000 f94a 	bl	80010a8 <Error_Handler>
  }
}
 8000e14:	bf00      	nop
 8000e16:	3750      	adds	r7, #80	; 0x50
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000e42:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <MX_TIM4_Init+0x98>)
 8000e44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000e48:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000e4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e66:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000e68:	f003 fa08 	bl	800427c <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e72:	f000 f919 	bl	80010a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000e84:	f003 fbb4 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 f90b 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_TIM4_Init+0x94>)
 8000ea0:	f003 fdb0 	bl	8004a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000eaa:	f000 f8fd 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000508 	.word	0x20000508
 8000ebc:	40000800 	.word	0x40000800

08000ec0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_USART1_UART_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ecc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ed0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ef8:	f003 fe06 	bl	8004b08 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f02:	f000 f8d1 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000550 	.word	0x20000550
 8000f10:	40011000 	.word	0x40011000

08000f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_USART2_UART_Init+0x50>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	f003 fddc 	bl	8004b08 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f56:	f000 f8a7 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000594 	.word	0x20000594
 8000f64:	40004400 	.word	0x40004400

08000f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_DMA_Init+0x68>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <MX_DMA_Init+0x68>)
 8000f78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_DMA_Init+0x68>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_DMA_Init+0x68>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <MX_DMA_Init+0x68>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <MX_DMA_Init+0x68>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2010      	movs	r0, #16
 8000fac:	f000 fcbb 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f000 fcd4 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	203a      	movs	r0, #58	; 0x3a
 8000fbc:	f000 fcb3 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fc0:	203a      	movs	r0, #58	; 0x3a
 8000fc2:	f000 fccc 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MX_GPIO_Init+0xc8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a2a      	ldr	r2, [pc, #168]	; (800109c <MX_GPIO_Init+0xc8>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_GPIO_Init+0xc8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_GPIO_Init+0xc8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a23      	ldr	r2, [pc, #140]	; (800109c <MX_GPIO_Init+0xc8>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_GPIO_Init+0xc8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_GPIO_Init+0xc8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <MX_GPIO_Init+0xc8>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_GPIO_Init+0xc8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800103e:	2200      	movs	r2, #0
 8001040:	f240 21e2 	movw	r1, #738	; 0x2e2
 8001044:	4816      	ldr	r0, [pc, #88]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8001046:	f001 fa2b 	bl	80024a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001052:	f001 fa25 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB5 PB6 PB7
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001056:	f240 23e2 	movw	r3, #738	; 0x2e2
 800105a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_GPIO_Init+0xcc>)
 8001070:	f001 f892 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_GPIO_Init+0xd0>)
 800108e:	f001 f883 	bl	8002198 <HAL_GPIO_Init>

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020000 	.word	0x40020000

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>

080010b2 <Delimiter>:
////            *(dataOutput+writerPos) = '\0';
////        }
//    }
//}

void Delimiter(char *inputData, const char delims, int index, unsigned int maxIndexSize, unsigned char *dataOutput){
 80010b2:	b480      	push	{r7}
 80010b4:	b08b      	sub	sp, #44	; 0x2c
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	460b      	mov	r3, r1
 80010c0:	72fb      	strb	r3, [r7, #11]
    // Parsed string(char array) to split value by demiliter and output value
    // Argument: ( input data , delimiter/splitter letter , no of extract data , max array size, array to store result)
    unsigned int found = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int strIndex[2] = {0};
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
    unsigned int readerPos = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
    unsigned int loaderPos = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    unsigned int writerPos = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]

    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	e01c      	b.n	800111c <Delimiter+0x6a>

        if(*(inputData+readerPos) == delims || readerPos == maxIndexSize){
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	7afa      	ldrb	r2, [r7, #11]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d003      	beq.n	80010f8 <Delimiter+0x46>
 80010f0:	6a3a      	ldr	r2, [r7, #32]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d10e      	bne.n	8001116 <Delimiter+0x64>
            found++;
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	3301      	adds	r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
            strIndex[0] = strIndex[1]+1;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
            strIndex[1] = (readerPos == maxIndexSize) ? readerPos + 1 : readerPos;
 8001104:	6a3a      	ldr	r2, [r7, #32]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d102      	bne.n	8001112 <Delimiter+0x60>
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	3301      	adds	r3, #1
 8001110:	e000      	b.n	8001114 <Delimiter+0x62>
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	617b      	str	r3, [r7, #20]
    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	3301      	adds	r3, #1
 800111a:	623b      	str	r3, [r7, #32]
 800111c:	6a3a      	ldr	r2, [r7, #32]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d203      	bcs.n	800112c <Delimiter+0x7a>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001128:	429a      	cmp	r2, r3
 800112a:	d9da      	bls.n	80010e2 <Delimiter+0x30>
        }
    }

    if(found > index){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001130:	429a      	cmp	r2, r3
 8001132:	d91c      	bls.n	800116e <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	e015      	b.n	8001166 <Delimiter+0xb4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	441a      	add	r2, r3
 8001140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	440b      	add	r3, r1
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	701a      	strb	r2, [r3, #0]
           writerPos++;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	3301      	adds	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
           if((loaderPos > maxIndexSize)||(writerPos > maxIndexSize)){
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d80a      	bhi.n	800116e <Delimiter+0xbc>
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d806      	bhi.n	800116e <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	3301      	adds	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3e5      	bcc.n	800113a <Delimiter+0x88>
// to next people if you need to fix it let's do it and thank you (>w<)
//
// Modify by REDWOLF DiGiTAL
// (yep... I'm ignore code performance because I'm not time ;w;)

    if(index == 0) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d11c      	bne.n	80011ae <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	e015      	b.n	80011a6 <Delimiter+0xf4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	441a      	add	r2, r3
 8001180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	440b      	add	r3, r1
 8001186:	7812      	ldrb	r2, [r2, #0]
 8001188:	701a      	strb	r2, [r3, #0]
           writerPos++;
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	3301      	adds	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]

           if((loaderPos > strIndex[0])||(writerPos > strIndex[0])){
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	d80a      	bhi.n	80011ae <Delimiter+0xfc>
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	429a      	cmp	r2, r3
 800119e:	d806      	bhi.n	80011ae <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3301      	adds	r3, #1
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3e5      	bcc.n	800117a <Delimiter+0xc8>
               break;
           }
        }
    }

    if(index >= found) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d825      	bhi.n	8001202 <Delimiter+0x150>
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	e01b      	b.n	80011f6 <Delimiter+0x144>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	441a      	add	r2, r3
 80011c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	440b      	add	r3, r1
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	701a      	strb	r2, [r3, #0]

           if(*(inputData+loaderPos) == '\0' || (loaderPos >= maxIndexSize) || writerPos >= maxIndexSize) {
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d013      	beq.n	8001202 <Delimiter+0x150>
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d20f      	bcs.n	8001202 <Delimiter+0x150>
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d20b      	bcs.n	8001202 <Delimiter+0x150>
               break;
           }

           writerPos++;
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	3301      	adds	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1dd      	bne.n	80011be <Delimiter+0x10c>
        }
    }
}
 8001202:	bf00      	nop
 8001204:	372c      	adds	r7, #44	; 0x2c
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <HAL_MspInit+0x4c>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x4c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_TIM_Base_MspInit+0x48>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d115      	bne.n	800129e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_TIM_Base_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <HAL_TIM_Base_MspInit+0x4c>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_TIM_Base_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	201e      	movs	r0, #30
 8001294:	f000 fb47 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001298:	201e      	movs	r0, #30
 800129a:	f000 fb60 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40000800 	.word	0x40000800
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a69      	ldr	r2, [pc, #420]	; (8001474 <HAL_UART_MspInit+0x1c4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d164      	bne.n	800139c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a67      	ldr	r2, [pc, #412]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b61      	ldr	r3, [pc, #388]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a60      	ldr	r2, [pc, #384]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800130a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800131c:	2307      	movs	r3, #7
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4855      	ldr	r0, [pc, #340]	; (800147c <HAL_UART_MspInit+0x1cc>)
 8001328:	f000 ff36 	bl	8002198 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800132c:	4b54      	ldr	r3, [pc, #336]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 800132e:	4a55      	ldr	r2, [pc, #340]	; (8001484 <HAL_UART_MspInit+0x1d4>)
 8001330:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001334:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001338:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b4e      	ldr	r3, [pc, #312]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134e:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001354:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001366:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001368:	4b45      	ldr	r3, [pc, #276]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800136e:	4844      	ldr	r0, [pc, #272]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001370:	f000 fb10 	bl	8001994 <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800137a:	f7ff fe95 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a3f      	ldr	r2, [pc, #252]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001382:	639a      	str	r2, [r3, #56]	; 0x38
 8001384:	4a3e      	ldr	r2, [pc, #248]	; (8001480 <HAL_UART_MspInit+0x1d0>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2025      	movs	r0, #37	; 0x25
 8001390:	f000 fac9 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001394:	2025      	movs	r0, #37	; 0x25
 8001396:	f000 fae2 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800139a:	e066      	b.n	800146a <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a39      	ldr	r2, [pc, #228]	; (8001488 <HAL_UART_MspInit+0x1d8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d161      	bne.n	800146a <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a2b      	ldr	r2, [pc, #172]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_UART_MspInit+0x1c8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013de:	230c      	movs	r3, #12
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ee:	2307      	movs	r3, #7
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4820      	ldr	r0, [pc, #128]	; (800147c <HAL_UART_MspInit+0x1cc>)
 80013fa:	f000 fecd 	bl	8002198 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001400:	4a23      	ldr	r2, [pc, #140]	; (8001490 <HAL_UART_MspInit+0x1e0>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800140a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <HAL_UART_MspInit+0x1dc>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_UART_MspInit+0x1dc>)
 800141a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_UART_MspInit+0x1dc>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_UART_MspInit+0x1dc>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800143e:	4813      	ldr	r0, [pc, #76]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001440:	f000 faa8 	bl	8001994 <HAL_DMA_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800144a:	f7ff fe2d 	bl	80010a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001452:	639a      	str	r2, [r3, #56]	; 0x38
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <HAL_UART_MspInit+0x1dc>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2026      	movs	r0, #38	; 0x26
 8001460:	f000 fa61 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001464:	2026      	movs	r0, #38	; 0x26
 8001466:	f000 fa7a 	bl	800195e <HAL_NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40011000 	.word	0x40011000
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000
 8001480:	200005d8 	.word	0x200005d8
 8001484:	40026440 	.word	0x40026440
 8001488:	40004400 	.word	0x40004400
 800148c:	20000638 	.word	0x20000638
 8001490:	40026088 	.word	0x40026088

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <NMI_Handler+0x4>

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e0:	f000 f902 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA1_Stream5_IRQHandler+0x10>)
 80014ee:	f000 fbe9 	bl	8001cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000638 	.word	0x20000638

080014fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <TIM4_IRQHandler+0x10>)
 8001502:	f002 ff6d 	bl	80043e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000508 	.word	0x20000508

08001510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <USART1_IRQHandler+0x10>)
 8001516:	f003 fc3b 	bl	8004d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000550 	.word	0x20000550

08001524 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <USART2_IRQHandler+0x10>)
 800152a:	f003 fc31 	bl	8004d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000594 	.word	0x20000594

08001538 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA2_Stream2_IRQHandler+0x10>)
 800153e:	f000 fbc1 	bl	8001cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200005d8 	.word	0x200005d8

0800154c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <OTG_FS_IRQHandler+0x10>)
 8001552:	f001 f90e 	bl	8002772 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20001bd0 	.word	0x20001bd0

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f008 fe14 	bl	800a1bc <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	220c      	movs	r2, #12
 8001598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <_sbrk+0x64>)
 80015b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20020000 	.word	0x20020000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	200006e8 	.word	0x200006e8
 80015c8:	20002310 	.word	0x20002310

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800160c:	4c0b      	ldr	r4, [pc, #44]	; (800163c <LoopFillZerobss+0x26>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161a:	f7ff ffd7 	bl	80015cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f008 fdd3 	bl	800a1c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff f931 	bl	8000888 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001634:	0800ae44 	.word	0x0800ae44
  ldr r2, =_sbss
 8001638:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800163c:	2000230c 	.word	0x2000230c

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f94f 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fdca 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f967 	bl	800197a <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f92f 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	200006ec 	.word	0x200006ec

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200006ec 	.word	0x200006ec

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <__NVIC_SetPriorityGrouping>:
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff3e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff31 	bl	80017d4 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff feb6 	bl	8001710 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e099      	b.n	8001ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d0:	e00f      	b.n	80019f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d2:	f7ff fe9d 	bl	8001710 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d908      	bls.n	80019f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2203      	movs	r2, #3
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e078      	b.n	8001ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e8      	bne.n	80019d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_DMA_Init+0x158>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d107      	bne.n	8001a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4313      	orrs	r3, r2
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f023 0307 	bic.w	r3, r3, #7
 8001a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d117      	bne.n	8001ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00e      	beq.n	8001ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fb01 	bl	80020a0 <DMA_CheckFifoParam>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e016      	b.n	8001ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fab8 	bl	8002034 <DMA_CalcBaseAndBitshift>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	223f      	movs	r2, #63	; 0x3f
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	f010803f 	.word	0xf010803f

08001af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_DMA_Start_IT+0x26>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e040      	b.n	8001b98 <HAL_DMA_Start_IT+0xa8>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d12f      	bne.n	8001b8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 fa4a 	bl	8001fd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0216 	orr.w	r2, r2, #22
 8001b5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0208 	orr.w	r2, r2, #8
 8001b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e005      	b.n	8001b96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b92:	2302      	movs	r3, #2
 8001b94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bae:	f7ff fdaf 	bl	8001710 <HAL_GetTick>
 8001bb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d008      	beq.n	8001bd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e052      	b.n	8001c78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0216 	bic.w	r2, r2, #22
 8001be0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_DMA_Abort+0x62>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0208 	bic.w	r2, r2, #8
 8001c10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c22:	e013      	b.n	8001c4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c24:	f7ff fd74 	bl	8001710 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d90c      	bls.n	8001c4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2220      	movs	r2, #32
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e015      	b.n	8001c78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e4      	bne.n	8001c24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	223f      	movs	r2, #63	; 0x3f
 8001c60:	409a      	lsls	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d004      	beq.n	8001c9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00c      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2205      	movs	r2, #5
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd0:	4b8e      	ldr	r3, [pc, #568]	; (8001f0c <HAL_DMA_IRQHandler+0x248>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a8e      	ldr	r2, [pc, #568]	; (8001f10 <HAL_DMA_IRQHandler+0x24c>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0a9b      	lsrs	r3, r3, #10
 8001cdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2208      	movs	r2, #8
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01a      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0204 	bic.w	r2, r2, #4
 8001d16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2201      	movs	r2, #1
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d012      	beq.n	8001d66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2201      	movs	r2, #1
 8001d54:	409a      	lsls	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d012      	beq.n	8001d9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00b      	beq.n	8001d9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	2204      	movs	r2, #4
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	f043 0204 	orr.w	r2, r3, #4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	2210      	movs	r2, #16
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d043      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03c      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d018      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d108      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d024      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
 8001df2:	e01f      	b.n	8001e34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e016      	b.n	8001e34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0208 	bic.w	r2, r2, #8
 8001e22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2220      	movs	r2, #32
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 808f 	beq.w	8001f64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8087 	beq.w	8001f64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b05      	cmp	r3, #5
 8001e6c:	d136      	bne.n	8001edc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0216 	bic.w	r2, r2, #22
 8001e7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_DMA_IRQHandler+0x1da>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0208 	bic.w	r2, r2, #8
 8001eac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	223f      	movs	r2, #63	; 0x3f
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d07e      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
        }
        return;
 8001eda:	e079      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01d      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10d      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d031      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
 8001f08:	e02c      	b.n	8001f64 <HAL_DMA_IRQHandler+0x2a0>
 8001f0a:	bf00      	nop
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d023      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e01e      	b.n	8001f64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10f      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0210 	bic.w	r2, r2, #16
 8001f42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d032      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d022      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2205      	movs	r2, #5
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	3301      	adds	r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d307      	bcc.n	8001fac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f2      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x2cc>
 8001faa:	e000      	b.n	8001fae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	4798      	blx	r3
 8001fce:	e000      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fd0:	bf00      	nop
    }
  }
}
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b40      	cmp	r3, #64	; 0x40
 8002004:	d108      	bne.n	8002018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002016:	e007      	b.n	8002028 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3b10      	subs	r3, #16
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <DMA_CalcBaseAndBitshift+0x64>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <DMA_CalcBaseAndBitshift+0x68>)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d909      	bls.n	8002076 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	1d1a      	adds	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	659a      	str	r2, [r3, #88]	; 0x58
 8002074:	e007      	b.n	8002086 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	aaaaaaab 	.word	0xaaaaaaab
 800209c:	0800adf8 	.word	0x0800adf8

080020a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d11f      	bne.n	80020fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d856      	bhi.n	800216e <DMA_CheckFifoParam+0xce>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <DMA_CheckFifoParam+0x28>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020eb 	.word	0x080020eb
 80020d0:	080020d9 	.word	0x080020d9
 80020d4:	0800216f 	.word	0x0800216f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d046      	beq.n	8002172 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e8:	e043      	b.n	8002172 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f2:	d140      	bne.n	8002176 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f8:	e03d      	b.n	8002176 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002102:	d121      	bne.n	8002148 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d837      	bhi.n	800217a <DMA_CheckFifoParam+0xda>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <DMA_CheckFifoParam+0x70>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002121 	.word	0x08002121
 8002114:	08002127 	.word	0x08002127
 8002118:	08002121 	.word	0x08002121
 800211c:	08002139 	.word	0x08002139
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      break;
 8002124:	e030      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d025      	beq.n	800217e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002136:	e022      	b.n	800217e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002140:	d11f      	bne.n	8002182 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002146:	e01c      	b.n	8002182 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d903      	bls.n	8002156 <DMA_CheckFifoParam+0xb6>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d003      	beq.n	800215c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002154:	e018      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      break;
 800215a:	e015      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00e      	beq.n	8002186 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      break;
 800216c:	e00b      	b.n	8002186 <DMA_CheckFifoParam+0xe6>
      break;
 800216e:	bf00      	nop
 8002170:	e00a      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 8002172:	bf00      	nop
 8002174:	e008      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
 8002178:	e006      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e004      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e002      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;   
 8002182:	bf00      	nop
 8002184:	e000      	b.n	8002188 <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
    }
  } 
  
  return status; 
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	e159      	b.n	8002468 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f040 8148 	bne.w	8002462 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d005      	beq.n	80021ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d130      	bne.n	800224c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d017      	beq.n	8002288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d123      	bne.n	80022dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a2 	beq.w	8002462 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_GPIO_Init+0x2e8>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a56      	ldr	r2, [pc, #344]	; (8002480 <HAL_GPIO_Init+0x2e8>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <HAL_GPIO_Init+0x2e8>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233a:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_GPIO_Init+0x2ec>)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a49      	ldr	r2, [pc, #292]	; (8002488 <HAL_GPIO_Init+0x2f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x202>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a48      	ldr	r2, [pc, #288]	; (800248c <HAL_GPIO_Init+0x2f4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x1fe>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a47      	ldr	r2, [pc, #284]	; (8002490 <HAL_GPIO_Init+0x2f8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x1fa>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a46      	ldr	r2, [pc, #280]	; (8002494 <HAL_GPIO_Init+0x2fc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x1f6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a45      	ldr	r2, [pc, #276]	; (8002498 <HAL_GPIO_Init+0x300>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x1f2>
 8002386:	2304      	movs	r3, #4
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x204>
 800238a:	2307      	movs	r3, #7
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x204>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x204>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x204>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x204>
 800239a:	2300      	movs	r3, #0
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ac:	4935      	ldr	r1, [pc, #212]	; (8002484 <HAL_GPIO_Init+0x2ec>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <HAL_GPIO_Init+0x304>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023de:	4a2f      	ldr	r2, [pc, #188]	; (800249c <HAL_GPIO_Init+0x304>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e4:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_GPIO_Init+0x304>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002408:	4a24      	ldr	r2, [pc, #144]	; (800249c <HAL_GPIO_Init+0x304>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240e:	4b23      	ldr	r3, [pc, #140]	; (800249c <HAL_GPIO_Init+0x304>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002432:	4a1a      	ldr	r2, [pc, #104]	; (800249c <HAL_GPIO_Init+0x304>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_GPIO_Init+0x304>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <HAL_GPIO_Init+0x304>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	f67f aea2 	bls.w	80021b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40013800 	.word	0x40013800
 8002488:	40020000 	.word	0x40020000
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024bc:	e003      	b.n	80024c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	041a      	lsls	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d4:	b08f      	sub	sp, #60	; 0x3c
 80024d6:	af0a      	add	r7, sp, #40	; 0x28
 80024d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e10f      	b.n	8002704 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f007 fb52 	bl	8009ba8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fe39 	bl	800619a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	687e      	ldr	r6, [r7, #4]
 8002530:	466d      	mov	r5, sp
 8002532:	f106 0410 	add.w	r4, r6, #16
 8002536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002542:	e885 0003 	stmia.w	r5, {r0, r1}
 8002546:	1d33      	adds	r3, r6, #4
 8002548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	f003 fd10 	bl	8005f70 <USB_CoreInit>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0d0      	b.n	8002704 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fe27 	bl	80061bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e04a      	b.n	800260a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	333d      	adds	r3, #61	; 0x3d
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	333c      	adds	r3, #60	; 0x3c
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	b298      	uxth	r0, r3
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3344      	adds	r3, #68	; 0x44
 80025b0:	4602      	mov	r2, r0
 80025b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3340      	adds	r3, #64	; 0x40
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	3348      	adds	r3, #72	; 0x48
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	334c      	adds	r3, #76	; 0x4c
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3354      	adds	r3, #84	; 0x54
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	3301      	adds	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	d3af      	bcc.n	8002574 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e044      	b.n	80026a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	3301      	adds	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d3b5      	bcc.n	800261a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	687e      	ldr	r6, [r7, #4]
 80026b6:	466d      	mov	r5, sp
 80026b8:	f106 0410 	add.w	r4, r6, #16
 80026bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026cc:	1d33      	adds	r3, r6, #4
 80026ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	f003 fdbf 	bl	8006254 <USB_DevInit>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e00d      	b.n	8002704 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 ff0e 	bl	800751e <USB_DevDisconnect>

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800270c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_PCD_Start+0x1c>
 8002724:	2302      	movs	r3, #2
 8002726:	e020      	b.n	800276a <HAL_PCD_Start+0x5e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	2b01      	cmp	r3, #1
 8002736:	d109      	bne.n	800274c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800273c:	2b01      	cmp	r3, #1
 800273e:	d005      	beq.n	800274c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fd11 	bl	8006178 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f004 febe 	bl	80074dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002772:	b590      	push	{r4, r7, lr}
 8002774:	b08d      	sub	sp, #52	; 0x34
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f004 ff7c 	bl	8007686 <USB_GetMode>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	f040 848a 	bne.w	80030aa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f004 fee0 	bl	8007560 <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8480 	beq.w	80030a8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fecd 	bl	8007560 <USB_ReadInterrupts>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d107      	bne.n	80027e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f002 0202 	and.w	r2, r2, #2
 80027de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 febb 	bl	8007560 <USB_ReadInterrupts>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d161      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0210 	bic.w	r2, r2, #16
 8002802:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	3304      	adds	r3, #4
 8002822:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	0c5b      	lsrs	r3, r3, #17
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2b02      	cmp	r3, #2
 800282e:	d124      	bne.n	800287a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d035      	beq.n	80028a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	6a38      	ldr	r0, [r7, #32]
 8002850:	f004 fcf2 	bl	8007238 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002860:	441a      	add	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002872:	441a      	add	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	621a      	str	r2, [r3, #32]
 8002878:	e016      	b.n	80028a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	0c5b      	lsrs	r3, r3, #17
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	2b06      	cmp	r3, #6
 8002884:	d110      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800288c:	2208      	movs	r2, #8
 800288e:	4619      	mov	r1, r3
 8002890:	6a38      	ldr	r0, [r7, #32]
 8002892:	f004 fcd1 	bl	8007238 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	6a1a      	ldr	r2, [r3, #32]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a2:	441a      	add	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0210 	orr.w	r2, r2, #16
 80028b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f004 fe4f 	bl	8007560 <USB_ReadInterrupts>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028cc:	f040 80a7 	bne.w	8002a1e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 fe54 	bl	8007586 <USB_ReadDevAllOutEpInterrupt>
 80028de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028e0:	e099      	b.n	8002a16 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 808e 	beq.w	8002a0a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fe78 	bl	80075ee <USB_ReadDevOutEPInterrupt>
 80028fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	2301      	movs	r3, #1
 800291a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800291c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fec2 	bl	80036a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	461a      	mov	r2, r3
 800293c:	2308      	movs	r3, #8
 800293e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 ff98 	bl	8003878 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295e:	461a      	mov	r2, r3
 8002960:	2310      	movs	r3, #16
 8002962:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d030      	beq.n	80029d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	2b80      	cmp	r3, #128	; 0x80
 8002978:	d109      	bne.n	800298e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	78db      	ldrb	r3, [r3, #3]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d108      	bne.n	80029be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2200      	movs	r2, #0
 80029b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f007 f9f1 	bl	8009da0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ca:	461a      	mov	r2, r3
 80029cc:	2302      	movs	r3, #2
 80029ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e6:	461a      	mov	r2, r3
 80029e8:	2320      	movs	r3, #32
 80029ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a02:	461a      	mov	r2, r3
 8002a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f af62 	bne.w	80028e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fd9c 	bl	8007560 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a32:	f040 80db 	bne.w	8002bec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fdbd 	bl	80075ba <USB_ReadDevAllInEpInterrupt>
 8002a40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a46:	e0cd      	b.n	8002be4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80c2 	beq.w	8002bd8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fde3 	bl	800762a <USB_ReadDevInEPInterrupt>
 8002a64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d057      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	2201      	movs	r2, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69f9      	ldr	r1, [r7, #28]
 8002a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a90:	4013      	ands	r3, r2
 8002a92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d132      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	334c      	adds	r3, #76	; 0x4c
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4403      	add	r3, r0
 8002ace:	3348      	adds	r3, #72	; 0x48
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4419      	add	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4403      	add	r3, r0
 8002ae2:	334c      	adds	r3, #76	; 0x4c
 8002ae4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d113      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x3a2>
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3354      	adds	r3, #84	; 0x54
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d108      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f004 fdea 	bl	80076e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f007 f8c5 	bl	8009caa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b36:	461a      	mov	r2, r3
 8002b38:	2308      	movs	r3, #8
 8002b3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b52:	461a      	mov	r2, r3
 8002b54:	2310      	movs	r3, #16
 8002b56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2340      	movs	r3, #64	; 0x40
 8002b72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d023      	beq.n	8002bc6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b80:	6a38      	ldr	r0, [r7, #32]
 8002b82:	f003 fccb 	bl	800651c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	3338      	adds	r3, #56	; 0x38
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	78db      	ldrb	r3, [r3, #3]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d108      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f007 f908 	bl	8009dc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fcdb 	bl	800358e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	3301      	adds	r3, #1
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f47f af2e 	bne.w	8002a48 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fcb5 	bl	8007560 <USB_ReadInterrupts>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c00:	d122      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d108      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fec2 	bl	80039b4 <HAL_PCDEx_LPM_Callback>
 8002c30:	e002      	b.n	8002c38 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f007 f8a6 	bl	8009d84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f004 fc87 	bl	8007560 <USB_ReadInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5c:	d112      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d102      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f007 f862 	bl	8009d38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c82:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 fc69 	bl	8007560 <USB_ReadInterrupts>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c98:	f040 80b7 	bne.w	8002e0a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2110      	movs	r1, #16
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fc30 	bl	800651c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc0:	e046      	b.n	8002d50 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cd4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d02:	461a      	mov	r2, r3
 8002d04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d08:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3a:	0151      	lsls	r1, r2, #5
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	440a      	add	r2, r1
 8002d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3b3      	bcc.n	8002cc2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d86:	f043 030b 	orr.w	r3, r3, #11
 8002d8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9c:	f043 030b 	orr.w	r3, r3, #11
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	e015      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002db6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002dba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f043 030b 	orr.w	r3, r3, #11
 8002dce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002de2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002df4:	461a      	mov	r2, r3
 8002df6:	f004 fc77 	bl	80076e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 fba6 	bl	8007560 <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	d124      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 fc3c 	bl	80076a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fbf1 	bl	8006616 <USB_GetDevSpeed>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681c      	ldr	r4, [r3, #0]
 8002e40:	f001 f9e8 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8002e44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f003 f8f0 	bl	8006034 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f006 ff50 	bl	8009cfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fb76 	bl	8007560 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d10a      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f006 ff2d 	bl	8009cde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f002 0208 	and.w	r2, r2, #8
 8002e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 fb61 	bl	8007560 <USB_ReadInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d122      	bne.n	8002eee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb8:	e014      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fb27 	bl	800352c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3e5      	bcc.n	8002eba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fb34 	bl	8007560 <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f02:	d13b      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f04:	2301      	movs	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
 8002f08:	e02b      	b.n	8002f62 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3340      	adds	r3, #64	; 0x40
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d115      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da12      	bge.n	8002f5c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	333f      	adds	r3, #63	; 0x3f
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fae8 	bl	800352c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	3301      	adds	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d3ce      	bcc.n	8002f0a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 faed 	bl	8007560 <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f90:	d155      	bne.n	800303e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f92:	2301      	movs	r3, #1
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
 8002f96:	e045      	b.n	8003024 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d12e      	bne.n	800301e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fc0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da2b      	bge.n	800301e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002fd2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d121      	bne.n	800301e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301a:	6053      	str	r3, [r2, #4]
            break;
 800301c:	e007      	b.n	800302e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	3301      	adds	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302a:	429a      	cmp	r2, r3
 800302c:	d3b4      	bcc.n	8002f98 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800303c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f004 fa8c 	bl	8007560 <USB_ReadInterrupts>
 8003048:	4603      	mov	r3, r0
 800304a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003052:	d10a      	bne.n	800306a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f006 fec7 	bl	8009de8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fa76 	bl	8007560 <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d115      	bne.n	80030aa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f006 feb7 	bl	8009e04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	e000      	b.n	80030aa <HAL_PCD_IRQHandler+0x938>
      return;
 80030a8:	bf00      	nop
    }
  }
}
 80030aa:	3734      	adds	r7, #52	; 0x34
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd90      	pop	{r4, r7, pc}

080030b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_PCD_SetAddress+0x1a>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e013      	b.n	80030f2 <HAL_PCD_SetAddress+0x42>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f004 f9d4 	bl	8007490 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	4608      	mov	r0, r1
 8003104:	4611      	mov	r1, r2
 8003106:	461a      	mov	r2, r3
 8003108:	4603      	mov	r3, r0
 800310a:	70fb      	strb	r3, [r7, #3]
 800310c:	460b      	mov	r3, r1
 800310e:	803b      	strh	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800311c:	2b00      	cmp	r3, #0
 800311e:	da0f      	bge.n	8003140 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	3338      	adds	r3, #56	; 0x38
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	705a      	strb	r2, [r3, #1]
 800313e:	e00f      	b.n	8003160 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 020f 	and.w	r2, r3, #15
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800316c:	883a      	ldrh	r2, [r7, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	78ba      	ldrb	r2, [r7, #2]
 8003176:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800318a:	78bb      	ldrb	r3, [r7, #2]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d102      	bne.n	8003196 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_PCD_EP_Open+0xaa>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e00e      	b.n	80031c2 <HAL_PCD_EP_Open+0xc8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fa54 	bl	8006660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80031c0:	7afb      	ldrb	r3, [r7, #11]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da0f      	bge.n	80031fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3338      	adds	r3, #56	; 0x38
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	705a      	strb	r2, [r3, #1]
 80031fc:	e00f      	b.n	800321e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_PCD_EP_Close+0x6e>
 8003234:	2302      	movs	r3, #2
 8003236:	e00e      	b.n	8003256 <HAL_PCD_EP_Close+0x8c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68f9      	ldr	r1, [r7, #12]
 8003246:	4618      	mov	r0, r3
 8003248:	f003 fa92 	bl	8006770 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	460b      	mov	r3, r1
 800326c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326e:	7afb      	ldrb	r3, [r7, #11]
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	3304      	adds	r3, #4
 8003286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2200      	movs	r2, #0
 8003298:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	6979      	ldr	r1, [r7, #20]
 80032d2:	f003 fd71 	bl	8006db8 <USB_EP0StartXfer>
 80032d6:	e008      	b.n	80032ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	6979      	ldr	r1, [r7, #20]
 80032e6:	f003 fb1f 	bl	8006928 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	460b      	mov	r3, r1
 8003332:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003334:	7afb      	ldrb	r3, [r7, #11]
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	3338      	adds	r3, #56	; 0x38
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	3304      	adds	r3, #4
 800334a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2200      	movs	r2, #0
 800335c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2201      	movs	r2, #1
 8003362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	b2da      	uxtb	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d102      	bne.n	800337e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800337e:	7afb      	ldrb	r3, [r7, #11]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	f003 fd0f 	bl	8006db8 <USB_EP0StartXfer>
 800339a:	e008      	b.n	80033ae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	6979      	ldr	r1, [r7, #20]
 80033aa:	f003 fabd 	bl	8006928 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d901      	bls.n	80033d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e050      	b.n	8003478 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da0f      	bge.n	80033fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	3338      	adds	r3, #56	; 0x38
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	705a      	strb	r2, [r3, #1]
 80033fc:	e00d      	b.n	800341a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_PCD_EP_SetStall+0x82>
 8003436:	2302      	movs	r3, #2
 8003438:	e01e      	b.n	8003478 <HAL_PCD_EP_SetStall+0xc0>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	4618      	mov	r0, r3
 800344a:	f003 ff4d 	bl	80072e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	b2d9      	uxtb	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003468:	461a      	mov	r2, r3
 800346a:	f004 f93d 	bl	80076e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d901      	bls.n	800349e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e042      	b.n	8003524 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800349e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da0f      	bge.n	80034c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	3338      	adds	r3, #56	; 0x38
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	3304      	adds	r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	705a      	strb	r2, [r3, #1]
 80034c4:	e00f      	b.n	80034e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_PCD_EP_ClrStall+0x86>
 8003502:	2302      	movs	r3, #2
 8003504:	e00e      	b.n	8003524 <HAL_PCD_EP_ClrStall+0xa4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	4618      	mov	r0, r3
 8003516:	f003 ff55 	bl	80073c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353c:	2b00      	cmp	r3, #0
 800353e:	da0c      	bge.n	800355a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	3338      	adds	r3, #56	; 0x38
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	3304      	adds	r3, #4
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e00c      	b.n	8003574 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68f9      	ldr	r1, [r7, #12]
 800357a:	4618      	mov	r0, r3
 800357c:	f003 fd74 	bl	8007068 <USB_EPStopXfer>
 8003580:	4603      	mov	r3, r0
 8003582:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003584:	7afb      	ldrb	r3, [r7, #11]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b08a      	sub	sp, #40	; 0x28
 8003592:	af02      	add	r7, sp, #8
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3338      	adds	r3, #56	; 0x38
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	3304      	adds	r3, #4
 80035b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d901      	bls.n	80035c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06c      	b.n	80036a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d902      	bls.n	80035e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3303      	adds	r3, #3
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ea:	e02b      	b.n	8003644 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d902      	bls.n	8003608 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3303      	adds	r3, #3
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6919      	ldr	r1, [r3, #16]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003620:	b2db      	uxtb	r3, r3
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4603      	mov	r3, r0
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f003 fdc8 	bl	80071bc <USB_WritePacket>

    ep->xfer_buff  += len;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	441a      	add	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	441a      	add	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	b29b      	uxth	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	429a      	cmp	r2, r3
 8003658:	d809      	bhi.n	800366e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003662:	429a      	cmp	r2, r3
 8003664:	d203      	bcs.n	800366e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1be      	bne.n	80035ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	429a      	cmp	r2, r3
 8003678:	d811      	bhi.n	800369e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	2201      	movs	r2, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	43db      	mvns	r3, r3
 8003694:	6939      	ldr	r1, [r7, #16]
 8003696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800369a:	4013      	ands	r3, r2
 800369c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	333c      	adds	r3, #60	; 0x3c
 80036c0:	3304      	adds	r3, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d17b      	bne.n	80037d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	4a61      	ldr	r2, [pc, #388]	; (8003870 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	f240 80b9 	bls.w	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80b3 	beq.w	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	461a      	mov	r2, r3
 800370c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003710:	6093      	str	r3, [r2, #8]
 8003712:	e0a7      	b.n	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	461a      	mov	r2, r3
 800372c:	2320      	movs	r3, #32
 800372e:	6093      	str	r3, [r2, #8]
 8003730:	e098      	b.n	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 8093 	bne.w	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d90f      	bls.n	8003766 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375c:	461a      	mov	r2, r3
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	6093      	str	r3, [r2, #8]
 8003764:	e07e      	b.n	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	0159      	lsls	r1, r3, #5
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	440b      	add	r3, r1
 8003788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003792:	1ad2      	subs	r2, r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d114      	bne.n	80037c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037b0:	461a      	mov	r2, r3
 80037b2:	2101      	movs	r1, #1
 80037b4:	f003 ff98 	bl	80076e8 <USB_EP0_OutStart>
 80037b8:	e006      	b.n	80037c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f006 fa50 	bl	8009c74 <HAL_PCD_DataOutStageCallback>
 80037d4:	e046      	b.n	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	4a26      	ldr	r2, [pc, #152]	; (8003874 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d124      	bne.n	8003828 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	461a      	mov	r2, r3
 80037f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037fa:	6093      	str	r3, [r2, #8]
 80037fc:	e032      	b.n	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003814:	461a      	mov	r2, r3
 8003816:	2320      	movs	r3, #32
 8003818:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f006 fa27 	bl	8009c74 <HAL_PCD_DataOutStageCallback>
 8003826:	e01d      	b.n	8003864 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d114      	bne.n	8003858 <PCD_EP_OutXfrComplete_int+0x1b0>
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003850:	461a      	mov	r2, r3
 8003852:	2100      	movs	r1, #0
 8003854:	f003 ff48 	bl	80076e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f006 fa08 	bl	8009c74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	4f54300a 	.word	0x4f54300a
 8003874:	4f54310a 	.word	0x4f54310a

08003878 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	333c      	adds	r3, #60	; 0x3c
 8003890:	3304      	adds	r3, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a15      	ldr	r2, [pc, #84]	; (8003900 <PCD_EP_OutSetupPacket_int+0x88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d90e      	bls.n	80038cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f006 f9bf 	bl	8009c50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <PCD_EP_OutSetupPacket_int+0x88>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d90c      	bls.n	80038f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d108      	bne.n	80038f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038ec:	461a      	mov	r2, r3
 80038ee:	2101      	movs	r1, #1
 80038f0:	f003 fefa 	bl	80076e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	4f54300a 	.word	0x4f54300a

08003904 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
 8003910:	4613      	mov	r3, r2
 8003912:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d107      	bne.n	8003932 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003922:	883b      	ldrh	r3, [r7, #0]
 8003924:	0419      	lsls	r1, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	430a      	orrs	r2, r1
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
 8003930:	e028      	b.n	8003984 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	4413      	add	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e00d      	b.n	8003962 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	3340      	adds	r3, #64	; 0x40
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	4413      	add	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	3301      	adds	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	3b01      	subs	r3, #1
 8003968:	429a      	cmp	r2, r3
 800396a:	d3ec      	bcc.n	8003946 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800396c:	883b      	ldrh	r3, [r7, #0]
 800396e:	0418      	lsls	r0, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	3b01      	subs	r3, #1
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	4302      	orrs	r2, r0
 800397c:	3340      	adds	r3, #64	; 0x40
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	460b      	mov	r3, r1
 800399c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e267      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d075      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d00c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b85      	ldr	r3, [pc, #532]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d112      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4b7e      	ldr	r3, [pc, #504]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d05b      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x108>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d157      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e242      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCC_OscConfig+0x74>
 8003a32:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e01d      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x98>
 8003a4a:	4b70      	ldr	r3, [pc, #448]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6f      	ldr	r2, [pc, #444]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6c      	ldr	r2, [pc, #432]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a64:	4b69      	ldr	r3, [pc, #420]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fd fe44 	bl	8001710 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fd fe40 	bl	8001710 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e207      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xc0>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fd fe30 	bl	8001710 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fd fe2c 	bl	8001710 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1f3      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xe8>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1c7      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4937      	ldr	r1, [pc, #220]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e03a      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd fde5 	bl	8001710 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fd fde1 	bl	8001710 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1a8      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4925      	ldr	r1, [pc, #148]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd fdc4 	bl	8001710 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8c:	f7fd fdc0 	bl	8001710 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e187      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d036      	beq.n	8003c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd fda4 	bl	8001710 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fda0 	bl	8001710 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e167      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x200>
 8003bea:	e01b      	b.n	8003c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7fd fd8d 	bl	8001710 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	e00e      	b.n	8003c18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7fd fd89 	bl	8001710 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d907      	bls.n	8003c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e150      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	42470000 	.word	0x42470000
 8003c14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ea      	bne.n	8003bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8097 	beq.w	8003d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c36:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	4b7d      	ldr	r3, [pc, #500]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b7a      	ldr	r3, [pc, #488]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	4b77      	ldr	r3, [pc, #476]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6e:	4b74      	ldr	r3, [pc, #464]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a73      	ldr	r2, [pc, #460]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fd49 	bl	8001710 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fd fd45 	bl	8001710 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e10c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x2ea>
 8003ca8:	4b64      	ldr	r3, [pc, #400]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a63      	ldr	r2, [pc, #396]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x30c>
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a5e      	ldr	r2, [pc, #376]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	4b5c      	ldr	r3, [pc, #368]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a57      	ldr	r2, [pc, #348]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce4:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a54      	ldr	r2, [pc, #336]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fd0a 	bl	8001710 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd fd06 	bl	8001710 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0cb      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <HAL_RCC_OscConfig+0x334>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d24:	f7fd fcf4 	bl	8001710 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7fd fcf0 	bl	8001710 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0b5      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ee      	bne.n	8003d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a1 	beq.w	8003eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d6a:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d05c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d141      	bne.n	8003e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fd fcc4 	bl	8001710 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fd fcc0 	bl	8001710 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e087      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	491b      	ldr	r1, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fd fc99 	bl	8001710 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de2:	f7fd fc95 	bl	8001710 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e05c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x416>
 8003e00:	e054      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd fc82 	bl	8001710 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd fc7e 	bl	8001710 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e045      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x444>
 8003e2e:	e03d      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e038      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <HAL_RCC_OscConfig+0x4ec>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d028      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d121      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d11a      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cc      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d90c      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d044      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d119      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e067      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7fd fbb0 	bl	8001710 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7fd fbac 	bl	8001710 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e04f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d20c      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd fb10 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	0800ade0 	.word	0x0800ade0
 8004080:	20000000 	.word	0x20000000
 8004084:	20000004 	.word	0x20000004

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800408c:	b090      	sub	sp, #64	; 0x40
 800408e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004098:	2300      	movs	r3, #0
 800409a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a0:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x40>
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	f200 80a1 	bhi.w	80041f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ba:	e09b      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b53      	ldr	r3, [pc, #332]	; (800420c <HAL_RCC_GetSysClockFreq+0x184>)
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040c0:	e09b      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040c6:	e098      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d2:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d028      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	627a      	str	r2, [r7, #36]	; 0x24
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040f0:	2100      	movs	r1, #0
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 80040f4:	fb03 f201 	mul.w	r2, r3, r1
 80040f8:	2300      	movs	r3, #0
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	4413      	add	r3, r2
 8004100:	4a43      	ldr	r2, [pc, #268]	; (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 8004102:	fba0 1202 	umull	r1, r2, r0, r2
 8004106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004108:	460a      	mov	r2, r1
 800410a:	62ba      	str	r2, [r7, #40]	; 0x28
 800410c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410e:	4413      	add	r3, r2
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	2200      	movs	r2, #0
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	61fa      	str	r2, [r7, #28]
 800411a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800411e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004122:	f7fc f8b5 	bl	8000290 <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4613      	mov	r3, r2
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800412e:	e053      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004130:	4b35      	ldr	r3, [pc, #212]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	2200      	movs	r2, #0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	617a      	str	r2, [r7, #20]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004142:	f04f 0b00 	mov.w	fp, #0
 8004146:	4652      	mov	r2, sl
 8004148:	465b      	mov	r3, fp
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	0159      	lsls	r1, r3, #5
 8004154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004158:	0150      	lsls	r0, r2, #5
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	ebb2 080a 	subs.w	r8, r2, sl
 8004162:	eb63 090b 	sbc.w	r9, r3, fp
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004172:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004176:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800417a:	ebb2 0408 	subs.w	r4, r2, r8
 800417e:	eb63 0509 	sbc.w	r5, r3, r9
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	00eb      	lsls	r3, r5, #3
 800418c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004190:	00e2      	lsls	r2, r4, #3
 8004192:	4614      	mov	r4, r2
 8004194:	461d      	mov	r5, r3
 8004196:	eb14 030a 	adds.w	r3, r4, sl
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	eb45 030b 	adc.w	r3, r5, fp
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ae:	4629      	mov	r1, r5
 80041b0:	028b      	lsls	r3, r1, #10
 80041b2:	4621      	mov	r1, r4
 80041b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b8:	4621      	mov	r1, r4
 80041ba:	028a      	lsls	r2, r1, #10
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c2:	2200      	movs	r2, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	60fa      	str	r2, [r7, #12]
 80041c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041cc:	f7fc f860 	bl	8000290 <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4613      	mov	r3, r2
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041f2:	e002      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetSysClockFreq+0x184>)
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3740      	adds	r7, #64	; 0x40
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	00f42400 	.word	0x00f42400
 8004210:	017d7840 	.word	0x017d7840

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000000 	.word	0x20000000

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	0800adf0 	.word	0x0800adf0

08004254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004258:	f7ff ffdc 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0b5b      	lsrs	r3, r3, #13
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	0800adf0 	.word	0x0800adf0

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e041      	b.n	8004312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc ffdc 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 fa88 	bl	80047d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d001      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e044      	b.n	80043be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <HAL_TIM_Base_Start_IT+0xb0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435e:	d013      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1a      	ldr	r2, [pc, #104]	; (80043d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a16      	ldr	r2, [pc, #88]	; (80043dc <HAL_TIM_Base_Start_IT+0xc0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b06      	cmp	r3, #6
 8004398:	d010      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	e007      	b.n	80043bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40014000 	.word	0x40014000

080043e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b02      	cmp	r3, #2
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0202 	mvn.w	r2, #2
 800440c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9b5 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9a7 	bl	800477e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f9b8 	bl	80047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d122      	bne.n	8004490 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b04      	cmp	r3, #4
 8004456:	d11b      	bne.n	8004490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0204 	mvn.w	r2, #4
 8004460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f98b 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f97d 	bl	800477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f98e 	bl	80047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b08      	cmp	r3, #8
 800449c:	d122      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d11b      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0208 	mvn.w	r2, #8
 80044b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2204      	movs	r2, #4
 80044ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f961 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f953 	bl	800477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f964 	bl	80047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d122      	bne.n	8004538 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d11b      	bne.n	8004538 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0210 	mvn.w	r2, #16
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2208      	movs	r2, #8
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f937 	bl	8004792 <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f929 	bl	800477e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f93a 	bl	80047a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10e      	bne.n	8004564 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0201 	mvn.w	r2, #1
 800455c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc fbde 	bl	8000d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d10e      	bne.n	8004590 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d107      	bne.n	8004590 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fab2 	bl	8004af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d10e      	bne.n	80045bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f8ff 	bl	80047ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0220 	mvn.w	r2, #32
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa7c 	bl	8004ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_TIM_ConfigClockSource+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e0b4      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x186>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800462a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004644:	d03e      	beq.n	80046c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	f200 8087 	bhi.w	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	f000 8086 	beq.w	8004762 <HAL_TIM_ConfigClockSource+0x172>
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d87f      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b70      	cmp	r3, #112	; 0x70
 800465e:	d01a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xa6>
 8004660:	2b70      	cmp	r3, #112	; 0x70
 8004662:	d87b      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d050      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x11a>
 8004668:	2b60      	cmp	r3, #96	; 0x60
 800466a:	d877      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d03c      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xfa>
 8004670:	2b50      	cmp	r3, #80	; 0x50
 8004672:	d873      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d058      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x13a>
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d86f      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d064      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d86b      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d060      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	2b20      	cmp	r3, #32
 800468a:	d867      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05c      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	2b10      	cmp	r3, #16
 8004692:	d05a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	e062      	b.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6899      	ldr	r1, [r3, #8]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f000 f98d 	bl	80049c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	609a      	str	r2, [r3, #8]
      break;
 80046c2:	e04f      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	6899      	ldr	r1, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f000 f976 	bl	80049c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e6:	609a      	str	r2, [r3, #8]
      break;
 80046e8:	e03c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 f8ea 	bl	80048d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2150      	movs	r1, #80	; 0x50
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f943 	bl	800498e <TIM_ITRx_SetConfig>
      break;
 8004708:	e02c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	461a      	mov	r2, r3
 8004718:	f000 f909 	bl	800492e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2160      	movs	r1, #96	; 0x60
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f933 	bl	800498e <TIM_ITRx_SetConfig>
      break;
 8004728:	e01c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	461a      	mov	r2, r3
 8004738:	f000 f8ca 	bl	80048d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f923 	bl	800498e <TIM_ITRx_SetConfig>
      break;
 8004748:	e00c      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 f91a 	bl	800498e <TIM_ITRx_SetConfig>
      break;
 800475a:	e003      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      break;
 8004760:	e000      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <TIM_Base_SetConfig+0xe4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0x38>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0x38>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a31      	ldr	r2, [pc, #196]	; (80048b8 <TIM_Base_SetConfig+0xe8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a30      	ldr	r2, [pc, #192]	; (80048bc <TIM_Base_SetConfig+0xec>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0x38>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a2f      	ldr	r2, [pc, #188]	; (80048c0 <TIM_Base_SetConfig+0xf0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <TIM_Base_SetConfig+0xe4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01b      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004828:	d017      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <TIM_Base_SetConfig+0xe8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a21      	ldr	r2, [pc, #132]	; (80048bc <TIM_Base_SetConfig+0xec>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00f      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <TIM_Base_SetConfig+0xf0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <TIM_Base_SetConfig+0xf4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <TIM_Base_SetConfig+0xf8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_Base_SetConfig+0x8a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <TIM_Base_SetConfig+0xfc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d108      	bne.n	800486c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <TIM_Base_SetConfig+0xe4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d103      	bne.n	80048a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	615a      	str	r2, [r3, #20]
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40010000 	.word	0x40010000
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800
 80048c0:	40000c00 	.word	0x40000c00
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800

080048d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f023 030a 	bic.w	r3, r3, #10
 800490c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800492e:	b480      	push	{r7}
 8004930:	b087      	sub	sp, #28
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0210 	bic.w	r2, r3, #16
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	031b      	lsls	r3, r3, #12
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800496a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f043 0307 	orr.w	r3, r3, #7
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	609a      	str	r2, [r3, #8]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	021a      	lsls	r2, r3, #8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	609a      	str	r2, [r3, #8]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e050      	b.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d013      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a16      	ldr	r2, [pc, #88]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a13      	ldr	r2, [pc, #76]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10c      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40014000 	.word	0x40014000

08004ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e03f      	b.n	8004b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fbbe 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 ff9b 	bl	8005a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b08a      	sub	sp, #40	; 0x28
 8004ba6:	af02      	add	r7, sp, #8
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d17c      	bne.n	8004cbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <HAL_UART_Transmit+0x2c>
 8004bc8:	88fb      	ldrh	r3, [r7, #6]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e075      	b.n	8004cbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_UART_Transmit+0x3e>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e06e      	b.n	8004cbe <HAL_UART_Transmit+0x11c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2221      	movs	r2, #33	; 0x21
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bf6:	f7fc fd8b 	bl	8001710 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	88fa      	ldrh	r2, [r7, #6]
 8004c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c10:	d108      	bne.n	8004c24 <HAL_UART_Transmit+0x82>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e003      	b.n	8004c2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c34:	e02a      	b.n	8004c8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fc53 	bl	80054ec <UART_WaitOnFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e036      	b.n	8004cbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	e007      	b.n	8004c7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	781a      	ldrb	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1cf      	bne.n	8004c36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2140      	movs	r1, #64	; 0x40
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fc23 	bl	80054ec <UART_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e006      	b.n	8004cbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08c      	sub	sp, #48	; 0x30
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d152      	bne.n	8004d86 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e04b      	b.n	8004d88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e044      	b.n	8004d88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fc58 	bl	80055c8 <UART_Start_Receive_DMA>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d12c      	bne.n	8004d80 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d125      	bne.n	8004d7a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	617b      	str	r3, [r7, #20]
   return(result);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f043 0310 	orr.w	r3, r3, #16
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d64:	627a      	str	r2, [r7, #36]	; 0x24
 8004d66:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6a39      	ldr	r1, [r7, #32]
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004d78:	e002      	b.n	8004d80 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004d80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d84:	e000      	b.n	8004d88 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004d86:	2302      	movs	r3, #2
  }
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3730      	adds	r7, #48	; 0x30
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b0ba      	sub	sp, #232	; 0xe8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10f      	bne.n	8004df6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_UART_IRQHandler+0x66>
 8004de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fd8f 	bl	8005912 <UART_Receive_IT>
      return;
 8004df4:	e256      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80de 	beq.w	8004fbc <HAL_UART_IRQHandler+0x22c>
 8004e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80d1 	beq.w	8004fbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <HAL_UART_IRQHandler+0xae>
 8004e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0201 	orr.w	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <HAL_UART_IRQHandler+0xd2>
 8004e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f043 0202 	orr.w	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_UART_IRQHandler+0xf6>
 8004e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f043 0204 	orr.w	r2, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d011      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x126>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d105      	bne.n	8004eaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f043 0208 	orr.w	r2, r3, #8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 81ed 	beq.w	800529a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_UART_IRQHandler+0x14e>
 8004ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fd1a 	bl	8005912 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <HAL_UART_IRQHandler+0x17a>
 8004f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d04f      	beq.n	8004faa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fc22 	bl	8005754 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d141      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3314      	adds	r3, #20
 8004f46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1d9      	bne.n	8004f1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d013      	beq.n	8004f9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	4a7d      	ldr	r2, [pc, #500]	; (800516c <HAL_UART_IRQHandler+0x3dc>)
 8004f78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc fe7e 	bl	8001c80 <HAL_DMA_Abort_IT>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f94:	4610      	mov	r0, r2
 8004f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	e00e      	b.n	8004fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f9a4 	bl	80052e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	e00a      	b.n	8004fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9a0 	bl	80052e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa8:	e006      	b.n	8004fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f99c 	bl	80052e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004fb6:	e170      	b.n	800529a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	bf00      	nop
    return;
 8004fba:	e16e      	b.n	800529a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	f040 814a 	bne.w	800525a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8143 	beq.w	800525a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 813c 	beq.w	800525a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	f040 80b4 	bne.w	8005170 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005014:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8140 	beq.w	800529e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005026:	429a      	cmp	r2, r3
 8005028:	f080 8139 	bcs.w	800529e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005032:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	f000 8088 	beq.w	8005152 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800505c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800506e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800507a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1d9      	bne.n	8005042 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3314      	adds	r3, #20
 8005094:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800509e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e1      	bne.n	800508e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e3      	bne.n	80050ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005122:	f023 0310 	bic.w	r3, r3, #16
 8005126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005134:	65ba      	str	r2, [r7, #88]	; 0x58
 8005136:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800513a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e3      	bne.n	8005110 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc fd27 	bl	8001ba0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800515a:	b29b      	uxth	r3, r3
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	b29b      	uxth	r3, r3
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fb fd40 	bl	8000be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005168:	e099      	b.n	800529e <HAL_UART_IRQHandler+0x50e>
 800516a:	bf00      	nop
 800516c:	0800581b 	.word	0x0800581b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 808b 	beq.w	80052a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800518c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8086 	beq.w	80052a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051ba:	647a      	str	r2, [r7, #68]	; 0x44
 80051bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e3      	bne.n	8005196 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	623b      	str	r3, [r7, #32]
   return(result);
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051f2:	633a      	str	r2, [r7, #48]	; 0x30
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e3      	bne.n	80051ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	60fb      	str	r3, [r7, #12]
   return(result);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0310 	bic.w	r3, r3, #16
 800522a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005238:	61fa      	str	r2, [r7, #28]
 800523a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	69b9      	ldr	r1, [r7, #24]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	617b      	str	r3, [r7, #20]
   return(result);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e3      	bne.n	8005214 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800524c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb fcc8 	bl	8000be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005258:	e023      	b.n	80052a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_UART_IRQHandler+0x4ea>
 8005266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fae5 	bl	8005842 <UART_Transmit_IT>
    return;
 8005278:	e014      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800527a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <HAL_UART_IRQHandler+0x514>
 8005286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fb25 	bl	80058e2 <UART_EndTransmit_IT>
    return;
 8005298:	e004      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
    return;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
      return;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
      return;
 80052a2:	bf00      	nop
  }
}
 80052a4:	37e8      	adds	r7, #232	; 0xe8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop

080052ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b09c      	sub	sp, #112	; 0x70
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d172      	bne.n	80053fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	2200      	movs	r2, #0
 800531c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005334:	66bb      	str	r3, [r7, #104]	; 0x68
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800533e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005340:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800534c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	667b      	str	r3, [r7, #100]	; 0x64
 800536a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3314      	adds	r3, #20
 8005370:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005372:	647a      	str	r2, [r7, #68]	; 0x44
 8005374:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e5      	bne.n	8005352 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3314      	adds	r3, #20
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	623b      	str	r3, [r7, #32]
   return(result);
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539c:	663b      	str	r3, [r7, #96]	; 0x60
 800539e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3314      	adds	r3, #20
 80053a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053a6:	633a      	str	r2, [r7, #48]	; 0x30
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d119      	bne.n	80053fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053ea:	61fa      	str	r2, [r7, #28]
 80053ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	69b9      	ldr	r1, [r7, #24]
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	617b      	str	r3, [r7, #20]
   return(result);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	2b01      	cmp	r3, #1
 8005404:	d106      	bne.n	8005414 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800540a:	4619      	mov	r1, r3
 800540c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800540e:	f7fb fbeb 	bl	8000be8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005412:	e002      	b.n	800541a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005414:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005416:	f7ff ff53 	bl	80052c0 <HAL_UART_RxCpltCallback>
}
 800541a:	bf00      	nop
 800541c:	3770      	adds	r7, #112	; 0x70
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	2b01      	cmp	r3, #1
 8005436:	d108      	bne.n	800544a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	4619      	mov	r1, r3
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7fb fbd0 	bl	8000be8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005448:	e002      	b.n	8005450 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff ff42 	bl	80052d4 <HAL_UART_RxHalfCpltCallback>
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	bf0c      	ite	eq
 8005478:	2301      	moveq	r3, #1
 800547a:	2300      	movne	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b21      	cmp	r3, #33	; 0x21
 800548a:	d108      	bne.n	800549e <UART_DMAError+0x46>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005498:	68b8      	ldr	r0, [r7, #8]
 800549a:	f000 f933 	bl	8005704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b22      	cmp	r3, #34	; 0x22
 80054be:	d108      	bne.n	80054d2 <UART_DMAError+0x7a>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2200      	movs	r2, #0
 80054ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80054cc:	68b8      	ldr	r0, [r7, #8]
 80054ce:	f000 f941 	bl	8005754 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0210 	orr.w	r2, r3, #16
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f7ff ff02 	bl	80052e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b090      	sub	sp, #64	; 0x40
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054fc:	e050      	b.n	80055a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d04c      	beq.n	80055a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <UART_WaitOnFlagUntilTimeout+0x30>
 800550c:	f7fc f900 	bl	8001710 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005518:	429a      	cmp	r2, r3
 800551a:	d241      	bcs.n	80055a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800553c:	637a      	str	r2, [r7, #52]	; 0x34
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e5      	bne.n	800551c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	613b      	str	r3, [r7, #16]
   return(result);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	63bb      	str	r3, [r7, #56]	; 0x38
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3314      	adds	r3, #20
 800556e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005570:	623a      	str	r2, [r7, #32]
 8005572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	69f9      	ldr	r1, [r7, #28]
 8005576:	6a3a      	ldr	r2, [r7, #32]
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	61bb      	str	r3, [r7, #24]
   return(result);
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e5      	bne.n	8005550 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e00f      	b.n	80055c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4013      	ands	r3, r2
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d09f      	beq.n	80054fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3740      	adds	r7, #64	; 0x40
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b098      	sub	sp, #96	; 0x60
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2222      	movs	r2, #34	; 0x22
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <UART_Start_Receive_DMA+0x130>)
 80055f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	4a3f      	ldr	r2, [pc, #252]	; (80056fc <UART_Start_Receive_DMA+0x134>)
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	4a3e      	ldr	r2, [pc, #248]	; (8005700 <UART_Start_Receive_DMA+0x138>)
 8005606:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3304      	adds	r3, #4
 8005620:	4619      	mov	r1, r3
 8005622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	f7fc fa62 	bl	8001af0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d019      	beq.n	8005686 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	65bb      	str	r3, [r7, #88]	; 0x58
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005672:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005674:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e5      	bne.n	8005652 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3314      	adds	r3, #20
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	657b      	str	r3, [r7, #84]	; 0x54
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e5      	bne.n	8005686 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	617b      	str	r3, [r7, #20]
   return(result);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d0:	653b      	str	r3, [r7, #80]	; 0x50
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056da:	627a      	str	r2, [r7, #36]	; 0x24
 80056dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6a39      	ldr	r1, [r7, #32]
 80056e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3760      	adds	r7, #96	; 0x60
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	080052fd 	.word	0x080052fd
 80056fc:	08005423 	.word	0x08005423
 8005700:	08005459 	.word	0x08005459

08005704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	60bb      	str	r3, [r7, #8]
   return(result);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	61ba      	str	r2, [r7, #24]
 800572e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6979      	ldr	r1, [r7, #20]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	613b      	str	r3, [r7, #16]
   return(result);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e5      	bne.n	800570c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005748:	bf00      	nop
 800574a:	3724      	adds	r7, #36	; 0x24
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005754:	b480      	push	{r7}
 8005756:	b095      	sub	sp, #84	; 0x54
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800577c:	643a      	str	r2, [r7, #64]	; 0x40
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e5      	bne.n	800575c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3314      	adds	r3, #20
 8005796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	61fb      	str	r3, [r7, #28]
   return(result);
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e5      	bne.n	8005790 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d119      	bne.n	8005800 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	60bb      	str	r3, [r7, #8]
   return(result);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0310 	bic.w	r3, r3, #16
 80057e2:	647b      	str	r3, [r7, #68]	; 0x44
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ec:	61ba      	str	r2, [r7, #24]
 80057ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6979      	ldr	r1, [r7, #20]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	613b      	str	r3, [r7, #16]
   return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800580e:	bf00      	nop
 8005810:	3754      	adds	r7, #84	; 0x54
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff fd57 	bl	80052e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b21      	cmp	r3, #33	; 0x21
 8005854:	d13e      	bne.n	80058d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585e:	d114      	bne.n	800588a <UART_Transmit_IT+0x48>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d110      	bne.n	800588a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]
 8005888:	e008      	b.n	800589c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	1c59      	adds	r1, r3, #1
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6211      	str	r1, [r2, #32]
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4619      	mov	r1, r3
 80058aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10f      	bne.n	80058d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff fcd2 	bl	80052ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08c      	sub	sp, #48	; 0x30
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b22      	cmp	r3, #34	; 0x22
 8005924:	f040 80ab 	bne.w	8005a7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005930:	d117      	bne.n	8005962 <UART_Receive_IT+0x50>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d113      	bne.n	8005962 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005950:	b29a      	uxth	r2, r3
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	1c9a      	adds	r2, r3, #2
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	629a      	str	r2, [r3, #40]	; 0x28
 8005960:	e026      	b.n	80059b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005974:	d007      	beq.n	8005986 <UART_Receive_IT+0x74>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <UART_Receive_IT+0x82>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e008      	b.n	80059a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	4619      	mov	r1, r3
 80059be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d15a      	bne.n	8005a7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0220 	bic.w	r2, r2, #32
 80059d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d135      	bne.n	8005a70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f023 0310 	bic.w	r3, r3, #16
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2a:	623a      	str	r2, [r7, #32]
 8005a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	69f9      	ldr	r1, [r7, #28]
 8005a30:	6a3a      	ldr	r2, [r7, #32]
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d10a      	bne.n	8005a62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fb f8bd 	bl	8000be8 <HAL_UARTEx_RxEventCallback>
 8005a6e:	e002      	b.n	8005a76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fc25 	bl	80052c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e002      	b.n	8005a80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
  }
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3730      	adds	r7, #48	; 0x30
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a8c:	b0c0      	sub	sp, #256	; 0x100
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	68d9      	ldr	r1, [r3, #12]
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	ea40 0301 	orr.w	r3, r0, r1
 8005ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ae0:	f021 010c 	bic.w	r1, r1, #12
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aee:	430b      	orrs	r3, r1
 8005af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b02:	6999      	ldr	r1, [r3, #24]
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	ea40 0301 	orr.w	r3, r0, r1
 8005b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b8f      	ldr	r3, [pc, #572]	; (8005d54 <UART_SetConfig+0x2cc>)
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d005      	beq.n	8005b28 <UART_SetConfig+0xa0>
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b8d      	ldr	r3, [pc, #564]	; (8005d58 <UART_SetConfig+0x2d0>)
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d104      	bne.n	8005b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b28:	f7fe fb94 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 8005b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b30:	e003      	b.n	8005b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b32:	f7fe fb7b 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8005b36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b44:	f040 810c 	bne.w	8005d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	1891      	adds	r1, r2, r2
 8005b60:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b62:	415b      	adcs	r3, r3
 8005b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	eb12 0801 	adds.w	r8, r2, r1
 8005b70:	4629      	mov	r1, r5
 8005b72:	eb43 0901 	adc.w	r9, r3, r1
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b8a:	4690      	mov	r8, r2
 8005b8c:	4699      	mov	r9, r3
 8005b8e:	4623      	mov	r3, r4
 8005b90:	eb18 0303 	adds.w	r3, r8, r3
 8005b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b98:	462b      	mov	r3, r5
 8005b9a:	eb49 0303 	adc.w	r3, r9, r3
 8005b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	18db      	adds	r3, r3, r3
 8005bba:	653b      	str	r3, [r7, #80]	; 0x50
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	eb42 0303 	adc.w	r3, r2, r3
 8005bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bcc:	f7fa fb60 	bl	8000290 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b61      	ldr	r3, [pc, #388]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	011c      	lsls	r4, r3, #4
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	1891      	adds	r1, r2, r2
 8005bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c00:	4641      	mov	r1, r8
 8005c02:	eb12 0a01 	adds.w	sl, r2, r1
 8005c06:	4649      	mov	r1, r9
 8005c08:	eb43 0b01 	adc.w	fp, r3, r1
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c20:	4692      	mov	sl, r2
 8005c22:	469b      	mov	fp, r3
 8005c24:	4643      	mov	r3, r8
 8005c26:	eb1a 0303 	adds.w	r3, sl, r3
 8005c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c2e:	464b      	mov	r3, r9
 8005c30:	eb4b 0303 	adc.w	r3, fp, r3
 8005c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	18db      	adds	r3, r3, r3
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
 8005c52:	4613      	mov	r3, r2
 8005c54:	eb42 0303 	adc.w	r3, r2, r3
 8005c58:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c62:	f7fa fb15 	bl	8000290 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	2264      	movs	r2, #100	; 0x64
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	1acb      	subs	r3, r1, r3
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005c84:	fba3 2302 	umull	r2, r3, r3, r2
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c90:	441c      	add	r4, r3
 8005c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cac:	415b      	adcs	r3, r3
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8005cba:	4649      	mov	r1, r9
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ccc:	4659      	mov	r1, fp
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	00ca      	lsls	r2, r1, #3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce8:	464b      	mov	r3, r9
 8005cea:	460a      	mov	r2, r1
 8005cec:	eb42 0303 	adc.w	r3, r2, r3
 8005cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d08:	460b      	mov	r3, r1
 8005d0a:	18db      	adds	r3, r3, r3
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0e:	4613      	mov	r3, r2
 8005d10:	eb42 0303 	adc.w	r3, r2, r3
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d1e:	f7fa fab7 	bl	8000290 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005d28:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2164      	movs	r1, #100	; 0x64
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	3332      	adds	r3, #50	; 0x32
 8005d3a:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <UART_SetConfig+0x2d4>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 0207 	and.w	r2, r3, #7
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4422      	add	r2, r4
 8005d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d50:	e105      	b.n	8005f5e <UART_SetConfig+0x4d6>
 8005d52:	bf00      	nop
 8005d54:	40011000 	.word	0x40011000
 8005d58:	40011400 	.word	0x40011400
 8005d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	1891      	adds	r1, r2, r2
 8005d78:	6239      	str	r1, [r7, #32]
 8005d7a:	415b      	adcs	r3, r3
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d82:	4641      	mov	r1, r8
 8005d84:	1854      	adds	r4, r2, r1
 8005d86:	4649      	mov	r1, r9
 8005d88:	eb43 0501 	adc.w	r5, r3, r1
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	00eb      	lsls	r3, r5, #3
 8005d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d9a:	00e2      	lsls	r2, r4, #3
 8005d9c:	4614      	mov	r4, r2
 8005d9e:	461d      	mov	r5, r3
 8005da0:	4643      	mov	r3, r8
 8005da2:	18e3      	adds	r3, r4, r3
 8005da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005da8:	464b      	mov	r3, r9
 8005daa:	eb45 0303 	adc.w	r3, r5, r3
 8005dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dce:	4629      	mov	r1, r5
 8005dd0:	008b      	lsls	r3, r1, #2
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd8:	4621      	mov	r1, r4
 8005dda:	008a      	lsls	r2, r1, #2
 8005ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005de0:	f7fa fa56 	bl	8000290 <__aeabi_uldivmod>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4b60      	ldr	r3, [pc, #384]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005dea:	fba3 2302 	umull	r2, r3, r3, r2
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	011c      	lsls	r4, r3, #4
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	61b9      	str	r1, [r7, #24]
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e14:	4641      	mov	r1, r8
 8005e16:	1851      	adds	r1, r2, r1
 8005e18:	6139      	str	r1, [r7, #16]
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	414b      	adcs	r3, r1
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	00cb      	lsls	r3, r1, #3
 8005e30:	4651      	mov	r1, sl
 8005e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e36:	4651      	mov	r1, sl
 8005e38:	00ca      	lsls	r2, r1, #3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4642      	mov	r2, r8
 8005e42:	189b      	adds	r3, r3, r2
 8005e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e48:	464b      	mov	r3, r9
 8005e4a:	460a      	mov	r2, r1
 8005e4c:	eb42 0303 	adc.w	r3, r2, r3
 8005e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	008b      	lsls	r3, r1, #2
 8005e70:	4641      	mov	r1, r8
 8005e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e76:	4641      	mov	r1, r8
 8005e78:	008a      	lsls	r2, r1, #2
 8005e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e7e:	f7fa fa07 	bl	8000290 <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005e88:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2164      	movs	r1, #100	; 0x64
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	3332      	adds	r3, #50	; 0x32
 8005e9a:	4a34      	ldr	r2, [pc, #208]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea6:	441c      	add	r4, r3
 8005ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eac:	2200      	movs	r2, #0
 8005eae:	673b      	str	r3, [r7, #112]	; 0x70
 8005eb0:	677a      	str	r2, [r7, #116]	; 0x74
 8005eb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	464b      	mov	r3, r9
 8005eba:	1891      	adds	r1, r2, r2
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	415b      	adcs	r3, r3
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	1851      	adds	r1, r2, r1
 8005eca:	6039      	str	r1, [r7, #0]
 8005ecc:	4649      	mov	r1, r9
 8005ece:	414b      	adcs	r3, r1
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ede:	4659      	mov	r1, fp
 8005ee0:	00cb      	lsls	r3, r1, #3
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee8:	4651      	mov	r1, sl
 8005eea:	00ca      	lsls	r2, r1, #3
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4642      	mov	r2, r8
 8005ef4:	189b      	adds	r3, r3, r2
 8005ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef8:	464b      	mov	r3, r9
 8005efa:	460a      	mov	r2, r1
 8005efc:	eb42 0303 	adc.w	r3, r2, r3
 8005f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f0c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	008b      	lsls	r3, r1, #2
 8005f1e:	4641      	mov	r1, r8
 8005f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f24:	4641      	mov	r1, r8
 8005f26:	008a      	lsls	r2, r1, #2
 8005f28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f2c:	f7fa f9b0 	bl	8000290 <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005f36:	fba3 1302 	umull	r1, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	2164      	movs	r1, #100	; 0x64
 8005f3e:	fb01 f303 	mul.w	r3, r1, r3
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	3332      	adds	r3, #50	; 0x32
 8005f48:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <UART_SetConfig+0x4e4>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4422      	add	r2, r4
 8005f5c:	609a      	str	r2, [r3, #8]
}
 8005f5e:	bf00      	nop
 8005f60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f64:	46bd      	mov	sp, r7
 8005f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6a:	bf00      	nop
 8005f6c:	51eb851f 	.word	0x51eb851f

08005f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f70:	b084      	sub	sp, #16
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	f107 001c 	add.w	r0, r7, #28
 8005f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d122      	bne.n	8005fce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d105      	bne.n	8005fc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f001 fbee 	bl	80077a4 <USB_CoreReset>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]
 8005fcc:	e01a      	b.n	8006004 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f001 fbe2 	bl	80077a4 <USB_CoreReset>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8005ff6:	e005      	b.n	8006004 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	2b01      	cmp	r3, #1
 8006008:	d10b      	bne.n	8006022 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f043 0206 	orr.w	r2, r3, #6
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f043 0220 	orr.w	r2, r3, #32
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800602e:	b004      	add	sp, #16
 8006030:	4770      	bx	lr
	...

08006034 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d165      	bne.n	8006114 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a41      	ldr	r2, [pc, #260]	; (8006150 <USB_SetTurnaroundTime+0x11c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d906      	bls.n	800605e <USB_SetTurnaroundTime+0x2a>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a40      	ldr	r2, [pc, #256]	; (8006154 <USB_SetTurnaroundTime+0x120>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d202      	bcs.n	800605e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006058:	230f      	movs	r3, #15
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	e062      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a3c      	ldr	r2, [pc, #240]	; (8006154 <USB_SetTurnaroundTime+0x120>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d306      	bcc.n	8006074 <USB_SetTurnaroundTime+0x40>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4a3b      	ldr	r2, [pc, #236]	; (8006158 <USB_SetTurnaroundTime+0x124>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d202      	bcs.n	8006074 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800606e:	230e      	movs	r3, #14
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	e057      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a38      	ldr	r2, [pc, #224]	; (8006158 <USB_SetTurnaroundTime+0x124>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d306      	bcc.n	800608a <USB_SetTurnaroundTime+0x56>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4a37      	ldr	r2, [pc, #220]	; (800615c <USB_SetTurnaroundTime+0x128>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d202      	bcs.n	800608a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006084:	230d      	movs	r3, #13
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e04c      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4a33      	ldr	r2, [pc, #204]	; (800615c <USB_SetTurnaroundTime+0x128>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d306      	bcc.n	80060a0 <USB_SetTurnaroundTime+0x6c>
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4a32      	ldr	r2, [pc, #200]	; (8006160 <USB_SetTurnaroundTime+0x12c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d802      	bhi.n	80060a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800609a:	230c      	movs	r3, #12
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e041      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4a2f      	ldr	r2, [pc, #188]	; (8006160 <USB_SetTurnaroundTime+0x12c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d906      	bls.n	80060b6 <USB_SetTurnaroundTime+0x82>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4a2e      	ldr	r2, [pc, #184]	; (8006164 <USB_SetTurnaroundTime+0x130>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d802      	bhi.n	80060b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060b0:	230b      	movs	r3, #11
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e036      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4a2a      	ldr	r2, [pc, #168]	; (8006164 <USB_SetTurnaroundTime+0x130>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d906      	bls.n	80060cc <USB_SetTurnaroundTime+0x98>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4a29      	ldr	r2, [pc, #164]	; (8006168 <USB_SetTurnaroundTime+0x134>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d802      	bhi.n	80060cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060c6:	230a      	movs	r3, #10
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e02b      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4a26      	ldr	r2, [pc, #152]	; (8006168 <USB_SetTurnaroundTime+0x134>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d906      	bls.n	80060e2 <USB_SetTurnaroundTime+0xae>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4a25      	ldr	r2, [pc, #148]	; (800616c <USB_SetTurnaroundTime+0x138>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d202      	bcs.n	80060e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060dc:	2309      	movs	r3, #9
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e020      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4a21      	ldr	r2, [pc, #132]	; (800616c <USB_SetTurnaroundTime+0x138>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d306      	bcc.n	80060f8 <USB_SetTurnaroundTime+0xc4>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4a20      	ldr	r2, [pc, #128]	; (8006170 <USB_SetTurnaroundTime+0x13c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d802      	bhi.n	80060f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060f2:	2308      	movs	r3, #8
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e015      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <USB_SetTurnaroundTime+0x13c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d906      	bls.n	800610e <USB_SetTurnaroundTime+0xda>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4a1c      	ldr	r2, [pc, #112]	; (8006174 <USB_SetTurnaroundTime+0x140>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d202      	bcs.n	800610e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006108:	2307      	movs	r3, #7
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e00a      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800610e:	2306      	movs	r3, #6
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e007      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800611a:	2309      	movs	r3, #9
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	e001      	b.n	8006124 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006120:	2309      	movs	r3, #9
 8006122:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	00d8acbf 	.word	0x00d8acbf
 8006154:	00e4e1c0 	.word	0x00e4e1c0
 8006158:	00f42400 	.word	0x00f42400
 800615c:	01067380 	.word	0x01067380
 8006160:	011a499f 	.word	0x011a499f
 8006164:	01312cff 	.word	0x01312cff
 8006168:	014ca43f 	.word	0x014ca43f
 800616c:	016e3600 	.word	0x016e3600
 8006170:	01a6ab1f 	.word	0x01a6ab1f
 8006174:	01e84800 	.word	0x01e84800

08006178 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f043 0201 	orr.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f023 0201 	bic.w	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d115      	bne.n	800620a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061ea:	2001      	movs	r0, #1
 80061ec:	f7fb fa9c 	bl	8001728 <HAL_Delay>
      ms++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fa45 	bl	8007686 <USB_GetMode>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d01e      	beq.n	8006240 <USB_SetCurrentMode+0x84>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b31      	cmp	r3, #49	; 0x31
 8006206:	d9f0      	bls.n	80061ea <USB_SetCurrentMode+0x2e>
 8006208:	e01a      	b.n	8006240 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d115      	bne.n	800623c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800621c:	2001      	movs	r0, #1
 800621e:	f7fb fa83 	bl	8001728 <HAL_Delay>
      ms++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fa2c 	bl	8007686 <USB_GetMode>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <USB_SetCurrentMode+0x84>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b31      	cmp	r3, #49	; 0x31
 8006238:	d9f0      	bls.n	800621c <USB_SetCurrentMode+0x60>
 800623a:	e001      	b.n	8006240 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e005      	b.n	800624c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b32      	cmp	r3, #50	; 0x32
 8006244:	d101      	bne.n	800624a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006254:	b084      	sub	sp, #16
 8006256:	b580      	push	{r7, lr}
 8006258:	b086      	sub	sp, #24
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	e009      	b.n	8006288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	3340      	adds	r3, #64	; 0x40
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	2200      	movs	r2, #0
 8006280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	3301      	adds	r3, #1
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b0e      	cmp	r3, #14
 800628c:	d9f2      	bls.n	8006274 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800628e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d11c      	bne.n	80062ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a2:	f043 0302 	orr.w	r3, r3, #2
 80062a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
 80062cc:	e00b      	b.n	80062e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062ec:	461a      	mov	r2, r3
 80062ee:	2300      	movs	r3, #0
 80062f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f8:	4619      	mov	r1, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	461a      	mov	r2, r3
 8006302:	680b      	ldr	r3, [r1, #0]
 8006304:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10c      	bne.n	8006326 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006312:	2100      	movs	r1, #0
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f965 	bl	80065e4 <USB_SetDevSpeed>
 800631a:	e008      	b.n	800632e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800631c:	2101      	movs	r1, #1
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f960 	bl	80065e4 <USB_SetDevSpeed>
 8006324:	e003      	b.n	800632e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006326:	2103      	movs	r1, #3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f95b 	bl	80065e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800632e:	2110      	movs	r1, #16
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f8f3 	bl	800651c <USB_FlushTxFifo>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f91f 	bl	8006584 <USB_FlushRxFifo>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	461a      	mov	r2, r3
 8006358:	2300      	movs	r3, #0
 800635a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006362:	461a      	mov	r2, r3
 8006364:	2300      	movs	r3, #0
 8006366:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	461a      	mov	r2, r3
 8006370:	2300      	movs	r3, #0
 8006372:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006374:	2300      	movs	r3, #0
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	e043      	b.n	8006402 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800638c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006390:	d118      	bne.n	80063c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	461a      	mov	r2, r3
 80063a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	e013      	b.n	80063d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ba:	461a      	mov	r2, r3
 80063bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e008      	b.n	80063d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d0:	461a      	mov	r2, r3
 80063d2:	2300      	movs	r3, #0
 80063d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	461a      	mov	r2, r3
 80063e4:	2300      	movs	r3, #0
 80063e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f4:	461a      	mov	r2, r3
 80063f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3301      	adds	r3, #1
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	d3b7      	bcc.n	800637a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	e043      	b.n	8006498 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006426:	d118      	bne.n	800645a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	461a      	mov	r2, r3
 800643c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e013      	b.n	800646c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	461a      	mov	r2, r3
 8006452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e008      	b.n	800646c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	461a      	mov	r2, r3
 8006468:	2300      	movs	r3, #0
 800646a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	461a      	mov	r2, r3
 800647a:	2300      	movs	r3, #0
 800647c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	461a      	mov	r2, r3
 800648c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	3301      	adds	r3, #1
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	429a      	cmp	r2, r3
 800649e:	d3b7      	bcc.n	8006410 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f043 0210 	orr.w	r2, r3, #16
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <USB_DevInit+0x2c4>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f043 0208 	orr.w	r2, r3, #8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d107      	bne.n	8006508 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006500:	f043 0304 	orr.w	r3, r3, #4
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006508:	7dfb      	ldrb	r3, [r7, #23]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006514:	b004      	add	sp, #16
 8006516:	4770      	bx	lr
 8006518:	803c3800 	.word	0x803c3800

0800651c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a13      	ldr	r2, [pc, #76]	; (8006580 <USB_FlushTxFifo+0x64>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e01b      	b.n	8006574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	daf2      	bge.n	800652a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	019b      	lsls	r3, r3, #6
 800654c:	f043 0220 	orr.w	r2, r3, #32
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a08      	ldr	r2, [pc, #32]	; (8006580 <USB_FlushTxFifo+0x64>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e006      	b.n	8006574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b20      	cmp	r3, #32
 8006570:	d0f0      	beq.n	8006554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	00030d40 	.word	0x00030d40

08006584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a11      	ldr	r2, [pc, #68]	; (80065e0 <USB_FlushRxFifo+0x5c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e018      	b.n	80065d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	daf2      	bge.n	8006590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2210      	movs	r2, #16
 80065b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3301      	adds	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <USB_FlushRxFifo+0x5c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d901      	bls.n	80065c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e006      	b.n	80065d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d0f0      	beq.n	80065b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	00030d40 	.word	0x00030d40

080065e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006604:	4313      	orrs	r3, r2
 8006606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006616:	b480      	push	{r7}
 8006618:	b087      	sub	sp, #28
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0306 	and.w	r3, r3, #6
 800662e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d102      	bne.n	800663c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
 800663a:	e00a      	b.n	8006652 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d002      	beq.n	8006648 <USB_GetDevSpeed+0x32>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b06      	cmp	r3, #6
 8006646:	d102      	bne.n	800664e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006648:	2302      	movs	r3, #2
 800664a:	75fb      	strb	r3, [r7, #23]
 800664c:	e001      	b.n	8006652 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800664e:	230f      	movs	r3, #15
 8006650:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006652:	7dfb      	ldrb	r3, [r7, #23]
}
 8006654:	4618      	mov	r0, r3
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d13a      	bne.n	80066f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	b29b      	uxth	r3, r3
 8006694:	68f9      	ldr	r1, [r7, #12]
 8006696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800669a:	4313      	orrs	r3, r2
 800669c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d155      	bne.n	8006760 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	791b      	ldrb	r3, [r3, #4]
 80066ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	059b      	lsls	r3, r3, #22
 80066d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066d8:	4313      	orrs	r3, r2
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	e036      	b.n	8006760 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	2101      	movs	r1, #1
 8006704:	fa01 f303 	lsl.w	r3, r1, r3
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006710:	4313      	orrs	r3, r2
 8006712:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d11a      	bne.n	8006760 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	791b      	ldrb	r3, [r3, #4]
 8006744:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006746:	430b      	orrs	r3, r1
 8006748:	4313      	orrs	r3, r2
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	0151      	lsls	r1, r2, #5
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	440a      	add	r2, r1
 8006752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d161      	bne.n	8006850 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800679e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067a2:	d11f      	bne.n	80067e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	2101      	movs	r1, #1
 80067f6:	fa01 f303 	lsl.w	r3, r1, r3
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006804:	4013      	ands	r3, r2
 8006806:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	2101      	movs	r1, #1
 800681a:	fa01 f303 	lsl.w	r3, r1, r3
 800681e:	b29b      	uxth	r3, r3
 8006820:	43db      	mvns	r3, r3
 8006822:	68f9      	ldr	r1, [r7, #12]
 8006824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006828:	4013      	ands	r3, r2
 800682a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	0159      	lsls	r1, r3, #5
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	440b      	add	r3, r1
 8006842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006846:	4619      	mov	r1, r3
 8006848:	4b35      	ldr	r3, [pc, #212]	; (8006920 <USB_DeactivateEndpoint+0x1b0>)
 800684a:	4013      	ands	r3, r2
 800684c:	600b      	str	r3, [r1, #0]
 800684e:	e060      	b.n	8006912 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006866:	d11f      	bne.n	80068a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	440a      	add	r2, r1
 800687e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006886:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	440a      	add	r2, r1
 800689e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	2101      	movs	r1, #1
 80068ba:	fa01 f303 	lsl.w	r3, r1, r3
 80068be:	041b      	lsls	r3, r3, #16
 80068c0:	43db      	mvns	r3, r3
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c8:	4013      	ands	r3, r2
 80068ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	2101      	movs	r1, #1
 80068de:	fa01 f303 	lsl.w	r3, r1, r3
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	43db      	mvns	r3, r3
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ec:	4013      	ands	r3, r2
 80068ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	0159      	lsls	r1, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	440b      	add	r3, r1
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	4619      	mov	r1, r3
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <USB_DeactivateEndpoint+0x1b4>)
 800690e:	4013      	ands	r3, r2
 8006910:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	ec337800 	.word	0xec337800
 8006924:	eff37800 	.word	0xeff37800

08006928 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	; 0x28
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b01      	cmp	r3, #1
 8006946:	f040 815c 	bne.w	8006c02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d132      	bne.n	80069b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006970:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006994:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b0:	0cdb      	lsrs	r3, r3, #19
 80069b2:	04db      	lsls	r3, r3, #19
 80069b4:	6113      	str	r3, [r2, #16]
 80069b6:	e074      	b.n	8006aa2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d2:	0cdb      	lsrs	r3, r3, #19
 80069d4:	04db      	lsls	r3, r3, #19
 80069d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	440b      	add	r3, r1
 8006a14:	1e59      	subs	r1, r3, #1
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a20:	4b9d      	ldr	r3, [pc, #628]	; (8006c98 <USB_EPStartXfer+0x370>)
 8006a22:	400b      	ands	r3, r1
 8006a24:	69b9      	ldr	r1, [r7, #24]
 8006a26:	0148      	lsls	r0, r1, #5
 8006a28:	69f9      	ldr	r1, [r7, #28]
 8006a2a:	4401      	add	r1, r0
 8006a2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a4a:	69b9      	ldr	r1, [r7, #24]
 8006a4c:	0148      	lsls	r0, r1, #5
 8006a4e:	69f9      	ldr	r1, [r7, #28]
 8006a50:	4401      	add	r1, r0
 8006a52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a56:	4313      	orrs	r3, r2
 8006a58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	791b      	ldrb	r3, [r3, #4]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d11f      	bne.n	8006aa2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aa0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d14b      	bne.n	8006b40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d009      	beq.n	8006ac4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	461a      	mov	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	791b      	ldrb	r3, [r3, #4]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d128      	bne.n	8006b1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	e00f      	b.n	8006b1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e133      	b.n	8006da8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	791b      	ldrb	r3, [r3, #4]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d015      	beq.n	8006b94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 811b 	beq.w	8006da8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	2101      	movs	r1, #1
 8006b84:	fa01 f303 	lsl.w	r3, r1, r3
 8006b88:	69f9      	ldr	r1, [r7, #28]
 8006b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	634b      	str	r3, [r1, #52]	; 0x34
 8006b92:	e109      	b.n	8006da8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d110      	bne.n	8006bc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	e00f      	b.n	8006be6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6919      	ldr	r1, [r3, #16]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	b298      	uxth	r0, r3
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fade 	bl	80071bc <USB_WritePacket>
 8006c00:	e0d2      	b.n	8006da8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1c:	0cdb      	lsrs	r3, r3, #19
 8006c1e:	04db      	lsls	r3, r3, #19
 8006c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d126      	bne.n	8006c9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c64:	69b9      	ldr	r1, [r7, #24]
 8006c66:	0148      	lsls	r0, r1, #5
 8006c68:	69f9      	ldr	r1, [r7, #28]
 8006c6a:	4401      	add	r1, r0
 8006c6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c70:	4313      	orrs	r3, r2
 8006c72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c92:	6113      	str	r3, [r2, #16]
 8006c94:	e03a      	b.n	8006d0c <USB_EPStartXfer+0x3e4>
 8006c96:	bf00      	nop
 8006c98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	1e5a      	subs	r2, r3, #1
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	8afa      	ldrh	r2, [r7, #22]
 8006cb8:	fb03 f202 	mul.w	r2, r3, r2
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	8afb      	ldrh	r3, [r7, #22]
 8006cd0:	04d9      	lsls	r1, r3, #19
 8006cd2:	4b38      	ldr	r3, [pc, #224]	; (8006db4 <USB_EPStartXfer+0x48c>)
 8006cd4:	400b      	ands	r3, r1
 8006cd6:	69b9      	ldr	r1, [r7, #24]
 8006cd8:	0148      	lsls	r0, r1, #5
 8006cda:	69f9      	ldr	r1, [r7, #28]
 8006cdc:	4401      	add	r1, r0
 8006cde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cfc:	69b9      	ldr	r1, [r7, #24]
 8006cfe:	0148      	lsls	r0, r1, #5
 8006d00:	69f9      	ldr	r1, [r7, #28]
 8006d02:	4401      	add	r1, r0
 8006d04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d10d      	bne.n	8006d2e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6919      	ldr	r1, [r3, #16]
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2a:	460a      	mov	r2, r1
 8006d2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	791b      	ldrb	r3, [r3, #4]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d128      	bne.n	8006d88 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d110      	bne.n	8006d68 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e00f      	b.n	8006d88 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006da6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	1ff80000 	.word	0x1ff80000

08006db8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	f040 80ce 	bne.w	8006f76 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d132      	bne.n	8006e48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e40:	0cdb      	lsrs	r3, r3, #19
 8006e42:	04db      	lsls	r3, r3, #19
 8006e44:	6113      	str	r3, [r2, #16]
 8006e46:	e04e      	b.n	8006ee6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e62:	0cdb      	lsrs	r3, r3, #19
 8006e64:	04db      	lsls	r3, r3, #19
 8006e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d903      	bls.n	8006ea0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed6:	6939      	ldr	r1, [r7, #16]
 8006ed8:	0148      	lsls	r0, r1, #5
 8006eda:	6979      	ldr	r1, [r7, #20]
 8006edc:	4401      	add	r1, r0
 8006ede:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d11e      	bne.n	8006f2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f00:	461a      	mov	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	e097      	b.n	800705a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 8083 	beq.w	800705a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	2101      	movs	r1, #1
 8006f66:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6a:	6979      	ldr	r1, [r7, #20]
 8006f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f70:	4313      	orrs	r3, r2
 8006f72:	634b      	str	r3, [r1, #52]	; 0x34
 8006f74:	e071      	b.n	800705a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f90:	0cdb      	lsrs	r3, r3, #19
 8006f92:	04db      	lsls	r3, r3, #19
 8006f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffe:	691a      	ldr	r2, [r3, #16]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007008:	6939      	ldr	r1, [r7, #16]
 800700a:	0148      	lsls	r0, r1, #5
 800700c:	6979      	ldr	r1, [r7, #20]
 800700e:	4401      	add	r1, r0
 8007010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007014:	4313      	orrs	r3, r2
 8007016:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d10d      	bne.n	800703a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d009      	beq.n	800703a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	6919      	ldr	r1, [r3, #16]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	460a      	mov	r2, r1
 8007038:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007054:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007058:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d14a      	bne.n	800711c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800709a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800709e:	f040 8086 	bne.w	80071ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	7812      	ldrb	r2, [r2, #0]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	7812      	ldrb	r2, [r2, #0]
 80070da:	0151      	lsls	r1, r2, #5
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	440a      	add	r2, r1
 80070e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3301      	adds	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d902      	bls.n	8007100 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
          break;
 80070fe:	e056      	b.n	80071ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007118:	d0e7      	beq.n	80070ea <USB_EPStopXfer+0x82>
 800711a:	e048      	b.n	80071ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007134:	d13b      	bne.n	80071ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	7812      	ldrb	r2, [r2, #0]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007154:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007158:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	7812      	ldrb	r2, [r2, #0]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	440a      	add	r2, r1
 8007174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800717c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f242 7210 	movw	r2, #10000	; 0x2710
 800718a:	4293      	cmp	r3, r2
 800718c:	d902      	bls.n	8007194 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
          break;
 8007192:	e00c      	b.n	80071ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ac:	d0e7      	beq.n	800717e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071bc:	b480      	push	{r7}
 80071be:	b089      	sub	sp, #36	; 0x24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4611      	mov	r1, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	460b      	mov	r3, r1
 80071cc:	71fb      	strb	r3, [r7, #7]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d123      	bne.n	800722a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071e2:	88bb      	ldrh	r3, [r7, #4]
 80071e4:	3303      	adds	r3, #3
 80071e6:	089b      	lsrs	r3, r3, #2
 80071e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071ea:	2300      	movs	r3, #0
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	e018      	b.n	8007222 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	031a      	lsls	r2, r3, #12
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fc:	461a      	mov	r2, r3
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	3301      	adds	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	3301      	adds	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	3301      	adds	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	3301      	adds	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	3301      	adds	r3, #1
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	429a      	cmp	r2, r3
 8007228:	d3e2      	bcc.n	80071f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3724      	adds	r7, #36	; 0x24
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007238:	b480      	push	{r7}
 800723a:	b08b      	sub	sp, #44	; 0x2c
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	089b      	lsrs	r3, r3, #2
 8007252:	b29b      	uxth	r3, r3
 8007254:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800725e:	2300      	movs	r3, #0
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	e014      	b.n	800728e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	3301      	adds	r3, #1
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	3301      	adds	r3, #1
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	3301      	adds	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	3301      	adds	r3, #1
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	3301      	adds	r3, #1
 800728c:	623b      	str	r3, [r7, #32]
 800728e:	6a3a      	ldr	r2, [r7, #32]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	429a      	cmp	r2, r3
 8007294:	d3e6      	bcc.n	8007264 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007296:	8bfb      	ldrh	r3, [r7, #30]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01e      	beq.n	80072da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a6:	461a      	mov	r2, r3
 80072a8:	f107 0310 	add.w	r3, r7, #16
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	701a      	strb	r2, [r3, #0]
      i++;
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	3301      	adds	r3, #1
 80072c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	3301      	adds	r3, #1
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80072ce:	8bfb      	ldrh	r3, [r7, #30]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072d4:	8bfb      	ldrh	r3, [r7, #30]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1ea      	bne.n	80072b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072dc:	4618      	mov	r0, r3
 80072de:	372c      	adds	r7, #44	; 0x2c
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d12c      	bne.n	800735e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	db12      	blt.n	800733c <USB_EPSetStall+0x54>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00f      	beq.n	800733c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	440a      	add	r2, r1
 8007332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800733a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	e02b      	b.n	80073b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	db12      	blt.n	8007396 <USB_EPSetStall+0xae>
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00f      	beq.n	8007396 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007390:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007394:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d128      	bne.n	8007432 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	791b      	ldrb	r3, [r3, #4]
 8007404:	2b03      	cmp	r3, #3
 8007406:	d003      	beq.n	8007410 <USB_EPClearStall+0x4c>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d138      	bne.n	8007482 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800742a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	e027      	b.n	8007482 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007450:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d003      	beq.n	8007462 <USB_EPClearStall+0x9e>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	791b      	ldrb	r3, [r3, #4]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d10f      	bne.n	8007482 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007480:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80074c4:	68f9      	ldr	r1, [r7, #12]
 80074c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074ca:	4313      	orrs	r3, r2
 80074cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800750a:	f023 0302 	bic.w	r3, r3, #2
 800750e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007538:	f023 0303 	bic.w	r3, r3, #3
 800753c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800754c:	f043 0302 	orr.w	r3, r3, #2
 8007550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4013      	ands	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007578:	68fb      	ldr	r3, [r7, #12]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	4013      	ands	r3, r2
 80075a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	0c1b      	lsrs	r3, r3, #16
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	4013      	ands	r3, r2
 80075dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	b29b      	uxth	r3, r3
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4013      	ands	r3, r2
 800761a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800761c:	68bb      	ldr	r3, [r7, #8]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	fa22 f303 	lsr.w	r3, r2, r3
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	b2db      	uxtb	r3, r3
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4013      	ands	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007678:	68bb      	ldr	r3, [r7, #8]
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0301 	and.w	r3, r3, #1
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076c0:	f023 0307 	bic.w	r3, r3, #7
 80076c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	460b      	mov	r3, r1
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	333c      	adds	r3, #60	; 0x3c
 80076fe:	3304      	adds	r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <USB_EP0_OutStart+0xb8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d90a      	bls.n	8007722 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800771c:	d101      	bne.n	8007722 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e037      	b.n	8007792 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007728:	461a      	mov	r2, r3
 800772a:	2300      	movs	r3, #0
 800772c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007750:	f043 0318 	orr.w	r3, r3, #24
 8007754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007764:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007768:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d10f      	bne.n	8007790 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800778e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	4f54300a 	.word	0x4f54300a

080077a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3301      	adds	r3, #1
 80077b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4a13      	ldr	r2, [pc, #76]	; (8007808 <USB_CoreReset+0x64>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d901      	bls.n	80077c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e01b      	b.n	80077fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	daf2      	bge.n	80077b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f043 0201 	orr.w	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4a09      	ldr	r2, [pc, #36]	; (8007808 <USB_CoreReset+0x64>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d901      	bls.n	80077ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e006      	b.n	80077fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d0f0      	beq.n	80077da <USB_CoreReset+0x36>

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	00030d40 	.word	0x00030d40

0800780c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007818:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800781c:	f002 fc8a 	bl	800a134 <USBD_static_malloc>
 8007820:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	32b0      	adds	r2, #176	; 0xb0
 8007832:	2100      	movs	r1, #0
 8007834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007838:	2302      	movs	r3, #2
 800783a:	e0d4      	b.n	80079e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800783c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007840:	2100      	movs	r1, #0
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f002 fcf2 	bl	800a22c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	32b0      	adds	r2, #176	; 0xb0
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	32b0      	adds	r2, #176	; 0xb0
 8007862:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7c1b      	ldrb	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d138      	bne.n	80078e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007874:	4b5e      	ldr	r3, [pc, #376]	; (80079f0 <USBD_CDC_Init+0x1e4>)
 8007876:	7819      	ldrb	r1, [r3, #0]
 8007878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800787c:	2202      	movs	r2, #2
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f002 fb35 	bl	8009eee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007884:	4b5a      	ldr	r3, [pc, #360]	; (80079f0 <USBD_CDC_Init+0x1e4>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	f003 020f 	and.w	r2, r3, #15
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	3324      	adds	r3, #36	; 0x24
 800789a:	2201      	movs	r2, #1
 800789c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800789e:	4b55      	ldr	r3, [pc, #340]	; (80079f4 <USBD_CDC_Init+0x1e8>)
 80078a0:	7819      	ldrb	r1, [r3, #0]
 80078a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078a6:	2202      	movs	r2, #2
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f002 fb20 	bl	8009eee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078ae:	4b51      	ldr	r3, [pc, #324]	; (80079f4 <USBD_CDC_Init+0x1e8>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	f003 020f 	and.w	r2, r3, #15
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	440b      	add	r3, r1
 80078c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078c6:	2201      	movs	r2, #1
 80078c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078ca:	4b4b      	ldr	r3, [pc, #300]	; (80079f8 <USBD_CDC_Init+0x1ec>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	f003 020f 	and.w	r2, r3, #15
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	440b      	add	r3, r1
 80078de:	3326      	adds	r3, #38	; 0x26
 80078e0:	2210      	movs	r2, #16
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e035      	b.n	8007952 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078e6:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <USBD_CDC_Init+0x1e4>)
 80078e8:	7819      	ldrb	r1, [r3, #0]
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	2202      	movs	r2, #2
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f002 fafd 	bl	8009eee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078f4:	4b3e      	ldr	r3, [pc, #248]	; (80079f0 <USBD_CDC_Init+0x1e4>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	f003 020f 	and.w	r2, r3, #15
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	3324      	adds	r3, #36	; 0x24
 800790a:	2201      	movs	r2, #1
 800790c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800790e:	4b39      	ldr	r3, [pc, #228]	; (80079f4 <USBD_CDC_Init+0x1e8>)
 8007910:	7819      	ldrb	r1, [r3, #0]
 8007912:	2340      	movs	r3, #64	; 0x40
 8007914:	2202      	movs	r2, #2
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f002 fae9 	bl	8009eee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800791c:	4b35      	ldr	r3, [pc, #212]	; (80079f4 <USBD_CDC_Init+0x1e8>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f003 020f 	and.w	r2, r3, #15
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007934:	2201      	movs	r2, #1
 8007936:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007938:	4b2f      	ldr	r3, [pc, #188]	; (80079f8 <USBD_CDC_Init+0x1ec>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3326      	adds	r3, #38	; 0x26
 800794e:	2210      	movs	r2, #16
 8007950:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007952:	4b29      	ldr	r3, [pc, #164]	; (80079f8 <USBD_CDC_Init+0x1ec>)
 8007954:	7819      	ldrb	r1, [r3, #0]
 8007956:	2308      	movs	r3, #8
 8007958:	2203      	movs	r2, #3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f002 fac7 	bl	8009eee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <USBD_CDC_Init+0x1ec>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	f003 020f 	and.w	r2, r3, #15
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	440b      	add	r3, r1
 8007974:	3324      	adds	r3, #36	; 0x24
 8007976:	2201      	movs	r2, #1
 8007978:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	33b0      	adds	r3, #176	; 0xb0
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80079b0:	2302      	movs	r3, #2
 80079b2:	e018      	b.n	80079e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	7c1b      	ldrb	r3, [r3, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079bc:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <USBD_CDC_Init+0x1e8>)
 80079be:	7819      	ldrb	r1, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f002 fb7e 	bl	800a0cc <USBD_LL_PrepareReceive>
 80079d0:	e008      	b.n	80079e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <USBD_CDC_Init+0x1e8>)
 80079d4:	7819      	ldrb	r1, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f002 fb74 	bl	800a0cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20000093 	.word	0x20000093
 80079f4:	20000094 	.word	0x20000094
 80079f8:	20000095 	.word	0x20000095

080079fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a08:	4b3a      	ldr	r3, [pc, #232]	; (8007af4 <USBD_CDC_DeInit+0xf8>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f002 fa93 	bl	8009f3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a14:	4b37      	ldr	r3, [pc, #220]	; (8007af4 <USBD_CDC_DeInit+0xf8>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	3324      	adds	r3, #36	; 0x24
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a2e:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <USBD_CDC_DeInit+0xfc>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f002 fa80 	bl	8009f3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a3a:	4b2f      	ldr	r3, [pc, #188]	; (8007af8 <USBD_CDC_DeInit+0xfc>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f003 020f 	and.w	r2, r3, #15
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a52:	2200      	movs	r2, #0
 8007a54:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a56:	4b29      	ldr	r3, [pc, #164]	; (8007afc <USBD_CDC_DeInit+0x100>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f002 fa6c 	bl	8009f3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a62:	4b26      	ldr	r3, [pc, #152]	; (8007afc <USBD_CDC_DeInit+0x100>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f003 020f 	and.w	r2, r3, #15
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	2200      	movs	r2, #0
 8007a7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a7c:	4b1f      	ldr	r3, [pc, #124]	; (8007afc <USBD_CDC_DeInit+0x100>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	3326      	adds	r3, #38	; 0x26
 8007a92:	2200      	movs	r2, #0
 8007a94:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	32b0      	adds	r2, #176	; 0xb0
 8007aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01f      	beq.n	8007ae8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	33b0      	adds	r3, #176	; 0xb0
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	32b0      	adds	r2, #176	; 0xb0
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f002 fb40 	bl	800a150 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32b0      	adds	r2, #176	; 0xb0
 8007ada:	2100      	movs	r1, #0
 8007adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000093 	.word	0x20000093
 8007af8:	20000094 	.word	0x20000094
 8007afc:	20000095 	.word	0x20000095

08007b00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	32b0      	adds	r2, #176	; 0xb0
 8007b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e0bf      	b.n	8007cb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d050      	beq.n	8007bde <USBD_CDC_Setup+0xde>
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	f040 80af 	bne.w	8007ca0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d03a      	beq.n	8007bc0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b25b      	sxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	da1b      	bge.n	8007b8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	33b0      	adds	r3, #176	; 0xb0
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	88d2      	ldrh	r2, [r2, #6]
 8007b70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	88db      	ldrh	r3, [r3, #6]
 8007b76:	2b07      	cmp	r3, #7
 8007b78:	bf28      	it	cs
 8007b7a:	2307      	movcs	r3, #7
 8007b7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	89fa      	ldrh	r2, [r7, #14]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 fd89 	bl	800969c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b8a:	e090      	b.n	8007cae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	785a      	ldrb	r2, [r3, #1]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	88db      	ldrh	r3, [r3, #6]
 8007b9a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b9c:	d803      	bhi.n	8007ba6 <USBD_CDC_Setup+0xa6>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	88db      	ldrh	r3, [r3, #6]
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	e000      	b.n	8007ba8 <USBD_CDC_Setup+0xa8>
 8007ba6:	2240      	movs	r2, #64	; 0x40
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007bae:	6939      	ldr	r1, [r7, #16]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 fd9b 	bl	80096f4 <USBD_CtlPrepareRx>
      break;
 8007bbe:	e076      	b.n	8007cae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	33b0      	adds	r3, #176	; 0xb0
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	7850      	ldrb	r0, [r2, #1]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	4798      	blx	r3
      break;
 8007bdc:	e067      	b.n	8007cae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	2b0b      	cmp	r3, #11
 8007be4:	d851      	bhi.n	8007c8a <USBD_CDC_Setup+0x18a>
 8007be6:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <USBD_CDC_Setup+0xec>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c1d 	.word	0x08007c1d
 8007bf0:	08007c99 	.word	0x08007c99
 8007bf4:	08007c8b 	.word	0x08007c8b
 8007bf8:	08007c8b 	.word	0x08007c8b
 8007bfc:	08007c8b 	.word	0x08007c8b
 8007c00:	08007c8b 	.word	0x08007c8b
 8007c04:	08007c8b 	.word	0x08007c8b
 8007c08:	08007c8b 	.word	0x08007c8b
 8007c0c:	08007c8b 	.word	0x08007c8b
 8007c10:	08007c8b 	.word	0x08007c8b
 8007c14:	08007c47 	.word	0x08007c47
 8007c18:	08007c71 	.word	0x08007c71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d107      	bne.n	8007c38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c28:	f107 030a 	add.w	r3, r7, #10
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 fd33 	bl	800969c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c36:	e032      	b.n	8007c9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fcbd 	bl	80095ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	75fb      	strb	r3, [r7, #23]
          break;
 8007c44:	e02b      	b.n	8007c9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d107      	bne.n	8007c62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c52:	f107 030d 	add.w	r3, r7, #13
 8007c56:	2201      	movs	r2, #1
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 fd1e 	bl	800969c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c60:	e01d      	b.n	8007c9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fca8 	bl	80095ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c6e:	e016      	b.n	8007c9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d00f      	beq.n	8007c9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 fc9b 	bl	80095ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007c84:	2303      	movs	r3, #3
 8007c86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c88:	e008      	b.n	8007c9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 fc94 	bl	80095ba <USBD_CtlError>
          ret = USBD_FAIL;
 8007c92:	2303      	movs	r3, #3
 8007c94:	75fb      	strb	r3, [r7, #23]
          break;
 8007c96:	e002      	b.n	8007c9e <USBD_CDC_Setup+0x19e>
          break;
 8007c98:	bf00      	nop
 8007c9a:	e008      	b.n	8007cae <USBD_CDC_Setup+0x1ae>
          break;
 8007c9c:	bf00      	nop
      }
      break;
 8007c9e:	e006      	b.n	8007cae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 fc89 	bl	80095ba <USBD_CtlError>
      ret = USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	75fb      	strb	r3, [r7, #23]
      break;
 8007cac:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	32b0      	adds	r2, #176	; 0xb0
 8007cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e065      	b.n	8007dae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	32b0      	adds	r2, #176	; 0xb0
 8007cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	f003 020f 	and.w	r2, r3, #15
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	3318      	adds	r3, #24
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d02f      	beq.n	8007d6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	f003 020f 	and.w	r2, r3, #15
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	3318      	adds	r3, #24
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	f003 010f 	and.w	r1, r3, #15
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	440b      	add	r3, r1
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4403      	add	r3, r0
 8007d34:	3348      	adds	r3, #72	; 0x48
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d3c:	fb01 f303 	mul.w	r3, r1, r3
 8007d40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d112      	bne.n	8007d6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	f003 020f 	and.w	r2, r3, #15
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	3318      	adds	r3, #24
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d5e:	78f9      	ldrb	r1, [r7, #3]
 8007d60:	2300      	movs	r3, #0
 8007d62:	2200      	movs	r2, #0
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f002 f990 	bl	800a08a <USBD_LL_Transmit>
 8007d6a:	e01f      	b.n	8007dac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	33b0      	adds	r3, #176	; 0xb0
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d010      	beq.n	8007dac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	33b0      	adds	r3, #176	; 0xb0
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	32b0      	adds	r2, #176	; 0xb0
 8007dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	32b0      	adds	r2, #176	; 0xb0
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e01a      	b.n	8007e1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f002 f98e 	bl	800a10e <USBD_LL_GetRxDataSize>
 8007df2:	4602      	mov	r2, r0
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	33b0      	adds	r3, #176	; 0xb0
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	32b0      	adds	r2, #176	; 0xb0
 8007e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e025      	b.n	8007e94 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	33b0      	adds	r3, #176	; 0xb0
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01a      	beq.n	8007e92 <USBD_CDC_EP0_RxReady+0x6c>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e62:	2bff      	cmp	r3, #255	; 0xff
 8007e64:	d015      	beq.n	8007e92 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	33b0      	adds	r3, #176	; 0xb0
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e86:	b292      	uxth	r2, r2
 8007e88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	22ff      	movs	r2, #255	; 0xff
 8007e8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ea4:	2182      	movs	r1, #130	; 0x82
 8007ea6:	4818      	ldr	r0, [pc, #96]	; (8007f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ea8:	f000 fd4f 	bl	800894a <USBD_GetEpDesc>
 8007eac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4815      	ldr	r0, [pc, #84]	; (8007f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007eb2:	f000 fd4a 	bl	800894a <USBD_GetEpDesc>
 8007eb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007eb8:	2181      	movs	r1, #129	; 0x81
 8007eba:	4813      	ldr	r0, [pc, #76]	; (8007f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ebc:	f000 fd45 	bl	800894a <USBD_GetEpDesc>
 8007ec0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2210      	movs	r2, #16
 8007ecc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d006      	beq.n	8007ee2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007edc:	711a      	strb	r2, [r3, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d006      	beq.n	8007ef6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef0:	711a      	strb	r2, [r3, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2243      	movs	r2, #67	; 0x43
 8007efa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007efc:	4b02      	ldr	r3, [pc, #8]	; (8007f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000050 	.word	0x20000050

08007f0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f14:	2182      	movs	r1, #130	; 0x82
 8007f16:	4818      	ldr	r0, [pc, #96]	; (8007f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f18:	f000 fd17 	bl	800894a <USBD_GetEpDesc>
 8007f1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4815      	ldr	r0, [pc, #84]	; (8007f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f22:	f000 fd12 	bl	800894a <USBD_GetEpDesc>
 8007f26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f28:	2181      	movs	r1, #129	; 0x81
 8007f2a:	4813      	ldr	r0, [pc, #76]	; (8007f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f2c:	f000 fd0d 	bl	800894a <USBD_GetEpDesc>
 8007f30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2200      	movs	r2, #0
 8007f48:	711a      	strb	r2, [r3, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f042 0202 	orr.w	r2, r2, #2
 8007f50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d006      	beq.n	8007f66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	711a      	strb	r2, [r3, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f042 0202 	orr.w	r2, r2, #2
 8007f64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2243      	movs	r2, #67	; 0x43
 8007f6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f6c:	4b02      	ldr	r3, [pc, #8]	; (8007f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000050 	.word	0x20000050

08007f7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f84:	2182      	movs	r1, #130	; 0x82
 8007f86:	4818      	ldr	r0, [pc, #96]	; (8007fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f88:	f000 fcdf 	bl	800894a <USBD_GetEpDesc>
 8007f8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f8e:	2101      	movs	r1, #1
 8007f90:	4815      	ldr	r0, [pc, #84]	; (8007fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f92:	f000 fcda 	bl	800894a <USBD_GetEpDesc>
 8007f96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f98:	2181      	movs	r1, #129	; 0x81
 8007f9a:	4813      	ldr	r0, [pc, #76]	; (8007fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f9c:	f000 fcd5 	bl	800894a <USBD_GetEpDesc>
 8007fa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2210      	movs	r2, #16
 8007fac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d006      	beq.n	8007fc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fbc:	711a      	strb	r2, [r3, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d006      	beq.n	8007fd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fd0:	711a      	strb	r2, [r3, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2243      	movs	r2, #67	; 0x43
 8007fda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fdc:	4b02      	ldr	r3, [pc, #8]	; (8007fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000050 	.word	0x20000050

08007fec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ffa:	4b03      	ldr	r3, [pc, #12]	; (8008008 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	2000000c 	.word	0x2000000c

0800800c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	e009      	b.n	8008034 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	33b0      	adds	r3, #176	; 0xb0
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	32b0      	adds	r2, #176	; 0xb0
 8008056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	e008      	b.n	8008078 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	32b0      	adds	r2, #176	; 0xb0
 8008098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e004      	b.n	80080b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
	...

080080c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32b0      	adds	r2, #176	; 0xb0
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80080d8:	2301      	movs	r3, #1
 80080da:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	32b0      	adds	r2, #176	; 0xb0
 80080e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e025      	b.n	800813e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d11f      	bne.n	800813c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2201      	movs	r2, #1
 8008100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008104:	4b10      	ldr	r3, [pc, #64]	; (8008148 <USBD_CDC_TransmitPacket+0x88>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f003 020f 	and.w	r2, r3, #15
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4403      	add	r3, r0
 800811e:	3318      	adds	r3, #24
 8008120:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <USBD_CDC_TransmitPacket+0x88>)
 8008124:	7819      	ldrb	r1, [r3, #0]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 ffa9 	bl	800a08a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20000093 	.word	0x20000093

0800814c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32b0      	adds	r2, #176	; 0xb0
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32b0      	adds	r2, #176	; 0xb0
 800816e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008176:	2303      	movs	r3, #3
 8008178:	e018      	b.n	80081ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7c1b      	ldrb	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <USBD_CDC_ReceivePacket+0x68>)
 8008184:	7819      	ldrb	r1, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800818c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 ff9b 	bl	800a0cc <USBD_LL_PrepareReceive>
 8008196:	e008      	b.n	80081aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008198:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <USBD_CDC_ReceivePacket+0x68>)
 800819a:	7819      	ldrb	r1, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 ff91 	bl	800a0cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000094 	.word	0x20000094

080081b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	4613      	mov	r3, r2
 80081c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e01f      	b.n	8008210 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	79fa      	ldrb	r2, [r7, #7]
 8008202:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f001 fe0b 	bl	8009e20 <USBD_LL_Init>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d101      	bne.n	8008230 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800822c:	2303      	movs	r3, #3
 800822e:	e025      	b.n	800827c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	32ae      	adds	r2, #174	; 0xae
 8008242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00f      	beq.n	800826c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	32ae      	adds	r2, #174	; 0xae
 8008256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	f107 020e 	add.w	r2, r7, #14
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
 8008264:	4602      	mov	r2, r0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 fe13 	bl	8009eb8 <USBD_LL_Start>
 8008292:	4603      	mov	r3, r0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d009      	beq.n	80082e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	4611      	mov	r1, r2
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	4611      	mov	r1, r2
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	4618      	mov	r0, r3
 8008332:	f001 f908 	bl	8009546 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008344:	461a      	mov	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008352:	f003 031f 	and.w	r3, r3, #31
 8008356:	2b02      	cmp	r3, #2
 8008358:	d01a      	beq.n	8008390 <USBD_LL_SetupStage+0x72>
 800835a:	2b02      	cmp	r3, #2
 800835c:	d822      	bhi.n	80083a4 <USBD_LL_SetupStage+0x86>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <USBD_LL_SetupStage+0x4a>
 8008362:	2b01      	cmp	r3, #1
 8008364:	d00a      	beq.n	800837c <USBD_LL_SetupStage+0x5e>
 8008366:	e01d      	b.n	80083a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fb5f 	bl	8008a34 <USBD_StdDevReq>
 8008376:	4603      	mov	r3, r0
 8008378:	73fb      	strb	r3, [r7, #15]
      break;
 800837a:	e020      	b.n	80083be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fbc7 	bl	8008b18 <USBD_StdItfReq>
 800838a:	4603      	mov	r3, r0
 800838c:	73fb      	strb	r3, [r7, #15]
      break;
 800838e:	e016      	b.n	80083be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fc29 	bl	8008bf0 <USBD_StdEPReq>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
      break;
 80083a2:	e00c      	b.n	80083be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fde0 	bl	8009f78 <USBD_LL_StallEP>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]
      break;
 80083bc:	bf00      	nop
  }

  return ret;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	460b      	mov	r3, r1
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d16e      	bne.n	80084be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	f040 8098 	bne.w	8008524 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d913      	bls.n	8008428 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	1ad2      	subs	r2, r2, r3
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	4293      	cmp	r3, r2
 8008418:	bf28      	it	cs
 800841a:	4613      	movcs	r3, r2
 800841c:	461a      	mov	r2, r3
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f001 f984 	bl	800972e <USBD_CtlContinueRx>
 8008426:	e07d      	b.n	8008524 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2b02      	cmp	r3, #2
 8008434:	d014      	beq.n	8008460 <USBD_LL_DataOutStage+0x98>
 8008436:	2b02      	cmp	r3, #2
 8008438:	d81d      	bhi.n	8008476 <USBD_LL_DataOutStage+0xae>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <USBD_LL_DataOutStage+0x7c>
 800843e:	2b01      	cmp	r3, #1
 8008440:	d003      	beq.n	800844a <USBD_LL_DataOutStage+0x82>
 8008442:	e018      	b.n	8008476 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	75bb      	strb	r3, [r7, #22]
            break;
 8008448:	e018      	b.n	800847c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008450:	b2db      	uxtb	r3, r3
 8008452:	4619      	mov	r1, r3
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 fa5e 	bl	8008916 <USBD_CoreFindIF>
 800845a:	4603      	mov	r3, r0
 800845c:	75bb      	strb	r3, [r7, #22]
            break;
 800845e:	e00d      	b.n	800847c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008466:	b2db      	uxtb	r3, r3
 8008468:	4619      	mov	r1, r3
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 fa60 	bl	8008930 <USBD_CoreFindEP>
 8008470:	4603      	mov	r3, r0
 8008472:	75bb      	strb	r3, [r7, #22]
            break;
 8008474:	e002      	b.n	800847c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	75bb      	strb	r3, [r7, #22]
            break;
 800847a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800847c:	7dbb      	ldrb	r3, [r7, #22]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d119      	bne.n	80084b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b03      	cmp	r3, #3
 800848c:	d113      	bne.n	80084b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800848e:	7dba      	ldrb	r2, [r7, #22]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	32ae      	adds	r2, #174	; 0xae
 8008494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00b      	beq.n	80084b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800849e:	7dba      	ldrb	r2, [r7, #22]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084a6:	7dba      	ldrb	r2, [r7, #22]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	32ae      	adds	r2, #174	; 0xae
 80084ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f001 f94a 	bl	8009750 <USBD_CtlSendStatus>
 80084bc:	e032      	b.n	8008524 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fa31 	bl	8008930 <USBD_CoreFindEP>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084d2:	7dbb      	ldrb	r3, [r7, #22]
 80084d4:	2bff      	cmp	r3, #255	; 0xff
 80084d6:	d025      	beq.n	8008524 <USBD_LL_DataOutStage+0x15c>
 80084d8:	7dbb      	ldrb	r3, [r7, #22]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d122      	bne.n	8008524 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d117      	bne.n	800851a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80084ea:	7dba      	ldrb	r2, [r7, #22]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	32ae      	adds	r2, #174	; 0xae
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00f      	beq.n	800851a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80084fa:	7dba      	ldrb	r2, [r7, #22]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008502:	7dba      	ldrb	r2, [r7, #22]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	32ae      	adds	r2, #174	; 0xae
 8008508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	7afa      	ldrb	r2, [r7, #11]
 8008510:	4611      	mov	r1, r2
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	4798      	blx	r3
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	e000      	b.n	8008526 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b086      	sub	sp, #24
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	460b      	mov	r3, r1
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800853c:	7afb      	ldrb	r3, [r7, #11]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d16f      	bne.n	8008622 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3314      	adds	r3, #20
 8008546:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800854e:	2b02      	cmp	r3, #2
 8008550:	d15a      	bne.n	8008608 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	429a      	cmp	r2, r3
 800855c:	d914      	bls.n	8008588 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	461a      	mov	r2, r3
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f001 f8ac 	bl	80096d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800857a:	2300      	movs	r3, #0
 800857c:	2200      	movs	r2, #0
 800857e:	2100      	movs	r1, #0
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f001 fda3 	bl	800a0cc <USBD_LL_PrepareReceive>
 8008586:	e03f      	b.n	8008608 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	429a      	cmp	r2, r3
 8008592:	d11c      	bne.n	80085ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800859c:	429a      	cmp	r2, r3
 800859e:	d316      	bcc.n	80085ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d20f      	bcs.n	80085ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085ae:	2200      	movs	r2, #0
 80085b0:	2100      	movs	r1, #0
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f001 f88d 	bl	80096d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085c0:	2300      	movs	r3, #0
 80085c2:	2200      	movs	r2, #0
 80085c4:	2100      	movs	r1, #0
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f001 fd80 	bl	800a0cc <USBD_LL_PrepareReceive>
 80085cc:	e01c      	b.n	8008608 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d10f      	bne.n	80085fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085fa:	2180      	movs	r1, #128	; 0x80
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f001 fcbb 	bl	8009f78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f001 f8b7 	bl	8009776 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d03a      	beq.n	8008688 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fe42 	bl	800829c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008620:	e032      	b.n	8008688 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008622:	7afb      	ldrb	r3, [r7, #11]
 8008624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008628:	b2db      	uxtb	r3, r3
 800862a:	4619      	mov	r1, r3
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f97f 	bl	8008930 <USBD_CoreFindEP>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	2bff      	cmp	r3, #255	; 0xff
 800863a:	d025      	beq.n	8008688 <USBD_LL_DataInStage+0x15a>
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d122      	bne.n	8008688 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d11c      	bne.n	8008688 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800864e:	7dfa      	ldrb	r2, [r7, #23]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	32ae      	adds	r2, #174	; 0xae
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d014      	beq.n	8008688 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800865e:	7dfa      	ldrb	r2, [r7, #23]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008666:	7dfa      	ldrb	r2, [r7, #23]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	32ae      	adds	r2, #174	; 0xae
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	7afa      	ldrb	r2, [r7, #11]
 8008674:	4611      	mov	r1, r2
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800867e:	7dbb      	ldrb	r3, [r7, #22]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008684:	7dbb      	ldrb	r3, [r7, #22]
 8008686:	e000      	b.n	800868a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d014      	beq.n	80086f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00e      	beq.n	80086f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6852      	ldr	r2, [r2, #4]
 80086e6:	b2d2      	uxtb	r2, r2
 80086e8:	4611      	mov	r1, r2
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	4798      	blx	r3
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80086f4:	2303      	movs	r3, #3
 80086f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086f8:	2340      	movs	r3, #64	; 0x40
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fbf5 	bl	8009eee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2240      	movs	r2, #64	; 0x40
 8008710:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008714:	2340      	movs	r3, #64	; 0x40
 8008716:	2200      	movs	r2, #0
 8008718:	2180      	movs	r1, #128	; 0x80
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fbe7 	bl	8009eee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2240      	movs	r2, #64	; 0x40
 800872a:	621a      	str	r2, [r3, #32]

  return ret;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008764:	b2da      	uxtb	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2204      	movs	r2, #4
 8008770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b04      	cmp	r3, #4
 8008794:	d106      	bne.n	80087a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800879c:	b2da      	uxtb	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d110      	bne.n	80087e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	32ae      	adds	r2, #174	; 0xae
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008810:	2303      	movs	r3, #3
 8008812:	e01c      	b.n	800884e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b03      	cmp	r3, #3
 800881e:	d115      	bne.n	800884c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	32ae      	adds	r2, #174	; 0xae
 800882a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	32ae      	adds	r2, #174	; 0xae
 800883e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	78fa      	ldrb	r2, [r7, #3]
 8008846:	4611      	mov	r1, r2
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	32ae      	adds	r2, #174	; 0xae
 800886c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008874:	2303      	movs	r3, #3
 8008876:	e01c      	b.n	80088b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b03      	cmp	r3, #3
 8008882:	d115      	bne.n	80088b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32ae      	adds	r2, #174	; 0xae
 800888e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	32ae      	adds	r2, #174	; 0xae
 80088a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	4611      	mov	r1, r2
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6852      	ldr	r2, [r2, #4]
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	4611      	mov	r1, r2
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	4798      	blx	r3
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008908:	2303      	movs	r3, #3
 800890a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008922:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800893c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800893e:	4618      	mov	r0, r3
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b086      	sub	sp, #24
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	460b      	mov	r3, r1
 8008954:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	885b      	ldrh	r3, [r3, #2]
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b29b      	uxth	r3, r3
 800896e:	429a      	cmp	r2, r3
 8008970:	d920      	bls.n	80089b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800897a:	e013      	b.n	80089a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800897c:	f107 030a 	add.w	r3, r7, #10
 8008980:	4619      	mov	r1, r3
 8008982:	6978      	ldr	r0, [r7, #20]
 8008984:	f000 f81b 	bl	80089be <USBD_GetNextDesc>
 8008988:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	2b05      	cmp	r3, #5
 8008990:	d108      	bne.n	80089a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	789b      	ldrb	r3, [r3, #2]
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	429a      	cmp	r2, r3
 800899e:	d008      	beq.n	80089b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	885b      	ldrh	r3, [r3, #2]
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	897b      	ldrh	r3, [r7, #10]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d8e5      	bhi.n	800897c <USBD_GetEpDesc+0x32>
 80089b0:	e000      	b.n	80089b4 <USBD_GetEpDesc+0x6a>
          break;
 80089b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80089b4:	693b      	ldr	r3, [r7, #16]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80089be:	b480      	push	{r7}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	881a      	ldrh	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	b29a      	uxth	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4413      	add	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80089ea:	68fb      	ldr	r3, [r7, #12]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a16:	8a3b      	ldrh	r3, [r7, #16]
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	b21a      	sxth	r2, r3
 8008a1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	b21b      	sxth	r3, r3
 8008a24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a26:	89fb      	ldrh	r3, [r7, #14]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a4a:	2b40      	cmp	r3, #64	; 0x40
 8008a4c:	d005      	beq.n	8008a5a <USBD_StdDevReq+0x26>
 8008a4e:	2b40      	cmp	r3, #64	; 0x40
 8008a50:	d857      	bhi.n	8008b02 <USBD_StdDevReq+0xce>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00f      	beq.n	8008a76 <USBD_StdDevReq+0x42>
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d153      	bne.n	8008b02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	32ae      	adds	r2, #174	; 0xae
 8008a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
      break;
 8008a74:	e04a      	b.n	8008b0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	2b09      	cmp	r3, #9
 8008a7c:	d83b      	bhi.n	8008af6 <USBD_StdDevReq+0xc2>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <USBD_StdDevReq+0x50>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008aed 	.word	0x08008aed
 8008a8c:	08008af7 	.word	0x08008af7
 8008a90:	08008ae3 	.word	0x08008ae3
 8008a94:	08008af7 	.word	0x08008af7
 8008a98:	08008ab7 	.word	0x08008ab7
 8008a9c:	08008aad 	.word	0x08008aad
 8008aa0:	08008af7 	.word	0x08008af7
 8008aa4:	08008acf 	.word	0x08008acf
 8008aa8:	08008ac1 	.word	0x08008ac1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa3c 	bl	8008f2c <USBD_GetDescriptor>
          break;
 8008ab4:	e024      	b.n	8008b00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fba1 	bl	8009200 <USBD_SetAddress>
          break;
 8008abe:	e01f      	b.n	8008b00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fbe0 	bl	8009288 <USBD_SetConfig>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]
          break;
 8008acc:	e018      	b.n	8008b00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fc83 	bl	80093dc <USBD_GetConfig>
          break;
 8008ad6:	e013      	b.n	8008b00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fcb4 	bl	8009448 <USBD_GetStatus>
          break;
 8008ae0:	e00e      	b.n	8008b00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fce3 	bl	80094b0 <USBD_SetFeature>
          break;
 8008aea:	e009      	b.n	8008b00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fd07 	bl	8009502 <USBD_ClrFeature>
          break;
 8008af4:	e004      	b.n	8008b00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fd5e 	bl	80095ba <USBD_CtlError>
          break;
 8008afe:	bf00      	nop
      }
      break;
 8008b00:	e004      	b.n	8008b0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fd58 	bl	80095ba <USBD_CtlError>
      break;
 8008b0a:	bf00      	nop
  }

  return ret;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop

08008b18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b2e:	2b40      	cmp	r3, #64	; 0x40
 8008b30:	d005      	beq.n	8008b3e <USBD_StdItfReq+0x26>
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d852      	bhi.n	8008bdc <USBD_StdItfReq+0xc4>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <USBD_StdItfReq+0x26>
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	d14e      	bne.n	8008bdc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d840      	bhi.n	8008bce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	889b      	ldrh	r3, [r3, #4]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d836      	bhi.n	8008bc4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	889b      	ldrh	r3, [r3, #4]
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7ff fed9 	bl	8008916 <USBD_CoreFindIF>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2bff      	cmp	r3, #255	; 0xff
 8008b6c:	d01d      	beq.n	8008baa <USBD_StdItfReq+0x92>
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d11a      	bne.n	8008baa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b74:	7bba      	ldrb	r2, [r7, #14]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	32ae      	adds	r2, #174	; 0xae
 8008b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00f      	beq.n	8008ba4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b84:	7bba      	ldrb	r2, [r7, #14]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b8c:	7bba      	ldrb	r2, [r7, #14]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	32ae      	adds	r2, #174	; 0xae
 8008b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	4798      	blx	r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ba2:	e004      	b.n	8008bae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ba8:	e001      	b.n	8008bae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008baa:	2303      	movs	r3, #3
 8008bac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	88db      	ldrh	r3, [r3, #6]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d110      	bne.n	8008bd8 <USBD_StdItfReq+0xc0>
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10d      	bne.n	8008bd8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fdc7 	bl	8009750 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008bc2:	e009      	b.n	8008bd8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fcf7 	bl	80095ba <USBD_CtlError>
          break;
 8008bcc:	e004      	b.n	8008bd8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fcf2 	bl	80095ba <USBD_CtlError>
          break;
 8008bd6:	e000      	b.n	8008bda <USBD_StdItfReq+0xc2>
          break;
 8008bd8:	bf00      	nop
      }
      break;
 8008bda:	e004      	b.n	8008be6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fceb 	bl	80095ba <USBD_CtlError>
      break;
 8008be4:	bf00      	nop
  }

  return ret;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	889b      	ldrh	r3, [r3, #4]
 8008c02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c0c:	2b40      	cmp	r3, #64	; 0x40
 8008c0e:	d007      	beq.n	8008c20 <USBD_StdEPReq+0x30>
 8008c10:	2b40      	cmp	r3, #64	; 0x40
 8008c12:	f200 817f 	bhi.w	8008f14 <USBD_StdEPReq+0x324>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d02a      	beq.n	8008c70 <USBD_StdEPReq+0x80>
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	f040 817a 	bne.w	8008f14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff fe83 	bl	8008930 <USBD_CoreFindEP>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c2e:	7b7b      	ldrb	r3, [r7, #13]
 8008c30:	2bff      	cmp	r3, #255	; 0xff
 8008c32:	f000 8174 	beq.w	8008f1e <USBD_StdEPReq+0x32e>
 8008c36:	7b7b      	ldrb	r3, [r7, #13]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f040 8170 	bne.w	8008f1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c3e:	7b7a      	ldrb	r2, [r7, #13]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c46:	7b7a      	ldrb	r2, [r7, #13]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	32ae      	adds	r2, #174	; 0xae
 8008c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 8163 	beq.w	8008f1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c58:	7b7a      	ldrb	r2, [r7, #13]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32ae      	adds	r2, #174	; 0xae
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	4798      	blx	r3
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c6e:	e156      	b.n	8008f1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d008      	beq.n	8008c8a <USBD_StdEPReq+0x9a>
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	f300 8145 	bgt.w	8008f08 <USBD_StdEPReq+0x318>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 809b 	beq.w	8008dba <USBD_StdEPReq+0x1ca>
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d03c      	beq.n	8008d02 <USBD_StdEPReq+0x112>
 8008c88:	e13e      	b.n	8008f08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d002      	beq.n	8008c9c <USBD_StdEPReq+0xac>
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d016      	beq.n	8008cc8 <USBD_StdEPReq+0xd8>
 8008c9a:	e02c      	b.n	8008cf6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00d      	beq.n	8008cbe <USBD_StdEPReq+0xce>
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	2b80      	cmp	r3, #128	; 0x80
 8008ca6:	d00a      	beq.n	8008cbe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 f963 	bl	8009f78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cb2:	2180      	movs	r1, #128	; 0x80
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 f95f 	bl	8009f78 <USBD_LL_StallEP>
 8008cba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cbc:	e020      	b.n	8008d00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc7a 	bl	80095ba <USBD_CtlError>
              break;
 8008cc6:	e01b      	b.n	8008d00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	885b      	ldrh	r3, [r3, #2]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10e      	bne.n	8008cee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00b      	beq.n	8008cee <USBD_StdEPReq+0xfe>
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b80      	cmp	r3, #128	; 0x80
 8008cda:	d008      	beq.n	8008cee <USBD_StdEPReq+0xfe>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	88db      	ldrh	r3, [r3, #6]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 f945 	bl	8009f78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fd2e 	bl	8009750 <USBD_CtlSendStatus>

              break;
 8008cf4:	e004      	b.n	8008d00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fc5e 	bl	80095ba <USBD_CtlError>
              break;
 8008cfe:	bf00      	nop
          }
          break;
 8008d00:	e107      	b.n	8008f12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d002      	beq.n	8008d14 <USBD_StdEPReq+0x124>
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d016      	beq.n	8008d40 <USBD_StdEPReq+0x150>
 8008d12:	e04b      	b.n	8008dac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00d      	beq.n	8008d36 <USBD_StdEPReq+0x146>
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b80      	cmp	r3, #128	; 0x80
 8008d1e:	d00a      	beq.n	8008d36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 f927 	bl	8009f78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d2a:	2180      	movs	r1, #128	; 0x80
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f923 	bl	8009f78 <USBD_LL_StallEP>
 8008d32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d34:	e040      	b.n	8008db8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fc3e 	bl	80095ba <USBD_CtlError>
              break;
 8008d3e:	e03b      	b.n	8008db8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	885b      	ldrh	r3, [r3, #2]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d136      	bne.n	8008db6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 f92d 	bl	8009fb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fcf7 	bl	8009750 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff fde2 	bl	8008930 <USBD_CoreFindEP>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d70:	7b7b      	ldrb	r3, [r7, #13]
 8008d72:	2bff      	cmp	r3, #255	; 0xff
 8008d74:	d01f      	beq.n	8008db6 <USBD_StdEPReq+0x1c6>
 8008d76:	7b7b      	ldrb	r3, [r7, #13]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d11c      	bne.n	8008db6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d7c:	7b7a      	ldrb	r2, [r7, #13]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d84:	7b7a      	ldrb	r2, [r7, #13]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	32ae      	adds	r2, #174	; 0xae
 8008d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d010      	beq.n	8008db6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d94:	7b7a      	ldrb	r2, [r7, #13]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	32ae      	adds	r2, #174	; 0xae
 8008d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	4798      	blx	r3
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008daa:	e004      	b.n	8008db6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fc03 	bl	80095ba <USBD_CtlError>
              break;
 8008db4:	e000      	b.n	8008db8 <USBD_StdEPReq+0x1c8>
              break;
 8008db6:	bf00      	nop
          }
          break;
 8008db8:	e0ab      	b.n	8008f12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d002      	beq.n	8008dcc <USBD_StdEPReq+0x1dc>
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d032      	beq.n	8008e30 <USBD_StdEPReq+0x240>
 8008dca:	e097      	b.n	8008efc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d007      	beq.n	8008de2 <USBD_StdEPReq+0x1f2>
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	2b80      	cmp	r3, #128	; 0x80
 8008dd6:	d004      	beq.n	8008de2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fbed 	bl	80095ba <USBD_CtlError>
                break;
 8008de0:	e091      	b.n	8008f06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	da0b      	bge.n	8008e02 <USBD_StdEPReq+0x212>
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	3310      	adds	r3, #16
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3304      	adds	r3, #4
 8008e00:	e00b      	b.n	8008e1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	4413      	add	r3, r2
 8008e18:	3304      	adds	r3, #4
 8008e1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2202      	movs	r2, #2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fc37 	bl	800969c <USBD_CtlSendData>
              break;
 8008e2e:	e06a      	b.n	8008f06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	da11      	bge.n	8008e5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	f003 020f 	and.w	r2, r3, #15
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	3324      	adds	r3, #36	; 0x24
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d117      	bne.n	8008e82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fbb0 	bl	80095ba <USBD_CtlError>
                  break;
 8008e5a:	e054      	b.n	8008f06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	f003 020f 	and.w	r2, r3, #15
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fb9d 	bl	80095ba <USBD_CtlError>
                  break;
 8008e80:	e041      	b.n	8008f06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da0b      	bge.n	8008ea2 <USBD_StdEPReq+0x2b2>
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	3310      	adds	r3, #16
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	e00b      	b.n	8008eba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3304      	adds	r3, #4
 8008eba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <USBD_StdEPReq+0x2d8>
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	2b80      	cmp	r3, #128	; 0x80
 8008ec6:	d103      	bne.n	8008ed0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	e00e      	b.n	8008eee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f88d 	bl	8009ff4 <USBD_LL_IsStallEP>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	e002      	b.n	8008eee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fbd1 	bl	800969c <USBD_CtlSendData>
              break;
 8008efa:	e004      	b.n	8008f06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fb5b 	bl	80095ba <USBD_CtlError>
              break;
 8008f04:	bf00      	nop
          }
          break;
 8008f06:	e004      	b.n	8008f12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fb55 	bl	80095ba <USBD_CtlError>
          break;
 8008f10:	bf00      	nop
      }
      break;
 8008f12:	e005      	b.n	8008f20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fb4f 	bl	80095ba <USBD_CtlError>
      break;
 8008f1c:	e000      	b.n	8008f20 <USBD_StdEPReq+0x330>
      break;
 8008f1e:	bf00      	nop
  }

  return ret;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	885b      	ldrh	r3, [r3, #2]
 8008f46:	0a1b      	lsrs	r3, r3, #8
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	2b06      	cmp	r3, #6
 8008f4e:	f200 8128 	bhi.w	80091a2 <USBD_GetDescriptor+0x276>
 8008f52:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <USBD_GetDescriptor+0x2c>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008f75 	.word	0x08008f75
 8008f5c:	08008f8d 	.word	0x08008f8d
 8008f60:	08008fcd 	.word	0x08008fcd
 8008f64:	080091a3 	.word	0x080091a3
 8008f68:	080091a3 	.word	0x080091a3
 8008f6c:	08009143 	.word	0x08009143
 8008f70:	0800916f 	.word	0x0800916f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	7c12      	ldrb	r2, [r2, #16]
 8008f80:	f107 0108 	add.w	r1, r7, #8
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
 8008f88:	60f8      	str	r0, [r7, #12]
      break;
 8008f8a:	e112      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	7c1b      	ldrb	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10d      	bne.n	8008fb0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9c:	f107 0208 	add.w	r2, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
 8008fa4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	2202      	movs	r2, #2
 8008fac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fae:	e100      	b.n	80091b2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	f107 0208 	add.w	r2, r7, #8
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	701a      	strb	r2, [r3, #0]
      break;
 8008fca:	e0f2      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	885b      	ldrh	r3, [r3, #2]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b05      	cmp	r3, #5
 8008fd4:	f200 80ac 	bhi.w	8009130 <USBD_GetDescriptor+0x204>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <USBD_GetDescriptor+0xb4>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08008ff9 	.word	0x08008ff9
 8008fe4:	0800902d 	.word	0x0800902d
 8008fe8:	08009061 	.word	0x08009061
 8008fec:	08009095 	.word	0x08009095
 8008ff0:	080090c9 	.word	0x080090c9
 8008ff4:	080090fd 	.word	0x080090fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e091      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 facb 	bl	80095ba <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e089      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904e:	e077      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fab1 	bl	80095ba <USBD_CtlError>
            err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
          break;
 800905e:	e06f      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	7c12      	ldrb	r2, [r2, #16]
 8009078:	f107 0108 	add.w	r1, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009082:	e05d      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa97 	bl	80095ba <USBD_CtlError>
            err++;
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	3301      	adds	r3, #1
 8009090:	72fb      	strb	r3, [r7, #11]
          break;
 8009092:	e055      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	7c12      	ldrb	r2, [r2, #16]
 80090ac:	f107 0108 	add.w	r1, r7, #8
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090b6:	e043      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa7d 	bl	80095ba <USBD_CtlError>
            err++;
 80090c0:	7afb      	ldrb	r3, [r7, #11]
 80090c2:	3301      	adds	r3, #1
 80090c4:	72fb      	strb	r3, [r7, #11]
          break;
 80090c6:	e03b      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00b      	beq.n	80090ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	7c12      	ldrb	r2, [r2, #16]
 80090e0:	f107 0108 	add.w	r1, r7, #8
 80090e4:	4610      	mov	r0, r2
 80090e6:	4798      	blx	r3
 80090e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ea:	e029      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa63 	bl	80095ba <USBD_CtlError>
            err++;
 80090f4:	7afb      	ldrb	r3, [r7, #11]
 80090f6:	3301      	adds	r3, #1
 80090f8:	72fb      	strb	r3, [r7, #11]
          break;
 80090fa:	e021      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00b      	beq.n	8009120 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	7c12      	ldrb	r2, [r2, #16]
 8009114:	f107 0108 	add.w	r1, r7, #8
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800911e:	e00f      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fa49 	bl	80095ba <USBD_CtlError>
            err++;
 8009128:	7afb      	ldrb	r3, [r7, #11]
 800912a:	3301      	adds	r3, #1
 800912c:	72fb      	strb	r3, [r7, #11]
          break;
 800912e:	e007      	b.n	8009140 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa41 	bl	80095ba <USBD_CtlError>
          err++;
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	3301      	adds	r3, #1
 800913c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800913e:	bf00      	nop
      }
      break;
 8009140:	e037      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	7c1b      	ldrb	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d109      	bne.n	800915e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009152:	f107 0208 	add.w	r2, r7, #8
 8009156:	4610      	mov	r0, r2
 8009158:	4798      	blx	r3
 800915a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800915c:	e029      	b.n	80091b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fa2a 	bl	80095ba <USBD_CtlError>
        err++;
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	3301      	adds	r3, #1
 800916a:	72fb      	strb	r3, [r7, #11]
      break;
 800916c:	e021      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	7c1b      	ldrb	r3, [r3, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10d      	bne.n	8009192 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	f107 0208 	add.w	r2, r7, #8
 8009182:	4610      	mov	r0, r2
 8009184:	4798      	blx	r3
 8009186:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	2207      	movs	r2, #7
 800918e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009190:	e00f      	b.n	80091b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fa10 	bl	80095ba <USBD_CtlError>
        err++;
 800919a:	7afb      	ldrb	r3, [r7, #11]
 800919c:	3301      	adds	r3, #1
 800919e:	72fb      	strb	r3, [r7, #11]
      break;
 80091a0:	e007      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fa08 	bl	80095ba <USBD_CtlError>
      err++;
 80091aa:	7afb      	ldrb	r3, [r7, #11]
 80091ac:	3301      	adds	r3, #1
 80091ae:	72fb      	strb	r3, [r7, #11]
      break;
 80091b0:	bf00      	nop
  }

  if (err != 0U)
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11e      	bne.n	80091f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	88db      	ldrh	r3, [r3, #6]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d016      	beq.n	80091ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80091c0:	893b      	ldrh	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00e      	beq.n	80091e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	88da      	ldrh	r2, [r3, #6]
 80091ca:	893b      	ldrh	r3, [r7, #8]
 80091cc:	4293      	cmp	r3, r2
 80091ce:	bf28      	it	cs
 80091d0:	4613      	movcs	r3, r2
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091d6:	893b      	ldrh	r3, [r7, #8]
 80091d8:	461a      	mov	r2, r3
 80091da:	68f9      	ldr	r1, [r7, #12]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fa5d 	bl	800969c <USBD_CtlSendData>
 80091e2:	e009      	b.n	80091f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f9e7 	bl	80095ba <USBD_CtlError>
 80091ec:	e004      	b.n	80091f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 faae 	bl	8009750 <USBD_CtlSendStatus>
 80091f4:	e000      	b.n	80091f8 <USBD_GetDescriptor+0x2cc>
    return;
 80091f6:	bf00      	nop
  }
}
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop

08009200 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	889b      	ldrh	r3, [r3, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d131      	bne.n	8009276 <USBD_SetAddress+0x76>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	88db      	ldrh	r3, [r3, #6]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d12d      	bne.n	8009276 <USBD_SetAddress+0x76>
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	885b      	ldrh	r3, [r3, #2]
 800921e:	2b7f      	cmp	r3, #127	; 0x7f
 8009220:	d829      	bhi.n	8009276 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	885b      	ldrh	r3, [r3, #2]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800922c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b03      	cmp	r3, #3
 8009238:	d104      	bne.n	8009244 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9bc 	bl	80095ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009242:	e01d      	b.n	8009280 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	7bfa      	ldrb	r2, [r7, #15]
 8009248:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fefb 	bl	800a04c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa7a 	bl	8009750 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d004      	beq.n	800926c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2202      	movs	r2, #2
 8009266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926a:	e009      	b.n	8009280 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009274:	e004      	b.n	8009280 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f99e 	bl	80095ba <USBD_CtlError>
  }
}
 800927e:	bf00      	nop
 8009280:	bf00      	nop
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	885b      	ldrh	r3, [r3, #2]
 800929a:	b2da      	uxtb	r2, r3
 800929c:	4b4e      	ldr	r3, [pc, #312]	; (80093d8 <USBD_SetConfig+0x150>)
 800929e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092a0:	4b4d      	ldr	r3, [pc, #308]	; (80093d8 <USBD_SetConfig+0x150>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d905      	bls.n	80092b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f985 	bl	80095ba <USBD_CtlError>
    return USBD_FAIL;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e08c      	b.n	80093ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d002      	beq.n	80092c6 <USBD_SetConfig+0x3e>
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d029      	beq.n	8009318 <USBD_SetConfig+0x90>
 80092c4:	e075      	b.n	80093b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092c6:	4b44      	ldr	r3, [pc, #272]	; (80093d8 <USBD_SetConfig+0x150>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d020      	beq.n	8009310 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092ce:	4b42      	ldr	r3, [pc, #264]	; (80093d8 <USBD_SetConfig+0x150>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092d8:	4b3f      	ldr	r3, [pc, #252]	; (80093d8 <USBD_SetConfig+0x150>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7fe ffe7 	bl	80082b2 <USBD_SetClassConfig>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d008      	beq.n	8009300 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f962 	bl	80095ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2202      	movs	r2, #2
 80092fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092fe:	e065      	b.n	80093cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fa25 	bl	8009750 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2203      	movs	r2, #3
 800930a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800930e:	e05d      	b.n	80093cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa1d 	bl	8009750 <USBD_CtlSendStatus>
      break;
 8009316:	e059      	b.n	80093cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009318:	4b2f      	ldr	r3, [pc, #188]	; (80093d8 <USBD_SetConfig+0x150>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d112      	bne.n	8009346 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009328:	4b2b      	ldr	r3, [pc, #172]	; (80093d8 <USBD_SetConfig+0x150>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009332:	4b29      	ldr	r3, [pc, #164]	; (80093d8 <USBD_SetConfig+0x150>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7fe ffd6 	bl	80082ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa06 	bl	8009750 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009344:	e042      	b.n	80093cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009346:	4b24      	ldr	r3, [pc, #144]	; (80093d8 <USBD_SetConfig+0x150>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d02a      	beq.n	80093aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7fe ffc4 	bl	80082ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009362:	4b1d      	ldr	r3, [pc, #116]	; (80093d8 <USBD_SetConfig+0x150>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800936c:	4b1a      	ldr	r3, [pc, #104]	; (80093d8 <USBD_SetConfig+0x150>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7fe ff9d 	bl	80082b2 <USBD_SetClassConfig>
 8009378:	4603      	mov	r3, r0
 800937a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00f      	beq.n	80093a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f918 	bl	80095ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	b2db      	uxtb	r3, r3
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fe ffa9 	bl	80082ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093a0:	e014      	b.n	80093cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f9d4 	bl	8009750 <USBD_CtlSendStatus>
      break;
 80093a8:	e010      	b.n	80093cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f9d0 	bl	8009750 <USBD_CtlSendStatus>
      break;
 80093b0:	e00c      	b.n	80093cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f900 	bl	80095ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <USBD_SetConfig+0x150>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7fe ff92 	bl	80082ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093c6:	2303      	movs	r3, #3
 80093c8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ca:	bf00      	nop
  }

  return ret;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	200006f0 	.word	0x200006f0

080093dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	88db      	ldrh	r3, [r3, #6]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d004      	beq.n	80093f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f8e2 	bl	80095ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093f6:	e023      	b.n	8009440 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	dc02      	bgt.n	800940a <USBD_GetConfig+0x2e>
 8009404:	2b00      	cmp	r3, #0
 8009406:	dc03      	bgt.n	8009410 <USBD_GetConfig+0x34>
 8009408:	e015      	b.n	8009436 <USBD_GetConfig+0x5a>
 800940a:	2b03      	cmp	r3, #3
 800940c:	d00b      	beq.n	8009426 <USBD_GetConfig+0x4a>
 800940e:	e012      	b.n	8009436 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3308      	adds	r3, #8
 800941a:	2201      	movs	r2, #1
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f93c 	bl	800969c <USBD_CtlSendData>
        break;
 8009424:	e00c      	b.n	8009440 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3304      	adds	r3, #4
 800942a:	2201      	movs	r2, #1
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f934 	bl	800969c <USBD_CtlSendData>
        break;
 8009434:	e004      	b.n	8009440 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f8be 	bl	80095ba <USBD_CtlError>
        break;
 800943e:	bf00      	nop
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009458:	b2db      	uxtb	r3, r3
 800945a:	3b01      	subs	r3, #1
 800945c:	2b02      	cmp	r3, #2
 800945e:	d81e      	bhi.n	800949e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	88db      	ldrh	r3, [r3, #6]
 8009464:	2b02      	cmp	r3, #2
 8009466:	d004      	beq.n	8009472 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f8a5 	bl	80095ba <USBD_CtlError>
        break;
 8009470:	e01a      	b.n	80094a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f043 0202 	orr.w	r2, r3, #2
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	330c      	adds	r3, #12
 8009492:	2202      	movs	r2, #2
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f900 	bl	800969c <USBD_CtlSendData>
      break;
 800949c:	e004      	b.n	80094a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f88a 	bl	80095ba <USBD_CtlError>
      break;
 80094a6:	bf00      	nop
  }
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	885b      	ldrh	r3, [r3, #2]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d107      	bne.n	80094d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f940 	bl	8009750 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80094d0:	e013      	b.n	80094fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	885b      	ldrh	r3, [r3, #2]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d10b      	bne.n	80094f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	889b      	ldrh	r3, [r3, #4]
 80094de:	0a1b      	lsrs	r3, r3, #8
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f930 	bl	8009750 <USBD_CtlSendStatus>
}
 80094f0:	e003      	b.n	80094fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f860 	bl	80095ba <USBD_CtlError>
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009512:	b2db      	uxtb	r3, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	2b02      	cmp	r3, #2
 8009518:	d80b      	bhi.n	8009532 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d10c      	bne.n	800953c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f910 	bl	8009750 <USBD_CtlSendStatus>
      }
      break;
 8009530:	e004      	b.n	800953c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f840 	bl	80095ba <USBD_CtlError>
      break;
 800953a:	e000      	b.n	800953e <USBD_ClrFeature+0x3c>
      break;
 800953c:	bf00      	nop
  }
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3301      	adds	r3, #1
 8009560:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fa41 	bl	80089f8 <SWAPBYTE>
 8009576:	4603      	mov	r3, r0
 8009578:	461a      	mov	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3301      	adds	r3, #1
 8009582:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3301      	adds	r3, #1
 8009588:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f7ff fa34 	bl	80089f8 <SWAPBYTE>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3301      	adds	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3301      	adds	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7ff fa27 	bl	80089f8 <SWAPBYTE>
 80095aa:	4603      	mov	r3, r0
 80095ac:	461a      	mov	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	80da      	strh	r2, [r3, #6]
}
 80095b2:	bf00      	nop
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095c4:	2180      	movs	r1, #128	; 0x80
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fcd6 	bl	8009f78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095cc:	2100      	movs	r1, #0
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fcd2 	bl	8009f78 <USBD_LL_StallEP>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d036      	beq.n	8009660 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095f6:	6938      	ldr	r0, [r7, #16]
 80095f8:	f000 f836 	bl	8009668 <USBD_GetLen>
 80095fc:	4603      	mov	r3, r0
 80095fe:	3301      	adds	r3, #1
 8009600:	b29b      	uxth	r3, r3
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	b29a      	uxth	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	4413      	add	r3, r2
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	701a      	strb	r2, [r3, #0]
  idx++;
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	3301      	adds	r3, #1
 800961a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	4413      	add	r3, r2
 8009622:	2203      	movs	r2, #3
 8009624:	701a      	strb	r2, [r3, #0]
  idx++;
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	3301      	adds	r3, #1
 800962a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800962c:	e013      	b.n	8009656 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	4413      	add	r3, r2
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	7812      	ldrb	r2, [r2, #0]
 8009638:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3301      	adds	r3, #1
 800963e:	613b      	str	r3, [r7, #16]
    idx++;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	3301      	adds	r3, #1
 8009644:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	4413      	add	r3, r2
 800964c:	2200      	movs	r2, #0
 800964e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	3301      	adds	r3, #1
 8009654:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e7      	bne.n	800962e <USBD_GetString+0x52>
 800965e:	e000      	b.n	8009662 <USBD_GetString+0x86>
    return;
 8009660:	bf00      	nop
  }
}
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009678:	e005      	b.n	8009686 <USBD_GetLen+0x1e>
  {
    len++;
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	3301      	adds	r3, #1
 800967e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	3301      	adds	r3, #1
 8009684:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1f5      	bne.n	800967a <USBD_GetLen+0x12>
  }

  return len;
 800968e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	2100      	movs	r1, #0
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 fce1 	bl	800a08a <USBD_LL_Transmit>

  return USBD_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	2100      	movs	r1, #0
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 fcd0 	bl	800a08a <USBD_LL_Transmit>

  return USBD_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2203      	movs	r2, #3
 8009704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	2100      	movs	r1, #0
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 fcd4 	bl	800a0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	60b9      	str	r1, [r7, #8]
 8009738:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	2100      	movs	r1, #0
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 fcc3 	bl	800a0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2204      	movs	r2, #4
 800975c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009760:	2300      	movs	r3, #0
 8009762:	2200      	movs	r2, #0
 8009764:	2100      	movs	r1, #0
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fc8f 	bl	800a08a <USBD_LL_Transmit>

  return USBD_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2205      	movs	r2, #5
 8009782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009786:	2300      	movs	r3, #0
 8009788:	2200      	movs	r2, #0
 800978a:	2100      	movs	r1, #0
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fc9d 	bl	800a0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097a0:	2200      	movs	r2, #0
 80097a2:	4912      	ldr	r1, [pc, #72]	; (80097ec <MX_USB_DEVICE_Init+0x50>)
 80097a4:	4812      	ldr	r0, [pc, #72]	; (80097f0 <MX_USB_DEVICE_Init+0x54>)
 80097a6:	f7fe fd07 	bl	80081b8 <USBD_Init>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80097b0:	f7f7 fc7a 	bl	80010a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80097b4:	490f      	ldr	r1, [pc, #60]	; (80097f4 <MX_USB_DEVICE_Init+0x58>)
 80097b6:	480e      	ldr	r0, [pc, #56]	; (80097f0 <MX_USB_DEVICE_Init+0x54>)
 80097b8:	f7fe fd2e 	bl	8008218 <USBD_RegisterClass>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80097c2:	f7f7 fc71 	bl	80010a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80097c6:	490c      	ldr	r1, [pc, #48]	; (80097f8 <MX_USB_DEVICE_Init+0x5c>)
 80097c8:	4809      	ldr	r0, [pc, #36]	; (80097f0 <MX_USB_DEVICE_Init+0x54>)
 80097ca:	f7fe fc1f 	bl	800800c <USBD_CDC_RegisterInterface>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80097d4:	f7f7 fc68 	bl	80010a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097d8:	4805      	ldr	r0, [pc, #20]	; (80097f0 <MX_USB_DEVICE_Init+0x54>)
 80097da:	f7fe fd53 	bl	8008284 <USBD_Start>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097e4:	f7f7 fc60 	bl	80010a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097e8:	bf00      	nop
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	200000ac 	.word	0x200000ac
 80097f0:	200006f4 	.word	0x200006f4
 80097f4:	20000018 	.word	0x20000018
 80097f8:	20000098 	.word	0x20000098

080097fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009800:	2200      	movs	r2, #0
 8009802:	4905      	ldr	r1, [pc, #20]	; (8009818 <CDC_Init_FS+0x1c>)
 8009804:	4805      	ldr	r0, [pc, #20]	; (800981c <CDC_Init_FS+0x20>)
 8009806:	f7fe fc1b 	bl	8008040 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800980a:	4905      	ldr	r1, [pc, #20]	; (8009820 <CDC_Init_FS+0x24>)
 800980c:	4803      	ldr	r0, [pc, #12]	; (800981c <CDC_Init_FS+0x20>)
 800980e:	f7fe fc39 	bl	8008084 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009812:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009814:	4618      	mov	r0, r3
 8009816:	bd80      	pop	{r7, pc}
 8009818:	200011d0 	.word	0x200011d0
 800981c:	200006f4 	.word	0x200006f4
 8009820:	200009d0 	.word	0x200009d0

08009824 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009828:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800982a:	4618      	mov	r0, r3
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
 8009840:	4613      	mov	r3, r2
 8009842:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009844:	79fb      	ldrb	r3, [r7, #7]
 8009846:	2b23      	cmp	r3, #35	; 0x23
 8009848:	d84a      	bhi.n	80098e0 <CDC_Control_FS+0xac>
 800984a:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <CDC_Control_FS+0x1c>)
 800984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009850:	080098e1 	.word	0x080098e1
 8009854:	080098e1 	.word	0x080098e1
 8009858:	080098e1 	.word	0x080098e1
 800985c:	080098e1 	.word	0x080098e1
 8009860:	080098e1 	.word	0x080098e1
 8009864:	080098e1 	.word	0x080098e1
 8009868:	080098e1 	.word	0x080098e1
 800986c:	080098e1 	.word	0x080098e1
 8009870:	080098e1 	.word	0x080098e1
 8009874:	080098e1 	.word	0x080098e1
 8009878:	080098e1 	.word	0x080098e1
 800987c:	080098e1 	.word	0x080098e1
 8009880:	080098e1 	.word	0x080098e1
 8009884:	080098e1 	.word	0x080098e1
 8009888:	080098e1 	.word	0x080098e1
 800988c:	080098e1 	.word	0x080098e1
 8009890:	080098e1 	.word	0x080098e1
 8009894:	080098e1 	.word	0x080098e1
 8009898:	080098e1 	.word	0x080098e1
 800989c:	080098e1 	.word	0x080098e1
 80098a0:	080098e1 	.word	0x080098e1
 80098a4:	080098e1 	.word	0x080098e1
 80098a8:	080098e1 	.word	0x080098e1
 80098ac:	080098e1 	.word	0x080098e1
 80098b0:	080098e1 	.word	0x080098e1
 80098b4:	080098e1 	.word	0x080098e1
 80098b8:	080098e1 	.word	0x080098e1
 80098bc:	080098e1 	.word	0x080098e1
 80098c0:	080098e1 	.word	0x080098e1
 80098c4:	080098e1 	.word	0x080098e1
 80098c8:	080098e1 	.word	0x080098e1
 80098cc:	080098e1 	.word	0x080098e1
 80098d0:	080098e1 	.word	0x080098e1
 80098d4:	080098e1 	.word	0x080098e1
 80098d8:	080098e1 	.word	0x080098e1
 80098dc:	080098e1 	.word	0x080098e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098e0:	bf00      	nop
  }

  return (USBD_OK);
 80098e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	4805      	ldr	r0, [pc, #20]	; (8009914 <CDC_Receive_FS+0x24>)
 80098fe:	f7fe fbc1 	bl	8008084 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009902:	4804      	ldr	r0, [pc, #16]	; (8009914 <CDC_Receive_FS+0x24>)
 8009904:	f7fe fc22 	bl	800814c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009908:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	200006f4 	.word	0x200006f4

08009918 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009928:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <CDC_Transmit_FS+0x48>)
 800992a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800992e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800993a:	2301      	movs	r3, #1
 800993c:	e00b      	b.n	8009956 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800993e:	887b      	ldrh	r3, [r7, #2]
 8009940:	461a      	mov	r2, r3
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	4806      	ldr	r0, [pc, #24]	; (8009960 <CDC_Transmit_FS+0x48>)
 8009946:	f7fe fb7b 	bl	8008040 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800994a:	4805      	ldr	r0, [pc, #20]	; (8009960 <CDC_Transmit_FS+0x48>)
 800994c:	f7fe fbb8 	bl	80080c0 <USBD_CDC_TransmitPacket>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	200006f4 	.word	0x200006f4

08009964 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4613      	mov	r3, r2
 8009970:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009976:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800997a:	4618      	mov	r0, r3
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
	...

08009988 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	6039      	str	r1, [r7, #0]
 8009992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2212      	movs	r2, #18
 8009998:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800999a:	4b03      	ldr	r3, [pc, #12]	; (80099a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	200000c8 	.word	0x200000c8

080099ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	4603      	mov	r3, r0
 80099b4:	6039      	str	r1, [r7, #0]
 80099b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2204      	movs	r2, #4
 80099bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099be:	4b03      	ldr	r3, [pc, #12]	; (80099cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	200000dc 	.word	0x200000dc

080099d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	6039      	str	r1, [r7, #0]
 80099da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d105      	bne.n	80099ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	4907      	ldr	r1, [pc, #28]	; (8009a04 <USBD_FS_ProductStrDescriptor+0x34>)
 80099e6:	4808      	ldr	r0, [pc, #32]	; (8009a08 <USBD_FS_ProductStrDescriptor+0x38>)
 80099e8:	f7ff fdf8 	bl	80095dc <USBD_GetString>
 80099ec:	e004      	b.n	80099f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	4904      	ldr	r1, [pc, #16]	; (8009a04 <USBD_FS_ProductStrDescriptor+0x34>)
 80099f2:	4805      	ldr	r0, [pc, #20]	; (8009a08 <USBD_FS_ProductStrDescriptor+0x38>)
 80099f4:	f7ff fdf2 	bl	80095dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80099f8:	4b02      	ldr	r3, [pc, #8]	; (8009a04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	200019d0 	.word	0x200019d0
 8009a08:	0800ada4 	.word	0x0800ada4

08009a0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	4904      	ldr	r1, [pc, #16]	; (8009a2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a1c:	4804      	ldr	r0, [pc, #16]	; (8009a30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a1e:	f7ff fddd 	bl	80095dc <USBD_GetString>
  return USBD_StrDesc;
 8009a22:	4b02      	ldr	r3, [pc, #8]	; (8009a2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	200019d0 	.word	0x200019d0
 8009a30:	0800adb0 	.word	0x0800adb0

08009a34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6039      	str	r1, [r7, #0]
 8009a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	221a      	movs	r2, #26
 8009a44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a46:	f000 f843 	bl	8009ad0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a4a:	4b02      	ldr	r3, [pc, #8]	; (8009a54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	200000e0 	.word	0x200000e0

08009a58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	4907      	ldr	r1, [pc, #28]	; (8009a8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a6e:	4808      	ldr	r0, [pc, #32]	; (8009a90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a70:	f7ff fdb4 	bl	80095dc <USBD_GetString>
 8009a74:	e004      	b.n	8009a80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	4904      	ldr	r1, [pc, #16]	; (8009a8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a7a:	4805      	ldr	r0, [pc, #20]	; (8009a90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a7c:	f7ff fdae 	bl	80095dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	200019d0 	.word	0x200019d0
 8009a90:	0800adc4 	.word	0x0800adc4

08009a94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	4907      	ldr	r1, [pc, #28]	; (8009ac8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aaa:	4808      	ldr	r0, [pc, #32]	; (8009acc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009aac:	f7ff fd96 	bl	80095dc <USBD_GetString>
 8009ab0:	e004      	b.n	8009abc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	4904      	ldr	r1, [pc, #16]	; (8009ac8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ab6:	4805      	ldr	r0, [pc, #20]	; (8009acc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ab8:	f7ff fd90 	bl	80095dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009abc:	4b02      	ldr	r3, [pc, #8]	; (8009ac8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200019d0 	.word	0x200019d0
 8009acc:	0800add0 	.word	0x0800add0

08009ad0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ad6:	4b0f      	ldr	r3, [pc, #60]	; (8009b14 <Get_SerialNum+0x44>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009adc:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <Get_SerialNum+0x48>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ae2:	4b0e      	ldr	r3, [pc, #56]	; (8009b1c <Get_SerialNum+0x4c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d009      	beq.n	8009b0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009af6:	2208      	movs	r2, #8
 8009af8:	4909      	ldr	r1, [pc, #36]	; (8009b20 <Get_SerialNum+0x50>)
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 f814 	bl	8009b28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b00:	2204      	movs	r2, #4
 8009b02:	4908      	ldr	r1, [pc, #32]	; (8009b24 <Get_SerialNum+0x54>)
 8009b04:	68b8      	ldr	r0, [r7, #8]
 8009b06:	f000 f80f 	bl	8009b28 <IntToUnicode>
  }
}
 8009b0a:	bf00      	nop
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	1fff7a10 	.word	0x1fff7a10
 8009b18:	1fff7a14 	.word	0x1fff7a14
 8009b1c:	1fff7a18 	.word	0x1fff7a18
 8009b20:	200000e2 	.word	0x200000e2
 8009b24:	200000f2 	.word	0x200000f2

08009b28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	4613      	mov	r3, r2
 8009b34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	75fb      	strb	r3, [r7, #23]
 8009b3e:	e027      	b.n	8009b90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	0f1b      	lsrs	r3, r3, #28
 8009b44:	2b09      	cmp	r3, #9
 8009b46:	d80b      	bhi.n	8009b60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	0f1b      	lsrs	r3, r3, #28
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	4619      	mov	r1, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	440b      	add	r3, r1
 8009b58:	3230      	adds	r2, #48	; 0x30
 8009b5a:	b2d2      	uxtb	r2, r2
 8009b5c:	701a      	strb	r2, [r3, #0]
 8009b5e:	e00a      	b.n	8009b76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	0f1b      	lsrs	r3, r3, #28
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	440b      	add	r3, r1
 8009b70:	3237      	adds	r2, #55	; 0x37
 8009b72:	b2d2      	uxtb	r2, r2
 8009b74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	3301      	adds	r3, #1
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	4413      	add	r3, r2
 8009b86:	2200      	movs	r2, #0
 8009b88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	75fb      	strb	r3, [r7, #23]
 8009b90:	7dfa      	ldrb	r2, [r7, #23]
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d3d3      	bcc.n	8009b40 <IntToUnicode+0x18>
  }
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
	...

08009ba8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bb0:	f107 0314 	add.w	r3, r7, #20
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	605a      	str	r2, [r3, #4]
 8009bba:	609a      	str	r2, [r3, #8]
 8009bbc:	60da      	str	r2, [r3, #12]
 8009bbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bc8:	d13a      	bne.n	8009c40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bca:	2300      	movs	r3, #0
 8009bcc:	613b      	str	r3, [r7, #16]
 8009bce:	4b1e      	ldr	r3, [pc, #120]	; (8009c48 <HAL_PCD_MspInit+0xa0>)
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd2:	4a1d      	ldr	r2, [pc, #116]	; (8009c48 <HAL_PCD_MspInit+0xa0>)
 8009bd4:	f043 0301 	orr.w	r3, r3, #1
 8009bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8009bda:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <HAL_PCD_MspInit+0xa0>)
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	613b      	str	r3, [r7, #16]
 8009be4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009be6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bec:	2302      	movs	r3, #2
 8009bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bf8:	230a      	movs	r3, #10
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	4619      	mov	r1, r3
 8009c02:	4812      	ldr	r0, [pc, #72]	; (8009c4c <HAL_PCD_MspInit+0xa4>)
 8009c04:	f7f8 fac8 	bl	8002198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c08:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <HAL_PCD_MspInit+0xa0>)
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0c:	4a0e      	ldr	r2, [pc, #56]	; (8009c48 <HAL_PCD_MspInit+0xa0>)
 8009c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c12:	6353      	str	r3, [r2, #52]	; 0x34
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	4b0b      	ldr	r3, [pc, #44]	; (8009c48 <HAL_PCD_MspInit+0xa0>)
 8009c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c1c:	4a0a      	ldr	r2, [pc, #40]	; (8009c48 <HAL_PCD_MspInit+0xa0>)
 8009c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c22:	6453      	str	r3, [r2, #68]	; 0x44
 8009c24:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <HAL_PCD_MspInit+0xa0>)
 8009c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c30:	2200      	movs	r2, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	2043      	movs	r0, #67	; 0x43
 8009c36:	f7f7 fe76 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c3a:	2043      	movs	r0, #67	; 0x43
 8009c3c:	f7f7 fe8f 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c40:	bf00      	nop
 8009c42:	3728      	adds	r7, #40	; 0x28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	40023800 	.word	0x40023800
 8009c4c:	40020000 	.word	0x40020000

08009c50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c64:	4619      	mov	r1, r3
 8009c66:	4610      	mov	r0, r2
 8009c68:	f7fe fb59 	bl	800831e <USBD_LL_SetupStage>
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c86:	78fa      	ldrb	r2, [r7, #3]
 8009c88:	6879      	ldr	r1, [r7, #4]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	4413      	add	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	440b      	add	r3, r1
 8009c94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f7fe fb93 	bl	80083c8 <USBD_LL_DataOutStage>
}
 8009ca2:	bf00      	nop
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009cbc:	78fa      	ldrb	r2, [r7, #3]
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	440b      	add	r3, r1
 8009cca:	334c      	adds	r3, #76	; 0x4c
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	78fb      	ldrb	r3, [r7, #3]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	f7fe fc2c 	bl	800852e <USBD_LL_DataInStage>
}
 8009cd6:	bf00      	nop
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe fd60 	bl	80087b2 <USBD_LL_SOF>
}
 8009cf2:	bf00      	nop
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d02:	2301      	movs	r3, #1
 8009d04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d001      	beq.n	8009d12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d0e:	f7f7 f9cb 	bl	80010a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d18:	7bfa      	ldrb	r2, [r7, #15]
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fd0a 	bl	8008736 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe fcb2 	bl	8008692 <USBD_LL_Reset>
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe fd05 	bl	8008756 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	6812      	ldr	r2, [r2, #0]
 8009d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d5e:	f043 0301 	orr.w	r3, r3, #1
 8009d62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d005      	beq.n	8009d78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d6c:	4b04      	ldr	r3, [pc, #16]	; (8009d80 <HAL_PCD_SuspendCallback+0x48>)
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	4a03      	ldr	r2, [pc, #12]	; (8009d80 <HAL_PCD_SuspendCallback+0x48>)
 8009d72:	f043 0306 	orr.w	r3, r3, #6
 8009d76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	e000ed00 	.word	0xe000ed00

08009d84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe fcf5 	bl	8008782 <USBD_LL_Resume>
}
 8009d98:	bf00      	nop
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe fd4d 	bl	8008856 <USBD_LL_IsoOUTIncomplete>
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dd6:	78fa      	ldrb	r2, [r7, #3]
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe fd09 	bl	80087f2 <USBD_LL_IsoINIncomplete>
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fd5f 	bl	80088ba <USBD_LL_DevConnected>
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe fd5c 	bl	80088d0 <USBD_LL_DevDisconnected>
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d13c      	bne.n	8009eaa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e30:	4a20      	ldr	r2, [pc, #128]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a1e      	ldr	r2, [pc, #120]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e3c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e40:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009e48:	4b1a      	ldr	r3, [pc, #104]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e4a:	2204      	movs	r2, #4
 8009e4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e4e:	4b19      	ldr	r3, [pc, #100]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e50:	2202      	movs	r2, #2
 8009e52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e54:	4b17      	ldr	r3, [pc, #92]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e5a:	4b16      	ldr	r3, [pc, #88]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e60:	4b14      	ldr	r3, [pc, #80]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e66:	4b13      	ldr	r3, [pc, #76]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e6c:	4b11      	ldr	r3, [pc, #68]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e72:	4b10      	ldr	r3, [pc, #64]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e78:	4b0e      	ldr	r3, [pc, #56]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e7e:	480d      	ldr	r0, [pc, #52]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e80:	f7f8 fb27 	bl	80024d2 <HAL_PCD_Init>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009e8a:	f7f7 f90d 	bl	80010a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e8e:	2180      	movs	r1, #128	; 0x80
 8009e90:	4808      	ldr	r0, [pc, #32]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e92:	f7f9 fd7e 	bl	8003992 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e96:	2240      	movs	r2, #64	; 0x40
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4806      	ldr	r0, [pc, #24]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009e9c:	f7f9 fd32 	bl	8003904 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ea0:	2280      	movs	r2, #128	; 0x80
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	4803      	ldr	r0, [pc, #12]	; (8009eb4 <USBD_LL_Init+0x94>)
 8009ea6:	f7f9 fd2d 	bl	8003904 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	20001bd0 	.word	0x20001bd0

08009eb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7f8 fc1c 	bl	800270c <HAL_PCD_Start>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 f942 	bl	800a164 <USBD_Get_USB_Status>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	4608      	mov	r0, r1
 8009ef8:	4611      	mov	r1, r2
 8009efa:	461a      	mov	r2, r3
 8009efc:	4603      	mov	r3, r0
 8009efe:	70fb      	strb	r3, [r7, #3]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70bb      	strb	r3, [r7, #2]
 8009f04:	4613      	mov	r3, r2
 8009f06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f16:	78bb      	ldrb	r3, [r7, #2]
 8009f18:	883a      	ldrh	r2, [r7, #0]
 8009f1a:	78f9      	ldrb	r1, [r7, #3]
 8009f1c:	f7f9 f8ed 	bl	80030fa <HAL_PCD_EP_Open>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 f91c 	bl	800a164 <USBD_Get_USB_Status>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	460b      	mov	r3, r1
 8009f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f54:	78fa      	ldrb	r2, [r7, #3]
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7f9 f936 	bl	80031ca <HAL_PCD_EP_Close>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 f8fd 	bl	800a164 <USBD_Get_USB_Status>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f92:	78fa      	ldrb	r2, [r7, #3]
 8009f94:	4611      	mov	r1, r2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7f9 fa0e 	bl	80033b8 <HAL_PCD_EP_SetStall>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 f8de 	bl	800a164 <USBD_Get_USB_Status>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fd0:	78fa      	ldrb	r2, [r7, #3]
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7f9 fa53 	bl	8003480 <HAL_PCD_EP_ClrStall>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 f8bf 	bl	800a164 <USBD_Get_USB_Status>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a006:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	da0b      	bge.n	800a028 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a016:	68f9      	ldr	r1, [r7, #12]
 800a018:	4613      	mov	r3, r2
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	440b      	add	r3, r1
 800a022:	333e      	adds	r3, #62	; 0x3e
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	e00b      	b.n	800a040 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	4613      	mov	r3, r2
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	440b      	add	r3, r1
 800a03a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a03e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a040:	4618      	mov	r0, r3
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a066:	78fa      	ldrb	r2, [r7, #3]
 800a068:	4611      	mov	r1, r2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7f9 f820 	bl	80030b0 <HAL_PCD_SetAddress>
 800a070:	4603      	mov	r3, r0
 800a072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	4618      	mov	r0, r3
 800a078:	f000 f874 	bl	800a164 <USBD_Get_USB_Status>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a080:	7bbb      	ldrb	r3, [r7, #14]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b086      	sub	sp, #24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
 800a096:	460b      	mov	r3, r1
 800a098:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0a8:	7af9      	ldrb	r1, [r7, #11]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	f7f9 f939 	bl	8003324 <HAL_PCD_EP_Transmit>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f000 f853 	bl	800a164 <USBD_Get_USB_Status>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	607a      	str	r2, [r7, #4]
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0ea:	7af9      	ldrb	r1, [r7, #11]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	f7f9 f8b5 	bl	800325e <HAL_PCD_EP_Receive>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f832 	bl	800a164 <USBD_Get_USB_Status>
 800a100:	4603      	mov	r3, r0
 800a102:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a104:	7dbb      	ldrb	r3, [r7, #22]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a120:	78fa      	ldrb	r2, [r7, #3]
 800a122:	4611      	mov	r1, r2
 800a124:	4618      	mov	r0, r3
 800a126:	f7f9 f8e5 	bl	80032f4 <HAL_PCD_EP_GetRxCount>
 800a12a:	4603      	mov	r3, r0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a13c:	4b03      	ldr	r3, [pc, #12]	; (800a14c <USBD_static_malloc+0x18>)
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	200020dc 	.word	0x200020dc

0800a150 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]

}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	2b03      	cmp	r3, #3
 800a176:	d817      	bhi.n	800a1a8 <USBD_Get_USB_Status+0x44>
 800a178:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <USBD_Get_USB_Status+0x1c>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a191 	.word	0x0800a191
 800a184:	0800a197 	.word	0x0800a197
 800a188:	0800a19d 	.word	0x0800a19d
 800a18c:	0800a1a3 	.word	0x0800a1a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
    break;
 800a194:	e00b      	b.n	800a1ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	73fb      	strb	r3, [r7, #15]
    break;
 800a19a:	e008      	b.n	800a1ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a19c:	2301      	movs	r3, #1
 800a19e:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a0:	e005      	b.n	800a1ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a6:	e002      	b.n	800a1ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ac:	bf00      	nop
  }
  return usb_status;
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <__errno>:
 800a1bc:	4b01      	ldr	r3, [pc, #4]	; (800a1c4 <__errno+0x8>)
 800a1be:	6818      	ldr	r0, [r3, #0]
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	200000fc 	.word	0x200000fc

0800a1c8 <__libc_init_array>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	4d0d      	ldr	r5, [pc, #52]	; (800a200 <__libc_init_array+0x38>)
 800a1cc:	4c0d      	ldr	r4, [pc, #52]	; (800a204 <__libc_init_array+0x3c>)
 800a1ce:	1b64      	subs	r4, r4, r5
 800a1d0:	10a4      	asrs	r4, r4, #2
 800a1d2:	2600      	movs	r6, #0
 800a1d4:	42a6      	cmp	r6, r4
 800a1d6:	d109      	bne.n	800a1ec <__libc_init_array+0x24>
 800a1d8:	4d0b      	ldr	r5, [pc, #44]	; (800a208 <__libc_init_array+0x40>)
 800a1da:	4c0c      	ldr	r4, [pc, #48]	; (800a20c <__libc_init_array+0x44>)
 800a1dc:	f000 fc8e 	bl	800aafc <_init>
 800a1e0:	1b64      	subs	r4, r4, r5
 800a1e2:	10a4      	asrs	r4, r4, #2
 800a1e4:	2600      	movs	r6, #0
 800a1e6:	42a6      	cmp	r6, r4
 800a1e8:	d105      	bne.n	800a1f6 <__libc_init_array+0x2e>
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f0:	4798      	blx	r3
 800a1f2:	3601      	adds	r6, #1
 800a1f4:	e7ee      	b.n	800a1d4 <__libc_init_array+0xc>
 800a1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1fa:	4798      	blx	r3
 800a1fc:	3601      	adds	r6, #1
 800a1fe:	e7f2      	b.n	800a1e6 <__libc_init_array+0x1e>
 800a200:	0800ae3c 	.word	0x0800ae3c
 800a204:	0800ae3c 	.word	0x0800ae3c
 800a208:	0800ae3c 	.word	0x0800ae3c
 800a20c:	0800ae40 	.word	0x0800ae40

0800a210 <memcpy>:
 800a210:	440a      	add	r2, r1
 800a212:	4291      	cmp	r1, r2
 800a214:	f100 33ff 	add.w	r3, r0, #4294967295
 800a218:	d100      	bne.n	800a21c <memcpy+0xc>
 800a21a:	4770      	bx	lr
 800a21c:	b510      	push	{r4, lr}
 800a21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a226:	4291      	cmp	r1, r2
 800a228:	d1f9      	bne.n	800a21e <memcpy+0xe>
 800a22a:	bd10      	pop	{r4, pc}

0800a22c <memset>:
 800a22c:	4402      	add	r2, r0
 800a22e:	4603      	mov	r3, r0
 800a230:	4293      	cmp	r3, r2
 800a232:	d100      	bne.n	800a236 <memset+0xa>
 800a234:	4770      	bx	lr
 800a236:	f803 1b01 	strb.w	r1, [r3], #1
 800a23a:	e7f9      	b.n	800a230 <memset+0x4>

0800a23c <siprintf>:
 800a23c:	b40e      	push	{r1, r2, r3}
 800a23e:	b500      	push	{lr}
 800a240:	b09c      	sub	sp, #112	; 0x70
 800a242:	ab1d      	add	r3, sp, #116	; 0x74
 800a244:	9002      	str	r0, [sp, #8]
 800a246:	9006      	str	r0, [sp, #24]
 800a248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a24c:	4809      	ldr	r0, [pc, #36]	; (800a274 <siprintf+0x38>)
 800a24e:	9107      	str	r1, [sp, #28]
 800a250:	9104      	str	r1, [sp, #16]
 800a252:	4909      	ldr	r1, [pc, #36]	; (800a278 <siprintf+0x3c>)
 800a254:	f853 2b04 	ldr.w	r2, [r3], #4
 800a258:	9105      	str	r1, [sp, #20]
 800a25a:	6800      	ldr	r0, [r0, #0]
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	a902      	add	r1, sp, #8
 800a260:	f000 f868 	bl	800a334 <_svfiprintf_r>
 800a264:	9b02      	ldr	r3, [sp, #8]
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	b01c      	add	sp, #112	; 0x70
 800a26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a270:	b003      	add	sp, #12
 800a272:	4770      	bx	lr
 800a274:	200000fc 	.word	0x200000fc
 800a278:	ffff0208 	.word	0xffff0208

0800a27c <__ssputs_r>:
 800a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	688e      	ldr	r6, [r1, #8]
 800a282:	429e      	cmp	r6, r3
 800a284:	4682      	mov	sl, r0
 800a286:	460c      	mov	r4, r1
 800a288:	4690      	mov	r8, r2
 800a28a:	461f      	mov	r7, r3
 800a28c:	d838      	bhi.n	800a300 <__ssputs_r+0x84>
 800a28e:	898a      	ldrh	r2, [r1, #12]
 800a290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a294:	d032      	beq.n	800a2fc <__ssputs_r+0x80>
 800a296:	6825      	ldr	r5, [r4, #0]
 800a298:	6909      	ldr	r1, [r1, #16]
 800a29a:	eba5 0901 	sub.w	r9, r5, r1
 800a29e:	6965      	ldr	r5, [r4, #20]
 800a2a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	444b      	add	r3, r9
 800a2ac:	106d      	asrs	r5, r5, #1
 800a2ae:	429d      	cmp	r5, r3
 800a2b0:	bf38      	it	cc
 800a2b2:	461d      	movcc	r5, r3
 800a2b4:	0553      	lsls	r3, r2, #21
 800a2b6:	d531      	bpl.n	800a31c <__ssputs_r+0xa0>
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f000 fb55 	bl	800a968 <_malloc_r>
 800a2be:	4606      	mov	r6, r0
 800a2c0:	b950      	cbnz	r0, 800a2d8 <__ssputs_r+0x5c>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	f8ca 3000 	str.w	r3, [sl]
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ce:	81a3      	strh	r3, [r4, #12]
 800a2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d8:	6921      	ldr	r1, [r4, #16]
 800a2da:	464a      	mov	r2, r9
 800a2dc:	f7ff ff98 	bl	800a210 <memcpy>
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ea:	81a3      	strh	r3, [r4, #12]
 800a2ec:	6126      	str	r6, [r4, #16]
 800a2ee:	6165      	str	r5, [r4, #20]
 800a2f0:	444e      	add	r6, r9
 800a2f2:	eba5 0509 	sub.w	r5, r5, r9
 800a2f6:	6026      	str	r6, [r4, #0]
 800a2f8:	60a5      	str	r5, [r4, #8]
 800a2fa:	463e      	mov	r6, r7
 800a2fc:	42be      	cmp	r6, r7
 800a2fe:	d900      	bls.n	800a302 <__ssputs_r+0x86>
 800a300:	463e      	mov	r6, r7
 800a302:	6820      	ldr	r0, [r4, #0]
 800a304:	4632      	mov	r2, r6
 800a306:	4641      	mov	r1, r8
 800a308:	f000 faa8 	bl	800a85c <memmove>
 800a30c:	68a3      	ldr	r3, [r4, #8]
 800a30e:	1b9b      	subs	r3, r3, r6
 800a310:	60a3      	str	r3, [r4, #8]
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	4433      	add	r3, r6
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	2000      	movs	r0, #0
 800a31a:	e7db      	b.n	800a2d4 <__ssputs_r+0x58>
 800a31c:	462a      	mov	r2, r5
 800a31e:	f000 fb97 	bl	800aa50 <_realloc_r>
 800a322:	4606      	mov	r6, r0
 800a324:	2800      	cmp	r0, #0
 800a326:	d1e1      	bne.n	800a2ec <__ssputs_r+0x70>
 800a328:	6921      	ldr	r1, [r4, #16]
 800a32a:	4650      	mov	r0, sl
 800a32c:	f000 fab0 	bl	800a890 <_free_r>
 800a330:	e7c7      	b.n	800a2c2 <__ssputs_r+0x46>
	...

0800a334 <_svfiprintf_r>:
 800a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	4698      	mov	r8, r3
 800a33a:	898b      	ldrh	r3, [r1, #12]
 800a33c:	061b      	lsls	r3, r3, #24
 800a33e:	b09d      	sub	sp, #116	; 0x74
 800a340:	4607      	mov	r7, r0
 800a342:	460d      	mov	r5, r1
 800a344:	4614      	mov	r4, r2
 800a346:	d50e      	bpl.n	800a366 <_svfiprintf_r+0x32>
 800a348:	690b      	ldr	r3, [r1, #16]
 800a34a:	b963      	cbnz	r3, 800a366 <_svfiprintf_r+0x32>
 800a34c:	2140      	movs	r1, #64	; 0x40
 800a34e:	f000 fb0b 	bl	800a968 <_malloc_r>
 800a352:	6028      	str	r0, [r5, #0]
 800a354:	6128      	str	r0, [r5, #16]
 800a356:	b920      	cbnz	r0, 800a362 <_svfiprintf_r+0x2e>
 800a358:	230c      	movs	r3, #12
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	e0d1      	b.n	800a506 <_svfiprintf_r+0x1d2>
 800a362:	2340      	movs	r3, #64	; 0x40
 800a364:	616b      	str	r3, [r5, #20]
 800a366:	2300      	movs	r3, #0
 800a368:	9309      	str	r3, [sp, #36]	; 0x24
 800a36a:	2320      	movs	r3, #32
 800a36c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a370:	f8cd 800c 	str.w	r8, [sp, #12]
 800a374:	2330      	movs	r3, #48	; 0x30
 800a376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a520 <_svfiprintf_r+0x1ec>
 800a37a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a37e:	f04f 0901 	mov.w	r9, #1
 800a382:	4623      	mov	r3, r4
 800a384:	469a      	mov	sl, r3
 800a386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a38a:	b10a      	cbz	r2, 800a390 <_svfiprintf_r+0x5c>
 800a38c:	2a25      	cmp	r2, #37	; 0x25
 800a38e:	d1f9      	bne.n	800a384 <_svfiprintf_r+0x50>
 800a390:	ebba 0b04 	subs.w	fp, sl, r4
 800a394:	d00b      	beq.n	800a3ae <_svfiprintf_r+0x7a>
 800a396:	465b      	mov	r3, fp
 800a398:	4622      	mov	r2, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff ff6d 	bl	800a27c <__ssputs_r>
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	f000 80aa 	beq.w	800a4fc <_svfiprintf_r+0x1c8>
 800a3a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3aa:	445a      	add	r2, fp
 800a3ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80a2 	beq.w	800a4fc <_svfiprintf_r+0x1c8>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a3be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3c2:	f10a 0a01 	add.w	sl, sl, #1
 800a3c6:	9304      	str	r3, [sp, #16]
 800a3c8:	9307      	str	r3, [sp, #28]
 800a3ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a3d0:	4654      	mov	r4, sl
 800a3d2:	2205      	movs	r2, #5
 800a3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3d8:	4851      	ldr	r0, [pc, #324]	; (800a520 <_svfiprintf_r+0x1ec>)
 800a3da:	f7f5 ff09 	bl	80001f0 <memchr>
 800a3de:	9a04      	ldr	r2, [sp, #16]
 800a3e0:	b9d8      	cbnz	r0, 800a41a <_svfiprintf_r+0xe6>
 800a3e2:	06d0      	lsls	r0, r2, #27
 800a3e4:	bf44      	itt	mi
 800a3e6:	2320      	movmi	r3, #32
 800a3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ec:	0711      	lsls	r1, r2, #28
 800a3ee:	bf44      	itt	mi
 800a3f0:	232b      	movmi	r3, #43	; 0x2b
 800a3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fc:	d015      	beq.n	800a42a <_svfiprintf_r+0xf6>
 800a3fe:	9a07      	ldr	r2, [sp, #28]
 800a400:	4654      	mov	r4, sl
 800a402:	2000      	movs	r0, #0
 800a404:	f04f 0c0a 	mov.w	ip, #10
 800a408:	4621      	mov	r1, r4
 800a40a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a40e:	3b30      	subs	r3, #48	; 0x30
 800a410:	2b09      	cmp	r3, #9
 800a412:	d94e      	bls.n	800a4b2 <_svfiprintf_r+0x17e>
 800a414:	b1b0      	cbz	r0, 800a444 <_svfiprintf_r+0x110>
 800a416:	9207      	str	r2, [sp, #28]
 800a418:	e014      	b.n	800a444 <_svfiprintf_r+0x110>
 800a41a:	eba0 0308 	sub.w	r3, r0, r8
 800a41e:	fa09 f303 	lsl.w	r3, r9, r3
 800a422:	4313      	orrs	r3, r2
 800a424:	9304      	str	r3, [sp, #16]
 800a426:	46a2      	mov	sl, r4
 800a428:	e7d2      	b.n	800a3d0 <_svfiprintf_r+0x9c>
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	1d19      	adds	r1, r3, #4
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	9103      	str	r1, [sp, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	bfbb      	ittet	lt
 800a436:	425b      	neglt	r3, r3
 800a438:	f042 0202 	orrlt.w	r2, r2, #2
 800a43c:	9307      	strge	r3, [sp, #28]
 800a43e:	9307      	strlt	r3, [sp, #28]
 800a440:	bfb8      	it	lt
 800a442:	9204      	strlt	r2, [sp, #16]
 800a444:	7823      	ldrb	r3, [r4, #0]
 800a446:	2b2e      	cmp	r3, #46	; 0x2e
 800a448:	d10c      	bne.n	800a464 <_svfiprintf_r+0x130>
 800a44a:	7863      	ldrb	r3, [r4, #1]
 800a44c:	2b2a      	cmp	r3, #42	; 0x2a
 800a44e:	d135      	bne.n	800a4bc <_svfiprintf_r+0x188>
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	1d1a      	adds	r2, r3, #4
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	9203      	str	r2, [sp, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bfb8      	it	lt
 800a45c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a460:	3402      	adds	r4, #2
 800a462:	9305      	str	r3, [sp, #20]
 800a464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a530 <_svfiprintf_r+0x1fc>
 800a468:	7821      	ldrb	r1, [r4, #0]
 800a46a:	2203      	movs	r2, #3
 800a46c:	4650      	mov	r0, sl
 800a46e:	f7f5 febf 	bl	80001f0 <memchr>
 800a472:	b140      	cbz	r0, 800a486 <_svfiprintf_r+0x152>
 800a474:	2340      	movs	r3, #64	; 0x40
 800a476:	eba0 000a 	sub.w	r0, r0, sl
 800a47a:	fa03 f000 	lsl.w	r0, r3, r0
 800a47e:	9b04      	ldr	r3, [sp, #16]
 800a480:	4303      	orrs	r3, r0
 800a482:	3401      	adds	r4, #1
 800a484:	9304      	str	r3, [sp, #16]
 800a486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48a:	4826      	ldr	r0, [pc, #152]	; (800a524 <_svfiprintf_r+0x1f0>)
 800a48c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a490:	2206      	movs	r2, #6
 800a492:	f7f5 fead 	bl	80001f0 <memchr>
 800a496:	2800      	cmp	r0, #0
 800a498:	d038      	beq.n	800a50c <_svfiprintf_r+0x1d8>
 800a49a:	4b23      	ldr	r3, [pc, #140]	; (800a528 <_svfiprintf_r+0x1f4>)
 800a49c:	bb1b      	cbnz	r3, 800a4e6 <_svfiprintf_r+0x1b2>
 800a49e:	9b03      	ldr	r3, [sp, #12]
 800a4a0:	3307      	adds	r3, #7
 800a4a2:	f023 0307 	bic.w	r3, r3, #7
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ac:	4433      	add	r3, r6
 800a4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b0:	e767      	b.n	800a382 <_svfiprintf_r+0x4e>
 800a4b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	e7a5      	b.n	800a408 <_svfiprintf_r+0xd4>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	3401      	adds	r4, #1
 800a4c0:	9305      	str	r3, [sp, #20]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	f04f 0c0a 	mov.w	ip, #10
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ce:	3a30      	subs	r2, #48	; 0x30
 800a4d0:	2a09      	cmp	r2, #9
 800a4d2:	d903      	bls.n	800a4dc <_svfiprintf_r+0x1a8>
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d0c5      	beq.n	800a464 <_svfiprintf_r+0x130>
 800a4d8:	9105      	str	r1, [sp, #20]
 800a4da:	e7c3      	b.n	800a464 <_svfiprintf_r+0x130>
 800a4dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e7f0      	b.n	800a4c8 <_svfiprintf_r+0x194>
 800a4e6:	ab03      	add	r3, sp, #12
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	462a      	mov	r2, r5
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <_svfiprintf_r+0x1f8>)
 800a4ee:	a904      	add	r1, sp, #16
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	f3af 8000 	nop.w
 800a4f6:	1c42      	adds	r2, r0, #1
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	d1d6      	bne.n	800a4aa <_svfiprintf_r+0x176>
 800a4fc:	89ab      	ldrh	r3, [r5, #12]
 800a4fe:	065b      	lsls	r3, r3, #25
 800a500:	f53f af2c 	bmi.w	800a35c <_svfiprintf_r+0x28>
 800a504:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a506:	b01d      	add	sp, #116	; 0x74
 800a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50c:	ab03      	add	r3, sp, #12
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	462a      	mov	r2, r5
 800a512:	4b06      	ldr	r3, [pc, #24]	; (800a52c <_svfiprintf_r+0x1f8>)
 800a514:	a904      	add	r1, sp, #16
 800a516:	4638      	mov	r0, r7
 800a518:	f000 f87a 	bl	800a610 <_printf_i>
 800a51c:	e7eb      	b.n	800a4f6 <_svfiprintf_r+0x1c2>
 800a51e:	bf00      	nop
 800a520:	0800ae00 	.word	0x0800ae00
 800a524:	0800ae0a 	.word	0x0800ae0a
 800a528:	00000000 	.word	0x00000000
 800a52c:	0800a27d 	.word	0x0800a27d
 800a530:	0800ae06 	.word	0x0800ae06

0800a534 <_printf_common>:
 800a534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a538:	4616      	mov	r6, r2
 800a53a:	4699      	mov	r9, r3
 800a53c:	688a      	ldr	r2, [r1, #8]
 800a53e:	690b      	ldr	r3, [r1, #16]
 800a540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a544:	4293      	cmp	r3, r2
 800a546:	bfb8      	it	lt
 800a548:	4613      	movlt	r3, r2
 800a54a:	6033      	str	r3, [r6, #0]
 800a54c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a550:	4607      	mov	r7, r0
 800a552:	460c      	mov	r4, r1
 800a554:	b10a      	cbz	r2, 800a55a <_printf_common+0x26>
 800a556:	3301      	adds	r3, #1
 800a558:	6033      	str	r3, [r6, #0]
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	0699      	lsls	r1, r3, #26
 800a55e:	bf42      	ittt	mi
 800a560:	6833      	ldrmi	r3, [r6, #0]
 800a562:	3302      	addmi	r3, #2
 800a564:	6033      	strmi	r3, [r6, #0]
 800a566:	6825      	ldr	r5, [r4, #0]
 800a568:	f015 0506 	ands.w	r5, r5, #6
 800a56c:	d106      	bne.n	800a57c <_printf_common+0x48>
 800a56e:	f104 0a19 	add.w	sl, r4, #25
 800a572:	68e3      	ldr	r3, [r4, #12]
 800a574:	6832      	ldr	r2, [r6, #0]
 800a576:	1a9b      	subs	r3, r3, r2
 800a578:	42ab      	cmp	r3, r5
 800a57a:	dc26      	bgt.n	800a5ca <_printf_common+0x96>
 800a57c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a580:	1e13      	subs	r3, r2, #0
 800a582:	6822      	ldr	r2, [r4, #0]
 800a584:	bf18      	it	ne
 800a586:	2301      	movne	r3, #1
 800a588:	0692      	lsls	r2, r2, #26
 800a58a:	d42b      	bmi.n	800a5e4 <_printf_common+0xb0>
 800a58c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a590:	4649      	mov	r1, r9
 800a592:	4638      	mov	r0, r7
 800a594:	47c0      	blx	r8
 800a596:	3001      	adds	r0, #1
 800a598:	d01e      	beq.n	800a5d8 <_printf_common+0xa4>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	68e5      	ldr	r5, [r4, #12]
 800a59e:	6832      	ldr	r2, [r6, #0]
 800a5a0:	f003 0306 	and.w	r3, r3, #6
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	bf08      	it	eq
 800a5a8:	1aad      	subeq	r5, r5, r2
 800a5aa:	68a3      	ldr	r3, [r4, #8]
 800a5ac:	6922      	ldr	r2, [r4, #16]
 800a5ae:	bf0c      	ite	eq
 800a5b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5b4:	2500      	movne	r5, #0
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	bfc4      	itt	gt
 800a5ba:	1a9b      	subgt	r3, r3, r2
 800a5bc:	18ed      	addgt	r5, r5, r3
 800a5be:	2600      	movs	r6, #0
 800a5c0:	341a      	adds	r4, #26
 800a5c2:	42b5      	cmp	r5, r6
 800a5c4:	d11a      	bne.n	800a5fc <_printf_common+0xc8>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	e008      	b.n	800a5dc <_printf_common+0xa8>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	4652      	mov	r2, sl
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	47c0      	blx	r8
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d103      	bne.n	800a5e0 <_printf_common+0xac>
 800a5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e0:	3501      	adds	r5, #1
 800a5e2:	e7c6      	b.n	800a572 <_printf_common+0x3e>
 800a5e4:	18e1      	adds	r1, r4, r3
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	2030      	movs	r0, #48	; 0x30
 800a5ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5ee:	4422      	add	r2, r4
 800a5f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5f8:	3302      	adds	r3, #2
 800a5fa:	e7c7      	b.n	800a58c <_printf_common+0x58>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	4622      	mov	r2, r4
 800a600:	4649      	mov	r1, r9
 800a602:	4638      	mov	r0, r7
 800a604:	47c0      	blx	r8
 800a606:	3001      	adds	r0, #1
 800a608:	d0e6      	beq.n	800a5d8 <_printf_common+0xa4>
 800a60a:	3601      	adds	r6, #1
 800a60c:	e7d9      	b.n	800a5c2 <_printf_common+0x8e>
	...

0800a610 <_printf_i>:
 800a610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a614:	7e0f      	ldrb	r7, [r1, #24]
 800a616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a618:	2f78      	cmp	r7, #120	; 0x78
 800a61a:	4691      	mov	r9, r2
 800a61c:	4680      	mov	r8, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	469a      	mov	sl, r3
 800a622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a626:	d807      	bhi.n	800a638 <_printf_i+0x28>
 800a628:	2f62      	cmp	r7, #98	; 0x62
 800a62a:	d80a      	bhi.n	800a642 <_printf_i+0x32>
 800a62c:	2f00      	cmp	r7, #0
 800a62e:	f000 80d8 	beq.w	800a7e2 <_printf_i+0x1d2>
 800a632:	2f58      	cmp	r7, #88	; 0x58
 800a634:	f000 80a3 	beq.w	800a77e <_printf_i+0x16e>
 800a638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a63c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a640:	e03a      	b.n	800a6b8 <_printf_i+0xa8>
 800a642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a646:	2b15      	cmp	r3, #21
 800a648:	d8f6      	bhi.n	800a638 <_printf_i+0x28>
 800a64a:	a101      	add	r1, pc, #4	; (adr r1, 800a650 <_printf_i+0x40>)
 800a64c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a650:	0800a6a9 	.word	0x0800a6a9
 800a654:	0800a6bd 	.word	0x0800a6bd
 800a658:	0800a639 	.word	0x0800a639
 800a65c:	0800a639 	.word	0x0800a639
 800a660:	0800a639 	.word	0x0800a639
 800a664:	0800a639 	.word	0x0800a639
 800a668:	0800a6bd 	.word	0x0800a6bd
 800a66c:	0800a639 	.word	0x0800a639
 800a670:	0800a639 	.word	0x0800a639
 800a674:	0800a639 	.word	0x0800a639
 800a678:	0800a639 	.word	0x0800a639
 800a67c:	0800a7c9 	.word	0x0800a7c9
 800a680:	0800a6ed 	.word	0x0800a6ed
 800a684:	0800a7ab 	.word	0x0800a7ab
 800a688:	0800a639 	.word	0x0800a639
 800a68c:	0800a639 	.word	0x0800a639
 800a690:	0800a7eb 	.word	0x0800a7eb
 800a694:	0800a639 	.word	0x0800a639
 800a698:	0800a6ed 	.word	0x0800a6ed
 800a69c:	0800a639 	.word	0x0800a639
 800a6a0:	0800a639 	.word	0x0800a639
 800a6a4:	0800a7b3 	.word	0x0800a7b3
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	1d1a      	adds	r2, r3, #4
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	602a      	str	r2, [r5, #0]
 800a6b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e0a3      	b.n	800a804 <_printf_i+0x1f4>
 800a6bc:	6820      	ldr	r0, [r4, #0]
 800a6be:	6829      	ldr	r1, [r5, #0]
 800a6c0:	0606      	lsls	r6, r0, #24
 800a6c2:	f101 0304 	add.w	r3, r1, #4
 800a6c6:	d50a      	bpl.n	800a6de <_printf_i+0xce>
 800a6c8:	680e      	ldr	r6, [r1, #0]
 800a6ca:	602b      	str	r3, [r5, #0]
 800a6cc:	2e00      	cmp	r6, #0
 800a6ce:	da03      	bge.n	800a6d8 <_printf_i+0xc8>
 800a6d0:	232d      	movs	r3, #45	; 0x2d
 800a6d2:	4276      	negs	r6, r6
 800a6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d8:	485e      	ldr	r0, [pc, #376]	; (800a854 <_printf_i+0x244>)
 800a6da:	230a      	movs	r3, #10
 800a6dc:	e019      	b.n	800a712 <_printf_i+0x102>
 800a6de:	680e      	ldr	r6, [r1, #0]
 800a6e0:	602b      	str	r3, [r5, #0]
 800a6e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6e6:	bf18      	it	ne
 800a6e8:	b236      	sxthne	r6, r6
 800a6ea:	e7ef      	b.n	800a6cc <_printf_i+0xbc>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	6820      	ldr	r0, [r4, #0]
 800a6f0:	1d19      	adds	r1, r3, #4
 800a6f2:	6029      	str	r1, [r5, #0]
 800a6f4:	0601      	lsls	r1, r0, #24
 800a6f6:	d501      	bpl.n	800a6fc <_printf_i+0xec>
 800a6f8:	681e      	ldr	r6, [r3, #0]
 800a6fa:	e002      	b.n	800a702 <_printf_i+0xf2>
 800a6fc:	0646      	lsls	r6, r0, #25
 800a6fe:	d5fb      	bpl.n	800a6f8 <_printf_i+0xe8>
 800a700:	881e      	ldrh	r6, [r3, #0]
 800a702:	4854      	ldr	r0, [pc, #336]	; (800a854 <_printf_i+0x244>)
 800a704:	2f6f      	cmp	r7, #111	; 0x6f
 800a706:	bf0c      	ite	eq
 800a708:	2308      	moveq	r3, #8
 800a70a:	230a      	movne	r3, #10
 800a70c:	2100      	movs	r1, #0
 800a70e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a712:	6865      	ldr	r5, [r4, #4]
 800a714:	60a5      	str	r5, [r4, #8]
 800a716:	2d00      	cmp	r5, #0
 800a718:	bfa2      	ittt	ge
 800a71a:	6821      	ldrge	r1, [r4, #0]
 800a71c:	f021 0104 	bicge.w	r1, r1, #4
 800a720:	6021      	strge	r1, [r4, #0]
 800a722:	b90e      	cbnz	r6, 800a728 <_printf_i+0x118>
 800a724:	2d00      	cmp	r5, #0
 800a726:	d04d      	beq.n	800a7c4 <_printf_i+0x1b4>
 800a728:	4615      	mov	r5, r2
 800a72a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a72e:	fb03 6711 	mls	r7, r3, r1, r6
 800a732:	5dc7      	ldrb	r7, [r0, r7]
 800a734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a738:	4637      	mov	r7, r6
 800a73a:	42bb      	cmp	r3, r7
 800a73c:	460e      	mov	r6, r1
 800a73e:	d9f4      	bls.n	800a72a <_printf_i+0x11a>
 800a740:	2b08      	cmp	r3, #8
 800a742:	d10b      	bne.n	800a75c <_printf_i+0x14c>
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	07de      	lsls	r6, r3, #31
 800a748:	d508      	bpl.n	800a75c <_printf_i+0x14c>
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	6861      	ldr	r1, [r4, #4]
 800a74e:	4299      	cmp	r1, r3
 800a750:	bfde      	ittt	le
 800a752:	2330      	movle	r3, #48	; 0x30
 800a754:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a75c:	1b52      	subs	r2, r2, r5
 800a75e:	6122      	str	r2, [r4, #16]
 800a760:	f8cd a000 	str.w	sl, [sp]
 800a764:	464b      	mov	r3, r9
 800a766:	aa03      	add	r2, sp, #12
 800a768:	4621      	mov	r1, r4
 800a76a:	4640      	mov	r0, r8
 800a76c:	f7ff fee2 	bl	800a534 <_printf_common>
 800a770:	3001      	adds	r0, #1
 800a772:	d14c      	bne.n	800a80e <_printf_i+0x1fe>
 800a774:	f04f 30ff 	mov.w	r0, #4294967295
 800a778:	b004      	add	sp, #16
 800a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77e:	4835      	ldr	r0, [pc, #212]	; (800a854 <_printf_i+0x244>)
 800a780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a784:	6829      	ldr	r1, [r5, #0]
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	f851 6b04 	ldr.w	r6, [r1], #4
 800a78c:	6029      	str	r1, [r5, #0]
 800a78e:	061d      	lsls	r5, r3, #24
 800a790:	d514      	bpl.n	800a7bc <_printf_i+0x1ac>
 800a792:	07df      	lsls	r7, r3, #31
 800a794:	bf44      	itt	mi
 800a796:	f043 0320 	orrmi.w	r3, r3, #32
 800a79a:	6023      	strmi	r3, [r4, #0]
 800a79c:	b91e      	cbnz	r6, 800a7a6 <_printf_i+0x196>
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	f023 0320 	bic.w	r3, r3, #32
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	2310      	movs	r3, #16
 800a7a8:	e7b0      	b.n	800a70c <_printf_i+0xfc>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	f043 0320 	orr.w	r3, r3, #32
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	2378      	movs	r3, #120	; 0x78
 800a7b4:	4828      	ldr	r0, [pc, #160]	; (800a858 <_printf_i+0x248>)
 800a7b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7ba:	e7e3      	b.n	800a784 <_printf_i+0x174>
 800a7bc:	0659      	lsls	r1, r3, #25
 800a7be:	bf48      	it	mi
 800a7c0:	b2b6      	uxthmi	r6, r6
 800a7c2:	e7e6      	b.n	800a792 <_printf_i+0x182>
 800a7c4:	4615      	mov	r5, r2
 800a7c6:	e7bb      	b.n	800a740 <_printf_i+0x130>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	6826      	ldr	r6, [r4, #0]
 800a7cc:	6961      	ldr	r1, [r4, #20]
 800a7ce:	1d18      	adds	r0, r3, #4
 800a7d0:	6028      	str	r0, [r5, #0]
 800a7d2:	0635      	lsls	r5, r6, #24
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	d501      	bpl.n	800a7dc <_printf_i+0x1cc>
 800a7d8:	6019      	str	r1, [r3, #0]
 800a7da:	e002      	b.n	800a7e2 <_printf_i+0x1d2>
 800a7dc:	0670      	lsls	r0, r6, #25
 800a7de:	d5fb      	bpl.n	800a7d8 <_printf_i+0x1c8>
 800a7e0:	8019      	strh	r1, [r3, #0]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	4615      	mov	r5, r2
 800a7e8:	e7ba      	b.n	800a760 <_printf_i+0x150>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	1d1a      	adds	r2, r3, #4
 800a7ee:	602a      	str	r2, [r5, #0]
 800a7f0:	681d      	ldr	r5, [r3, #0]
 800a7f2:	6862      	ldr	r2, [r4, #4]
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7f5 fcfa 	bl	80001f0 <memchr>
 800a7fc:	b108      	cbz	r0, 800a802 <_printf_i+0x1f2>
 800a7fe:	1b40      	subs	r0, r0, r5
 800a800:	6060      	str	r0, [r4, #4]
 800a802:	6863      	ldr	r3, [r4, #4]
 800a804:	6123      	str	r3, [r4, #16]
 800a806:	2300      	movs	r3, #0
 800a808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a80c:	e7a8      	b.n	800a760 <_printf_i+0x150>
 800a80e:	6923      	ldr	r3, [r4, #16]
 800a810:	462a      	mov	r2, r5
 800a812:	4649      	mov	r1, r9
 800a814:	4640      	mov	r0, r8
 800a816:	47d0      	blx	sl
 800a818:	3001      	adds	r0, #1
 800a81a:	d0ab      	beq.n	800a774 <_printf_i+0x164>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	079b      	lsls	r3, r3, #30
 800a820:	d413      	bmi.n	800a84a <_printf_i+0x23a>
 800a822:	68e0      	ldr	r0, [r4, #12]
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	4298      	cmp	r0, r3
 800a828:	bfb8      	it	lt
 800a82a:	4618      	movlt	r0, r3
 800a82c:	e7a4      	b.n	800a778 <_printf_i+0x168>
 800a82e:	2301      	movs	r3, #1
 800a830:	4632      	mov	r2, r6
 800a832:	4649      	mov	r1, r9
 800a834:	4640      	mov	r0, r8
 800a836:	47d0      	blx	sl
 800a838:	3001      	adds	r0, #1
 800a83a:	d09b      	beq.n	800a774 <_printf_i+0x164>
 800a83c:	3501      	adds	r5, #1
 800a83e:	68e3      	ldr	r3, [r4, #12]
 800a840:	9903      	ldr	r1, [sp, #12]
 800a842:	1a5b      	subs	r3, r3, r1
 800a844:	42ab      	cmp	r3, r5
 800a846:	dcf2      	bgt.n	800a82e <_printf_i+0x21e>
 800a848:	e7eb      	b.n	800a822 <_printf_i+0x212>
 800a84a:	2500      	movs	r5, #0
 800a84c:	f104 0619 	add.w	r6, r4, #25
 800a850:	e7f5      	b.n	800a83e <_printf_i+0x22e>
 800a852:	bf00      	nop
 800a854:	0800ae11 	.word	0x0800ae11
 800a858:	0800ae22 	.word	0x0800ae22

0800a85c <memmove>:
 800a85c:	4288      	cmp	r0, r1
 800a85e:	b510      	push	{r4, lr}
 800a860:	eb01 0402 	add.w	r4, r1, r2
 800a864:	d902      	bls.n	800a86c <memmove+0x10>
 800a866:	4284      	cmp	r4, r0
 800a868:	4623      	mov	r3, r4
 800a86a:	d807      	bhi.n	800a87c <memmove+0x20>
 800a86c:	1e43      	subs	r3, r0, #1
 800a86e:	42a1      	cmp	r1, r4
 800a870:	d008      	beq.n	800a884 <memmove+0x28>
 800a872:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a87a:	e7f8      	b.n	800a86e <memmove+0x12>
 800a87c:	4402      	add	r2, r0
 800a87e:	4601      	mov	r1, r0
 800a880:	428a      	cmp	r2, r1
 800a882:	d100      	bne.n	800a886 <memmove+0x2a>
 800a884:	bd10      	pop	{r4, pc}
 800a886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a88a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a88e:	e7f7      	b.n	800a880 <memmove+0x24>

0800a890 <_free_r>:
 800a890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a892:	2900      	cmp	r1, #0
 800a894:	d044      	beq.n	800a920 <_free_r+0x90>
 800a896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a89a:	9001      	str	r0, [sp, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f1a1 0404 	sub.w	r4, r1, #4
 800a8a2:	bfb8      	it	lt
 800a8a4:	18e4      	addlt	r4, r4, r3
 800a8a6:	f000 f913 	bl	800aad0 <__malloc_lock>
 800a8aa:	4a1e      	ldr	r2, [pc, #120]	; (800a924 <_free_r+0x94>)
 800a8ac:	9801      	ldr	r0, [sp, #4]
 800a8ae:	6813      	ldr	r3, [r2, #0]
 800a8b0:	b933      	cbnz	r3, 800a8c0 <_free_r+0x30>
 800a8b2:	6063      	str	r3, [r4, #4]
 800a8b4:	6014      	str	r4, [r2, #0]
 800a8b6:	b003      	add	sp, #12
 800a8b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8bc:	f000 b90e 	b.w	800aadc <__malloc_unlock>
 800a8c0:	42a3      	cmp	r3, r4
 800a8c2:	d908      	bls.n	800a8d6 <_free_r+0x46>
 800a8c4:	6825      	ldr	r5, [r4, #0]
 800a8c6:	1961      	adds	r1, r4, r5
 800a8c8:	428b      	cmp	r3, r1
 800a8ca:	bf01      	itttt	eq
 800a8cc:	6819      	ldreq	r1, [r3, #0]
 800a8ce:	685b      	ldreq	r3, [r3, #4]
 800a8d0:	1949      	addeq	r1, r1, r5
 800a8d2:	6021      	streq	r1, [r4, #0]
 800a8d4:	e7ed      	b.n	800a8b2 <_free_r+0x22>
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	b10b      	cbz	r3, 800a8e0 <_free_r+0x50>
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	d9fa      	bls.n	800a8d6 <_free_r+0x46>
 800a8e0:	6811      	ldr	r1, [r2, #0]
 800a8e2:	1855      	adds	r5, r2, r1
 800a8e4:	42a5      	cmp	r5, r4
 800a8e6:	d10b      	bne.n	800a900 <_free_r+0x70>
 800a8e8:	6824      	ldr	r4, [r4, #0]
 800a8ea:	4421      	add	r1, r4
 800a8ec:	1854      	adds	r4, r2, r1
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	6011      	str	r1, [r2, #0]
 800a8f2:	d1e0      	bne.n	800a8b6 <_free_r+0x26>
 800a8f4:	681c      	ldr	r4, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	6053      	str	r3, [r2, #4]
 800a8fa:	4421      	add	r1, r4
 800a8fc:	6011      	str	r1, [r2, #0]
 800a8fe:	e7da      	b.n	800a8b6 <_free_r+0x26>
 800a900:	d902      	bls.n	800a908 <_free_r+0x78>
 800a902:	230c      	movs	r3, #12
 800a904:	6003      	str	r3, [r0, #0]
 800a906:	e7d6      	b.n	800a8b6 <_free_r+0x26>
 800a908:	6825      	ldr	r5, [r4, #0]
 800a90a:	1961      	adds	r1, r4, r5
 800a90c:	428b      	cmp	r3, r1
 800a90e:	bf04      	itt	eq
 800a910:	6819      	ldreq	r1, [r3, #0]
 800a912:	685b      	ldreq	r3, [r3, #4]
 800a914:	6063      	str	r3, [r4, #4]
 800a916:	bf04      	itt	eq
 800a918:	1949      	addeq	r1, r1, r5
 800a91a:	6021      	streq	r1, [r4, #0]
 800a91c:	6054      	str	r4, [r2, #4]
 800a91e:	e7ca      	b.n	800a8b6 <_free_r+0x26>
 800a920:	b003      	add	sp, #12
 800a922:	bd30      	pop	{r4, r5, pc}
 800a924:	200022fc 	.word	0x200022fc

0800a928 <sbrk_aligned>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	4e0e      	ldr	r6, [pc, #56]	; (800a964 <sbrk_aligned+0x3c>)
 800a92c:	460c      	mov	r4, r1
 800a92e:	6831      	ldr	r1, [r6, #0]
 800a930:	4605      	mov	r5, r0
 800a932:	b911      	cbnz	r1, 800a93a <sbrk_aligned+0x12>
 800a934:	f000 f8bc 	bl	800aab0 <_sbrk_r>
 800a938:	6030      	str	r0, [r6, #0]
 800a93a:	4621      	mov	r1, r4
 800a93c:	4628      	mov	r0, r5
 800a93e:	f000 f8b7 	bl	800aab0 <_sbrk_r>
 800a942:	1c43      	adds	r3, r0, #1
 800a944:	d00a      	beq.n	800a95c <sbrk_aligned+0x34>
 800a946:	1cc4      	adds	r4, r0, #3
 800a948:	f024 0403 	bic.w	r4, r4, #3
 800a94c:	42a0      	cmp	r0, r4
 800a94e:	d007      	beq.n	800a960 <sbrk_aligned+0x38>
 800a950:	1a21      	subs	r1, r4, r0
 800a952:	4628      	mov	r0, r5
 800a954:	f000 f8ac 	bl	800aab0 <_sbrk_r>
 800a958:	3001      	adds	r0, #1
 800a95a:	d101      	bne.n	800a960 <sbrk_aligned+0x38>
 800a95c:	f04f 34ff 	mov.w	r4, #4294967295
 800a960:	4620      	mov	r0, r4
 800a962:	bd70      	pop	{r4, r5, r6, pc}
 800a964:	20002300 	.word	0x20002300

0800a968 <_malloc_r>:
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	1ccd      	adds	r5, r1, #3
 800a96e:	f025 0503 	bic.w	r5, r5, #3
 800a972:	3508      	adds	r5, #8
 800a974:	2d0c      	cmp	r5, #12
 800a976:	bf38      	it	cc
 800a978:	250c      	movcc	r5, #12
 800a97a:	2d00      	cmp	r5, #0
 800a97c:	4607      	mov	r7, r0
 800a97e:	db01      	blt.n	800a984 <_malloc_r+0x1c>
 800a980:	42a9      	cmp	r1, r5
 800a982:	d905      	bls.n	800a990 <_malloc_r+0x28>
 800a984:	230c      	movs	r3, #12
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	2600      	movs	r6, #0
 800a98a:	4630      	mov	r0, r6
 800a98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a990:	4e2e      	ldr	r6, [pc, #184]	; (800aa4c <_malloc_r+0xe4>)
 800a992:	f000 f89d 	bl	800aad0 <__malloc_lock>
 800a996:	6833      	ldr	r3, [r6, #0]
 800a998:	461c      	mov	r4, r3
 800a99a:	bb34      	cbnz	r4, 800a9ea <_malloc_r+0x82>
 800a99c:	4629      	mov	r1, r5
 800a99e:	4638      	mov	r0, r7
 800a9a0:	f7ff ffc2 	bl	800a928 <sbrk_aligned>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	d14d      	bne.n	800aa46 <_malloc_r+0xde>
 800a9aa:	6834      	ldr	r4, [r6, #0]
 800a9ac:	4626      	mov	r6, r4
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	d140      	bne.n	800aa34 <_malloc_r+0xcc>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	eb04 0803 	add.w	r8, r4, r3
 800a9bc:	f000 f878 	bl	800aab0 <_sbrk_r>
 800a9c0:	4580      	cmp	r8, r0
 800a9c2:	d13a      	bne.n	800aa3a <_malloc_r+0xd2>
 800a9c4:	6821      	ldr	r1, [r4, #0]
 800a9c6:	3503      	adds	r5, #3
 800a9c8:	1a6d      	subs	r5, r5, r1
 800a9ca:	f025 0503 	bic.w	r5, r5, #3
 800a9ce:	3508      	adds	r5, #8
 800a9d0:	2d0c      	cmp	r5, #12
 800a9d2:	bf38      	it	cc
 800a9d4:	250c      	movcc	r5, #12
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7ff ffa5 	bl	800a928 <sbrk_aligned>
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d02b      	beq.n	800aa3a <_malloc_r+0xd2>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	442b      	add	r3, r5
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	e00e      	b.n	800aa08 <_malloc_r+0xa0>
 800a9ea:	6822      	ldr	r2, [r4, #0]
 800a9ec:	1b52      	subs	r2, r2, r5
 800a9ee:	d41e      	bmi.n	800aa2e <_malloc_r+0xc6>
 800a9f0:	2a0b      	cmp	r2, #11
 800a9f2:	d916      	bls.n	800aa22 <_malloc_r+0xba>
 800a9f4:	1961      	adds	r1, r4, r5
 800a9f6:	42a3      	cmp	r3, r4
 800a9f8:	6025      	str	r5, [r4, #0]
 800a9fa:	bf18      	it	ne
 800a9fc:	6059      	strne	r1, [r3, #4]
 800a9fe:	6863      	ldr	r3, [r4, #4]
 800aa00:	bf08      	it	eq
 800aa02:	6031      	streq	r1, [r6, #0]
 800aa04:	5162      	str	r2, [r4, r5]
 800aa06:	604b      	str	r3, [r1, #4]
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f104 060b 	add.w	r6, r4, #11
 800aa0e:	f000 f865 	bl	800aadc <__malloc_unlock>
 800aa12:	f026 0607 	bic.w	r6, r6, #7
 800aa16:	1d23      	adds	r3, r4, #4
 800aa18:	1af2      	subs	r2, r6, r3
 800aa1a:	d0b6      	beq.n	800a98a <_malloc_r+0x22>
 800aa1c:	1b9b      	subs	r3, r3, r6
 800aa1e:	50a3      	str	r3, [r4, r2]
 800aa20:	e7b3      	b.n	800a98a <_malloc_r+0x22>
 800aa22:	6862      	ldr	r2, [r4, #4]
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	bf0c      	ite	eq
 800aa28:	6032      	streq	r2, [r6, #0]
 800aa2a:	605a      	strne	r2, [r3, #4]
 800aa2c:	e7ec      	b.n	800aa08 <_malloc_r+0xa0>
 800aa2e:	4623      	mov	r3, r4
 800aa30:	6864      	ldr	r4, [r4, #4]
 800aa32:	e7b2      	b.n	800a99a <_malloc_r+0x32>
 800aa34:	4634      	mov	r4, r6
 800aa36:	6876      	ldr	r6, [r6, #4]
 800aa38:	e7b9      	b.n	800a9ae <_malloc_r+0x46>
 800aa3a:	230c      	movs	r3, #12
 800aa3c:	603b      	str	r3, [r7, #0]
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f000 f84c 	bl	800aadc <__malloc_unlock>
 800aa44:	e7a1      	b.n	800a98a <_malloc_r+0x22>
 800aa46:	6025      	str	r5, [r4, #0]
 800aa48:	e7de      	b.n	800aa08 <_malloc_r+0xa0>
 800aa4a:	bf00      	nop
 800aa4c:	200022fc 	.word	0x200022fc

0800aa50 <_realloc_r>:
 800aa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa54:	4680      	mov	r8, r0
 800aa56:	4614      	mov	r4, r2
 800aa58:	460e      	mov	r6, r1
 800aa5a:	b921      	cbnz	r1, 800aa66 <_realloc_r+0x16>
 800aa5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa60:	4611      	mov	r1, r2
 800aa62:	f7ff bf81 	b.w	800a968 <_malloc_r>
 800aa66:	b92a      	cbnz	r2, 800aa74 <_realloc_r+0x24>
 800aa68:	f7ff ff12 	bl	800a890 <_free_r>
 800aa6c:	4625      	mov	r5, r4
 800aa6e:	4628      	mov	r0, r5
 800aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa74:	f000 f838 	bl	800aae8 <_malloc_usable_size_r>
 800aa78:	4284      	cmp	r4, r0
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	d802      	bhi.n	800aa84 <_realloc_r+0x34>
 800aa7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa82:	d812      	bhi.n	800aaaa <_realloc_r+0x5a>
 800aa84:	4621      	mov	r1, r4
 800aa86:	4640      	mov	r0, r8
 800aa88:	f7ff ff6e 	bl	800a968 <_malloc_r>
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d0ed      	beq.n	800aa6e <_realloc_r+0x1e>
 800aa92:	42bc      	cmp	r4, r7
 800aa94:	4622      	mov	r2, r4
 800aa96:	4631      	mov	r1, r6
 800aa98:	bf28      	it	cs
 800aa9a:	463a      	movcs	r2, r7
 800aa9c:	f7ff fbb8 	bl	800a210 <memcpy>
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	f7ff fef4 	bl	800a890 <_free_r>
 800aaa8:	e7e1      	b.n	800aa6e <_realloc_r+0x1e>
 800aaaa:	4635      	mov	r5, r6
 800aaac:	e7df      	b.n	800aa6e <_realloc_r+0x1e>
	...

0800aab0 <_sbrk_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d06      	ldr	r5, [pc, #24]	; (800aacc <_sbrk_r+0x1c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f6 fd50 	bl	8001560 <_sbrk>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_sbrk_r+0x1a>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_sbrk_r+0x1a>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20002304 	.word	0x20002304

0800aad0 <__malloc_lock>:
 800aad0:	4801      	ldr	r0, [pc, #4]	; (800aad8 <__malloc_lock+0x8>)
 800aad2:	f000 b811 	b.w	800aaf8 <__retarget_lock_acquire_recursive>
 800aad6:	bf00      	nop
 800aad8:	20002308 	.word	0x20002308

0800aadc <__malloc_unlock>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__malloc_unlock+0x8>)
 800aade:	f000 b80c 	b.w	800aafa <__retarget_lock_release_recursive>
 800aae2:	bf00      	nop
 800aae4:	20002308 	.word	0x20002308

0800aae8 <_malloc_usable_size_r>:
 800aae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaec:	1f18      	subs	r0, r3, #4
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bfbc      	itt	lt
 800aaf2:	580b      	ldrlt	r3, [r1, r0]
 800aaf4:	18c0      	addlt	r0, r0, r3
 800aaf6:	4770      	bx	lr

0800aaf8 <__retarget_lock_acquire_recursive>:
 800aaf8:	4770      	bx	lr

0800aafa <__retarget_lock_release_recursive>:
 800aafa:	4770      	bx	lr

0800aafc <_init>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr

0800ab08 <_fini>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	bf00      	nop
 800ab0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0e:	bc08      	pop	{r3}
 800ab10:	469e      	mov	lr, r3
 800ab12:	4770      	bx	lr
