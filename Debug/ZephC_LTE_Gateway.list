
ZephC_LTE_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b534  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd80  0800bd80  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd80  0800bd80  0001bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd88  0800bd88  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd88  0800bd88  0001bd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800bd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002694  20000160  0800bef0  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027f4  0800bef0  000227f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019811  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce0  00000000  00000000  000399a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  0003d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acde  00000000  00000000  0003fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b528  00000000  00000000  0005ab3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a9f  00000000  00000000  00076066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108b05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a18  00000000  00000000  00108b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b6bc 	.word	0x0800b6bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800b6bc 	.word	0x0800b6bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db0b      	blt.n	80005be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 021f 	and.w	r2, r3, #31
 80005ac:	4907      	ldr	r1, [pc, #28]	; (80005cc <__NVIC_EnableIRQ+0x38>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	095b      	lsrs	r3, r3, #5
 80005b4:	2001      	movs	r0, #1
 80005b6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <initEXIT>:
#include "stm32f4xx.h"
#include "stm32f4xx_it.h"

unsigned char intterruptEvent_Flag = 0;

void initEXIT(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// Enable GPIO Clock
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <initEXIT+0x7c>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <initEXIT+0x7c>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER &= ~3U << 6;					// GPIO B3 set 00 - INPUT
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <initEXIT+0x80>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1a      	ldr	r2, [pc, #104]	; (8000650 <initEXIT+0x80>)
 80005e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005ea:	6013      	str	r3, [r2, #0]
	GPIOB -> PUPDR &= ~3U << 6;					// No pull-up|pull-down
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <initEXIT+0x80>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <initEXIT+0x80>)
 80005f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005f6:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI3_IRQn);					// Enable interrupt
 80005f8:	2009      	movs	r0, #9
 80005fa:	f7ff ffcb 	bl	8000594 <__NVIC_EnableIRQ>

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <initEXIT+0x7c>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <initEXIT+0x7c>)
 8000604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000608:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG -> EXTICR[0] &= SYSCFG_EXTICR1_EXTI3;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <initEXIT+0x84>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <initEXIT+0x84>)
 8000610:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000614:	6093      	str	r3, [r2, #8]
	SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <initEXIT+0x84>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <initEXIT+0x84>)
 800061c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000620:	6093      	str	r3, [r2, #8]

	EXTI -> RTSR &= ~EXTI_RTSR_TR3;				// Disable rising trigger
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <initEXIT+0x88>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <initEXIT+0x88>)
 8000628:	f023 0308 	bic.w	r3, r3, #8
 800062c:	6093      	str	r3, [r2, #8]
	EXTI -> RTSR |= EXTI_FTSR_TR3;				// Enable falling trigger
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <initEXIT+0x88>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <initEXIT+0x88>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6093      	str	r3, [r2, #8]

//	EXTI -> RTSR |= EXTI_RTSR_TR3;
//	EXTI -> RTSR &= ~EXTI_FTSR_TR3;

	EXTI -> IMR |= EXTI_IMR_IM3;				// Interrupt Mask 1 = not mask
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <initEXIT+0x88>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <initEXIT+0x88>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400
 8000654:	40013800 	.word	0x40013800
 8000658:	40013c00 	.word	0x40013c00

0800065c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void) {
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	if((EXTI -> PR & EXTI_PR_PR3) != 0) {
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <EXTI3_IRQHandler+0x22>
		intterruptEvent_Flag = 1;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <EXTI3_IRQHandler+0x30>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		EXTI -> PR |= EXTI_PR_PR3;
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <EXTI3_IRQHandler+0x2c>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6153      	str	r3, [r2, #20]
	}
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	40013c00 	.word	0x40013c00
 800068c:	2000017c 	.word	0x2000017c

08000690 <callGNSS>:


// Get GPS data
// return 1 if process is done
// return 2 if NMEA CRC is fail
unsigned char callGNSS(void) {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af02      	add	r7, sp, #8
	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	2100      	movs	r1, #0
 800069a:	4843      	ldr	r0, [pc, #268]	; (80007a8 <callGNSS+0x118>)
 800069c:	f00a fafa 	bl	800ac94 <memset>
	SendCMD_LTE((char *) "AT+QGPSCFG=\"outport\",\"uartdebug\"\r\n");
 80006a0:	4842      	ldr	r0, [pc, #264]	; (80007ac <callGNSS+0x11c>)
 80006a2:	f000 ff37 	bl	8001514 <SendCMD_LTE>

	while(findTarget(lteComm_MainBuff, "GPRMC") != 1);
 80006a6:	bf00      	nop
 80006a8:	4941      	ldr	r1, [pc, #260]	; (80007b0 <callGNSS+0x120>)
 80006aa:	483f      	ldr	r0, [pc, #252]	; (80007a8 <callGNSS+0x118>)
 80006ac:	f000 ffa8 	bl	8001600 <findTarget>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d1f8      	bne.n	80006a8 <callGNSS+0x18>
	memcpy(GNSS_temp, lteComm_MainBuff, sizeof(GNSS_temp));
 80006b6:	4a3f      	ldr	r2, [pc, #252]	; (80007b4 <callGNSS+0x124>)
 80006b8:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <callGNSS+0x118>)
 80006ba:	4610      	mov	r0, r2
 80006bc:	4619      	mov	r1, r3
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	461a      	mov	r2, r3
 80006c2:	f00a fad9 	bl	800ac78 <memcpy>
	HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f001 fd2a 	bl	8002120 <HAL_Delay>

	processFlag = NMEACRCCal((unsigned char *) GNSS_temp);
 80006cc:	4839      	ldr	r0, [pc, #228]	; (80007b4 <callGNSS+0x124>)
 80006ce:	f001 fa49 	bl	8001b64 <NMEACRCCal>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <callGNSS+0x128>)
 80006d8:	701a      	strb	r2, [r3, #0]

	if(processFlag == 1) {
 80006da:	4b37      	ldr	r3, [pc, #220]	; (80007b8 <callGNSS+0x128>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d14d      	bne.n	800077e <callGNSS+0xee>
		Delimiter(GNSS_temp, ',', 3, 80, latTemp);
 80006e2:	4b36      	ldr	r3, [pc, #216]	; (80007bc <callGNSS+0x12c>)
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2350      	movs	r3, #80	; 0x50
 80006e8:	2203      	movs	r2, #3
 80006ea:	212c      	movs	r1, #44	; 0x2c
 80006ec:	4831      	ldr	r0, [pc, #196]	; (80007b4 <callGNSS+0x124>)
 80006ee:	f001 f98a 	bl	8001a06 <Delimiter>
		Delimiter(GNSS_temp, ',', 5, 80, lonTemp);
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <callGNSS+0x130>)
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2350      	movs	r3, #80	; 0x50
 80006f8:	2205      	movs	r2, #5
 80006fa:	212c      	movs	r1, #44	; 0x2c
 80006fc:	482d      	ldr	r0, [pc, #180]	; (80007b4 <callGNSS+0x124>)
 80006fe:	f001 f982 	bl	8001a06 <Delimiter>

		sprintf((char *)latTemp, "%d.%d",atoi((char *)latTemp)/100, atoi((char *)latTemp)%100);
 8000702:	482e      	ldr	r0, [pc, #184]	; (80007bc <callGNSS+0x12c>)
 8000704:	f00a fa8a 	bl	800ac1c <atoi>
 8000708:	4603      	mov	r3, r0
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <callGNSS+0x134>)
 800070c:	fb82 1203 	smull	r1, r2, r2, r3
 8000710:	1152      	asrs	r2, r2, #5
 8000712:	17db      	asrs	r3, r3, #31
 8000714:	1ad4      	subs	r4, r2, r3
 8000716:	4829      	ldr	r0, [pc, #164]	; (80007bc <callGNSS+0x12c>)
 8000718:	f00a fa80 	bl	800ac1c <atoi>
 800071c:	4602      	mov	r2, r0
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <callGNSS+0x134>)
 8000720:	fb83 1302 	smull	r1, r3, r3, r2
 8000724:	1159      	asrs	r1, r3, #5
 8000726:	17d3      	asrs	r3, r2, #31
 8000728:	1acb      	subs	r3, r1, r3
 800072a:	2164      	movs	r1, #100	; 0x64
 800072c:	fb01 f303 	mul.w	r3, r1, r3
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	4622      	mov	r2, r4
 8000734:	4924      	ldr	r1, [pc, #144]	; (80007c8 <callGNSS+0x138>)
 8000736:	4821      	ldr	r0, [pc, #132]	; (80007bc <callGNSS+0x12c>)
 8000738:	f00a fab4 	bl	800aca4 <siprintf>
		sprintf((char *)lonTemp, "%d.%d",atoi((char *)lonTemp)/100, atoi((char *)lonTemp)%100);
 800073c:	4820      	ldr	r0, [pc, #128]	; (80007c0 <callGNSS+0x130>)
 800073e:	f00a fa6d 	bl	800ac1c <atoi>
 8000742:	4603      	mov	r3, r0
 8000744:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <callGNSS+0x134>)
 8000746:	fb82 1203 	smull	r1, r2, r2, r3
 800074a:	1152      	asrs	r2, r2, #5
 800074c:	17db      	asrs	r3, r3, #31
 800074e:	1ad4      	subs	r4, r2, r3
 8000750:	481b      	ldr	r0, [pc, #108]	; (80007c0 <callGNSS+0x130>)
 8000752:	f00a fa63 	bl	800ac1c <atoi>
 8000756:	4602      	mov	r2, r0
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <callGNSS+0x134>)
 800075a:	fb83 1302 	smull	r1, r3, r3, r2
 800075e:	1159      	asrs	r1, r3, #5
 8000760:	17d3      	asrs	r3, r2, #31
 8000762:	1acb      	subs	r3, r1, r3
 8000764:	2164      	movs	r1, #100	; 0x64
 8000766:	fb01 f303 	mul.w	r3, r1, r3
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	4622      	mov	r2, r4
 800076e:	4916      	ldr	r1, [pc, #88]	; (80007c8 <callGNSS+0x138>)
 8000770:	4813      	ldr	r0, [pc, #76]	; (80007c0 <callGNSS+0x130>)
 8000772:	f00a fa97 	bl	800aca4 <siprintf>

		returnValue = 1;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <callGNSS+0x13c>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e002      	b.n	8000784 <callGNSS+0xf4>
	}else {
		returnValue = 2;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <callGNSS+0x13c>)
 8000780:	2202      	movs	r2, #2
 8000782:	701a      	strb	r2, [r3, #0]
	}

	SendCMD_LTE((char *) "AT+QGPSCFG=\"outport\",\"none\"\r\n");
 8000784:	4812      	ldr	r0, [pc, #72]	; (80007d0 <callGNSS+0x140>)
 8000786:	f000 fec5 	bl	8001514 <SendCMD_LTE>
	while(findTarget(lteComm_MainBuff, "OK") != 1);
 800078a:	bf00      	nop
 800078c:	4911      	ldr	r1, [pc, #68]	; (80007d4 <callGNSS+0x144>)
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <callGNSS+0x118>)
 8000790:	f000 ff36 	bl	8001600 <findTarget>
 8000794:	4603      	mov	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	d1f8      	bne.n	800078c <callGNSS+0xfc>

	return returnValue;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <callGNSS+0x13c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3704      	adds	r7, #4
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd90      	pop	{r4, r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200008b0 	.word	0x200008b0
 80007ac:	0800b6d4 	.word	0x0800b6d4
 80007b0:	0800b6f8 	.word	0x0800b6f8
 80007b4:	20000180 	.word	0x20000180
 80007b8:	20000220 	.word	0x20000220
 80007bc:	20000200 	.word	0x20000200
 80007c0:	20000210 	.word	0x20000210
 80007c4:	51eb851f 	.word	0x51eb851f
 80007c8:	0800b700 	.word	0x0800b700
 80007cc:	20000221 	.word	0x20000221
 80007d0:	0800b708 	.word	0x0800b708
 80007d4:	0800b728 	.word	0x0800b728

080007d8 <clearText_Temp>:





void clearText_Temp(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	memset(TextTemp, 0x00, sizeof(TextTemp));
 80007dc:	227d      	movs	r2, #125	; 0x7d
 80007de:	2100      	movs	r1, #0
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <clearText_Temp+0x14>)
 80007e2:	f00a fa57 	bl	800ac94 <memset>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000224 	.word	0x20000224

080007f0 <clearLTE_Temp>:

void clearLTE_Temp(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	2100      	movs	r1, #0
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <clearLTE_Temp+0x14>)
 80007fa:	f00a fa4b 	bl	800ac94 <memset>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200008b0 	.word	0x200008b0

08000808 <initLTE>:



void initLTE(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	SerialDebug("[MCU] -> start initialize LTE module\r\n");
 800080e:	485b      	ldr	r0, [pc, #364]	; (800097c <initLTE+0x174>)
 8000810:	f000 fe56 	bl	80014c0 <SerialDebug>

	for(unsigned char countSeq = 0; countSeq < 7; countSeq++) {
 8000814:	2300      	movs	r3, #0
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	e0a7      	b.n	800096a <initLTE+0x162>

		switch(countSeq) {
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b06      	cmp	r3, #6
 800081e:	d834      	bhi.n	800088a <initLTE+0x82>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <initLTE+0x20>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000845 	.word	0x08000845
 800082c:	0800084f 	.word	0x0800084f
 8000830:	08000859 	.word	0x08000859
 8000834:	08000863 	.word	0x08000863
 8000838:	0800086d 	.word	0x0800086d
 800083c:	08000877 	.word	0x08000877
 8000840:	08000881 	.word	0x08000881
			case 0 :	// Turn off echo
				sprintf(TextTemp, "ATE0\r\n");
 8000844:	494e      	ldr	r1, [pc, #312]	; (8000980 <initLTE+0x178>)
 8000846:	484f      	ldr	r0, [pc, #316]	; (8000984 <initLTE+0x17c>)
 8000848:	f00a fa2c 	bl	800aca4 <siprintf>
				break;
 800084c:	e01d      	b.n	800088a <initLTE+0x82>

			case 1 :
				sprintf(TextTemp, "AT&D1\r\n");
 800084e:	494e      	ldr	r1, [pc, #312]	; (8000988 <initLTE+0x180>)
 8000850:	484c      	ldr	r0, [pc, #304]	; (8000984 <initLTE+0x17c>)
 8000852:	f00a fa27 	bl	800aca4 <siprintf>
				break;
 8000856:	e018      	b.n	800088a <initLTE+0x82>

			case 2 :
				sprintf(TextTemp, "AT+QGPSEND\r\n");
 8000858:	494c      	ldr	r1, [pc, #304]	; (800098c <initLTE+0x184>)
 800085a:	484a      	ldr	r0, [pc, #296]	; (8000984 <initLTE+0x17c>)
 800085c:	f00a fa22 	bl	800aca4 <siprintf>
				break;
 8000860:	e013      	b.n	800088a <initLTE+0x82>

			case 3 :
				sprintf(TextTemp, "AT+QGPSCFG=\"outport\",\"none\"\r\n");
 8000862:	494b      	ldr	r1, [pc, #300]	; (8000990 <initLTE+0x188>)
 8000864:	4847      	ldr	r0, [pc, #284]	; (8000984 <initLTE+0x17c>)
 8000866:	f00a fa1d 	bl	800aca4 <siprintf>
				break;
 800086a:	e00e      	b.n	800088a <initLTE+0x82>

			case 4 :
				sprintf(TextTemp, "AT+QGPSCFG=\"nmeasrc\",1\r\n");
 800086c:	4949      	ldr	r1, [pc, #292]	; (8000994 <initLTE+0x18c>)
 800086e:	4845      	ldr	r0, [pc, #276]	; (8000984 <initLTE+0x17c>)
 8000870:	f00a fa18 	bl	800aca4 <siprintf>
				break;
 8000874:	e009      	b.n	800088a <initLTE+0x82>

			case 5 :
				sprintf(TextTemp, "AT+QGPSCFG=\"gpsnmeatype\",2\r\n");
 8000876:	4948      	ldr	r1, [pc, #288]	; (8000998 <initLTE+0x190>)
 8000878:	4842      	ldr	r0, [pc, #264]	; (8000984 <initLTE+0x17c>)
 800087a:	f00a fa13 	bl	800aca4 <siprintf>
				break;
 800087e:	e004      	b.n	800088a <initLTE+0x82>

			case 6 :
				sprintf(TextTemp, "AT+QGPS=1\r\n");
 8000880:	4946      	ldr	r1, [pc, #280]	; (800099c <initLTE+0x194>)
 8000882:	4840      	ldr	r0, [pc, #256]	; (8000984 <initLTE+0x17c>)
 8000884:	f00a fa0e 	bl	800aca4 <siprintf>
				break;
 8000888:	bf00      	nop

		}

		SerialDebug((char *)TextTemp);
 800088a:	483e      	ldr	r0, [pc, #248]	; (8000984 <initLTE+0x17c>)
 800088c:	f000 fe18 	bl	80014c0 <SerialDebug>
		SendCMD_LTE((char *)TextTemp);	// Sned CMD
 8000890:	483c      	ldr	r0, [pc, #240]	; (8000984 <initLTE+0x17c>)
 8000892:	f000 fe3f 	bl	8001514 <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <initLTE+0x198>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 800089c:	4b41      	ldr	r3, [pc, #260]	; (80009a4 <initLTE+0x19c>)
 800089e:	881a      	ldrh	r2, [r3, #0]
 80008a0:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <initLTE+0x19c>)
 80008a2:	805a      	strh	r2, [r3, #2]

		while(sysFlag.LTE_CMD_Send == 1) {
 80008a4:	e05a      	b.n	800095c <initLTE+0x154>

			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 80008a6:	4940      	ldr	r1, [pc, #256]	; (80009a8 <initLTE+0x1a0>)
 80008a8:	4840      	ldr	r0, [pc, #256]	; (80009ac <initLTE+0x1a4>)
 80008aa:	f000 fea9 	bl	8001600 <findTarget>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10e      	bne.n	80008d2 <initLTE+0xca>
				SerialDebug("[LTE] -> OK\r\n");
 80008b4:	483e      	ldr	r0, [pc, #248]	; (80009b0 <initLTE+0x1a8>)
 80008b6:	f000 fe03 	bl	80014c0 <SerialDebug>

				sysFlag.LTE_CMD_Send = 0;
 80008ba:	4b39      	ldr	r3, [pc, #228]	; (80009a0 <initLTE+0x198>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 80008c0:	f7ff ff96 	bl	80007f0 <clearLTE_Temp>
				clearText_Temp();
 80008c4:	f7ff ff88 	bl	80007d8 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80008c8:	4b36      	ldr	r3, [pc, #216]	; (80009a4 <initLTE+0x19c>)
 80008ca:	881a      	ldrh	r2, [r3, #0]
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <initLTE+0x19c>)
 80008ce:	805a      	strh	r2, [r3, #2]
 80008d0:	e044      	b.n	800095c <initLTE+0x154>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80008d2:	4938      	ldr	r1, [pc, #224]	; (80009b4 <initLTE+0x1ac>)
 80008d4:	4835      	ldr	r0, [pc, #212]	; (80009ac <initLTE+0x1a4>)
 80008d6:	f000 fe93 	bl	8001600 <findTarget>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d122      	bne.n	8000926 <initLTE+0x11e>
				SerialDebug("[LTE] -> ");
 80008e0:	4835      	ldr	r0, [pc, #212]	; (80009b8 <initLTE+0x1b0>)
 80008e2:	f000 fded 	bl	80014c0 <SerialDebug>
				SerialDebug((char *)lteComm_MainBuff);
 80008e6:	4831      	ldr	r0, [pc, #196]	; (80009ac <initLTE+0x1a4>)
 80008e8:	f000 fdea 	bl	80014c0 <SerialDebug>

				// Case 3 : Disable GNSS fail -> ignore error 505
				if(countSeq == 2 && findTarget(lteComm_MainBuff, "505") == 1) {
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d10a      	bne.n	8000908 <initLTE+0x100>
 80008f2:	4932      	ldr	r1, [pc, #200]	; (80009bc <initLTE+0x1b4>)
 80008f4:	482d      	ldr	r0, [pc, #180]	; (80009ac <initLTE+0x1a4>)
 80008f6:	f000 fe83 	bl	8001600 <findTarget>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d103      	bne.n	8000908 <initLTE+0x100>
					sysFlag.LTE_INIT_ERROR = 0;
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <initLTE+0x198>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
 8000906:	e002      	b.n	800090e <initLTE+0x106>
				}else {
					sysFlag.LTE_INIT_ERROR = 1;
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <initLTE+0x198>)
 800090a:	2201      	movs	r2, #1
 800090c:	705a      	strb	r2, [r3, #1]
				}

				sysFlag.LTE_CMD_Send = 0;
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <initLTE+0x198>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000914:	f7ff ff6c 	bl	80007f0 <clearLTE_Temp>
				clearText_Temp();
 8000918:	f7ff ff5e 	bl	80007d8 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <initLTE+0x19c>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <initLTE+0x19c>)
 8000922:	805a      	strh	r2, [r3, #2]
 8000924:	e01a      	b.n	800095c <initLTE+0x154>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <initLTE+0x19c>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <initLTE+0x19c>)
 800092e:	885b      	ldrh	r3, [r3, #2]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <initLTE+0x19c>)
 8000934:	8952      	ldrh	r2, [r2, #10]
 8000936:	4293      	cmp	r3, r2
 8000938:	db10      	blt.n	800095c <initLTE+0x154>
				SerialDebug("[MCU] -> LTE TIME OUT\r\n");
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <initLTE+0x1b8>)
 800093c:	f000 fdc0 	bl	80014c0 <SerialDebug>
				sysFlag.LTE_INIT_ERROR = 1;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <initLTE+0x198>)
 8000942:	2201      	movs	r2, #1
 8000944:	705a      	strb	r2, [r3, #1]
				sysFlag.LTE_CMD_Send = 0;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <initLTE+0x198>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 800094c:	f7ff ff50 	bl	80007f0 <clearLTE_Temp>
				clearText_Temp();
 8000950:	f7ff ff42 	bl	80007d8 <clearText_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <initLTE+0x19c>)
 8000956:	881a      	ldrh	r2, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <initLTE+0x19c>)
 800095a:	805a      	strh	r2, [r3, #2]
		while(sysFlag.LTE_CMD_Send == 1) {
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <initLTE+0x198>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d0a0      	beq.n	80008a6 <initLTE+0x9e>
	for(unsigned char countSeq = 0; countSeq < 7; countSeq++) {
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	3301      	adds	r3, #1
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b06      	cmp	r3, #6
 800096e:	f67f af54 	bls.w	800081a <initLTE+0x12>
			}
		}
	}
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	0800b72c 	.word	0x0800b72c
 8000980:	0800b754 	.word	0x0800b754
 8000984:	20000224 	.word	0x20000224
 8000988:	0800b75c 	.word	0x0800b75c
 800098c:	0800b764 	.word	0x0800b764
 8000990:	0800b774 	.word	0x0800b774
 8000994:	0800b794 	.word	0x0800b794
 8000998:	0800b7b0 	.word	0x0800b7b0
 800099c:	0800b7d0 	.word	0x0800b7d0
 80009a0:	20000b58 	.word	0x20000b58
 80009a4:	20000b4c 	.word	0x20000b4c
 80009a8:	0800b7dc 	.word	0x0800b7dc
 80009ac:	200008b0 	.word	0x200008b0
 80009b0:	0800b7e0 	.word	0x0800b7e0
 80009b4:	0800b7f0 	.word	0x0800b7f0
 80009b8:	0800b7f8 	.word	0x0800b7f8
 80009bc:	0800b804 	.word	0x0800b804
 80009c0:	0800b808 	.word	0x0800b808

080009c4 <SHUTDOWN_LTE>:
/*
 * Return value
 * 			1 - done
 * 			2 - error/time out
 */
unsigned char SHUTDOWN_LTE(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	SendCMD_LTE("AT+QPOWD\r\n");
 80009c8:	4819      	ldr	r0, [pc, #100]	; (8000a30 <SHUTDOWN_LTE+0x6c>)
 80009ca:	f000 fda3 	bl	8001514 <SendCMD_LTE>
	globalSnedFlag = 1;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <SHUTDOWN_LTE+0x70>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <SHUTDOWN_LTE+0x74>)
 80009d6:	881a      	ldrh	r2, [r3, #0]
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <SHUTDOWN_LTE+0x74>)
 80009da:	805a      	strh	r2, [r3, #2]

	// reset counter
	if(sysCounter.main_ms_counter == 0) {
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <SHUTDOWN_LTE+0x74>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d11f      	bne.n	8000a24 <SHUTDOWN_LTE+0x60>
		sysCounter.prev_LTEtimeout = 0;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <SHUTDOWN_LTE+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	805a      	strh	r2, [r3, #2]
	}

	while(globalSnedFlag == 1) {
 80009ea:	e01b      	b.n	8000a24 <SHUTDOWN_LTE+0x60>
		while(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
			globalSnedFlag = 0;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <SHUTDOWN_LTE+0x70>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			return 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e01a      	b.n	8000a2c <SHUTDOWN_LTE+0x68>
		while(findTarget(lteComm_MainBuff, "POWERED DOWN") == 1) {
 80009f6:	bf00      	nop
 80009f8:	4910      	ldr	r1, [pc, #64]	; (8000a3c <SHUTDOWN_LTE+0x78>)
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <SHUTDOWN_LTE+0x7c>)
 80009fc:	f000 fe00 	bl	8001600 <findTarget>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d0f2      	beq.n	80009ec <SHUTDOWN_LTE+0x28>
		}
		// Time out
		if((sysCounter.main_ms_counter - sysCounter.prev_ERRORtime) >= 5000) {
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <SHUTDOWN_LTE+0x74>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <SHUTDOWN_LTE+0x74>)
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a16:	4293      	cmp	r3, r2
 8000a18:	dd04      	ble.n	8000a24 <SHUTDOWN_LTE+0x60>
			globalSnedFlag = 0;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SHUTDOWN_LTE+0x70>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
			return 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	e003      	b.n	8000a2c <SHUTDOWN_LTE+0x68>
	while(globalSnedFlag == 1) {
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <SHUTDOWN_LTE+0x70>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d0e4      	beq.n	80009f6 <SHUTDOWN_LTE+0x32>
		}
	}
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	0800b820 	.word	0x0800b820
 8000a34:	200002a1 	.word	0x200002a1
 8000a38:	20000b4c 	.word	0x20000b4c
 8000a3c:	0800b82c 	.word	0x0800b82c
 8000a40:	200008b0 	.word	0x200008b0

08000a44 <clearText_net_Temp>:
unsigned char Error = 0;	// 0 = No error | > 1 Error

char HTTP_URL_Temp[350];	// URL length max 350 byte


void clearText_net_Temp(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	memset(TextNetTemp, 0x00, sizeof(TextNetTemp));
 8000a48:	227d      	movs	r2, #125	; 0x7d
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <clearText_net_Temp+0x14>)
 8000a4e:	f00a f921 	bl	800ac94 <memset>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200002f0 	.word	0x200002f0

08000a5c <addZero>:


// Fix single digit to 2 digit
void addZero(char* in, char* out) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	temp = atoi(in);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f00a f8d8 	bl	800ac1c <atoi>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <addZero+0x3c>)
 8000a70:	6013      	str	r3, [r2, #0]

    if(temp < 10){
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <addZero+0x3c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b09      	cmp	r3, #9
 8000a78:	dc07      	bgt.n	8000a8a <addZero+0x2e>
        sprintf(out, "0%d", temp);
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <addZero+0x3c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4906      	ldr	r1, [pc, #24]	; (8000a9c <addZero+0x40>)
 8000a82:	6838      	ldr	r0, [r7, #0]
 8000a84:	f00a f90e 	bl	800aca4 <siprintf>
    }else{
        out = in;
    }
}
 8000a88:	e001      	b.n	8000a8e <addZero+0x32>
        out = in;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	603b      	str	r3, [r7, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200002a4 	.word	0x200002a4
 8000a9c:	0800b83c 	.word	0x0800b83c

08000aa0 <AckInternet>:


unsigned char AckInternet(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

	SerialDebug("[MCU] -> start active internet conn.\r\n");
 8000aa6:	4851      	ldr	r0, [pc, #324]	; (8000bec <AckInternet+0x14c>)
 8000aa8:	f000 fd0a 	bl	80014c0 <SerialDebug>

	for(unsigned char countSeq = 0; countSeq < 4; countSeq++) {
 8000aac:	2300      	movs	r3, #0
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	e091      	b.n	8000bd6 <AckInternet+0x136>
		switch(countSeq) {
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d81f      	bhi.n	8000af8 <AckInternet+0x58>
 8000ab8:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <AckInternet+0x20>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad1 	.word	0x08000ad1
 8000ac4:	08000adb 	.word	0x08000adb
 8000ac8:	08000ae5 	.word	0x08000ae5
 8000acc:	08000aef 	.word	0x08000aef
			case 0 :
				sprintf(TextNetTemp, "AT+QICSGP=1,1,\"INTERNET\",\"\",\"\",1\r\n");
 8000ad0:	4947      	ldr	r1, [pc, #284]	; (8000bf0 <AckInternet+0x150>)
 8000ad2:	4848      	ldr	r0, [pc, #288]	; (8000bf4 <AckInternet+0x154>)
 8000ad4:	f00a f8e6 	bl	800aca4 <siprintf>
				break;
 8000ad8:	e00e      	b.n	8000af8 <AckInternet+0x58>

			case 1 :
				sprintf(TextNetTemp, "AT+QIACT=1\r\n");
 8000ada:	4947      	ldr	r1, [pc, #284]	; (8000bf8 <AckInternet+0x158>)
 8000adc:	4845      	ldr	r0, [pc, #276]	; (8000bf4 <AckInternet+0x154>)
 8000ade:	f00a f8e1 	bl	800aca4 <siprintf>
				break;
 8000ae2:	e009      	b.n	8000af8 <AckInternet+0x58>

			case 2 :
				sprintf(TextNetTemp, "AT+QIACT?\r\n");
 8000ae4:	4945      	ldr	r1, [pc, #276]	; (8000bfc <AckInternet+0x15c>)
 8000ae6:	4843      	ldr	r0, [pc, #268]	; (8000bf4 <AckInternet+0x154>)
 8000ae8:	f00a f8dc 	bl	800aca4 <siprintf>
				break;
 8000aec:	e004      	b.n	8000af8 <AckInternet+0x58>

			case 3 :
				sprintf(TextNetTemp, "AT+QIDNSCFG=1,\"8.8.8.8\",\"1.1.1.1\"\r\n");
 8000aee:	4944      	ldr	r1, [pc, #272]	; (8000c00 <AckInternet+0x160>)
 8000af0:	4840      	ldr	r0, [pc, #256]	; (8000bf4 <AckInternet+0x154>)
 8000af2:	f00a f8d7 	bl	800aca4 <siprintf>
				break;
 8000af6:	bf00      	nop
		}

		SerialDebug((char *) TextNetTemp);
 8000af8:	483e      	ldr	r0, [pc, #248]	; (8000bf4 <AckInternet+0x154>)
 8000afa:	f000 fce1 	bl	80014c0 <SerialDebug>
		SendCMD_LTE((char *) TextNetTemp);	// Sned CMD
 8000afe:	483d      	ldr	r0, [pc, #244]	; (8000bf4 <AckInternet+0x154>)
 8000b00:	f000 fd08 	bl	8001514 <SendCMD_LTE>
		sysFlag.LTE_CMD_Send = 1;
 8000b04:	4b3f      	ldr	r3, [pc, #252]	; (8000c04 <AckInternet+0x164>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
		sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000b0a:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <AckInternet+0x168>)
 8000b0c:	881a      	ldrh	r2, [r3, #0]
 8000b0e:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <AckInternet+0x168>)
 8000b10:	805a      	strh	r2, [r3, #2]


		while(sysFlag.LTE_CMD_Send == 1) {
 8000b12:	e059      	b.n	8000bc8 <AckInternet+0x128>

			// Reset counter
			if(sysCounter.main_ms_counter == 0) {
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <AckInternet+0x168>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <AckInternet+0x82>
				sysCounter.prev_LTEtimeout = 0;
 8000b1c:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <AckInternet+0x168>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	805a      	strh	r2, [r3, #2]
			}

			// OK conditions
			if(findTarget(lteComm_MainBuff, "OK") == 1) {
 8000b22:	493a      	ldr	r1, [pc, #232]	; (8000c0c <AckInternet+0x16c>)
 8000b24:	483a      	ldr	r0, [pc, #232]	; (8000c10 <AckInternet+0x170>)
 8000b26:	f000 fd6b 	bl	8001600 <findTarget>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d10e      	bne.n	8000b4e <AckInternet+0xae>
				SerialDebug("[LTE] -> OK\r\n");
 8000b30:	4838      	ldr	r0, [pc, #224]	; (8000c14 <AckInternet+0x174>)
 8000b32:	f000 fcc5 	bl	80014c0 <SerialDebug>

				sysFlag.LTE_CMD_Send = 0;
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <AckInternet+0x164>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000b3c:	f7ff fe58 	bl	80007f0 <clearLTE_Temp>
				clearText_net_Temp();
 8000b40:	f7ff ff80 	bl	8000a44 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <AckInternet+0x168>)
 8000b46:	881a      	ldrh	r2, [r3, #0]
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <AckInternet+0x168>)
 8000b4a:	805a      	strh	r2, [r3, #2]
 8000b4c:	e03c      	b.n	8000bc8 <AckInternet+0x128>
			}

			// Error conditions
			else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 8000b4e:	4932      	ldr	r1, [pc, #200]	; (8000c18 <AckInternet+0x178>)
 8000b50:	482f      	ldr	r0, [pc, #188]	; (8000c10 <AckInternet+0x170>)
 8000b52:	f000 fd55 	bl	8001600 <findTarget>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d117      	bne.n	8000b8c <AckInternet+0xec>
				SerialDebug("[LTE] -> ");
 8000b5c:	482f      	ldr	r0, [pc, #188]	; (8000c1c <AckInternet+0x17c>)
 8000b5e:	f000 fcaf 	bl	80014c0 <SerialDebug>
				SerialDebug((char *)lteComm_MainBuff);
 8000b62:	482b      	ldr	r0, [pc, #172]	; (8000c10 <AckInternet+0x170>)
 8000b64:	f000 fcac 	bl	80014c0 <SerialDebug>

				Error++;
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <AckInternet+0x180>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <AckInternet+0x180>)
 8000b72:	701a      	strb	r2, [r3, #0]

				sysFlag.LTE_CMD_Send = 0;
 8000b74:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <AckInternet+0x164>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000b7a:	f7ff fe39 	bl	80007f0 <clearLTE_Temp>
				clearText_net_Temp();
 8000b7e:	f7ff ff61 	bl	8000a44 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <AckInternet+0x168>)
 8000b84:	881a      	ldrh	r2, [r3, #0]
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <AckInternet+0x168>)
 8000b88:	805a      	strh	r2, [r3, #2]
 8000b8a:	e01d      	b.n	8000bc8 <AckInternet+0x128>
			}

			// Timeout Conditions
			else if((sysCounter.main_ms_counter - sysCounter.prev_LTEtimeout) >= sysCounter.CMDrespTime) {
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <AckInternet+0x168>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <AckInternet+0x168>)
 8000b94:	885b      	ldrh	r3, [r3, #2]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <AckInternet+0x168>)
 8000b9a:	8952      	ldrh	r2, [r2, #10]
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	db13      	blt.n	8000bc8 <AckInternet+0x128>
				SerialDebug("[MCU] -> LTE TIME OUT\r\n");
 8000ba0:	4820      	ldr	r0, [pc, #128]	; (8000c24 <AckInternet+0x184>)
 8000ba2:	f000 fc8d 	bl	80014c0 <SerialDebug>
				Error++;
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <AckInternet+0x180>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <AckInternet+0x180>)
 8000bb0:	701a      	strb	r2, [r3, #0]
				sysFlag.LTE_CMD_Send = 0;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <AckInternet+0x164>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
				clearLTE_Temp();
 8000bb8:	f7ff fe1a 	bl	80007f0 <clearLTE_Temp>
				clearText_net_Temp();
 8000bbc:	f7ff ff42 	bl	8000a44 <clearText_net_Temp>
				sysCounter.prev_LTEtimeout = sysCounter.main_ms_counter;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <AckInternet+0x168>)
 8000bc2:	881a      	ldrh	r2, [r3, #0]
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <AckInternet+0x168>)
 8000bc6:	805a      	strh	r2, [r3, #2]
		while(sysFlag.LTE_CMD_Send == 1) {
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <AckInternet+0x164>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d0a1      	beq.n	8000b14 <AckInternet+0x74>
	for(unsigned char countSeq = 0; countSeq < 4; countSeq++) {
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	f67f af6a 	bls.w	8000ab2 <AckInternet+0x12>
			}
		}
	}

	return Error;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <AckInternet+0x180>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800b840 	.word	0x0800b840
 8000bf0:	0800b868 	.word	0x0800b868
 8000bf4:	200002f0 	.word	0x200002f0
 8000bf8:	0800b88c 	.word	0x0800b88c
 8000bfc:	0800b89c 	.word	0x0800b89c
 8000c00:	0800b8a8 	.word	0x0800b8a8
 8000c04:	20000b58 	.word	0x20000b58
 8000c08:	20000b4c 	.word	0x20000b4c
 8000c0c:	0800b8cc 	.word	0x0800b8cc
 8000c10:	200008b0 	.word	0x200008b0
 8000c14:	0800b8d0 	.word	0x0800b8d0
 8000c18:	0800b8e0 	.word	0x0800b8e0
 8000c1c:	0800b8e8 	.word	0x0800b8e8
 8000c20:	2000036d 	.word	0x2000036d
 8000c24:	0800b8f4 	.word	0x0800b8f4

08000c28 <httpSend>:


//send data to server
unsigned int httpSend(char* lat, char* lon, char* device_ID, char* time_s, char* date_s, char* x, char* y, char* z, char* humi, char* temp, char* eth, char* carbon, char* airflow, char* out) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b098      	sub	sp, #96	; 0x60
 8000c2c:	af14      	add	r7, sp, #80	; 0x50
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]
	memset(HTTP_URL_Temp, 0x00, sizeof(HTTP_URL_Temp));
 8000c36:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	485c      	ldr	r0, [pc, #368]	; (8000db0 <httpSend+0x188>)
 8000c3e:	f00a f829 	bl	800ac94 <memset>
	memset(time_temp, 0x00, sizeof(time_temp));
 8000c42:	220c      	movs	r2, #12
 8000c44:	2100      	movs	r1, #0
 8000c46:	485b      	ldr	r0, [pc, #364]	; (8000db4 <httpSend+0x18c>)
 8000c48:	f00a f824 	bl	800ac94 <memset>
	memset(date_temp, 0x00, sizeof(date_temp));
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4859      	ldr	r0, [pc, #356]	; (8000db8 <httpSend+0x190>)
 8000c52:	f00a f81f 	bl	800ac94 <memset>
	memset(hh, 0x00, sizeof(hh));
 8000c56:	2208      	movs	r2, #8
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4858      	ldr	r0, [pc, #352]	; (8000dbc <httpSend+0x194>)
 8000c5c:	f00a f81a 	bl	800ac94 <memset>
	memset(mm, 0x00, sizeof(mm));
 8000c60:	2208      	movs	r2, #8
 8000c62:	2100      	movs	r1, #0
 8000c64:	4856      	ldr	r0, [pc, #344]	; (8000dc0 <httpSend+0x198>)
 8000c66:	f00a f815 	bl	800ac94 <memset>
	memset(ss, 0x00, sizeof(ss));
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4855      	ldr	r0, [pc, #340]	; (8000dc4 <httpSend+0x19c>)
 8000c70:	f00a f810 	bl	800ac94 <memset>
	memset(YY, 0x00, sizeof(YY));
 8000c74:	2208      	movs	r2, #8
 8000c76:	2100      	movs	r1, #0
 8000c78:	4853      	ldr	r0, [pc, #332]	; (8000dc8 <httpSend+0x1a0>)
 8000c7a:	f00a f80b 	bl	800ac94 <memset>
	memset(MM, 0x00, sizeof(MM));
 8000c7e:	2208      	movs	r2, #8
 8000c80:	2100      	movs	r1, #0
 8000c82:	4852      	ldr	r0, [pc, #328]	; (8000dcc <httpSend+0x1a4>)
 8000c84:	f00a f806 	bl	800ac94 <memset>
	memset(DD, 0x00, sizeof(DD));
 8000c88:	2208      	movs	r2, #8
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4850      	ldr	r0, [pc, #320]	; (8000dd0 <httpSend+0x1a8>)
 8000c8e:	f00a f801 	bl	800ac94 <memset>

	// Delimiter hot fix WuW
	sprintf(time_temp, "T:%s", time_s);
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	494f      	ldr	r1, [pc, #316]	; (8000dd4 <httpSend+0x1ac>)
 8000c96:	4847      	ldr	r0, [pc, #284]	; (8000db4 <httpSend+0x18c>)
 8000c98:	f00a f804 	bl	800aca4 <siprintf>
	sprintf(date_temp, "D/%s", date_s);
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	494e      	ldr	r1, [pc, #312]	; (8000dd8 <httpSend+0x1b0>)
 8000ca0:	4845      	ldr	r0, [pc, #276]	; (8000db8 <httpSend+0x190>)
 8000ca2:	f009 ffff 	bl	800aca4 <siprintf>


	// Delimit
	Delimiter(time_temp, ':', 1, 80, (unsigned char*) hh);
 8000ca6:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <httpSend+0x194>)
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2350      	movs	r3, #80	; 0x50
 8000cac:	2201      	movs	r2, #1
 8000cae:	213a      	movs	r1, #58	; 0x3a
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <httpSend+0x18c>)
 8000cb2:	f000 fea8 	bl	8001a06 <Delimiter>
	Delimiter(time_temp, ':', 2, 80, (unsigned char*) mm);
 8000cb6:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <httpSend+0x198>)
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2350      	movs	r3, #80	; 0x50
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	213a      	movs	r1, #58	; 0x3a
 8000cc0:	483c      	ldr	r0, [pc, #240]	; (8000db4 <httpSend+0x18c>)
 8000cc2:	f000 fea0 	bl	8001a06 <Delimiter>
	Delimiter(time_temp, ':', 3, 80, (unsigned char*) ss);
 8000cc6:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <httpSend+0x19c>)
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2350      	movs	r3, #80	; 0x50
 8000ccc:	2203      	movs	r2, #3
 8000cce:	213a      	movs	r1, #58	; 0x3a
 8000cd0:	4838      	ldr	r0, [pc, #224]	; (8000db4 <httpSend+0x18c>)
 8000cd2:	f000 fe98 	bl	8001a06 <Delimiter>

	Delimiter(date_temp, '/', 1, 80, (unsigned char*) DD);
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <httpSend+0x1a8>)
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2350      	movs	r3, #80	; 0x50
 8000cdc:	2201      	movs	r2, #1
 8000cde:	212f      	movs	r1, #47	; 0x2f
 8000ce0:	4835      	ldr	r0, [pc, #212]	; (8000db8 <httpSend+0x190>)
 8000ce2:	f000 fe90 	bl	8001a06 <Delimiter>
	Delimiter(date_temp, '/', 2, 80, (unsigned char*) MM);
 8000ce6:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <httpSend+0x1a4>)
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2350      	movs	r3, #80	; 0x50
 8000cec:	2202      	movs	r2, #2
 8000cee:	212f      	movs	r1, #47	; 0x2f
 8000cf0:	4831      	ldr	r0, [pc, #196]	; (8000db8 <httpSend+0x190>)
 8000cf2:	f000 fe88 	bl	8001a06 <Delimiter>
	Delimiter(date_temp, '/', 3, 80, (unsigned char*) YY);
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <httpSend+0x1a0>)
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	2350      	movs	r3, #80	; 0x50
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	212f      	movs	r1, #47	; 0x2f
 8000d00:	482d      	ldr	r0, [pc, #180]	; (8000db8 <httpSend+0x190>)
 8000d02:	f000 fe80 	bl	8001a06 <Delimiter>
	// Check date and time to 2 digit
	addZero(hh, hh);
 8000d06:	492d      	ldr	r1, [pc, #180]	; (8000dbc <httpSend+0x194>)
 8000d08:	482c      	ldr	r0, [pc, #176]	; (8000dbc <httpSend+0x194>)
 8000d0a:	f7ff fea7 	bl	8000a5c <addZero>
	addZero(mm, mm);
 8000d0e:	492c      	ldr	r1, [pc, #176]	; (8000dc0 <httpSend+0x198>)
 8000d10:	482b      	ldr	r0, [pc, #172]	; (8000dc0 <httpSend+0x198>)
 8000d12:	f7ff fea3 	bl	8000a5c <addZero>
	addZero(ss, ss);
 8000d16:	492b      	ldr	r1, [pc, #172]	; (8000dc4 <httpSend+0x19c>)
 8000d18:	482a      	ldr	r0, [pc, #168]	; (8000dc4 <httpSend+0x19c>)
 8000d1a:	f7ff fe9f 	bl	8000a5c <addZero>
	addZero(YY, YY);
 8000d1e:	492a      	ldr	r1, [pc, #168]	; (8000dc8 <httpSend+0x1a0>)
 8000d20:	4829      	ldr	r0, [pc, #164]	; (8000dc8 <httpSend+0x1a0>)
 8000d22:	f7ff fe9b 	bl	8000a5c <addZero>
	addZero(MM, MM);
 8000d26:	4929      	ldr	r1, [pc, #164]	; (8000dcc <httpSend+0x1a4>)
 8000d28:	4828      	ldr	r0, [pc, #160]	; (8000dcc <httpSend+0x1a4>)
 8000d2a:	f7ff fe97 	bl	8000a5c <addZero>
	addZero(DD, DD);
 8000d2e:	4928      	ldr	r1, [pc, #160]	; (8000dd0 <httpSend+0x1a8>)
 8000d30:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <httpSend+0x1a8>)
 8000d32:	f7ff fe93 	bl	8000a5c <addZero>

	sprintf(HTTP_URL_Temp, "http://rtls.lailab.online/api/ingest_sensor_data?token=%s&device_id=%s&time=%s&date=%s&device_name=%s&x=%s&y=%s&z=%s&humidity=%s&temp=%s&etha=%s&co2=%s&airflow=%s&symbol=Q&date_now=20%s-%s-%sT%s:%s:%s.000Z&lat=%s&lon=%s", TOKEN, device_ID, time_s, date_s, device_ID, x, y, z, humi, temp, eth, carbon, airflow, YY, MM, DD, hh, mm, ss, lat, lon);
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	9312      	str	r3, [sp, #72]	; 0x48
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	9311      	str	r3, [sp, #68]	; 0x44
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <httpSend+0x19c>)
 8000d40:	9310      	str	r3, [sp, #64]	; 0x40
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <httpSend+0x198>)
 8000d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <httpSend+0x194>)
 8000d48:	930e      	str	r3, [sp, #56]	; 0x38
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <httpSend+0x1a8>)
 8000d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <httpSend+0x1a4>)
 8000d50:	930c      	str	r3, [sp, #48]	; 0x30
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <httpSend+0x1a0>)
 8000d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d58:	930a      	str	r3, [sp, #40]	; 0x28
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	9308      	str	r3, [sp, #32]
 8000d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d64:	9307      	str	r3, [sp, #28]
 8000d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d68:	9306      	str	r3, [sp, #24]
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	9305      	str	r3, [sp, #20]
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	9304      	str	r3, [sp, #16]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	9303      	str	r3, [sp, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <httpSend+0x1b4>)
 8000d86:	4916      	ldr	r1, [pc, #88]	; (8000de0 <httpSend+0x1b8>)
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <httpSend+0x188>)
 8000d8a:	f009 ff8b 	bl	800aca4 <siprintf>

	memcpy(out, HTTP_URL_Temp, sizeof(HTTP_URL_Temp));
 8000d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <httpSend+0x188>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	4611      	mov	r1, r2
 8000d96:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f009 ff6c 	bl	800ac78 <memcpy>

	return strlen(HTTP_URL_Temp);
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <httpSend+0x188>)
 8000da2:	f7ff fa1d 	bl	80001e0 <strlen>
 8000da6:	4603      	mov	r3, r0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000370 	.word	0x20000370
 8000db4:	200002a8 	.word	0x200002a8
 8000db8:	200002b4 	.word	0x200002b4
 8000dbc:	200002d8 	.word	0x200002d8
 8000dc0:	200002e0 	.word	0x200002e0
 8000dc4:	200002e8 	.word	0x200002e8
 8000dc8:	200002d0 	.word	0x200002d0
 8000dcc:	200002c8 	.word	0x200002c8
 8000dd0:	200002c0 	.word	0x200002c0
 8000dd4:	0800b90c 	.word	0x0800b90c
 8000dd8:	0800b914 	.word	0x0800b914
 8000ddc:	0800b91c 	.word	0x0800b91c
 8000de0:	0800b944 	.word	0x0800b944

08000de4 <main>:
static void MX_USART2_UART_Init(void);
static void MX_TIM4_Init(void);



int main(void) {
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b08d      	sub	sp, #52	; 0x34
 8000de8:	af0a      	add	r7, sp, #40	; 0x28

  sysValinit();
 8000dea:	f000 fb13 	bl	8001414 <sysValinit>
  sensorValInit();
 8000dee:	f000 fb35 	bl	800145c <sensorValInit>

  HAL_Init();
 8000df2:	f001 f923 	bl	800203c <HAL_Init>
  SystemClock_Config();
 8000df6:	f000 fc57 	bl	80016a8 <SystemClock_Config>
  MX_GPIO_Init();
 8000dfa:	f000 fd95 	bl	8001928 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dfe:	f000 fd5d 	bl	80018bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e02:	f000 fd07 	bl	8001814 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e06:	f000 fd2f 	bl	8001868 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000e0a:	f009 f9f7 	bl	800a1fc <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000e0e:	f000 fcb3 	bl	8001778 <MX_TIM4_Init>


  // TIMER4 START
  HAL_TIM_Base_Start_IT(&htim4);
 8000e12:	4886      	ldr	r0, [pc, #536]	; (800102c <main+0x248>)
 8000e14:	f003 ffb2 	bl	8004d7c <HAL_TIM_Base_Start_IT>


  // DMA LTE
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8000e18:	22ff      	movs	r2, #255	; 0xff
 8000e1a:	4985      	ldr	r1, [pc, #532]	; (8001030 <main+0x24c>)
 8000e1c:	4885      	ldr	r0, [pc, #532]	; (8001034 <main+0x250>)
 8000e1e:	f004 fc82 	bl	8005726 <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);

  //DMA commMaster
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	4984      	ldr	r1, [pc, #528]	; (8001038 <main+0x254>)
 8000e26:	4885      	ldr	r0, [pc, #532]	; (800103c <main+0x258>)
 8000e28:	f004 fc7d 	bl	8005726 <HAL_UARTEx_ReceiveToIdle_DMA>
  //__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);



  // INTERRUPT
  initEXIT();
 8000e2c:	f7ff fbd0 	bl	80005d0 <initEXIT>
 *
 *  ===============================================================================
 */

  // Wait LTE module boot
  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);			// BUSY -> 1
 8000e30:	2201      	movs	r2, #1
 8000e32:	2120      	movs	r1, #32
 8000e34:	4882      	ldr	r0, [pc, #520]	; (8001040 <main+0x25c>)
 8000e36:	f002 f849 	bl	8002ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ONLINE, GPIO_PIN_RESET);		// ONLINE 0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2140      	movs	r1, #64	; 0x40
 8000e3e:	4880      	ldr	r0, [pc, #512]	; (8001040 <main+0x25c>)
 8000e40:	f002 f844 	bl	8002ecc <HAL_GPIO_WritePin>
  while(sysCounter.main_ms_counter < 500);				// Wait MCU boot
 8000e44:	bf00      	nop
 8000e46:	4b7f      	ldr	r3, [pc, #508]	; (8001044 <main+0x260>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e4e:	d3fa      	bcc.n	8000e46 <main+0x62>
  // Initialize LTE module
  SerialDebug("[MCU] -> Wait LTE boot 30sec.\r\n");
 8000e50:	487d      	ldr	r0, [pc, #500]	; (8001048 <main+0x264>)
 8000e52:	f000 fb35 	bl	80014c0 <SerialDebug>
  while(sysCounter.main_ms_counter < LTEbootTime);		// Wait LTE module boot
 8000e56:	bf00      	nop
 8000e58:	4b7a      	ldr	r3, [pc, #488]	; (8001044 <main+0x260>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	f247 522f 	movw	r2, #29999	; 0x752f
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d9f9      	bls.n	8000e58 <main+0x74>



  // Start init LTE module
  initLTE();
 8000e64:	f7ff fcd0 	bl	8000808 <initLTE>
  AckInternet_ErrCode = AckInternet();
 8000e68:	f7ff fe1a 	bl	8000aa0 <AckInternet>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b76      	ldr	r3, [pc, #472]	; (800104c <main+0x268>)
 8000e72:	701a      	strb	r2, [r3, #0]



  AckInternet_flag = 1;
 8000e74:	4b76      	ldr	r3, [pc, #472]	; (8001050 <main+0x26c>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);		// BUSY -> 0
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4870      	ldr	r0, [pc, #448]	; (8001040 <main+0x25c>)
 8000e80:	f002 f824 	bl	8002ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	486d      	ldr	r0, [pc, #436]	; (8001040 <main+0x25c>)
 8000e8a:	f002 f81f 	bl	8002ecc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f001 f946 	bl	8002120 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	4869      	ldr	r0, [pc, #420]	; (8001040 <main+0x25c>)
 8000e9a:	f002 f817 	bl	8002ecc <HAL_GPIO_WritePin>


  while(1) {
	  // ErrorHandle
	  //Init error please check system
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8000e9e:	e007      	b.n	8000eb0 <main+0xcc>
		  HAL_GPIO_TogglePin(GPIOB, ERROR);
 8000ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea4:	4866      	ldr	r0, [pc, #408]	; (8001040 <main+0x25c>)
 8000ea6:	f002 f82a 	bl	8002efe <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8000eaa:	20fa      	movs	r0, #250	; 0xfa
 8000eac:	f001 f938 	bl	8002120 <HAL_Delay>
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 8000eb0:	4b68      	ldr	r3, [pc, #416]	; (8001054 <main+0x270>)
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d0f3      	beq.n	8000ea0 <main+0xbc>
	  }

	  while(sysFlag.LTE_ERROR == 1) {
 8000eb8:	e036      	b.n	8000f28 <main+0x144>
		  if(sysCounter.main_ms_counter == 0) {
 8000eba:	4b62      	ldr	r3, [pc, #392]	; (8001044 <main+0x260>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <main+0xe4>
			  sysCounter.rebootCount = 0;
 8000ec2:	4b60      	ldr	r3, [pc, #384]	; (8001044 <main+0x260>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	721a      	strb	r2, [r3, #8]
		  }
		  if((sysCounter.main_ms_counter - sysCounter.rebootCount) >= 60000) {
 8000ec8:	4b5e      	ldr	r3, [pc, #376]	; (8001044 <main+0x260>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <main+0x260>)
 8000ed0:	7a1b      	ldrb	r3, [r3, #8]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	dd21      	ble.n	8000f20 <main+0x13c>
			  reboot_min_count++;
 8000edc:	4b5e      	ldr	r3, [pc, #376]	; (8001058 <main+0x274>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <main+0x274>)
 8000ee6:	701a      	strb	r2, [r3, #0]
			  sysCounter.rebootCount = sysCounter.main_ms_counter;
 8000ee8:	4b56      	ldr	r3, [pc, #344]	; (8001044 <main+0x260>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b55      	ldr	r3, [pc, #340]	; (8001044 <main+0x260>)
 8000ef0:	721a      	strb	r2, [r3, #8]
		  }
		  while(reboot_min_count >= 10) {
 8000ef2:	e015      	b.n	8000f20 <main+0x13c>
			  if(SHUTDOWN_LTE() == 1) {
 8000ef4:	f7ff fd66 	bl	80009c4 <SHUTDOWN_LTE>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d105      	bne.n	8000f0a <main+0x126>
				  HAL_Delay(50);
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f001 f90e 	bl	8002120 <HAL_Delay>
				  HAL_NVIC_SystemReset();
 8000f04:	f001 fa4b 	bl	800239e <HAL_NVIC_SystemReset>
 8000f08:	e00a      	b.n	8000f20 <main+0x13c>
			  }else {
				  sysFlag.LTE_ERROR = 0;
 8000f0a:	4b52      	ldr	r3, [pc, #328]	; (8001054 <main+0x270>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	709a      	strb	r2, [r3, #2]
				  sysFlag.LTE_INIT_ERROR = 1;
 8000f10:	4b50      	ldr	r3, [pc, #320]	; (8001054 <main+0x270>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	705a      	strb	r2, [r3, #1]
				  sysCounter.rebootCount = sysCounter.main_ms_counter;
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <main+0x260>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b49      	ldr	r3, [pc, #292]	; (8001044 <main+0x260>)
 8000f1e:	721a      	strb	r2, [r3, #8]
		  while(reboot_min_count >= 10) {
 8000f20:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <main+0x274>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	d8e5      	bhi.n	8000ef4 <main+0x110>
	  while(sysFlag.LTE_ERROR == 1) {
 8000f28:	4b4a      	ldr	r3, [pc, #296]	; (8001054 <main+0x270>)
 8000f2a:	789b      	ldrb	r3, [r3, #2]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d0c4      	beq.n	8000eba <main+0xd6>
		  }
	  }


	  // Main task
	  if(AckInternet_flag == 1) {
 8000f30:	4b47      	ldr	r3, [pc, #284]	; (8001050 <main+0x26c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d1bb      	bne.n	8000eb0 <main+0xcc>

	  RS485Handle :
 8000f38:	bf00      	nop
		while(intterruptEvent_Flag == 1) {									// Get RTS Signal
 8000f3a:	e25a      	b.n	80013f2 <main+0x60e>
		  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_SET);				    	// BUSY !!!!
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2120      	movs	r1, #32
 8000f40:	483f      	ldr	r0, [pc, #252]	; (8001040 <main+0x25c>)
 8000f42:	f001 ffc3 	bl	8002ecc <HAL_GPIO_WritePin>
		  SerialDebug("[MCU] -> Get RTS\r\n");
 8000f46:	4845      	ldr	r0, [pc, #276]	; (800105c <main+0x278>)
 8000f48:	f000 faba 	bl	80014c0 <SerialDebug>
		  sensorValInit();													// Clear buffer
 8000f4c:	f000 fa86 	bl	800145c <sensorValInit>
		  memset(SENSOR.COMPID, 0x00, sizeof(SENSOR.COMPID));
 8000f50:	2204      	movs	r2, #4
 8000f52:	2100      	movs	r1, #0
 8000f54:	4842      	ldr	r0, [pc, #264]	; (8001060 <main+0x27c>)
 8000f56:	f009 fe9d 	bl	800ac94 <memset>
 8000f5a:	4b42      	ldr	r3, [pc, #264]	; (8001064 <main+0x280>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
		  memset(ENDBYTE, 0x00, sizeof(ENDBYTE));


		  // Call GPS
		  if(callGNSS() == 1) {
 8000f60:	f7ff fb96 	bl	8000690 <callGNSS>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d11b      	bne.n	8000fa2 <main+0x1be>
			  SerialDebug((char *) "[MCU] -> CRC pass\r\n");
 8000f6a:	483f      	ldr	r0, [pc, #252]	; (8001068 <main+0x284>)
 8000f6c:	f000 faa8 	bl	80014c0 <SerialDebug>
			  GNSS.lat[0] = '\0';
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <main+0x288>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
			  GNSS.lon[0] = '\0';
 8000f76:	4b3d      	ldr	r3, [pc, #244]	; (800106c <main+0x288>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	741a      	strb	r2, [r3, #16]
			  memcpy(GNSS.lat, latTemp, sizeof(GNSS.lat));
 8000f7c:	4a3b      	ldr	r2, [pc, #236]	; (800106c <main+0x288>)
 8000f7e:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <main+0x28c>)
 8000f80:	4614      	mov	r4, r2
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	6859      	ldr	r1, [r3, #4]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			  memcpy(GNSS.lon, lonTemp, sizeof(GNSS.lon));
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <main+0x288>)
 8000f8e:	4a39      	ldr	r2, [pc, #228]	; (8001074 <main+0x290>)
 8000f90:	f103 0410 	add.w	r4, r3, #16
 8000f94:	4613      	mov	r3, r2
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	6859      	ldr	r1, [r3, #4]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	e002      	b.n	8000fa8 <main+0x1c4>
		  }else {
			  SerialDebug((char *) "[MCU] -> CRC fail\r\n");
 8000fa2:	4835      	ldr	r0, [pc, #212]	; (8001078 <main+0x294>)
 8000fa4:	f000 fa8c 	bl	80014c0 <SerialDebug>
		  }


		  // Generate pulse 5ms.

		  HAL_Delay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 f8b9 	bl	8002120 <HAL_Delay>
		  SerialDebug("[MCU] -> Send RDY\r\n");
 8000fae:	4833      	ldr	r0, [pc, #204]	; (800107c <main+0x298>)
 8000fb0:	f000 fa86 	bl	80014c0 <SerialDebug>
		  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	4821      	ldr	r0, [pc, #132]	; (8001040 <main+0x25c>)
 8000fba:	f001 ff87 	bl	8002ecc <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f001 f8ae 	bl	8002120 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, RDY, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	481d      	ldr	r0, [pc, #116]	; (8001040 <main+0x25c>)
 8000fca:	f001 ff7f 	bl	8002ecc <HAL_GPIO_WritePin>

		  SerialDebug("[MCU] -> Wait data\r\n");
 8000fce:	482c      	ldr	r0, [pc, #176]	; (8001080 <main+0x29c>)
 8000fd0:	f000 fa76 	bl	80014c0 <SerialDebug>

		  // Wait DMA put data to buffer
		  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <main+0x260>)
 8000fd6:	881a      	ldrh	r2, [r3, #0]
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <main+0x260>)
 8000fda:	80da      	strh	r2, [r3, #6]
		  HAL_Delay(5);
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f001 f89f 	bl	8002120 <HAL_Delay>
		  while(*dataComm_mainBuff == '\0') {
 8000fe2:	e055      	b.n	8001090 <main+0x2ac>
			  // Timeout conditions
			  if(sysCounter.main_ms_counter == 0) {
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <main+0x260>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <main+0x20e>
				  sysCounter.prev_msgTimeOut = 0;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <main+0x260>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	80da      	strh	r2, [r3, #6]
			  }

			  if((sysCounter.main_ms_counter - sysCounter.prev_msgTimeOut) >= 1000) {
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <main+0x260>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <main+0x260>)
 8000ffa:	88db      	ldrh	r3, [r3, #6]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001002:	db45      	blt.n	8001090 <main+0x2ac>
				  SerialDebug("[RS485] -> Timeout\r\n");
 8001004:	481f      	ldr	r0, [pc, #124]	; (8001084 <main+0x2a0>)
 8001006:	f000 fa5b 	bl	80014c0 <SerialDebug>
				  SendData_RS485((char*) "F");
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <main+0x2a4>)
 800100c:	f000 fa6e 	bl	80014ec <SendData_RS485>
				  intterruptEvent_Flag = 0;
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <main+0x2a8>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2120      	movs	r1, #32
 800101a:	4809      	ldr	r0, [pc, #36]	; (8001040 <main+0x25c>)
 800101c:	f001 ff56 	bl	8002ecc <HAL_GPIO_WritePin>
				  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <main+0x260>)
 8001022:	881a      	ldrh	r2, [r3, #0]
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <main+0x260>)
 8001026:	80da      	strh	r2, [r3, #6]
				  goto RS485Handle;
 8001028:	e787      	b.n	8000f3a <main+0x156>
 800102a:	bf00      	nop
 800102c:	200009bc 	.word	0x200009bc
 8001030:	20000730 	.word	0x20000730
 8001034:	20000a48 	.word	0x20000a48
 8001038:	200006b0 	.word	0x200006b0
 800103c:	20000a04 	.word	0x20000a04
 8001040:	40020400 	.word	0x40020400
 8001044:	20000b4c 	.word	0x20000b4c
 8001048:	0800ba58 	.word	0x0800ba58
 800104c:	200009b9 	.word	0x200009b9
 8001050:	200009ba 	.word	0x200009ba
 8001054:	20000b58 	.word	0x20000b58
 8001058:	200009bb 	.word	0x200009bb
 800105c:	0800ba78 	.word	0x0800ba78
 8001060:	20000b7c 	.word	0x20000b7c
 8001064:	200009b8 	.word	0x200009b8
 8001068:	0800ba8c 	.word	0x0800ba8c
 800106c:	20000b5c 	.word	0x20000b5c
 8001070:	20000200 	.word	0x20000200
 8001074:	20000210 	.word	0x20000210
 8001078:	0800baa0 	.word	0x0800baa0
 800107c:	0800bab4 	.word	0x0800bab4
 8001080:	0800bac8 	.word	0x0800bac8
 8001084:	0800bae0 	.word	0x0800bae0
 8001088:	0800baf8 	.word	0x0800baf8
 800108c:	2000017c 	.word	0x2000017c
		  while(*dataComm_mainBuff == '\0') {
 8001090:	4ba9      	ldr	r3, [pc, #676]	; (8001338 <main+0x554>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0a5      	beq.n	8000fe4 <main+0x200>
			  }
		  }
		  sysCounter.prev_msgTimeOut = sysCounter.main_ms_counter;
 8001098:	4ba8      	ldr	r3, [pc, #672]	; (800133c <main+0x558>)
 800109a:	881a      	ldrh	r2, [r3, #0]
 800109c:	4ba7      	ldr	r3, [pc, #668]	; (800133c <main+0x558>)
 800109e:	80da      	strh	r2, [r3, #6]

		  // Check data is valid?
		  // frame 0 = frame 3 && frame 12 = 'Q'
		  Delimiter(dataComm_mainBuff, ',', 3, 80, (unsigned char*) SENSOR.COMPID);
 80010a0:	4ba7      	ldr	r3, [pc, #668]	; (8001340 <main+0x55c>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2350      	movs	r3, #80	; 0x50
 80010a6:	2203      	movs	r2, #3
 80010a8:	212c      	movs	r1, #44	; 0x2c
 80010aa:	48a3      	ldr	r0, [pc, #652]	; (8001338 <main+0x554>)
 80010ac:	f000 fcab 	bl	8001a06 <Delimiter>
		  Delimiter(dataComm_mainBuff, ',', 12, 80, (unsigned char*) ENDBYTE);
 80010b0:	4ba4      	ldr	r3, [pc, #656]	; (8001344 <main+0x560>)
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2350      	movs	r3, #80	; 0x50
 80010b6:	220c      	movs	r2, #12
 80010b8:	212c      	movs	r1, #44	; 0x2c
 80010ba:	489f      	ldr	r0, [pc, #636]	; (8001338 <main+0x554>)
 80010bc:	f000 fca3 	bl	8001a06 <Delimiter>

		  if(dataComm_mainBuff[0] == SENSOR.COMPID[0] && ENDBYTE[0] == 'Q') {
 80010c0:	4b9d      	ldr	r3, [pc, #628]	; (8001338 <main+0x554>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b9e      	ldr	r3, [pc, #632]	; (8001340 <main+0x55c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8181 	bne.w	80013d0 <main+0x5ec>
 80010ce:	4b9d      	ldr	r3, [pc, #628]	; (8001344 <main+0x560>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b51      	cmp	r3, #81	; 0x51
 80010d4:	f040 817c 	bne.w	80013d0 <main+0x5ec>
			  SerialDebug("[MCU] -> Data is valid\r\n");
 80010d8:	489b      	ldr	r0, [pc, #620]	; (8001348 <main+0x564>)
 80010da:	f000 f9f1 	bl	80014c0 <SerialDebug>

			  // Delimit data
			  Delimiter(dataComm_mainBuff, ',', 1, 80, (unsigned char*) SENSOR.timeStemp);
 80010de:	4b9b      	ldr	r3, [pc, #620]	; (800134c <main+0x568>)
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2350      	movs	r3, #80	; 0x50
 80010e4:	2201      	movs	r2, #1
 80010e6:	212c      	movs	r1, #44	; 0x2c
 80010e8:	4893      	ldr	r0, [pc, #588]	; (8001338 <main+0x554>)
 80010ea:	f000 fc8c 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 2, 80, (unsigned char*) SENSOR.dateStamp);
 80010ee:	4b98      	ldr	r3, [pc, #608]	; (8001350 <main+0x56c>)
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2350      	movs	r3, #80	; 0x50
 80010f4:	2202      	movs	r2, #2
 80010f6:	212c      	movs	r1, #44	; 0x2c
 80010f8:	488f      	ldr	r0, [pc, #572]	; (8001338 <main+0x554>)
 80010fa:	f000 fc84 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 4, 80, (unsigned char*) SENSOR.X);
 80010fe:	4b95      	ldr	r3, [pc, #596]	; (8001354 <main+0x570>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2350      	movs	r3, #80	; 0x50
 8001104:	2204      	movs	r2, #4
 8001106:	212c      	movs	r1, #44	; 0x2c
 8001108:	488b      	ldr	r0, [pc, #556]	; (8001338 <main+0x554>)
 800110a:	f000 fc7c 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 5, 80, (unsigned char*) SENSOR.Y);
 800110e:	4b92      	ldr	r3, [pc, #584]	; (8001358 <main+0x574>)
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2350      	movs	r3, #80	; 0x50
 8001114:	2205      	movs	r2, #5
 8001116:	212c      	movs	r1, #44	; 0x2c
 8001118:	4887      	ldr	r0, [pc, #540]	; (8001338 <main+0x554>)
 800111a:	f000 fc74 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 6, 80, (unsigned char*) SENSOR.Z);
 800111e:	4b8f      	ldr	r3, [pc, #572]	; (800135c <main+0x578>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2350      	movs	r3, #80	; 0x50
 8001124:	2206      	movs	r2, #6
 8001126:	212c      	movs	r1, #44	; 0x2c
 8001128:	4883      	ldr	r0, [pc, #524]	; (8001338 <main+0x554>)
 800112a:	f000 fc6c 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 7, 80, (unsigned char*) SENSOR.Huim);
 800112e:	4b8c      	ldr	r3, [pc, #560]	; (8001360 <main+0x57c>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2350      	movs	r3, #80	; 0x50
 8001134:	2207      	movs	r2, #7
 8001136:	212c      	movs	r1, #44	; 0x2c
 8001138:	487f      	ldr	r0, [pc, #508]	; (8001338 <main+0x554>)
 800113a:	f000 fc64 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 8, 80, (unsigned char*) SENSOR.Temp);
 800113e:	4b89      	ldr	r3, [pc, #548]	; (8001364 <main+0x580>)
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2350      	movs	r3, #80	; 0x50
 8001144:	2208      	movs	r2, #8
 8001146:	212c      	movs	r1, #44	; 0x2c
 8001148:	487b      	ldr	r0, [pc, #492]	; (8001338 <main+0x554>)
 800114a:	f000 fc5c 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 9, 80, (unsigned char*) SENSOR.Alc);
 800114e:	4b86      	ldr	r3, [pc, #536]	; (8001368 <main+0x584>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2350      	movs	r3, #80	; 0x50
 8001154:	2209      	movs	r2, #9
 8001156:	212c      	movs	r1, #44	; 0x2c
 8001158:	4877      	ldr	r0, [pc, #476]	; (8001338 <main+0x554>)
 800115a:	f000 fc54 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 10, 80, (unsigned char*) SENSOR.Carbon);
 800115e:	4b83      	ldr	r3, [pc, #524]	; (800136c <main+0x588>)
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2350      	movs	r3, #80	; 0x50
 8001164:	220a      	movs	r2, #10
 8001166:	212c      	movs	r1, #44	; 0x2c
 8001168:	4873      	ldr	r0, [pc, #460]	; (8001338 <main+0x554>)
 800116a:	f000 fc4c 	bl	8001a06 <Delimiter>
			  Delimiter(dataComm_mainBuff, ',', 11, 80, (unsigned char*) SENSOR.AirFlow);
 800116e:	4b80      	ldr	r3, [pc, #512]	; (8001370 <main+0x58c>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2350      	movs	r3, #80	; 0x50
 8001174:	220b      	movs	r2, #11
 8001176:	212c      	movs	r1, #44	; 0x2c
 8001178:	486f      	ldr	r0, [pc, #444]	; (8001338 <main+0x554>)
 800117a:	f000 fc44 	bl	8001a06 <Delimiter>


			  // Send data to server
			  HAL_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 ffce 	bl	8002120 <HAL_Delay>
			  memset(URL_temp, 0x00, sizeof(URL_temp));
 8001184:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001188:	2100      	movs	r1, #0
 800118a:	487a      	ldr	r0, [pc, #488]	; (8001374 <main+0x590>)
 800118c:	f009 fd82 	bl	800ac94 <memset>
			  URL_len = httpSend(GNSS.lat, GNSS.lon, SENSOR.COMPID, SENSOR.timeStemp, SENSOR.dateStamp, SENSOR.X, SENSOR.Y, SENSOR.Z, SENSOR.Huim, SENSOR.Temp, SENSOR.Alc, SENSOR.Carbon, SENSOR.AirFlow, URL_temp);
 8001190:	4b78      	ldr	r3, [pc, #480]	; (8001374 <main+0x590>)
 8001192:	9309      	str	r3, [sp, #36]	; 0x24
 8001194:	4b76      	ldr	r3, [pc, #472]	; (8001370 <main+0x58c>)
 8001196:	9308      	str	r3, [sp, #32]
 8001198:	4b74      	ldr	r3, [pc, #464]	; (800136c <main+0x588>)
 800119a:	9307      	str	r3, [sp, #28]
 800119c:	4b72      	ldr	r3, [pc, #456]	; (8001368 <main+0x584>)
 800119e:	9306      	str	r3, [sp, #24]
 80011a0:	4b70      	ldr	r3, [pc, #448]	; (8001364 <main+0x580>)
 80011a2:	9305      	str	r3, [sp, #20]
 80011a4:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <main+0x57c>)
 80011a6:	9304      	str	r3, [sp, #16]
 80011a8:	4b6c      	ldr	r3, [pc, #432]	; (800135c <main+0x578>)
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	4b6a      	ldr	r3, [pc, #424]	; (8001358 <main+0x574>)
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <main+0x570>)
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	4b66      	ldr	r3, [pc, #408]	; (8001350 <main+0x56c>)
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4b64      	ldr	r3, [pc, #400]	; (800134c <main+0x568>)
 80011ba:	4a61      	ldr	r2, [pc, #388]	; (8001340 <main+0x55c>)
 80011bc:	496e      	ldr	r1, [pc, #440]	; (8001378 <main+0x594>)
 80011be:	486f      	ldr	r0, [pc, #444]	; (800137c <main+0x598>)
 80011c0:	f7ff fd32 	bl	8000c28 <httpSend>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <main+0x59c>)
 80011c8:	6013      	str	r3, [r2, #0]

			  SerialDebug("[URL] -> ");
 80011ca:	486e      	ldr	r0, [pc, #440]	; (8001384 <main+0x5a0>)
 80011cc:	f000 f978 	bl	80014c0 <SerialDebug>
			  SerialDebug(URL_temp);
 80011d0:	4868      	ldr	r0, [pc, #416]	; (8001374 <main+0x590>)
 80011d2:	f000 f975 	bl	80014c0 <SerialDebug>
			  SerialDebug("\r\n");
 80011d6:	486c      	ldr	r0, [pc, #432]	; (8001388 <main+0x5a4>)
 80011d8:	f000 f972 	bl	80014c0 <SerialDebug>

			  HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f000 ff9f 	bl	8002120 <HAL_Delay>

			  memset(textBuffer, 0x00, sizeof(textBuffer));
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	2100      	movs	r1, #0
 80011e6:	4869      	ldr	r0, [pc, #420]	; (800138c <main+0x5a8>)
 80011e8:	f009 fd54 	bl	800ac94 <memset>
			  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80011ec:	22ff      	movs	r2, #255	; 0xff
 80011ee:	2100      	movs	r1, #0
 80011f0:	4867      	ldr	r0, [pc, #412]	; (8001390 <main+0x5ac>)
 80011f2:	f009 fd4f 	bl	800ac94 <memset>


			  for(unsigned char count = 0; count < 3; count++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e098      	b.n	800132e <main+0x54a>
				  switch(count) {
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d013      	beq.n	800122a <main+0x446>
 8001202:	2b02      	cmp	r3, #2
 8001204:	dc1a      	bgt.n	800123c <main+0x458>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <main+0x42c>
 800120a:	2b01      	cmp	r3, #1
 800120c:	d008      	beq.n	8001220 <main+0x43c>
 800120e:	e015      	b.n	800123c <main+0x458>
				  	  case 0 :
				  		  sprintf(textBuffer, "AT+QHTTPURL=%d,80\r\n", URL_len);
 8001210:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <main+0x59c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	495f      	ldr	r1, [pc, #380]	; (8001394 <main+0x5b0>)
 8001218:	485c      	ldr	r0, [pc, #368]	; (800138c <main+0x5a8>)
 800121a:	f009 fd43 	bl	800aca4 <siprintf>
					  	  break;
 800121e:	e00d      	b.n	800123c <main+0x458>

				  	  case 1 :
				  		  sprintf(textBuffer, "AT+QHTTPPOST=1,60,60\r\n");
 8001220:	495d      	ldr	r1, [pc, #372]	; (8001398 <main+0x5b4>)
 8001222:	485a      	ldr	r0, [pc, #360]	; (800138c <main+0x5a8>)
 8001224:	f009 fd3e 	bl	800aca4 <siprintf>
						  break;
 8001228:	e008      	b.n	800123c <main+0x458>

				  	  case 2 :
				  		  HAL_Delay(3000);
 800122a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800122e:	f000 ff77 	bl	8002120 <HAL_Delay>
				  		  sprintf(textBuffer, "AT+QHTTPREAD=80\r\n");
 8001232:	495a      	ldr	r1, [pc, #360]	; (800139c <main+0x5b8>)
 8001234:	4855      	ldr	r0, [pc, #340]	; (800138c <main+0x5a8>)
 8001236:	f009 fd35 	bl	800aca4 <siprintf>
				  		  break;
 800123a:	bf00      	nop
				  }


				  SerialDebug((char *) textBuffer);
 800123c:	4853      	ldr	r0, [pc, #332]	; (800138c <main+0x5a8>)
 800123e:	f000 f93f 	bl	80014c0 <SerialDebug>
				  SerialDebug("\r\n");
 8001242:	4851      	ldr	r0, [pc, #324]	; (8001388 <main+0x5a4>)
 8001244:	f000 f93c 	bl	80014c0 <SerialDebug>
				  SendCMD_LTE((char *) textBuffer);
 8001248:	4850      	ldr	r0, [pc, #320]	; (800138c <main+0x5a8>)
 800124a:	f000 f963 	bl	8001514 <SendCMD_LTE>
				  sendURL_flag = 1;
 800124e:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <main+0x5bc>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]

				  while(sendURL_flag == 1) {
 8001254:	e064      	b.n	8001320 <main+0x53c>
					  if(findTarget(lteComm_MainBuff, "CONNECT") == 1) {
 8001256:	4953      	ldr	r1, [pc, #332]	; (80013a4 <main+0x5c0>)
 8001258:	484d      	ldr	r0, [pc, #308]	; (8001390 <main+0x5ac>)
 800125a:	f000 f9d1 	bl	8001600 <findTarget>
 800125e:	4603      	mov	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d125      	bne.n	80012b0 <main+0x4cc>
						  if(count == 0) {
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <main+0x48c>
							  SendCMD_LTE((char *) URL_temp);
 800126a:	4842      	ldr	r0, [pc, #264]	; (8001374 <main+0x590>)
 800126c:	f000 f952 	bl	8001514 <SendCMD_LTE>
						  }

						  if(count == 1) {
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <main+0x498>
							  SendCMD_LTE((char *) "\r");
 8001276:	484c      	ldr	r0, [pc, #304]	; (80013a8 <main+0x5c4>)
 8001278:	f000 f94c 	bl	8001514 <SendCMD_LTE>
						  }

						  if(count == 2) {
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d10b      	bne.n	800129a <main+0x4b6>
							  SerialDebug((char *) "\n");
 8001282:	484a      	ldr	r0, [pc, #296]	; (80013ac <main+0x5c8>)
 8001284:	f000 f91c 	bl	80014c0 <SerialDebug>
							  SerialDebug((char *) lteComm_MainBuff);
 8001288:	4841      	ldr	r0, [pc, #260]	; (8001390 <main+0x5ac>)
 800128a:	f000 f919 	bl	80014c0 <SerialDebug>
							  SerialDebug((char *) "\n");
 800128e:	4847      	ldr	r0, [pc, #284]	; (80013ac <main+0x5c8>)
 8001290:	f000 f916 	bl	80014c0 <SerialDebug>
							  SendData_RS485((char*) "P");
 8001294:	4846      	ldr	r0, [pc, #280]	; (80013b0 <main+0x5cc>)
 8001296:	f000 f929 	bl	80014ec <SendData_RS485>
						  }

						  memset(textBuffer, 0x00, sizeof(textBuffer));
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	2100      	movs	r1, #0
 800129e:	483b      	ldr	r0, [pc, #236]	; (800138c <main+0x5a8>)
 80012a0:	f009 fcf8 	bl	800ac94 <memset>
						  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80012a4:	22ff      	movs	r2, #255	; 0xff
 80012a6:	2100      	movs	r1, #0
 80012a8:	4839      	ldr	r0, [pc, #228]	; (8001390 <main+0x5ac>)
 80012aa:	f009 fcf3 	bl	800ac94 <memset>
 80012ae:	e037      	b.n	8001320 <main+0x53c>
					  }

					  else if(findTarget(lteComm_MainBuff, "OK") == 1) {
 80012b0:	4940      	ldr	r1, [pc, #256]	; (80013b4 <main+0x5d0>)
 80012b2:	4837      	ldr	r0, [pc, #220]	; (8001390 <main+0x5ac>)
 80012b4:	f000 f9a4 	bl	8001600 <findTarget>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d110      	bne.n	80012e0 <main+0x4fc>
						  SerialDebug("[LTE] -> OK\r\n");
 80012be:	483e      	ldr	r0, [pc, #248]	; (80013b8 <main+0x5d4>)
 80012c0:	f000 f8fe 	bl	80014c0 <SerialDebug>

						  memset(textBuffer, 0x00, sizeof(textBuffer));
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	2100      	movs	r1, #0
 80012c8:	4830      	ldr	r0, [pc, #192]	; (800138c <main+0x5a8>)
 80012ca:	f009 fce3 	bl	800ac94 <memset>
						  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 80012ce:	22ff      	movs	r2, #255	; 0xff
 80012d0:	2100      	movs	r1, #0
 80012d2:	482f      	ldr	r0, [pc, #188]	; (8001390 <main+0x5ac>)
 80012d4:	f009 fcde 	bl	800ac94 <memset>

						  sendURL_flag = 0;
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <main+0x5bc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e01f      	b.n	8001320 <main+0x53c>
					  }


					  else if(findTarget(lteComm_MainBuff, "ERROR") == 1) {
 80012e0:	4936      	ldr	r1, [pc, #216]	; (80013bc <main+0x5d8>)
 80012e2:	482b      	ldr	r0, [pc, #172]	; (8001390 <main+0x5ac>)
 80012e4:	f000 f98c 	bl	8001600 <findTarget>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d118      	bne.n	8001320 <main+0x53c>
						  SerialDebug("[LTE] -> ERROR\r\n");
 80012ee:	4834      	ldr	r0, [pc, #208]	; (80013c0 <main+0x5dc>)
 80012f0:	f000 f8e6 	bl	80014c0 <SerialDebug>
						  SendData_RS485((char*) "X");
 80012f4:	4833      	ldr	r0, [pc, #204]	; (80013c4 <main+0x5e0>)
 80012f6:	f000 f8f9 	bl	80014ec <SendData_RS485>


						  memset(textBuffer, 0x00, sizeof(textBuffer));
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	2100      	movs	r1, #0
 80012fe:	4823      	ldr	r0, [pc, #140]	; (800138c <main+0x5a8>)
 8001300:	f009 fcc8 	bl	800ac94 <memset>
						  memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));
 8001304:	22ff      	movs	r2, #255	; 0xff
 8001306:	2100      	movs	r1, #0
 8001308:	4821      	ldr	r0, [pc, #132]	; (8001390 <main+0x5ac>)
 800130a:	f009 fcc3 	bl	800ac94 <memset>

						  sysFlag.LTE_ERROR = 1;
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <main+0x5e4>)
 8001310:	2201      	movs	r2, #1
 8001312:	709a      	strb	r2, [r3, #2]
						  sendURL_flag = 0;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <main+0x5bc>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
						  intterruptEvent_Flag = 0;
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <main+0x5e8>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
				  while(sendURL_flag == 1) {
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <main+0x5bc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d096      	beq.n	8001256 <main+0x472>
			  for(unsigned char count = 0; count < 3; count++) {
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	3301      	adds	r3, #1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b02      	cmp	r3, #2
 8001332:	f67f af63 	bls.w	80011fc <main+0x418>
 8001336:	e051      	b.n	80013dc <main+0x5f8>
 8001338:	20000830 	.word	0x20000830
 800133c:	20000b4c 	.word	0x20000b4c
 8001340:	20000b7c 	.word	0x20000b7c
 8001344:	200009b8 	.word	0x200009b8
 8001348:	0800bafc 	.word	0x0800bafc
 800134c:	20000b90 	.word	0x20000b90
 8001350:	20000b80 	.word	0x20000b80
 8001354:	20000ba0 	.word	0x20000ba0
 8001358:	20000ba6 	.word	0x20000ba6
 800135c:	20000bac 	.word	0x20000bac
 8001360:	20000bb2 	.word	0x20000bb2
 8001364:	20000bb8 	.word	0x20000bb8
 8001368:	20000bbe 	.word	0x20000bbe
 800136c:	20000bc4 	.word	0x20000bc4
 8001370:	20000bca 	.word	0x20000bca
 8001374:	20000550 	.word	0x20000550
 8001378:	20000b6c 	.word	0x20000b6c
 800137c:	20000b5c 	.word	0x20000b5c
 8001380:	200009b0 	.word	0x200009b0
 8001384:	0800bb18 	.word	0x0800bb18
 8001388:	0800bb24 	.word	0x0800bb24
 800138c:	200004d0 	.word	0x200004d0
 8001390:	200008b0 	.word	0x200008b0
 8001394:	0800bb28 	.word	0x0800bb28
 8001398:	0800bb3c 	.word	0x0800bb3c
 800139c:	0800bb54 	.word	0x0800bb54
 80013a0:	200009b4 	.word	0x200009b4
 80013a4:	0800bb68 	.word	0x0800bb68
 80013a8:	0800bb70 	.word	0x0800bb70
 80013ac:	0800bb74 	.word	0x0800bb74
 80013b0:	0800bb78 	.word	0x0800bb78
 80013b4:	0800bb7c 	.word	0x0800bb7c
 80013b8:	0800bb80 	.word	0x0800bb80
 80013bc:	0800bb90 	.word	0x0800bb90
 80013c0:	0800bb98 	.word	0x0800bb98
 80013c4:	0800bbac 	.word	0x0800bbac
 80013c8:	20000b58 	.word	0x20000b58
 80013cc:	2000017c 	.word	0x2000017c
					  }
				  }
			  }
		  }else {
			  SerialDebug("[MCU] -> Data is not valid\r\n");
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <main+0x61c>)
 80013d2:	f000 f875 	bl	80014c0 <SerialDebug>
			  SendData_RS485((char*) "F");
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <main+0x620>)
 80013d8:	f000 f888 	bl	80014ec <SendData_RS485>
		  }

		  // End data process
		  SerialDebug("[MCU] -> End data process\r\n");
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <main+0x624>)
 80013de:	f000 f86f 	bl	80014c0 <SerialDebug>
		  intterruptEvent_Flag = 0;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <main+0x628>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, BUSY, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2120      	movs	r1, #32
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <main+0x62c>)
 80013ee:	f001 fd6d 	bl	8002ecc <HAL_GPIO_WritePin>
		while(intterruptEvent_Flag == 1) {									// Get RTS Signal
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <main+0x628>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	f43f ada0 	beq.w	8000f3c <main+0x158>
	  while(sysFlag.LTE_INIT_ERROR == 1) {
 80013fc:	e558      	b.n	8000eb0 <main+0xcc>
 80013fe:	bf00      	nop
 8001400:	0800bbb0 	.word	0x0800bbb0
 8001404:	0800baf8 	.word	0x0800baf8
 8001408:	0800bbd0 	.word	0x0800bbd0
 800140c:	2000017c 	.word	0x2000017c
 8001410:	40020400 	.word	0x40020400

08001414 <sysValinit>:

// user custom functions


// init startup value at boot
void sysValinit(void) {
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	sysCounter.main_ms_counter = 0;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <sysValinit+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	801a      	strh	r2, [r3, #0]
	sysCounter.prev_LTEtimeout = 0;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <sysValinit+0x40>)
 8001420:	2200      	movs	r2, #0
 8001422:	805a      	strh	r2, [r3, #2]
	sysCounter.prev_ERRORtime = 0;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <sysValinit+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	809a      	strh	r2, [r3, #4]
	sysCounter.rebootCount = 0;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <sysValinit+0x40>)
 800142c:	2200      	movs	r2, #0
 800142e:	721a      	strb	r2, [r3, #8]

	sysCounter.CMDrespTime = 1000;	// 1sec.
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <sysValinit+0x40>)
 8001432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001436:	815a      	strh	r2, [r3, #10]

	sysFlag.LTE_CMD_Send = 0;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <sysValinit+0x44>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
	sysFlag.LTE_INIT_ERROR = 0;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <sysValinit+0x44>)
 8001440:	2200      	movs	r2, #0
 8001442:	705a      	strb	r2, [r3, #1]
	sysFlag.LTE_ERROR = 0;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <sysValinit+0x44>)
 8001446:	2200      	movs	r2, #0
 8001448:	709a      	strb	r2, [r3, #2]
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	20000b4c 	.word	0x20000b4c
 8001458:	20000b58 	.word	0x20000b58

0800145c <sensorValInit>:


// init sensor variable handle
// set/clear buffer array
void sensorValInit(void) {
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	SENSOR.COMPID[0] = '\0';
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <sensorValInit+0x60>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	SENSOR.dateStamp[0] = '\0';
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <sensorValInit+0x60>)
 8001468:	2200      	movs	r2, #0
 800146a:	711a      	strb	r2, [r3, #4]
	SENSOR.dateStamp[0] = '\0';
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <sensorValInit+0x60>)
 800146e:	2200      	movs	r2, #0
 8001470:	711a      	strb	r2, [r3, #4]
	SENSOR.X[0] = '\0';
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <sensorValInit+0x60>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	SENSOR.Y[0] = '\0';
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <sensorValInit+0x60>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	SENSOR.Z[0] = '\0';
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <sensorValInit+0x60>)
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SENSOR.Huim[0] = '\0';
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <sensorValInit+0x60>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	SENSOR.Temp[0] = '\0';
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <sensorValInit+0x60>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SENSOR.Alc[0] = '\0';
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <sensorValInit+0x60>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	SENSOR.Carbon[0] = '\0';
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <sensorValInit+0x60>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	SENSOR.AirFlow[0] = '\0';
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <sensorValInit+0x60>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20000b7c 	.word	0x20000b7c

080014c0 <SerialDebug>:


// Send text via USB VCOM port
void SerialDebug(char *msgDebug) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	while(CDC_Transmit_FS((uint8_t *) msgDebug, strlen(msgDebug)) != USBD_OK);
 80014c8:	bf00      	nop
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe fe88 	bl	80001e0 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f008 ff4e 	bl	800a378 <CDC_Transmit_FS>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f3      	bne.n	80014ca <SerialDebug+0xa>
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <SendData_RS485>:


// RS485 Tx [Polling method]
void SendData_RS485(char *msg) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 10);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7fe fe73 	bl	80001e0 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	230a      	movs	r3, #10
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <SendData_RS485+0x24>)
 8001504:	f004 f87d 	bl	8005602 <HAL_UART_Transmit>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000a04 	.word	0x20000a04

08001514 <SendCMD_LTE>:

void SendCMD_LTE(char *msg) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 64);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7fe fe5f 	bl	80001e0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29a      	uxth	r2, r3
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <SendCMD_LTE+0x24>)
 800152c:	f004 f869 	bl	8005602 <HAL_UART_Transmit>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000a48 	.word	0x20000a48

0800153c <HAL_UARTEx_RxEventCallback>:


// UART1/UART2 Rx used DMA
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
	// For LTE module
	if(huart -> Instance == USART2) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_UARTEx_RxEventCallback+0x9c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d11c      	bne.n	800158c <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)Rx2Buff, Rx2Buff_Size);
 8001552:	22ff      	movs	r2, #255	; 0xff
 8001554:	4921      	ldr	r1, [pc, #132]	; (80015dc <HAL_UARTEx_RxEventCallback+0xa0>)
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001558:	f004 f8e5 	bl	8005726 <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(lteComm_MainBuff, 0x00, sizeof(lteComm_MainBuff));				// Clear main buffer
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	2100      	movs	r1, #0
 8001560:	4820      	ldr	r0, [pc, #128]	; (80015e4 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001562:	f009 fb97 	bl	800ac94 <memset>
		memcpy(lteComm_MainBuff, Rx2Buff, Size);								// Copy char from UART buffer -> main buffer
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	461a      	mov	r2, r3
 800156a:	491c      	ldr	r1, [pc, #112]	; (80015dc <HAL_UARTEx_RxEventCallback+0xa0>)
 800156c:	481d      	ldr	r0, [pc, #116]	; (80015e4 <HAL_UARTEx_RxEventCallback+0xa8>)
 800156e:	f009 fb83 	bl	800ac78 <memcpy>
		memset(Rx2Buff, 0x00, sizeof(Rx2Buff));									// Clear UART buffer
 8001572:	22ff      	movs	r2, #255	; 0xff
 8001574:	2100      	movs	r1, #0
 8001576:	4819      	ldr	r0, [pc, #100]	; (80015dc <HAL_UARTEx_RxEventCallback+0xa0>)
 8001578:	f009 fb8c 	bl	800ac94 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_UARTEx_RxEventCallback+0xac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_UARTEx_RxEventCallback+0xac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0208 	bic.w	r2, r2, #8
 800158a:	601a      	str	r2, [r3, #0]
	}

	// For communicate with master
	if(huart -> Instance == USART1) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_UARTEx_RxEventCallback+0xb0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d11c      	bne.n	80015d0 <HAL_UARTEx_RxEventCallback+0x94>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)Rx1Buff, Rx1Buff_Size);
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	4915      	ldr	r1, [pc, #84]	; (80015f0 <HAL_UARTEx_RxEventCallback+0xb4>)
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <HAL_UARTEx_RxEventCallback+0xb8>)
 800159c:	f004 f8c3 	bl	8005726 <HAL_UARTEx_ReceiveToIdle_DMA>

		memset(dataComm_mainBuff, 0x00, sizeof(dataComm_mainBuff));				// Clear main buffer
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	2100      	movs	r1, #0
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <HAL_UARTEx_RxEventCallback+0xbc>)
 80015a6:	f009 fb75 	bl	800ac94 <memset>
		memcpy(dataComm_mainBuff, Rx1Buff, Size);								// Copy char from UART buffer -> main buffer
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4910      	ldr	r1, [pc, #64]	; (80015f0 <HAL_UARTEx_RxEventCallback+0xb4>)
 80015b0:	4811      	ldr	r0, [pc, #68]	; (80015f8 <HAL_UARTEx_RxEventCallback+0xbc>)
 80015b2:	f009 fb61 	bl	800ac78 <memcpy>
		memset(Rx1Buff, 0x00, sizeof(Rx1Buff));									// Clear UART buffer
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	2100      	movs	r1, #0
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <HAL_UARTEx_RxEventCallback+0xb4>)
 80015bc:	f009 fb6a 	bl	800ac94 <memset>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_UARTEx_RxEventCallback+0xc0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_UARTEx_RxEventCallback+0xc0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0208 	bic.w	r2, r2, #8
 80015ce:	601a      	str	r2, [r3, #0]
	}
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40004400 	.word	0x40004400
 80015dc:	20000730 	.word	0x20000730
 80015e0:	20000a48 	.word	0x20000a48
 80015e4:	200008b0 	.word	0x200008b0
 80015e8:	20000aec 	.word	0x20000aec
 80015ec:	40011000 	.word	0x40011000
 80015f0:	200006b0 	.word	0x200006b0
 80015f4:	20000a04 	.word	0x20000a04
 80015f8:	20000830 	.word	0x20000830
 80015fc:	20000a8c 	.word	0x20000a8c

08001600 <findTarget>:


// find target in string
int findTarget(const char *inStr, const char *target) {
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    int i, j;
    for (i = 0; inStr[i] != '\0'; i++) {
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e023      	b.n	8001658 <findTarget+0x58>
        j = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 8001614:	e002      	b.n	800161c <findTarget+0x1c>
            j++;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3301      	adds	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
        while (target[j] != '\0' && inStr[i + j] == target[j]) {
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <findTarget+0x42>
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	4413      	add	r3, r2
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	440b      	add	r3, r1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d0e9      	beq.n	8001616 <findTarget+0x16>
        }
        if (target[j] == '\0') {
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4413      	add	r3, r2
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <findTarget+0x52>
            return 1; // Return 1 if found
 800164e:	2301      	movs	r3, #1
 8001650:	e009      	b.n	8001666 <findTarget+0x66>
    for (i = 0; inStr[i] != '\0'; i++) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1d5      	bne.n	8001610 <findTarget+0x10>
        }
    }
    return 0; // Return 0 if not found
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_TIM_PeriodElapsedCallback>:


// Timer4 call back
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM4) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d105      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x1e>
		sysCounter.main_ms_counter++;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001690:	801a      	strh	r2, [r3, #0]
	}
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40000800 	.word	0x40000800
 80016a4:	20000b4c 	.word	0x20000b4c

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b094      	sub	sp, #80	; 0x50
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	2230      	movs	r2, #48	; 0x30
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f009 faec 	bl	800ac94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <SystemClock_Config+0xc8>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <SystemClock_Config+0xc8>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016da:	6413      	str	r3, [r2, #64]	; 0x40
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <SystemClock_Config+0xc8>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <SystemClock_Config+0xcc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a20      	ldr	r2, [pc, #128]	; (8001774 <SystemClock_Config+0xcc>)
 80016f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <SystemClock_Config+0xcc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001704:	2301      	movs	r3, #1
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170e:	2302      	movs	r3, #2
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001718:	2319      	movs	r3, #25
 800171a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800171c:	2390      	movs	r3, #144	; 0x90
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001720:	2302      	movs	r3, #2
 8001722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001724:	2303      	movs	r3, #3
 8001726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	f107 0320 	add.w	r3, r7, #32
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fe7d 	bl	800442c <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001738:	f000 f960 	bl	80019fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	230f      	movs	r3, #15
 800173e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001740:	2302      	movs	r3, #2
 8001742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2102      	movs	r1, #2
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f8df 	bl	800491c <HAL_RCC_ClockConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001764:	f000 f94a 	bl	80019fc <Error_Handler>
  }
}
 8001768:	bf00      	nop
 800176a:	3750      	adds	r7, #80	; 0x50
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000

08001778 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_TIM4_Init+0x94>)
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <MX_TIM4_Init+0x98>)
 8001798:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <MX_TIM4_Init+0x94>)
 800179c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80017a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_TIM4_Init+0x94>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2-1;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_TIM4_Init+0x94>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_TIM4_Init+0x94>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_TIM4_Init+0x94>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017ba:	4814      	ldr	r0, [pc, #80]	; (800180c <MX_TIM4_Init+0x94>)
 80017bc:	f003 fa8e 	bl	8004cdc <HAL_TIM_Base_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017c6:	f000 f919 	bl	80019fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_TIM4_Init+0x94>)
 80017d8:	f003 fc3a 	bl	8005050 <HAL_TIM_ConfigClockSource>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80017e2:	f000 f90b 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <MX_TIM4_Init+0x94>)
 80017f4:	f003 fe36 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80017fe:	f000 f8fd 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200009bc 	.word	0x200009bc
 8001810:	40000800 	.word	0x40000800

08001814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_USART1_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 800184c:	f003 fe8c 	bl	8005568 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f000 f8d1 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000a04 	.word	0x20000a04
 8001864:	40011000 	.word	0x40011000

08001868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART2_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f003 fe62 	bl	8005568 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 f8a7 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000a48 	.word	0x20000a48
 80018b8:	40004400 	.word	0x40004400

080018bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_DMA_Init+0x68>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <MX_DMA_Init+0x68>)
 80018cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_DMA_Init+0x68>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_DMA_Init+0x68>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <MX_DMA_Init+0x68>)
 80018e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <MX_DMA_Init+0x68>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2010      	movs	r0, #16
 8001900:	f000 fd23 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001904:	2010      	movs	r0, #16
 8001906:	f000 fd3c 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	203a      	movs	r0, #58	; 0x3a
 8001910:	f000 fd1b 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001914:	203a      	movs	r0, #58	; 0x3a
 8001916:	f000 fd34 	bl	8002382 <HAL_NVIC_EnableIRQ>

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <MX_GPIO_Init+0xc8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a2a      	ldr	r2, [pc, #168]	; (80019f0 <MX_GPIO_Init+0xc8>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <MX_GPIO_Init+0xc8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <MX_GPIO_Init+0xc8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <MX_GPIO_Init+0xc8>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <MX_GPIO_Init+0xc8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <MX_GPIO_Init+0xc8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <MX_GPIO_Init+0xc8>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_GPIO_Init+0xc8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001992:	2200      	movs	r2, #0
 8001994:	f240 21e2 	movw	r1, #738	; 0x2e2
 8001998:	4816      	ldr	r0, [pc, #88]	; (80019f4 <MX_GPIO_Init+0xcc>)
 800199a:	f001 fa97 	bl	8002ecc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a4:	4814      	ldr	r0, [pc, #80]	; (80019f8 <MX_GPIO_Init+0xd0>)
 80019a6:	f001 fa91 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB5 PB6 PB7
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80019aa:	f240 23e2 	movw	r3, #738	; 0x2e2
 80019ae:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	4619      	mov	r1, r3
 80019c2:	480c      	ldr	r0, [pc, #48]	; (80019f4 <MX_GPIO_Init+0xcc>)
 80019c4:	f001 f8fe 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_GPIO_Init+0xd0>)
 80019e2:	f001 f8ef 	bl	8002bc4 <HAL_GPIO_Init>

}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020000 	.word	0x40020000

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a00:	b672      	cpsid	i
}
 8001a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <Error_Handler+0x8>

08001a06 <Delimiter>:
////            *(dataOutput+writerPos) = '\0';
////        }
//    }
//}

void Delimiter(char *inputData, const char delims, int index, unsigned int maxIndexSize, unsigned char *dataOutput){
 8001a06:	b480      	push	{r7}
 8001a08:	b08b      	sub	sp, #44	; 0x2c
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	460b      	mov	r3, r1
 8001a14:	72fb      	strb	r3, [r7, #11]
    // Parsed string(char array) to split value by demiliter and output value
    // Argument: ( input data , delimiter/splitter letter , no of extract data , max array size, array to store result)
    unsigned int found = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int strIndex[2] = {0};
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
    unsigned int readerPos = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
    unsigned int loaderPos = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
    unsigned int writerPos = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]

    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	e01c      	b.n	8001a70 <Delimiter+0x6a>

        if(*(inputData+readerPos) == delims || readerPos == maxIndexSize){
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	7afa      	ldrb	r2, [r7, #11]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d003      	beq.n	8001a4c <Delimiter+0x46>
 8001a44:	6a3a      	ldr	r2, [r7, #32]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10e      	bne.n	8001a6a <Delimiter+0x64>
            found++;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3301      	adds	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
            strIndex[0] = strIndex[1]+1;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
            strIndex[1] = (readerPos == maxIndexSize) ? readerPos + 1 : readerPos;
 8001a58:	6a3a      	ldr	r2, [r7, #32]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d102      	bne.n	8001a66 <Delimiter+0x60>
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	3301      	adds	r3, #1
 8001a64:	e000      	b.n	8001a68 <Delimiter+0x62>
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	617b      	str	r3, [r7, #20]
    for(readerPos = 0; readerPos < maxIndexSize && found <= index; readerPos++){
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	6a3a      	ldr	r2, [r7, #32]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d203      	bcs.n	8001a80 <Delimiter+0x7a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d9da      	bls.n	8001a36 <Delimiter+0x30>
        }
    }

    if(found > index){
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d91c      	bls.n	8001ac2 <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	e015      	b.n	8001aba <Delimiter+0xb4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	441a      	add	r2, r3
 8001a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	440b      	add	r3, r1
 8001a9a:	7812      	ldrb	r2, [r2, #0]
 8001a9c:	701a      	strb	r2, [r3, #0]
           writerPos++;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61bb      	str	r3, [r7, #24]
           if((loaderPos > maxIndexSize)||(writerPos > maxIndexSize)){
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d80a      	bhi.n	8001ac2 <Delimiter+0xbc>
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d806      	bhi.n	8001ac2 <Delimiter+0xbc>
        for(loaderPos = strIndex[0]; loaderPos <strIndex[1]; loaderPos++){
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3e5      	bcc.n	8001a8e <Delimiter+0x88>
// to next people if you need to fix it let's do it and thank you (>w<)
//
// Modify by REDWOLF DiGiTAL
// (yep... I'm ignore code performance because I'm not time ;w;)

    if(index == 0) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11c      	bne.n	8001b02 <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e015      	b.n	8001afa <Delimiter+0xf4>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	441a      	add	r2, r3
 8001ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	440b      	add	r3, r1
 8001ada:	7812      	ldrb	r2, [r2, #0]
 8001adc:	701a      	strb	r2, [r3, #0]
           writerPos++;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]

           if((loaderPos > strIndex[0])||(writerPos > strIndex[0])){
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d80a      	bhi.n	8001b02 <Delimiter+0xfc>
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d806      	bhi.n	8001b02 <Delimiter+0xfc>
        for(loaderPos = 0; loaderPos < strIndex[0]; loaderPos++){
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	3301      	adds	r3, #1
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d3e5      	bcc.n	8001ace <Delimiter+0xc8>
               break;
           }
        }
    }

    if(index >= found) {
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d825      	bhi.n	8001b56 <Delimiter+0x150>
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e01b      	b.n	8001b4a <Delimiter+0x144>
           *(dataOutput+writerPos) = *(inputData+loaderPos);
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	441a      	add	r2, r3
 8001b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	440b      	add	r3, r1
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	701a      	strb	r2, [r3, #0]

           if(*(inputData+loaderPos) == '\0' || (loaderPos >= maxIndexSize) || writerPos >= maxIndexSize) {
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d013      	beq.n	8001b56 <Delimiter+0x150>
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d20f      	bcs.n	8001b56 <Delimiter+0x150>
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20b      	bcs.n	8001b56 <Delimiter+0x150>
               break;
           }

           writerPos++;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61bb      	str	r3, [r7, #24]
        for(loaderPos = strIndex[1]+1; *(inputData+loaderPos) != '\0'; loaderPos++){
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	3301      	adds	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1dd      	bne.n	8001b12 <Delimiter+0x10c>
        }
    }
}
 8001b56:	bf00      	nop
 8001b58:	372c      	adds	r7, #44	; 0x2c
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <NMEACRCCal>:
 *  Copy-Distribute-Modify is prohibited
 *
 *  Code created by MangMuang's Elektronik, 15 JULY 2022
 *
 */ // =====================================================
unsigned char NMEACRCCal(const unsigned char *sentenceIn){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
    unsigned char CRCinStr[3] = {0};
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <NMEACRCCal+0xa0>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	81bb      	strh	r3, [r7, #12]
 8001b72:	2300      	movs	r3, #0
 8001b74:	73bb      	strb	r3, [r7, #14]
    unsigned char CRCin = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	77bb      	strb	r3, [r7, #30]
    unsigned char CRCResult = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char* dollarSign;
    char* starSign;
    unsigned int totalSize = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
    dollarSign = strchr((const char *)sentenceIn, '$');
 8001b84:	2124      	movs	r1, #36	; 0x24
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f009 f8ac 	bl	800ace4 <strchr>
 8001b8c:	6178      	str	r0, [r7, #20]
    starSign = strchr((const char *)sentenceIn, '*');
 8001b8e:	212a      	movs	r1, #42	; 0x2a
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f009 f8a7 	bl	800ace4 <strchr>
 8001b96:	6138      	str	r0, [r7, #16]
    totalSize = starSign-dollarSign;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	61bb      	str	r3, [r7, #24]
    strncpy((char *)CRCinStr, starSign + 1, 2);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1c59      	adds	r1, r3, #1
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f009 f8a7 	bl	800acfe <strncpy>
    CRCin = (unsigned char)strtol((char *)CRCinStr, NULL, 16);
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f009 f935 	bl	800ae28 <strtol>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	77bb      	strb	r3, [r7, #30]
    for(unsigned int CalCnt = 1; CalCnt < totalSize; CalCnt++){
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
 8001bc6:	e00b      	b.n	8001be0 <NMEACRCCal+0x7c>
        CRCResult ^= sentenceIn[CalCnt];
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	4413      	add	r3, r2
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bd4:	4053      	eors	r3, r2
 8001bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(unsigned int CalCnt = 1; CalCnt < totalSize; CalCnt++){
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3ef      	bcc.n	8001bc8 <NMEACRCCal+0x64>
    }
    unsigned char CRCCMPResult = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	77fb      	strb	r3, [r7, #31]
    if(CRCin == CRCResult){
 8001bec:	7fba      	ldrb	r2, [r7, #30]
 8001bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d101      	bne.n	8001bfa <NMEACRCCal+0x96>
        CRCCMPResult = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	77fb      	strb	r3, [r7, #31]
    }
    return CRCCMPResult;
 8001bfa:	7ffb      	ldrb	r3, [r7, #31]

}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	0800bbec 	.word	0x0800bbec

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <HAL_MspInit+0x4c>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_MspInit+0x4c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_MspInit+0x4c>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_MspInit+0x4c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <HAL_TIM_Base_MspInit+0x48>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d115      	bne.n	8001c96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	201e      	movs	r0, #30
 8001c8c:	f000 fb5d 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c90:	201e      	movs	r0, #30
 8001c92:	f000 fb76 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_UART_MspInit+0x1c4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d164      	bne.n	8001d94 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b61      	ldr	r3, [pc, #388]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a60      	ldr	r2, [pc, #384]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d14:	2307      	movs	r3, #7
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4855      	ldr	r0, [pc, #340]	; (8001e74 <HAL_UART_MspInit+0x1cc>)
 8001d20:	f000 ff50 	bl	8002bc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d24:	4b54      	ldr	r3, [pc, #336]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d26:	4a55      	ldr	r2, [pc, #340]	; (8001e7c <HAL_UART_MspInit+0x1d4>)
 8001d28:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d2a:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d30:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d32:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d38:	4b4f      	ldr	r3, [pc, #316]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3e:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d44:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d46:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d52:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d66:	4844      	ldr	r0, [pc, #272]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d68:	f000 fb2a 	bl	80023c0 <HAL_DMA_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001d72:	f7ff fe43 	bl	80019fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a3f      	ldr	r2, [pc, #252]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d7c:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <HAL_UART_MspInit+0x1d0>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	2025      	movs	r0, #37	; 0x25
 8001d88:	f000 fadf 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d8c:	2025      	movs	r0, #37	; 0x25
 8001d8e:	f000 faf8 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d92:	e066      	b.n	8001e62 <HAL_UART_MspInit+0x1ba>
  else if(huart->Instance==USART2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a39      	ldr	r2, [pc, #228]	; (8001e80 <HAL_UART_MspInit+0x1d8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d161      	bne.n	8001e62 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a32      	ldr	r2, [pc, #200]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_UART_MspInit+0x1c8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de6:	2307      	movs	r3, #7
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	4820      	ldr	r0, [pc, #128]	; (8001e74 <HAL_UART_MspInit+0x1cc>)
 8001df2:	f000 fee7 	bl	8002bc4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001df8:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <HAL_UART_MspInit+0x1e0>)
 8001dfa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e36:	4813      	ldr	r0, [pc, #76]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e38:	f000 fac2 	bl	80023c0 <HAL_DMA_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001e42:	f7ff fddb 	bl	80019fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_UART_MspInit+0x1dc>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2026      	movs	r0, #38	; 0x26
 8001e58:	f000 fa77 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e5c:	2026      	movs	r0, #38	; 0x26
 8001e5e:	f000 fa90 	bl	8002382 <HAL_NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3730      	adds	r7, #48	; 0x30
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40011000 	.word	0x40011000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	20000a8c 	.word	0x20000a8c
 8001e7c:	40026440 	.word	0x40026440
 8001e80:	40004400 	.word	0x40004400
 8001e84:	20000aec 	.word	0x20000aec
 8001e88:	40026088 	.word	0x40026088

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <NMI_Handler+0x4>

08001e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <MemManage_Handler+0x4>

08001e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed8:	f000 f902 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA1_Stream5_IRQHandler+0x10>)
 8001ee6:	f000 fc03 	bl	80026f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000aec 	.word	0x20000aec

08001ef4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <TIM4_IRQHandler+0x10>)
 8001efa:	f002 ffa1 	bl	8004e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200009bc 	.word	0x200009bc

08001f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <USART1_IRQHandler+0x10>)
 8001f0e:	f003 fc6f 	bl	80057f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000a04 	.word	0x20000a04

08001f1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <USART2_IRQHandler+0x10>)
 8001f22:	f003 fc65 	bl	80057f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000a48 	.word	0x20000a48

08001f30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <DMA2_Stream2_IRQHandler+0x10>)
 8001f36:	f000 fbdb 	bl	80026f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000a8c 	.word	0x20000a8c

08001f44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <OTG_FS_IRQHandler+0x10>)
 8001f4a:	f001 f942 	bl	80031d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200020b8 	.word	0x200020b8

08001f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <_sbrk+0x60>)
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x64>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <_sbrk+0x68>)
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d207      	bcs.n	8001f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f88:	f008 fe4c 	bl	800ac24 <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	220c      	movs	r2, #12
 8001f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	e009      	b.n	8001fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <_sbrk+0x64>)
 8001fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20020000 	.word	0x20020000
 8001fb8:	00000400 	.word	0x00000400
 8001fbc:	20000bd0 	.word	0x20000bd0
 8001fc0:	200027f8 	.word	0x200027f8

08001fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <SystemInit+0x20>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemInit+0x20>)
 8001fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002004:	4c0b      	ldr	r4, [pc, #44]	; (8002034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002012:	f7ff ffd7 	bl	8001fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002016:	f008 fe0b 	bl	800ac30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7fe fee3 	bl	8000de4 <main>
  bx  lr    
 800201e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 800202c:	0800bd90 	.word	0x0800bd90
  ldr r2, =_sbss
 8002030:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002034:	200027f4 	.word	0x200027f4

08002038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <HAL_Init+0x40>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_Init+0x40>)
 8002052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_Init+0x40>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002064:	2003      	movs	r0, #3
 8002066:	f000 f965 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	200f      	movs	r0, #15
 800206c:	f000 f808 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002070:	f7ff fdca 	bl	8001c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f981 	bl	80023a6 <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f000 f945 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008
 8002104:	20000bd4 	.word	0x20000bd4

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000bd4 	.word	0x20000bd4

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008

08002168 <__NVIC_SetPriorityGrouping>:
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022c8:	f3bf 8f4f 	dsb	sy
}
 80022cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <__NVIC_SystemReset+0x24>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022d6:	4904      	ldr	r1, [pc, #16]	; (80022e8 <__NVIC_SystemReset+0x24>)
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_SystemReset+0x28>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022de:	f3bf 8f4f 	dsb	sy
}
 80022e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <__NVIC_SystemReset+0x20>
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	05fa0004 	.word	0x05fa0004

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff78 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff13 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff28 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff78 	bl	800225c <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff47 	bl	8002208 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff1b 	bl	80021cc <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80023a2:	f7ff ff8f 	bl	80022c4 <__NVIC_SystemReset>

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ff9e 	bl	80022f0 <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff fe9c 	bl	8002108 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e099      	b.n	8002510 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fc:	e00f      	b.n	800241e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023fe:	f7ff fe83 	bl	8002108 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b05      	cmp	r3, #5
 800240a:	d908      	bls.n	800241e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e078      	b.n	8002510 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1e8      	bne.n	80023fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_DMA_Init+0x158>)
 8002438:	4013      	ands	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2b04      	cmp	r3, #4
 8002476:	d107      	bne.n	8002488 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4313      	orrs	r3, r2
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f023 0307 	bic.w	r3, r3, #7
 800249e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d117      	bne.n	80024e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00e      	beq.n	80024e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fb01 	bl	8002acc <DMA_CheckFifoParam>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024de:	2301      	movs	r3, #1
 80024e0:	e016      	b.n	8002510 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fab8 	bl	8002a60 <DMA_CalcBaseAndBitshift>
 80024f0:	4603      	mov	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	223f      	movs	r2, #63	; 0x3f
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	f010803f 	.word	0xf010803f

0800251c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_DMA_Start_IT+0x26>
 800253e:	2302      	movs	r3, #2
 8002540:	e040      	b.n	80025c4 <HAL_DMA_Start_IT+0xa8>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d12f      	bne.n	80025b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fa4a 	bl	8002a04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	223f      	movs	r2, #63	; 0x3f
 8002576:	409a      	lsls	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0216 	orr.w	r2, r2, #22
 800258a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0208 	orr.w	r2, r2, #8
 80025a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e005      	b.n	80025c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025be:	2302      	movs	r3, #2
 80025c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025da:	f7ff fd95 	bl	8002108 <HAL_GetTick>
 80025de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d008      	beq.n	80025fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e052      	b.n	80026a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0216 	bic.w	r2, r2, #22
 800260c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <HAL_DMA_Abort+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0208 	bic.w	r2, r2, #8
 800263c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264e:	e013      	b.n	8002678 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002650:	f7ff fd5a 	bl	8002108 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b05      	cmp	r3, #5
 800265c:	d90c      	bls.n	8002678 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2203      	movs	r2, #3
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e015      	b.n	80026a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e4      	bne.n	8002650 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	223f      	movs	r2, #63	; 0x3f
 800268c:	409a      	lsls	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00c      	b.n	80026e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2205      	movs	r2, #5
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026fc:	4b8e      	ldr	r3, [pc, #568]	; (8002938 <HAL_DMA_IRQHandler+0x248>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a8e      	ldr	r2, [pc, #568]	; (800293c <HAL_DMA_IRQHandler+0x24c>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0a9b      	lsrs	r3, r3, #10
 8002708:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2208      	movs	r2, #8
 800271c:	409a      	lsls	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01a      	beq.n	800275c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0204 	bic.w	r2, r2, #4
 8002742:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2208      	movs	r2, #8
 800274a:	409a      	lsls	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2201      	movs	r2, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d012      	beq.n	8002792 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	2201      	movs	r2, #1
 8002780:	409a      	lsls	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	2204      	movs	r2, #4
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	2204      	movs	r2, #4
 80027b6:	409a      	lsls	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2210      	movs	r2, #16
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d043      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d03c      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	2210      	movs	r2, #16
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d018      	beq.n	8002832 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d108      	bne.n	8002820 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d024      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
 800281e:	e01f      	b.n	8002860 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01b      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e016      	b.n	8002860 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0208 	bic.w	r2, r2, #8
 800284e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2220      	movs	r2, #32
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 808f 	beq.w	8002990 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8087 	beq.w	8002990 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2220      	movs	r2, #32
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b05      	cmp	r3, #5
 8002898:	d136      	bne.n	8002908 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0216 	bic.w	r2, r2, #22
 80028a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_DMA_IRQHandler+0x1da>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0208 	bic.w	r2, r2, #8
 80028d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	223f      	movs	r2, #63	; 0x3f
 80028e0:	409a      	lsls	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d07e      	beq.n	80029fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
        }
        return;
 8002906:	e079      	b.n	80029fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01d      	beq.n	8002952 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	2b00      	cmp	r3, #0
 800292a:	d031      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e02c      	b.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000
 800293c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d023      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e01e      	b.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10f      	bne.n	8002980 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0210 	bic.w	r2, r2, #16
 800296e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	2b00      	cmp	r3, #0
 8002996:	d032      	beq.n	80029fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2205      	movs	r2, #5
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3301      	adds	r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d307      	bcc.n	80029d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f2      	bne.n	80029bc <HAL_DMA_IRQHandler+0x2cc>
 80029d6:	e000      	b.n	80029da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e000      	b.n	80029fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80029fc:	bf00      	nop
    }
  }
}
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d108      	bne.n	8002a44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a42:	e007      	b.n	8002a54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	3b10      	subs	r3, #16
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d909      	bls.n	8002aa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a96:	f023 0303 	bic.w	r3, r3, #3
 8002a9a:	1d1a      	adds	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa0:	e007      	b.n	8002ab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	aaaaaaab 	.word	0xaaaaaaab
 8002ac8:	0800bc44 	.word	0x0800bc44

08002acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11f      	bne.n	8002b26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d856      	bhi.n	8002b9a <DMA_CheckFifoParam+0xce>
 8002aec:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <DMA_CheckFifoParam+0x28>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b17 	.word	0x08002b17
 8002afc:	08002b05 	.word	0x08002b05
 8002b00:	08002b9b 	.word	0x08002b9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d046      	beq.n	8002b9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b14:	e043      	b.n	8002b9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b1e:	d140      	bne.n	8002ba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b24:	e03d      	b.n	8002ba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2e:	d121      	bne.n	8002b74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d837      	bhi.n	8002ba6 <DMA_CheckFifoParam+0xda>
 8002b36:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <DMA_CheckFifoParam+0x70>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002b53 	.word	0x08002b53
 8002b44:	08002b4d 	.word	0x08002b4d
 8002b48:	08002b65 	.word	0x08002b65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e030      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d025      	beq.n	8002baa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b62:	e022      	b.n	8002baa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b6c:	d11f      	bne.n	8002bae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b72:	e01c      	b.n	8002bae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d903      	bls.n	8002b82 <DMA_CheckFifoParam+0xb6>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d003      	beq.n	8002b88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b80:	e018      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      break;
 8002b86:	e015      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e00b      	b.n	8002bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e00a      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e008      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e006      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e004      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	e159      	b.n	8002e94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be0:	2201      	movs	r2, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	f040 8148 	bne.w	8002e8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d005      	beq.n	8002c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d130      	bne.n	8002c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 0201 	and.w	r2, r3, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d017      	beq.n	8002cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d123      	bne.n	8002d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	08da      	lsrs	r2, r3, #3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3208      	adds	r2, #8
 8002cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	220f      	movs	r2, #15
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	08da      	lsrs	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3208      	adds	r2, #8
 8002d02:	69b9      	ldr	r1, [r7, #24]
 8002d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0203 	and.w	r2, r3, #3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a2 	beq.w	8002e8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b57      	ldr	r3, [pc, #348]	; (8002eac <HAL_GPIO_Init+0x2e8>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a56      	ldr	r2, [pc, #344]	; (8002eac <HAL_GPIO_Init+0x2e8>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_GPIO_Init+0x2e8>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d66:	4a52      	ldr	r2, [pc, #328]	; (8002eb0 <HAL_GPIO_Init+0x2ec>)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a49      	ldr	r2, [pc, #292]	; (8002eb4 <HAL_GPIO_Init+0x2f0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x202>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <HAL_GPIO_Init+0x2f4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x1fe>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a47      	ldr	r2, [pc, #284]	; (8002ebc <HAL_GPIO_Init+0x2f8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x1fa>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a46      	ldr	r2, [pc, #280]	; (8002ec0 <HAL_GPIO_Init+0x2fc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x1f6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a45      	ldr	r2, [pc, #276]	; (8002ec4 <HAL_GPIO_Init+0x300>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x1f2>
 8002db2:	2304      	movs	r3, #4
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002db6:	2307      	movs	r3, #7
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x204>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd8:	4935      	ldr	r1, [pc, #212]	; (8002eb0 <HAL_GPIO_Init+0x2ec>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de6:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e10:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e34:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5e:	4a1a      	ldr	r2, [pc, #104]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e88:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <HAL_GPIO_Init+0x304>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	f67f aea2 	bls.w	8002be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f10:	887a      	ldrh	r2, [r7, #2]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4013      	ands	r3, r2
 8002f16:	041a      	lsls	r2, r3, #16
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43d9      	mvns	r1, r3
 8002f1c:	887b      	ldrh	r3, [r7, #2]
 8002f1e:	400b      	ands	r3, r1
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f34:	b08f      	sub	sp, #60	; 0x3c
 8002f36:	af0a      	add	r7, sp, #40	; 0x28
 8002f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e10f      	b.n	8003164 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f007 fb52 	bl	800a608 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2203      	movs	r2, #3
 8002f68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fe39 	bl	8006bfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	687e      	ldr	r6, [r7, #4]
 8002f90:	466d      	mov	r5, sp
 8002f92:	f106 0410 	add.w	r4, r6, #16
 8002f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fa6:	1d33      	adds	r3, r6, #4
 8002fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002faa:	6838      	ldr	r0, [r7, #0]
 8002fac:	f003 fd10 	bl	80069d0 <USB_CoreInit>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0d0      	b.n	8003164 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fe27 	bl	8006c1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e04a      	b.n	800306a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	333d      	adds	r3, #61	; 0x3d
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	333c      	adds	r3, #60	; 0x3c
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	b298      	uxth	r0, r3
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3344      	adds	r3, #68	; 0x44
 8003010:	4602      	mov	r2, r0
 8003012:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	3340      	adds	r3, #64	; 0x40
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3348      	adds	r3, #72	; 0x48
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	334c      	adds	r3, #76	; 0x4c
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3354      	adds	r3, #84	; 0x54
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	3301      	adds	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3af      	bcc.n	8002fd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e044      	b.n	8003104 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	3301      	adds	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d3b5      	bcc.n	800307a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	687e      	ldr	r6, [r7, #4]
 8003116:	466d      	mov	r5, sp
 8003118:	f106 0410 	add.w	r4, r6, #16
 800311c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003124:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003128:	e885 0003 	stmia.w	r5, {r0, r1}
 800312c:	1d33      	adds	r3, r6, #4
 800312e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003130:	6838      	ldr	r0, [r7, #0]
 8003132:	f003 fdbf 	bl	8006cb4 <USB_DevInit>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e00d      	b.n	8003164 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f004 ff0e 	bl	8007f7e <USB_DevDisconnect>

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800316c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_PCD_Start+0x1c>
 8003184:	2302      	movs	r3, #2
 8003186:	e020      	b.n	80031ca <HAL_PCD_Start+0x5e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	2b01      	cmp	r3, #1
 8003196:	d109      	bne.n	80031ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800319c:	2b01      	cmp	r3, #1
 800319e:	d005      	beq.n	80031ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fd11 	bl	8006bd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 febe 	bl	8007f3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b08d      	sub	sp, #52	; 0x34
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 ff7c 	bl	80080e6 <USB_GetMode>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 848a 	bne.w	8003b0a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 fee0 	bl	8007fc0 <USB_ReadInterrupts>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8480 	beq.w	8003b08 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f004 fecd 	bl	8007fc0 <USB_ReadInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f002 0202 	and.w	r2, r2, #2
 800323e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f004 febb 	bl	8007fc0 <USB_ReadInterrupts>
 800324a:	4603      	mov	r3, r0
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b10      	cmp	r3, #16
 8003252:	d161      	bne.n	8003318 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0210 	bic.w	r2, r2, #16
 8003262:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	0c5b      	lsrs	r3, r3, #17
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	2b02      	cmp	r3, #2
 800328e:	d124      	bne.n	80032da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d035      	beq.n	8003308 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	6a38      	ldr	r0, [r7, #32]
 80032b0:	f004 fcf2 	bl	8007c98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c0:	441a      	add	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d2:	441a      	add	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
 80032d8:	e016      	b.n	8003308 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	0c5b      	lsrs	r3, r3, #17
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d110      	bne.n	8003308 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032ec:	2208      	movs	r2, #8
 80032ee:	4619      	mov	r1, r3
 80032f0:	6a38      	ldr	r0, [r7, #32]
 80032f2:	f004 fcd1 	bl	8007c98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	6a1a      	ldr	r2, [r3, #32]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003302:	441a      	add	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0210 	orr.w	r2, r2, #16
 8003316:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 fe4f 	bl	8007fc0 <USB_ReadInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003328:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800332c:	f040 80a7 	bne.w	800347e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f004 fe54 	bl	8007fe6 <USB_ReadDevAllOutEpInterrupt>
 800333e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003340:	e099      	b.n	8003476 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 808e 	beq.w	800346a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f004 fe78 	bl	800804e <USB_ReadDevOutEPInterrupt>
 800335e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	2301      	movs	r3, #1
 800337a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800337c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fec2 	bl	8004108 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339a:	461a      	mov	r2, r3
 800339c:	2308      	movs	r3, #8
 800339e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 ff98 	bl	80042d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	2310      	movs	r3, #16
 80033c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d030      	beq.n	8003430 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d109      	bne.n	80033ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	78db      	ldrb	r3, [r3, #3]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d108      	bne.n	800341e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2200      	movs	r2, #0
 8003410:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	b2db      	uxtb	r3, r3
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f007 f9f1 	bl	800a800 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342a:	461a      	mov	r2, r3
 800342c:	2302      	movs	r3, #2
 800342e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	2320      	movs	r3, #32
 800344a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003468:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	3301      	adds	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	f47f af62 	bne.w	8003342 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fd9c 	bl	8007fc0 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003492:	f040 80db 	bne.w	800364c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fdbd 	bl	800801a <USB_ReadDevAllInEpInterrupt>
 80034a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034a6:	e0cd      	b.n	8003644 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80c2 	beq.w	8003638 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 fde3 	bl	800808a <USB_ReadDevInEPInterrupt>
 80034c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d057      	beq.n	8003580 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	2201      	movs	r2, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69f9      	ldr	r1, [r7, #28]
 80034ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f0:	4013      	ands	r3, r2
 80034f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003500:	461a      	mov	r2, r3
 8003502:	2301      	movs	r3, #1
 8003504:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d132      	bne.n	8003574 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	334c      	adds	r3, #76	; 0x4c
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	3348      	adds	r3, #72	; 0x48
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4419      	add	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4403      	add	r3, r0
 8003542:	334c      	adds	r3, #76	; 0x4c
 8003544:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	2b00      	cmp	r3, #0
 800354a:	d113      	bne.n	8003574 <HAL_PCD_IRQHandler+0x3a2>
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3354      	adds	r3, #84	; 0x54
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800356c:	461a      	mov	r2, r3
 800356e:	2101      	movs	r1, #1
 8003570:	f004 fdea 	bl	8008148 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	b2db      	uxtb	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f007 f8c5 	bl	800a70a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003596:	461a      	mov	r2, r3
 8003598:	2308      	movs	r3, #8
 800359a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	461a      	mov	r2, r3
 80035b4:	2310      	movs	r3, #16
 80035b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ce:	461a      	mov	r2, r3
 80035d0:	2340      	movs	r3, #64	; 0x40
 80035d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d023      	beq.n	8003626 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e0:	6a38      	ldr	r0, [r7, #32]
 80035e2:	f003 fccb 	bl	8006f7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	3338      	adds	r3, #56	; 0x38
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	3304      	adds	r3, #4
 80035f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	78db      	ldrb	r3, [r3, #3]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d108      	bne.n	8003614 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	b2db      	uxtb	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f007 f908 	bl	800a824 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003620:	461a      	mov	r2, r3
 8003622:	2302      	movs	r3, #2
 8003624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fcdb 	bl	8003fee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	3301      	adds	r3, #1
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f af2e 	bne.w	80034a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f004 fcb5 	bl	8007fc0 <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800365c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003660:	d122      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800367c:	2b01      	cmp	r3, #1
 800367e:	d108      	bne.n	8003692 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fec2 	bl	8004414 <HAL_PCDEx_LPM_Callback>
 8003690:	e002      	b.n	8003698 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f007 f8a6 	bl	800a7e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 fc87 	bl	8007fc0 <USB_ReadInterrupts>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036bc:	d112      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f007 f862 	bl	800a798 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 fc69 	bl	8007fc0 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	f040 80b7 	bne.w	800386a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2110      	movs	r1, #16
 8003716:	4618      	mov	r0, r3
 8003718:	f003 fc30 	bl	8006f7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371c:	2300      	movs	r3, #0
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003720:	e046      	b.n	80037b0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	461a      	mov	r2, r3
 8003730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003734:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003746:	0151      	lsls	r1, r2, #5
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	440a      	add	r2, r1
 800374c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003750:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003754:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003762:	461a      	mov	r2, r3
 8003764:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003768:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377a:	0151      	lsls	r1, r2, #5
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	440a      	add	r2, r1
 8003780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003784:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003788:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379a:	0151      	lsls	r1, r2, #5
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	440a      	add	r2, r1
 80037a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	3301      	adds	r3, #1
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3b3      	bcc.n	8003722 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e6:	f043 030b 	orr.w	r3, r3, #11
 80037ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fc:	f043 030b 	orr.w	r3, r3, #11
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	e015      	b.n	8003830 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003816:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800381a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382a:	f043 030b 	orr.w	r3, r3, #11
 800382e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003842:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003854:	461a      	mov	r2, r3
 8003856:	f004 fc77 	bl	8008148 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fba6 	bl	8007fc0 <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387e:	d124      	bne.n	80038ca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f004 fc3c 	bl	8008102 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fbf1 	bl	8007076 <USB_GetDevSpeed>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681c      	ldr	r4, [r3, #0]
 80038a0:	f001 f9e8 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 80038a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	4620      	mov	r0, r4
 80038b0:	f003 f8f0 	bl	8006a94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f006 ff50 	bl	800a75a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 fb76 	bl	8007fc0 <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d10a      	bne.n	80038f4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f006 ff2d 	bl	800a73e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f002 0208 	and.w	r2, r2, #8
 80038f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f004 fb61 	bl	8007fc0 <USB_ReadInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d122      	bne.n	800394e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	e014      	b.n	8003944 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	b2db      	uxtb	r3, r3
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fb27 	bl	8003f8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	3301      	adds	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	429a      	cmp	r2, r3
 800394c:	d3e5      	bcc.n	800391a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f004 fb34 	bl	8007fc0 <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003962:	d13b      	bne.n	80039dc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003964:	2301      	movs	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	e02b      	b.n	80039c2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3340      	adds	r3, #64	; 0x40
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d115      	bne.n	80039bc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003990:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003992:	2b00      	cmp	r3, #0
 8003994:	da12      	bge.n	80039bc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	333f      	adds	r3, #63	; 0x3f
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fae8 	bl	8003f8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	3301      	adds	r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d3ce      	bcc.n	800396a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f004 faed 	bl	8007fc0 <USB_ReadInterrupts>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f0:	d155      	bne.n	8003a9e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f2:	2301      	movs	r3, #1
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
 80039f6:	e045      	b.n	8003a84 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d12e      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da2b      	bge.n	8003a7e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a32:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d121      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7a:	6053      	str	r3, [r2, #4]
            break;
 8003a7c:	e007      	b.n	8003a8e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	3301      	adds	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3b4      	bcc.n	80039f8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f004 fa8c 	bl	8007fc0 <USB_ReadInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d10a      	bne.n	8003aca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f006 fec7 	bl	800a848 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f004 fa76 	bl	8007fc0 <USB_ReadInterrupts>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d115      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f006 feb7 	bl	800a864 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	e000      	b.n	8003b0a <HAL_PCD_IRQHandler+0x938>
      return;
 8003b08:	bf00      	nop
    }
  }
}
 8003b0a:	3734      	adds	r7, #52	; 0x34
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_PCD_SetAddress+0x1a>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e013      	b.n	8003b52 <HAL_PCD_SetAddress+0x42>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f004 f9d4 	bl	8007ef0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	4608      	mov	r0, r1
 8003b64:	4611      	mov	r1, r2
 8003b66:	461a      	mov	r2, r3
 8003b68:	4603      	mov	r3, r0
 8003b6a:	70fb      	strb	r3, [r7, #3]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	803b      	strh	r3, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da0f      	bge.n	8003ba0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	3338      	adds	r3, #56	; 0x38
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	705a      	strb	r2, [r3, #1]
 8003b9e:	e00f      	b.n	8003bc0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 020f 	and.w	r2, r3, #15
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bcc:	883a      	ldrh	r2, [r7, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	78ba      	ldrb	r2, [r7, #2]
 8003bd6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d004      	beq.n	8003bea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bea:	78bb      	ldrb	r3, [r7, #2]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d102      	bne.n	8003bf6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_PCD_EP_Open+0xaa>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e00e      	b.n	8003c22 <HAL_PCD_EP_Open+0xc8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68f9      	ldr	r1, [r7, #12]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 fa54 	bl	80070c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c20:	7afb      	ldrb	r3, [r7, #11]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da0f      	bge.n	8003c5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 020f 	and.w	r2, r3, #15
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	3338      	adds	r3, #56	; 0x38
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	3304      	adds	r3, #4
 8003c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	705a      	strb	r2, [r3, #1]
 8003c5c:	e00f      	b.n	8003c7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	f003 020f 	and.w	r2, r3, #15
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4413      	add	r3, r2
 8003c74:	3304      	adds	r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_PCD_EP_Close+0x6e>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e00e      	b.n	8003cb6 <HAL_PCD_EP_Close+0x8c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 fa92 	bl	80071d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cce:	7afb      	ldrb	r3, [r7, #11]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d102      	bne.n	8003d1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d1a:	7afb      	ldrb	r3, [r7, #11]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	f003 fd71 	bl	8007818 <USB_EP0StartXfer>
 8003d36:	e008      	b.n	8003d4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	f003 fb1f 	bl	8007388 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 020f 	and.w	r2, r3, #15
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	460b      	mov	r3, r1
 8003d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d94:	7afb      	ldrb	r3, [r7, #11]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3338      	adds	r3, #56	; 0x38
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc4:	7afb      	ldrb	r3, [r7, #11]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d102      	bne.n	8003dde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dde:	7afb      	ldrb	r3, [r7, #11]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	f003 fd0f 	bl	8007818 <USB_EP0StartXfer>
 8003dfa:	e008      	b.n	8003e0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6979      	ldr	r1, [r7, #20]
 8003e0a:	f003 fabd 	bl	8007388 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 020f 	and.w	r2, r3, #15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d901      	bls.n	8003e36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e050      	b.n	8003ed8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	da0f      	bge.n	8003e5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3338      	adds	r3, #56	; 0x38
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	3304      	adds	r3, #4
 8003e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	705a      	strb	r2, [r3, #1]
 8003e5c:	e00d      	b.n	8003e7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	3304      	adds	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_PCD_EP_SetStall+0x82>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e01e      	b.n	8003ed8 <HAL_PCD_EP_SetStall+0xc0>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f003 ff4d 	bl	8007d48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	b2d9      	uxtb	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f004 f93d 	bl	8008148 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d901      	bls.n	8003efe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e042      	b.n	8003f84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da0f      	bge.n	8003f26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 020f 	and.w	r2, r3, #15
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	3338      	adds	r3, #56	; 0x38
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	705a      	strb	r2, [r3, #1]
 8003f24:	e00f      	b.n	8003f46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_PCD_EP_ClrStall+0x86>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e00e      	b.n	8003f84 <HAL_PCD_EP_ClrStall+0xa4>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f003 ff55 	bl	8007e24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da0c      	bge.n	8003fba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	3338      	adds	r3, #56	; 0x38
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e00c      	b.n	8003fd4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f003 fd74 	bl	8007ac8 <USB_EPStopXfer>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fe4:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b08a      	sub	sp, #40	; 0x28
 8003ff2:	af02      	add	r7, sp, #8
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	3338      	adds	r3, #56	; 0x38
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	3304      	adds	r3, #4
 8004014:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	429a      	cmp	r2, r3
 8004020:	d901      	bls.n	8004026 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06c      	b.n	8004100 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	429a      	cmp	r2, r3
 800403a:	d902      	bls.n	8004042 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3303      	adds	r3, #3
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800404a:	e02b      	b.n	80040a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	699a      	ldr	r2, [r3, #24]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	429a      	cmp	r2, r3
 8004060:	d902      	bls.n	8004068 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3303      	adds	r3, #3
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6919      	ldr	r1, [r3, #16]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004080:	b2db      	uxtb	r3, r3
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4603      	mov	r3, r0
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f003 fdc8 	bl	8007c1c <USB_WritePacket>

    ep->xfer_buff  += len;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	441a      	add	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d809      	bhi.n	80040ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1a      	ldr	r2, [r3, #32]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d203      	bcs.n	80040ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1be      	bne.n	800404c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d811      	bhi.n	80040fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	2201      	movs	r2, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	6939      	ldr	r1, [r7, #16]
 80040f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040fa:	4013      	ands	r3, r2
 80040fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	333c      	adds	r3, #60	; 0x3c
 8004120:	3304      	adds	r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d17b      	bne.n	8004236 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4a61      	ldr	r2, [pc, #388]	; (80042d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	f240 80b9 	bls.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80b3 	beq.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	461a      	mov	r2, r3
 800416c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004170:	6093      	str	r3, [r2, #8]
 8004172:	e0a7      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	2320      	movs	r3, #32
 800418e:	6093      	str	r3, [r2, #8]
 8004190:	e098      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8093 	bne.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4a4b      	ldr	r2, [pc, #300]	; (80042d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d90f      	bls.n	80041c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	e07e      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	0159      	lsls	r1, r3, #5
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	440b      	add	r3, r1
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d114      	bne.n	8004228 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004210:	461a      	mov	r2, r3
 8004212:	2101      	movs	r1, #1
 8004214:	f003 ff98 	bl	8008148 <USB_EP0_OutStart>
 8004218:	e006      	b.n	8004228 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	441a      	add	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f006 fa50 	bl	800a6d4 <HAL_PCD_DataOutStageCallback>
 8004234:	e046      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d124      	bne.n	8004288 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	6093      	str	r3, [r2, #8]
 800425c:	e032      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	461a      	mov	r2, r3
 8004276:	2320      	movs	r3, #32
 8004278:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f006 fa27 	bl	800a6d4 <HAL_PCD_DataOutStageCallback>
 8004286:	e01d      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d114      	bne.n	80042b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042b0:	461a      	mov	r2, r3
 80042b2:	2100      	movs	r1, #0
 80042b4:	f003 ff48 	bl	8008148 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f006 fa08 	bl	800a6d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	4f54300a 	.word	0x4f54300a
 80042d4:	4f54310a 	.word	0x4f54310a

080042d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	333c      	adds	r3, #60	; 0x3c
 80042f0:	3304      	adds	r3, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a15      	ldr	r2, [pc, #84]	; (8004360 <PCD_EP_OutSetupPacket_int+0x88>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d90e      	bls.n	800432c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	461a      	mov	r2, r3
 8004326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f006 f9bf 	bl	800a6b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <PCD_EP_OutSetupPacket_int+0x88>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d90c      	bls.n	8004354 <PCD_EP_OutSetupPacket_int+0x7c>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d108      	bne.n	8004354 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800434c:	461a      	mov	r2, r3
 800434e:	2101      	movs	r1, #1
 8004350:	f003 fefa 	bl	8008148 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	4f54300a 	.word	0x4f54300a

08004364 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
 8004370:	4613      	mov	r3, r2
 8004372:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004382:	883b      	ldrh	r3, [r7, #0]
 8004384:	0419      	lsls	r1, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	430a      	orrs	r2, r1
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
 8004390:	e028      	b.n	80043e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e00d      	b.n	80043c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	3340      	adds	r3, #64	; 0x40
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	4413      	add	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	3301      	adds	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d3ec      	bcc.n	80043a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043cc:	883b      	ldrh	r3, [r7, #0]
 80043ce:	0418      	lsls	r0, r3, #16
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	4302      	orrs	r2, r0
 80043dc:	3340      	adds	r3, #64	; 0x40
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e267      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d075      	beq.n	8004536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444a:	4b88      	ldr	r3, [pc, #544]	; (800466c <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d00c      	beq.n	8004470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004456:	4b85      	ldr	r3, [pc, #532]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d112      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b82      	ldr	r3, [pc, #520]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446e:	d10b      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b7e      	ldr	r3, [pc, #504]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d05b      	beq.n	8004534 <HAL_RCC_OscConfig+0x108>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d157      	bne.n	8004534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e242      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x74>
 8004492:	4b76      	ldr	r3, [pc, #472]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a75      	ldr	r2, [pc, #468]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x98>
 80044aa:	4b70      	ldr	r3, [pc, #448]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6f      	ldr	r2, [pc, #444]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b6d      	ldr	r3, [pc, #436]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6c      	ldr	r2, [pc, #432]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044c4:	4b69      	ldr	r3, [pc, #420]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a68      	ldr	r2, [pc, #416]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b66      	ldr	r3, [pc, #408]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a65      	ldr	r2, [pc, #404]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fd fe10 	bl	8002108 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd fe0c 	bl	8002108 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e207      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b5b      	ldr	r3, [pc, #364]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xc0>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fdfc 	bl	8002108 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd fdf8 	bl	8002108 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1f3      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b51      	ldr	r3, [pc, #324]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0xe8>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004542:	4b4a      	ldr	r3, [pc, #296]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b44      	ldr	r3, [pc, #272]	; (800466c <HAL_RCC_OscConfig+0x240>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b41      	ldr	r3, [pc, #260]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1c7      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b3b      	ldr	r3, [pc, #236]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4937      	ldr	r1, [pc, #220]	; (800466c <HAL_RCC_OscConfig+0x240>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b34      	ldr	r3, [pc, #208]	; (8004670 <HAL_RCC_OscConfig+0x244>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd fdb1 	bl	8002108 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd fdad 	bl	8002108 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1a8      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b2b      	ldr	r3, [pc, #172]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b28      	ldr	r3, [pc, #160]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4925      	ldr	r1, [pc, #148]	; (800466c <HAL_RCC_OscConfig+0x240>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_RCC_OscConfig+0x244>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fd90 	bl	8002108 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fd fd8c 	bl	8002108 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e187      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1b      	ldr	r3, [pc, #108]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d036      	beq.n	8004684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <HAL_RCC_OscConfig+0x248>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fd fd70 	bl	8002108 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462c:	f7fd fd6c 	bl	8002108 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e167      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_OscConfig+0x240>)
 8004640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x200>
 800464a:	e01b      	b.n	8004684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_OscConfig+0x248>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fd fd59 	bl	8002108 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e00e      	b.n	8004678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465a:	f7fd fd55 	bl	8002108 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d907      	bls.n	8004678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e150      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
 800466c:	40023800 	.word	0x40023800
 8004670:	42470000 	.word	0x42470000
 8004674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCC_OscConfig+0x470>)
 800467a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ea      	bne.n	800465a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8097 	beq.w	80047c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b81      	ldr	r3, [pc, #516]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	4b7d      	ldr	r3, [pc, #500]	; (800489c <HAL_RCC_OscConfig+0x470>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	4a7c      	ldr	r2, [pc, #496]	; (800489c <HAL_RCC_OscConfig+0x470>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6413      	str	r3, [r2, #64]	; 0x40
 80046b2:	4b7a      	ldr	r3, [pc, #488]	; (800489c <HAL_RCC_OscConfig+0x470>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c2:	4b77      	ldr	r3, [pc, #476]	; (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d118      	bne.n	8004700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ce:	4b74      	ldr	r3, [pc, #464]	; (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a73      	ldr	r2, [pc, #460]	; (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046da:	f7fd fd15 	bl	8002108 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fd fd11 	bl	8002108 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e10c      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x2ea>
 8004708:	4b64      	ldr	r3, [pc, #400]	; (800489c <HAL_RCC_OscConfig+0x470>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a63      	ldr	r2, [pc, #396]	; (800489c <HAL_RCC_OscConfig+0x470>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	e01c      	b.n	8004750 <HAL_RCC_OscConfig+0x324>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x30c>
 800471e:	4b5f      	ldr	r3, [pc, #380]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	4a5e      	ldr	r2, [pc, #376]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
 800472a:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCC_OscConfig+0x470>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	4a5b      	ldr	r2, [pc, #364]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	6713      	str	r3, [r2, #112]	; 0x70
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0x324>
 8004738:	4b58      	ldr	r3, [pc, #352]	; (800489c <HAL_RCC_OscConfig+0x470>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a57      	ldr	r2, [pc, #348]	; (800489c <HAL_RCC_OscConfig+0x470>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
 8004744:	4b55      	ldr	r3, [pc, #340]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	4a54      	ldr	r2, [pc, #336]	; (800489c <HAL_RCC_OscConfig+0x470>)
 800474a:	f023 0304 	bic.w	r3, r3, #4
 800474e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d015      	beq.n	8004784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fcd6 	bl	8002108 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	e00a      	b.n	8004776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004760:	f7fd fcd2 	bl	8002108 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0cb      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004776:	4b49      	ldr	r3, [pc, #292]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ee      	beq.n	8004760 <HAL_RCC_OscConfig+0x334>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004784:	f7fd fcc0 	bl	8002108 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fd fcbc 	bl	8002108 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0b5      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a2:	4b3e      	ldr	r3, [pc, #248]	; (800489c <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ee      	bne.n	800478c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b4:	4b39      	ldr	r3, [pc, #228]	; (800489c <HAL_RCC_OscConfig+0x470>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	4a38      	ldr	r2, [pc, #224]	; (800489c <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80a1 	beq.w	800490c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ca:	4b34      	ldr	r3, [pc, #208]	; (800489c <HAL_RCC_OscConfig+0x470>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d05c      	beq.n	8004890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d141      	bne.n	8004862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <HAL_RCC_OscConfig+0x478>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fd fc90 	bl	8002108 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fd fc8c 	bl	8002108 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e087      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	4b27      	ldr	r3, [pc, #156]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	3b01      	subs	r3, #1
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	491b      	ldr	r1, [pc, #108]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004834:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <HAL_RCC_OscConfig+0x478>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd fc65 	bl	8002108 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004842:	f7fd fc61 	bl	8002108 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e05c      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004854:	4b11      	ldr	r3, [pc, #68]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x416>
 8004860:	e054      	b.n	800490c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <HAL_RCC_OscConfig+0x478>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fd fc4e 	bl	8002108 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004870:	f7fd fc4a 	bl	8002108 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e045      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_RCC_OscConfig+0x470>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x444>
 800488e:	e03d      	b.n	800490c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e038      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
 800489c:	40023800 	.word	0x40023800
 80048a0:	40007000 	.word	0x40007000
 80048a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x4ec>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d028      	beq.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d121      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d11a      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	3b01      	subs	r3, #1
 80048f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800

0800491c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0cc      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004930:	4b68      	ldr	r3, [pc, #416]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d90c      	bls.n	8004958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b65      	ldr	r3, [pc, #404]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800497a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a52      	ldr	r2, [pc, #328]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d044      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d119      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d003      	beq.n	80049da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e067      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fa:	4b37      	ldr	r3, [pc, #220]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 0203 	bic.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4934      	ldr	r1, [pc, #208]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a0c:	f7fd fb7c 	bl	8002108 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a14:	f7fd fb78 	bl	8002108 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e04f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 020c 	and.w	r2, r3, #12
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d1eb      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d20c      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f821 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490a      	ldr	r1, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd fadc 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023c00 	.word	0x40023c00
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	0800bc2c 	.word	0x0800bc2c
 8004ae0:	20000000 	.word	0x20000000
 8004ae4:	20000004 	.word	0x20000004

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b090      	sub	sp, #64	; 0x40
 8004aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af8:	2300      	movs	r3, #0
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b00:	4b59      	ldr	r3, [pc, #356]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d00d      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x40>
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	f200 80a1 	bhi.w	8004c54 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x34>
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b1a:	e09b      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b20:	e09b      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b22:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b26:	e098      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b28:	4b4f      	ldr	r3, [pc, #316]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b32:	4b4d      	ldr	r3, [pc, #308]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d028      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	2200      	movs	r2, #0
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	627a      	str	r2, [r7, #36]	; 0x24
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b50:	2100      	movs	r1, #0
 8004b52:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b54:	fb03 f201 	mul.w	r2, r3, r1
 8004b58:	2300      	movs	r3, #0
 8004b5a:	fb00 f303 	mul.w	r3, r0, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	4a43      	ldr	r2, [pc, #268]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b62:	fba0 1202 	umull	r1, r2, r0, r2
 8004b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b68:	460a      	mov	r2, r1
 8004b6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b6e:	4413      	add	r3, r2
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	2200      	movs	r2, #0
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	61fa      	str	r2, [r7, #28]
 8004b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b82:	f7fb fb85 	bl	8000290 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8e:	e053      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b90:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	2200      	movs	r2, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	617a      	str	r2, [r7, #20]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ba2:	f04f 0b00 	mov.w	fp, #0
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	465b      	mov	r3, fp
 8004baa:	f04f 0000 	mov.w	r0, #0
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	0159      	lsls	r1, r3, #5
 8004bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb8:	0150      	lsls	r0, r2, #5
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	ebb2 080a 	subs.w	r8, r2, sl
 8004bc2:	eb63 090b 	sbc.w	r9, r3, fp
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bda:	ebb2 0408 	subs.w	r4, r2, r8
 8004bde:	eb63 0509 	sbc.w	r5, r3, r9
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	00eb      	lsls	r3, r5, #3
 8004bec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf0:	00e2      	lsls	r2, r4, #3
 8004bf2:	4614      	mov	r4, r2
 8004bf4:	461d      	mov	r5, r3
 8004bf6:	eb14 030a 	adds.w	r3, r4, sl
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	eb45 030b 	adc.w	r3, r5, fp
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c0e:	4629      	mov	r1, r5
 8004c10:	028b      	lsls	r3, r1, #10
 8004c12:	4621      	mov	r1, r4
 8004c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c18:	4621      	mov	r1, r4
 8004c1a:	028a      	lsls	r2, r1, #10
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	2200      	movs	r2, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	60fa      	str	r2, [r7, #12]
 8004c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c2c:	f7fb fb30 	bl	8000290 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3740      	adds	r7, #64	; 0x40
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	017d7840 	.word	0x017d7840

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000000 	.word	0x20000000

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4903      	ldr	r1, [pc, #12]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	0800bc3c 	.word	0x0800bc3c

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cb8:	f7ff ffdc 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	0800bc3c 	.word	0x0800bc3c

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e041      	b.n	8004d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc ffa8 	bl	8001c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fa88 	bl	8005230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d001      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e044      	b.n	8004e1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_TIM_Base_Start_IT+0xb0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x6c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d013      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x6c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <HAL_TIM_Base_Start_IT+0xb4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x6c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_TIM_Base_Start_IT+0xb8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x6c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_TIM_Base_Start_IT+0xbc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0x6c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <HAL_TIM_Base_Start_IT+0xc0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d111      	bne.n	8004e0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d010      	beq.n	8004e1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0a:	e007      	b.n	8004e1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40014000 	.word	0x40014000

08004e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d122      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d11b      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0202 	mvn.w	r2, #2
 8004e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f9b5 	bl	80051f2 <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f9a7 	bl	80051de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f9b8 	bl	8005206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d122      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0204 	mvn.w	r2, #4
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f98b 	bl	80051f2 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f97d 	bl	80051de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f98e 	bl	8005206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d122      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d11b      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0208 	mvn.w	r2, #8
 8004f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2204      	movs	r2, #4
 8004f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f961 	bl	80051f2 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f953 	bl	80051de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f964 	bl	8005206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0210 	mvn.w	r2, #16
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f937 	bl	80051f2 <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f929 	bl	80051de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f93a 	bl	8005206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d10e      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d107      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0201 	mvn.w	r2, #1
 8004fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc fb58 	bl	8001674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b80      	cmp	r3, #128	; 0x80
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fdc:	2b80      	cmp	r3, #128	; 0x80
 8004fde:	d107      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fab2 	bl	8005554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8ff 	bl	800521a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b20      	cmp	r3, #32
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b20      	cmp	r3, #32
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0220 	mvn.w	r2, #32
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa7c 	bl	8005540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIM_ConfigClockSource+0x1c>
 8005068:	2302      	movs	r3, #2
 800506a:	e0b4      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x186>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800508a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a4:	d03e      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0xd4>
 80050a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050aa:	f200 8087 	bhi.w	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b2:	f000 8086 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x172>
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ba:	d87f      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b70      	cmp	r3, #112	; 0x70
 80050be:	d01a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0xa6>
 80050c0:	2b70      	cmp	r3, #112	; 0x70
 80050c2:	d87b      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d050      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x11a>
 80050c8:	2b60      	cmp	r3, #96	; 0x60
 80050ca:	d877      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b50      	cmp	r3, #80	; 0x50
 80050ce:	d03c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0xfa>
 80050d0:	2b50      	cmp	r3, #80	; 0x50
 80050d2:	d873      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d058      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x13a>
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d86f      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d064      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050e0:	2b30      	cmp	r3, #48	; 0x30
 80050e2:	d86b      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d060      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d867      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05c      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d05a      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050f4:	e062      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6899      	ldr	r1, [r3, #8]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f000 f98d 	bl	8005424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	609a      	str	r2, [r3, #8]
      break;
 8005122:	e04f      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f000 f976 	bl	8005424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005146:	609a      	str	r2, [r3, #8]
      break;
 8005148:	e03c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	461a      	mov	r2, r3
 8005158:	f000 f8ea 	bl	8005330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2150      	movs	r1, #80	; 0x50
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f943 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 8005168:	e02c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	461a      	mov	r2, r3
 8005178:	f000 f909 	bl	800538e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2160      	movs	r1, #96	; 0x60
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f933 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 8005188:	e01c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 f8ca 	bl	8005330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f923 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 80051a8:	e00c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 f91a 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 80051ba:	e003      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
      break;
 80051c0:	e000      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a34      	ldr	r2, [pc, #208]	; (8005314 <TIM_Base_SetConfig+0xe4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00f      	beq.n	8005268 <TIM_Base_SetConfig+0x38>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d00b      	beq.n	8005268 <TIM_Base_SetConfig+0x38>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a31      	ldr	r2, [pc, #196]	; (8005318 <TIM_Base_SetConfig+0xe8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_Base_SetConfig+0x38>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a30      	ldr	r2, [pc, #192]	; (800531c <TIM_Base_SetConfig+0xec>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_Base_SetConfig+0x38>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <TIM_Base_SetConfig+0xf0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d108      	bne.n	800527a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <TIM_Base_SetConfig+0xe4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01b      	beq.n	80052ba <TIM_Base_SetConfig+0x8a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d017      	beq.n	80052ba <TIM_Base_SetConfig+0x8a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a22      	ldr	r2, [pc, #136]	; (8005318 <TIM_Base_SetConfig+0xe8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <TIM_Base_SetConfig+0x8a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a21      	ldr	r2, [pc, #132]	; (800531c <TIM_Base_SetConfig+0xec>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00f      	beq.n	80052ba <TIM_Base_SetConfig+0x8a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a20      	ldr	r2, [pc, #128]	; (8005320 <TIM_Base_SetConfig+0xf0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00b      	beq.n	80052ba <TIM_Base_SetConfig+0x8a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <TIM_Base_SetConfig+0xf4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <TIM_Base_SetConfig+0x8a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <TIM_Base_SetConfig+0xf8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_Base_SetConfig+0x8a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1d      	ldr	r2, [pc, #116]	; (800532c <TIM_Base_SetConfig+0xfc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d108      	bne.n	80052cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a08      	ldr	r2, [pc, #32]	; (8005314 <TIM_Base_SetConfig+0xe4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d103      	bne.n	8005300 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	615a      	str	r2, [r3, #20]
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40010000 	.word	0x40010000
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800

08005330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0201 	bic.w	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f023 030a 	bic.w	r3, r3, #10
 800536c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538e:	b480      	push	{r7}
 8005390:	b087      	sub	sp, #28
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0210 	bic.w	r2, r3, #16
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	031b      	lsls	r3, r3, #12
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	f043 0307 	orr.w	r3, r3, #7
 8005410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800543e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	021a      	lsls	r2, r3, #8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	431a      	orrs	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4313      	orrs	r3, r2
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	609a      	str	r2, [r3, #8]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e050      	b.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1c      	ldr	r2, [pc, #112]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d013      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a16      	ldr	r2, [pc, #88]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a15      	ldr	r2, [pc, #84]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a13      	ldr	r2, [pc, #76]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10c      	bne.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4313      	orrs	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40014000 	.word	0x40014000

08005540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e03f      	b.n	80055fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc fb8a 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2224      	movs	r2, #36	; 0x24
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 ff9b 	bl	80064e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695a      	ldr	r2, [r3, #20]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08a      	sub	sp, #40	; 0x28
 8005606:	af02      	add	r7, sp, #8
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b20      	cmp	r3, #32
 8005620:	d17c      	bne.n	800571c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_UART_Transmit+0x2c>
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e075      	b.n	800571e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_UART_Transmit+0x3e>
 800563c:	2302      	movs	r3, #2
 800563e:	e06e      	b.n	800571e <HAL_UART_Transmit+0x11c>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2221      	movs	r2, #33	; 0x21
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005656:	f7fc fd57 	bl	8002108 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	88fa      	ldrh	r2, [r7, #6]
 8005666:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005670:	d108      	bne.n	8005684 <HAL_UART_Transmit+0x82>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d104      	bne.n	8005684 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	e003      	b.n	800568c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005694:	e02a      	b.n	80056ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	2180      	movs	r1, #128	; 0x80
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fc53 	bl	8005f4c <UART_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e036      	b.n	800571e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	3302      	adds	r3, #2
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	e007      	b.n	80056de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	3301      	adds	r3, #1
 80056dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1cf      	bne.n	8005696 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2140      	movs	r1, #64	; 0x40
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fc23 	bl	8005f4c <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e006      	b.n	800571e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e000      	b.n	800571e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b08c      	sub	sp, #48	; 0x30
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	4613      	mov	r3, r2
 8005732:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b20      	cmp	r3, #32
 800573e:	d152      	bne.n	80057e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e04b      	b.n	80057e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800575a:	2302      	movs	r3, #2
 800575c:	e044      	b.n	80057e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	461a      	mov	r2, r3
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fc58 	bl	8006028 <UART_Start_Receive_DMA>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800577e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005782:	2b00      	cmp	r3, #0
 8005784:	d12c      	bne.n	80057e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	2b01      	cmp	r3, #1
 800578c:	d125      	bne.n	80057da <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	617b      	str	r3, [r7, #20]
   return(result);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f043 0310 	orr.w	r3, r3, #16
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c4:	627a      	str	r2, [r7, #36]	; 0x24
 80057c6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6a39      	ldr	r1, [r7, #32]
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80057d8:	e002      	b.n	80057e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80057e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057e4:	e000      	b.n	80057e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80057e6:	2302      	movs	r3, #2
  }
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3730      	adds	r7, #48	; 0x30
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b0ba      	sub	sp, #232	; 0xe8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800581c:	2300      	movs	r3, #0
 800581e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800582e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <HAL_UART_IRQHandler+0x66>
 8005842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fd8f 	bl	8006372 <UART_Receive_IT>
      return;
 8005854:	e256      	b.n	8005d04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80de 	beq.w	8005a1c <HAL_UART_IRQHandler+0x22c>
 8005860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d106      	bne.n	800587a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005870:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80d1 	beq.w	8005a1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_UART_IRQHandler+0xae>
 8005886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f043 0201 	orr.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_UART_IRQHandler+0xd2>
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0202 	orr.w	r2, r3, #2
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <HAL_UART_IRQHandler+0xf6>
 80058ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f043 0204 	orr.w	r2, r3, #4
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d011      	beq.n	8005916 <HAL_UART_IRQHandler+0x126>
 80058f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d105      	bne.n	800590a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f043 0208 	orr.w	r2, r3, #8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 81ed 	beq.w	8005cfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_UART_IRQHandler+0x14e>
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fd1a 	bl	8006372 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <HAL_UART_IRQHandler+0x17a>
 8005962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005966:	2b00      	cmp	r3, #0
 8005968:	d04f      	beq.n	8005a0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fc22 	bl	80061b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d141      	bne.n	8005a02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3314      	adds	r3, #20
 8005984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1d9      	bne.n	800597e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d013      	beq.n	80059fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	4a7d      	ldr	r2, [pc, #500]	; (8005bcc <HAL_UART_IRQHandler+0x3dc>)
 80059d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fc fe64 	bl	80026ac <HAL_DMA_Abort_IT>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d016      	beq.n	8005a18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059f4:	4610      	mov	r0, r2
 80059f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	e00e      	b.n	8005a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f9a4 	bl	8005d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	e00a      	b.n	8005a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f9a0 	bl	8005d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	e006      	b.n	8005a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f99c 	bl	8005d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a16:	e170      	b.n	8005cfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	bf00      	nop
    return;
 8005a1a:	e16e      	b.n	8005cfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	f040 814a 	bne.w	8005cba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8143 	beq.w	8005cba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 813c 	beq.w	8005cba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	f040 80b4 	bne.w	8005bd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 8140 	beq.w	8005cfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a86:	429a      	cmp	r2, r3
 8005a88:	f080 8139 	bcs.w	8005cfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9e:	f000 8088 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1d9      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3314      	adds	r3, #20
 8005af4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e1      	bne.n	8005aee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3314      	adds	r3, #20
 8005b30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e3      	bne.n	8005b2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b82:	f023 0310 	bic.w	r3, r3, #16
 8005b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b94:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e3      	bne.n	8005b70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fc fd0d 	bl	80025cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fb fcba 	bl	800153c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bc8:	e099      	b.n	8005cfe <HAL_UART_IRQHandler+0x50e>
 8005bca:	bf00      	nop
 8005bcc:	0800627b 	.word	0x0800627b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 808b 	beq.w	8005d02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8086 	beq.w	8005d02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c1a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e3      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c52:	633a      	str	r2, [r7, #48]	; 0x30
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e3      	bne.n	8005c2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0310 	bic.w	r3, r3, #16
 8005c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c98:	61fa      	str	r2, [r7, #28]
 8005c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e3      	bne.n	8005c74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fb fc42 	bl	800153c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cb8:	e023      	b.n	8005d02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d009      	beq.n	8005cda <HAL_UART_IRQHandler+0x4ea>
 8005cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fae5 	bl	80062a2 <UART_Transmit_IT>
    return;
 8005cd8:	e014      	b.n	8005d04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00e      	beq.n	8005d04 <HAL_UART_IRQHandler+0x514>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d008      	beq.n	8005d04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fb25 	bl	8006342 <UART_EndTransmit_IT>
    return;
 8005cf8:	e004      	b.n	8005d04 <HAL_UART_IRQHandler+0x514>
    return;
 8005cfa:	bf00      	nop
 8005cfc:	e002      	b.n	8005d04 <HAL_UART_IRQHandler+0x514>
      return;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <HAL_UART_IRQHandler+0x514>
      return;
 8005d02:	bf00      	nop
  }
}
 8005d04:	37e8      	adds	r7, #232	; 0xe8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop

08005d0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b09c      	sub	sp, #112	; 0x70
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d172      	bne.n	8005e5e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005da0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e5      	bne.n	8005d7e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3314      	adds	r3, #20
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8005dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3314      	adds	r3, #20
 8005dd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005dd2:	647a      	str	r2, [r7, #68]	; 0x44
 8005dd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e5      	bne.n	8005db2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3314      	adds	r3, #20
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	623b      	str	r3, [r7, #32]
   return(result);
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8005dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3314      	adds	r3, #20
 8005e04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e06:	633a      	str	r2, [r7, #48]	; 0x30
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e5      	bne.n	8005de6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d119      	bne.n	8005e5e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f023 0310 	bic.w	r3, r3, #16
 8005e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e4a:	61fa      	str	r2, [r7, #28]
 8005e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	69b9      	ldr	r1, [r7, #24]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	617b      	str	r3, [r7, #20]
   return(result);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d106      	bne.n	8005e74 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e6e:	f7fb fb65 	bl	800153c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e72:	e002      	b.n	8005e7a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005e74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e76:	f7ff ff53 	bl	8005d20 <HAL_UART_RxCpltCallback>
}
 8005e7a:	bf00      	nop
 8005e7c:	3770      	adds	r7, #112	; 0x70
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d108      	bne.n	8005eaa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7fb fb4a 	bl	800153c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ea8:	e002      	b.n	8005eb0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff ff42 	bl	8005d34 <HAL_UART_RxHalfCpltCallback>
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed4:	2b80      	cmp	r3, #128	; 0x80
 8005ed6:	bf0c      	ite	eq
 8005ed8:	2301      	moveq	r3, #1
 8005eda:	2300      	movne	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b21      	cmp	r3, #33	; 0x21
 8005eea:	d108      	bne.n	8005efe <UART_DMAError+0x46>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ef8:	68b8      	ldr	r0, [r7, #8]
 8005efa:	f000 f933 	bl	8006164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b22      	cmp	r3, #34	; 0x22
 8005f1e:	d108      	bne.n	8005f32 <UART_DMAError+0x7a>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f2c:	68b8      	ldr	r0, [r7, #8]
 8005f2e:	f000 f941 	bl	80061b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f043 0210 	orr.w	r2, r3, #16
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f3e:	68b8      	ldr	r0, [r7, #8]
 8005f40:	f7ff ff02 	bl	8005d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b090      	sub	sp, #64	; 0x40
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5c:	e050      	b.n	8006000 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d04c      	beq.n	8006000 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f6c:	f7fc f8cc 	bl	8002108 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d241      	bcs.n	8006000 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f9c:	637a      	str	r2, [r7, #52]	; 0x34
 8005f9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e5      	bne.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3314      	adds	r3, #20
 8005fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fd0:	623a      	str	r2, [r7, #32]
 8005fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e00f      	b.n	8006020 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4013      	ands	r3, r2
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	429a      	cmp	r2, r3
 800600e:	bf0c      	ite	eq
 8006010:	2301      	moveq	r3, #1
 8006012:	2300      	movne	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	429a      	cmp	r2, r3
 800601c:	d09f      	beq.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3740      	adds	r7, #64	; 0x40
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b098      	sub	sp, #96	; 0x60
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	88fa      	ldrh	r2, [r7, #6]
 8006040:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2222      	movs	r2, #34	; 0x22
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	4a40      	ldr	r2, [pc, #256]	; (8006158 <UART_Start_Receive_DMA+0x130>)
 8006056:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	4a3f      	ldr	r2, [pc, #252]	; (800615c <UART_Start_Receive_DMA+0x134>)
 800605e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	4a3e      	ldr	r2, [pc, #248]	; (8006160 <UART_Start_Receive_DMA+0x138>)
 8006066:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	2200      	movs	r2, #0
 800606e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006070:	f107 0308 	add.w	r3, r7, #8
 8006074:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3304      	adds	r3, #4
 8006080:	4619      	mov	r1, r3
 8006082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	f7fc fa48 	bl	800251c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d019      	beq.n	80060e6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	330c      	adds	r3, #12
 80060d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80060d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80060e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e5      	bne.n	80060b2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	657b      	str	r3, [r7, #84]	; 0x54
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006106:	63ba      	str	r2, [r7, #56]	; 0x38
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800610c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e5      	bne.n	80060e6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3314      	adds	r3, #20
 8006120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	617b      	str	r3, [r7, #20]
   return(result);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006130:	653b      	str	r3, [r7, #80]	; 0x50
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800613a:	627a      	str	r2, [r7, #36]	; 0x24
 800613c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6a39      	ldr	r1, [r7, #32]
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	61fb      	str	r3, [r7, #28]
   return(result);
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3760      	adds	r7, #96	; 0x60
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	08005d5d 	.word	0x08005d5d
 800615c:	08005e83 	.word	0x08005e83
 8006160:	08005eb9 	.word	0x08005eb9

08006164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b089      	sub	sp, #36	; 0x24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	60bb      	str	r3, [r7, #8]
   return(result);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006182:	61fb      	str	r3, [r7, #28]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	61ba      	str	r2, [r7, #24]
 800618e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6979      	ldr	r1, [r7, #20]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	613b      	str	r3, [r7, #16]
   return(result);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e5      	bne.n	800616c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80061a8:	bf00      	nop
 80061aa:	3724      	adds	r7, #36	; 0x24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b095      	sub	sp, #84	; 0x54
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061dc:	643a      	str	r2, [r7, #64]	; 0x40
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e5      	bne.n	80061bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3314      	adds	r3, #20
 80061f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	64bb      	str	r3, [r7, #72]	; 0x48
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3314      	adds	r3, #20
 800620e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e5      	bne.n	80061f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	2b01      	cmp	r3, #1
 800622a:	d119      	bne.n	8006260 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	60bb      	str	r3, [r7, #8]
   return(result);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f023 0310 	bic.w	r3, r3, #16
 8006242:	647b      	str	r3, [r7, #68]	; 0x44
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800624c:	61ba      	str	r2, [r7, #24]
 800624e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6979      	ldr	r1, [r7, #20]
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	613b      	str	r3, [r7, #16]
   return(result);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800626e:	bf00      	nop
 8006270:	3754      	adds	r7, #84	; 0x54
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fd57 	bl	8005d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b21      	cmp	r3, #33	; 0x21
 80062b4:	d13e      	bne.n	8006334 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d114      	bne.n	80062ea <UART_Transmit_IT+0x48>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d110      	bne.n	80062ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	1c9a      	adds	r2, r3, #2
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	621a      	str	r2, [r3, #32]
 80062e8:	e008      	b.n	80062fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6211      	str	r1, [r2, #32]
 80062f4:	781a      	ldrb	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29b      	uxth	r3, r3
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4619      	mov	r1, r3
 800630a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10f      	bne.n	8006330 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800631e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800632e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	e000      	b.n	8006336 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006334:	2302      	movs	r3, #2
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006358:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fcd2 	bl	8005d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b08c      	sub	sp, #48	; 0x30
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b22      	cmp	r3, #34	; 0x22
 8006384:	f040 80ab 	bne.w	80064de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006390:	d117      	bne.n	80063c2 <UART_Receive_IT+0x50>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d113      	bne.n	80063c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
 80063c0:	e026      	b.n	8006410 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d4:	d007      	beq.n	80063e6 <UART_Receive_IT+0x74>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <UART_Receive_IT+0x82>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	e008      	b.n	8006406 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006400:	b2da      	uxtb	r2, r3
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4619      	mov	r1, r3
 800641e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006420:	2b00      	cmp	r3, #0
 8006422:	d15a      	bne.n	80064da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0220 	bic.w	r2, r2, #32
 8006432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006442:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	2b01      	cmp	r3, #1
 8006462:	d135      	bne.n	80064d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	613b      	str	r3, [r7, #16]
   return(result);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f023 0310 	bic.w	r3, r3, #16
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	623a      	str	r2, [r7, #32]
 800648c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	69f9      	ldr	r1, [r7, #28]
 8006490:	6a3a      	ldr	r2, [r7, #32]
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	61bb      	str	r3, [r7, #24]
   return(result);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d10a      	bne.n	80064c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7fb f837 	bl	800153c <HAL_UARTEx_RxEventCallback>
 80064ce:	e002      	b.n	80064d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fc25 	bl	8005d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	e002      	b.n	80064e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	e000      	b.n	80064e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064de:	2302      	movs	r3, #2
  }
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3730      	adds	r7, #48	; 0x30
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064ec:	b0c0      	sub	sp, #256	; 0x100
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006504:	68d9      	ldr	r1, [r3, #12]
 8006506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	ea40 0301 	orr.w	r3, r0, r1
 8006510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	431a      	orrs	r2, r3
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	431a      	orrs	r2, r3
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006540:	f021 010c 	bic.w	r1, r1, #12
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800654e:	430b      	orrs	r3, r1
 8006550:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006562:	6999      	ldr	r1, [r3, #24]
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	ea40 0301 	orr.w	r3, r0, r1
 800656e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b8f      	ldr	r3, [pc, #572]	; (80067b4 <UART_SetConfig+0x2cc>)
 8006578:	429a      	cmp	r2, r3
 800657a:	d005      	beq.n	8006588 <UART_SetConfig+0xa0>
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b8d      	ldr	r3, [pc, #564]	; (80067b8 <UART_SetConfig+0x2d0>)
 8006584:	429a      	cmp	r2, r3
 8006586:	d104      	bne.n	8006592 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006588:	f7fe fb94 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 800658c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006590:	e003      	b.n	800659a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006592:	f7fe fb7b 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8006596:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a4:	f040 810c 	bne.w	80067c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065ba:	4622      	mov	r2, r4
 80065bc:	462b      	mov	r3, r5
 80065be:	1891      	adds	r1, r2, r2
 80065c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80065c2:	415b      	adcs	r3, r3
 80065c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065ca:	4621      	mov	r1, r4
 80065cc:	eb12 0801 	adds.w	r8, r2, r1
 80065d0:	4629      	mov	r1, r5
 80065d2:	eb43 0901 	adc.w	r9, r3, r1
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ea:	4690      	mov	r8, r2
 80065ec:	4699      	mov	r9, r3
 80065ee:	4623      	mov	r3, r4
 80065f0:	eb18 0303 	adds.w	r3, r8, r3
 80065f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065f8:	462b      	mov	r3, r5
 80065fa:	eb49 0303 	adc.w	r3, r9, r3
 80065fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800660e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006612:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006616:	460b      	mov	r3, r1
 8006618:	18db      	adds	r3, r3, r3
 800661a:	653b      	str	r3, [r7, #80]	; 0x50
 800661c:	4613      	mov	r3, r2
 800661e:	eb42 0303 	adc.w	r3, r2, r3
 8006622:	657b      	str	r3, [r7, #84]	; 0x54
 8006624:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006628:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800662c:	f7f9 fe30 	bl	8000290 <__aeabi_uldivmod>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4b61      	ldr	r3, [pc, #388]	; (80067bc <UART_SetConfig+0x2d4>)
 8006636:	fba3 2302 	umull	r2, r3, r3, r2
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	011c      	lsls	r4, r3, #4
 800663e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006642:	2200      	movs	r2, #0
 8006644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006648:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800664c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006650:	4642      	mov	r2, r8
 8006652:	464b      	mov	r3, r9
 8006654:	1891      	adds	r1, r2, r2
 8006656:	64b9      	str	r1, [r7, #72]	; 0x48
 8006658:	415b      	adcs	r3, r3
 800665a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800665c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006660:	4641      	mov	r1, r8
 8006662:	eb12 0a01 	adds.w	sl, r2, r1
 8006666:	4649      	mov	r1, r9
 8006668:	eb43 0b01 	adc.w	fp, r3, r1
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006678:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800667c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006680:	4692      	mov	sl, r2
 8006682:	469b      	mov	fp, r3
 8006684:	4643      	mov	r3, r8
 8006686:	eb1a 0303 	adds.w	r3, sl, r3
 800668a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800668e:	464b      	mov	r3, r9
 8006690:	eb4b 0303 	adc.w	r3, fp, r3
 8006694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066ac:	460b      	mov	r3, r1
 80066ae:	18db      	adds	r3, r3, r3
 80066b0:	643b      	str	r3, [r7, #64]	; 0x40
 80066b2:	4613      	mov	r3, r2
 80066b4:	eb42 0303 	adc.w	r3, r2, r3
 80066b8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066c2:	f7f9 fde5 	bl	8000290 <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4611      	mov	r1, r2
 80066cc:	4b3b      	ldr	r3, [pc, #236]	; (80067bc <UART_SetConfig+0x2d4>)
 80066ce:	fba3 2301 	umull	r2, r3, r3, r1
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2264      	movs	r2, #100	; 0x64
 80066d6:	fb02 f303 	mul.w	r3, r2, r3
 80066da:	1acb      	subs	r3, r1, r3
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066e2:	4b36      	ldr	r3, [pc, #216]	; (80067bc <UART_SetConfig+0x2d4>)
 80066e4:	fba3 2302 	umull	r2, r3, r3, r2
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066f0:	441c      	add	r4, r3
 80066f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006700:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006704:	4642      	mov	r2, r8
 8006706:	464b      	mov	r3, r9
 8006708:	1891      	adds	r1, r2, r2
 800670a:	63b9      	str	r1, [r7, #56]	; 0x38
 800670c:	415b      	adcs	r3, r3
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006714:	4641      	mov	r1, r8
 8006716:	1851      	adds	r1, r2, r1
 8006718:	6339      	str	r1, [r7, #48]	; 0x30
 800671a:	4649      	mov	r1, r9
 800671c:	414b      	adcs	r3, r1
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800672c:	4659      	mov	r1, fp
 800672e:	00cb      	lsls	r3, r1, #3
 8006730:	4651      	mov	r1, sl
 8006732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006736:	4651      	mov	r1, sl
 8006738:	00ca      	lsls	r2, r1, #3
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	4603      	mov	r3, r0
 8006740:	4642      	mov	r2, r8
 8006742:	189b      	adds	r3, r3, r2
 8006744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006748:	464b      	mov	r3, r9
 800674a:	460a      	mov	r2, r1
 800674c:	eb42 0303 	adc.w	r3, r2, r3
 8006750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006760:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006768:	460b      	mov	r3, r1
 800676a:	18db      	adds	r3, r3, r3
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
 800676e:	4613      	mov	r3, r2
 8006770:	eb42 0303 	adc.w	r3, r2, r3
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800677a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800677e:	f7f9 fd87 	bl	8000290 <__aeabi_uldivmod>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4b0d      	ldr	r3, [pc, #52]	; (80067bc <UART_SetConfig+0x2d4>)
 8006788:	fba3 1302 	umull	r1, r3, r3, r2
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	2164      	movs	r1, #100	; 0x64
 8006790:	fb01 f303 	mul.w	r3, r1, r3
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	3332      	adds	r3, #50	; 0x32
 800679a:	4a08      	ldr	r2, [pc, #32]	; (80067bc <UART_SetConfig+0x2d4>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	f003 0207 	and.w	r2, r3, #7
 80067a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4422      	add	r2, r4
 80067ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067b0:	e105      	b.n	80069be <UART_SetConfig+0x4d6>
 80067b2:	bf00      	nop
 80067b4:	40011000 	.word	0x40011000
 80067b8:	40011400 	.word	0x40011400
 80067bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067d2:	4642      	mov	r2, r8
 80067d4:	464b      	mov	r3, r9
 80067d6:	1891      	adds	r1, r2, r2
 80067d8:	6239      	str	r1, [r7, #32]
 80067da:	415b      	adcs	r3, r3
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
 80067de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067e2:	4641      	mov	r1, r8
 80067e4:	1854      	adds	r4, r2, r1
 80067e6:	4649      	mov	r1, r9
 80067e8:	eb43 0501 	adc.w	r5, r3, r1
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	00eb      	lsls	r3, r5, #3
 80067f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067fa:	00e2      	lsls	r2, r4, #3
 80067fc:	4614      	mov	r4, r2
 80067fe:	461d      	mov	r5, r3
 8006800:	4643      	mov	r3, r8
 8006802:	18e3      	adds	r3, r4, r3
 8006804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006808:	464b      	mov	r3, r9
 800680a:	eb45 0303 	adc.w	r3, r5, r3
 800680e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800681e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800682e:	4629      	mov	r1, r5
 8006830:	008b      	lsls	r3, r1, #2
 8006832:	4621      	mov	r1, r4
 8006834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006838:	4621      	mov	r1, r4
 800683a:	008a      	lsls	r2, r1, #2
 800683c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006840:	f7f9 fd26 	bl	8000290 <__aeabi_uldivmod>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4b60      	ldr	r3, [pc, #384]	; (80069cc <UART_SetConfig+0x4e4>)
 800684a:	fba3 2302 	umull	r2, r3, r3, r2
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	011c      	lsls	r4, r3, #4
 8006852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006856:	2200      	movs	r2, #0
 8006858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800685c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006860:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006864:	4642      	mov	r2, r8
 8006866:	464b      	mov	r3, r9
 8006868:	1891      	adds	r1, r2, r2
 800686a:	61b9      	str	r1, [r7, #24]
 800686c:	415b      	adcs	r3, r3
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006874:	4641      	mov	r1, r8
 8006876:	1851      	adds	r1, r2, r1
 8006878:	6139      	str	r1, [r7, #16]
 800687a:	4649      	mov	r1, r9
 800687c:	414b      	adcs	r3, r1
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800688c:	4659      	mov	r1, fp
 800688e:	00cb      	lsls	r3, r1, #3
 8006890:	4651      	mov	r1, sl
 8006892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006896:	4651      	mov	r1, sl
 8006898:	00ca      	lsls	r2, r1, #3
 800689a:	4610      	mov	r0, r2
 800689c:	4619      	mov	r1, r3
 800689e:	4603      	mov	r3, r0
 80068a0:	4642      	mov	r2, r8
 80068a2:	189b      	adds	r3, r3, r2
 80068a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068a8:	464b      	mov	r3, r9
 80068aa:	460a      	mov	r2, r1
 80068ac:	eb42 0303 	adc.w	r3, r2, r3
 80068b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068cc:	4649      	mov	r1, r9
 80068ce:	008b      	lsls	r3, r1, #2
 80068d0:	4641      	mov	r1, r8
 80068d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068d6:	4641      	mov	r1, r8
 80068d8:	008a      	lsls	r2, r1, #2
 80068da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068de:	f7f9 fcd7 	bl	8000290 <__aeabi_uldivmod>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	4b39      	ldr	r3, [pc, #228]	; (80069cc <UART_SetConfig+0x4e4>)
 80068e8:	fba3 1302 	umull	r1, r3, r3, r2
 80068ec:	095b      	lsrs	r3, r3, #5
 80068ee:	2164      	movs	r1, #100	; 0x64
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	3332      	adds	r3, #50	; 0x32
 80068fa:	4a34      	ldr	r2, [pc, #208]	; (80069cc <UART_SetConfig+0x4e4>)
 80068fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006900:	095b      	lsrs	r3, r3, #5
 8006902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006906:	441c      	add	r4, r3
 8006908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690c:	2200      	movs	r2, #0
 800690e:	673b      	str	r3, [r7, #112]	; 0x70
 8006910:	677a      	str	r2, [r7, #116]	; 0x74
 8006912:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006916:	4642      	mov	r2, r8
 8006918:	464b      	mov	r3, r9
 800691a:	1891      	adds	r1, r2, r2
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	415b      	adcs	r3, r3
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006926:	4641      	mov	r1, r8
 8006928:	1851      	adds	r1, r2, r1
 800692a:	6039      	str	r1, [r7, #0]
 800692c:	4649      	mov	r1, r9
 800692e:	414b      	adcs	r3, r1
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800693e:	4659      	mov	r1, fp
 8006940:	00cb      	lsls	r3, r1, #3
 8006942:	4651      	mov	r1, sl
 8006944:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006948:	4651      	mov	r1, sl
 800694a:	00ca      	lsls	r2, r1, #3
 800694c:	4610      	mov	r0, r2
 800694e:	4619      	mov	r1, r3
 8006950:	4603      	mov	r3, r0
 8006952:	4642      	mov	r2, r8
 8006954:	189b      	adds	r3, r3, r2
 8006956:	66bb      	str	r3, [r7, #104]	; 0x68
 8006958:	464b      	mov	r3, r9
 800695a:	460a      	mov	r2, r1
 800695c:	eb42 0303 	adc.w	r3, r2, r3
 8006960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	663b      	str	r3, [r7, #96]	; 0x60
 800696c:	667a      	str	r2, [r7, #100]	; 0x64
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	f04f 0300 	mov.w	r3, #0
 8006976:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800697a:	4649      	mov	r1, r9
 800697c:	008b      	lsls	r3, r1, #2
 800697e:	4641      	mov	r1, r8
 8006980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006984:	4641      	mov	r1, r8
 8006986:	008a      	lsls	r2, r1, #2
 8006988:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800698c:	f7f9 fc80 	bl	8000290 <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <UART_SetConfig+0x4e4>)
 8006996:	fba3 1302 	umull	r1, r3, r3, r2
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2164      	movs	r1, #100	; 0x64
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	3332      	adds	r3, #50	; 0x32
 80069a8:	4a08      	ldr	r2, [pc, #32]	; (80069cc <UART_SetConfig+0x4e4>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	f003 020f 	and.w	r2, r3, #15
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4422      	add	r2, r4
 80069bc:	609a      	str	r2, [r3, #8]
}
 80069be:	bf00      	nop
 80069c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069c4:	46bd      	mov	sp, r7
 80069c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ca:	bf00      	nop
 80069cc:	51eb851f 	.word	0x51eb851f

080069d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069d0:	b084      	sub	sp, #16
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	f107 001c 	add.w	r0, r7, #28
 80069de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d122      	bne.n	8006a2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80069fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d105      	bne.n	8006a22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fbee 	bl	8008204 <USB_CoreReset>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73fb      	strb	r3, [r7, #15]
 8006a2c:	e01a      	b.n	8006a64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fbe2 	bl	8008204 <USB_CoreReset>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
 8006a56:	e005      	b.n	8006a64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10b      	bne.n	8006a82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f043 0206 	orr.w	r2, r3, #6
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f043 0220 	orr.w	r2, r3, #32
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a8e:	b004      	add	sp, #16
 8006a90:	4770      	bx	lr
	...

08006a94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d165      	bne.n	8006b74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4a41      	ldr	r2, [pc, #260]	; (8006bb0 <USB_SetTurnaroundTime+0x11c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d906      	bls.n	8006abe <USB_SetTurnaroundTime+0x2a>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4a40      	ldr	r2, [pc, #256]	; (8006bb4 <USB_SetTurnaroundTime+0x120>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d202      	bcs.n	8006abe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ab8:	230f      	movs	r3, #15
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e062      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4a3c      	ldr	r2, [pc, #240]	; (8006bb4 <USB_SetTurnaroundTime+0x120>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d306      	bcc.n	8006ad4 <USB_SetTurnaroundTime+0x40>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4a3b      	ldr	r2, [pc, #236]	; (8006bb8 <USB_SetTurnaroundTime+0x124>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d202      	bcs.n	8006ad4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ace:	230e      	movs	r3, #14
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	e057      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4a38      	ldr	r2, [pc, #224]	; (8006bb8 <USB_SetTurnaroundTime+0x124>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d306      	bcc.n	8006aea <USB_SetTurnaroundTime+0x56>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4a37      	ldr	r2, [pc, #220]	; (8006bbc <USB_SetTurnaroundTime+0x128>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d202      	bcs.n	8006aea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ae4:	230d      	movs	r3, #13
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e04c      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	4a33      	ldr	r2, [pc, #204]	; (8006bbc <USB_SetTurnaroundTime+0x128>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d306      	bcc.n	8006b00 <USB_SetTurnaroundTime+0x6c>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4a32      	ldr	r2, [pc, #200]	; (8006bc0 <USB_SetTurnaroundTime+0x12c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d802      	bhi.n	8006b00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006afa:	230c      	movs	r3, #12
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	e041      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4a2f      	ldr	r2, [pc, #188]	; (8006bc0 <USB_SetTurnaroundTime+0x12c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d906      	bls.n	8006b16 <USB_SetTurnaroundTime+0x82>
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4a2e      	ldr	r2, [pc, #184]	; (8006bc4 <USB_SetTurnaroundTime+0x130>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d802      	bhi.n	8006b16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b10:	230b      	movs	r3, #11
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e036      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4a2a      	ldr	r2, [pc, #168]	; (8006bc4 <USB_SetTurnaroundTime+0x130>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d906      	bls.n	8006b2c <USB_SetTurnaroundTime+0x98>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4a29      	ldr	r2, [pc, #164]	; (8006bc8 <USB_SetTurnaroundTime+0x134>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d802      	bhi.n	8006b2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b26:	230a      	movs	r3, #10
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	e02b      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4a26      	ldr	r2, [pc, #152]	; (8006bc8 <USB_SetTurnaroundTime+0x134>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d906      	bls.n	8006b42 <USB_SetTurnaroundTime+0xae>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4a25      	ldr	r2, [pc, #148]	; (8006bcc <USB_SetTurnaroundTime+0x138>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d202      	bcs.n	8006b42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b3c:	2309      	movs	r3, #9
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	e020      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4a21      	ldr	r2, [pc, #132]	; (8006bcc <USB_SetTurnaroundTime+0x138>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d306      	bcc.n	8006b58 <USB_SetTurnaroundTime+0xc4>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4a20      	ldr	r2, [pc, #128]	; (8006bd0 <USB_SetTurnaroundTime+0x13c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d802      	bhi.n	8006b58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b52:	2308      	movs	r3, #8
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	e015      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4a1d      	ldr	r2, [pc, #116]	; (8006bd0 <USB_SetTurnaroundTime+0x13c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d906      	bls.n	8006b6e <USB_SetTurnaroundTime+0xda>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4a1c      	ldr	r2, [pc, #112]	; (8006bd4 <USB_SetTurnaroundTime+0x140>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d202      	bcs.n	8006b6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b68:	2307      	movs	r3, #7
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	e00a      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b6e:	2306      	movs	r3, #6
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	e007      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b7a:	2309      	movs	r3, #9
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	e001      	b.n	8006b84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b80:	2309      	movs	r3, #9
 8006b82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	029b      	lsls	r3, r3, #10
 8006b98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	00d8acbf 	.word	0x00d8acbf
 8006bb4:	00e4e1c0 	.word	0x00e4e1c0
 8006bb8:	00f42400 	.word	0x00f42400
 8006bbc:	01067380 	.word	0x01067380
 8006bc0:	011a499f 	.word	0x011a499f
 8006bc4:	01312cff 	.word	0x01312cff
 8006bc8:	014ca43f 	.word	0x014ca43f
 8006bcc:	016e3600 	.word	0x016e3600
 8006bd0:	01a6ab1f 	.word	0x01a6ab1f
 8006bd4:	01e84800 	.word	0x01e84800

08006bd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f043 0201 	orr.w	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d115      	bne.n	8006c6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	f7fb fa68 	bl	8002120 <HAL_Delay>
      ms++;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fa45 	bl	80080e6 <USB_GetMode>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d01e      	beq.n	8006ca0 <USB_SetCurrentMode+0x84>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b31      	cmp	r3, #49	; 0x31
 8006c66:	d9f0      	bls.n	8006c4a <USB_SetCurrentMode+0x2e>
 8006c68:	e01a      	b.n	8006ca0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d115      	bne.n	8006c9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c7c:	2001      	movs	r0, #1
 8006c7e:	f7fb fa4f 	bl	8002120 <HAL_Delay>
      ms++;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3301      	adds	r3, #1
 8006c86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fa2c 	bl	80080e6 <USB_GetMode>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <USB_SetCurrentMode+0x84>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b31      	cmp	r3, #49	; 0x31
 8006c98:	d9f0      	bls.n	8006c7c <USB_SetCurrentMode+0x60>
 8006c9a:	e001      	b.n	8006ca0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e005      	b.n	8006cac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b32      	cmp	r3, #50	; 0x32
 8006ca4:	d101      	bne.n	8006caa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e009      	b.n	8006ce8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	3340      	adds	r3, #64	; 0x40
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	2b0e      	cmp	r3, #14
 8006cec:	d9f2      	bls.n	8006cd4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d11c      	bne.n	8006d2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d02:	f043 0302 	orr.w	r3, r3, #2
 8006d06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8006d2c:	e00b      	b.n	8006d46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d58:	4619      	mov	r1, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d60:	461a      	mov	r2, r3
 8006d62:	680b      	ldr	r3, [r1, #0]
 8006d64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d10c      	bne.n	8006d86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d72:	2100      	movs	r1, #0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f965 	bl	8007044 <USB_SetDevSpeed>
 8006d7a:	e008      	b.n	8006d8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f960 	bl	8007044 <USB_SetDevSpeed>
 8006d84:	e003      	b.n	8006d8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d86:	2103      	movs	r1, #3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f95b 	bl	8007044 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d8e:	2110      	movs	r1, #16
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8f3 	bl	8006f7c <USB_FlushTxFifo>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f91f 	bl	8006fe4 <USB_FlushRxFifo>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db6:	461a      	mov	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	e043      	b.n	8006e62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006df0:	d118      	bne.n	8006e24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	461a      	mov	r2, r3
 8006e06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	e013      	b.n	8006e36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	e008      	b.n	8006e36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	461a      	mov	r2, r3
 8006e32:	2300      	movs	r3, #0
 8006e34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e42:	461a      	mov	r2, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	461a      	mov	r2, r3
 8006e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d3b7      	bcc.n	8006dda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	613b      	str	r3, [r7, #16]
 8006e6e:	e043      	b.n	8006ef8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e86:	d118      	bne.n	8006eba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	e013      	b.n	8006ecc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	e008      	b.n	8006ecc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2300      	movs	r3, #0
 8006eca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed8:	461a      	mov	r2, r3
 8006eda:	2300      	movs	r3, #0
 8006edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	461a      	mov	r2, r3
 8006eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d3b7      	bcc.n	8006e70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d105      	bne.n	8006f34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	f043 0210 	orr.w	r2, r3, #16
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699a      	ldr	r2, [r3, #24]
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <USB_DevInit+0x2c4>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f043 0208 	orr.w	r2, r3, #8
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d107      	bne.n	8006f68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f60:	f043 0304 	orr.w	r3, r3, #4
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f74:	b004      	add	sp, #16
 8006f76:	4770      	bx	lr
 8006f78:	803c3800 	.word	0x803c3800

08006f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <USB_FlushTxFifo+0x64>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d901      	bls.n	8006f9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e01b      	b.n	8006fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	daf2      	bge.n	8006f8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	019b      	lsls	r3, r3, #6
 8006fac:	f043 0220 	orr.w	r2, r3, #32
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4a08      	ldr	r2, [pc, #32]	; (8006fe0 <USB_FlushTxFifo+0x64>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d901      	bls.n	8006fc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e006      	b.n	8006fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d0f0      	beq.n	8006fb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	00030d40 	.word	0x00030d40

08006fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a11      	ldr	r2, [pc, #68]	; (8007040 <USB_FlushRxFifo+0x5c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e018      	b.n	8007034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	daf2      	bge.n	8006ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2210      	movs	r2, #16
 8007012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3301      	adds	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4a08      	ldr	r2, [pc, #32]	; (8007040 <USB_FlushRxFifo+0x5c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d901      	bls.n	8007026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e006      	b.n	8007034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	2b10      	cmp	r3, #16
 8007030:	d0f0      	beq.n	8007014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	00030d40 	.word	0x00030d40

08007044 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b087      	sub	sp, #28
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0306 	and.w	r3, r3, #6
 800708e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007096:	2300      	movs	r3, #0
 8007098:	75fb      	strb	r3, [r7, #23]
 800709a:	e00a      	b.n	80070b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d002      	beq.n	80070a8 <USB_GetDevSpeed+0x32>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d102      	bne.n	80070ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070a8:	2302      	movs	r3, #2
 80070aa:	75fb      	strb	r3, [r7, #23]
 80070ac:	e001      	b.n	80070b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80070ae:	230f      	movs	r3, #15
 80070b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d13a      	bne.n	8007152 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	2101      	movs	r1, #1
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fa:	4313      	orrs	r3, r2
 80070fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d155      	bne.n	80071c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007130:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	059b      	lsls	r3, r3, #22
 8007136:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007138:	4313      	orrs	r3, r2
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	e036      	b.n	80071c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	2101      	movs	r1, #1
 8007164:	fa01 f303 	lsl.w	r3, r1, r3
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007170:	4313      	orrs	r3, r2
 8007172:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d11a      	bne.n	80071c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	791b      	ldrb	r3, [r3, #4]
 80071a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071a6:	430b      	orrs	r3, r1
 80071a8:	4313      	orrs	r3, r2
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d161      	bne.n	80072b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007202:	d11f      	bne.n	8007244 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007222:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007242:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	2101      	movs	r1, #1
 8007256:	fa01 f303 	lsl.w	r3, r1, r3
 800725a:	b29b      	uxth	r3, r3
 800725c:	43db      	mvns	r3, r3
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007264:	4013      	ands	r3, r2
 8007266:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	2101      	movs	r1, #1
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	b29b      	uxth	r3, r3
 8007280:	43db      	mvns	r3, r3
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007288:	4013      	ands	r3, r2
 800728a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	0159      	lsls	r1, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	440b      	add	r3, r1
 80072a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a6:	4619      	mov	r1, r3
 80072a8:	4b35      	ldr	r3, [pc, #212]	; (8007380 <USB_DeactivateEndpoint+0x1b0>)
 80072aa:	4013      	ands	r3, r2
 80072ac:	600b      	str	r3, [r1, #0]
 80072ae:	e060      	b.n	8007372 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072c6:	d11f      	bne.n	8007308 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	0151      	lsls	r1, r2, #5
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	440a      	add	r2, r1
 80072fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007306:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	2101      	movs	r1, #1
 800731a:	fa01 f303 	lsl.w	r3, r1, r3
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	43db      	mvns	r3, r3
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007328:	4013      	ands	r3, r2
 800732a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	2101      	movs	r1, #1
 800733e:	fa01 f303 	lsl.w	r3, r1, r3
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	43db      	mvns	r3, r3
 8007346:	68f9      	ldr	r1, [r7, #12]
 8007348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800734c:	4013      	ands	r3, r2
 800734e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	0159      	lsls	r1, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	440b      	add	r3, r1
 8007366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736a:	4619      	mov	r1, r3
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <USB_DeactivateEndpoint+0x1b4>)
 800736e:	4013      	ands	r3, r2
 8007370:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	ec337800 	.word	0xec337800
 8007384:	eff37800 	.word	0xeff37800

08007388 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	f040 815c 	bne.w	8007662 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d132      	bne.n	8007418 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	440a      	add	r2, r1
 800740c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007410:	0cdb      	lsrs	r3, r3, #19
 8007412:	04db      	lsls	r3, r3, #19
 8007414:	6113      	str	r3, [r2, #16]
 8007416:	e074      	b.n	8007502 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007432:	0cdb      	lsrs	r3, r3, #19
 8007434:	04db      	lsls	r3, r3, #19
 8007436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007452:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007456:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800745a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007468:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6999      	ldr	r1, [r3, #24]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	440b      	add	r3, r1
 8007474:	1e59      	subs	r1, r3, #1
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	fbb1 f3f3 	udiv	r3, r1, r3
 800747e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007480:	4b9d      	ldr	r3, [pc, #628]	; (80076f8 <USB_EPStartXfer+0x370>)
 8007482:	400b      	ands	r3, r1
 8007484:	69b9      	ldr	r1, [r7, #24]
 8007486:	0148      	lsls	r0, r1, #5
 8007488:	69f9      	ldr	r1, [r7, #28]
 800748a:	4401      	add	r1, r0
 800748c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007490:	4313      	orrs	r3, r2
 8007492:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074aa:	69b9      	ldr	r1, [r7, #24]
 80074ac:	0148      	lsls	r0, r1, #5
 80074ae:	69f9      	ldr	r1, [r7, #28]
 80074b0:	4401      	add	r1, r0
 80074b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074b6:	4313      	orrs	r3, r2
 80074b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	791b      	ldrb	r3, [r3, #4]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d11f      	bne.n	8007502 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007500:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d14b      	bne.n	80075a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d009      	beq.n	8007524 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751c:	461a      	mov	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	791b      	ldrb	r3, [r3, #4]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d128      	bne.n	800757e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007538:	2b00      	cmp	r3, #0
 800753a:	d110      	bne.n	800755e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	0151      	lsls	r1, r2, #5
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	440a      	add	r2, r1
 8007552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007556:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	e00f      	b.n	800757e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800757c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	0151      	lsls	r1, r2, #5
 8007590:	69fa      	ldr	r2, [r7, #28]
 8007592:	440a      	add	r2, r1
 8007594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	e133      	b.n	8007808 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	791b      	ldrb	r3, [r3, #4]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d015      	beq.n	80075f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 811b 	beq.w	8007808 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	2101      	movs	r1, #1
 80075e4:	fa01 f303 	lsl.w	r3, r1, r3
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ee:	4313      	orrs	r3, r2
 80075f0:	634b      	str	r3, [r1, #52]	; 0x34
 80075f2:	e109      	b.n	8007808 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d110      	bne.n	8007626 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	440a      	add	r2, r1
 800761a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	e00f      	b.n	8007646 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	0151      	lsls	r1, r2, #5
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	440a      	add	r2, r1
 800763c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007644:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6919      	ldr	r1, [r3, #16]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	b298      	uxth	r0, r3
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4603      	mov	r3, r0
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 fade 	bl	8007c1c <USB_WritePacket>
 8007660:	e0d2      	b.n	8007808 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800767c:	0cdb      	lsrs	r3, r3, #19
 800767e:	04db      	lsls	r3, r3, #19
 8007680:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800769c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d126      	bne.n	80076fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	0148      	lsls	r0, r1, #5
 80076c8:	69f9      	ldr	r1, [r7, #28]
 80076ca:	4401      	add	r1, r0
 80076cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076d0:	4313      	orrs	r3, r2
 80076d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076f2:	6113      	str	r3, [r2, #16]
 80076f4:	e03a      	b.n	800776c <USB_EPStartXfer+0x3e4>
 80076f6:	bf00      	nop
 80076f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	4413      	add	r3, r2
 8007706:	1e5a      	subs	r2, r3, #1
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007710:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	8afa      	ldrh	r2, [r7, #22]
 8007718:	fb03 f202 	mul.w	r2, r3, r2
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	8afb      	ldrh	r3, [r7, #22]
 8007730:	04d9      	lsls	r1, r3, #19
 8007732:	4b38      	ldr	r3, [pc, #224]	; (8007814 <USB_EPStartXfer+0x48c>)
 8007734:	400b      	ands	r3, r1
 8007736:	69b9      	ldr	r1, [r7, #24]
 8007738:	0148      	lsls	r0, r1, #5
 800773a:	69f9      	ldr	r1, [r7, #28]
 800773c:	4401      	add	r1, r0
 800773e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007742:	4313      	orrs	r3, r2
 8007744:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	4413      	add	r3, r2
 800774e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	0148      	lsls	r0, r1, #5
 8007760:	69f9      	ldr	r1, [r7, #28]
 8007762:	4401      	add	r1, r0
 8007764:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007768:	4313      	orrs	r3, r2
 800776a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10d      	bne.n	800778e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6919      	ldr	r1, [r3, #16]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778a:	460a      	mov	r2, r1
 800778c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	791b      	ldrb	r3, [r3, #4]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d128      	bne.n	80077e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d110      	bne.n	80077c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e00f      	b.n	80077e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007806:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	1ff80000 	.word	0x1ff80000

08007818 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b01      	cmp	r3, #1
 8007836:	f040 80ce 	bne.w	80079d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d132      	bne.n	80078a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a0:	0cdb      	lsrs	r3, r3, #19
 80078a2:	04db      	lsls	r3, r3, #19
 80078a4:	6113      	str	r3, [r2, #16]
 80078a6:	e04e      	b.n	8007946 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c2:	0cdb      	lsrs	r3, r3, #19
 80078c4:	04db      	lsls	r3, r3, #19
 80078c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d903      	bls.n	8007900 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	68da      	ldr	r2, [r3, #12]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	440a      	add	r2, r1
 8007916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800791e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007936:	6939      	ldr	r1, [r7, #16]
 8007938:	0148      	lsls	r0, r1, #5
 800793a:	6979      	ldr	r1, [r7, #20]
 800793c:	4401      	add	r1, r0
 800793e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007942:	4313      	orrs	r3, r2
 8007944:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11e      	bne.n	800798a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007960:	461a      	mov	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007982:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e097      	b.n	8007aba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 8083 	beq.w	8007aba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	2101      	movs	r1, #1
 80079c6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ca:	6979      	ldr	r1, [r7, #20]
 80079cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079d0:	4313      	orrs	r3, r2
 80079d2:	634b      	str	r3, [r1, #52]	; 0x34
 80079d4:	e071      	b.n	8007aba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f0:	0cdb      	lsrs	r3, r3, #19
 80079f2:	04db      	lsls	r3, r3, #19
 80079f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a68:	6939      	ldr	r1, [r7, #16]
 8007a6a:	0148      	lsls	r0, r1, #5
 8007a6c:	6979      	ldr	r1, [r7, #20]
 8007a6e:	4401      	add	r1, r0
 8007a70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a74:	4313      	orrs	r3, r2
 8007a76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d10d      	bne.n	8007a9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6919      	ldr	r1, [r3, #16]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a96:	460a      	mov	r2, r1
 8007a98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	0151      	lsls	r1, r2, #5
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	440a      	add	r2, r1
 8007ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ab8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d14a      	bne.n	8007b7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007afe:	f040 8086 	bne.w	8007c0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	7812      	ldrb	r2, [r2, #0]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	7812      	ldrb	r2, [r2, #0]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d902      	bls.n	8007b60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b5e:	e056      	b.n	8007c0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b78:	d0e7      	beq.n	8007b4a <USB_EPStopXfer+0x82>
 8007b7a:	e048      	b.n	8007c0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b94:	d13b      	bne.n	8007c0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	7812      	ldrb	r2, [r2, #0]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3301      	adds	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d902      	bls.n	8007bf4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8007bf2:	e00c      	b.n	8007c0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c0c:	d0e7      	beq.n	8007bde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b089      	sub	sp, #36	; 0x24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4611      	mov	r1, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	71fb      	strb	r3, [r7, #7]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d123      	bne.n	8007c8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c42:	88bb      	ldrh	r3, [r7, #4]
 8007c44:	3303      	adds	r3, #3
 8007c46:	089b      	lsrs	r3, r3, #2
 8007c48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61bb      	str	r3, [r7, #24]
 8007c4e:	e018      	b.n	8007c82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	031a      	lsls	r2, r3, #12
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	3301      	adds	r3, #1
 8007c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	3301      	adds	r3, #1
 8007c74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	61bb      	str	r3, [r7, #24]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d3e2      	bcc.n	8007c50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3724      	adds	r7, #36	; 0x24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b08b      	sub	sp, #44	; 0x2c
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007cae:	88fb      	ldrh	r3, [r7, #6]
 8007cb0:	089b      	lsrs	r3, r3, #2
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	623b      	str	r3, [r7, #32]
 8007cc2:	e014      	b.n	8007cee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	3301      	adds	r3, #1
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	3301      	adds	r3, #1
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	3301      	adds	r3, #1
 8007cec:	623b      	str	r3, [r7, #32]
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d3e6      	bcc.n	8007cc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007cf6:	8bfb      	ldrh	r3, [r7, #30]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01e      	beq.n	8007d3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d06:	461a      	mov	r2, r3
 8007d08:	f107 0310 	add.w	r3, r7, #16
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	701a      	strb	r2, [r3, #0]
      i++;
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	3301      	adds	r3, #1
 8007d26:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d2e:	8bfb      	ldrh	r3, [r7, #30]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d34:	8bfb      	ldrh	r3, [r7, #30]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1ea      	bne.n	8007d10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	372c      	adds	r7, #44	; 0x2c
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d12c      	bne.n	8007dbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db12      	blt.n	8007d9c <USB_EPSetStall+0x54>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00f      	beq.n	8007d9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	0151      	lsls	r1, r2, #5
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	440a      	add	r2, r1
 8007db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	e02b      	b.n	8007e16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	db12      	blt.n	8007df6 <USB_EPSetStall+0xae>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00f      	beq.n	8007df6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007df4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d128      	bne.n	8007e92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	791b      	ldrb	r3, [r3, #4]
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d003      	beq.n	8007e70 <USB_EPClearStall+0x4c>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	791b      	ldrb	r3, [r3, #4]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d138      	bne.n	8007ee2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	e027      	b.n	8007ee2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	791b      	ldrb	r3, [r3, #4]
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d003      	beq.n	8007ec2 <USB_EPClearStall+0x9e>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	791b      	ldrb	r3, [r3, #4]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d10f      	bne.n	8007ee2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	011b      	lsls	r3, r3, #4
 8007f20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f24:	68f9      	ldr	r1, [r7, #12]
 8007f26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f6a:	f023 0302 	bic.w	r3, r3, #2
 8007f6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fac:	f043 0302 	orr.w	r3, r3, #2
 8007fb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	4013      	ands	r3, r2
 8008008:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	0c1b      	lsrs	r3, r3, #16
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	b29b      	uxth	r3, r3
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4013      	ands	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800807c:	68bb      	ldr	r3, [r7, #8]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	fa22 f303 	lsr.w	r3, r2, r3
 80080ba:	01db      	lsls	r3, r3, #7
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	4013      	ands	r3, r2
 80080d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080d8:	68bb      	ldr	r3, [r7, #8]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0301 	and.w	r3, r3, #1
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008102:	b480      	push	{r7}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008120:	f023 0307 	bic.w	r3, r3, #7
 8008124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	460b      	mov	r3, r1
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	333c      	adds	r3, #60	; 0x3c
 800815e:	3304      	adds	r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	4a26      	ldr	r2, [pc, #152]	; (8008200 <USB_EP0_OutStart+0xb8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d90a      	bls.n	8008182 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800817c:	d101      	bne.n	8008182 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e037      	b.n	80081f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	461a      	mov	r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800819c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b0:	f043 0318 	orr.w	r3, r3, #24
 80081b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80081c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80081ca:	7afb      	ldrb	r3, [r7, #11]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d10f      	bne.n	80081f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80081ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	4f54300a 	.word	0x4f54300a

08008204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4a13      	ldr	r2, [pc, #76]	; (8008268 <USB_CoreReset+0x64>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d901      	bls.n	8008222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e01b      	b.n	800825a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	daf2      	bge.n	8008210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f043 0201 	orr.w	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a09      	ldr	r2, [pc, #36]	; (8008268 <USB_CoreReset+0x64>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d901      	bls.n	800824c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e006      	b.n	800825a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b01      	cmp	r3, #1
 8008256:	d0f0      	beq.n	800823a <USB_CoreReset+0x36>

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	00030d40 	.word	0x00030d40

0800826c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008278:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800827c:	f002 fc8a 	bl	800ab94 <USBD_static_malloc>
 8008280:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d109      	bne.n	800829c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	32b0      	adds	r2, #176	; 0xb0
 8008292:	2100      	movs	r1, #0
 8008294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008298:	2302      	movs	r3, #2
 800829a:	e0d4      	b.n	8008446 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800829c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082a0:	2100      	movs	r1, #0
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f002 fcf6 	bl	800ac94 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	32b0      	adds	r2, #176	; 0xb0
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	32b0      	adds	r2, #176	; 0xb0
 80082c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	7c1b      	ldrb	r3, [r3, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d138      	bne.n	8008346 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082d4:	4b5e      	ldr	r3, [pc, #376]	; (8008450 <USBD_CDC_Init+0x1e4>)
 80082d6:	7819      	ldrb	r1, [r3, #0]
 80082d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082dc:	2202      	movs	r2, #2
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f002 fb35 	bl	800a94e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082e4:	4b5a      	ldr	r3, [pc, #360]	; (8008450 <USBD_CDC_Init+0x1e4>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f003 020f 	and.w	r2, r3, #15
 80082ec:	6879      	ldr	r1, [r7, #4]
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	3324      	adds	r3, #36	; 0x24
 80082fa:	2201      	movs	r2, #1
 80082fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082fe:	4b55      	ldr	r3, [pc, #340]	; (8008454 <USBD_CDC_Init+0x1e8>)
 8008300:	7819      	ldrb	r1, [r3, #0]
 8008302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008306:	2202      	movs	r2, #2
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f002 fb20 	bl	800a94e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800830e:	4b51      	ldr	r3, [pc, #324]	; (8008454 <USBD_CDC_Init+0x1e8>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f003 020f 	and.w	r2, r3, #15
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	440b      	add	r3, r1
 8008322:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008326:	2201      	movs	r2, #1
 8008328:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800832a:	4b4b      	ldr	r3, [pc, #300]	; (8008458 <USBD_CDC_Init+0x1ec>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f003 020f 	and.w	r2, r3, #15
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	3326      	adds	r3, #38	; 0x26
 8008340:	2210      	movs	r2, #16
 8008342:	801a      	strh	r2, [r3, #0]
 8008344:	e035      	b.n	80083b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008346:	4b42      	ldr	r3, [pc, #264]	; (8008450 <USBD_CDC_Init+0x1e4>)
 8008348:	7819      	ldrb	r1, [r3, #0]
 800834a:	2340      	movs	r3, #64	; 0x40
 800834c:	2202      	movs	r2, #2
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f002 fafd 	bl	800a94e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008354:	4b3e      	ldr	r3, [pc, #248]	; (8008450 <USBD_CDC_Init+0x1e4>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f003 020f 	and.w	r2, r3, #15
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	3324      	adds	r3, #36	; 0x24
 800836a:	2201      	movs	r2, #1
 800836c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800836e:	4b39      	ldr	r3, [pc, #228]	; (8008454 <USBD_CDC_Init+0x1e8>)
 8008370:	7819      	ldrb	r1, [r3, #0]
 8008372:	2340      	movs	r3, #64	; 0x40
 8008374:	2202      	movs	r2, #2
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f002 fae9 	bl	800a94e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800837c:	4b35      	ldr	r3, [pc, #212]	; (8008454 <USBD_CDC_Init+0x1e8>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 020f 	and.w	r2, r3, #15
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008394:	2201      	movs	r2, #1
 8008396:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008398:	4b2f      	ldr	r3, [pc, #188]	; (8008458 <USBD_CDC_Init+0x1ec>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f003 020f 	and.w	r2, r3, #15
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	440b      	add	r3, r1
 80083ac:	3326      	adds	r3, #38	; 0x26
 80083ae:	2210      	movs	r2, #16
 80083b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083b2:	4b29      	ldr	r3, [pc, #164]	; (8008458 <USBD_CDC_Init+0x1ec>)
 80083b4:	7819      	ldrb	r1, [r3, #0]
 80083b6:	2308      	movs	r3, #8
 80083b8:	2203      	movs	r2, #3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f002 fac7 	bl	800a94e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80083c0:	4b25      	ldr	r3, [pc, #148]	; (8008458 <USBD_CDC_Init+0x1ec>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	f003 020f 	and.w	r2, r3, #15
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	3324      	adds	r3, #36	; 0x24
 80083d6:	2201      	movs	r2, #1
 80083d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	33b0      	adds	r3, #176	; 0xb0
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008410:	2302      	movs	r3, #2
 8008412:	e018      	b.n	8008446 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	7c1b      	ldrb	r3, [r3, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10a      	bne.n	8008432 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800841c:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <USBD_CDC_Init+0x1e8>)
 800841e:	7819      	ldrb	r1, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f002 fb7e 	bl	800ab2c <USBD_LL_PrepareReceive>
 8008430:	e008      	b.n	8008444 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008432:	4b08      	ldr	r3, [pc, #32]	; (8008454 <USBD_CDC_Init+0x1e8>)
 8008434:	7819      	ldrb	r1, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800843c:	2340      	movs	r3, #64	; 0x40
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f002 fb74 	bl	800ab2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20000093 	.word	0x20000093
 8008454:	20000094 	.word	0x20000094
 8008458:	20000095 	.word	0x20000095

0800845c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008468:	4b3a      	ldr	r3, [pc, #232]	; (8008554 <USBD_CDC_DeInit+0xf8>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f002 fa93 	bl	800a99a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008474:	4b37      	ldr	r3, [pc, #220]	; (8008554 <USBD_CDC_DeInit+0xf8>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	f003 020f 	and.w	r2, r3, #15
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	440b      	add	r3, r1
 8008488:	3324      	adds	r3, #36	; 0x24
 800848a:	2200      	movs	r2, #0
 800848c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800848e:	4b32      	ldr	r3, [pc, #200]	; (8008558 <USBD_CDC_DeInit+0xfc>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f002 fa80 	bl	800a99a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800849a:	4b2f      	ldr	r3, [pc, #188]	; (8008558 <USBD_CDC_DeInit+0xfc>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	f003 020f 	and.w	r2, r3, #15
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	440b      	add	r3, r1
 80084ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084b2:	2200      	movs	r2, #0
 80084b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80084b6:	4b29      	ldr	r3, [pc, #164]	; (800855c <USBD_CDC_DeInit+0x100>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f002 fa6c 	bl	800a99a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80084c2:	4b26      	ldr	r3, [pc, #152]	; (800855c <USBD_CDC_DeInit+0x100>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	f003 020f 	and.w	r2, r3, #15
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	3324      	adds	r3, #36	; 0x24
 80084d8:	2200      	movs	r2, #0
 80084da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80084dc:	4b1f      	ldr	r3, [pc, #124]	; (800855c <USBD_CDC_DeInit+0x100>)
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	f003 020f 	and.w	r2, r3, #15
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	440b      	add	r3, r1
 80084f0:	3326      	adds	r3, #38	; 0x26
 80084f2:	2200      	movs	r2, #0
 80084f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	32b0      	adds	r2, #176	; 0xb0
 8008500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01f      	beq.n	8008548 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	33b0      	adds	r3, #176	; 0xb0
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	32b0      	adds	r2, #176	; 0xb0
 8008526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852a:	4618      	mov	r0, r3
 800852c:	f002 fb40 	bl	800abb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	32b0      	adds	r2, #176	; 0xb0
 800853a:	2100      	movs	r1, #0
 800853c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000093 	.word	0x20000093
 8008558:	20000094 	.word	0x20000094
 800855c:	20000095 	.word	0x20000095

08008560 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	32b0      	adds	r2, #176	; 0xb0
 8008574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008578:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800858c:	2303      	movs	r3, #3
 800858e:	e0bf      	b.n	8008710 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008598:	2b00      	cmp	r3, #0
 800859a:	d050      	beq.n	800863e <USBD_CDC_Setup+0xde>
 800859c:	2b20      	cmp	r3, #32
 800859e:	f040 80af 	bne.w	8008700 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	88db      	ldrh	r3, [r3, #6]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d03a      	beq.n	8008620 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da1b      	bge.n	80085ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	33b0      	adds	r3, #176	; 0xb0
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80085ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	88d2      	ldrh	r2, [r2, #6]
 80085d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	88db      	ldrh	r3, [r3, #6]
 80085d6:	2b07      	cmp	r3, #7
 80085d8:	bf28      	it	cs
 80085da:	2307      	movcs	r3, #7
 80085dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	89fa      	ldrh	r2, [r7, #14]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 fd89 	bl	800a0fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80085ea:	e090      	b.n	800870e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	785a      	ldrb	r2, [r3, #1]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	88db      	ldrh	r3, [r3, #6]
 80085fa:	2b3f      	cmp	r3, #63	; 0x3f
 80085fc:	d803      	bhi.n	8008606 <USBD_CDC_Setup+0xa6>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	88db      	ldrh	r3, [r3, #6]
 8008602:	b2da      	uxtb	r2, r3
 8008604:	e000      	b.n	8008608 <USBD_CDC_Setup+0xa8>
 8008606:	2240      	movs	r2, #64	; 0x40
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800860e:	6939      	ldr	r1, [r7, #16]
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008616:	461a      	mov	r2, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 fd9b 	bl	800a154 <USBD_CtlPrepareRx>
      break;
 800861e:	e076      	b.n	800870e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	33b0      	adds	r3, #176	; 0xb0
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	7850      	ldrb	r0, [r2, #1]
 8008636:	2200      	movs	r2, #0
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	4798      	blx	r3
      break;
 800863c:	e067      	b.n	800870e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	2b0b      	cmp	r3, #11
 8008644:	d851      	bhi.n	80086ea <USBD_CDC_Setup+0x18a>
 8008646:	a201      	add	r2, pc, #4	; (adr r2, 800864c <USBD_CDC_Setup+0xec>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	0800867d 	.word	0x0800867d
 8008650:	080086f9 	.word	0x080086f9
 8008654:	080086eb 	.word	0x080086eb
 8008658:	080086eb 	.word	0x080086eb
 800865c:	080086eb 	.word	0x080086eb
 8008660:	080086eb 	.word	0x080086eb
 8008664:	080086eb 	.word	0x080086eb
 8008668:	080086eb 	.word	0x080086eb
 800866c:	080086eb 	.word	0x080086eb
 8008670:	080086eb 	.word	0x080086eb
 8008674:	080086a7 	.word	0x080086a7
 8008678:	080086d1 	.word	0x080086d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b03      	cmp	r3, #3
 8008686:	d107      	bne.n	8008698 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008688:	f107 030a 	add.w	r3, r7, #10
 800868c:	2202      	movs	r2, #2
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 fd33 	bl	800a0fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008696:	e032      	b.n	80086fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fcbd 	bl	800a01a <USBD_CtlError>
            ret = USBD_FAIL;
 80086a0:	2303      	movs	r3, #3
 80086a2:	75fb      	strb	r3, [r7, #23]
          break;
 80086a4:	e02b      	b.n	80086fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d107      	bne.n	80086c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80086b2:	f107 030d 	add.w	r3, r7, #13
 80086b6:	2201      	movs	r2, #1
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 fd1e 	bl	800a0fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086c0:	e01d      	b.n	80086fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 fca8 	bl	800a01a <USBD_CtlError>
            ret = USBD_FAIL;
 80086ca:	2303      	movs	r3, #3
 80086cc:	75fb      	strb	r3, [r7, #23]
          break;
 80086ce:	e016      	b.n	80086fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d00f      	beq.n	80086fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 fc9b 	bl	800a01a <USBD_CtlError>
            ret = USBD_FAIL;
 80086e4:	2303      	movs	r3, #3
 80086e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80086e8:	e008      	b.n	80086fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 fc94 	bl	800a01a <USBD_CtlError>
          ret = USBD_FAIL;
 80086f2:	2303      	movs	r3, #3
 80086f4:	75fb      	strb	r3, [r7, #23]
          break;
 80086f6:	e002      	b.n	80086fe <USBD_CDC_Setup+0x19e>
          break;
 80086f8:	bf00      	nop
 80086fa:	e008      	b.n	800870e <USBD_CDC_Setup+0x1ae>
          break;
 80086fc:	bf00      	nop
      }
      break;
 80086fe:	e006      	b.n	800870e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fc89 	bl	800a01a <USBD_CtlError>
      ret = USBD_FAIL;
 8008708:	2303      	movs	r3, #3
 800870a:	75fb      	strb	r3, [r7, #23]
      break;
 800870c:	bf00      	nop
  }

  return (uint8_t)ret;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800872a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	32b0      	adds	r2, #176	; 0xb0
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	e065      	b.n	800880e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	32b0      	adds	r2, #176	; 0xb0
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	f003 020f 	and.w	r2, r3, #15
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	440b      	add	r3, r1
 8008764:	3318      	adds	r3, #24
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d02f      	beq.n	80087cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	f003 020f 	and.w	r2, r3, #15
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	3318      	adds	r3, #24
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	f003 010f 	and.w	r1, r3, #15
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	460b      	mov	r3, r1
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	440b      	add	r3, r1
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4403      	add	r3, r0
 8008794:	3348      	adds	r3, #72	; 0x48
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	fbb2 f1f3 	udiv	r1, r2, r3
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d112      	bne.n	80087cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	3318      	adds	r3, #24
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80087be:	78f9      	ldrb	r1, [r7, #3]
 80087c0:	2300      	movs	r3, #0
 80087c2:	2200      	movs	r2, #0
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f002 f990 	bl	800aaea <USBD_LL_Transmit>
 80087ca:	e01f      	b.n	800880c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	33b0      	adds	r3, #176	; 0xb0
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d010      	beq.n	800880c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	33b0      	adds	r3, #176	; 0xb0
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	32b0      	adds	r2, #176	; 0xb0
 800882c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008830:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	32b0      	adds	r2, #176	; 0xb0
 800883c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e01a      	b.n	800887e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f002 f98e 	bl	800ab6e <USBD_LL_GetRxDataSize>
 8008852:	4602      	mov	r2, r0
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	33b0      	adds	r3, #176	; 0xb0
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008878:	4611      	mov	r1, r2
 800887a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	32b0      	adds	r2, #176	; 0xb0
 8008898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e025      	b.n	80088f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	33b0      	adds	r3, #176	; 0xb0
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01a      	beq.n	80088f2 <USBD_CDC_EP0_RxReady+0x6c>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80088c2:	2bff      	cmp	r3, #255	; 0xff
 80088c4:	d015      	beq.n	80088f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	33b0      	adds	r3, #176	; 0xb0
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80088de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088e6:	b292      	uxth	r2, r2
 80088e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	22ff      	movs	r2, #255	; 0xff
 80088ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008904:	2182      	movs	r1, #130	; 0x82
 8008906:	4818      	ldr	r0, [pc, #96]	; (8008968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008908:	f000 fd4f 	bl	80093aa <USBD_GetEpDesc>
 800890c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800890e:	2101      	movs	r1, #1
 8008910:	4815      	ldr	r0, [pc, #84]	; (8008968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008912:	f000 fd4a 	bl	80093aa <USBD_GetEpDesc>
 8008916:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008918:	2181      	movs	r1, #129	; 0x81
 800891a:	4813      	ldr	r0, [pc, #76]	; (8008968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800891c:	f000 fd45 	bl	80093aa <USBD_GetEpDesc>
 8008920:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2210      	movs	r2, #16
 800892c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d006      	beq.n	8008942 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	2200      	movs	r2, #0
 8008938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800893c:	711a      	strb	r2, [r3, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d006      	beq.n	8008956 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008950:	711a      	strb	r2, [r3, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2243      	movs	r2, #67	; 0x43
 800895a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800895c:	4b02      	ldr	r3, [pc, #8]	; (8008968 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000050 	.word	0x20000050

0800896c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008974:	2182      	movs	r1, #130	; 0x82
 8008976:	4818      	ldr	r0, [pc, #96]	; (80089d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008978:	f000 fd17 	bl	80093aa <USBD_GetEpDesc>
 800897c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800897e:	2101      	movs	r1, #1
 8008980:	4815      	ldr	r0, [pc, #84]	; (80089d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008982:	f000 fd12 	bl	80093aa <USBD_GetEpDesc>
 8008986:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008988:	2181      	movs	r1, #129	; 0x81
 800898a:	4813      	ldr	r0, [pc, #76]	; (80089d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800898c:	f000 fd0d 	bl	80093aa <USBD_GetEpDesc>
 8008990:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2210      	movs	r2, #16
 800899c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d006      	beq.n	80089b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2200      	movs	r2, #0
 80089a8:	711a      	strb	r2, [r3, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f042 0202 	orr.w	r2, r2, #2
 80089b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d006      	beq.n	80089c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	711a      	strb	r2, [r3, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f042 0202 	orr.w	r2, r2, #2
 80089c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2243      	movs	r2, #67	; 0x43
 80089ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20000050 	.word	0x20000050

080089dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089e4:	2182      	movs	r1, #130	; 0x82
 80089e6:	4818      	ldr	r0, [pc, #96]	; (8008a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089e8:	f000 fcdf 	bl	80093aa <USBD_GetEpDesc>
 80089ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089ee:	2101      	movs	r1, #1
 80089f0:	4815      	ldr	r0, [pc, #84]	; (8008a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089f2:	f000 fcda 	bl	80093aa <USBD_GetEpDesc>
 80089f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089f8:	2181      	movs	r1, #129	; 0x81
 80089fa:	4813      	ldr	r0, [pc, #76]	; (8008a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089fc:	f000 fcd5 	bl	80093aa <USBD_GetEpDesc>
 8008a00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2210      	movs	r2, #16
 8008a0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d006      	beq.n	8008a22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a1c:	711a      	strb	r2, [r3, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d006      	beq.n	8008a36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a30:	711a      	strb	r2, [r3, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2243      	movs	r2, #67	; 0x43
 8008a3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a3c:	4b02      	ldr	r3, [pc, #8]	; (8008a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20000050 	.word	0x20000050

08008a4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	220a      	movs	r2, #10
 8008a58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a5a:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	2000000c 	.word	0x2000000c

08008a6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e009      	b.n	8008a94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	33b0      	adds	r3, #176	; 0xb0
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	32b0      	adds	r2, #176	; 0xb0
 8008ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e008      	b.n	8008ad8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	32b0      	adds	r2, #176	; 0xb0
 8008af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e004      	b.n	8008b12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	32b0      	adds	r2, #176	; 0xb0
 8008b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	32b0      	adds	r2, #176	; 0xb0
 8008b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e025      	b.n	8008b9e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d11f      	bne.n	8008b9c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008b64:	4b10      	ldr	r3, [pc, #64]	; (8008ba8 <USBD_CDC_TransmitPacket+0x88>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f003 020f 	and.w	r2, r3, #15
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4403      	add	r3, r0
 8008b7e:	3318      	adds	r3, #24
 8008b80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008b82:	4b09      	ldr	r3, [pc, #36]	; (8008ba8 <USBD_CDC_TransmitPacket+0x88>)
 8008b84:	7819      	ldrb	r1, [r3, #0]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 ffa9 	bl	800aaea <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000093 	.word	0x20000093

08008bac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	32b0      	adds	r2, #176	; 0xb0
 8008bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	32b0      	adds	r2, #176	; 0xb0
 8008bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e018      	b.n	8008c0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	7c1b      	ldrb	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <USBD_CDC_ReceivePacket+0x68>)
 8008be4:	7819      	ldrb	r1, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 ff9b 	bl	800ab2c <USBD_LL_PrepareReceive>
 8008bf6:	e008      	b.n	8008c0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <USBD_CDC_ReceivePacket+0x68>)
 8008bfa:	7819      	ldrb	r1, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c02:	2340      	movs	r3, #64	; 0x40
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 ff91 	bl	800ab2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20000094 	.word	0x20000094

08008c18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e01f      	b.n	8008c70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	79fa      	ldrb	r2, [r7, #7]
 8008c62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f001 fe0b 	bl	800a880 <USBD_LL_Init>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e025      	b.n	8008cdc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	32ae      	adds	r2, #174	; 0xae
 8008ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00f      	beq.n	8008ccc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	32ae      	adds	r2, #174	; 0xae
 8008cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	f107 020e 	add.w	r2, r7, #14
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 fe13 	bl	800a918 <USBD_LL_Start>
 8008cf2:	4603      	mov	r3, r0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d009      	beq.n	8008d40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	4611      	mov	r1, r2
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	4611      	mov	r1, r2
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	4798      	blx	r3
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f001 f908 	bl	8009fa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008da4:	461a      	mov	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d01a      	beq.n	8008df0 <USBD_LL_SetupStage+0x72>
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d822      	bhi.n	8008e04 <USBD_LL_SetupStage+0x86>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <USBD_LL_SetupStage+0x4a>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d00a      	beq.n	8008ddc <USBD_LL_SetupStage+0x5e>
 8008dc6:	e01d      	b.n	8008e04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fb5f 	bl	8009494 <USBD_StdDevReq>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dda:	e020      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fbc7 	bl	8009578 <USBD_StdItfReq>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]
      break;
 8008dee:	e016      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fc29 	bl	8009650 <USBD_StdEPReq>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]
      break;
 8008e02:	e00c      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 fde0 	bl	800a9d8 <USBD_LL_StallEP>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1c:	bf00      	nop
  }

  return ret;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	460b      	mov	r3, r1
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e3a:	7afb      	ldrb	r3, [r7, #11]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d16e      	bne.n	8008f1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	f040 8098 	bne.w	8008f84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d913      	bls.n	8008e88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	1ad2      	subs	r2, r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	4293      	cmp	r3, r2
 8008e78:	bf28      	it	cs
 8008e7a:	4613      	movcs	r3, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f001 f984 	bl	800a18e <USBD_CtlContinueRx>
 8008e86:	e07d      	b.n	8008f84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e8e:	f003 031f 	and.w	r3, r3, #31
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d014      	beq.n	8008ec0 <USBD_LL_DataOutStage+0x98>
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d81d      	bhi.n	8008ed6 <USBD_LL_DataOutStage+0xae>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <USBD_LL_DataOutStage+0x7c>
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d003      	beq.n	8008eaa <USBD_LL_DataOutStage+0x82>
 8008ea2:	e018      	b.n	8008ed6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ea8:	e018      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fa5e 	bl	8009376 <USBD_CoreFindIF>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75bb      	strb	r3, [r7, #22]
            break;
 8008ebe:	e00d      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	4619      	mov	r1, r3
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fa60 	bl	8009390 <USBD_CoreFindEP>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ed4:	e002      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8008eda:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008edc:	7dbb      	ldrb	r3, [r7, #22]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d119      	bne.n	8008f16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d113      	bne.n	8008f16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008eee:	7dba      	ldrb	r2, [r7, #22]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	32ae      	adds	r2, #174	; 0xae
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008efe:	7dba      	ldrb	r2, [r7, #22]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f06:	7dba      	ldrb	r2, [r7, #22]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	32ae      	adds	r2, #174	; 0xae
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f001 f94a 	bl	800a1b0 <USBD_CtlSendStatus>
 8008f1c:	e032      	b.n	8008f84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	4619      	mov	r1, r3
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fa31 	bl	8009390 <USBD_CoreFindEP>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f32:	7dbb      	ldrb	r3, [r7, #22]
 8008f34:	2bff      	cmp	r3, #255	; 0xff
 8008f36:	d025      	beq.n	8008f84 <USBD_LL_DataOutStage+0x15c>
 8008f38:	7dbb      	ldrb	r3, [r7, #22]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d122      	bne.n	8008f84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d117      	bne.n	8008f7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f4a:	7dba      	ldrb	r2, [r7, #22]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	32ae      	adds	r2, #174	; 0xae
 8008f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00f      	beq.n	8008f7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f5a:	7dba      	ldrb	r2, [r7, #22]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f62:	7dba      	ldrb	r2, [r7, #22]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	32ae      	adds	r2, #174	; 0xae
 8008f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	7afa      	ldrb	r2, [r7, #11]
 8008f70:	4611      	mov	r1, r2
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	e000      	b.n	8008f86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	460b      	mov	r3, r1
 8008f98:	607a      	str	r2, [r7, #4]
 8008f9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f9c:	7afb      	ldrb	r3, [r7, #11]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d16f      	bne.n	8009082 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3314      	adds	r3, #20
 8008fa6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d15a      	bne.n	8009068 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d914      	bls.n	8008fe8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f001 f8ac 	bl	800a132 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fda:	2300      	movs	r3, #0
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2100      	movs	r1, #0
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 fda3 	bl	800ab2c <USBD_LL_PrepareReceive>
 8008fe6:	e03f      	b.n	8009068 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d11c      	bne.n	800902e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d316      	bcc.n	800902e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800900a:	429a      	cmp	r2, r3
 800900c:	d20f      	bcs.n	800902e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f001 f88d 	bl	800a132 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f001 fd80 	bl	800ab2c <USBD_LL_PrepareReceive>
 800902c:	e01c      	b.n	8009068 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d10f      	bne.n	800905a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d009      	beq.n	800905a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800905a:	2180      	movs	r1, #128	; 0x80
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f001 fcbb 	bl	800a9d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f001 f8b7 	bl	800a1d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d03a      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff fe42 	bl	8008cfc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009080:	e032      	b.n	80090e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009088:	b2db      	uxtb	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f97f 	bl	8009390 <USBD_CoreFindEP>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2bff      	cmp	r3, #255	; 0xff
 800909a:	d025      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d122      	bne.n	80090e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d11c      	bne.n	80090e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090ae:	7dfa      	ldrb	r2, [r7, #23]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	32ae      	adds	r2, #174	; 0xae
 80090b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d014      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80090be:	7dfa      	ldrb	r2, [r7, #23]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090c6:	7dfa      	ldrb	r2, [r7, #23]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	32ae      	adds	r2, #174	; 0xae
 80090cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	7afa      	ldrb	r2, [r7, #11]
 80090d4:	4611      	mov	r1, r2
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	4798      	blx	r3
 80090da:	4603      	mov	r3, r0
 80090dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090de:	7dbb      	ldrb	r3, [r7, #22]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090e4:	7dbb      	ldrb	r3, [r7, #22]
 80090e6:	e000      	b.n	80090ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912a:	2b00      	cmp	r3, #0
 800912c:	d014      	beq.n	8009158 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00e      	beq.n	8009158 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6852      	ldr	r2, [r2, #4]
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	4611      	mov	r1, r2
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	4798      	blx	r3
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009158:	2340      	movs	r3, #64	; 0x40
 800915a:	2200      	movs	r2, #0
 800915c:	2100      	movs	r1, #0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fbf5 	bl	800a94e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2240      	movs	r2, #64	; 0x40
 8009170:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	2200      	movs	r2, #0
 8009178:	2180      	movs	r1, #128	; 0x80
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fbe7 	bl	800a94e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2240      	movs	r2, #64	; 0x40
 800918a:	621a      	str	r2, [r3, #32]

  return ret;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2204      	movs	r2, #4
 80091d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d106      	bne.n	8009204 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b03      	cmp	r3, #3
 8009224:	d110      	bne.n	8009248 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	460b      	mov	r3, r1
 800925c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	32ae      	adds	r2, #174	; 0xae
 8009268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	e01c      	b.n	80092ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b03      	cmp	r3, #3
 800927e:	d115      	bne.n	80092ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	32ae      	adds	r2, #174	; 0xae
 800928a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	32ae      	adds	r2, #174	; 0xae
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	78fa      	ldrb	r2, [r7, #3]
 80092a6:	4611      	mov	r1, r2
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	32ae      	adds	r2, #174	; 0xae
 80092cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e01c      	b.n	8009312 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d115      	bne.n	8009310 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	32ae      	adds	r2, #174	; 0xae
 80092ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	32ae      	adds	r2, #174	; 0xae
 8009302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	4611      	mov	r1, r2
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00e      	beq.n	800936c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	6852      	ldr	r2, [r2, #4]
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	4611      	mov	r1, r2
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	4798      	blx	r3
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009368:	2303      	movs	r3, #3
 800936a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009382:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009384:	4618      	mov	r0, r3
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800939c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	885b      	ldrh	r3, [r3, #2]
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d920      	bls.n	8009414 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093da:	e013      	b.n	8009404 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093dc:	f107 030a 	add.w	r3, r7, #10
 80093e0:	4619      	mov	r1, r3
 80093e2:	6978      	ldr	r0, [r7, #20]
 80093e4:	f000 f81b 	bl	800941e <USBD_GetNextDesc>
 80093e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	2b05      	cmp	r3, #5
 80093f0:	d108      	bne.n	8009404 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	789b      	ldrb	r3, [r3, #2]
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d008      	beq.n	8009412 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009400:	2300      	movs	r3, #0
 8009402:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	885b      	ldrh	r3, [r3, #2]
 8009408:	b29a      	uxth	r2, r3
 800940a:	897b      	ldrh	r3, [r7, #10]
 800940c:	429a      	cmp	r2, r3
 800940e:	d8e5      	bhi.n	80093dc <USBD_GetEpDesc+0x32>
 8009410:	e000      	b.n	8009414 <USBD_GetEpDesc+0x6a>
          break;
 8009412:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009414:	693b      	ldr	r3, [r7, #16]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	881a      	ldrh	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	4413      	add	r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800944a:	68fb      	ldr	r3, [r7, #12]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	3301      	adds	r3, #1
 800946e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009476:	8a3b      	ldrh	r3, [r7, #16]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	b21a      	sxth	r2, r3
 800947c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009480:	4313      	orrs	r3, r2
 8009482:	b21b      	sxth	r3, r3
 8009484:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009486:	89fb      	ldrh	r3, [r7, #14]
}
 8009488:	4618      	mov	r0, r3
 800948a:	371c      	adds	r7, #28
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d005      	beq.n	80094ba <USBD_StdDevReq+0x26>
 80094ae:	2b40      	cmp	r3, #64	; 0x40
 80094b0:	d857      	bhi.n	8009562 <USBD_StdDevReq+0xce>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00f      	beq.n	80094d6 <USBD_StdDevReq+0x42>
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d153      	bne.n	8009562 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	32ae      	adds	r2, #174	; 0xae
 80094c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	4798      	blx	r3
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
      break;
 80094d4:	e04a      	b.n	800956c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	2b09      	cmp	r3, #9
 80094dc:	d83b      	bhi.n	8009556 <USBD_StdDevReq+0xc2>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <USBD_StdDevReq+0x50>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	08009539 	.word	0x08009539
 80094e8:	0800954d 	.word	0x0800954d
 80094ec:	08009557 	.word	0x08009557
 80094f0:	08009543 	.word	0x08009543
 80094f4:	08009557 	.word	0x08009557
 80094f8:	08009517 	.word	0x08009517
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	08009557 	.word	0x08009557
 8009504:	0800952f 	.word	0x0800952f
 8009508:	08009521 	.word	0x08009521
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fa3c 	bl	800998c <USBD_GetDescriptor>
          break;
 8009514:	e024      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fba1 	bl	8009c60 <USBD_SetAddress>
          break;
 800951e:	e01f      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fbe0 	bl	8009ce8 <USBD_SetConfig>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
          break;
 800952c:	e018      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fc83 	bl	8009e3c <USBD_GetConfig>
          break;
 8009536:	e013      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fcb4 	bl	8009ea8 <USBD_GetStatus>
          break;
 8009540:	e00e      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fce3 	bl	8009f10 <USBD_SetFeature>
          break;
 800954a:	e009      	b.n	8009560 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fd07 	bl	8009f62 <USBD_ClrFeature>
          break;
 8009554:	e004      	b.n	8009560 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fd5e 	bl	800a01a <USBD_CtlError>
          break;
 800955e:	bf00      	nop
      }
      break;
 8009560:	e004      	b.n	800956c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fd58 	bl	800a01a <USBD_CtlError>
      break;
 800956a:	bf00      	nop
  }

  return ret;
 800956c:	7bfb      	ldrb	r3, [r7, #15]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop

08009578 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800958e:	2b40      	cmp	r3, #64	; 0x40
 8009590:	d005      	beq.n	800959e <USBD_StdItfReq+0x26>
 8009592:	2b40      	cmp	r3, #64	; 0x40
 8009594:	d852      	bhi.n	800963c <USBD_StdItfReq+0xc4>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <USBD_StdItfReq+0x26>
 800959a:	2b20      	cmp	r3, #32
 800959c:	d14e      	bne.n	800963c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d840      	bhi.n	800962e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	889b      	ldrh	r3, [r3, #4]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d836      	bhi.n	8009624 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	889b      	ldrh	r3, [r3, #4]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff fed9 	bl	8009376 <USBD_CoreFindIF>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	2bff      	cmp	r3, #255	; 0xff
 80095cc:	d01d      	beq.n	800960a <USBD_StdItfReq+0x92>
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d11a      	bne.n	800960a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095d4:	7bba      	ldrb	r2, [r7, #14]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	32ae      	adds	r2, #174	; 0xae
 80095da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00f      	beq.n	8009604 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095e4:	7bba      	ldrb	r2, [r7, #14]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095ec:	7bba      	ldrb	r2, [r7, #14]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	32ae      	adds	r2, #174	; 0xae
 80095f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	4798      	blx	r3
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009602:	e004      	b.n	800960e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009604:	2303      	movs	r3, #3
 8009606:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009608:	e001      	b.n	800960e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800960a:	2303      	movs	r3, #3
 800960c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	88db      	ldrh	r3, [r3, #6]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d110      	bne.n	8009638 <USBD_StdItfReq+0xc0>
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10d      	bne.n	8009638 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fdc7 	bl	800a1b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009622:	e009      	b.n	8009638 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009624:	6839      	ldr	r1, [r7, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fcf7 	bl	800a01a <USBD_CtlError>
          break;
 800962c:	e004      	b.n	8009638 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fcf2 	bl	800a01a <USBD_CtlError>
          break;
 8009636:	e000      	b.n	800963a <USBD_StdItfReq+0xc2>
          break;
 8009638:	bf00      	nop
      }
      break;
 800963a:	e004      	b.n	8009646 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fceb 	bl	800a01a <USBD_CtlError>
      break;
 8009644:	bf00      	nop
  }

  return ret;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	889b      	ldrh	r3, [r3, #4]
 8009662:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800966c:	2b40      	cmp	r3, #64	; 0x40
 800966e:	d007      	beq.n	8009680 <USBD_StdEPReq+0x30>
 8009670:	2b40      	cmp	r3, #64	; 0x40
 8009672:	f200 817f 	bhi.w	8009974 <USBD_StdEPReq+0x324>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d02a      	beq.n	80096d0 <USBD_StdEPReq+0x80>
 800967a:	2b20      	cmp	r3, #32
 800967c:	f040 817a 	bne.w	8009974 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff fe83 	bl	8009390 <USBD_CoreFindEP>
 800968a:	4603      	mov	r3, r0
 800968c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800968e:	7b7b      	ldrb	r3, [r7, #13]
 8009690:	2bff      	cmp	r3, #255	; 0xff
 8009692:	f000 8174 	beq.w	800997e <USBD_StdEPReq+0x32e>
 8009696:	7b7b      	ldrb	r3, [r7, #13]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f040 8170 	bne.w	800997e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800969e:	7b7a      	ldrb	r2, [r7, #13]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096a6:	7b7a      	ldrb	r2, [r7, #13]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	32ae      	adds	r2, #174	; 0xae
 80096ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 8163 	beq.w	800997e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80096b8:	7b7a      	ldrb	r2, [r7, #13]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	32ae      	adds	r2, #174	; 0xae
 80096be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	4798      	blx	r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096ce:	e156      	b.n	800997e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d008      	beq.n	80096ea <USBD_StdEPReq+0x9a>
 80096d8:	2b03      	cmp	r3, #3
 80096da:	f300 8145 	bgt.w	8009968 <USBD_StdEPReq+0x318>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 809b 	beq.w	800981a <USBD_StdEPReq+0x1ca>
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d03c      	beq.n	8009762 <USBD_StdEPReq+0x112>
 80096e8:	e13e      	b.n	8009968 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d002      	beq.n	80096fc <USBD_StdEPReq+0xac>
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d016      	beq.n	8009728 <USBD_StdEPReq+0xd8>
 80096fa:	e02c      	b.n	8009756 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00d      	beq.n	800971e <USBD_StdEPReq+0xce>
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	2b80      	cmp	r3, #128	; 0x80
 8009706:	d00a      	beq.n	800971e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 f963 	bl	800a9d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009712:	2180      	movs	r1, #128	; 0x80
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 f95f 	bl	800a9d8 <USBD_LL_StallEP>
 800971a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800971c:	e020      	b.n	8009760 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fc7a 	bl	800a01a <USBD_CtlError>
              break;
 8009726:	e01b      	b.n	8009760 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	885b      	ldrh	r3, [r3, #2]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10e      	bne.n	800974e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00b      	beq.n	800974e <USBD_StdEPReq+0xfe>
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	2b80      	cmp	r3, #128	; 0x80
 800973a:	d008      	beq.n	800974e <USBD_StdEPReq+0xfe>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	88db      	ldrh	r3, [r3, #6]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 f945 	bl	800a9d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fd2e 	bl	800a1b0 <USBD_CtlSendStatus>

              break;
 8009754:	e004      	b.n	8009760 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fc5e 	bl	800a01a <USBD_CtlError>
              break;
 800975e:	bf00      	nop
          }
          break;
 8009760:	e107      	b.n	8009972 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b02      	cmp	r3, #2
 800976c:	d002      	beq.n	8009774 <USBD_StdEPReq+0x124>
 800976e:	2b03      	cmp	r3, #3
 8009770:	d016      	beq.n	80097a0 <USBD_StdEPReq+0x150>
 8009772:	e04b      	b.n	800980c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <USBD_StdEPReq+0x146>
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b80      	cmp	r3, #128	; 0x80
 800977e:	d00a      	beq.n	8009796 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f927 	bl	800a9d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 f923 	bl	800a9d8 <USBD_LL_StallEP>
 8009792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009794:	e040      	b.n	8009818 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fc3e 	bl	800a01a <USBD_CtlError>
              break;
 800979e:	e03b      	b.n	8009818 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	885b      	ldrh	r3, [r3, #2]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d136      	bne.n	8009816 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d004      	beq.n	80097bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f001 f92d 	bl	800aa16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fcf7 	bl	800a1b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff fde2 	bl	8009390 <USBD_CoreFindEP>
 80097cc:	4603      	mov	r3, r0
 80097ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097d0:	7b7b      	ldrb	r3, [r7, #13]
 80097d2:	2bff      	cmp	r3, #255	; 0xff
 80097d4:	d01f      	beq.n	8009816 <USBD_StdEPReq+0x1c6>
 80097d6:	7b7b      	ldrb	r3, [r7, #13]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d11c      	bne.n	8009816 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097dc:	7b7a      	ldrb	r2, [r7, #13]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097e4:	7b7a      	ldrb	r2, [r7, #13]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	32ae      	adds	r2, #174	; 0xae
 80097ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d010      	beq.n	8009816 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097f4:	7b7a      	ldrb	r2, [r7, #13]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	32ae      	adds	r2, #174	; 0xae
 80097fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	4798      	blx	r3
 8009806:	4603      	mov	r3, r0
 8009808:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800980a:	e004      	b.n	8009816 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fc03 	bl	800a01a <USBD_CtlError>
              break;
 8009814:	e000      	b.n	8009818 <USBD_StdEPReq+0x1c8>
              break;
 8009816:	bf00      	nop
          }
          break;
 8009818:	e0ab      	b.n	8009972 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d002      	beq.n	800982c <USBD_StdEPReq+0x1dc>
 8009826:	2b03      	cmp	r3, #3
 8009828:	d032      	beq.n	8009890 <USBD_StdEPReq+0x240>
 800982a:	e097      	b.n	800995c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d007      	beq.n	8009842 <USBD_StdEPReq+0x1f2>
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b80      	cmp	r3, #128	; 0x80
 8009836:	d004      	beq.n	8009842 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fbed 	bl	800a01a <USBD_CtlError>
                break;
 8009840:	e091      	b.n	8009966 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009846:	2b00      	cmp	r3, #0
 8009848:	da0b      	bge.n	8009862 <USBD_StdEPReq+0x212>
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	3310      	adds	r3, #16
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	3304      	adds	r3, #4
 8009860:	e00b      	b.n	800987a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	4413      	add	r3, r2
 8009878:	3304      	adds	r3, #4
 800987a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2200      	movs	r2, #0
 8009880:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2202      	movs	r2, #2
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fc37 	bl	800a0fc <USBD_CtlSendData>
              break;
 800988e:	e06a      	b.n	8009966 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009894:	2b00      	cmp	r3, #0
 8009896:	da11      	bge.n	80098bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	f003 020f 	and.w	r2, r3, #15
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	440b      	add	r3, r1
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d117      	bne.n	80098e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fbb0 	bl	800a01a <USBD_CtlError>
                  break;
 80098ba:	e054      	b.n	8009966 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	f003 020f 	and.w	r2, r3, #15
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d104      	bne.n	80098e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fb9d 	bl	800a01a <USBD_CtlError>
                  break;
 80098e0:	e041      	b.n	8009966 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da0b      	bge.n	8009902 <USBD_StdEPReq+0x2b2>
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098f0:	4613      	mov	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	3310      	adds	r3, #16
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4413      	add	r3, r2
 80098fe:	3304      	adds	r3, #4
 8009900:	e00b      	b.n	800991a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	4413      	add	r3, r2
 8009918:	3304      	adds	r3, #4
 800991a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <USBD_StdEPReq+0x2d8>
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b80      	cmp	r3, #128	; 0x80
 8009926:	d103      	bne.n	8009930 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	e00e      	b.n	800994e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f001 f88d 	bl	800aa54 <USBD_LL_IsStallEP>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2201      	movs	r2, #1
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e002      	b.n	800994e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2202      	movs	r2, #2
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fbd1 	bl	800a0fc <USBD_CtlSendData>
              break;
 800995a:	e004      	b.n	8009966 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fb5b 	bl	800a01a <USBD_CtlError>
              break;
 8009964:	bf00      	nop
          }
          break;
 8009966:	e004      	b.n	8009972 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb55 	bl	800a01a <USBD_CtlError>
          break;
 8009970:	bf00      	nop
      }
      break;
 8009972:	e005      	b.n	8009980 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fb4f 	bl	800a01a <USBD_CtlError>
      break;
 800997c:	e000      	b.n	8009980 <USBD_StdEPReq+0x330>
      break;
 800997e:	bf00      	nop
  }

  return ret;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	885b      	ldrh	r3, [r3, #2]
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	3b01      	subs	r3, #1
 80099ac:	2b06      	cmp	r3, #6
 80099ae:	f200 8128 	bhi.w	8009c02 <USBD_GetDescriptor+0x276>
 80099b2:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <USBD_GetDescriptor+0x2c>)
 80099b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099ed 	.word	0x080099ed
 80099c0:	08009a2d 	.word	0x08009a2d
 80099c4:	08009c03 	.word	0x08009c03
 80099c8:	08009c03 	.word	0x08009c03
 80099cc:	08009ba3 	.word	0x08009ba3
 80099d0:	08009bcf 	.word	0x08009bcf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
      break;
 80099ea:	e112      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7c1b      	ldrb	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10d      	bne.n	8009a10 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	f107 0208 	add.w	r2, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a0e:	e100      	b.n	8009c12 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	f107 0208 	add.w	r2, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	2202      	movs	r2, #2
 8009a28:	701a      	strb	r2, [r3, #0]
      break;
 8009a2a:	e0f2      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	f200 80ac 	bhi.w	8009b90 <USBD_GetDescriptor+0x204>
 8009a38:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <USBD_GetDescriptor+0xb4>)
 8009a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3e:	bf00      	nop
 8009a40:	08009a59 	.word	0x08009a59
 8009a44:	08009a8d 	.word	0x08009a8d
 8009a48:	08009ac1 	.word	0x08009ac1
 8009a4c:	08009af5 	.word	0x08009af5
 8009a50:	08009b29 	.word	0x08009b29
 8009a54:	08009b5d 	.word	0x08009b5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7c12      	ldrb	r2, [r2, #16]
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7a:	e091      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 facb 	bl	800a01a <USBD_CtlError>
            err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8a:	e089      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	7c12      	ldrb	r2, [r2, #16]
 8009aa4:	f107 0108 	add.w	r1, r7, #8
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aae:	e077      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fab1 	bl	800a01a <USBD_CtlError>
            err++;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	3301      	adds	r3, #1
 8009abc:	72fb      	strb	r3, [r7, #11]
          break;
 8009abe:	e06f      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	7c12      	ldrb	r2, [r2, #16]
 8009ad8:	f107 0108 	add.w	r1, r7, #8
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
 8009ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ae2:	e05d      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa97 	bl	800a01a <USBD_CtlError>
            err++;
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	3301      	adds	r3, #1
 8009af0:	72fb      	strb	r3, [r7, #11]
          break;
 8009af2:	e055      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00b      	beq.n	8009b18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	7c12      	ldrb	r2, [r2, #16]
 8009b0c:	f107 0108 	add.w	r1, r7, #8
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
 8009b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b16:	e043      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fa7d 	bl	800a01a <USBD_CtlError>
            err++;
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	3301      	adds	r3, #1
 8009b24:	72fb      	strb	r3, [r7, #11]
          break;
 8009b26:	e03b      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	7c12      	ldrb	r2, [r2, #16]
 8009b40:	f107 0108 	add.w	r1, r7, #8
 8009b44:	4610      	mov	r0, r2
 8009b46:	4798      	blx	r3
 8009b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b4a:	e029      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa63 	bl	800a01a <USBD_CtlError>
            err++;
 8009b54:	7afb      	ldrb	r3, [r7, #11]
 8009b56:	3301      	adds	r3, #1
 8009b58:	72fb      	strb	r3, [r7, #11]
          break;
 8009b5a:	e021      	b.n	8009ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	7c12      	ldrb	r2, [r2, #16]
 8009b74:	f107 0108 	add.w	r1, r7, #8
 8009b78:	4610      	mov	r0, r2
 8009b7a:	4798      	blx	r3
 8009b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b7e:	e00f      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fa49 	bl	800a01a <USBD_CtlError>
            err++;
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b8e:	e007      	b.n	8009ba0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa41 	bl	800a01a <USBD_CtlError>
          err++;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b9e:	bf00      	nop
      }
      break;
 8009ba0:	e037      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7c1b      	ldrb	r3, [r3, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d109      	bne.n	8009bbe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb2:	f107 0208 	add.w	r2, r7, #8
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	4798      	blx	r3
 8009bba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bbc:	e029      	b.n	8009c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fa2a 	bl	800a01a <USBD_CtlError>
        err++;
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	72fb      	strb	r3, [r7, #11]
      break;
 8009bcc:	e021      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	7c1b      	ldrb	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10d      	bne.n	8009bf2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	f107 0208 	add.w	r2, r7, #8
 8009be2:	4610      	mov	r0, r2
 8009be4:	4798      	blx	r3
 8009be6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	2207      	movs	r2, #7
 8009bee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bf0:	e00f      	b.n	8009c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fa10 	bl	800a01a <USBD_CtlError>
        err++;
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009c00:	e007      	b.n	8009c12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fa08 	bl	800a01a <USBD_CtlError>
      err++;
 8009c0a:	7afb      	ldrb	r3, [r7, #11]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c10:	bf00      	nop
  }

  if (err != 0U)
 8009c12:	7afb      	ldrb	r3, [r7, #11]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d11e      	bne.n	8009c56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	88db      	ldrh	r3, [r3, #6]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d016      	beq.n	8009c4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c20:	893b      	ldrh	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00e      	beq.n	8009c44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	88da      	ldrh	r2, [r3, #6]
 8009c2a:	893b      	ldrh	r3, [r7, #8]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	bf28      	it	cs
 8009c30:	4613      	movcs	r3, r2
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c36:	893b      	ldrh	r3, [r7, #8]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68f9      	ldr	r1, [r7, #12]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa5d 	bl	800a0fc <USBD_CtlSendData>
 8009c42:	e009      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f9e7 	bl	800a01a <USBD_CtlError>
 8009c4c:	e004      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 faae 	bl	800a1b0 <USBD_CtlSendStatus>
 8009c54:	e000      	b.n	8009c58 <USBD_GetDescriptor+0x2cc>
    return;
 8009c56:	bf00      	nop
  }
}
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop

08009c60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	889b      	ldrh	r3, [r3, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d131      	bne.n	8009cd6 <USBD_SetAddress+0x76>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	88db      	ldrh	r3, [r3, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d12d      	bne.n	8009cd6 <USBD_SetAddress+0x76>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	885b      	ldrh	r3, [r3, #2]
 8009c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c80:	d829      	bhi.n	8009cd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	885b      	ldrh	r3, [r3, #2]
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d104      	bne.n	8009ca4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f9bc 	bl	800a01a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca2:	e01d      	b.n	8009ce0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7bfa      	ldrb	r2, [r7, #15]
 8009ca8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fefb 	bl	800aaac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fa7a 	bl	800a1b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d004      	beq.n	8009ccc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cca:	e009      	b.n	8009ce0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd4:	e004      	b.n	8009ce0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f99e 	bl	800a01a <USBD_CtlError>
  }
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	885b      	ldrh	r3, [r3, #2]
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	4b4e      	ldr	r3, [pc, #312]	; (8009e38 <USBD_SetConfig+0x150>)
 8009cfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d00:	4b4d      	ldr	r3, [pc, #308]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d905      	bls.n	8009d14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f985 	bl	800a01a <USBD_CtlError>
    return USBD_FAIL;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e08c      	b.n	8009e2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d002      	beq.n	8009d26 <USBD_SetConfig+0x3e>
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d029      	beq.n	8009d78 <USBD_SetConfig+0x90>
 8009d24:	e075      	b.n	8009e12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d26:	4b44      	ldr	r3, [pc, #272]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d020      	beq.n	8009d70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d2e:	4b42      	ldr	r3, [pc, #264]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d38:	4b3f      	ldr	r3, [pc, #252]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7fe ffe7 	bl	8008d12 <USBD_SetClassConfig>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d008      	beq.n	8009d60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f962 	bl	800a01a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2202      	movs	r2, #2
 8009d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d5e:	e065      	b.n	8009e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fa25 	bl	800a1b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d6e:	e05d      	b.n	8009e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fa1d 	bl	800a1b0 <USBD_CtlSendStatus>
      break;
 8009d76:	e059      	b.n	8009e2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d78:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d112      	bne.n	8009da6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d88:	4b2b      	ldr	r3, [pc, #172]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d92:	4b29      	ldr	r3, [pc, #164]	; (8009e38 <USBD_SetConfig+0x150>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7fe ffd6 	bl	8008d4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa06 	bl	800a1b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009da4:	e042      	b.n	8009e2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009da6:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <USBD_SetConfig+0x150>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d02a      	beq.n	8009e0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7fe ffc4 	bl	8008d4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009dc2:	4b1d      	ldr	r3, [pc, #116]	; (8009e38 <USBD_SetConfig+0x150>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <USBD_SetConfig+0x150>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7fe ff9d 	bl	8008d12 <USBD_SetClassConfig>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00f      	beq.n	8009e02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f918 	bl	800a01a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fe ffa9 	bl	8008d4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e00:	e014      	b.n	8009e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f9d4 	bl	800a1b0 <USBD_CtlSendStatus>
      break;
 8009e08:	e010      	b.n	8009e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f9d0 	bl	800a1b0 <USBD_CtlSendStatus>
      break;
 8009e10:	e00c      	b.n	8009e2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f900 	bl	800a01a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e1a:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <USBD_SetConfig+0x150>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7fe ff92 	bl	8008d4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e26:	2303      	movs	r3, #3
 8009e28:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2a:	bf00      	nop
  }

  return ret;
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000bd8 	.word	0x20000bd8

08009e3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88db      	ldrh	r3, [r3, #6]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d004      	beq.n	8009e58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f8e2 	bl	800a01a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e56:	e023      	b.n	8009ea0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	dc02      	bgt.n	8009e6a <USBD_GetConfig+0x2e>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dc03      	bgt.n	8009e70 <USBD_GetConfig+0x34>
 8009e68:	e015      	b.n	8009e96 <USBD_GetConfig+0x5a>
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d00b      	beq.n	8009e86 <USBD_GetConfig+0x4a>
 8009e6e:	e012      	b.n	8009e96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3308      	adds	r3, #8
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f93c 	bl	800a0fc <USBD_CtlSendData>
        break;
 8009e84:	e00c      	b.n	8009ea0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3304      	adds	r3, #4
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f934 	bl	800a0fc <USBD_CtlSendData>
        break;
 8009e94:	e004      	b.n	8009ea0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f8be 	bl	800a01a <USBD_CtlError>
        break;
 8009e9e:	bf00      	nop
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d81e      	bhi.n	8009efe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	88db      	ldrh	r3, [r3, #6]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d004      	beq.n	8009ed2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f8a5 	bl	800a01a <USBD_CtlError>
        break;
 8009ed0:	e01a      	b.n	8009f08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d005      	beq.n	8009eee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f043 0202 	orr.w	r2, r3, #2
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f900 	bl	800a0fc <USBD_CtlSendData>
      break;
 8009efc:	e004      	b.n	8009f08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f88a 	bl	800a01a <USBD_CtlError>
      break;
 8009f06:	bf00      	nop
  }
}
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	885b      	ldrh	r3, [r3, #2]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d107      	bne.n	8009f32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f940 	bl	800a1b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f30:	e013      	b.n	8009f5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	885b      	ldrh	r3, [r3, #2]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d10b      	bne.n	8009f52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	889b      	ldrh	r3, [r3, #4]
 8009f3e:	0a1b      	lsrs	r3, r3, #8
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f930 	bl	800a1b0 <USBD_CtlSendStatus>
}
 8009f50:	e003      	b.n	8009f5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f860 	bl	800a01a <USBD_CtlError>
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	3b01      	subs	r3, #1
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d80b      	bhi.n	8009f92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	885b      	ldrh	r3, [r3, #2]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d10c      	bne.n	8009f9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f910 	bl	800a1b0 <USBD_CtlSendStatus>
      }
      break;
 8009f90:	e004      	b.n	8009f9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f840 	bl	800a01a <USBD_CtlError>
      break;
 8009f9a:	e000      	b.n	8009f9e <USBD_ClrFeature+0x3c>
      break;
 8009f9c:	bf00      	nop
  }
}
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	781a      	ldrb	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	781a      	ldrb	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fa41 	bl	8009458 <SWAPBYTE>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	461a      	mov	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff fa34 	bl	8009458 <SWAPBYTE>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3301      	adds	r3, #1
 800a002:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f7ff fa27 	bl	8009458 <SWAPBYTE>
 800a00a:	4603      	mov	r3, r0
 800a00c:	461a      	mov	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	80da      	strh	r2, [r3, #6]
}
 800a012:	bf00      	nop
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a024:	2180      	movs	r1, #128	; 0x80
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fcd6 	bl	800a9d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a02c:	2100      	movs	r1, #0
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fcd2 	bl	800a9d8 <USBD_LL_StallEP>
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d036      	beq.n	800a0c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a056:	6938      	ldr	r0, [r7, #16]
 800a058:	f000 f836 	bl	800a0c8 <USBD_GetLen>
 800a05c:	4603      	mov	r3, r0
 800a05e:	3301      	adds	r3, #1
 800a060:	b29b      	uxth	r3, r3
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	4413      	add	r3, r2
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7812      	ldrb	r2, [r2, #0]
 800a074:	701a      	strb	r2, [r3, #0]
  idx++;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	3301      	adds	r3, #1
 800a07a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	2203      	movs	r2, #3
 800a084:	701a      	strb	r2, [r3, #0]
  idx++;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	3301      	adds	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a08c:	e013      	b.n	800a0b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	4413      	add	r3, r2
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	7812      	ldrb	r2, [r2, #0]
 800a098:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	3301      	adds	r3, #1
 800a09e:	613b      	str	r3, [r7, #16]
    idx++;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e7      	bne.n	800a08e <USBD_GetString+0x52>
 800a0be:	e000      	b.n	800a0c2 <USBD_GetString+0x86>
    return;
 800a0c0:	bf00      	nop
  }
}
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0d8:	e005      	b.n	800a0e6 <USBD_GetLen+0x1e>
  {
    len++;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1f5      	bne.n	800a0da <USBD_GetLen+0x12>
  }

  return len;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	2100      	movs	r1, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 fce1 	bl	800aaea <USBD_LL_Transmit>

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	2100      	movs	r1, #0
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 fcd0 	bl	800aaea <USBD_LL_Transmit>

  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2203      	movs	r2, #3
 800a164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	2100      	movs	r1, #0
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 fcd4 	bl	800ab2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	60b9      	str	r1, [r7, #8]
 800a198:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	2100      	movs	r1, #0
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 fcc3 	bl	800ab2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2204      	movs	r2, #4
 800a1bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fc8f 	bl	800aaea <USBD_LL_Transmit>

  return USBD_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b082      	sub	sp, #8
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2205      	movs	r2, #5
 800a1e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fc9d 	bl	800ab2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a200:	2200      	movs	r2, #0
 800a202:	4912      	ldr	r1, [pc, #72]	; (800a24c <MX_USB_DEVICE_Init+0x50>)
 800a204:	4812      	ldr	r0, [pc, #72]	; (800a250 <MX_USB_DEVICE_Init+0x54>)
 800a206:	f7fe fd07 	bl	8008c18 <USBD_Init>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a210:	f7f7 fbf4 	bl	80019fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a214:	490f      	ldr	r1, [pc, #60]	; (800a254 <MX_USB_DEVICE_Init+0x58>)
 800a216:	480e      	ldr	r0, [pc, #56]	; (800a250 <MX_USB_DEVICE_Init+0x54>)
 800a218:	f7fe fd2e 	bl	8008c78 <USBD_RegisterClass>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a222:	f7f7 fbeb 	bl	80019fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a226:	490c      	ldr	r1, [pc, #48]	; (800a258 <MX_USB_DEVICE_Init+0x5c>)
 800a228:	4809      	ldr	r0, [pc, #36]	; (800a250 <MX_USB_DEVICE_Init+0x54>)
 800a22a:	f7fe fc1f 	bl	8008a6c <USBD_CDC_RegisterInterface>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a234:	f7f7 fbe2 	bl	80019fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a238:	4805      	ldr	r0, [pc, #20]	; (800a250 <MX_USB_DEVICE_Init+0x54>)
 800a23a:	f7fe fd53 	bl	8008ce4 <USBD_Start>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a244:	f7f7 fbda 	bl	80019fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a248:	bf00      	nop
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	200000ac 	.word	0x200000ac
 800a250:	20000bdc 	.word	0x20000bdc
 800a254:	20000018 	.word	0x20000018
 800a258:	20000098 	.word	0x20000098

0800a25c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a260:	2200      	movs	r2, #0
 800a262:	4905      	ldr	r1, [pc, #20]	; (800a278 <CDC_Init_FS+0x1c>)
 800a264:	4805      	ldr	r0, [pc, #20]	; (800a27c <CDC_Init_FS+0x20>)
 800a266:	f7fe fc1b 	bl	8008aa0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a26a:	4905      	ldr	r1, [pc, #20]	; (800a280 <CDC_Init_FS+0x24>)
 800a26c:	4803      	ldr	r0, [pc, #12]	; (800a27c <CDC_Init_FS+0x20>)
 800a26e:	f7fe fc39 	bl	8008ae4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a274:	4618      	mov	r0, r3
 800a276:	bd80      	pop	{r7, pc}
 800a278:	200016b8 	.word	0x200016b8
 800a27c:	20000bdc 	.word	0x20000bdc
 800a280:	20000eb8 	.word	0x20000eb8

0800a284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a284:	b480      	push	{r7}
 800a286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	71fb      	strb	r3, [r7, #7]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b23      	cmp	r3, #35	; 0x23
 800a2a8:	d84a      	bhi.n	800a340 <CDC_Control_FS+0xac>
 800a2aa:	a201      	add	r2, pc, #4	; (adr r2, 800a2b0 <CDC_Control_FS+0x1c>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a341 	.word	0x0800a341
 800a2b4:	0800a341 	.word	0x0800a341
 800a2b8:	0800a341 	.word	0x0800a341
 800a2bc:	0800a341 	.word	0x0800a341
 800a2c0:	0800a341 	.word	0x0800a341
 800a2c4:	0800a341 	.word	0x0800a341
 800a2c8:	0800a341 	.word	0x0800a341
 800a2cc:	0800a341 	.word	0x0800a341
 800a2d0:	0800a341 	.word	0x0800a341
 800a2d4:	0800a341 	.word	0x0800a341
 800a2d8:	0800a341 	.word	0x0800a341
 800a2dc:	0800a341 	.word	0x0800a341
 800a2e0:	0800a341 	.word	0x0800a341
 800a2e4:	0800a341 	.word	0x0800a341
 800a2e8:	0800a341 	.word	0x0800a341
 800a2ec:	0800a341 	.word	0x0800a341
 800a2f0:	0800a341 	.word	0x0800a341
 800a2f4:	0800a341 	.word	0x0800a341
 800a2f8:	0800a341 	.word	0x0800a341
 800a2fc:	0800a341 	.word	0x0800a341
 800a300:	0800a341 	.word	0x0800a341
 800a304:	0800a341 	.word	0x0800a341
 800a308:	0800a341 	.word	0x0800a341
 800a30c:	0800a341 	.word	0x0800a341
 800a310:	0800a341 	.word	0x0800a341
 800a314:	0800a341 	.word	0x0800a341
 800a318:	0800a341 	.word	0x0800a341
 800a31c:	0800a341 	.word	0x0800a341
 800a320:	0800a341 	.word	0x0800a341
 800a324:	0800a341 	.word	0x0800a341
 800a328:	0800a341 	.word	0x0800a341
 800a32c:	0800a341 	.word	0x0800a341
 800a330:	0800a341 	.word	0x0800a341
 800a334:	0800a341 	.word	0x0800a341
 800a338:	0800a341 	.word	0x0800a341
 800a33c:	0800a341 	.word	0x0800a341
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a340:	bf00      	nop
  }

  return (USBD_OK);
 800a342:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	4805      	ldr	r0, [pc, #20]	; (800a374 <CDC_Receive_FS+0x24>)
 800a35e:	f7fe fbc1 	bl	8008ae4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a362:	4804      	ldr	r0, [pc, #16]	; (800a374 <CDC_Receive_FS+0x24>)
 800a364:	f7fe fc22 	bl	8008bac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a368:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000bdc 	.word	0x20000bdc

0800a378 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a388:	4b0d      	ldr	r3, [pc, #52]	; (800a3c0 <CDC_Transmit_FS+0x48>)
 800a38a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a38e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e00b      	b.n	800a3b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a39e:	887b      	ldrh	r3, [r7, #2]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	4806      	ldr	r0, [pc, #24]	; (800a3c0 <CDC_Transmit_FS+0x48>)
 800a3a6:	f7fe fb7b 	bl	8008aa0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3aa:	4805      	ldr	r0, [pc, #20]	; (800a3c0 <CDC_Transmit_FS+0x48>)
 800a3ac:	f7fe fbb8 	bl	8008b20 <USBD_CDC_TransmitPacket>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000bdc 	.word	0x20000bdc

0800a3c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	371c      	adds	r7, #28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	6039      	str	r1, [r7, #0]
 800a3f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2212      	movs	r2, #18
 800a3f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3fa:	4b03      	ldr	r3, [pc, #12]	; (800a408 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	200000c8 	.word	0x200000c8

0800a40c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	6039      	str	r1, [r7, #0]
 800a416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	2204      	movs	r2, #4
 800a41c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a41e:	4b03      	ldr	r3, [pc, #12]	; (800a42c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a420:	4618      	mov	r0, r3
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	200000dc 	.word	0x200000dc

0800a430 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	6039      	str	r1, [r7, #0]
 800a43a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d105      	bne.n	800a44e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	4907      	ldr	r1, [pc, #28]	; (800a464 <USBD_FS_ProductStrDescriptor+0x34>)
 800a446:	4808      	ldr	r0, [pc, #32]	; (800a468 <USBD_FS_ProductStrDescriptor+0x38>)
 800a448:	f7ff fdf8 	bl	800a03c <USBD_GetString>
 800a44c:	e004      	b.n	800a458 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	4904      	ldr	r1, [pc, #16]	; (800a464 <USBD_FS_ProductStrDescriptor+0x34>)
 800a452:	4805      	ldr	r0, [pc, #20]	; (800a468 <USBD_FS_ProductStrDescriptor+0x38>)
 800a454:	f7ff fdf2 	bl	800a03c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a458:	4b02      	ldr	r3, [pc, #8]	; (800a464 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20001eb8 	.word	0x20001eb8
 800a468:	0800bbf0 	.word	0x0800bbf0

0800a46c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	6039      	str	r1, [r7, #0]
 800a476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	4904      	ldr	r1, [pc, #16]	; (800a48c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a47c:	4804      	ldr	r0, [pc, #16]	; (800a490 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a47e:	f7ff fddd 	bl	800a03c <USBD_GetString>
  return USBD_StrDesc;
 800a482:	4b02      	ldr	r3, [pc, #8]	; (800a48c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20001eb8 	.word	0x20001eb8
 800a490:	0800bbfc 	.word	0x0800bbfc

0800a494 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	6039      	str	r1, [r7, #0]
 800a49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	221a      	movs	r2, #26
 800a4a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4a6:	f000 f843 	bl	800a530 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4aa:	4b02      	ldr	r3, [pc, #8]	; (800a4b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	200000e0 	.word	0x200000e0

0800a4b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	6039      	str	r1, [r7, #0]
 800a4c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4c4:	79fb      	ldrb	r3, [r7, #7]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d105      	bne.n	800a4d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	4907      	ldr	r1, [pc, #28]	; (800a4ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4ce:	4808      	ldr	r0, [pc, #32]	; (800a4f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4d0:	f7ff fdb4 	bl	800a03c <USBD_GetString>
 800a4d4:	e004      	b.n	800a4e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	4904      	ldr	r1, [pc, #16]	; (800a4ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4da:	4805      	ldr	r0, [pc, #20]	; (800a4f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4dc:	f7ff fdae 	bl	800a03c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4e0:	4b02      	ldr	r3, [pc, #8]	; (800a4ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20001eb8 	.word	0x20001eb8
 800a4f0:	0800bc10 	.word	0x0800bc10

0800a4f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	6039      	str	r1, [r7, #0]
 800a4fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d105      	bne.n	800a512 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	4907      	ldr	r1, [pc, #28]	; (800a528 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a50a:	4808      	ldr	r0, [pc, #32]	; (800a52c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a50c:	f7ff fd96 	bl	800a03c <USBD_GetString>
 800a510:	e004      	b.n	800a51c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	4904      	ldr	r1, [pc, #16]	; (800a528 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a516:	4805      	ldr	r0, [pc, #20]	; (800a52c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a518:	f7ff fd90 	bl	800a03c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a51c:	4b02      	ldr	r3, [pc, #8]	; (800a528 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20001eb8 	.word	0x20001eb8
 800a52c:	0800bc1c 	.word	0x0800bc1c

0800a530 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a536:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <Get_SerialNum+0x44>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a53c:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <Get_SerialNum+0x48>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a542:	4b0e      	ldr	r3, [pc, #56]	; (800a57c <Get_SerialNum+0x4c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4413      	add	r3, r2
 800a54e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d009      	beq.n	800a56a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a556:	2208      	movs	r2, #8
 800a558:	4909      	ldr	r1, [pc, #36]	; (800a580 <Get_SerialNum+0x50>)
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 f814 	bl	800a588 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a560:	2204      	movs	r2, #4
 800a562:	4908      	ldr	r1, [pc, #32]	; (800a584 <Get_SerialNum+0x54>)
 800a564:	68b8      	ldr	r0, [r7, #8]
 800a566:	f000 f80f 	bl	800a588 <IntToUnicode>
  }
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	1fff7a10 	.word	0x1fff7a10
 800a578:	1fff7a14 	.word	0x1fff7a14
 800a57c:	1fff7a18 	.word	0x1fff7a18
 800a580:	200000e2 	.word	0x200000e2
 800a584:	200000f2 	.word	0x200000f2

0800a588 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a588:	b480      	push	{r7}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	4613      	mov	r3, r2
 800a594:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a59a:	2300      	movs	r3, #0
 800a59c:	75fb      	strb	r3, [r7, #23]
 800a59e:	e027      	b.n	800a5f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	0f1b      	lsrs	r3, r3, #28
 800a5a4:	2b09      	cmp	r3, #9
 800a5a6:	d80b      	bhi.n	800a5c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	0f1b      	lsrs	r3, r3, #28
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	440b      	add	r3, r1
 800a5b8:	3230      	adds	r2, #48	; 0x30
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e00a      	b.n	800a5d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	0f1b      	lsrs	r3, r3, #28
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	440b      	add	r3, r1
 800a5d0:	3237      	adds	r2, #55	; 0x37
 800a5d2:	b2d2      	uxtb	r2, r2
 800a5d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	75fb      	strb	r3, [r7, #23]
 800a5f0:	7dfa      	ldrb	r2, [r7, #23]
 800a5f2:	79fb      	ldrb	r3, [r7, #7]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d3d3      	bcc.n	800a5a0 <IntToUnicode+0x18>
  }
}
 800a5f8:	bf00      	nop
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
	...

0800a608 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08a      	sub	sp, #40	; 0x28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a610:	f107 0314 	add.w	r3, r7, #20
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	605a      	str	r2, [r3, #4]
 800a61a:	609a      	str	r2, [r3, #8]
 800a61c:	60da      	str	r2, [r3, #12]
 800a61e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a628:	d13a      	bne.n	800a6a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a62a:	2300      	movs	r3, #0
 800a62c:	613b      	str	r3, [r7, #16]
 800a62e:	4b1e      	ldr	r3, [pc, #120]	; (800a6a8 <HAL_PCD_MspInit+0xa0>)
 800a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a632:	4a1d      	ldr	r2, [pc, #116]	; (800a6a8 <HAL_PCD_MspInit+0xa0>)
 800a634:	f043 0301 	orr.w	r3, r3, #1
 800a638:	6313      	str	r3, [r2, #48]	; 0x30
 800a63a:	4b1b      	ldr	r3, [pc, #108]	; (800a6a8 <HAL_PCD_MspInit+0xa0>)
 800a63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	613b      	str	r3, [r7, #16]
 800a644:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a646:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a64a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64c:	2302      	movs	r3, #2
 800a64e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a654:	2303      	movs	r3, #3
 800a656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a658:	230a      	movs	r3, #10
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a65c:	f107 0314 	add.w	r3, r7, #20
 800a660:	4619      	mov	r1, r3
 800a662:	4812      	ldr	r0, [pc, #72]	; (800a6ac <HAL_PCD_MspInit+0xa4>)
 800a664:	f7f8 faae 	bl	8002bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a668:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <HAL_PCD_MspInit+0xa0>)
 800a66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66c:	4a0e      	ldr	r2, [pc, #56]	; (800a6a8 <HAL_PCD_MspInit+0xa0>)
 800a66e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a672:	6353      	str	r3, [r2, #52]	; 0x34
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <HAL_PCD_MspInit+0xa0>)
 800a67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67c:	4a0a      	ldr	r2, [pc, #40]	; (800a6a8 <HAL_PCD_MspInit+0xa0>)
 800a67e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a682:	6453      	str	r3, [r2, #68]	; 0x44
 800a684:	4b08      	ldr	r3, [pc, #32]	; (800a6a8 <HAL_PCD_MspInit+0xa0>)
 800a686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a690:	2200      	movs	r2, #0
 800a692:	2100      	movs	r1, #0
 800a694:	2043      	movs	r0, #67	; 0x43
 800a696:	f7f7 fe58 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a69a:	2043      	movs	r0, #67	; 0x43
 800a69c:	f7f7 fe71 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a6a0:	bf00      	nop
 800a6a2:	3728      	adds	r7, #40	; 0x28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	40023800 	.word	0x40023800
 800a6ac:	40020000 	.word	0x40020000

0800a6b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f7fe fb59 	bl	8008d7e <USBD_LL_SetupStage>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6e6:	78fa      	ldrb	r2, [r7, #3]
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	440b      	add	r3, r1
 800a6f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	78fb      	ldrb	r3, [r7, #3]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	f7fe fb93 	bl	8008e28 <USBD_LL_DataOutStage>
}
 800a702:	bf00      	nop
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b082      	sub	sp, #8
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	460b      	mov	r3, r1
 800a714:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a71c:	78fa      	ldrb	r2, [r7, #3]
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	4613      	mov	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	4413      	add	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	440b      	add	r3, r1
 800a72a:	334c      	adds	r3, #76	; 0x4c
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	4619      	mov	r1, r3
 800a732:	f7fe fc2c 	bl	8008f8e <USBD_LL_DataInStage>
}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fe fd60 	bl	8009212 <USBD_LL_SOF>
}
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a762:	2301      	movs	r3, #1
 800a764:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d001      	beq.n	800a772 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a76e:	f7f7 f945 	bl	80019fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a778:	7bfa      	ldrb	r2, [r7, #15]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fe fd0a 	bl	8009196 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fcb2 	bl	80090f2 <USBD_LL_Reset>
}
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fd05 	bl	80091b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6812      	ldr	r2, [r2, #0]
 800a7ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7be:	f043 0301 	orr.w	r3, r3, #1
 800a7c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7cc:	4b04      	ldr	r3, [pc, #16]	; (800a7e0 <HAL_PCD_SuspendCallback+0x48>)
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	4a03      	ldr	r2, [pc, #12]	; (800a7e0 <HAL_PCD_SuspendCallback+0x48>)
 800a7d2:	f043 0306 	orr.w	r3, r3, #6
 800a7d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	e000ed00 	.word	0xe000ed00

0800a7e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe fcf5 	bl	80091e2 <USBD_LL_Resume>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	4611      	mov	r1, r2
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fd4d 	bl	80092b6 <USBD_LL_IsoOUTIncomplete>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a836:	78fa      	ldrb	r2, [r7, #3]
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fd09 	bl	8009252 <USBD_LL_IsoINIncomplete>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe fd5f 	bl	800931a <USBD_LL_DevConnected>
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fd5c 	bl	8009330 <USBD_LL_DevDisconnected>
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d13c      	bne.n	800a90a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a890:	4a20      	ldr	r2, [pc, #128]	; (800a914 <USBD_LL_Init+0x94>)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a1e      	ldr	r2, [pc, #120]	; (800a914 <USBD_LL_Init+0x94>)
 800a89c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a8a0:	4b1c      	ldr	r3, [pc, #112]	; (800a914 <USBD_LL_Init+0x94>)
 800a8a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a8a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a8a8:	4b1a      	ldr	r3, [pc, #104]	; (800a914 <USBD_LL_Init+0x94>)
 800a8aa:	2204      	movs	r2, #4
 800a8ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a8ae:	4b19      	ldr	r3, [pc, #100]	; (800a914 <USBD_LL_Init+0x94>)
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a8b4:	4b17      	ldr	r3, [pc, #92]	; (800a914 <USBD_LL_Init+0x94>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a8ba:	4b16      	ldr	r3, [pc, #88]	; (800a914 <USBD_LL_Init+0x94>)
 800a8bc:	2202      	movs	r2, #2
 800a8be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8c0:	4b14      	ldr	r3, [pc, #80]	; (800a914 <USBD_LL_Init+0x94>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8c6:	4b13      	ldr	r3, [pc, #76]	; (800a914 <USBD_LL_Init+0x94>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8cc:	4b11      	ldr	r3, [pc, #68]	; (800a914 <USBD_LL_Init+0x94>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8d2:	4b10      	ldr	r3, [pc, #64]	; (800a914 <USBD_LL_Init+0x94>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8d8:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <USBD_LL_Init+0x94>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8de:	480d      	ldr	r0, [pc, #52]	; (800a914 <USBD_LL_Init+0x94>)
 800a8e0:	f7f8 fb27 	bl	8002f32 <HAL_PCD_Init>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8ea:	f7f7 f887 	bl	80019fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8ee:	2180      	movs	r1, #128	; 0x80
 800a8f0:	4808      	ldr	r0, [pc, #32]	; (800a914 <USBD_LL_Init+0x94>)
 800a8f2:	f7f9 fd7e 	bl	80043f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8f6:	2240      	movs	r2, #64	; 0x40
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	4806      	ldr	r0, [pc, #24]	; (800a914 <USBD_LL_Init+0x94>)
 800a8fc:	f7f9 fd32 	bl	8004364 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a900:	2280      	movs	r2, #128	; 0x80
 800a902:	2101      	movs	r1, #1
 800a904:	4803      	ldr	r0, [pc, #12]	; (800a914 <USBD_LL_Init+0x94>)
 800a906:	f7f9 fd2d 	bl	8004364 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	200020b8 	.word	0x200020b8

0800a918 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f8 fc1c 	bl	800316c <HAL_PCD_Start>
 800a934:	4603      	mov	r3, r0
 800a936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 f942 	bl	800abc4 <USBD_Get_USB_Status>
 800a940:	4603      	mov	r3, r0
 800a942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a944:	7bbb      	ldrb	r3, [r7, #14]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	4608      	mov	r0, r1
 800a958:	4611      	mov	r1, r2
 800a95a:	461a      	mov	r2, r3
 800a95c:	4603      	mov	r3, r0
 800a95e:	70fb      	strb	r3, [r7, #3]
 800a960:	460b      	mov	r3, r1
 800a962:	70bb      	strb	r3, [r7, #2]
 800a964:	4613      	mov	r3, r2
 800a966:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a976:	78bb      	ldrb	r3, [r7, #2]
 800a978:	883a      	ldrh	r2, [r7, #0]
 800a97a:	78f9      	ldrb	r1, [r7, #3]
 800a97c:	f7f9 f8ed 	bl	8003b5a <HAL_PCD_EP_Open>
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f91c 	bl	800abc4 <USBD_Get_USB_Status>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a990:	7bbb      	ldrb	r3, [r7, #14]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b084      	sub	sp, #16
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9b4:	78fa      	ldrb	r2, [r7, #3]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7f9 f936 	bl	8003c2a <HAL_PCD_EP_Close>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f000 f8fd 	bl	800abc4 <USBD_Get_USB_Status>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9f2:	78fa      	ldrb	r2, [r7, #3]
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7f9 fa0e 	bl	8003e18 <HAL_PCD_EP_SetStall>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 f8de 	bl	800abc4 <USBD_Get_USB_Status>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
 800aa1e:	460b      	mov	r3, r1
 800aa20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7f9 fa53 	bl	8003ee0 <HAL_PCD_EP_ClrStall>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa3e:	7bfb      	ldrb	r3, [r7, #15]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 f8bf 	bl	800abc4 <USBD_Get_USB_Status>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	da0b      	bge.n	800aa88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	4413      	add	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	440b      	add	r3, r1
 800aa82:	333e      	adds	r3, #62	; 0x3e
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	e00b      	b.n	800aaa0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa8e:	68f9      	ldr	r1, [r7, #12]
 800aa90:	4613      	mov	r3, r2
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	4413      	add	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	440b      	add	r3, r1
 800aa9a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aa9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aac6:	78fa      	ldrb	r2, [r7, #3]
 800aac8:	4611      	mov	r1, r2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7f9 f820 	bl	8003b10 <HAL_PCD_SetAddress>
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 f874 	bl	800abc4 <USBD_Get_USB_Status>
 800aadc:	4603      	mov	r3, r0
 800aade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b086      	sub	sp, #24
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	60f8      	str	r0, [r7, #12]
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	603b      	str	r3, [r7, #0]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab08:	7af9      	ldrb	r1, [r7, #11]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	f7f9 f939 	bl	8003d84 <HAL_PCD_EP_Transmit>
 800ab12:	4603      	mov	r3, r0
 800ab14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 f853 	bl	800abc4 <USBD_Get_USB_Status>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab22:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	607a      	str	r2, [r7, #4]
 800ab36:	603b      	str	r3, [r7, #0]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab4a:	7af9      	ldrb	r1, [r7, #11]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	f7f9 f8b5 	bl	8003cbe <HAL_PCD_EP_Receive>
 800ab54:	4603      	mov	r3, r0
 800ab56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 f832 	bl	800abc4 <USBD_Get_USB_Status>
 800ab60:	4603      	mov	r3, r0
 800ab62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab64:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b082      	sub	sp, #8
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	460b      	mov	r3, r1
 800ab78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab80:	78fa      	ldrb	r2, [r7, #3]
 800ab82:	4611      	mov	r1, r2
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7f9 f8e5 	bl	8003d54 <HAL_PCD_EP_GetRxCount>
 800ab8a:	4603      	mov	r3, r0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab9c:	4b03      	ldr	r3, [pc, #12]	; (800abac <USBD_static_malloc+0x18>)
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	200025c4 	.word	0x200025c4

0800abb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]

}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d817      	bhi.n	800ac08 <USBD_Get_USB_Status+0x44>
 800abd8:	a201      	add	r2, pc, #4	; (adr r2, 800abe0 <USBD_Get_USB_Status+0x1c>)
 800abda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abde:	bf00      	nop
 800abe0:	0800abf1 	.word	0x0800abf1
 800abe4:	0800abf7 	.word	0x0800abf7
 800abe8:	0800abfd 	.word	0x0800abfd
 800abec:	0800ac03 	.word	0x0800ac03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]
    break;
 800abf4:	e00b      	b.n	800ac0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abf6:	2303      	movs	r3, #3
 800abf8:	73fb      	strb	r3, [r7, #15]
    break;
 800abfa:	e008      	b.n	800ac0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abfc:	2301      	movs	r3, #1
 800abfe:	73fb      	strb	r3, [r7, #15]
    break;
 800ac00:	e005      	b.n	800ac0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac02:	2303      	movs	r3, #3
 800ac04:	73fb      	strb	r3, [r7, #15]
    break;
 800ac06:	e002      	b.n	800ac0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0c:	bf00      	nop
  }
  return usb_status;
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <atoi>:
 800ac1c:	220a      	movs	r2, #10
 800ac1e:	2100      	movs	r1, #0
 800ac20:	f000 b902 	b.w	800ae28 <strtol>

0800ac24 <__errno>:
 800ac24:	4b01      	ldr	r3, [pc, #4]	; (800ac2c <__errno+0x8>)
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	200000fc 	.word	0x200000fc

0800ac30 <__libc_init_array>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	4d0d      	ldr	r5, [pc, #52]	; (800ac68 <__libc_init_array+0x38>)
 800ac34:	4c0d      	ldr	r4, [pc, #52]	; (800ac6c <__libc_init_array+0x3c>)
 800ac36:	1b64      	subs	r4, r4, r5
 800ac38:	10a4      	asrs	r4, r4, #2
 800ac3a:	2600      	movs	r6, #0
 800ac3c:	42a6      	cmp	r6, r4
 800ac3e:	d109      	bne.n	800ac54 <__libc_init_array+0x24>
 800ac40:	4d0b      	ldr	r5, [pc, #44]	; (800ac70 <__libc_init_array+0x40>)
 800ac42:	4c0c      	ldr	r4, [pc, #48]	; (800ac74 <__libc_init_array+0x44>)
 800ac44:	f000 fd3a 	bl	800b6bc <_init>
 800ac48:	1b64      	subs	r4, r4, r5
 800ac4a:	10a4      	asrs	r4, r4, #2
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	42a6      	cmp	r6, r4
 800ac50:	d105      	bne.n	800ac5e <__libc_init_array+0x2e>
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac58:	4798      	blx	r3
 800ac5a:	3601      	adds	r6, #1
 800ac5c:	e7ee      	b.n	800ac3c <__libc_init_array+0xc>
 800ac5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac62:	4798      	blx	r3
 800ac64:	3601      	adds	r6, #1
 800ac66:	e7f2      	b.n	800ac4e <__libc_init_array+0x1e>
 800ac68:	0800bd88 	.word	0x0800bd88
 800ac6c:	0800bd88 	.word	0x0800bd88
 800ac70:	0800bd88 	.word	0x0800bd88
 800ac74:	0800bd8c 	.word	0x0800bd8c

0800ac78 <memcpy>:
 800ac78:	440a      	add	r2, r1
 800ac7a:	4291      	cmp	r1, r2
 800ac7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac80:	d100      	bne.n	800ac84 <memcpy+0xc>
 800ac82:	4770      	bx	lr
 800ac84:	b510      	push	{r4, lr}
 800ac86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac8e:	4291      	cmp	r1, r2
 800ac90:	d1f9      	bne.n	800ac86 <memcpy+0xe>
 800ac92:	bd10      	pop	{r4, pc}

0800ac94 <memset>:
 800ac94:	4402      	add	r2, r0
 800ac96:	4603      	mov	r3, r0
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d100      	bne.n	800ac9e <memset+0xa>
 800ac9c:	4770      	bx	lr
 800ac9e:	f803 1b01 	strb.w	r1, [r3], #1
 800aca2:	e7f9      	b.n	800ac98 <memset+0x4>

0800aca4 <siprintf>:
 800aca4:	b40e      	push	{r1, r2, r3}
 800aca6:	b500      	push	{lr}
 800aca8:	b09c      	sub	sp, #112	; 0x70
 800acaa:	ab1d      	add	r3, sp, #116	; 0x74
 800acac:	9002      	str	r0, [sp, #8]
 800acae:	9006      	str	r0, [sp, #24]
 800acb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acb4:	4809      	ldr	r0, [pc, #36]	; (800acdc <siprintf+0x38>)
 800acb6:	9107      	str	r1, [sp, #28]
 800acb8:	9104      	str	r1, [sp, #16]
 800acba:	4909      	ldr	r1, [pc, #36]	; (800ace0 <siprintf+0x3c>)
 800acbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc0:	9105      	str	r1, [sp, #20]
 800acc2:	6800      	ldr	r0, [r0, #0]
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	a902      	add	r1, sp, #8
 800acc8:	f000 f914 	bl	800aef4 <_svfiprintf_r>
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	2200      	movs	r2, #0
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	b01c      	add	sp, #112	; 0x70
 800acd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd8:	b003      	add	sp, #12
 800acda:	4770      	bx	lr
 800acdc:	200000fc 	.word	0x200000fc
 800ace0:	ffff0208 	.word	0xffff0208

0800ace4 <strchr>:
 800ace4:	b2c9      	uxtb	r1, r1
 800ace6:	4603      	mov	r3, r0
 800ace8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acec:	b11a      	cbz	r2, 800acf6 <strchr+0x12>
 800acee:	428a      	cmp	r2, r1
 800acf0:	d1f9      	bne.n	800ace6 <strchr+0x2>
 800acf2:	4618      	mov	r0, r3
 800acf4:	4770      	bx	lr
 800acf6:	2900      	cmp	r1, #0
 800acf8:	bf18      	it	ne
 800acfa:	2300      	movne	r3, #0
 800acfc:	e7f9      	b.n	800acf2 <strchr+0xe>

0800acfe <strncpy>:
 800acfe:	b510      	push	{r4, lr}
 800ad00:	3901      	subs	r1, #1
 800ad02:	4603      	mov	r3, r0
 800ad04:	b132      	cbz	r2, 800ad14 <strncpy+0x16>
 800ad06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad0a:	f803 4b01 	strb.w	r4, [r3], #1
 800ad0e:	3a01      	subs	r2, #1
 800ad10:	2c00      	cmp	r4, #0
 800ad12:	d1f7      	bne.n	800ad04 <strncpy+0x6>
 800ad14:	441a      	add	r2, r3
 800ad16:	2100      	movs	r1, #0
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d100      	bne.n	800ad1e <strncpy+0x20>
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad22:	e7f9      	b.n	800ad18 <strncpy+0x1a>

0800ad24 <_strtol_l.constprop.0>:
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2a:	d001      	beq.n	800ad30 <_strtol_l.constprop.0+0xc>
 800ad2c:	2b24      	cmp	r3, #36	; 0x24
 800ad2e:	d906      	bls.n	800ad3e <_strtol_l.constprop.0+0x1a>
 800ad30:	f7ff ff78 	bl	800ac24 <__errno>
 800ad34:	2316      	movs	r3, #22
 800ad36:	6003      	str	r3, [r0, #0]
 800ad38:	2000      	movs	r0, #0
 800ad3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ae24 <_strtol_l.constprop.0+0x100>
 800ad42:	460d      	mov	r5, r1
 800ad44:	462e      	mov	r6, r5
 800ad46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad4a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ad4e:	f017 0708 	ands.w	r7, r7, #8
 800ad52:	d1f7      	bne.n	800ad44 <_strtol_l.constprop.0+0x20>
 800ad54:	2c2d      	cmp	r4, #45	; 0x2d
 800ad56:	d132      	bne.n	800adbe <_strtol_l.constprop.0+0x9a>
 800ad58:	782c      	ldrb	r4, [r5, #0]
 800ad5a:	2701      	movs	r7, #1
 800ad5c:	1cb5      	adds	r5, r6, #2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d05b      	beq.n	800ae1a <_strtol_l.constprop.0+0xf6>
 800ad62:	2b10      	cmp	r3, #16
 800ad64:	d109      	bne.n	800ad7a <_strtol_l.constprop.0+0x56>
 800ad66:	2c30      	cmp	r4, #48	; 0x30
 800ad68:	d107      	bne.n	800ad7a <_strtol_l.constprop.0+0x56>
 800ad6a:	782c      	ldrb	r4, [r5, #0]
 800ad6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad70:	2c58      	cmp	r4, #88	; 0x58
 800ad72:	d14d      	bne.n	800ae10 <_strtol_l.constprop.0+0xec>
 800ad74:	786c      	ldrb	r4, [r5, #1]
 800ad76:	2310      	movs	r3, #16
 800ad78:	3502      	adds	r5, #2
 800ad7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad7e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad82:	f04f 0c00 	mov.w	ip, #0
 800ad86:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad8a:	4666      	mov	r6, ip
 800ad8c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad90:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ad94:	f1be 0f09 	cmp.w	lr, #9
 800ad98:	d816      	bhi.n	800adc8 <_strtol_l.constprop.0+0xa4>
 800ad9a:	4674      	mov	r4, lr
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	dd24      	ble.n	800adea <_strtol_l.constprop.0+0xc6>
 800ada0:	f1bc 0f00 	cmp.w	ip, #0
 800ada4:	db1e      	blt.n	800ade4 <_strtol_l.constprop.0+0xc0>
 800ada6:	45b1      	cmp	r9, r6
 800ada8:	d31c      	bcc.n	800ade4 <_strtol_l.constprop.0+0xc0>
 800adaa:	d101      	bne.n	800adb0 <_strtol_l.constprop.0+0x8c>
 800adac:	45a2      	cmp	sl, r4
 800adae:	db19      	blt.n	800ade4 <_strtol_l.constprop.0+0xc0>
 800adb0:	fb06 4603 	mla	r6, r6, r3, r4
 800adb4:	f04f 0c01 	mov.w	ip, #1
 800adb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adbc:	e7e8      	b.n	800ad90 <_strtol_l.constprop.0+0x6c>
 800adbe:	2c2b      	cmp	r4, #43	; 0x2b
 800adc0:	bf04      	itt	eq
 800adc2:	782c      	ldrbeq	r4, [r5, #0]
 800adc4:	1cb5      	addeq	r5, r6, #2
 800adc6:	e7ca      	b.n	800ad5e <_strtol_l.constprop.0+0x3a>
 800adc8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800adcc:	f1be 0f19 	cmp.w	lr, #25
 800add0:	d801      	bhi.n	800add6 <_strtol_l.constprop.0+0xb2>
 800add2:	3c37      	subs	r4, #55	; 0x37
 800add4:	e7e2      	b.n	800ad9c <_strtol_l.constprop.0+0x78>
 800add6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800adda:	f1be 0f19 	cmp.w	lr, #25
 800adde:	d804      	bhi.n	800adea <_strtol_l.constprop.0+0xc6>
 800ade0:	3c57      	subs	r4, #87	; 0x57
 800ade2:	e7db      	b.n	800ad9c <_strtol_l.constprop.0+0x78>
 800ade4:	f04f 3cff 	mov.w	ip, #4294967295
 800ade8:	e7e6      	b.n	800adb8 <_strtol_l.constprop.0+0x94>
 800adea:	f1bc 0f00 	cmp.w	ip, #0
 800adee:	da05      	bge.n	800adfc <_strtol_l.constprop.0+0xd8>
 800adf0:	2322      	movs	r3, #34	; 0x22
 800adf2:	6003      	str	r3, [r0, #0]
 800adf4:	4646      	mov	r6, r8
 800adf6:	b942      	cbnz	r2, 800ae0a <_strtol_l.constprop.0+0xe6>
 800adf8:	4630      	mov	r0, r6
 800adfa:	e79e      	b.n	800ad3a <_strtol_l.constprop.0+0x16>
 800adfc:	b107      	cbz	r7, 800ae00 <_strtol_l.constprop.0+0xdc>
 800adfe:	4276      	negs	r6, r6
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	d0f9      	beq.n	800adf8 <_strtol_l.constprop.0+0xd4>
 800ae04:	f1bc 0f00 	cmp.w	ip, #0
 800ae08:	d000      	beq.n	800ae0c <_strtol_l.constprop.0+0xe8>
 800ae0a:	1e69      	subs	r1, r5, #1
 800ae0c:	6011      	str	r1, [r2, #0]
 800ae0e:	e7f3      	b.n	800adf8 <_strtol_l.constprop.0+0xd4>
 800ae10:	2430      	movs	r4, #48	; 0x30
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1b1      	bne.n	800ad7a <_strtol_l.constprop.0+0x56>
 800ae16:	2308      	movs	r3, #8
 800ae18:	e7af      	b.n	800ad7a <_strtol_l.constprop.0+0x56>
 800ae1a:	2c30      	cmp	r4, #48	; 0x30
 800ae1c:	d0a5      	beq.n	800ad6a <_strtol_l.constprop.0+0x46>
 800ae1e:	230a      	movs	r3, #10
 800ae20:	e7ab      	b.n	800ad7a <_strtol_l.constprop.0+0x56>
 800ae22:	bf00      	nop
 800ae24:	0800bc4d 	.word	0x0800bc4d

0800ae28 <strtol>:
 800ae28:	4613      	mov	r3, r2
 800ae2a:	460a      	mov	r2, r1
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	4802      	ldr	r0, [pc, #8]	; (800ae38 <strtol+0x10>)
 800ae30:	6800      	ldr	r0, [r0, #0]
 800ae32:	f7ff bf77 	b.w	800ad24 <_strtol_l.constprop.0>
 800ae36:	bf00      	nop
 800ae38:	200000fc 	.word	0x200000fc

0800ae3c <__ssputs_r>:
 800ae3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae40:	688e      	ldr	r6, [r1, #8]
 800ae42:	429e      	cmp	r6, r3
 800ae44:	4682      	mov	sl, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	4690      	mov	r8, r2
 800ae4a:	461f      	mov	r7, r3
 800ae4c:	d838      	bhi.n	800aec0 <__ssputs_r+0x84>
 800ae4e:	898a      	ldrh	r2, [r1, #12]
 800ae50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae54:	d032      	beq.n	800aebc <__ssputs_r+0x80>
 800ae56:	6825      	ldr	r5, [r4, #0]
 800ae58:	6909      	ldr	r1, [r1, #16]
 800ae5a:	eba5 0901 	sub.w	r9, r5, r1
 800ae5e:	6965      	ldr	r5, [r4, #20]
 800ae60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae68:	3301      	adds	r3, #1
 800ae6a:	444b      	add	r3, r9
 800ae6c:	106d      	asrs	r5, r5, #1
 800ae6e:	429d      	cmp	r5, r3
 800ae70:	bf38      	it	cc
 800ae72:	461d      	movcc	r5, r3
 800ae74:	0553      	lsls	r3, r2, #21
 800ae76:	d531      	bpl.n	800aedc <__ssputs_r+0xa0>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	f000 fb55 	bl	800b528 <_malloc_r>
 800ae7e:	4606      	mov	r6, r0
 800ae80:	b950      	cbnz	r0, 800ae98 <__ssputs_r+0x5c>
 800ae82:	230c      	movs	r3, #12
 800ae84:	f8ca 3000 	str.w	r3, [sl]
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae8e:	81a3      	strh	r3, [r4, #12]
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae98:	6921      	ldr	r1, [r4, #16]
 800ae9a:	464a      	mov	r2, r9
 800ae9c:	f7ff feec 	bl	800ac78 <memcpy>
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeaa:	81a3      	strh	r3, [r4, #12]
 800aeac:	6126      	str	r6, [r4, #16]
 800aeae:	6165      	str	r5, [r4, #20]
 800aeb0:	444e      	add	r6, r9
 800aeb2:	eba5 0509 	sub.w	r5, r5, r9
 800aeb6:	6026      	str	r6, [r4, #0]
 800aeb8:	60a5      	str	r5, [r4, #8]
 800aeba:	463e      	mov	r6, r7
 800aebc:	42be      	cmp	r6, r7
 800aebe:	d900      	bls.n	800aec2 <__ssputs_r+0x86>
 800aec0:	463e      	mov	r6, r7
 800aec2:	6820      	ldr	r0, [r4, #0]
 800aec4:	4632      	mov	r2, r6
 800aec6:	4641      	mov	r1, r8
 800aec8:	f000 faa8 	bl	800b41c <memmove>
 800aecc:	68a3      	ldr	r3, [r4, #8]
 800aece:	1b9b      	subs	r3, r3, r6
 800aed0:	60a3      	str	r3, [r4, #8]
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	4433      	add	r3, r6
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	2000      	movs	r0, #0
 800aeda:	e7db      	b.n	800ae94 <__ssputs_r+0x58>
 800aedc:	462a      	mov	r2, r5
 800aede:	f000 fb97 	bl	800b610 <_realloc_r>
 800aee2:	4606      	mov	r6, r0
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d1e1      	bne.n	800aeac <__ssputs_r+0x70>
 800aee8:	6921      	ldr	r1, [r4, #16]
 800aeea:	4650      	mov	r0, sl
 800aeec:	f000 fab0 	bl	800b450 <_free_r>
 800aef0:	e7c7      	b.n	800ae82 <__ssputs_r+0x46>
	...

0800aef4 <_svfiprintf_r>:
 800aef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef8:	4698      	mov	r8, r3
 800aefa:	898b      	ldrh	r3, [r1, #12]
 800aefc:	061b      	lsls	r3, r3, #24
 800aefe:	b09d      	sub	sp, #116	; 0x74
 800af00:	4607      	mov	r7, r0
 800af02:	460d      	mov	r5, r1
 800af04:	4614      	mov	r4, r2
 800af06:	d50e      	bpl.n	800af26 <_svfiprintf_r+0x32>
 800af08:	690b      	ldr	r3, [r1, #16]
 800af0a:	b963      	cbnz	r3, 800af26 <_svfiprintf_r+0x32>
 800af0c:	2140      	movs	r1, #64	; 0x40
 800af0e:	f000 fb0b 	bl	800b528 <_malloc_r>
 800af12:	6028      	str	r0, [r5, #0]
 800af14:	6128      	str	r0, [r5, #16]
 800af16:	b920      	cbnz	r0, 800af22 <_svfiprintf_r+0x2e>
 800af18:	230c      	movs	r3, #12
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	e0d1      	b.n	800b0c6 <_svfiprintf_r+0x1d2>
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	616b      	str	r3, [r5, #20]
 800af26:	2300      	movs	r3, #0
 800af28:	9309      	str	r3, [sp, #36]	; 0x24
 800af2a:	2320      	movs	r3, #32
 800af2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af30:	f8cd 800c 	str.w	r8, [sp, #12]
 800af34:	2330      	movs	r3, #48	; 0x30
 800af36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0e0 <_svfiprintf_r+0x1ec>
 800af3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af3e:	f04f 0901 	mov.w	r9, #1
 800af42:	4623      	mov	r3, r4
 800af44:	469a      	mov	sl, r3
 800af46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af4a:	b10a      	cbz	r2, 800af50 <_svfiprintf_r+0x5c>
 800af4c:	2a25      	cmp	r2, #37	; 0x25
 800af4e:	d1f9      	bne.n	800af44 <_svfiprintf_r+0x50>
 800af50:	ebba 0b04 	subs.w	fp, sl, r4
 800af54:	d00b      	beq.n	800af6e <_svfiprintf_r+0x7a>
 800af56:	465b      	mov	r3, fp
 800af58:	4622      	mov	r2, r4
 800af5a:	4629      	mov	r1, r5
 800af5c:	4638      	mov	r0, r7
 800af5e:	f7ff ff6d 	bl	800ae3c <__ssputs_r>
 800af62:	3001      	adds	r0, #1
 800af64:	f000 80aa 	beq.w	800b0bc <_svfiprintf_r+0x1c8>
 800af68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af6a:	445a      	add	r2, fp
 800af6c:	9209      	str	r2, [sp, #36]	; 0x24
 800af6e:	f89a 3000 	ldrb.w	r3, [sl]
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 80a2 	beq.w	800b0bc <_svfiprintf_r+0x1c8>
 800af78:	2300      	movs	r3, #0
 800af7a:	f04f 32ff 	mov.w	r2, #4294967295
 800af7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af82:	f10a 0a01 	add.w	sl, sl, #1
 800af86:	9304      	str	r3, [sp, #16]
 800af88:	9307      	str	r3, [sp, #28]
 800af8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af8e:	931a      	str	r3, [sp, #104]	; 0x68
 800af90:	4654      	mov	r4, sl
 800af92:	2205      	movs	r2, #5
 800af94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af98:	4851      	ldr	r0, [pc, #324]	; (800b0e0 <_svfiprintf_r+0x1ec>)
 800af9a:	f7f5 f929 	bl	80001f0 <memchr>
 800af9e:	9a04      	ldr	r2, [sp, #16]
 800afa0:	b9d8      	cbnz	r0, 800afda <_svfiprintf_r+0xe6>
 800afa2:	06d0      	lsls	r0, r2, #27
 800afa4:	bf44      	itt	mi
 800afa6:	2320      	movmi	r3, #32
 800afa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afac:	0711      	lsls	r1, r2, #28
 800afae:	bf44      	itt	mi
 800afb0:	232b      	movmi	r3, #43	; 0x2b
 800afb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afb6:	f89a 3000 	ldrb.w	r3, [sl]
 800afba:	2b2a      	cmp	r3, #42	; 0x2a
 800afbc:	d015      	beq.n	800afea <_svfiprintf_r+0xf6>
 800afbe:	9a07      	ldr	r2, [sp, #28]
 800afc0:	4654      	mov	r4, sl
 800afc2:	2000      	movs	r0, #0
 800afc4:	f04f 0c0a 	mov.w	ip, #10
 800afc8:	4621      	mov	r1, r4
 800afca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afce:	3b30      	subs	r3, #48	; 0x30
 800afd0:	2b09      	cmp	r3, #9
 800afd2:	d94e      	bls.n	800b072 <_svfiprintf_r+0x17e>
 800afd4:	b1b0      	cbz	r0, 800b004 <_svfiprintf_r+0x110>
 800afd6:	9207      	str	r2, [sp, #28]
 800afd8:	e014      	b.n	800b004 <_svfiprintf_r+0x110>
 800afda:	eba0 0308 	sub.w	r3, r0, r8
 800afde:	fa09 f303 	lsl.w	r3, r9, r3
 800afe2:	4313      	orrs	r3, r2
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	46a2      	mov	sl, r4
 800afe8:	e7d2      	b.n	800af90 <_svfiprintf_r+0x9c>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	1d19      	adds	r1, r3, #4
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	9103      	str	r1, [sp, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfbb      	ittet	lt
 800aff6:	425b      	neglt	r3, r3
 800aff8:	f042 0202 	orrlt.w	r2, r2, #2
 800affc:	9307      	strge	r3, [sp, #28]
 800affe:	9307      	strlt	r3, [sp, #28]
 800b000:	bfb8      	it	lt
 800b002:	9204      	strlt	r2, [sp, #16]
 800b004:	7823      	ldrb	r3, [r4, #0]
 800b006:	2b2e      	cmp	r3, #46	; 0x2e
 800b008:	d10c      	bne.n	800b024 <_svfiprintf_r+0x130>
 800b00a:	7863      	ldrb	r3, [r4, #1]
 800b00c:	2b2a      	cmp	r3, #42	; 0x2a
 800b00e:	d135      	bne.n	800b07c <_svfiprintf_r+0x188>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	1d1a      	adds	r2, r3, #4
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	9203      	str	r2, [sp, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bfb8      	it	lt
 800b01c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b020:	3402      	adds	r4, #2
 800b022:	9305      	str	r3, [sp, #20]
 800b024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0f0 <_svfiprintf_r+0x1fc>
 800b028:	7821      	ldrb	r1, [r4, #0]
 800b02a:	2203      	movs	r2, #3
 800b02c:	4650      	mov	r0, sl
 800b02e:	f7f5 f8df 	bl	80001f0 <memchr>
 800b032:	b140      	cbz	r0, 800b046 <_svfiprintf_r+0x152>
 800b034:	2340      	movs	r3, #64	; 0x40
 800b036:	eba0 000a 	sub.w	r0, r0, sl
 800b03a:	fa03 f000 	lsl.w	r0, r3, r0
 800b03e:	9b04      	ldr	r3, [sp, #16]
 800b040:	4303      	orrs	r3, r0
 800b042:	3401      	adds	r4, #1
 800b044:	9304      	str	r3, [sp, #16]
 800b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04a:	4826      	ldr	r0, [pc, #152]	; (800b0e4 <_svfiprintf_r+0x1f0>)
 800b04c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b050:	2206      	movs	r2, #6
 800b052:	f7f5 f8cd 	bl	80001f0 <memchr>
 800b056:	2800      	cmp	r0, #0
 800b058:	d038      	beq.n	800b0cc <_svfiprintf_r+0x1d8>
 800b05a:	4b23      	ldr	r3, [pc, #140]	; (800b0e8 <_svfiprintf_r+0x1f4>)
 800b05c:	bb1b      	cbnz	r3, 800b0a6 <_svfiprintf_r+0x1b2>
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	3307      	adds	r3, #7
 800b062:	f023 0307 	bic.w	r3, r3, #7
 800b066:	3308      	adds	r3, #8
 800b068:	9303      	str	r3, [sp, #12]
 800b06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b06c:	4433      	add	r3, r6
 800b06e:	9309      	str	r3, [sp, #36]	; 0x24
 800b070:	e767      	b.n	800af42 <_svfiprintf_r+0x4e>
 800b072:	fb0c 3202 	mla	r2, ip, r2, r3
 800b076:	460c      	mov	r4, r1
 800b078:	2001      	movs	r0, #1
 800b07a:	e7a5      	b.n	800afc8 <_svfiprintf_r+0xd4>
 800b07c:	2300      	movs	r3, #0
 800b07e:	3401      	adds	r4, #1
 800b080:	9305      	str	r3, [sp, #20]
 800b082:	4619      	mov	r1, r3
 800b084:	f04f 0c0a 	mov.w	ip, #10
 800b088:	4620      	mov	r0, r4
 800b08a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b08e:	3a30      	subs	r2, #48	; 0x30
 800b090:	2a09      	cmp	r2, #9
 800b092:	d903      	bls.n	800b09c <_svfiprintf_r+0x1a8>
 800b094:	2b00      	cmp	r3, #0
 800b096:	d0c5      	beq.n	800b024 <_svfiprintf_r+0x130>
 800b098:	9105      	str	r1, [sp, #20]
 800b09a:	e7c3      	b.n	800b024 <_svfiprintf_r+0x130>
 800b09c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e7f0      	b.n	800b088 <_svfiprintf_r+0x194>
 800b0a6:	ab03      	add	r3, sp, #12
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	462a      	mov	r2, r5
 800b0ac:	4b0f      	ldr	r3, [pc, #60]	; (800b0ec <_svfiprintf_r+0x1f8>)
 800b0ae:	a904      	add	r1, sp, #16
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f3af 8000 	nop.w
 800b0b6:	1c42      	adds	r2, r0, #1
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	d1d6      	bne.n	800b06a <_svfiprintf_r+0x176>
 800b0bc:	89ab      	ldrh	r3, [r5, #12]
 800b0be:	065b      	lsls	r3, r3, #25
 800b0c0:	f53f af2c 	bmi.w	800af1c <_svfiprintf_r+0x28>
 800b0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0c6:	b01d      	add	sp, #116	; 0x74
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	ab03      	add	r3, sp, #12
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	4b06      	ldr	r3, [pc, #24]	; (800b0ec <_svfiprintf_r+0x1f8>)
 800b0d4:	a904      	add	r1, sp, #16
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f000 f87a 	bl	800b1d0 <_printf_i>
 800b0dc:	e7eb      	b.n	800b0b6 <_svfiprintf_r+0x1c2>
 800b0de:	bf00      	nop
 800b0e0:	0800bd4d 	.word	0x0800bd4d
 800b0e4:	0800bd57 	.word	0x0800bd57
 800b0e8:	00000000 	.word	0x00000000
 800b0ec:	0800ae3d 	.word	0x0800ae3d
 800b0f0:	0800bd53 	.word	0x0800bd53

0800b0f4 <_printf_common>:
 800b0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f8:	4616      	mov	r6, r2
 800b0fa:	4699      	mov	r9, r3
 800b0fc:	688a      	ldr	r2, [r1, #8]
 800b0fe:	690b      	ldr	r3, [r1, #16]
 800b100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b104:	4293      	cmp	r3, r2
 800b106:	bfb8      	it	lt
 800b108:	4613      	movlt	r3, r2
 800b10a:	6033      	str	r3, [r6, #0]
 800b10c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b110:	4607      	mov	r7, r0
 800b112:	460c      	mov	r4, r1
 800b114:	b10a      	cbz	r2, 800b11a <_printf_common+0x26>
 800b116:	3301      	adds	r3, #1
 800b118:	6033      	str	r3, [r6, #0]
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	0699      	lsls	r1, r3, #26
 800b11e:	bf42      	ittt	mi
 800b120:	6833      	ldrmi	r3, [r6, #0]
 800b122:	3302      	addmi	r3, #2
 800b124:	6033      	strmi	r3, [r6, #0]
 800b126:	6825      	ldr	r5, [r4, #0]
 800b128:	f015 0506 	ands.w	r5, r5, #6
 800b12c:	d106      	bne.n	800b13c <_printf_common+0x48>
 800b12e:	f104 0a19 	add.w	sl, r4, #25
 800b132:	68e3      	ldr	r3, [r4, #12]
 800b134:	6832      	ldr	r2, [r6, #0]
 800b136:	1a9b      	subs	r3, r3, r2
 800b138:	42ab      	cmp	r3, r5
 800b13a:	dc26      	bgt.n	800b18a <_printf_common+0x96>
 800b13c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b140:	1e13      	subs	r3, r2, #0
 800b142:	6822      	ldr	r2, [r4, #0]
 800b144:	bf18      	it	ne
 800b146:	2301      	movne	r3, #1
 800b148:	0692      	lsls	r2, r2, #26
 800b14a:	d42b      	bmi.n	800b1a4 <_printf_common+0xb0>
 800b14c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b150:	4649      	mov	r1, r9
 800b152:	4638      	mov	r0, r7
 800b154:	47c0      	blx	r8
 800b156:	3001      	adds	r0, #1
 800b158:	d01e      	beq.n	800b198 <_printf_common+0xa4>
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	68e5      	ldr	r5, [r4, #12]
 800b15e:	6832      	ldr	r2, [r6, #0]
 800b160:	f003 0306 	and.w	r3, r3, #6
 800b164:	2b04      	cmp	r3, #4
 800b166:	bf08      	it	eq
 800b168:	1aad      	subeq	r5, r5, r2
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	6922      	ldr	r2, [r4, #16]
 800b16e:	bf0c      	ite	eq
 800b170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b174:	2500      	movne	r5, #0
 800b176:	4293      	cmp	r3, r2
 800b178:	bfc4      	itt	gt
 800b17a:	1a9b      	subgt	r3, r3, r2
 800b17c:	18ed      	addgt	r5, r5, r3
 800b17e:	2600      	movs	r6, #0
 800b180:	341a      	adds	r4, #26
 800b182:	42b5      	cmp	r5, r6
 800b184:	d11a      	bne.n	800b1bc <_printf_common+0xc8>
 800b186:	2000      	movs	r0, #0
 800b188:	e008      	b.n	800b19c <_printf_common+0xa8>
 800b18a:	2301      	movs	r3, #1
 800b18c:	4652      	mov	r2, sl
 800b18e:	4649      	mov	r1, r9
 800b190:	4638      	mov	r0, r7
 800b192:	47c0      	blx	r8
 800b194:	3001      	adds	r0, #1
 800b196:	d103      	bne.n	800b1a0 <_printf_common+0xac>
 800b198:	f04f 30ff 	mov.w	r0, #4294967295
 800b19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a0:	3501      	adds	r5, #1
 800b1a2:	e7c6      	b.n	800b132 <_printf_common+0x3e>
 800b1a4:	18e1      	adds	r1, r4, r3
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	2030      	movs	r0, #48	; 0x30
 800b1aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1ae:	4422      	add	r2, r4
 800b1b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1b8:	3302      	adds	r3, #2
 800b1ba:	e7c7      	b.n	800b14c <_printf_common+0x58>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	4622      	mov	r2, r4
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	47c0      	blx	r8
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	d0e6      	beq.n	800b198 <_printf_common+0xa4>
 800b1ca:	3601      	adds	r6, #1
 800b1cc:	e7d9      	b.n	800b182 <_printf_common+0x8e>
	...

0800b1d0 <_printf_i>:
 800b1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d4:	7e0f      	ldrb	r7, [r1, #24]
 800b1d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1d8:	2f78      	cmp	r7, #120	; 0x78
 800b1da:	4691      	mov	r9, r2
 800b1dc:	4680      	mov	r8, r0
 800b1de:	460c      	mov	r4, r1
 800b1e0:	469a      	mov	sl, r3
 800b1e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1e6:	d807      	bhi.n	800b1f8 <_printf_i+0x28>
 800b1e8:	2f62      	cmp	r7, #98	; 0x62
 800b1ea:	d80a      	bhi.n	800b202 <_printf_i+0x32>
 800b1ec:	2f00      	cmp	r7, #0
 800b1ee:	f000 80d8 	beq.w	800b3a2 <_printf_i+0x1d2>
 800b1f2:	2f58      	cmp	r7, #88	; 0x58
 800b1f4:	f000 80a3 	beq.w	800b33e <_printf_i+0x16e>
 800b1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b200:	e03a      	b.n	800b278 <_printf_i+0xa8>
 800b202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b206:	2b15      	cmp	r3, #21
 800b208:	d8f6      	bhi.n	800b1f8 <_printf_i+0x28>
 800b20a:	a101      	add	r1, pc, #4	; (adr r1, 800b210 <_printf_i+0x40>)
 800b20c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b210:	0800b269 	.word	0x0800b269
 800b214:	0800b27d 	.word	0x0800b27d
 800b218:	0800b1f9 	.word	0x0800b1f9
 800b21c:	0800b1f9 	.word	0x0800b1f9
 800b220:	0800b1f9 	.word	0x0800b1f9
 800b224:	0800b1f9 	.word	0x0800b1f9
 800b228:	0800b27d 	.word	0x0800b27d
 800b22c:	0800b1f9 	.word	0x0800b1f9
 800b230:	0800b1f9 	.word	0x0800b1f9
 800b234:	0800b1f9 	.word	0x0800b1f9
 800b238:	0800b1f9 	.word	0x0800b1f9
 800b23c:	0800b389 	.word	0x0800b389
 800b240:	0800b2ad 	.word	0x0800b2ad
 800b244:	0800b36b 	.word	0x0800b36b
 800b248:	0800b1f9 	.word	0x0800b1f9
 800b24c:	0800b1f9 	.word	0x0800b1f9
 800b250:	0800b3ab 	.word	0x0800b3ab
 800b254:	0800b1f9 	.word	0x0800b1f9
 800b258:	0800b2ad 	.word	0x0800b2ad
 800b25c:	0800b1f9 	.word	0x0800b1f9
 800b260:	0800b1f9 	.word	0x0800b1f9
 800b264:	0800b373 	.word	0x0800b373
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	1d1a      	adds	r2, r3, #4
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	602a      	str	r2, [r5, #0]
 800b270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b278:	2301      	movs	r3, #1
 800b27a:	e0a3      	b.n	800b3c4 <_printf_i+0x1f4>
 800b27c:	6820      	ldr	r0, [r4, #0]
 800b27e:	6829      	ldr	r1, [r5, #0]
 800b280:	0606      	lsls	r6, r0, #24
 800b282:	f101 0304 	add.w	r3, r1, #4
 800b286:	d50a      	bpl.n	800b29e <_printf_i+0xce>
 800b288:	680e      	ldr	r6, [r1, #0]
 800b28a:	602b      	str	r3, [r5, #0]
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	da03      	bge.n	800b298 <_printf_i+0xc8>
 800b290:	232d      	movs	r3, #45	; 0x2d
 800b292:	4276      	negs	r6, r6
 800b294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b298:	485e      	ldr	r0, [pc, #376]	; (800b414 <_printf_i+0x244>)
 800b29a:	230a      	movs	r3, #10
 800b29c:	e019      	b.n	800b2d2 <_printf_i+0x102>
 800b29e:	680e      	ldr	r6, [r1, #0]
 800b2a0:	602b      	str	r3, [r5, #0]
 800b2a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2a6:	bf18      	it	ne
 800b2a8:	b236      	sxthne	r6, r6
 800b2aa:	e7ef      	b.n	800b28c <_printf_i+0xbc>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	6820      	ldr	r0, [r4, #0]
 800b2b0:	1d19      	adds	r1, r3, #4
 800b2b2:	6029      	str	r1, [r5, #0]
 800b2b4:	0601      	lsls	r1, r0, #24
 800b2b6:	d501      	bpl.n	800b2bc <_printf_i+0xec>
 800b2b8:	681e      	ldr	r6, [r3, #0]
 800b2ba:	e002      	b.n	800b2c2 <_printf_i+0xf2>
 800b2bc:	0646      	lsls	r6, r0, #25
 800b2be:	d5fb      	bpl.n	800b2b8 <_printf_i+0xe8>
 800b2c0:	881e      	ldrh	r6, [r3, #0]
 800b2c2:	4854      	ldr	r0, [pc, #336]	; (800b414 <_printf_i+0x244>)
 800b2c4:	2f6f      	cmp	r7, #111	; 0x6f
 800b2c6:	bf0c      	ite	eq
 800b2c8:	2308      	moveq	r3, #8
 800b2ca:	230a      	movne	r3, #10
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2d2:	6865      	ldr	r5, [r4, #4]
 800b2d4:	60a5      	str	r5, [r4, #8]
 800b2d6:	2d00      	cmp	r5, #0
 800b2d8:	bfa2      	ittt	ge
 800b2da:	6821      	ldrge	r1, [r4, #0]
 800b2dc:	f021 0104 	bicge.w	r1, r1, #4
 800b2e0:	6021      	strge	r1, [r4, #0]
 800b2e2:	b90e      	cbnz	r6, 800b2e8 <_printf_i+0x118>
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	d04d      	beq.n	800b384 <_printf_i+0x1b4>
 800b2e8:	4615      	mov	r5, r2
 800b2ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2ee:	fb03 6711 	mls	r7, r3, r1, r6
 800b2f2:	5dc7      	ldrb	r7, [r0, r7]
 800b2f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2f8:	4637      	mov	r7, r6
 800b2fa:	42bb      	cmp	r3, r7
 800b2fc:	460e      	mov	r6, r1
 800b2fe:	d9f4      	bls.n	800b2ea <_printf_i+0x11a>
 800b300:	2b08      	cmp	r3, #8
 800b302:	d10b      	bne.n	800b31c <_printf_i+0x14c>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	07de      	lsls	r6, r3, #31
 800b308:	d508      	bpl.n	800b31c <_printf_i+0x14c>
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	6861      	ldr	r1, [r4, #4]
 800b30e:	4299      	cmp	r1, r3
 800b310:	bfde      	ittt	le
 800b312:	2330      	movle	r3, #48	; 0x30
 800b314:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b318:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b31c:	1b52      	subs	r2, r2, r5
 800b31e:	6122      	str	r2, [r4, #16]
 800b320:	f8cd a000 	str.w	sl, [sp]
 800b324:	464b      	mov	r3, r9
 800b326:	aa03      	add	r2, sp, #12
 800b328:	4621      	mov	r1, r4
 800b32a:	4640      	mov	r0, r8
 800b32c:	f7ff fee2 	bl	800b0f4 <_printf_common>
 800b330:	3001      	adds	r0, #1
 800b332:	d14c      	bne.n	800b3ce <_printf_i+0x1fe>
 800b334:	f04f 30ff 	mov.w	r0, #4294967295
 800b338:	b004      	add	sp, #16
 800b33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33e:	4835      	ldr	r0, [pc, #212]	; (800b414 <_printf_i+0x244>)
 800b340:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b344:	6829      	ldr	r1, [r5, #0]
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	f851 6b04 	ldr.w	r6, [r1], #4
 800b34c:	6029      	str	r1, [r5, #0]
 800b34e:	061d      	lsls	r5, r3, #24
 800b350:	d514      	bpl.n	800b37c <_printf_i+0x1ac>
 800b352:	07df      	lsls	r7, r3, #31
 800b354:	bf44      	itt	mi
 800b356:	f043 0320 	orrmi.w	r3, r3, #32
 800b35a:	6023      	strmi	r3, [r4, #0]
 800b35c:	b91e      	cbnz	r6, 800b366 <_printf_i+0x196>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	f023 0320 	bic.w	r3, r3, #32
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	2310      	movs	r3, #16
 800b368:	e7b0      	b.n	800b2cc <_printf_i+0xfc>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	f043 0320 	orr.w	r3, r3, #32
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	2378      	movs	r3, #120	; 0x78
 800b374:	4828      	ldr	r0, [pc, #160]	; (800b418 <_printf_i+0x248>)
 800b376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b37a:	e7e3      	b.n	800b344 <_printf_i+0x174>
 800b37c:	0659      	lsls	r1, r3, #25
 800b37e:	bf48      	it	mi
 800b380:	b2b6      	uxthmi	r6, r6
 800b382:	e7e6      	b.n	800b352 <_printf_i+0x182>
 800b384:	4615      	mov	r5, r2
 800b386:	e7bb      	b.n	800b300 <_printf_i+0x130>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	6826      	ldr	r6, [r4, #0]
 800b38c:	6961      	ldr	r1, [r4, #20]
 800b38e:	1d18      	adds	r0, r3, #4
 800b390:	6028      	str	r0, [r5, #0]
 800b392:	0635      	lsls	r5, r6, #24
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	d501      	bpl.n	800b39c <_printf_i+0x1cc>
 800b398:	6019      	str	r1, [r3, #0]
 800b39a:	e002      	b.n	800b3a2 <_printf_i+0x1d2>
 800b39c:	0670      	lsls	r0, r6, #25
 800b39e:	d5fb      	bpl.n	800b398 <_printf_i+0x1c8>
 800b3a0:	8019      	strh	r1, [r3, #0]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	6123      	str	r3, [r4, #16]
 800b3a6:	4615      	mov	r5, r2
 800b3a8:	e7ba      	b.n	800b320 <_printf_i+0x150>
 800b3aa:	682b      	ldr	r3, [r5, #0]
 800b3ac:	1d1a      	adds	r2, r3, #4
 800b3ae:	602a      	str	r2, [r5, #0]
 800b3b0:	681d      	ldr	r5, [r3, #0]
 800b3b2:	6862      	ldr	r2, [r4, #4]
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f7f4 ff1a 	bl	80001f0 <memchr>
 800b3bc:	b108      	cbz	r0, 800b3c2 <_printf_i+0x1f2>
 800b3be:	1b40      	subs	r0, r0, r5
 800b3c0:	6060      	str	r0, [r4, #4]
 800b3c2:	6863      	ldr	r3, [r4, #4]
 800b3c4:	6123      	str	r3, [r4, #16]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3cc:	e7a8      	b.n	800b320 <_printf_i+0x150>
 800b3ce:	6923      	ldr	r3, [r4, #16]
 800b3d0:	462a      	mov	r2, r5
 800b3d2:	4649      	mov	r1, r9
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	47d0      	blx	sl
 800b3d8:	3001      	adds	r0, #1
 800b3da:	d0ab      	beq.n	800b334 <_printf_i+0x164>
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	079b      	lsls	r3, r3, #30
 800b3e0:	d413      	bmi.n	800b40a <_printf_i+0x23a>
 800b3e2:	68e0      	ldr	r0, [r4, #12]
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	4298      	cmp	r0, r3
 800b3e8:	bfb8      	it	lt
 800b3ea:	4618      	movlt	r0, r3
 800b3ec:	e7a4      	b.n	800b338 <_printf_i+0x168>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4632      	mov	r2, r6
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	47d0      	blx	sl
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d09b      	beq.n	800b334 <_printf_i+0x164>
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	68e3      	ldr	r3, [r4, #12]
 800b400:	9903      	ldr	r1, [sp, #12]
 800b402:	1a5b      	subs	r3, r3, r1
 800b404:	42ab      	cmp	r3, r5
 800b406:	dcf2      	bgt.n	800b3ee <_printf_i+0x21e>
 800b408:	e7eb      	b.n	800b3e2 <_printf_i+0x212>
 800b40a:	2500      	movs	r5, #0
 800b40c:	f104 0619 	add.w	r6, r4, #25
 800b410:	e7f5      	b.n	800b3fe <_printf_i+0x22e>
 800b412:	bf00      	nop
 800b414:	0800bd5e 	.word	0x0800bd5e
 800b418:	0800bd6f 	.word	0x0800bd6f

0800b41c <memmove>:
 800b41c:	4288      	cmp	r0, r1
 800b41e:	b510      	push	{r4, lr}
 800b420:	eb01 0402 	add.w	r4, r1, r2
 800b424:	d902      	bls.n	800b42c <memmove+0x10>
 800b426:	4284      	cmp	r4, r0
 800b428:	4623      	mov	r3, r4
 800b42a:	d807      	bhi.n	800b43c <memmove+0x20>
 800b42c:	1e43      	subs	r3, r0, #1
 800b42e:	42a1      	cmp	r1, r4
 800b430:	d008      	beq.n	800b444 <memmove+0x28>
 800b432:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b43a:	e7f8      	b.n	800b42e <memmove+0x12>
 800b43c:	4402      	add	r2, r0
 800b43e:	4601      	mov	r1, r0
 800b440:	428a      	cmp	r2, r1
 800b442:	d100      	bne.n	800b446 <memmove+0x2a>
 800b444:	bd10      	pop	{r4, pc}
 800b446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b44a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b44e:	e7f7      	b.n	800b440 <memmove+0x24>

0800b450 <_free_r>:
 800b450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b452:	2900      	cmp	r1, #0
 800b454:	d044      	beq.n	800b4e0 <_free_r+0x90>
 800b456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b45a:	9001      	str	r0, [sp, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f1a1 0404 	sub.w	r4, r1, #4
 800b462:	bfb8      	it	lt
 800b464:	18e4      	addlt	r4, r4, r3
 800b466:	f000 f913 	bl	800b690 <__malloc_lock>
 800b46a:	4a1e      	ldr	r2, [pc, #120]	; (800b4e4 <_free_r+0x94>)
 800b46c:	9801      	ldr	r0, [sp, #4]
 800b46e:	6813      	ldr	r3, [r2, #0]
 800b470:	b933      	cbnz	r3, 800b480 <_free_r+0x30>
 800b472:	6063      	str	r3, [r4, #4]
 800b474:	6014      	str	r4, [r2, #0]
 800b476:	b003      	add	sp, #12
 800b478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b47c:	f000 b90e 	b.w	800b69c <__malloc_unlock>
 800b480:	42a3      	cmp	r3, r4
 800b482:	d908      	bls.n	800b496 <_free_r+0x46>
 800b484:	6825      	ldr	r5, [r4, #0]
 800b486:	1961      	adds	r1, r4, r5
 800b488:	428b      	cmp	r3, r1
 800b48a:	bf01      	itttt	eq
 800b48c:	6819      	ldreq	r1, [r3, #0]
 800b48e:	685b      	ldreq	r3, [r3, #4]
 800b490:	1949      	addeq	r1, r1, r5
 800b492:	6021      	streq	r1, [r4, #0]
 800b494:	e7ed      	b.n	800b472 <_free_r+0x22>
 800b496:	461a      	mov	r2, r3
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	b10b      	cbz	r3, 800b4a0 <_free_r+0x50>
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	d9fa      	bls.n	800b496 <_free_r+0x46>
 800b4a0:	6811      	ldr	r1, [r2, #0]
 800b4a2:	1855      	adds	r5, r2, r1
 800b4a4:	42a5      	cmp	r5, r4
 800b4a6:	d10b      	bne.n	800b4c0 <_free_r+0x70>
 800b4a8:	6824      	ldr	r4, [r4, #0]
 800b4aa:	4421      	add	r1, r4
 800b4ac:	1854      	adds	r4, r2, r1
 800b4ae:	42a3      	cmp	r3, r4
 800b4b0:	6011      	str	r1, [r2, #0]
 800b4b2:	d1e0      	bne.n	800b476 <_free_r+0x26>
 800b4b4:	681c      	ldr	r4, [r3, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	6053      	str	r3, [r2, #4]
 800b4ba:	4421      	add	r1, r4
 800b4bc:	6011      	str	r1, [r2, #0]
 800b4be:	e7da      	b.n	800b476 <_free_r+0x26>
 800b4c0:	d902      	bls.n	800b4c8 <_free_r+0x78>
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	6003      	str	r3, [r0, #0]
 800b4c6:	e7d6      	b.n	800b476 <_free_r+0x26>
 800b4c8:	6825      	ldr	r5, [r4, #0]
 800b4ca:	1961      	adds	r1, r4, r5
 800b4cc:	428b      	cmp	r3, r1
 800b4ce:	bf04      	itt	eq
 800b4d0:	6819      	ldreq	r1, [r3, #0]
 800b4d2:	685b      	ldreq	r3, [r3, #4]
 800b4d4:	6063      	str	r3, [r4, #4]
 800b4d6:	bf04      	itt	eq
 800b4d8:	1949      	addeq	r1, r1, r5
 800b4da:	6021      	streq	r1, [r4, #0]
 800b4dc:	6054      	str	r4, [r2, #4]
 800b4de:	e7ca      	b.n	800b476 <_free_r+0x26>
 800b4e0:	b003      	add	sp, #12
 800b4e2:	bd30      	pop	{r4, r5, pc}
 800b4e4:	200027e4 	.word	0x200027e4

0800b4e8 <sbrk_aligned>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4e0e      	ldr	r6, [pc, #56]	; (800b524 <sbrk_aligned+0x3c>)
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	6831      	ldr	r1, [r6, #0]
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	b911      	cbnz	r1, 800b4fa <sbrk_aligned+0x12>
 800b4f4:	f000 f8bc 	bl	800b670 <_sbrk_r>
 800b4f8:	6030      	str	r0, [r6, #0]
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f000 f8b7 	bl	800b670 <_sbrk_r>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	d00a      	beq.n	800b51c <sbrk_aligned+0x34>
 800b506:	1cc4      	adds	r4, r0, #3
 800b508:	f024 0403 	bic.w	r4, r4, #3
 800b50c:	42a0      	cmp	r0, r4
 800b50e:	d007      	beq.n	800b520 <sbrk_aligned+0x38>
 800b510:	1a21      	subs	r1, r4, r0
 800b512:	4628      	mov	r0, r5
 800b514:	f000 f8ac 	bl	800b670 <_sbrk_r>
 800b518:	3001      	adds	r0, #1
 800b51a:	d101      	bne.n	800b520 <sbrk_aligned+0x38>
 800b51c:	f04f 34ff 	mov.w	r4, #4294967295
 800b520:	4620      	mov	r0, r4
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	200027e8 	.word	0x200027e8

0800b528 <_malloc_r>:
 800b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52c:	1ccd      	adds	r5, r1, #3
 800b52e:	f025 0503 	bic.w	r5, r5, #3
 800b532:	3508      	adds	r5, #8
 800b534:	2d0c      	cmp	r5, #12
 800b536:	bf38      	it	cc
 800b538:	250c      	movcc	r5, #12
 800b53a:	2d00      	cmp	r5, #0
 800b53c:	4607      	mov	r7, r0
 800b53e:	db01      	blt.n	800b544 <_malloc_r+0x1c>
 800b540:	42a9      	cmp	r1, r5
 800b542:	d905      	bls.n	800b550 <_malloc_r+0x28>
 800b544:	230c      	movs	r3, #12
 800b546:	603b      	str	r3, [r7, #0]
 800b548:	2600      	movs	r6, #0
 800b54a:	4630      	mov	r0, r6
 800b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b550:	4e2e      	ldr	r6, [pc, #184]	; (800b60c <_malloc_r+0xe4>)
 800b552:	f000 f89d 	bl	800b690 <__malloc_lock>
 800b556:	6833      	ldr	r3, [r6, #0]
 800b558:	461c      	mov	r4, r3
 800b55a:	bb34      	cbnz	r4, 800b5aa <_malloc_r+0x82>
 800b55c:	4629      	mov	r1, r5
 800b55e:	4638      	mov	r0, r7
 800b560:	f7ff ffc2 	bl	800b4e8 <sbrk_aligned>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	4604      	mov	r4, r0
 800b568:	d14d      	bne.n	800b606 <_malloc_r+0xde>
 800b56a:	6834      	ldr	r4, [r6, #0]
 800b56c:	4626      	mov	r6, r4
 800b56e:	2e00      	cmp	r6, #0
 800b570:	d140      	bne.n	800b5f4 <_malloc_r+0xcc>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	4631      	mov	r1, r6
 800b576:	4638      	mov	r0, r7
 800b578:	eb04 0803 	add.w	r8, r4, r3
 800b57c:	f000 f878 	bl	800b670 <_sbrk_r>
 800b580:	4580      	cmp	r8, r0
 800b582:	d13a      	bne.n	800b5fa <_malloc_r+0xd2>
 800b584:	6821      	ldr	r1, [r4, #0]
 800b586:	3503      	adds	r5, #3
 800b588:	1a6d      	subs	r5, r5, r1
 800b58a:	f025 0503 	bic.w	r5, r5, #3
 800b58e:	3508      	adds	r5, #8
 800b590:	2d0c      	cmp	r5, #12
 800b592:	bf38      	it	cc
 800b594:	250c      	movcc	r5, #12
 800b596:	4629      	mov	r1, r5
 800b598:	4638      	mov	r0, r7
 800b59a:	f7ff ffa5 	bl	800b4e8 <sbrk_aligned>
 800b59e:	3001      	adds	r0, #1
 800b5a0:	d02b      	beq.n	800b5fa <_malloc_r+0xd2>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	442b      	add	r3, r5
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	e00e      	b.n	800b5c8 <_malloc_r+0xa0>
 800b5aa:	6822      	ldr	r2, [r4, #0]
 800b5ac:	1b52      	subs	r2, r2, r5
 800b5ae:	d41e      	bmi.n	800b5ee <_malloc_r+0xc6>
 800b5b0:	2a0b      	cmp	r2, #11
 800b5b2:	d916      	bls.n	800b5e2 <_malloc_r+0xba>
 800b5b4:	1961      	adds	r1, r4, r5
 800b5b6:	42a3      	cmp	r3, r4
 800b5b8:	6025      	str	r5, [r4, #0]
 800b5ba:	bf18      	it	ne
 800b5bc:	6059      	strne	r1, [r3, #4]
 800b5be:	6863      	ldr	r3, [r4, #4]
 800b5c0:	bf08      	it	eq
 800b5c2:	6031      	streq	r1, [r6, #0]
 800b5c4:	5162      	str	r2, [r4, r5]
 800b5c6:	604b      	str	r3, [r1, #4]
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f104 060b 	add.w	r6, r4, #11
 800b5ce:	f000 f865 	bl	800b69c <__malloc_unlock>
 800b5d2:	f026 0607 	bic.w	r6, r6, #7
 800b5d6:	1d23      	adds	r3, r4, #4
 800b5d8:	1af2      	subs	r2, r6, r3
 800b5da:	d0b6      	beq.n	800b54a <_malloc_r+0x22>
 800b5dc:	1b9b      	subs	r3, r3, r6
 800b5de:	50a3      	str	r3, [r4, r2]
 800b5e0:	e7b3      	b.n	800b54a <_malloc_r+0x22>
 800b5e2:	6862      	ldr	r2, [r4, #4]
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	bf0c      	ite	eq
 800b5e8:	6032      	streq	r2, [r6, #0]
 800b5ea:	605a      	strne	r2, [r3, #4]
 800b5ec:	e7ec      	b.n	800b5c8 <_malloc_r+0xa0>
 800b5ee:	4623      	mov	r3, r4
 800b5f0:	6864      	ldr	r4, [r4, #4]
 800b5f2:	e7b2      	b.n	800b55a <_malloc_r+0x32>
 800b5f4:	4634      	mov	r4, r6
 800b5f6:	6876      	ldr	r6, [r6, #4]
 800b5f8:	e7b9      	b.n	800b56e <_malloc_r+0x46>
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	603b      	str	r3, [r7, #0]
 800b5fe:	4638      	mov	r0, r7
 800b600:	f000 f84c 	bl	800b69c <__malloc_unlock>
 800b604:	e7a1      	b.n	800b54a <_malloc_r+0x22>
 800b606:	6025      	str	r5, [r4, #0]
 800b608:	e7de      	b.n	800b5c8 <_malloc_r+0xa0>
 800b60a:	bf00      	nop
 800b60c:	200027e4 	.word	0x200027e4

0800b610 <_realloc_r>:
 800b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b614:	4680      	mov	r8, r0
 800b616:	4614      	mov	r4, r2
 800b618:	460e      	mov	r6, r1
 800b61a:	b921      	cbnz	r1, 800b626 <_realloc_r+0x16>
 800b61c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	4611      	mov	r1, r2
 800b622:	f7ff bf81 	b.w	800b528 <_malloc_r>
 800b626:	b92a      	cbnz	r2, 800b634 <_realloc_r+0x24>
 800b628:	f7ff ff12 	bl	800b450 <_free_r>
 800b62c:	4625      	mov	r5, r4
 800b62e:	4628      	mov	r0, r5
 800b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b634:	f000 f838 	bl	800b6a8 <_malloc_usable_size_r>
 800b638:	4284      	cmp	r4, r0
 800b63a:	4607      	mov	r7, r0
 800b63c:	d802      	bhi.n	800b644 <_realloc_r+0x34>
 800b63e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b642:	d812      	bhi.n	800b66a <_realloc_r+0x5a>
 800b644:	4621      	mov	r1, r4
 800b646:	4640      	mov	r0, r8
 800b648:	f7ff ff6e 	bl	800b528 <_malloc_r>
 800b64c:	4605      	mov	r5, r0
 800b64e:	2800      	cmp	r0, #0
 800b650:	d0ed      	beq.n	800b62e <_realloc_r+0x1e>
 800b652:	42bc      	cmp	r4, r7
 800b654:	4622      	mov	r2, r4
 800b656:	4631      	mov	r1, r6
 800b658:	bf28      	it	cs
 800b65a:	463a      	movcs	r2, r7
 800b65c:	f7ff fb0c 	bl	800ac78 <memcpy>
 800b660:	4631      	mov	r1, r6
 800b662:	4640      	mov	r0, r8
 800b664:	f7ff fef4 	bl	800b450 <_free_r>
 800b668:	e7e1      	b.n	800b62e <_realloc_r+0x1e>
 800b66a:	4635      	mov	r5, r6
 800b66c:	e7df      	b.n	800b62e <_realloc_r+0x1e>
	...

0800b670 <_sbrk_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d06      	ldr	r5, [pc, #24]	; (800b68c <_sbrk_r+0x1c>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	f7f6 fc6c 	bl	8001f58 <_sbrk>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_sbrk_r+0x1a>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_sbrk_r+0x1a>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	200027ec 	.word	0x200027ec

0800b690 <__malloc_lock>:
 800b690:	4801      	ldr	r0, [pc, #4]	; (800b698 <__malloc_lock+0x8>)
 800b692:	f000 b811 	b.w	800b6b8 <__retarget_lock_acquire_recursive>
 800b696:	bf00      	nop
 800b698:	200027f0 	.word	0x200027f0

0800b69c <__malloc_unlock>:
 800b69c:	4801      	ldr	r0, [pc, #4]	; (800b6a4 <__malloc_unlock+0x8>)
 800b69e:	f000 b80c 	b.w	800b6ba <__retarget_lock_release_recursive>
 800b6a2:	bf00      	nop
 800b6a4:	200027f0 	.word	0x200027f0

0800b6a8 <_malloc_usable_size_r>:
 800b6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ac:	1f18      	subs	r0, r3, #4
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	bfbc      	itt	lt
 800b6b2:	580b      	ldrlt	r3, [r1, r0]
 800b6b4:	18c0      	addlt	r0, r0, r3
 800b6b6:	4770      	bx	lr

0800b6b8 <__retarget_lock_acquire_recursive>:
 800b6b8:	4770      	bx	lr

0800b6ba <__retarget_lock_release_recursive>:
 800b6ba:	4770      	bx	lr

0800b6bc <_init>:
 800b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6be:	bf00      	nop
 800b6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c2:	bc08      	pop	{r3}
 800b6c4:	469e      	mov	lr, r3
 800b6c6:	4770      	bx	lr

0800b6c8 <_fini>:
 800b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ca:	bf00      	nop
 800b6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ce:	bc08      	pop	{r3}
 800b6d0:	469e      	mov	lr, r3
 800b6d2:	4770      	bx	lr
